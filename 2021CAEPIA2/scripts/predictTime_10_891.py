
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,455,468,464,447,429,445,448,479,447],
[436,0,460,417,416,439,430,466,460,449],
[423,431,0,407,451,417,381,411,453,437],
[427,474,484,0,433,452,445,457,484,433],
[444,475,440,458,0,447,465,459,486,451],
[462,452,474,439,444,0,430,452,452,436],
[446,461,510,446,426,461,0,436,441,466],
[443,425,480,434,432,439,455,0,455,461],
[412,431,438,407,405,439,450,436,0,413],
[444,442,454,458,440,455,425,430,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,440,441,451,459,435,460,440,453],
[437,0,431,445,436,423,428,453,434,439],
[451,460,0,449,441,456,427,460,450,450],
[450,446,442,0,441,425,428,468,447,443],
[440,455,450,450,0,449,450,475,459,442],
[432,468,435,466,442,0,433,446,445,456],
[456,463,464,463,441,458,0,480,465,471],
[431,438,431,423,416,445,411,0,447,433],
[451,457,441,444,432,446,426,444,0,451],
[438,452,441,448,449,435,420,458,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,416,469,424,465,430,405,459,416],
[447,0,424,461,442,474,447,439,451,457],
[475,467,0,471,484,490,437,461,499,448],
[422,430,420,0,414,452,450,424,424,430],
[467,449,407,477,0,472,465,438,455,445],
[426,417,401,439,419,0,409,400,432,417],
[461,444,454,441,426,482,0,464,462,437],
[486,452,430,467,453,491,427,0,455,396],
[432,440,392,467,436,459,429,436,0,431],
[475,434,443,461,446,474,454,495,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,466,473,447,455,459,431,441,482],
[419,0,460,444,452,438,436,421,439,463],
[425,431,0,448,422,430,442,423,414,471],
[418,447,443,0,433,452,448,454,433,490],
[444,439,469,458,0,434,439,445,410,460],
[436,453,461,439,457,0,472,443,457,475],
[432,455,449,443,452,419,0,458,435,480],
[460,470,468,437,446,448,433,0,418,478],
[450,452,477,458,481,434,456,473,0,469],
[409,428,420,401,431,416,411,413,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,401,418,428,402,410,496,459,435],
[443,0,485,380,427,429,419,441,444,465],
[490,406,0,455,489,452,451,478,511,463],
[473,511,436,0,487,510,505,493,484,483],
[463,464,402,404,0,408,428,447,462,441],
[489,462,439,381,483,0,417,467,444,451],
[481,472,440,386,463,474,0,457,430,444],
[395,450,413,398,444,424,434,0,429,450],
[432,447,380,407,429,447,461,462,0,454],
[456,426,428,408,450,440,447,441,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,398,396,397,414,414,407,399,412],
[461,0,451,429,423,446,437,452,437,432],
[493,440,0,421,445,451,434,435,466,477],
[495,462,470,0,449,434,474,460,464,462],
[494,468,446,442,0,496,482,500,458,489],
[477,445,440,457,395,0,425,448,434,440],
[477,454,457,417,409,466,0,460,411,429],
[484,439,456,431,391,443,431,0,453,443],
[492,454,425,427,433,457,480,438,0,457],
[479,459,414,429,402,451,462,448,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,418,422,427,443,424,432,429,435],
[475,0,458,442,447,452,455,446,455,459],
[473,433,0,435,460,472,441,465,462,465],
[469,449,456,0,437,442,432,457,456,439],
[464,444,431,454,0,440,455,464,468,462],
[448,439,419,449,451,0,434,448,466,447],
[467,436,450,459,436,457,0,449,460,460],
[459,445,426,434,427,443,442,0,445,443],
[462,436,429,435,423,425,431,446,0,427],
[456,432,426,452,429,444,431,448,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,447,487,455,454,453,433,446,420],
[452,0,408,463,437,443,446,441,429,434],
[444,483,0,448,439,425,433,458,453,457],
[404,428,443,0,435,445,408,443,419,402],
[436,454,452,456,0,428,374,454,445,412],
[437,448,466,446,463,0,429,435,436,462],
[438,445,458,483,517,462,0,462,439,442],
[458,450,433,448,437,456,429,0,428,433],
[445,462,438,472,446,455,452,463,0,453],
[471,457,434,489,479,429,449,458,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,451,457,424,435,473,445,457,451],
[461,0,430,489,453,435,467,424,460,477],
[440,461,0,456,457,425,454,439,453,491],
[434,402,435,0,357,414,452,414,426,457],
[467,438,434,534,0,460,490,478,460,487],
[456,456,466,477,431,0,431,467,480,471],
[418,424,437,439,401,460,0,443,441,453],
[446,467,452,477,413,424,448,0,453,460],
[434,431,438,465,431,411,450,438,0,424],
[440,414,400,434,404,420,438,431,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,483,439,474,431,436,438,465,498],
[422,0,413,462,454,400,407,425,415,423],
[408,478,0,446,451,451,437,436,485,480],
[452,429,445,0,443,413,408,446,461,441],
[417,437,440,448,0,413,401,413,436,445],
[460,491,440,478,478,0,444,445,475,485],
[455,484,454,483,490,447,0,441,436,472],
[453,466,455,445,478,446,450,0,437,475],
[426,476,406,430,455,416,455,454,0,468],
[393,468,411,450,446,406,419,416,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,484,440,453,472,429,456,465,464],
[446,0,485,436,476,453,430,448,463,454],
[407,406,0,429,408,429,410,421,428,449],
[451,455,462,0,471,445,436,458,461,467],
[438,415,483,420,0,430,447,442,440,465],
[419,438,462,446,461,0,429,441,441,468],
[462,461,481,455,444,462,0,442,445,468],
[435,443,470,433,449,450,449,0,472,434],
[426,428,463,430,451,450,446,419,0,472],
[427,437,442,424,426,423,423,457,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,460,426,418,426,463,431,387,412],
[500,0,499,504,482,462,495,480,477,443],
[431,392,0,440,413,400,459,443,434,367],
[465,387,451,0,420,444,466,455,430,447],
[473,409,478,471,0,415,482,441,440,420],
[465,429,491,447,476,0,457,476,469,436],
[428,396,432,425,409,434,0,473,419,394],
[460,411,448,436,450,415,418,0,442,411],
[504,414,457,461,451,422,472,449,0,404],
[479,448,524,444,471,455,497,480,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,428,506,461,426,485,457,479,436],
[391,0,417,457,467,430,450,459,445,430],
[463,474,0,499,484,440,476,473,485,430],
[385,434,392,0,425,389,427,415,444,427],
[430,424,407,466,0,414,461,453,473,451],
[465,461,451,502,477,0,439,432,466,439],
[406,441,415,464,430,452,0,415,422,397],
[434,432,418,476,438,459,476,0,470,459],
[412,446,406,447,418,425,469,421,0,437],
[455,461,461,464,440,452,494,432,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,428,438,442,440,470,423,460,426],
[438,0,441,463,457,457,473,473,463,450],
[463,450,0,438,464,470,485,470,471,449],
[453,428,453,0,458,454,462,453,446,425],
[449,434,427,433,0,415,443,402,469,461],
[451,434,421,437,476,0,471,426,469,413],
[421,418,406,429,448,420,0,415,437,409],
[468,418,421,438,489,465,476,0,485,445],
[431,428,420,445,422,422,454,406,0,432],
[465,441,442,466,430,478,482,446,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,453,474,441,447,465,427,471,449],
[464,0,457,524,496,459,456,430,520,418],
[438,434,0,476,480,481,462,418,515,487],
[417,367,415,0,451,446,463,363,413,404],
[450,395,411,440,0,432,486,394,504,436],
[444,432,410,445,459,0,473,436,470,440],
[426,435,429,428,405,418,0,384,443,459],
[464,461,473,528,497,455,507,0,472,433],
[420,371,376,478,387,421,448,419,0,394],
[442,473,404,487,455,451,432,458,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,400,445,378,485,399,474,532,414],
[418,0,438,408,417,417,369,456,528,439],
[491,453,0,506,473,443,441,458,524,420],
[446,483,385,0,490,492,472,512,475,395],
[513,474,418,401,0,441,383,416,494,366],
[406,474,448,399,450,0,421,472,476,439],
[492,522,450,419,508,470,0,554,556,478],
[417,435,433,379,475,419,337,0,501,393],
[359,363,367,416,397,415,335,390,0,318],
[477,452,471,496,525,452,413,498,573,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,456,465,464,466,451,443,463,454],
[431,0,434,447,463,428,436,439,429,425],
[435,457,0,450,467,423,458,449,449,432],
[426,444,441,0,476,444,438,439,434,436],
[427,428,424,415,0,431,416,434,435,431],
[425,463,468,447,460,0,444,464,459,451],
[440,455,433,453,475,447,0,433,439,432],
[448,452,442,452,457,427,458,0,453,430],
[428,462,442,457,456,432,452,438,0,443],
[437,466,459,455,460,440,459,461,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,432,462,423,453,444,451,430,474],
[429,0,384,427,397,432,416,439,403,427],
[459,507,0,514,451,461,469,494,433,513],
[429,464,377,0,434,434,390,449,404,439],
[468,494,440,457,0,434,446,465,451,437],
[438,459,430,457,457,0,421,438,437,451],
[447,475,422,501,445,470,0,479,437,455],
[440,452,397,442,426,453,412,0,421,428],
[461,488,458,487,440,454,454,470,0,495],
[417,464,378,452,454,440,436,463,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,451,459,466,418,468,440,454,441],
[412,0,408,431,441,426,436,419,420,416],
[440,483,0,460,469,447,473,475,447,454],
[432,460,431,0,451,423,465,425,437,432],
[425,450,422,440,0,411,437,437,420,432],
[473,465,444,468,480,0,466,459,448,449],
[423,455,418,426,454,425,0,446,434,421],
[451,472,416,466,454,432,445,0,432,439],
[437,471,444,454,471,443,457,459,0,439],
[450,475,437,459,459,442,470,452,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,439,470,449,457,463,408,425,438],
[446,0,438,472,435,454,435,448,414,442],
[452,453,0,473,448,462,467,418,439,451],
[421,419,418,0,414,434,432,441,401,431],
[442,456,443,477,0,473,443,417,436,447],
[434,437,429,457,418,0,441,403,425,439],
[428,456,424,459,448,450,0,454,452,433],
[483,443,473,450,474,488,437,0,440,470],
[466,477,452,490,455,466,439,451,0,435],
[453,449,440,460,444,452,458,421,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,445,427,449,447,438,445,421,449],
[478,0,465,432,455,465,458,425,462,457],
[446,426,0,458,454,434,458,449,441,444],
[464,459,433,0,467,445,465,469,429,473],
[442,436,437,424,0,426,462,450,453,461],
[444,426,457,446,465,0,477,449,436,439],
[453,433,433,426,429,414,0,446,421,447],
[446,466,442,422,441,442,445,0,446,463],
[470,429,450,462,438,455,470,445,0,470],
[442,434,447,418,430,452,444,428,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,464,435,453,445,432,479,421,450],
[453,0,458,430,446,430,435,468,417,459],
[427,433,0,430,438,411,419,468,429,450],
[456,461,461,0,465,455,439,496,435,470],
[438,445,453,426,0,450,447,496,425,472],
[446,461,480,436,441,0,451,489,447,488],
[459,456,472,452,444,440,0,480,445,454],
[412,423,423,395,395,402,411,0,392,429],
[470,474,462,456,466,444,446,499,0,486],
[441,432,441,421,419,403,437,462,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,452,464,447,437,442,443,439,451],
[468,0,442,454,444,465,452,449,440,460],
[439,449,0,436,451,449,452,432,440,449],
[427,437,455,0,438,439,465,439,454,478],
[444,447,440,453,0,447,460,432,439,465],
[454,426,442,452,444,0,420,442,445,441],
[449,439,439,426,431,471,0,417,438,457],
[448,442,459,452,459,449,474,0,466,462],
[452,451,451,437,452,446,453,425,0,475],
[440,431,442,413,426,450,434,429,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,439,446,439,452,436,475,479,449],
[471,0,468,435,447,464,456,494,467,471],
[452,423,0,424,451,440,443,447,449,462],
[445,456,467,0,454,456,451,468,435,454],
[452,444,440,437,0,460,464,464,458,453],
[439,427,451,435,431,0,454,445,438,446],
[455,435,448,440,427,437,0,471,462,451],
[416,397,444,423,427,446,420,0,440,455],
[412,424,442,456,433,453,429,451,0,458],
[442,420,429,437,438,445,440,436,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,469,442,442,442,464,453,446],
[445,0,436,465,470,441,444,461,457,443],
[456,455,0,462,459,438,456,450,460,449],
[422,426,429,0,443,432,435,442,428,429],
[449,421,432,448,0,430,440,431,439,413],
[449,450,453,459,461,0,456,445,458,439],
[449,447,435,456,451,435,0,455,442,453],
[427,430,441,449,460,446,436,0,456,447],
[438,434,431,463,452,433,449,435,0,444],
[445,448,442,462,478,452,438,444,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,441,445,456,437,427,424,454,447],
[428,0,434,429,445,445,459,450,442,439],
[450,457,0,449,462,461,436,469,453,434],
[446,462,442,0,454,447,448,462,451,450],
[435,446,429,437,0,447,445,443,451,454],
[454,446,430,444,444,0,445,461,440,451],
[464,432,455,443,446,446,0,447,439,452],
[467,441,422,429,448,430,444,0,443,450],
[437,449,438,440,440,451,452,448,0,444],
[444,452,457,441,437,440,439,441,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,456,447,430,452,422,437,432,451],
[458,0,454,422,428,444,449,447,453,447],
[435,437,0,441,440,453,429,456,472,451],
[444,469,450,0,447,462,453,458,476,462],
[461,463,451,444,0,440,454,480,502,479],
[439,447,438,429,451,0,442,422,460,450],
[469,442,462,438,437,449,0,455,465,455],
[454,444,435,433,411,469,436,0,472,425],
[459,438,419,415,389,431,426,419,0,431],
[440,444,440,429,412,441,436,466,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,433,429,436,438,433,448,461,446],
[421,0,449,436,426,452,459,461,446,459],
[458,442,0,432,448,428,453,481,451,467],
[462,455,459,0,442,459,448,469,453,457],
[455,465,443,449,0,457,440,448,449,454],
[453,439,463,432,434,0,452,442,432,421],
[458,432,438,443,451,439,0,430,448,428],
[443,430,410,422,443,449,461,0,430,435],
[430,445,440,438,442,459,443,461,0,414],
[445,432,424,434,437,470,463,456,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,438,424,433,443,425,428,415,442],
[438,0,446,416,429,429,434,456,406,450],
[453,445,0,404,420,403,407,441,412,435],
[467,475,487,0,466,450,458,469,442,474],
[458,462,471,425,0,456,431,457,421,457],
[448,462,488,441,435,0,450,474,432,469],
[466,457,484,433,460,441,0,471,447,465],
[463,435,450,422,434,417,420,0,434,440],
[476,485,479,449,470,459,444,457,0,479],
[449,441,456,417,434,422,426,451,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,441,430,440,424,430,443,458,455],
[468,0,428,454,452,447,454,471,460,456],
[450,463,0,469,444,437,449,449,449,459],
[461,437,422,0,430,431,461,426,456,436],
[451,439,447,461,0,439,429,471,445,443],
[467,444,454,460,452,0,450,477,459,462],
[461,437,442,430,462,441,0,461,455,450],
[448,420,442,465,420,414,430,0,452,452],
[433,431,442,435,446,432,436,439,0,441],
[436,435,432,455,448,429,441,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,444,451,448,476,464,472,480,455],
[440,0,414,425,442,442,442,423,431,438],
[447,477,0,486,454,444,464,468,475,479],
[440,466,405,0,448,448,431,437,448,445],
[443,449,437,443,0,438,445,457,436,435],
[415,449,447,443,453,0,451,439,466,447],
[427,449,427,460,446,440,0,439,453,441],
[419,468,423,454,434,452,452,0,434,458],
[411,460,416,443,455,425,438,457,0,425],
[436,453,412,446,456,444,450,433,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,416,465,439,460,485,489,466,468],
[426,0,447,446,433,451,455,473,457,467],
[475,444,0,472,453,452,458,472,463,466],
[426,445,419,0,421,439,454,463,445,438],
[452,458,438,470,0,444,470,478,475,473],
[431,440,439,452,447,0,450,461,461,482],
[406,436,433,437,421,441,0,448,436,447],
[402,418,419,428,413,430,443,0,447,445],
[425,434,428,446,416,430,455,444,0,451],
[423,424,425,453,418,409,444,446,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,476,455,443,464,447,447,474,465],
[422,0,454,442,422,448,433,423,453,445],
[415,437,0,435,435,464,438,424,464,453],
[436,449,456,0,425,484,433,430,453,452],
[448,469,456,466,0,480,449,435,482,472],
[427,443,427,407,411,0,423,409,429,437],
[444,458,453,458,442,468,0,444,461,455],
[444,468,467,461,456,482,447,0,478,468],
[417,438,427,438,409,462,430,413,0,430],
[426,446,438,439,419,454,436,423,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,437,444,458,453,445,442,448,464],
[463,0,477,433,452,453,441,446,454,486],
[454,414,0,421,449,436,434,424,442,460],
[447,458,470,0,464,440,453,464,464,472],
[433,439,442,427,0,448,444,439,448,470],
[438,438,455,451,443,0,436,443,453,436],
[446,450,457,438,447,455,0,440,454,468],
[449,445,467,427,452,448,451,0,450,470],
[443,437,449,427,443,438,437,441,0,454],
[427,405,431,419,421,455,423,421,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,234,512,393,402,426,397,345,401],
[552,0,328,303,443,507,504,380,339,432],
[657,563,0,433,523,591,400,454,543,557],
[379,588,458,0,340,482,499,400,477,452],
[498,448,368,551,0,562,521,326,350,551],
[489,384,300,409,329,0,410,527,427,323],
[465,387,491,392,370,481,0,443,371,338],
[494,511,437,491,565,364,448,0,561,431],
[546,552,348,414,541,464,520,330,0,558],
[490,459,334,439,340,568,553,460,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,431,420,444,446,405,437,406,422],
[462,0,457,455,467,464,458,442,435,428],
[460,434,0,444,446,467,429,447,443,463],
[471,436,447,0,461,459,450,471,453,456],
[447,424,445,430,0,458,441,459,440,434],
[445,427,424,432,433,0,427,437,431,453],
[486,433,462,441,450,464,0,469,438,447],
[454,449,444,420,432,454,422,0,435,432],
[485,456,448,438,451,460,453,456,0,437],
[469,463,428,435,457,438,444,459,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,457,494,473,421,461,475,454,453],
[429,0,414,446,452,414,439,463,439,427],
[434,477,0,466,445,450,449,460,446,468],
[397,445,425,0,464,428,442,455,451,444],
[418,439,446,427,0,414,431,455,436,444],
[470,477,441,463,477,0,473,469,462,466],
[430,452,442,449,460,418,0,448,447,429],
[416,428,431,436,436,422,443,0,397,436],
[437,452,445,440,455,429,444,494,0,430],
[438,464,423,447,447,425,462,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,463,448,390,472,466,453,499,451],
[417,0,424,412,407,442,406,415,429,414],
[428,467,0,435,430,507,452,442,468,449],
[443,479,456,0,427,477,455,488,471,475],
[501,484,461,464,0,532,437,476,480,455],
[419,449,384,414,359,0,425,442,487,438],
[425,485,439,436,454,466,0,457,497,481],
[438,476,449,403,415,449,434,0,488,449],
[392,462,423,420,411,404,394,403,0,391],
[440,477,442,416,436,453,410,442,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,501,516,523,500,434,424,446,489],
[365,0,485,466,426,458,393,403,334,420],
[390,406,0,422,398,443,292,415,332,386],
[375,425,469,0,432,429,365,443,385,402],
[368,465,493,459,0,469,437,404,360,407],
[391,433,448,462,422,0,360,440,394,425],
[457,498,599,526,454,531,0,462,432,494],
[467,488,476,448,487,451,429,0,415,474],
[445,557,559,506,531,497,459,476,0,503],
[402,471,505,489,484,466,397,417,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,477,504,409,524,533,496,440,494],
[410,0,480,404,395,502,586,457,463,455],
[414,411,0,487,485,462,489,467,437,524],
[387,487,404,0,305,416,435,381,421,422],
[482,496,406,586,0,498,525,468,520,421],
[367,389,429,475,393,0,569,375,409,398],
[358,305,402,456,366,322,0,328,324,357],
[395,434,424,510,423,516,563,0,420,475],
[451,428,454,470,371,482,567,471,0,394],
[397,436,367,469,470,493,534,416,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,459,415,447,420,462,428,467,427],
[452,0,458,434,459,426,459,432,475,434],
[432,433,0,401,459,417,440,427,453,419],
[476,457,490,0,469,437,459,453,483,467],
[444,432,432,422,0,413,437,421,446,419],
[471,465,474,454,478,0,457,475,486,442],
[429,432,451,432,454,434,0,449,450,433],
[463,459,464,438,470,416,442,0,464,437],
[424,416,438,408,445,405,441,427,0,412],
[464,457,472,424,472,449,458,454,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,462,449,444,444,413,434,422,458],
[461,0,492,444,448,471,429,433,459,428],
[429,399,0,402,390,356,379,412,444,420],
[442,447,489,0,458,438,440,463,413,415],
[447,443,501,433,0,464,459,478,457,468],
[447,420,535,453,427,0,448,449,447,434],
[478,462,512,451,432,443,0,429,494,417],
[457,458,479,428,413,442,462,0,473,408],
[469,432,447,478,434,444,397,418,0,399],
[433,463,471,476,423,457,474,483,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,448,431,484,437,444,427,418,432],
[428,0,467,469,462,463,430,472,439,463],
[443,424,0,442,473,451,447,447,413,432],
[460,422,449,0,449,452,429,417,434,451],
[407,429,418,442,0,434,428,427,406,432],
[454,428,440,439,457,0,414,448,428,427],
[447,461,444,462,463,477,0,459,453,465],
[464,419,444,474,464,443,432,0,422,447],
[473,452,478,457,485,463,438,469,0,463],
[459,428,459,440,459,464,426,444,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,486,424,448,404,442,448,450,456],
[438,0,471,428,453,438,443,408,450,436],
[405,420,0,425,443,444,459,417,456,428],
[467,463,466,0,470,454,450,430,451,453],
[443,438,448,421,0,414,432,421,433,424],
[487,453,447,437,477,0,431,437,448,442],
[449,448,432,441,459,460,0,455,460,457],
[443,483,474,461,470,454,436,0,447,494],
[441,441,435,440,458,443,431,444,0,448],
[435,455,463,438,467,449,434,397,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,476,451,463,445,469,466,450,434],
[445,0,434,434,434,433,454,451,438,438],
[415,457,0,450,445,433,455,453,432,451],
[440,457,441,0,465,449,471,474,431,454],
[428,457,446,426,0,421,462,448,430,427],
[446,458,458,442,470,0,465,457,447,431],
[422,437,436,420,429,426,0,446,417,436],
[425,440,438,417,443,434,445,0,416,446],
[441,453,459,460,461,444,474,475,0,467],
[457,453,440,437,464,460,455,445,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,450,447,508,453,394,479,520,507],
[430,0,496,450,499,471,434,485,456,505],
[441,395,0,390,502,447,400,391,467,456],
[444,441,501,0,532,414,425,444,450,471],
[383,392,389,359,0,398,348,379,416,422],
[438,420,444,477,493,0,468,434,465,495],
[497,457,491,466,543,423,0,498,520,477],
[412,406,500,447,512,457,393,0,468,489],
[371,435,424,441,475,426,371,423,0,491],
[384,386,435,420,469,396,414,402,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,489,422,407,488,462,489,443,466],
[406,0,460,424,424,452,422,482,443,436],
[402,431,0,405,432,449,402,455,403,412],
[469,467,486,0,442,484,463,522,453,454],
[484,467,459,449,0,482,443,502,465,444],
[403,439,442,407,409,0,408,489,425,404],
[429,469,489,428,448,483,0,512,468,481],
[402,409,436,369,389,402,379,0,405,422],
[448,448,488,438,426,466,423,486,0,441],
[425,455,479,437,447,487,410,469,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,483,466,485,450,447,492,440,450],
[379,0,427,417,427,434,397,426,406,393],
[408,464,0,430,426,422,426,430,444,406],
[425,474,461,0,432,427,411,449,432,406],
[406,464,465,459,0,442,451,453,430,417],
[441,457,469,464,449,0,430,441,441,422],
[444,494,465,480,440,461,0,498,464,446],
[399,465,461,442,438,450,393,0,393,408],
[451,485,447,459,461,450,427,498,0,432],
[441,498,485,485,474,469,445,483,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,428,433,438,444,446,444,399,404],
[455,0,439,429,437,444,423,460,429,423],
[463,452,0,440,421,467,461,489,424,435],
[458,462,451,0,461,476,454,476,439,455],
[453,454,470,430,0,464,442,466,408,433],
[447,447,424,415,427,0,416,441,422,409],
[445,468,430,437,449,475,0,446,442,443],
[447,431,402,415,425,450,445,0,407,418],
[492,462,467,452,483,469,449,484,0,445],
[487,468,456,436,458,482,448,473,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,448,434,405,438,432,457,451,459],
[438,0,443,430,431,467,431,475,477,433],
[443,448,0,439,447,466,454,473,465,450],
[457,461,452,0,421,449,449,462,478,461],
[486,460,444,470,0,446,448,461,469,456],
[453,424,425,442,445,0,429,453,443,443],
[459,460,437,442,443,462,0,469,465,465],
[434,416,418,429,430,438,422,0,465,415],
[440,414,426,413,422,448,426,426,0,415],
[432,458,441,430,435,448,426,476,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,445,478,439,460,459,457,455,446],
[456,0,450,493,437,450,460,475,461,443],
[446,441,0,485,447,489,474,456,458,420],
[413,398,406,0,403,420,442,425,439,429],
[452,454,444,488,0,473,462,459,476,464],
[431,441,402,471,418,0,461,462,486,445],
[432,431,417,449,429,430,0,457,458,433],
[434,416,435,466,432,429,434,0,472,411],
[436,430,433,452,415,405,433,419,0,397],
[445,448,471,462,427,446,458,480,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,428,457,476,446,467,483,458,450],
[440,0,445,410,465,434,456,461,407,460],
[463,446,0,445,438,446,445,440,447,471],
[434,481,446,0,433,433,427,435,453,434],
[415,426,453,458,0,390,446,431,420,453],
[445,457,445,458,501,0,446,448,470,450],
[424,435,446,464,445,445,0,413,409,426],
[408,430,451,456,460,443,478,0,460,453],
[433,484,444,438,471,421,482,431,0,452],
[441,431,420,457,438,441,465,438,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,422,484,442,418,497,419,453,479],
[452,0,427,458,453,447,486,409,457,486],
[469,464,0,463,484,398,538,458,509,522],
[407,433,428,0,430,424,486,429,436,462],
[449,438,407,461,0,425,494,418,437,475],
[473,444,493,467,466,0,489,411,438,503],
[394,405,353,405,397,402,0,425,386,432],
[472,482,433,462,473,480,466,0,461,456],
[438,434,382,455,454,453,505,430,0,475],
[412,405,369,429,416,388,459,435,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,436,513,416,525,443,484,523,433],
[371,0,458,440,395,379,439,438,415,391],
[455,433,0,514,419,412,410,413,484,456],
[378,451,377,0,458,425,435,398,376,427],
[475,496,472,433,0,522,476,445,478,468],
[366,512,479,466,369,0,416,422,497,445],
[448,452,481,456,415,475,0,413,463,463],
[407,453,478,493,446,469,478,0,468,436],
[368,476,407,515,413,394,428,423,0,404],
[458,500,435,464,423,446,428,455,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,482,517,452,447,416,442,442,455],
[436,0,463,489,431,441,406,437,457,472],
[409,428,0,479,430,436,447,458,434,474],
[374,402,412,0,407,421,389,437,426,407],
[439,460,461,484,0,458,397,447,491,479],
[444,450,455,470,433,0,421,398,428,467],
[475,485,444,502,494,470,0,464,443,485],
[449,454,433,454,444,493,427,0,428,480],
[449,434,457,465,400,463,448,463,0,473],
[436,419,417,484,412,424,406,411,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,426,486,431,405,428,458,460,451],
[446,0,453,441,409,418,407,462,451,452],
[465,438,0,481,437,469,437,455,440,452],
[405,450,410,0,410,400,425,454,420,409],
[460,482,454,481,0,435,418,504,434,452],
[486,473,422,491,456,0,450,503,466,459],
[463,484,454,466,473,441,0,479,469,477],
[433,429,436,437,387,388,412,0,419,422],
[431,440,451,471,457,425,422,472,0,436],
[440,439,439,482,439,432,414,469,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,450,456,507,459,435,471,470,472],
[453,0,417,423,477,473,427,461,443,442],
[441,474,0,439,503,492,454,509,473,457],
[435,468,452,0,502,494,455,493,469,452],
[384,414,388,389,0,424,395,438,413,409],
[432,418,399,397,467,0,419,425,419,408],
[456,464,437,436,496,472,0,488,449,487],
[420,430,382,398,453,466,403,0,443,434],
[421,448,418,422,478,472,442,448,0,452],
[419,449,434,439,482,483,404,457,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,224,265,447,265,125,265,307,528],
[751,0,795,528,584,668,361,584,626,764],
[667,96,0,444,584,513,373,373,626,540],
[626,363,447,0,447,599,584,724,307,891],
[444,307,307,444,0,584,444,444,403,584],
[626,223,378,292,307,0,125,348,474,388],
[766,530,518,307,447,766,0,891,474,766],
[626,307,518,167,447,543,0,0,474,555],
[584,265,265,584,488,417,417,417,0,680],
[363,127,351,0,307,503,125,336,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,446,463,426,445,446,463,420,463],
[465,0,452,452,421,437,451,447,427,421],
[445,439,0,462,416,429,429,449,431,443],
[428,439,429,0,428,419,438,435,433,447],
[465,470,475,463,0,446,470,467,445,467],
[446,454,462,472,445,0,468,470,458,459],
[445,440,462,453,421,423,0,451,434,439],
[428,444,442,456,424,421,440,0,432,456],
[471,464,460,458,446,433,457,459,0,466],
[428,470,448,444,424,432,452,435,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,464,440,466,449,440,478,462,453],
[413,0,454,410,449,410,434,443,450,436],
[427,437,0,408,455,445,425,449,468,417],
[451,481,483,0,468,441,447,475,462,432],
[425,442,436,423,0,416,447,443,452,421],
[442,481,446,450,475,0,431,485,463,438],
[451,457,466,444,444,460,0,474,451,420],
[413,448,442,416,448,406,417,0,442,418],
[429,441,423,429,439,428,440,449,0,424],
[438,455,474,459,470,453,471,473,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,455,465,448,492,435,491,480,484],
[385,0,430,430,373,400,418,458,447,448],
[436,461,0,445,469,449,420,470,461,466],
[426,461,446,0,414,445,407,479,511,497],
[443,518,422,477,0,497,458,520,472,493],
[399,491,442,446,394,0,413,443,419,426],
[456,473,471,484,433,478,0,506,505,495],
[400,433,421,412,371,448,385,0,490,445],
[411,444,430,380,419,472,386,401,0,445],
[407,443,425,394,398,465,396,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,451,461,433,444,447,467,475,458],
[435,0,442,465,436,447,446,463,450,451],
[440,449,0,446,436,424,430,458,448,443],
[430,426,445,0,432,436,426,456,452,440],
[458,455,455,459,0,470,445,461,477,477],
[447,444,467,455,421,0,429,459,458,468],
[444,445,461,465,446,462,0,473,448,462],
[424,428,433,435,430,432,418,0,435,440],
[416,441,443,439,414,433,443,456,0,439],
[433,440,448,451,414,423,429,451,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,426,447,426,417,438,444,434,431],
[442,0,442,444,450,436,432,451,445,436],
[465,449,0,453,473,452,431,436,444,436],
[444,447,438,0,451,441,437,462,441,450],
[465,441,418,440,0,417,436,454,439,450],
[474,455,439,450,474,0,462,472,469,474],
[453,459,460,454,455,429,0,447,453,472],
[447,440,455,429,437,419,444,0,437,437],
[457,446,447,450,452,422,438,454,0,448],
[460,455,455,441,441,417,419,454,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,433,477,428,442,434,434,426,441],
[448,0,432,433,445,437,434,446,436,426],
[458,459,0,443,454,433,424,444,444,460],
[414,458,448,0,442,448,454,454,432,434],
[463,446,437,449,0,451,431,440,459,451],
[449,454,458,443,440,0,424,435,435,428],
[457,457,467,437,460,467,0,461,459,457],
[457,445,447,437,451,456,430,0,454,438],
[465,455,447,459,432,456,432,437,0,436],
[450,465,431,457,440,463,434,453,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,401,431,468,458,407,415,463,455],
[438,0,452,444,441,462,416,468,450,493],
[490,439,0,447,480,423,455,457,470,479],
[460,447,444,0,438,458,436,478,444,460],
[423,450,411,453,0,435,392,429,439,460],
[433,429,468,433,456,0,413,480,446,454],
[484,475,436,455,499,478,0,463,468,485],
[476,423,434,413,462,411,428,0,433,442],
[428,441,421,447,452,445,423,458,0,478],
[436,398,412,431,431,437,406,449,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,450,565,504,372,431,482,507,656],
[515,0,470,460,482,303,516,397,588,507],
[441,421,0,365,403,387,442,327,492,515],
[326,431,526,0,362,421,457,199,456,461],
[387,409,488,529,0,413,460,442,531,594],
[519,588,504,470,478,0,478,383,600,517],
[460,375,449,434,431,413,0,415,414,530],
[409,494,564,692,449,508,476,0,637,580],
[384,303,399,435,360,291,477,254,0,432],
[235,384,376,430,297,374,361,311,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,467,460,438,473,412,396,444,425],
[425,0,419,432,459,460,432,462,468,398],
[424,472,0,380,416,442,395,421,415,413],
[431,459,511,0,434,493,450,437,445,430],
[453,432,475,457,0,466,410,442,389,451],
[418,431,449,398,425,0,410,419,407,402],
[479,459,496,441,481,481,0,498,463,460],
[495,429,470,454,449,472,393,0,472,464],
[447,423,476,446,502,484,428,419,0,434],
[466,493,478,461,440,489,431,427,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,435,451,426,464,436,501,466,418],
[448,0,443,458,463,468,427,473,446,486],
[456,448,0,468,477,495,486,504,434,491],
[440,433,423,0,455,487,457,487,431,424],
[465,428,414,436,0,480,469,463,467,408],
[427,423,396,404,411,0,411,423,410,439],
[455,464,405,434,422,480,0,465,421,455],
[390,418,387,404,428,468,426,0,431,447],
[425,445,457,460,424,481,470,460,0,473],
[473,405,400,467,483,452,436,444,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,396,396,441,430,401,459,418,422],
[456,0,458,413,438,470,428,457,454,428],
[495,433,0,436,468,485,432,456,436,433],
[495,478,455,0,469,451,445,478,456,431],
[450,453,423,422,0,449,417,461,451,438],
[461,421,406,440,442,0,454,463,413,400],
[490,463,459,446,474,437,0,499,463,452],
[432,434,435,413,430,428,392,0,428,385],
[473,437,455,435,440,478,428,463,0,394],
[469,463,458,460,453,491,439,506,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,457,437,449,473,467,455,441,445],
[449,0,428,405,444,444,471,461,437,437],
[434,463,0,430,443,469,465,462,433,447],
[454,486,461,0,450,480,461,464,438,445],
[442,447,448,441,0,434,471,436,448,441],
[418,447,422,411,457,0,451,449,410,418],
[424,420,426,430,420,440,0,453,426,425],
[436,430,429,427,455,442,438,0,439,429],
[450,454,458,453,443,481,465,452,0,457],
[446,454,444,446,450,473,466,462,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,435,444,457,409,422,432,420,428],
[465,0,437,454,451,432,417,452,433,417],
[456,454,0,452,462,435,454,445,426,442],
[447,437,439,0,449,412,426,419,411,418],
[434,440,429,442,0,406,415,416,419,409],
[482,459,456,479,485,0,474,454,437,438],
[469,474,437,465,476,417,0,430,454,439],
[459,439,446,472,475,437,461,0,456,448],
[471,458,465,480,472,454,437,435,0,439],
[463,474,449,473,482,453,452,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,471,478,444,486,460,456,551,487],
[324,0,384,365,372,416,366,396,383,399],
[420,507,0,434,431,421,402,445,500,436],
[413,526,457,0,442,425,439,435,470,422],
[447,519,460,449,0,488,446,426,492,487],
[405,475,470,466,403,0,344,438,447,432],
[431,525,489,452,445,547,0,436,429,441],
[435,495,446,456,465,453,455,0,495,502],
[340,508,391,421,399,444,462,396,0,431],
[404,492,455,469,404,459,450,389,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,434,421,458,401,399,465,440,445],
[432,0,433,424,474,393,388,435,420,427],
[457,458,0,455,454,416,407,455,447,445],
[470,467,436,0,460,403,429,436,413,400],
[433,417,437,431,0,399,409,466,401,433],
[490,498,475,488,492,0,474,467,460,439],
[492,503,484,462,482,417,0,497,440,455],
[426,456,436,455,425,424,394,0,410,433],
[451,471,444,478,490,431,451,481,0,466],
[446,464,446,491,458,452,436,458,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,430,450,426,435,440,432,452,450],
[438,0,415,428,391,416,428,406,428,423],
[461,476,0,458,406,440,429,428,443,441],
[441,463,433,0,414,440,433,431,445,424],
[465,500,485,477,0,445,460,460,478,475],
[456,475,451,451,446,0,449,443,454,466],
[451,463,462,458,431,442,0,434,466,452],
[459,485,463,460,431,448,457,0,460,448],
[439,463,448,446,413,437,425,431,0,437],
[441,468,450,467,416,425,439,443,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,463,515,383,516,489,421,505,422],
[444,0,433,552,467,474,445,428,518,546],
[428,458,0,539,428,418,499,379,476,469],
[376,339,352,0,396,472,445,383,395,403],
[508,424,463,495,0,466,514,449,467,535],
[375,417,473,419,425,0,474,460,481,434],
[402,446,392,446,377,417,0,416,414,418],
[470,463,512,508,442,431,475,0,518,546],
[386,373,415,496,424,410,477,373,0,426],
[469,345,422,488,356,457,473,345,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,505,408,446,461,430,437,466,431],
[472,0,520,426,485,474,456,444,482,451],
[386,371,0,374,424,420,410,419,409,408],
[483,465,517,0,471,464,443,462,478,472],
[445,406,467,420,0,458,414,422,441,442],
[430,417,471,427,433,0,451,448,460,428],
[461,435,481,448,477,440,0,448,450,444],
[454,447,472,429,469,443,443,0,467,464],
[425,409,482,413,450,431,441,424,0,438],
[460,440,483,419,449,463,447,427,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,466,447,450,428,453,418,439,465],
[472,0,467,445,469,435,443,444,437,460],
[425,424,0,449,461,425,439,430,430,459],
[444,446,442,0,451,427,438,421,442,466],
[441,422,430,440,0,446,447,439,428,450],
[463,456,466,464,445,0,454,455,445,481],
[438,448,452,453,444,437,0,449,429,465],
[473,447,461,470,452,436,442,0,462,495],
[452,454,461,449,463,446,462,429,0,477],
[426,431,432,425,441,410,426,396,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,447,440,458,447,458,440,449,435],
[440,0,433,428,435,418,445,439,419,426],
[444,458,0,440,466,431,477,437,432,457],
[451,463,451,0,464,446,483,442,459,448],
[433,456,425,427,0,416,466,440,457,445],
[444,473,460,445,475,0,474,454,461,458],
[433,446,414,408,425,417,0,431,439,444],
[451,452,454,449,451,437,460,0,437,460],
[442,472,459,432,434,430,452,454,0,450],
[456,465,434,443,446,433,447,431,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,424,410,424,446,420,438,440,426],
[450,0,439,427,454,440,432,435,455,416],
[467,452,0,422,444,449,440,455,449,438],
[481,464,469,0,454,453,447,459,461,444],
[467,437,447,437,0,450,466,470,442,433],
[445,451,442,438,441,0,423,450,447,441],
[471,459,451,444,425,468,0,464,459,456],
[453,456,436,432,421,441,427,0,449,439],
[451,436,442,430,449,444,432,442,0,431],
[465,475,453,447,458,450,435,452,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,417,417,421,421,402,421,433,432],
[480,0,463,452,437,460,442,463,482,480],
[474,428,0,422,429,429,420,452,456,442],
[474,439,469,0,475,458,457,466,467,465],
[470,454,462,416,0,462,431,454,442,455],
[470,431,462,433,429,0,393,442,466,460],
[489,449,471,434,460,498,0,464,476,488],
[470,428,439,425,437,449,427,0,467,460],
[458,409,435,424,449,425,415,424,0,441],
[459,411,449,426,436,431,403,431,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,421,409,431,483,450,425,463,447],
[459,0,419,432,452,459,483,448,426,457],
[470,472,0,493,472,486,490,437,475,452],
[482,459,398,0,435,480,466,445,445,488],
[460,439,419,456,0,454,477,452,450,445],
[408,432,405,411,437,0,447,424,389,412],
[441,408,401,425,414,444,0,405,429,411],
[466,443,454,446,439,467,486,0,434,445],
[428,465,416,446,441,502,462,457,0,471],
[444,434,439,403,446,479,480,446,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,443,465,436,418,456,448,444,465],
[466,0,455,464,447,458,461,440,466,446],
[448,436,0,463,429,461,475,453,460,472],
[426,427,428,0,432,426,438,433,432,443],
[455,444,462,459,0,425,464,435,458,457],
[473,433,430,465,466,0,452,457,475,449],
[435,430,416,453,427,439,0,437,456,444],
[443,451,438,458,456,434,454,0,469,460],
[447,425,431,459,433,416,435,422,0,451],
[426,445,419,448,434,442,447,431,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,680,343,398,191,688,183,536,680,442],
[211,0,160,363,8,8,0,318,318,0],
[548,731,0,708,501,556,493,731,731,310],
[493,528,183,0,290,298,290,290,290,290],
[700,883,390,601,0,505,700,731,883,700],
[203,883,335,593,386,0,386,493,731,493],
[708,891,398,601,191,505,0,739,891,470],
[355,573,160,601,160,398,152,0,883,152],
[211,573,160,601,8,160,0,8,0,0],
[449,891,581,601,191,398,421,739,891,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,421,437,441,436,459,420,420,426],
[435,0,428,446,458,432,462,421,432,443],
[470,463,0,456,458,443,459,446,459,475],
[454,445,435,0,429,437,445,434,440,447],
[450,433,433,462,0,453,448,438,416,441],
[455,459,448,454,438,0,466,439,459,448],
[432,429,432,446,443,425,0,436,423,452],
[471,470,445,457,453,452,455,0,446,471],
[471,459,432,451,475,432,468,445,0,446],
[465,448,416,444,450,443,439,420,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,474,443,416,444,444,420,472,429],
[425,0,469,423,445,473,444,443,462,449],
[417,422,0,432,415,447,430,403,436,418],
[448,468,459,0,429,476,422,410,447,441],
[475,446,476,462,0,464,432,451,467,440],
[447,418,444,415,427,0,438,411,428,412],
[447,447,461,469,459,453,0,445,459,460],
[471,448,488,481,440,480,446,0,518,455],
[419,429,455,444,424,463,432,373,0,408],
[462,442,473,450,451,479,431,436,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,492,500,467,491,462,475,448,441],
[383,0,484,525,511,530,459,448,417,453],
[399,407,0,446,465,447,423,414,416,423],
[391,366,445,0,439,486,410,443,370,428],
[424,380,426,452,0,502,446,452,397,453],
[400,361,444,405,389,0,417,405,348,366],
[429,432,468,481,445,474,0,499,411,466],
[416,443,477,448,439,486,392,0,355,437],
[443,474,475,521,494,543,480,536,0,471],
[450,438,468,463,438,525,425,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,452,441,470,462,436,448,436,454],
[456,0,449,446,460,439,433,463,450,461],
[439,442,0,440,447,437,449,439,440,454],
[450,445,451,0,455,430,442,430,463,462],
[421,431,444,436,0,429,420,428,443,431],
[429,452,454,461,462,0,446,438,440,454],
[455,458,442,449,471,445,0,473,451,468],
[443,428,452,461,463,453,418,0,442,466],
[455,441,451,428,448,451,440,449,0,450],
[437,430,437,429,460,437,423,425,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,458,414,425,401,414,395,444,419],
[463,0,460,429,419,374,420,431,409,390],
[433,431,0,428,453,464,435,429,455,387],
[477,462,463,0,466,470,416,519,481,448],
[466,472,438,425,0,438,448,465,473,391],
[490,517,427,421,453,0,493,437,463,440],
[477,471,456,475,443,398,0,438,453,462],
[496,460,462,372,426,454,453,0,439,452],
[447,482,436,410,418,428,438,452,0,438],
[472,501,504,443,500,451,429,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,459,415,454,457,465,433,463,409],
[443,0,457,413,417,416,455,474,446,441],
[432,434,0,423,444,435,429,468,444,430],
[476,478,468,0,413,462,475,453,462,455],
[437,474,447,478,0,472,462,447,482,472],
[434,475,456,429,419,0,439,454,468,466],
[426,436,462,416,429,452,0,450,473,442],
[458,417,423,438,444,437,441,0,465,442],
[428,445,447,429,409,423,418,426,0,430],
[482,450,461,436,419,425,449,449,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,439,434,461,453,445,434,439,432],
[450,0,415,428,464,455,447,449,441,452],
[452,476,0,453,478,466,452,474,450,436],
[457,463,438,0,444,458,461,455,442,441],
[430,427,413,447,0,472,429,436,455,415],
[438,436,425,433,419,0,436,437,455,432],
[446,444,439,430,462,455,0,450,443,446],
[457,442,417,436,455,454,441,0,453,426],
[452,450,441,449,436,436,448,438,0,438],
[459,439,455,450,476,459,445,465,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,469,465,470,471,462,439,462,443],
[450,0,473,458,460,452,466,453,436,435],
[422,418,0,446,427,443,442,440,435,430],
[426,433,445,0,423,427,447,430,437,417],
[421,431,464,468,0,435,445,433,428,435],
[420,439,448,464,456,0,437,436,455,457],
[429,425,449,444,446,454,0,433,450,440],
[452,438,451,461,458,455,458,0,446,447],
[429,455,456,454,463,436,441,445,0,453],
[448,456,461,474,456,434,451,444,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,458,413,421,453,450,408,447,437],
[449,0,464,446,434,445,477,405,421,433],
[433,427,0,395,429,430,442,432,476,415],
[478,445,496,0,458,458,467,440,474,452],
[470,457,462,433,0,453,459,432,473,461],
[438,446,461,433,438,0,473,459,449,457],
[441,414,449,424,432,418,0,421,447,445],
[483,486,459,451,459,432,470,0,482,453],
[444,470,415,417,418,442,444,409,0,431],
[454,458,476,439,430,434,446,438,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,520,465,463,572,510,564,500,509],
[483,0,550,477,569,464,535,465,408,496],
[371,341,0,445,367,429,379,376,360,329],
[426,414,446,0,452,452,443,490,392,322],
[428,322,524,439,0,495,431,459,466,474],
[319,427,462,439,396,0,461,512,487,450],
[381,356,512,448,460,430,0,444,390,459],
[327,426,515,401,432,379,447,0,367,387],
[391,483,531,499,425,404,501,524,0,518],
[382,395,562,569,417,441,432,504,373,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,423,439,428,437,417,419,446,444],
[439,0,454,423,434,441,418,434,442,442],
[468,437,0,447,446,437,454,426,451,440],
[452,468,444,0,444,450,443,431,464,444],
[463,457,445,447,0,455,431,451,464,434],
[454,450,454,441,436,0,427,440,445,433],
[474,473,437,448,460,464,0,435,481,441],
[472,457,465,460,440,451,456,0,457,472],
[445,449,440,427,427,446,410,434,0,440],
[447,449,451,447,457,458,450,419,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,481,475,490,492,505,423,468,441],
[430,0,431,479,437,442,455,445,462,384],
[410,460,0,487,455,492,484,453,460,445],
[416,412,404,0,457,363,436,429,430,387],
[401,454,436,434,0,378,455,412,402,393],
[399,449,399,528,513,0,475,420,427,460],
[386,436,407,455,436,416,0,453,411,454],
[468,446,438,462,479,471,438,0,462,449],
[423,429,431,461,489,464,480,429,0,424],
[450,507,446,504,498,431,437,442,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,453,423,479,503,432,441,447],
[450,0,445,455,407,495,482,442,459,399],
[447,446,0,454,434,456,478,447,448,452],
[438,436,437,0,422,448,476,424,432,433],
[468,484,457,469,0,456,495,503,481,431],
[412,396,435,443,435,0,461,422,431,402],
[388,409,413,415,396,430,0,452,420,382],
[459,449,444,467,388,469,439,0,437,407],
[450,432,443,459,410,460,471,454,0,417],
[444,492,439,458,460,489,509,484,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,445,430,461,440,452,435,441,457],
[431,0,433,436,461,431,456,447,442,458],
[446,458,0,435,450,440,450,428,440,468],
[461,455,456,0,471,433,465,443,453,475],
[430,430,441,420,0,434,428,429,454,443],
[451,460,451,458,457,0,450,458,440,455],
[439,435,441,426,463,441,0,428,442,453],
[456,444,463,448,462,433,463,0,447,461],
[450,449,451,438,437,451,449,444,0,453],
[434,433,423,416,448,436,438,430,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,414,456,442,425,429,432,473,437],
[458,0,435,471,444,436,446,438,469,456],
[477,456,0,458,454,449,443,414,490,456],
[435,420,433,0,408,443,428,447,448,414],
[449,447,437,483,0,482,396,443,448,455],
[466,455,442,448,409,0,444,440,471,432],
[462,445,448,463,495,447,0,469,447,469],
[459,453,477,444,448,451,422,0,452,461],
[418,422,401,443,443,420,444,439,0,451],
[454,435,435,477,436,459,422,430,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,403,421,448,420,421,425,433,453],
[469,0,441,453,460,454,444,475,459,456],
[488,450,0,465,469,438,447,467,449,467],
[470,438,426,0,456,428,427,437,429,443],
[443,431,422,435,0,444,419,440,429,451],
[471,437,453,463,447,0,476,449,445,441],
[470,447,444,464,472,415,0,447,451,442],
[466,416,424,454,451,442,444,0,440,447],
[458,432,442,462,462,446,440,451,0,432],
[438,435,424,448,440,450,449,444,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,384,462,458,495,463,431,464,508],
[450,0,421,399,464,446,378,465,449,395],
[507,470,0,496,484,518,416,487,492,457],
[429,492,395,0,436,459,354,433,449,429],
[433,427,407,455,0,492,423,377,366,427],
[396,445,373,432,399,0,371,360,404,468],
[428,513,475,537,468,520,0,511,431,464],
[460,426,404,458,514,531,380,0,511,442],
[427,442,399,442,525,487,460,380,0,464],
[383,496,434,462,464,423,427,449,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,407,443,440,433,419,409,393,421],
[454,0,460,488,431,441,449,446,418,418],
[484,431,0,488,474,446,435,448,454,450],
[448,403,403,0,439,452,435,423,464,407],
[451,460,417,452,0,455,435,423,458,412],
[458,450,445,439,436,0,427,415,453,404],
[472,442,456,456,456,464,0,464,451,443],
[482,445,443,468,468,476,427,0,456,432],
[498,473,437,427,433,438,440,435,0,427],
[470,473,441,484,479,487,448,459,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,450,440,437,454,455,447,430,463],
[446,0,408,417,414,441,434,463,430,455],
[441,483,0,442,436,464,436,455,433,468],
[451,474,449,0,448,454,427,448,452,458],
[454,477,455,443,0,444,459,446,451,456],
[437,450,427,437,447,0,433,440,421,459],
[436,457,455,464,432,458,0,444,424,466],
[444,428,436,443,445,451,447,0,424,473],
[461,461,458,439,440,470,467,467,0,480],
[428,436,423,433,435,432,425,418,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,424,424,445,429,431,423,436,429],
[456,0,436,431,448,428,442,436,445,462],
[467,455,0,444,470,460,461,453,457,457],
[467,460,447,0,462,441,453,439,474,452],
[446,443,421,429,0,442,443,428,421,427],
[462,463,431,450,449,0,448,453,451,457],
[460,449,430,438,448,443,0,447,435,469],
[468,455,438,452,463,438,444,0,462,477],
[455,446,434,417,470,440,456,429,0,459],
[462,429,434,439,464,434,422,414,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,435,473,456,426,423,466,464,446],
[461,0,462,465,462,465,483,439,481,492],
[456,429,0,465,431,440,435,459,471,415],
[418,426,426,0,448,421,440,421,429,448],
[435,429,460,443,0,432,417,439,447,437],
[465,426,451,470,459,0,429,427,462,456],
[468,408,456,451,474,462,0,446,468,449],
[425,452,432,470,452,464,445,0,444,389],
[427,410,420,462,444,429,423,447,0,415],
[445,399,476,443,454,435,442,502,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,437,442,459,464,447,468,473,423],
[435,0,456,414,427,445,426,485,468,432],
[454,435,0,435,430,438,434,440,458,411],
[449,477,456,0,440,469,428,480,470,423],
[432,464,461,451,0,448,440,441,471,406],
[427,446,453,422,443,0,429,434,429,443],
[444,465,457,463,451,462,0,476,494,446],
[423,406,451,411,450,457,415,0,456,415],
[418,423,433,421,420,462,397,435,0,396],
[468,459,480,468,485,448,445,476,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,444,458,467,460,441,461,471,465],
[437,0,441,466,456,461,455,444,464,457],
[447,450,0,455,451,472,441,436,458,455],
[433,425,436,0,456,470,437,422,456,429],
[424,435,440,435,0,461,426,421,458,440],
[431,430,419,421,430,0,422,429,436,438],
[450,436,450,454,465,469,0,434,470,453],
[430,447,455,469,470,462,457,0,457,455],
[420,427,433,435,433,455,421,434,0,442],
[426,434,436,462,451,453,438,436,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,428,439,415,413,437,402,417,452],
[434,0,454,470,429,386,435,435,431,437],
[463,437,0,453,402,424,452,429,437,435],
[452,421,438,0,437,427,426,441,430,436],
[476,462,489,454,0,418,442,478,460,469],
[478,505,467,464,473,0,478,485,439,452],
[454,456,439,465,449,413,0,461,421,449],
[489,456,462,450,413,406,430,0,443,453],
[474,460,454,461,431,452,470,448,0,453],
[439,454,456,455,422,439,442,438,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,461,433,431,447,478,439,455,424],
[456,0,440,420,437,454,456,451,465,442],
[430,451,0,421,421,449,480,444,463,455],
[458,471,470,0,432,454,490,479,460,473],
[460,454,470,459,0,443,491,466,471,461],
[444,437,442,437,448,0,485,442,474,449],
[413,435,411,401,400,406,0,402,441,416],
[452,440,447,412,425,449,489,0,457,442],
[436,426,428,431,420,417,450,434,0,440],
[467,449,436,418,430,442,475,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,486,470,500,442,449,480,488,467],
[414,0,439,464,487,433,425,446,448,440],
[405,452,0,434,447,436,448,445,435,421],
[421,427,457,0,466,466,436,433,469,445],
[391,404,444,425,0,434,420,408,437,408],
[449,458,455,425,457,0,434,452,453,442],
[442,466,443,455,471,457,0,448,463,428],
[411,445,446,458,483,439,443,0,467,425],
[403,443,456,422,454,438,428,424,0,415],
[424,451,470,446,483,449,463,466,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,423,424,417,408,439,440,466,430],
[475,0,495,476,462,487,479,424,490,528],
[468,396,0,402,441,437,493,410,457,452],
[467,415,489,0,471,432,468,470,525,457],
[474,429,450,420,0,450,501,445,451,483],
[483,404,454,459,441,0,436,416,441,458],
[452,412,398,423,390,455,0,431,437,467],
[451,467,481,421,446,475,460,0,468,451],
[425,401,434,366,440,450,454,423,0,477],
[461,363,439,434,408,433,424,440,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,524,477,442,449,463,532,530,430],
[370,0,438,407,433,388,391,431,501,370],
[367,453,0,361,367,336,408,386,506,359],
[414,484,530,0,467,492,449,477,538,454],
[449,458,524,424,0,445,469,537,495,406],
[442,503,555,399,446,0,463,396,486,427],
[428,500,483,442,422,428,0,558,523,453],
[359,460,505,414,354,495,333,0,447,452],
[361,390,385,353,396,405,368,444,0,369],
[461,521,532,437,485,464,438,439,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,436,447,466,436,451,438,452,446],
[440,0,425,452,444,436,440,452,455,449],
[455,466,0,459,457,438,448,449,466,459],
[444,439,432,0,453,441,411,438,456,453],
[425,447,434,438,0,428,447,456,456,437],
[455,455,453,450,463,0,445,443,471,460],
[440,451,443,480,444,446,0,463,477,455],
[453,439,442,453,435,448,428,0,434,453],
[439,436,425,435,435,420,414,457,0,435],
[445,442,432,438,454,431,436,438,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,471,452,457,458,455,464,449,455],
[448,0,476,478,450,436,488,470,451,456],
[420,415,0,463,416,415,453,434,443,430],
[439,413,428,0,412,416,442,429,447,408],
[434,441,475,479,0,454,459,462,466,458],
[433,455,476,475,437,0,475,455,470,452],
[436,403,438,449,432,416,0,437,422,434],
[427,421,457,462,429,436,454,0,436,442],
[442,440,448,444,425,421,469,455,0,437],
[436,435,461,483,433,439,457,449,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,482,437,408,420,426,410,462,456],
[464,0,506,501,415,444,495,462,490,463],
[409,385,0,413,398,346,395,430,471,389],
[454,390,478,0,441,399,423,458,450,394],
[483,476,493,450,0,450,446,457,506,428],
[471,447,545,492,441,0,443,494,492,476],
[465,396,496,468,445,448,0,439,488,425],
[481,429,461,433,434,397,452,0,483,432],
[429,401,420,441,385,399,403,408,0,380],
[435,428,502,497,463,415,466,459,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,544,456,538,491,523,477,446,459],
[452,0,463,422,495,450,408,335,429,372],
[347,428,0,377,517,452,344,429,380,333],
[435,469,514,0,501,451,366,422,429,456],
[353,396,374,390,0,372,391,334,289,337],
[400,441,439,440,519,0,415,442,380,369],
[368,483,547,525,500,476,0,389,466,490],
[414,556,462,469,557,449,502,0,399,413],
[445,462,511,462,602,511,425,492,0,424],
[432,519,558,435,554,522,401,478,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,449,407,375,375,366,405,414,409],
[450,0,465,419,422,432,429,438,411,422],
[442,426,0,408,440,420,405,404,414,418],
[484,472,483,0,464,466,443,435,470,461],
[516,469,451,427,0,450,432,442,436,457],
[516,459,471,425,441,0,472,437,442,438],
[525,462,486,448,459,419,0,446,453,486],
[486,453,487,456,449,454,445,0,463,478],
[477,480,477,421,455,449,438,428,0,443],
[482,469,473,430,434,453,405,413,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,420,461,418,438,432,399,442,445],
[454,0,465,466,446,482,466,415,475,481],
[471,426,0,474,437,462,461,455,440,461],
[430,425,417,0,400,405,445,440,419,436],
[473,445,454,491,0,473,479,444,460,459],
[453,409,429,486,418,0,466,433,439,450],
[459,425,430,446,412,425,0,412,435,433],
[492,476,436,451,447,458,479,0,465,470],
[449,416,451,472,431,452,456,426,0,444],
[446,410,430,455,432,441,458,421,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,477,436,473,412,473,495,440,406],
[421,0,443,450,489,444,449,480,478,394],
[414,448,0,452,449,419,414,473,436,396],
[455,441,439,0,457,473,470,502,502,425],
[418,402,442,434,0,410,428,467,436,406],
[479,447,472,418,481,0,481,493,449,449],
[418,442,477,421,463,410,0,447,435,405],
[396,411,418,389,424,398,444,0,375,353],
[451,413,455,389,455,442,456,516,0,390],
[485,497,495,466,485,442,486,538,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,331,316,364,486,331,406,469,443],
[469,0,423,319,502,548,408,435,498,500],
[560,468,0,377,454,665,462,551,580,494],
[575,572,514,0,512,538,375,588,553,462],
[527,389,437,379,0,406,318,433,459,366],
[405,343,226,353,485,0,273,455,424,335],
[560,483,429,516,573,618,0,551,557,605],
[485,456,340,303,458,436,340,0,460,355],
[422,393,311,338,432,467,334,431,0,413],
[448,391,397,429,525,556,286,536,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,464,487,461,491,449,483,476,438],
[439,0,477,478,447,456,437,453,457,433],
[427,414,0,461,451,469,444,469,443,425],
[404,413,430,0,432,458,419,432,426,383],
[430,444,440,459,0,471,455,446,456,396],
[400,435,422,433,420,0,382,424,426,386],
[442,454,447,472,436,509,0,439,462,447],
[408,438,422,459,445,467,452,0,459,420],
[415,434,448,465,435,465,429,432,0,405],
[453,458,466,508,495,505,444,471,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,431,424,407,435,419,442,446,443],
[447,0,462,417,428,444,458,427,475,424],
[460,429,0,424,440,443,450,452,443,456],
[467,474,467,0,456,432,481,497,498,486],
[484,463,451,435,0,463,457,479,476,453],
[456,447,448,459,428,0,448,467,452,456],
[472,433,441,410,434,443,0,476,455,441],
[449,464,439,394,412,424,415,0,460,435],
[445,416,448,393,415,439,436,431,0,422],
[448,467,435,405,438,435,450,456,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,458,475,512,406,479,462,436,433],
[427,0,427,404,470,435,476,457,452,427],
[433,464,0,427,487,433,494,450,457,434],
[416,487,464,0,512,429,486,483,443,460],
[379,421,404,379,0,422,466,414,440,420],
[485,456,458,462,469,0,461,481,432,458],
[412,415,397,405,425,430,0,414,411,400],
[429,434,441,408,477,410,477,0,465,460],
[455,439,434,448,451,459,480,426,0,459],
[458,464,457,431,471,433,491,431,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,438,449,473,454,475,441,455,457],
[426,0,446,464,447,433,442,420,458,432],
[453,445,0,450,475,466,472,468,453,456],
[442,427,441,0,471,437,439,449,467,451],
[418,444,416,420,0,431,430,408,470,409],
[437,458,425,454,460,0,450,444,437,451],
[416,449,419,452,461,441,0,434,457,431],
[450,471,423,442,483,447,457,0,484,445],
[436,433,438,424,421,454,434,407,0,423],
[434,459,435,440,482,440,460,446,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,456,417,499,441,498,526,398,426],
[402,0,425,404,447,399,472,461,403,362],
[435,466,0,374,517,478,468,444,421,390],
[474,487,517,0,502,458,429,501,457,460],
[392,444,374,389,0,433,399,443,371,423],
[450,492,413,433,458,0,425,452,426,400],
[393,419,423,462,492,466,0,514,390,417],
[365,430,447,390,448,439,377,0,376,378],
[493,488,470,434,520,465,501,515,0,447],
[465,529,501,431,468,491,474,513,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,448,463,445,470,430,443,430,431],
[393,0,401,409,420,446,437,412,432,421],
[443,490,0,452,447,469,452,451,413,463],
[428,482,439,0,450,463,441,472,441,458],
[446,471,444,441,0,476,460,423,431,414],
[421,445,422,428,415,0,454,431,443,425],
[461,454,439,450,431,437,0,446,432,418],
[448,479,440,419,468,460,445,0,462,442],
[461,459,478,450,460,448,459,429,0,431],
[460,470,428,433,477,466,473,449,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,427,411,427,439,434,428,428,429],
[459,0,419,448,428,454,452,431,422,439],
[464,472,0,432,448,466,437,453,432,442],
[480,443,459,0,463,464,442,439,448,438],
[464,463,443,428,0,459,451,453,453,449],
[452,437,425,427,432,0,439,425,433,427],
[457,439,454,449,440,452,0,442,436,445],
[463,460,438,452,438,466,449,0,443,445],
[463,469,459,443,438,458,455,448,0,439],
[462,452,449,453,442,464,446,446,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,443,432,405,412,443,432,461,446],
[465,0,440,436,431,420,453,446,477,437],
[448,451,0,456,415,407,444,445,462,454],
[459,455,435,0,446,452,466,445,472,465],
[486,460,476,445,0,448,474,456,478,467],
[479,471,484,439,443,0,470,446,488,472],
[448,438,447,425,417,421,0,444,484,447],
[459,445,446,446,435,445,447,0,483,441],
[430,414,429,419,413,403,407,408,0,428],
[445,454,437,426,424,419,444,450,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,447,425,466,438,478,440,409,388],
[433,0,406,444,434,435,489,422,435,396],
[444,485,0,441,429,425,464,406,397,389],
[466,447,450,0,448,439,476,449,392,418],
[425,457,462,443,0,438,477,395,403,406],
[453,456,466,452,453,0,488,423,442,394],
[413,402,427,415,414,403,0,428,436,382],
[451,469,485,442,496,468,463,0,441,453],
[482,456,494,499,488,449,455,450,0,424],
[503,495,502,473,485,497,509,438,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,468,420,437,417,480,422,447,441],
[440,0,444,449,431,466,442,443,448,473],
[423,447,0,362,407,427,434,415,442,393],
[471,442,529,0,501,500,500,482,485,463],
[454,460,484,390,0,457,432,472,469,436],
[474,425,464,391,434,0,451,426,464,447],
[411,449,457,391,459,440,0,459,445,403],
[469,448,476,409,419,465,432,0,476,434],
[444,443,449,406,422,427,446,415,0,463],
[450,418,498,428,455,444,488,457,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,451,430,427,439,451,456,430,463],
[463,0,442,448,457,441,461,452,457,462],
[440,449,0,441,434,446,464,453,421,476],
[461,443,450,0,432,436,461,463,443,475],
[464,434,457,459,0,454,454,446,450,471],
[452,450,445,455,437,0,453,456,436,485],
[440,430,427,430,437,438,0,443,426,461],
[435,439,438,428,445,435,448,0,418,473],
[461,434,470,448,441,455,465,473,0,456],
[428,429,415,416,420,406,430,418,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,424,439,432,438,442,461,451,439],
[432,0,413,435,437,425,418,449,425,446],
[467,478,0,449,461,464,461,474,457,437],
[452,456,442,0,437,450,443,453,453,446],
[459,454,430,454,0,460,450,456,453,436],
[453,466,427,441,431,0,460,478,430,452],
[449,473,430,448,441,431,0,463,437,434],
[430,442,417,438,435,413,428,0,421,423],
[440,466,434,438,438,461,454,470,0,443],
[452,445,454,445,455,439,457,468,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,433,474,423,398,412,457,393,410],
[453,0,457,499,464,471,469,448,414,480],
[458,434,0,524,509,461,468,449,403,447],
[417,392,367,0,428,405,379,389,320,392],
[468,427,382,463,0,469,432,435,383,433],
[493,420,430,486,422,0,442,483,412,475],
[479,422,423,512,459,449,0,441,448,497],
[434,443,442,502,456,408,450,0,462,486],
[498,477,488,571,508,479,443,429,0,511],
[481,411,444,499,458,416,394,405,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,488,527,598,612,436,402,586,435],
[423,0,335,612,547,509,331,340,515,501],
[403,556,0,626,608,542,472,492,550,481],
[364,279,265,0,457,450,278,340,463,449],
[293,344,283,434,0,353,265,344,443,410],
[279,382,349,441,538,0,325,345,409,396],
[455,560,419,613,626,566,0,473,564,504],
[489,551,399,551,547,546,418,0,537,526],
[305,376,341,428,448,482,327,354,0,453],
[456,390,410,442,481,495,387,365,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,430,424,427,435,434,428,433,419],
[434,0,429,441,430,441,432,433,425,433],
[461,462,0,450,452,453,450,446,450,437],
[467,450,441,0,442,469,451,453,454,466],
[464,461,439,449,0,444,444,457,428,446],
[456,450,438,422,447,0,451,446,442,460],
[457,459,441,440,447,440,0,441,448,454],
[463,458,445,438,434,445,450,0,447,460],
[458,466,441,437,463,449,443,444,0,454],
[472,458,454,425,445,431,437,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,445,456,446,451,446,461,442,459],
[437,0,445,437,462,446,433,425,423,431],
[446,446,0,428,461,433,441,419,432,430],
[435,454,463,0,456,440,446,445,451,467],
[445,429,430,435,0,422,426,407,415,441],
[440,445,458,451,469,0,424,415,436,440],
[445,458,450,445,465,467,0,433,434,446],
[430,466,472,446,484,476,458,0,442,445],
[449,468,459,440,476,455,457,449,0,464],
[432,460,461,424,450,451,445,446,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,436,434,420,446,455,450,455,458],
[436,0,418,428,428,446,427,457,425,426],
[455,473,0,443,427,453,460,457,461,464],
[457,463,448,0,455,455,458,477,429,476],
[471,463,464,436,0,465,490,476,467,445],
[445,445,438,436,426,0,442,449,452,438],
[436,464,431,433,401,449,0,441,418,452],
[441,434,434,414,415,442,450,0,430,456],
[436,466,430,462,424,439,473,461,0,455],
[433,465,427,415,446,453,439,435,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,521,495,488,485,486,416,424,453],
[421,0,450,462,530,414,436,391,460,379],
[370,441,0,424,465,423,371,361,429,428],
[396,429,467,0,458,452,394,383,346,400],
[403,361,426,433,0,418,359,335,394,385],
[406,477,468,439,473,0,433,364,453,422],
[405,455,520,497,532,458,0,424,401,436],
[475,500,530,508,556,527,467,0,443,472],
[467,431,462,545,497,438,490,448,0,478],
[438,512,463,491,506,469,455,419,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,458,444,459,457,433,440,428,426],
[443,0,472,467,483,483,459,436,469,441],
[433,419,0,455,443,452,417,449,462,416],
[447,424,436,0,450,445,412,405,458,449],
[432,408,448,441,0,447,388,395,449,413],
[434,408,439,446,444,0,421,394,429,429],
[458,432,474,479,503,470,0,447,452,465],
[451,455,442,486,496,497,444,0,485,477],
[463,422,429,433,442,462,439,406,0,428],
[465,450,475,442,478,462,426,414,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,463,436,428,408,417,446,441,423],
[484,0,520,480,425,468,432,486,460,451],
[428,371,0,448,384,403,429,420,379,402],
[455,411,443,0,434,431,431,435,403,460],
[463,466,507,457,0,423,443,492,418,413],
[483,423,488,460,468,0,440,507,500,420],
[474,459,462,460,448,451,0,467,439,432],
[445,405,471,456,399,384,424,0,411,424],
[450,431,512,488,473,391,452,480,0,481],
[468,440,489,431,478,471,459,467,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,448,457,450,452,434,432,435,445],
[458,0,462,456,455,466,469,456,462,443],
[443,429,0,446,447,444,445,458,444,445],
[434,435,445,0,445,443,443,432,447,447],
[441,436,444,446,0,433,449,439,437,439],
[439,425,447,448,458,0,448,437,444,448],
[457,422,446,448,442,443,0,441,448,464],
[459,435,433,459,452,454,450,0,433,449],
[456,429,447,444,454,447,443,458,0,445],
[446,448,446,444,452,443,427,442,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,454,455,448,451,452,459,420,446],
[452,0,413,463,420,446,464,461,414,446],
[437,478,0,489,479,439,489,455,444,450],
[436,428,402,0,396,436,432,449,402,387],
[443,471,412,495,0,452,433,454,432,449],
[440,445,452,455,439,0,441,456,429,443],
[439,427,402,459,458,450,0,441,427,430],
[432,430,436,442,437,435,450,0,417,435],
[471,477,447,489,459,462,464,474,0,444],
[445,445,441,504,442,448,461,456,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,624,383,567,679,579,440,613,415,604],
[267,0,435,348,559,389,302,491,430,313],
[508,456,0,494,648,481,445,580,483,370],
[324,543,397,0,587,457,278,491,290,672],
[212,332,243,304,0,394,264,357,364,298],
[312,502,410,434,497,0,508,509,302,432],
[451,589,446,613,627,383,0,640,418,573],
[278,400,311,400,534,382,251,0,446,337],
[476,461,408,601,527,589,473,445,0,497],
[287,578,521,219,593,459,318,554,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,455,399,438,473,427,480,455,410],
[418,0,454,488,462,433,432,464,453,417],
[436,437,0,426,454,431,455,476,440,440],
[492,403,465,0,449,469,461,488,467,421],
[453,429,437,442,0,447,436,469,418,396],
[418,458,460,422,444,0,437,468,436,452],
[464,459,436,430,455,454,0,456,423,404],
[411,427,415,403,422,423,435,0,402,412],
[436,438,451,424,473,455,468,489,0,436],
[481,474,451,470,495,439,487,479,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,436,431,376,459,505,401,349,483],
[500,0,444,453,419,508,430,448,426,503],
[455,447,0,433,357,407,435,439,428,430],
[460,438,458,0,421,476,436,390,402,472],
[515,472,534,470,0,441,533,451,435,534],
[432,383,484,415,450,0,546,427,418,441],
[386,461,456,455,358,345,0,428,383,486],
[490,443,452,501,440,464,463,0,478,503],
[542,465,463,489,456,473,508,413,0,503],
[408,388,461,419,357,450,405,388,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,416,448,450,439,398,393,435,440],
[431,0,467,495,455,460,424,429,468,456],
[475,424,0,495,432,438,426,432,441,448],
[443,396,396,0,467,438,454,422,435,429],
[441,436,459,424,0,443,441,424,393,425],
[452,431,453,453,448,0,439,471,443,423],
[493,467,465,437,450,452,0,419,426,443],
[498,462,459,469,467,420,472,0,453,446],
[456,423,450,456,498,448,465,438,0,468],
[451,435,443,462,466,468,448,445,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,446,438,409,423,448,488,478,426],
[439,0,461,449,400,404,485,414,446,451],
[445,430,0,394,409,402,449,460,473,438],
[453,442,497,0,421,495,501,415,486,488],
[482,491,482,470,0,460,468,444,472,491],
[468,487,489,396,431,0,464,434,473,431],
[443,406,442,390,423,427,0,422,450,479],
[403,477,431,476,447,457,469,0,487,461],
[413,445,418,405,419,418,441,404,0,408],
[465,440,453,403,400,460,412,430,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,461,460,445,418,465,476,468],
[439,0,457,406,458,468,431,450,444,460],
[444,434,0,428,421,450,421,452,447,437],
[430,485,463,0,438,447,456,470,465,481],
[431,433,470,453,0,459,426,457,472,472],
[446,423,441,444,432,0,424,455,452,482],
[473,460,470,435,465,467,0,441,465,489],
[426,441,439,421,434,436,450,0,432,449],
[415,447,444,426,419,439,426,459,0,461],
[423,431,454,410,419,409,402,442,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,431,443,421,436,427,439,440,448],
[410,0,410,405,414,419,414,410,427,443],
[460,481,0,460,416,470,446,455,462,473],
[448,486,431,0,449,432,446,456,471,454],
[470,477,475,442,0,416,438,458,493,467],
[455,472,421,459,475,0,449,450,464,458],
[464,477,445,445,453,442,0,439,473,457],
[452,481,436,435,433,441,452,0,488,463],
[451,464,429,420,398,427,418,403,0,444],
[443,448,418,437,424,433,434,428,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,429,410,401,407,424,422,432,416],
[477,0,464,443,436,445,443,453,452,438],
[462,427,0,425,428,432,450,429,447,425],
[481,448,466,0,451,457,479,464,472,440],
[490,455,463,440,0,448,456,467,448,428],
[484,446,459,434,443,0,460,467,445,447],
[467,448,441,412,435,431,0,439,420,414],
[469,438,462,427,424,424,452,0,439,422],
[459,439,444,419,443,446,471,452,0,453],
[475,453,466,451,463,444,477,469,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,440,440,434,433,451,455,444,466],
[461,0,456,472,451,437,460,463,441,467],
[451,435,0,447,432,411,456,437,439,451],
[451,419,444,0,446,435,466,444,454,460],
[457,440,459,445,0,457,459,442,453,461],
[458,454,480,456,434,0,458,468,443,465],
[440,431,435,425,432,433,0,435,426,449],
[436,428,454,447,449,423,456,0,431,465],
[447,450,452,437,438,448,465,460,0,447],
[425,424,440,431,430,426,442,426,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,461,443,437,451,439,450,429,452],
[448,0,441,465,443,432,460,446,435,426],
[430,450,0,461,457,413,450,448,424,430],
[448,426,430,0,443,417,441,416,417,437],
[454,448,434,448,0,426,429,438,437,432],
[440,459,478,474,465,0,464,433,459,452],
[452,431,441,450,462,427,0,455,433,457],
[441,445,443,475,453,458,436,0,448,454],
[462,456,467,474,454,432,458,443,0,461],
[439,465,461,454,459,439,434,437,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,426,448,414,402,474,438,476,429],
[443,0,434,448,401,412,456,437,415,402],
[465,457,0,465,428,449,443,431,477,443],
[443,443,426,0,396,434,455,417,465,411],
[477,490,463,495,0,463,466,442,464,450],
[489,479,442,457,428,0,483,469,445,434],
[417,435,448,436,425,408,0,430,482,428],
[453,454,460,474,449,422,461,0,473,440],
[415,476,414,426,427,446,409,418,0,427],
[462,489,448,480,441,457,463,451,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,412,462,431,414,422,404,421,420],
[469,0,443,432,440,455,434,431,444,434],
[479,448,0,472,436,447,443,437,421,457],
[429,459,419,0,426,428,427,412,408,432],
[460,451,455,465,0,436,446,440,434,443],
[477,436,444,463,455,0,432,426,406,465],
[469,457,448,464,445,459,0,464,449,475],
[487,460,454,479,451,465,427,0,451,468],
[470,447,470,483,457,485,442,440,0,467],
[471,457,434,459,448,426,416,423,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,460,447,439,447,453,446,449,452],
[433,0,431,435,430,420,429,437,446,421],
[431,460,0,424,448,435,419,462,457,431],
[444,456,467,0,469,446,446,463,463,474],
[452,461,443,422,0,429,424,449,432,449],
[444,471,456,445,462,0,426,445,452,448],
[438,462,472,445,467,465,0,449,472,446],
[445,454,429,428,442,446,442,0,458,456],
[442,445,434,428,459,439,419,433,0,458],
[439,470,460,417,442,443,445,435,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,467,459,441,446,449,463,466,452],
[462,0,473,456,417,425,442,454,437,451],
[424,418,0,435,428,433,421,424,437,436],
[432,435,456,0,445,440,438,452,417,437],
[450,474,463,446,0,430,452,443,451,459],
[445,466,458,451,461,0,427,468,428,448],
[442,449,470,453,439,464,0,444,428,443],
[428,437,467,439,448,423,447,0,426,430],
[425,454,454,474,440,463,463,465,0,449],
[439,440,455,454,432,443,448,461,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,463,438,469,437,446,441,443,435],
[470,0,467,445,472,441,455,474,458,456],
[428,424,0,417,447,420,427,440,426,439],
[453,446,474,0,461,454,472,468,458,444],
[422,419,444,430,0,426,421,440,427,432],
[454,450,471,437,465,0,465,472,467,454],
[445,436,464,419,470,426,0,453,438,434],
[450,417,451,423,451,419,438,0,448,436],
[448,433,465,433,464,424,453,443,0,412],
[456,435,452,447,459,437,457,455,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,462,433,481,485,453,465,461,461],
[458,0,464,438,449,476,496,464,442,450],
[429,427,0,431,435,464,446,448,423,439],
[458,453,460,0,424,461,461,446,438,439],
[410,442,456,467,0,452,476,457,462,446],
[406,415,427,430,439,0,454,441,425,439],
[438,395,445,430,415,437,0,450,424,428],
[426,427,443,445,434,450,441,0,425,423],
[430,449,468,453,429,466,467,466,0,455],
[430,441,452,452,445,452,463,468,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,450,421,416,442,442,413,434,438],
[479,0,438,458,439,453,471,461,455,472],
[441,453,0,462,435,433,456,455,474,461],
[470,433,429,0,427,440,460,463,463,465],
[475,452,456,464,0,447,474,445,461,464],
[449,438,458,451,444,0,465,461,465,494],
[449,420,435,431,417,426,0,435,446,471],
[478,430,436,428,446,430,456,0,452,445],
[457,436,417,428,430,426,445,439,0,454],
[453,419,430,426,427,397,420,446,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,431,418,420,457,434,422,442,409],
[480,0,444,434,433,477,474,446,442,446],
[460,447,0,422,441,455,491,456,423,449],
[473,457,469,0,452,466,476,445,449,442],
[471,458,450,439,0,459,499,469,436,479],
[434,414,436,425,432,0,465,429,439,430],
[457,417,400,415,392,426,0,427,428,410],
[469,445,435,446,422,462,464,0,450,426],
[449,449,468,442,455,452,463,441,0,417],
[482,445,442,449,412,461,481,465,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,445,419,451,455,444,464,440,444],
[450,0,439,416,438,433,441,463,432,455],
[446,452,0,425,451,454,453,468,431,476],
[472,475,466,0,451,446,443,452,456,476],
[440,453,440,440,0,445,438,458,443,445],
[436,458,437,445,446,0,446,448,424,446],
[447,450,438,448,453,445,0,463,437,464],
[427,428,423,439,433,443,428,0,439,446],
[451,459,460,435,448,467,454,452,0,464],
[447,436,415,415,446,445,427,445,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,482,473,409,435,472,489,427,419],
[417,0,439,465,397,437,463,490,438,468],
[409,452,0,426,394,421,455,450,384,402],
[418,426,465,0,395,405,428,457,422,405],
[482,494,497,496,0,422,495,501,470,509],
[456,454,470,486,469,0,484,501,445,492],
[419,428,436,463,396,407,0,482,435,458],
[402,401,441,434,390,390,409,0,454,432],
[464,453,507,469,421,446,456,437,0,459],
[472,423,489,486,382,399,433,459,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,453,421,443,452,419,445,449,445],
[441,0,457,437,448,452,446,436,453,453],
[438,434,0,429,448,452,429,424,449,455],
[470,454,462,0,459,448,439,449,433,452],
[448,443,443,432,0,450,444,450,450,440],
[439,439,439,443,441,0,438,431,444,416],
[472,445,462,452,447,453,0,426,436,434],
[446,455,467,442,441,460,465,0,460,433],
[442,438,442,458,441,447,455,431,0,435],
[446,438,436,439,451,475,457,458,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,454,477,429,483,430,448,453,444],
[410,0,422,462,426,413,447,416,424,459],
[437,469,0,472,438,441,467,449,450,464],
[414,429,419,0,398,449,403,416,417,437],
[462,465,453,493,0,479,435,452,467,443],
[408,478,450,442,412,0,452,443,442,472],
[461,444,424,488,456,439,0,447,430,423],
[443,475,442,475,439,448,444,0,436,462],
[438,467,441,474,424,449,461,455,0,446],
[447,432,427,454,448,419,468,429,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,430,446,444,453,452,457,448,433],
[430,0,432,450,443,474,456,468,447,459],
[461,459,0,473,451,453,423,474,456,446],
[445,441,418,0,426,431,410,442,429,465],
[447,448,440,465,0,476,453,447,468,448],
[438,417,438,460,415,0,414,431,431,457],
[439,435,468,481,438,477,0,473,453,473],
[434,423,417,449,444,460,418,0,420,437],
[443,444,435,462,423,460,438,471,0,463],
[458,432,445,426,443,434,418,454,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,462,493,484,408,449,448,480,442],
[448,0,452,430,467,417,433,422,485,417],
[429,439,0,475,438,427,448,425,440,444],
[398,461,416,0,444,423,414,422,453,443],
[407,424,453,447,0,425,406,407,461,414],
[483,474,464,468,466,0,471,474,510,438],
[442,458,443,477,485,420,0,450,477,501],
[443,469,466,469,484,417,441,0,481,460],
[411,406,451,438,430,381,414,410,0,412],
[449,474,447,448,477,453,390,431,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,395,380,400,392,471,424,467,395],
[584,0,433,414,493,476,490,458,517,435],
[496,458,0,422,511,443,513,467,507,443],
[511,477,469,0,494,411,493,452,538,438],
[491,398,380,397,0,359,498,405,463,471],
[499,415,448,480,532,0,521,474,533,502],
[420,401,378,398,393,370,0,413,412,419],
[467,433,424,439,486,417,478,0,519,470],
[424,374,384,353,428,358,479,372,0,435],
[496,456,448,453,420,389,472,421,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,456,464,472,486,462,455,440,412],
[401,0,435,476,436,420,461,418,449,432],
[435,456,0,438,460,444,465,424,438,438],
[427,415,453,0,460,451,447,434,424,405],
[419,455,431,431,0,412,432,420,403,412],
[405,471,447,440,479,0,467,460,458,442],
[429,430,426,444,459,424,0,423,411,413],
[436,473,467,457,471,431,468,0,435,443],
[451,442,453,467,488,433,480,456,0,462],
[479,459,453,486,479,449,478,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,451,436,429,462,426,472,457,439],
[418,0,417,451,449,437,447,479,446,421],
[440,474,0,427,477,450,427,461,440,422],
[455,440,464,0,468,463,426,459,453,444],
[462,442,414,423,0,427,423,433,443,423],
[429,454,441,428,464,0,442,456,460,449],
[465,444,464,465,468,449,0,467,446,443],
[419,412,430,432,458,435,424,0,449,428],
[434,445,451,438,448,431,445,442,0,425],
[452,470,469,447,468,442,448,463,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,564,469,498,516,469,430,534,466,536],
[327,0,414,405,420,335,386,422,415,443],
[422,477,0,529,541,430,412,442,408,495],
[393,486,362,0,401,383,452,499,431,442],
[375,471,350,490,0,397,372,418,447,445],
[422,556,461,508,494,0,457,523,517,583],
[461,505,479,439,519,434,0,459,481,582],
[357,469,449,392,473,368,432,0,409,482],
[425,476,483,460,444,374,410,482,0,469],
[355,448,396,449,446,308,309,409,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,429,486,489,511,484,436,464,445],
[406,0,414,463,486,443,460,447,478,417],
[462,477,0,441,491,454,444,448,478,464],
[405,428,450,0,475,452,464,420,467,404],
[402,405,400,416,0,418,441,401,426,404],
[380,448,437,439,473,0,423,481,442,426],
[407,431,447,427,450,468,0,410,416,451],
[455,444,443,471,490,410,481,0,442,436],
[427,413,413,424,465,449,475,449,0,426],
[446,474,427,487,487,465,440,455,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,432,423,414,436,440,425,419,461],
[495,0,471,466,457,466,485,474,444,468],
[459,420,0,434,414,447,429,432,452,448],
[468,425,457,0,442,463,438,453,429,450],
[477,434,477,449,0,485,458,482,445,479],
[455,425,444,428,406,0,441,430,410,447],
[451,406,462,453,433,450,0,469,426,457],
[466,417,459,438,409,461,422,0,434,438],
[472,447,439,462,446,481,465,457,0,469],
[430,423,443,441,412,444,434,453,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,490,433,498,488,458,456,469,453],
[388,0,439,431,461,417,433,413,431,431],
[401,452,0,434,423,384,402,452,439,465],
[458,460,457,0,510,462,443,416,460,457],
[393,430,468,381,0,403,460,456,417,513],
[403,474,507,429,488,0,479,451,452,424],
[433,458,489,448,431,412,0,458,460,467],
[435,478,439,475,435,440,433,0,454,469],
[422,460,452,431,474,439,431,437,0,436],
[438,460,426,434,378,467,424,422,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,456,504,456,511,580,437,527,489],
[388,0,452,584,459,369,555,483,495,552],
[435,439,0,574,552,497,549,510,532,525],
[387,307,317,0,477,413,499,347,437,298],
[435,432,339,414,0,463,446,333,461,481],
[380,522,394,478,428,0,528,399,527,466],
[311,336,342,392,445,363,0,417,454,380],
[454,408,381,544,558,492,474,0,536,509],
[364,396,359,454,430,364,437,355,0,434],
[402,339,366,593,410,425,511,382,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,464,456,473,432,433,416,430,408],
[431,0,437,426,421,459,427,367,409,416],
[427,454,0,438,437,441,399,425,437,405],
[435,465,453,0,477,433,458,417,421,442],
[418,470,454,414,0,424,428,422,444,432],
[459,432,450,458,467,0,447,419,430,454],
[458,464,492,433,463,444,0,454,449,449],
[475,524,466,474,469,472,437,0,486,458],
[461,482,454,470,447,461,442,405,0,445],
[483,475,486,449,459,437,442,433,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,492,388,391,458,450,461,423,405],
[459,0,510,481,432,469,536,498,434,455],
[399,381,0,384,442,431,469,433,411,485],
[503,410,507,0,414,483,478,498,457,476],
[500,459,449,477,0,459,486,499,440,468],
[433,422,460,408,432,0,464,468,441,433],
[441,355,422,413,405,427,0,477,437,465],
[430,393,458,393,392,423,414,0,442,417],
[468,457,480,434,451,450,454,449,0,448],
[486,436,406,415,423,458,426,474,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,470,456,429,448,437,439,453,439],
[475,0,448,453,460,450,445,447,458,461],
[421,443,0,426,415,421,422,424,448,422],
[435,438,465,0,434,452,445,443,456,457],
[462,431,476,457,0,474,451,474,467,444],
[443,441,470,439,417,0,438,446,449,430],
[454,446,469,446,440,453,0,451,455,449],
[452,444,467,448,417,445,440,0,456,453],
[438,433,443,435,424,442,436,435,0,442],
[452,430,469,434,447,461,442,438,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,455,488,461,441,461,418,438,450],
[485,0,445,494,467,459,414,411,433,464],
[436,446,0,446,436,437,437,442,522,455],
[403,397,445,0,403,423,416,397,435,415],
[430,424,455,488,0,429,422,475,483,467],
[450,432,454,468,462,0,459,427,465,457],
[430,477,454,475,469,432,0,496,432,516],
[473,480,449,494,416,464,395,0,485,475],
[453,458,369,456,408,426,459,406,0,452],
[441,427,436,476,424,434,375,416,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,442,458,447,443,451,442,423,461],
[470,0,431,445,481,452,485,452,484,475],
[449,460,0,438,466,446,460,435,467,480],
[433,446,453,0,496,435,452,460,466,438],
[444,410,425,395,0,399,450,413,435,459],
[448,439,445,456,492,0,472,456,453,470],
[440,406,431,439,441,419,0,393,428,459],
[449,439,456,431,478,435,498,0,469,455],
[468,407,424,425,456,438,463,422,0,474],
[430,416,411,453,432,421,432,436,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,448,463,452,466,458,450,441,466],
[440,0,456,455,426,434,423,403,425,449],
[443,435,0,434,460,460,459,422,424,439],
[428,436,457,0,457,453,418,437,427,435],
[439,465,431,434,0,455,464,419,447,434],
[425,457,431,438,436,0,463,421,420,412],
[433,468,432,473,427,428,0,424,452,438],
[441,488,469,454,472,470,467,0,453,460],
[450,466,467,464,444,471,439,438,0,457],
[425,442,452,456,457,479,453,431,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,470,435,477,472,459,472,442,460],
[426,0,443,438,446,468,445,458,445,428],
[421,448,0,427,452,468,454,452,438,441],
[456,453,464,0,460,469,455,467,437,447],
[414,445,439,431,0,454,446,453,428,439],
[419,423,423,422,437,0,409,442,430,406],
[432,446,437,436,445,482,0,460,451,432],
[419,433,439,424,438,449,431,0,440,411],
[449,446,453,454,463,461,440,451,0,432],
[431,463,450,444,452,485,459,480,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,415,433,407,408,451,419,451,417],
[433,0,425,457,443,409,428,422,456,430],
[476,466,0,441,451,418,445,435,471,461],
[458,434,450,0,442,436,439,434,432,459],
[484,448,440,449,0,425,440,440,450,436],
[483,482,473,455,466,0,431,443,472,443],
[440,463,446,452,451,460,0,451,492,469],
[472,469,456,457,451,448,440,0,433,441],
[440,435,420,459,441,419,399,458,0,429],
[474,461,430,432,455,448,422,450,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,467,462,464,430,423,452,401,434],
[467,0,443,448,493,450,366,452,433,402],
[424,448,0,449,469,449,404,477,451,480],
[429,443,442,0,473,431,390,467,466,425],
[427,398,422,418,0,371,366,475,442,440],
[461,441,442,460,520,0,373,476,443,438],
[468,525,487,501,525,518,0,537,500,436],
[439,439,414,424,416,415,354,0,411,430],
[490,458,440,425,449,448,391,480,0,457],
[457,489,411,466,451,453,455,461,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,428,490,431,453,478,510,459,457],
[437,0,446,455,459,441,474,503,446,430],
[463,445,0,457,451,457,464,495,447,430],
[401,436,434,0,443,427,453,480,443,405],
[460,432,440,448,0,461,423,469,454,408],
[438,450,434,464,430,0,454,488,466,423],
[413,417,427,438,468,437,0,481,440,420],
[381,388,396,411,422,403,410,0,434,378],
[432,445,444,448,437,425,451,457,0,415],
[434,461,461,486,483,468,471,513,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,486,484,425,520,485,421,454,483],
[418,0,446,420,484,427,433,350,440,377],
[405,445,0,429,434,388,458,396,437,462],
[407,471,462,0,399,360,489,386,431,431],
[466,407,457,492,0,432,469,414,511,505],
[371,464,503,531,459,0,477,437,446,478],
[406,458,433,402,422,414,0,366,416,441],
[470,541,495,505,477,454,525,0,423,507],
[437,451,454,460,380,445,475,468,0,464],
[408,514,429,460,386,413,450,384,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,422,408,440,441,429,439,420,463],
[448,0,409,444,446,437,423,417,406,445],
[469,482,0,434,429,441,450,440,414,477],
[483,447,457,0,491,441,474,453,457,496],
[451,445,462,400,0,435,444,428,411,441],
[450,454,450,450,456,0,434,427,421,476],
[462,468,441,417,447,457,0,436,460,488],
[452,474,451,438,463,464,455,0,444,472],
[471,485,477,434,480,470,431,447,0,471],
[428,446,414,395,450,415,403,419,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,411,427,429,433,408,456,420,457],
[481,0,481,427,434,444,414,469,447,462],
[480,410,0,423,441,448,412,468,427,465],
[464,464,468,0,460,421,454,475,436,492],
[462,457,450,431,0,439,435,501,454,481],
[458,447,443,470,452,0,437,456,451,468],
[483,477,479,437,456,454,0,483,442,461],
[435,422,423,416,390,435,408,0,425,437],
[471,444,464,455,437,440,449,466,0,460],
[434,429,426,399,410,423,430,454,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,455,439,461,445,462,479,472,444],
[478,0,455,449,465,455,469,480,458,437],
[436,436,0,446,470,462,469,473,444,452],
[452,442,445,0,468,449,450,472,459,456],
[430,426,421,423,0,427,425,459,438,427],
[446,436,429,442,464,0,453,470,450,465],
[429,422,422,441,466,438,0,459,445,453],
[412,411,418,419,432,421,432,0,418,426],
[419,433,447,432,453,441,446,473,0,443],
[447,454,439,435,464,426,438,465,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,469,473,445,452,453,460,445,452],
[436,0,459,457,440,433,474,447,445,461],
[422,432,0,473,457,434,447,465,446,448],
[418,434,418,0,417,420,423,426,445,424],
[446,451,434,474,0,437,454,460,437,476],
[439,458,457,471,454,0,460,470,447,460],
[438,417,444,468,437,431,0,440,418,458],
[431,444,426,465,431,421,451,0,424,452],
[446,446,445,446,454,444,473,467,0,449],
[439,430,443,467,415,431,433,439,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,433,446,469,424,450,450,477,480],
[442,0,434,441,438,434,436,466,486,461],
[458,457,0,470,454,451,453,435,465,470],
[445,450,421,0,441,418,432,432,464,458],
[422,453,437,450,0,407,430,450,461,450],
[467,457,440,473,484,0,466,475,492,500],
[441,455,438,459,461,425,0,453,472,470],
[441,425,456,459,441,416,438,0,456,460],
[414,405,426,427,430,399,419,435,0,441],
[411,430,421,433,441,391,421,431,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,418,459,443,455,434,459,438,453],
[464,0,434,452,414,442,434,464,443,445],
[473,457,0,501,417,452,473,477,481,477],
[432,439,390,0,422,429,426,441,418,444],
[448,477,474,469,0,471,471,433,431,486],
[436,449,439,462,420,0,442,461,430,495],
[457,457,418,465,420,449,0,464,447,440],
[432,427,414,450,458,430,427,0,434,469],
[453,448,410,473,460,461,444,457,0,443],
[438,446,414,447,405,396,451,422,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,466,434,463,422,499,456,463,491],
[374,0,349,353,390,365,389,411,434,457],
[425,542,0,519,482,557,526,450,480,548],
[457,538,372,0,407,472,411,457,476,513],
[428,501,409,484,0,490,430,380,445,488],
[469,526,334,419,401,0,412,416,465,481],
[392,502,365,480,461,479,0,395,429,480],
[435,480,441,434,511,475,496,0,469,536],
[428,457,411,415,446,426,462,422,0,437],
[400,434,343,378,403,410,411,355,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,379,219,392,377,296,319,393,397],
[586,0,443,558,465,591,608,376,509,504],
[512,448,0,282,368,559,463,435,435,436],
[672,333,609,0,508,613,627,539,552,455],
[499,426,523,383,0,596,551,505,418,514],
[514,300,332,278,295,0,505,348,517,326],
[595,283,428,264,340,386,0,406,405,298],
[572,515,456,352,386,543,485,0,482,526],
[498,382,456,339,473,374,486,409,0,490],
[494,387,455,436,377,565,593,365,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,393,435,367,467,376,485,380,487],
[485,0,554,511,525,484,443,523,477,569],
[498,337,0,424,422,388,383,427,382,498],
[456,380,467,0,466,502,456,538,431,597],
[524,366,469,425,0,461,446,549,373,518],
[424,407,503,389,430,0,438,545,412,538],
[515,448,508,435,445,453,0,512,443,495],
[406,368,464,353,342,346,379,0,373,511],
[511,414,509,460,518,479,448,518,0,591],
[404,322,393,294,373,353,396,380,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,443,424,432,417,436,449,448,441],
[450,0,440,441,463,449,452,444,451,441],
[448,451,0,441,455,442,461,449,444,436],
[467,450,450,0,452,431,458,453,460,445],
[459,428,436,439,0,451,452,438,461,444],
[474,442,449,460,440,0,462,447,442,464],
[455,439,430,433,439,429,0,447,451,445],
[442,447,442,438,453,444,444,0,452,435],
[443,440,447,431,430,449,440,439,0,437],
[450,450,455,446,447,427,446,456,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,466,442,453,451,450,459,458,458],
[414,0,443,434,447,434,434,460,455,445],
[425,448,0,441,443,435,431,442,468,459],
[449,457,450,0,456,437,408,456,473,445],
[438,444,448,435,0,431,413,437,447,444],
[440,457,456,454,460,0,433,464,448,466],
[441,457,460,483,478,458,0,474,455,474],
[432,431,449,435,454,427,417,0,437,440],
[433,436,423,418,444,443,436,454,0,443],
[433,446,432,446,447,425,417,451,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,452,464,458,424,475,441,448,433],
[432,0,446,449,429,425,486,429,457,429],
[439,445,0,438,432,458,464,426,452,435],
[427,442,453,0,444,432,452,441,454,413],
[433,462,459,447,0,432,454,439,450,451],
[467,466,433,459,459,0,479,474,471,435],
[416,405,427,439,437,412,0,419,418,405],
[450,462,465,450,452,417,472,0,460,450],
[443,434,439,437,441,420,473,431,0,424],
[458,462,456,478,440,456,486,441,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,441,509,506,455,418,439,454,464],
[403,0,460,451,450,451,402,399,449,469],
[450,431,0,434,483,371,393,376,447,414],
[382,440,457,0,490,442,497,451,471,472],
[385,441,408,401,0,397,396,362,401,402],
[436,440,520,449,494,0,449,399,496,482],
[473,489,498,394,495,442,0,424,472,444],
[452,492,515,440,529,492,467,0,509,466],
[437,442,444,420,490,395,419,382,0,447],
[427,422,477,419,489,409,447,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,415,441,456,410,412,422,417,419],
[411,0,393,372,397,406,433,402,375,402],
[476,498,0,445,446,414,436,427,424,418],
[450,519,446,0,480,442,433,441,407,448],
[435,494,445,411,0,451,416,440,415,408],
[481,485,477,449,440,0,462,453,415,444],
[479,458,455,458,475,429,0,447,443,440],
[469,489,464,450,451,438,444,0,420,442],
[474,516,467,484,476,476,448,471,0,438],
[472,489,473,443,483,447,451,449,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,489,451,448,502,458,468,359,414],
[458,0,455,458,467,553,580,433,441,497],
[402,436,0,459,442,426,456,436,406,408],
[440,433,432,0,447,516,489,457,423,380],
[443,424,449,444,0,506,523,427,457,449],
[389,338,465,375,385,0,460,409,393,394],
[433,311,435,402,368,431,0,370,305,394],
[423,458,455,434,464,482,521,0,359,426],
[532,450,485,468,434,498,586,532,0,506],
[477,394,483,511,442,497,497,465,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,427,467,494,468,444,473,421,442],
[431,0,458,434,497,491,425,441,445,460],
[464,433,0,433,488,484,473,430,428,450],
[424,457,458,0,472,473,442,438,432,445],
[397,394,403,419,0,458,426,398,399,408],
[423,400,407,418,433,0,425,359,361,432],
[447,466,418,449,465,466,0,395,411,456],
[418,450,461,453,493,532,496,0,454,480],
[470,446,463,459,492,530,480,437,0,469],
[449,431,441,446,483,459,435,411,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,427,472,477,429,459,417,451,451],
[404,0,410,437,424,459,459,445,425,410],
[464,481,0,486,484,491,485,460,454,441],
[419,454,405,0,438,478,459,428,426,377],
[414,467,407,453,0,433,528,462,439,379],
[462,432,400,413,458,0,449,428,401,441],
[432,432,406,432,363,442,0,351,405,399],
[474,446,431,463,429,463,540,0,432,458],
[440,466,437,465,452,490,486,459,0,402],
[440,481,450,514,512,450,492,433,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,447,448,458,452,432,421,412,424],
[453,0,425,442,463,475,455,450,417,438],
[444,466,0,455,464,486,449,444,425,453],
[443,449,436,0,479,480,440,426,425,422],
[433,428,427,412,0,449,430,434,437,414],
[439,416,405,411,442,0,420,446,417,423],
[459,436,442,451,461,471,0,441,436,463],
[470,441,447,465,457,445,450,0,431,435],
[479,474,466,466,454,474,455,460,0,445],
[467,453,438,469,477,468,428,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,473,466,437,464,466,483,468,439],
[427,0,432,444,410,442,432,433,447,439],
[418,459,0,451,423,422,436,443,430,436],
[425,447,440,0,413,431,433,458,443,435],
[454,481,468,478,0,451,444,464,467,447],
[427,449,469,460,440,0,458,455,460,448],
[425,459,455,458,447,433,0,458,466,459],
[408,458,448,433,427,436,433,0,421,429],
[423,444,461,448,424,431,425,470,0,445],
[452,452,455,456,444,443,432,462,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,440,420,451,450,433,451,438,455],
[447,0,452,440,436,438,434,441,466,452],
[451,439,0,421,444,464,450,441,448,450],
[471,451,470,0,444,448,446,444,436,452],
[440,455,447,447,0,479,433,444,457,449],
[441,453,427,443,412,0,435,422,439,446],
[458,457,441,445,458,456,0,462,436,450],
[440,450,450,447,447,469,429,0,418,437],
[453,425,443,455,434,452,455,473,0,468],
[436,439,441,439,442,445,441,454,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,441,436,443,436,452,456,424,460],
[495,0,460,442,462,445,500,495,480,476],
[450,431,0,439,474,445,459,470,427,472],
[455,449,452,0,458,461,458,470,433,470],
[448,429,417,433,0,459,435,436,434,431],
[455,446,446,430,432,0,473,473,452,462],
[439,391,432,433,456,418,0,446,406,415],
[435,396,421,421,455,418,445,0,439,457],
[467,411,464,458,457,439,485,452,0,443],
[431,415,419,421,460,429,476,434,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,414,429,444,401,417,415,427],
[447,0,419,411,441,453,438,420,442,427],
[442,472,0,439,479,478,438,432,426,431],
[477,480,452,0,465,479,443,456,460,456],
[462,450,412,426,0,448,423,423,433,429],
[447,438,413,412,443,0,412,437,417,430],
[490,453,453,448,468,479,0,462,440,445],
[474,471,459,435,468,454,429,0,442,462],
[476,449,465,431,458,474,451,449,0,445],
[464,464,460,435,462,461,446,429,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,442,457,470,448,453,462,442,452],
[437,0,436,440,457,440,437,429,426,446],
[449,455,0,431,448,445,426,442,447,441],
[434,451,460,0,471,433,429,432,441,450],
[421,434,443,420,0,453,435,435,411,433],
[443,451,446,458,438,0,447,432,436,430],
[438,454,465,462,456,444,0,439,432,448],
[429,462,449,459,456,459,452,0,447,452],
[449,465,444,450,480,455,459,444,0,451],
[439,445,450,441,458,461,443,439,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,503,456,462,498,453,486,472,434],
[442,0,532,409,432,492,443,461,499,525],
[388,359,0,406,374,415,363,399,418,388],
[435,482,485,0,445,460,450,497,493,497],
[429,459,517,446,0,487,451,465,474,481],
[393,399,476,431,404,0,444,449,475,494],
[438,448,528,441,440,447,0,449,464,494],
[405,430,492,394,426,442,442,0,440,403],
[419,392,473,398,417,416,427,451,0,463],
[457,366,503,394,410,397,397,488,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,433,439,446,444,434,430,440,442],
[443,0,451,435,430,446,449,455,456,458],
[458,440,0,456,463,443,435,463,465,434],
[452,456,435,0,445,451,446,443,454,452],
[445,461,428,446,0,457,428,445,479,439],
[447,445,448,440,434,0,437,441,452,444],
[457,442,456,445,463,454,0,434,457,445],
[461,436,428,448,446,450,457,0,459,441],
[451,435,426,437,412,439,434,432,0,423],
[449,433,457,439,452,447,446,450,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,459,482,414,441,444,443,441,462],
[433,0,476,447,432,469,446,458,476,454],
[432,415,0,453,396,417,447,428,426,425],
[409,444,438,0,386,423,452,445,422,440],
[477,459,495,505,0,469,481,458,432,472],
[450,422,474,468,422,0,466,446,444,431],
[447,445,444,439,410,425,0,431,440,440],
[448,433,463,446,433,445,460,0,429,462],
[450,415,465,469,459,447,451,462,0,480],
[429,437,466,451,419,460,451,429,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,446,437,448,449,456,455,460],
[437,0,432,452,421,439,445,445,426,442],
[436,459,0,465,434,457,455,459,429,462],
[445,439,426,0,426,452,448,442,435,459],
[454,470,457,465,0,453,472,442,439,454],
[443,452,434,439,438,0,446,455,421,438],
[442,446,436,443,419,445,0,451,418,425],
[435,446,432,449,449,436,440,0,412,459],
[436,465,462,456,452,470,473,479,0,460],
[431,449,429,432,437,453,466,432,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,454,445,461,461,442,451,428,460],
[452,0,435,468,478,450,454,431,433,475],
[437,456,0,468,453,470,469,422,433,469],
[446,423,423,0,429,450,461,421,437,455],
[430,413,438,462,0,456,431,419,435,459],
[430,441,421,441,435,0,432,426,410,436],
[449,437,422,430,460,459,0,411,420,482],
[440,460,469,470,472,465,480,0,458,479],
[463,458,458,454,456,481,471,433,0,478],
[431,416,422,436,432,455,409,412,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,428,406,448,408,437,436,408,436],
[471,0,442,438,441,439,410,428,419,428],
[463,449,0,432,457,456,421,442,458,414],
[485,453,459,0,482,453,424,478,445,461],
[443,450,434,409,0,425,424,427,444,422],
[483,452,435,438,466,0,441,469,439,446],
[454,481,470,467,467,450,0,445,448,471],
[455,463,449,413,464,422,446,0,437,424],
[483,472,433,446,447,452,443,454,0,439],
[455,463,477,430,469,445,420,467,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,419,445,414,454,448,447,465,430],
[442,0,453,459,436,446,433,438,454,448],
[472,438,0,449,445,436,449,442,441,440],
[446,432,442,0,405,436,437,450,434,430],
[477,455,446,486,0,438,473,464,464,460],
[437,445,455,455,453,0,460,460,455,460],
[443,458,442,454,418,431,0,443,445,444],
[444,453,449,441,427,431,448,0,460,434],
[426,437,450,457,427,436,446,431,0,437],
[461,443,451,461,431,431,447,457,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,448,435,425,440,438,439,429,444],
[428,0,424,431,419,416,414,429,432,433],
[443,467,0,433,454,447,443,455,429,459],
[456,460,458,0,446,451,435,436,451,456],
[466,472,437,445,0,430,431,456,437,454],
[451,475,444,440,461,0,445,429,439,451],
[453,477,448,456,460,446,0,450,442,461],
[452,462,436,455,435,462,441,0,420,434],
[462,459,462,440,454,452,449,471,0,459],
[447,458,432,435,437,440,430,457,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,444,419,409,456,422,419,410,422],
[455,0,453,454,438,432,442,442,467,429],
[447,438,0,461,420,471,434,414,427,444],
[472,437,430,0,443,457,454,464,435,437],
[482,453,471,448,0,451,434,439,442,439],
[435,459,420,434,440,0,431,442,456,416],
[469,449,457,437,457,460,0,456,514,438],
[472,449,477,427,452,449,435,0,431,448],
[481,424,464,456,449,435,377,460,0,447],
[469,462,447,454,452,475,453,443,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,483,462,470,490,452,496,443,514],
[419,0,433,424,446,459,430,468,464,462],
[408,458,0,451,420,450,425,448,453,479],
[429,467,440,0,468,446,411,472,431,455],
[421,445,471,423,0,432,446,484,458,461],
[401,432,441,445,459,0,433,454,461,476],
[439,461,466,480,445,458,0,509,476,505],
[395,423,443,419,407,437,382,0,423,452],
[448,427,438,460,433,430,415,468,0,468],
[377,429,412,436,430,415,386,439,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,468,428,452,449,438,426,465],
[431,0,464,482,460,461,441,452,447,473],
[438,427,0,462,433,457,422,440,456,453],
[423,409,429,0,405,418,412,398,419,423],
[463,431,458,486,0,444,440,437,447,469],
[439,430,434,473,447,0,428,450,453,451],
[442,450,469,479,451,463,0,466,467,467],
[453,439,451,493,454,441,425,0,458,483],
[465,444,435,472,444,438,424,433,0,458],
[426,418,438,468,422,440,424,408,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,469,445,447,458,479,485,468,433],
[448,0,440,478,421,432,453,476,463,434],
[422,451,0,440,419,416,455,450,473,425],
[446,413,451,0,433,429,442,440,445,438],
[444,470,472,458,0,444,467,497,476,466],
[433,459,475,462,447,0,465,468,469,433],
[412,438,436,449,424,426,0,445,449,410],
[406,415,441,451,394,423,446,0,444,399],
[423,428,418,446,415,422,442,447,0,450],
[458,457,466,453,425,458,481,492,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,406,475,403,463,460,435,445,416],
[468,0,426,476,427,514,484,453,478,464],
[485,465,0,485,467,475,469,438,490,416],
[416,415,406,0,416,419,473,455,463,439],
[488,464,424,475,0,488,482,457,464,448],
[428,377,416,472,403,0,481,414,449,420],
[431,407,422,418,409,410,0,412,452,415],
[456,438,453,436,434,477,479,0,463,433],
[446,413,401,428,427,442,439,428,0,412],
[475,427,475,452,443,471,476,458,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,432,431,435,432,504,458,435,464],
[430,0,453,445,450,447,502,485,440,469],
[459,438,0,457,445,436,475,483,483,508],
[460,446,434,0,459,463,460,446,455,477],
[456,441,446,432,0,429,489,471,429,473],
[459,444,455,428,462,0,484,481,463,477],
[387,389,416,431,402,407,0,415,392,420],
[433,406,408,445,420,410,476,0,458,457],
[456,451,408,436,462,428,499,433,0,462],
[427,422,383,414,418,414,471,434,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,416,433,389,465,473,435,426,435],
[510,0,469,457,444,500,520,485,472,466],
[475,422,0,424,412,493,487,461,436,468],
[458,434,467,0,446,488,500,478,454,456],
[502,447,479,445,0,485,453,478,478,453],
[426,391,398,403,406,0,433,422,403,404],
[418,371,404,391,438,458,0,443,427,402],
[456,406,430,413,413,469,448,0,431,425],
[465,419,455,437,413,488,464,460,0,438],
[456,425,423,435,438,487,489,466,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,459,453,450,417,445,446,486,481],
[461,0,496,456,477,443,459,505,499,460],
[432,395,0,475,434,437,441,470,423,438],
[438,435,416,0,443,427,474,465,482,449],
[441,414,457,448,0,434,463,477,435,425],
[474,448,454,464,457,0,474,461,456,442],
[446,432,450,417,428,417,0,472,452,430],
[445,386,421,426,414,430,419,0,441,460],
[405,392,468,409,456,435,439,450,0,431],
[410,431,453,442,466,449,461,431,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,466,430,468,444,444,418,420,463],
[455,0,468,437,463,434,432,419,422,467],
[425,423,0,427,449,432,420,414,413,455],
[461,454,464,0,450,449,439,461,429,464],
[423,428,442,441,0,430,444,438,432,439],
[447,457,459,442,461,0,471,427,437,457],
[447,459,471,452,447,420,0,418,451,463],
[473,472,477,430,453,464,473,0,456,466],
[471,469,478,462,459,454,440,435,0,452],
[428,424,436,427,452,434,428,425,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,557,478,407,497,491,432,555,461,483],
[334,0,348,384,468,334,363,372,387,406],
[413,543,0,450,476,420,472,444,430,492],
[484,507,441,0,484,426,548,439,394,533],
[394,423,415,407,0,405,431,436,396,413],
[400,557,471,465,486,0,464,521,430,510],
[459,528,419,343,460,427,0,445,398,481],
[336,519,447,452,455,370,446,0,338,461],
[430,504,461,497,495,461,493,553,0,491],
[408,485,399,358,478,381,410,430,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,482,460,446,482,439,487,471,461],
[435,0,435,451,457,446,444,454,460,448],
[409,456,0,443,434,492,452,472,466,455],
[431,440,448,0,428,447,448,465,463,432],
[445,434,457,463,0,466,441,455,439,461],
[409,445,399,444,425,0,397,455,435,432],
[452,447,439,443,450,494,0,451,463,471],
[404,437,419,426,436,436,440,0,449,449],
[420,431,425,428,452,456,428,442,0,449],
[430,443,436,459,430,459,420,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,508,437,440,396,457,436,475,467],
[436,0,514,384,396,391,496,399,447,426],
[383,377,0,397,368,304,406,313,405,391],
[454,507,494,0,483,431,546,400,443,522],
[451,495,523,408,0,427,506,409,450,478],
[495,500,587,460,464,0,525,457,433,487],
[434,395,485,345,385,366,0,422,370,514],
[455,492,578,491,482,434,469,0,504,494],
[416,444,486,448,441,458,521,387,0,502],
[424,465,500,369,413,404,377,397,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,451,453,439,432,430,464,455,464],
[426,0,446,451,464,429,417,480,463,481],
[440,445,0,433,426,444,433,477,435,480],
[438,440,458,0,458,469,462,488,466,473],
[452,427,465,433,0,455,437,484,464,476],
[459,462,447,422,436,0,446,489,454,478],
[461,474,458,429,454,445,0,492,468,466],
[427,411,414,403,407,402,399,0,419,440],
[436,428,456,425,427,437,423,472,0,457],
[427,410,411,418,415,413,425,451,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,447,457,440,458,422,503,481,456],
[431,0,452,424,437,435,443,457,454,446],
[444,439,0,433,448,456,431,459,437,424],
[434,467,458,0,483,440,435,442,452,444],
[451,454,443,408,0,429,434,473,454,449],
[433,456,435,451,462,0,449,484,463,467],
[469,448,460,456,457,442,0,502,447,444],
[388,434,432,449,418,407,389,0,435,425],
[410,437,454,439,437,428,444,456,0,432],
[435,445,467,447,442,424,447,466,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,407,413,455,454,467,499,467,477],
[441,0,484,436,478,439,453,469,445,485],
[484,407,0,446,478,457,469,451,445,449],
[478,455,445,0,472,426,449,468,482,451],
[436,413,413,419,0,405,463,487,450,455],
[437,452,434,465,486,0,468,467,488,466],
[424,438,422,442,428,423,0,485,460,452],
[392,422,440,423,404,424,406,0,466,442],
[424,446,446,409,441,403,431,425,0,437],
[414,406,442,440,436,425,439,449,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,456,449,420,453,446,450,490,475],
[425,0,403,473,445,439,439,465,480,427],
[435,488,0,494,443,485,451,466,496,472],
[442,418,397,0,397,410,401,443,450,402],
[471,446,448,494,0,436,476,435,503,477],
[438,452,406,481,455,0,437,463,413,438],
[445,452,440,490,415,454,0,456,471,459],
[441,426,425,448,456,428,435,0,468,466],
[401,411,395,441,388,478,420,423,0,449],
[416,464,419,489,414,453,432,425,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,429,484,458,484,458,468,437],
[447,0,434,440,450,437,453,435,458,453],
[442,457,0,438,458,436,510,447,479,498],
[462,451,453,0,472,444,498,438,447,458],
[407,441,433,419,0,408,492,448,423,419],
[433,454,455,447,483,0,496,449,442,433],
[407,438,381,393,399,395,0,409,430,448],
[433,456,444,453,443,442,482,0,455,478],
[423,433,412,444,468,449,461,436,0,456],
[454,438,393,433,472,458,443,413,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,479,424,416,392,425,461,421,369],
[447,0,498,466,472,517,501,420,534,419],
[412,393,0,329,426,426,436,447,470,291],
[467,425,562,0,467,480,533,481,522,441],
[475,419,465,424,0,485,428,425,497,325],
[499,374,465,411,406,0,530,417,530,402],
[466,390,455,358,463,361,0,349,435,312],
[430,471,444,410,466,474,542,0,552,462],
[470,357,421,369,394,361,456,339,0,396],
[522,472,600,450,566,489,579,429,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,436,459,448,457,445,456,454,424],
[430,0,445,445,449,439,433,446,446,432],
[455,446,0,452,457,473,437,461,470,443],
[432,446,439,0,449,470,419,443,437,421],
[443,442,434,442,0,466,427,433,438,440],
[434,452,418,421,425,0,428,424,427,426],
[446,458,454,472,464,463,0,452,446,440],
[435,445,430,448,458,467,439,0,441,426],
[437,445,421,454,453,464,445,450,0,447],
[467,459,448,470,451,465,451,465,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,463,435,429,494,448,452,485,420],
[442,0,458,452,431,516,458,462,457,429],
[428,433,0,399,413,466,401,445,440,414],
[456,439,492,0,483,523,458,462,485,450],
[462,460,478,408,0,526,471,463,479,441],
[397,375,425,368,365,0,385,405,397,375],
[443,433,490,433,420,506,0,471,477,431],
[439,429,446,429,428,486,420,0,442,424],
[406,434,451,406,412,494,414,449,0,450],
[471,462,477,441,450,516,460,467,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,436,485,453,442,427,432,448,442],
[413,0,438,438,441,423,417,442,421,423],
[455,453,0,458,450,450,443,455,438,462],
[406,453,433,0,431,441,417,424,439,449],
[438,450,441,460,0,435,416,451,438,444],
[449,468,441,450,456,0,452,433,435,455],
[464,474,448,474,475,439,0,452,446,463],
[459,449,436,467,440,458,439,0,463,470],
[443,470,453,452,453,456,445,428,0,440],
[449,468,429,442,447,436,428,421,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,442,439,465,444,426,446,436,444],
[454,0,460,429,478,446,444,443,451,449],
[449,431,0,436,468,429,429,440,439,442],
[452,462,455,0,453,458,443,452,461,455],
[426,413,423,438,0,418,415,437,437,437],
[447,445,462,433,473,0,469,448,455,445],
[465,447,462,448,476,422,0,435,460,450],
[445,448,451,439,454,443,456,0,444,447],
[455,440,452,430,454,436,431,447,0,448],
[447,442,449,436,454,446,441,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,479,454,444,444,463,453,426,454],
[444,0,468,444,440,436,445,440,449,458],
[412,423,0,412,430,430,406,402,402,442],
[437,447,479,0,440,452,431,433,458,463],
[447,451,461,451,0,469,418,427,427,427],
[447,455,461,439,422,0,407,420,408,462],
[428,446,485,460,473,484,0,451,437,467],
[438,451,489,458,464,471,440,0,442,441],
[465,442,489,433,464,483,454,449,0,470],
[437,433,449,428,464,429,424,450,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,442,470,514,456,490,539,485,400],
[444,0,474,480,502,445,459,516,469,446],
[449,417,0,432,442,427,446,524,493,379],
[421,411,459,0,449,472,479,514,493,418],
[377,389,449,442,0,431,443,451,449,394],
[435,446,464,419,460,0,514,488,462,420],
[401,432,445,412,448,377,0,463,456,422],
[352,375,367,377,440,403,428,0,415,346],
[406,422,398,398,442,429,435,476,0,377],
[491,445,512,473,497,471,469,545,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,456,464,451,500,452,477,460,446],
[453,0,454,428,437,475,428,460,454,425],
[435,437,0,433,433,471,463,432,446,413],
[427,463,458,0,415,431,438,421,431,415],
[440,454,458,476,0,480,448,476,456,442],
[391,416,420,460,411,0,432,447,434,400],
[439,463,428,453,443,459,0,451,437,423],
[414,431,459,470,415,444,440,0,446,413],
[431,437,445,460,435,457,454,445,0,444],
[445,466,478,476,449,491,468,478,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,412,447,432,459,420,407,425,437],
[456,0,443,478,447,437,470,437,474,460],
[479,448,0,475,438,442,448,444,447,428],
[444,413,416,0,438,454,435,417,439,432],
[459,444,453,453,0,421,429,447,438,429],
[432,454,449,437,470,0,443,415,415,423],
[471,421,443,456,462,448,0,426,423,454],
[484,454,447,474,444,476,465,0,440,464],
[466,417,444,452,453,476,468,451,0,427],
[454,431,463,459,462,468,437,427,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,412,462,492,396,449,512,439,444],
[431,0,454,436,485,388,480,458,400,401],
[479,437,0,473,475,422,446,474,454,474],
[429,455,418,0,442,403,430,474,428,391],
[399,406,416,449,0,454,413,496,423,416],
[495,503,469,488,437,0,444,496,465,485],
[442,411,445,461,478,447,0,505,433,433],
[379,433,417,417,395,395,386,0,379,392],
[452,491,437,463,468,426,458,512,0,426],
[447,490,417,500,475,406,458,499,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,466,446,470,424,472,456,425,431],
[447,0,473,433,473,445,449,454,447,470],
[425,418,0,475,476,466,438,420,442,443],
[445,458,416,0,471,442,415,418,430,441],
[421,418,415,420,0,433,403,412,432,422],
[467,446,425,449,458,0,428,441,471,434],
[419,442,453,476,488,463,0,481,485,441],
[435,437,471,473,479,450,410,0,432,460],
[466,444,449,461,459,420,406,459,0,463],
[460,421,448,450,469,457,450,431,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,425,417,426,432,437,420,454,406],
[450,0,429,423,442,420,453,425,461,411],
[466,462,0,440,447,417,436,425,458,440],
[474,468,451,0,450,427,438,439,459,440],
[465,449,444,441,0,450,455,425,455,442],
[459,471,474,464,441,0,455,432,458,451],
[454,438,455,453,436,436,0,448,461,446],
[471,466,466,452,466,459,443,0,473,456],
[437,430,433,432,436,433,430,418,0,423],
[485,480,451,451,449,440,445,435,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,415,427,441,466,427,438,425,444],
[481,0,456,445,467,479,463,463,466,450],
[476,435,0,442,448,476,459,455,452,448],
[464,446,449,0,454,461,442,459,443,446],
[450,424,443,437,0,484,459,431,434,444],
[425,412,415,430,407,0,439,438,407,443],
[464,428,432,449,432,452,0,436,425,436],
[453,428,436,432,460,453,455,0,461,455],
[466,425,439,448,457,484,466,430,0,450],
[447,441,443,445,447,448,455,436,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,447,439,430,421,425,426,436,432],
[474,0,473,449,467,450,463,443,453,455],
[444,418,0,455,438,438,439,442,445,453],
[452,442,436,0,479,465,439,434,451,462],
[461,424,453,412,0,411,413,432,429,427],
[470,441,453,426,480,0,466,457,438,442],
[466,428,452,452,478,425,0,414,453,456],
[465,448,449,457,459,434,477,0,452,473],
[455,438,446,440,462,453,438,439,0,457],
[459,436,438,429,464,449,435,418,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,453,449,475,498,432,477,471,439],
[459,0,442,444,470,452,435,453,453,484],
[438,449,0,457,462,458,457,457,456,438],
[442,447,434,0,444,479,446,467,454,454],
[416,421,429,447,0,481,424,470,433,449],
[393,439,433,412,410,0,422,420,414,446],
[459,456,434,445,467,469,0,491,447,459],
[414,438,434,424,421,471,400,0,435,447],
[420,438,435,437,458,477,444,456,0,476],
[452,407,453,437,442,445,432,444,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,480,441,435,433,427,478,464,432],
[430,0,426,431,452,418,410,444,438,420],
[411,465,0,435,438,432,404,451,444,420],
[450,460,456,0,462,436,453,473,449,437],
[456,439,453,429,0,425,422,441,409,403],
[458,473,459,455,466,0,439,472,451,445],
[464,481,487,438,469,452,0,470,485,464],
[413,447,440,418,450,419,421,0,437,434],
[427,453,447,442,482,440,406,454,0,419],
[459,471,471,454,488,446,427,457,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,441,462,431,453,448,438,439,440],
[444,0,443,440,441,440,451,432,432,428],
[450,448,0,467,429,455,454,443,451,440],
[429,451,424,0,423,465,443,433,425,447],
[460,450,462,468,0,449,449,430,426,467],
[438,451,436,426,442,0,457,435,428,437],
[443,440,437,448,442,434,0,449,412,439],
[453,459,448,458,461,456,442,0,425,424],
[452,459,440,466,465,463,479,466,0,450],
[451,463,451,444,424,454,452,467,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,447,448,437,405,439,399,481,452],
[457,0,467,456,462,449,475,429,477,417],
[444,424,0,474,451,429,447,389,472,440],
[443,435,417,0,439,430,436,393,409,442],
[454,429,440,452,0,411,479,391,467,434],
[486,442,462,461,480,0,477,446,441,461],
[452,416,444,455,412,414,0,413,450,420],
[492,462,502,498,500,445,478,0,482,433],
[410,414,419,482,424,450,441,409,0,431],
[439,474,451,449,457,430,471,458,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,414,417,477,404,430,441,441,456],
[465,0,452,405,478,455,436,441,464,436],
[477,439,0,445,494,428,437,433,440,446],
[474,486,446,0,503,450,466,466,440,451],
[414,413,397,388,0,410,431,428,415,440],
[487,436,463,441,481,0,461,410,416,455],
[461,455,454,425,460,430,0,419,424,431],
[450,450,458,425,463,481,472,0,422,460],
[450,427,451,451,476,475,467,469,0,472],
[435,455,445,440,451,436,460,431,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,424,421,423,418,420,421,427,420],
[457,0,479,467,459,425,425,426,445,414],
[467,412,0,446,428,401,409,410,447,408],
[470,424,445,0,447,422,409,435,456,440],
[468,432,463,444,0,446,427,451,459,467],
[473,466,490,469,445,0,429,456,471,445],
[471,466,482,482,464,462,0,428,476,449],
[470,465,481,456,440,435,463,0,460,473],
[464,446,444,435,432,420,415,431,0,426],
[471,477,483,451,424,446,442,418,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,433,424,439,441,445,427,445,445],
[460,0,405,439,443,451,476,453,433,494],
[458,486,0,451,440,492,471,461,454,471],
[467,452,440,0,447,460,473,447,465,471],
[452,448,451,444,0,465,469,441,462,485],
[450,440,399,431,426,0,460,429,456,434],
[446,415,420,418,422,431,0,428,423,435],
[464,438,430,444,450,462,463,0,455,457],
[446,458,437,426,429,435,468,436,0,472],
[446,397,420,420,406,457,456,434,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,454,454,444,442,470,464,442,459],
[433,0,449,469,438,439,468,469,450,454],
[437,442,0,442,440,415,455,445,427,455],
[437,422,449,0,439,437,446,446,433,446],
[447,453,451,452,0,447,455,464,428,474],
[449,452,476,454,444,0,446,482,440,471],
[421,423,436,445,436,445,0,461,443,423],
[427,422,446,445,427,409,430,0,427,439],
[449,441,464,458,463,451,448,464,0,463],
[432,437,436,445,417,420,468,452,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,456,449,440,443,441,474,456,418],
[448,0,431,419,425,415,437,462,435,425],
[435,460,0,444,438,456,441,446,460,444],
[442,472,447,0,429,448,443,441,453,433],
[451,466,453,462,0,438,449,463,461,463],
[448,476,435,443,453,0,446,451,444,434],
[450,454,450,448,442,445,0,446,455,435],
[417,429,445,450,428,440,445,0,447,432],
[435,456,431,438,430,447,436,444,0,430],
[473,466,447,458,428,457,456,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,454,461,458,428,483,467,466,462],
[425,0,454,445,458,428,439,458,420,438],
[437,437,0,451,465,432,473,451,410,465],
[430,446,440,0,453,418,467,466,444,442],
[433,433,426,438,0,393,450,452,406,419],
[463,463,459,473,498,0,470,475,429,476],
[408,452,418,424,441,421,0,450,404,427],
[424,433,440,425,439,416,441,0,416,442],
[425,471,481,447,485,462,487,475,0,476],
[429,453,426,449,472,415,464,449,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,492,458,414,437,438,456,486,452],
[420,0,468,418,381,421,427,387,476,424],
[399,423,0,423,394,429,385,400,462,361],
[433,473,468,0,423,429,429,432,460,423],
[477,510,497,468,0,427,448,473,507,432],
[454,470,462,462,464,0,421,444,506,414],
[453,464,506,462,443,470,0,438,488,455],
[435,504,491,459,418,447,453,0,493,459],
[405,415,429,431,384,385,403,398,0,392],
[439,467,530,468,459,477,436,432,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,447,458,443,431,472,434,455,466],
[433,0,457,447,457,436,450,452,467,449],
[444,434,0,448,446,440,452,450,463,443],
[433,444,443,0,435,431,447,469,454,450],
[448,434,445,456,0,435,460,456,452,459],
[460,455,451,460,456,0,451,463,457,430],
[419,441,439,444,431,440,0,450,450,451],
[457,439,441,422,435,428,441,0,443,440],
[436,424,428,437,439,434,441,448,0,435],
[425,442,448,441,432,461,440,451,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,439,435,429,430,440,441,436,438],
[431,0,438,410,432,433,435,423,418,427],
[452,453,0,412,454,454,430,446,441,445],
[456,481,479,0,451,485,458,458,438,459],
[462,459,437,440,0,448,466,446,449,441],
[461,458,437,406,443,0,439,434,443,445],
[451,456,461,433,425,452,0,456,434,464],
[450,468,445,433,445,457,435,0,447,450],
[455,473,450,453,442,448,457,444,0,450],
[453,464,446,432,450,446,427,441,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,419,449,421,439,444,435,471,455],
[426,0,435,439,423,439,466,452,438,433],
[472,456,0,441,438,452,473,477,450,450],
[442,452,450,0,462,444,432,453,461,449],
[470,468,453,429,0,457,465,461,454,460],
[452,452,439,447,434,0,455,452,444,452],
[447,425,418,459,426,436,0,427,447,444],
[456,439,414,438,430,439,464,0,449,447],
[420,453,441,430,437,447,444,442,0,438],
[436,458,441,442,431,439,447,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,406,401,473,442,413,435,509,487],
[438,0,415,383,451,400,367,480,448,456],
[485,476,0,473,519,432,479,461,510,471],
[490,508,418,0,442,468,465,499,492,512],
[418,440,372,449,0,432,406,477,420,424],
[449,491,459,423,459,0,418,493,474,490],
[478,524,412,426,485,473,0,493,513,515],
[456,411,430,392,414,398,398,0,443,454],
[382,443,381,399,471,417,378,448,0,491],
[404,435,420,379,467,401,376,437,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,433,436,434,435,453,461,425,452],
[443,0,450,450,422,448,442,443,435,434],
[458,441,0,447,428,448,461,475,442,438],
[455,441,444,0,417,436,452,456,419,433],
[457,469,463,474,0,445,449,478,464,458],
[456,443,443,455,446,0,467,468,427,435],
[438,449,430,439,442,424,0,439,422,404],
[430,448,416,435,413,423,452,0,427,424],
[466,456,449,472,427,464,469,464,0,447],
[439,457,453,458,433,456,487,467,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,448,437,479,406,450,432,447,386],
[430,0,479,416,449,445,478,501,511,453],
[443,412,0,416,441,412,420,416,469,431],
[454,475,475,0,463,442,496,487,441,458],
[412,442,450,428,0,388,434,453,444,440],
[485,446,479,449,503,0,453,451,461,435],
[441,413,471,395,457,438,0,466,414,441],
[459,390,475,404,438,440,425,0,489,443],
[444,380,422,450,447,430,477,402,0,434],
[505,438,460,433,451,456,450,448,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,494,432,448,434,416,460,393,464],
[458,0,499,412,443,420,435,453,423,497],
[397,392,0,364,398,397,406,390,399,393],
[459,479,527,0,490,464,444,489,454,486],
[443,448,493,401,0,406,436,464,426,426],
[457,471,494,427,485,0,470,474,461,472],
[475,456,485,447,455,421,0,482,436,478],
[431,438,501,402,427,417,409,0,419,439],
[498,468,492,437,465,430,455,472,0,465],
[427,394,498,405,465,419,413,452,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,445,438,447,434,438,410,427,464],
[451,0,429,454,434,448,446,443,446,445],
[446,462,0,433,429,444,433,437,430,444],
[453,437,458,0,432,450,450,446,446,440],
[444,457,462,459,0,444,435,425,459,474],
[457,443,447,441,447,0,436,435,450,456],
[453,445,458,441,456,455,0,430,447,449],
[481,448,454,445,466,456,461,0,447,465],
[464,445,461,445,432,441,444,444,0,461],
[427,446,447,451,417,435,442,426,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,475,455,445,453,454,454,467,453],
[442,0,458,461,447,461,451,438,443,465],
[416,433,0,420,433,446,445,446,437,438],
[436,430,471,0,448,452,476,432,458,444],
[446,444,458,443,0,453,487,463,446,461],
[438,430,445,439,438,0,455,435,462,463],
[437,440,446,415,404,436,0,440,420,442],
[437,453,445,459,428,456,451,0,467,459],
[424,448,454,433,445,429,471,424,0,432],
[438,426,453,447,430,428,449,432,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,339,399,294,449,406,449,391,358],
[520,0,359,508,430,517,488,472,488,367],
[552,532,0,517,448,616,502,581,440,528],
[492,383,374,0,294,449,443,450,411,295],
[597,461,443,597,0,491,483,595,526,426],
[442,374,275,442,400,0,443,428,426,289],
[485,403,389,448,408,448,0,489,396,438],
[442,419,310,441,296,463,402,0,352,400],
[500,403,451,480,365,465,495,539,0,377],
[533,524,363,596,465,602,453,491,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,440,395,440,438,433,451,454,402],
[469,0,496,467,457,452,476,509,493,439],
[451,395,0,403,420,419,401,476,400,381],
[496,424,488,0,444,454,424,480,456,456],
[451,434,471,447,0,416,455,427,450,425],
[453,439,472,437,475,0,447,476,479,434],
[458,415,490,467,436,444,0,485,445,412],
[440,382,415,411,464,415,406,0,431,410],
[437,398,491,435,441,412,446,460,0,406],
[489,452,510,435,466,457,479,481,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,467,461,445,456,419,451,445,449],
[435,0,455,461,429,426,441,455,428,448],
[424,436,0,447,442,426,433,441,435,432],
[430,430,444,0,429,444,433,446,438,430],
[446,462,449,462,0,455,439,462,436,436],
[435,465,465,447,436,0,441,443,432,444],
[472,450,458,458,452,450,0,447,456,443],
[440,436,450,445,429,448,444,0,437,425],
[446,463,456,453,455,459,435,454,0,444],
[442,443,459,461,455,447,448,466,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,450,460,456,440,433,443,423,430],
[442,0,444,471,442,428,443,450,421,422],
[441,447,0,476,461,443,466,435,449,441],
[431,420,415,0,427,435,406,444,410,447],
[435,449,430,464,0,426,436,419,425,404],
[451,463,448,456,465,0,440,436,442,432],
[458,448,425,485,455,451,0,428,433,434],
[448,441,456,447,472,455,463,0,442,444],
[468,470,442,481,466,449,458,449,0,427],
[461,469,450,444,487,459,457,447,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,456,449,479,439,439,442,442,449],
[440,0,466,450,489,443,446,435,438,449],
[435,425,0,436,442,458,453,430,446,426],
[442,441,455,0,491,472,432,453,420,439],
[412,402,449,400,0,406,428,410,422,426],
[452,448,433,419,485,0,445,451,446,436],
[452,445,438,459,463,446,0,446,407,442],
[449,456,461,438,481,440,445,0,419,427],
[449,453,445,471,469,445,484,472,0,441],
[442,442,465,452,465,455,449,464,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,415,439,420,417,424,437,424,428],
[471,0,442,451,438,438,437,439,455,443],
[476,449,0,468,448,463,450,450,440,448],
[452,440,423,0,426,439,443,457,430,424],
[471,453,443,465,0,451,456,462,449,459],
[474,453,428,452,440,0,436,434,434,441],
[467,454,441,448,435,455,0,463,437,432],
[454,452,441,434,429,457,428,0,428,445],
[467,436,451,461,442,457,454,463,0,441],
[463,448,443,467,432,450,459,446,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,474,443,457,446,458,440,455,460],
[433,0,454,431,409,432,440,456,459,466],
[417,437,0,432,440,437,433,456,453,439],
[448,460,459,0,455,427,448,438,469,471],
[434,482,451,436,0,469,447,474,492,451],
[445,459,454,464,422,0,453,429,478,462],
[433,451,458,443,444,438,0,429,482,446],
[451,435,435,453,417,462,462,0,492,463],
[436,432,438,422,399,413,409,399,0,448],
[431,425,452,420,440,429,445,428,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,477,466,433,432,443,451,460,424],
[468,0,491,452,478,453,470,438,495,462],
[414,400,0,399,408,401,407,400,445,390],
[425,439,492,0,463,450,464,445,458,436],
[458,413,483,428,0,448,478,432,481,435],
[459,438,490,441,443,0,424,438,448,418],
[448,421,484,427,413,467,0,465,472,419],
[440,453,491,446,459,453,426,0,475,471],
[431,396,446,433,410,443,419,416,0,420],
[467,429,501,455,456,473,472,420,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,456,459,419,447,446,443,445,411],
[468,0,451,459,448,500,487,426,460,455],
[435,440,0,487,444,458,471,442,467,401],
[432,432,404,0,427,393,384,394,433,373],
[472,443,447,464,0,451,463,444,470,446],
[444,391,433,498,440,0,479,426,460,390],
[445,404,420,507,428,412,0,412,488,433],
[448,465,449,497,447,465,479,0,468,427],
[446,431,424,458,421,431,403,423,0,415],
[480,436,490,518,445,501,458,464,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,499,502,505,432,459,471,461,476],
[448,0,461,487,474,459,460,445,467,483],
[392,430,0,442,434,414,421,434,429,403],
[389,404,449,0,441,415,415,419,442,433],
[386,417,457,450,0,440,443,422,438,447],
[459,432,477,476,451,0,436,428,456,456],
[432,431,470,476,448,455,0,443,435,432],
[420,446,457,472,469,463,448,0,426,459],
[430,424,462,449,453,435,456,465,0,441],
[415,408,488,458,444,435,459,432,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,431,474,505,449,440,412,450,452],
[410,0,427,402,430,414,457,394,422,431],
[460,464,0,474,507,448,482,442,468,464],
[417,489,417,0,489,405,472,401,429,416],
[386,461,384,402,0,392,405,383,395,417],
[442,477,443,486,499,0,489,434,459,463],
[451,434,409,419,486,402,0,383,449,440],
[479,497,449,490,508,457,508,0,476,436],
[441,469,423,462,496,432,442,415,0,435],
[439,460,427,475,474,428,451,455,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,463,444,442,449,458,442,450,422],
[448,0,431,428,457,427,427,428,458,453],
[428,460,0,450,464,445,450,421,447,446],
[447,463,441,0,456,427,440,410,432,431],
[449,434,427,435,0,436,438,433,455,417],
[442,464,446,464,455,0,455,443,452,440],
[433,464,441,451,453,436,0,450,448,431],
[449,463,470,481,458,448,441,0,441,449],
[441,433,444,459,436,439,443,450,0,434],
[469,438,445,460,474,451,460,442,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,401,432,422,459,408,430,449,408],
[464,0,485,449,450,487,447,470,431,419],
[490,406,0,422,408,457,455,453,451,445],
[459,442,469,0,445,452,460,462,441,472],
[469,441,483,446,0,475,450,457,463,422],
[432,404,434,439,416,0,440,437,425,418],
[483,444,436,431,441,451,0,484,466,443],
[461,421,438,429,434,454,407,0,407,425],
[442,460,440,450,428,466,425,484,0,453],
[483,472,446,419,469,473,448,466,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,443,542,468,433,406,443,543,451],
[444,0,464,588,418,397,415,435,534,418],
[448,427,0,523,424,418,361,421,487,387],
[349,303,368,0,346,371,299,360,430,310],
[423,473,467,545,0,550,361,487,450,502],
[458,494,473,520,341,0,434,419,434,494],
[485,476,530,592,530,457,0,422,535,501],
[448,456,470,531,404,472,469,0,517,474],
[348,357,404,461,441,457,356,374,0,452],
[440,473,504,581,389,397,390,417,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,422,414,424,471,420,402,414,448],
[485,0,447,413,450,473,406,420,436,449],
[469,444,0,450,456,491,401,424,451,438],
[477,478,441,0,442,472,430,451,423,440],
[467,441,435,449,0,475,426,428,431,457],
[420,418,400,419,416,0,404,373,437,439],
[471,485,490,461,465,487,0,442,472,483],
[489,471,467,440,463,518,449,0,492,432],
[477,455,440,468,460,454,419,399,0,400],
[443,442,453,451,434,452,408,459,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,383,505,462,481,454,458,448,460],
[451,0,451,485,445,439,431,473,468,435],
[508,440,0,531,462,469,459,471,485,461],
[386,406,360,0,391,426,381,406,396,397],
[429,446,429,500,0,437,428,443,453,431],
[410,452,422,465,454,0,436,473,438,421],
[437,460,432,510,463,455,0,512,450,459],
[433,418,420,485,448,418,379,0,458,399],
[443,423,406,495,438,453,441,433,0,438],
[431,456,430,494,460,470,432,492,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,434,442,432,417,451,461,445,436],
[456,0,473,468,432,482,439,469,456,437],
[457,418,0,472,447,468,447,450,462,413],
[449,423,419,0,429,431,445,469,430,457],
[459,459,444,462,0,443,434,459,427,453],
[474,409,423,460,448,0,456,468,444,455],
[440,452,444,446,457,435,0,457,475,455],
[430,422,441,422,432,423,434,0,416,433],
[446,435,429,461,464,447,416,475,0,434],
[455,454,478,434,438,436,436,458,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,431,398,407,425,416,418,448,395],
[451,0,454,416,447,422,425,390,413,435],
[460,437,0,451,445,453,452,424,444,425],
[493,475,440,0,454,442,435,417,457,470],
[484,444,446,437,0,411,418,429,451,434],
[466,469,438,449,480,0,451,453,453,448],
[475,466,439,456,473,440,0,446,449,439],
[473,501,467,474,462,438,445,0,460,465],
[443,478,447,434,440,438,442,431,0,441],
[496,456,466,421,457,443,452,426,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,454,461,472,443,451,454,463,458],
[450,0,468,449,450,425,449,458,434,460],
[437,423,0,434,453,438,455,433,442,453],
[430,442,457,0,451,452,452,452,440,455],
[419,441,438,440,0,421,428,428,407,443],
[448,466,453,439,470,0,458,460,444,454],
[440,442,436,439,463,433,0,447,430,463],
[437,433,458,439,463,431,444,0,431,435],
[428,457,449,451,484,447,461,460,0,446],
[433,431,438,436,448,437,428,456,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,442,421,437,458,457,427,433,420],
[448,0,451,446,454,479,518,463,461,418],
[449,440,0,422,441,442,519,445,435,420],
[470,445,469,0,435,507,500,494,468,454],
[454,437,450,456,0,485,515,454,437,424],
[433,412,449,384,406,0,473,455,420,407],
[434,373,372,391,376,418,0,424,411,384],
[464,428,446,397,437,436,467,0,431,431],
[458,430,456,423,454,471,480,460,0,418],
[471,473,471,437,467,484,507,460,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,408,404,409,431,438,409,473,451],
[471,0,383,459,420,505,469,508,478,490],
[483,508,0,475,498,483,437,471,455,468],
[487,432,416,0,451,516,523,521,506,481],
[482,471,393,440,0,412,405,439,462,416],
[460,386,408,375,479,0,457,428,466,455],
[453,422,454,368,486,434,0,537,485,434],
[482,383,420,370,452,463,354,0,444,434],
[418,413,436,385,429,425,406,447,0,456],
[440,401,423,410,475,436,457,457,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,362,487,442,492,536,482,372,392],
[361,0,241,397,362,293,408,415,292,294],
[529,650,0,534,466,513,543,498,445,541],
[404,494,357,0,397,367,433,373,348,356],
[449,529,425,494,0,446,493,438,487,439],
[399,598,378,524,445,0,457,428,295,404],
[355,483,348,458,398,434,0,370,410,389],
[409,476,393,518,453,463,521,0,329,396],
[519,599,446,543,404,596,481,562,0,479],
[499,597,350,535,452,487,502,495,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,395,421,419,402,397,436,400,446],
[476,0,418,417,403,397,442,455,460,443],
[496,473,0,465,425,454,494,454,429,473],
[470,474,426,0,448,429,456,472,451,465],
[472,488,466,443,0,425,435,443,462,449],
[489,494,437,462,466,0,461,468,465,461],
[494,449,397,435,456,430,0,444,425,460],
[455,436,437,419,448,423,447,0,459,426],
[491,431,462,440,429,426,466,432,0,438],
[445,448,418,426,442,430,431,465,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,418,452,459,414,426,457,436,433],
[446,0,442,424,481,423,451,412,465,423],
[473,449,0,438,477,426,422,426,419,431],
[439,467,453,0,469,449,400,478,440,467],
[432,410,414,422,0,405,440,434,449,425],
[477,468,465,442,486,0,383,450,479,446],
[465,440,469,491,451,508,0,454,493,458],
[434,479,465,413,457,441,437,0,473,446],
[455,426,472,451,442,412,398,418,0,450],
[458,468,460,424,466,445,433,445,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,486,460,445,409,490,436,459,461],
[412,0,475,428,414,402,441,448,450,419],
[405,416,0,398,383,400,417,395,459,448],
[431,463,493,0,410,458,453,437,433,444],
[446,477,508,481,0,463,490,443,475,483],
[482,489,491,433,428,0,499,496,459,481],
[401,450,474,438,401,392,0,440,437,436],
[455,443,496,454,448,395,451,0,466,469],
[432,441,432,458,416,432,454,425,0,443],
[430,472,443,447,408,410,455,422,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,389,476,459,391,355,464,450,430],
[411,0,372,378,413,391,385,408,392,392],
[502,519,0,572,541,435,397,462,465,511],
[415,513,319,0,474,365,403,420,413,435],
[432,478,350,417,0,338,364,427,362,388],
[500,500,456,526,553,0,440,484,435,510],
[536,506,494,488,527,451,0,432,507,489],
[427,483,429,471,464,407,459,0,435,455],
[441,499,426,478,529,456,384,456,0,486],
[461,499,380,456,503,381,402,436,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,411,376,355,367,410,426,406,447],
[468,0,407,429,406,448,431,441,454,485],
[480,484,0,418,435,492,408,510,437,481],
[515,462,473,0,399,467,445,476,442,484],
[536,485,456,492,0,517,431,502,496,504],
[524,443,399,424,374,0,409,456,447,475],
[481,460,483,446,460,482,0,484,442,502],
[465,450,381,415,389,435,407,0,422,436],
[485,437,454,449,395,444,449,469,0,499],
[444,406,410,407,387,416,389,455,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,447,430,467,462,489,458,406,481],
[455,0,473,405,517,371,449,458,416,402],
[444,418,0,386,421,346,457,504,377,401],
[461,486,505,0,491,387,467,542,404,530],
[424,374,470,400,0,375,442,531,382,413],
[429,520,545,504,516,0,465,563,451,511],
[402,442,434,424,449,426,0,493,350,452],
[433,433,387,349,360,328,398,0,414,398],
[485,475,514,487,509,440,541,477,0,522],
[410,489,490,361,478,380,439,493,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,430,452,423,403,462,447,410,485],
[417,0,415,460,388,378,453,446,430,463],
[461,476,0,456,431,400,425,464,428,456],
[439,431,435,0,408,408,433,462,444,477],
[468,503,460,483,0,448,465,468,443,493],
[488,513,491,483,443,0,509,477,474,514],
[429,438,466,458,426,382,0,442,416,422],
[444,445,427,429,423,414,449,0,380,462],
[481,461,463,447,448,417,475,511,0,473],
[406,428,435,414,398,377,469,429,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,437,447,371,463,401,412,415,377],
[497,0,450,461,425,483,437,433,444,416],
[454,441,0,459,431,493,464,445,454,447],
[444,430,432,0,378,445,404,438,414,379],
[520,466,460,513,0,535,446,481,480,440],
[428,408,398,446,356,0,393,397,420,351],
[490,454,427,487,445,498,0,485,445,400],
[479,458,446,453,410,494,406,0,481,410],
[476,447,437,477,411,471,446,410,0,383],
[514,475,444,512,451,540,491,481,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,374,460,526,421,435,409,481,532],
[444,0,324,527,514,478,386,416,429,554],
[517,567,0,488,479,453,504,569,441,537],
[431,364,403,0,495,388,472,425,371,545],
[365,377,412,396,0,313,261,479,358,365],
[470,413,438,503,578,0,446,478,407,527],
[456,505,387,419,630,445,0,426,367,514],
[482,475,322,466,412,413,465,0,385,433],
[410,462,450,520,533,484,524,506,0,482],
[359,337,354,346,526,364,377,458,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,465,465,479,440,452,454,481,460],
[449,0,473,473,475,452,451,426,461,454],
[426,418,0,444,438,424,432,429,441,452],
[426,418,447,0,436,435,446,413,453,444],
[412,416,453,455,0,436,438,428,459,445],
[451,439,467,456,455,0,438,433,466,465],
[439,440,459,445,453,453,0,433,456,443],
[437,465,462,478,463,458,458,0,460,460],
[410,430,450,438,432,425,435,431,0,424],
[431,437,439,447,446,426,448,431,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,478,470,386,442,438,461,439,426],
[475,0,484,487,448,458,425,482,467,464],
[413,407,0,414,420,414,404,457,403,399],
[421,404,477,0,395,441,421,465,418,429],
[505,443,471,496,0,448,449,468,437,415],
[449,433,477,450,443,0,413,443,412,442],
[453,466,487,470,442,478,0,491,451,459],
[430,409,434,426,423,448,400,0,428,417],
[452,424,488,473,454,479,440,463,0,418],
[465,427,492,462,476,449,432,474,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,473,432,461,457,455,429,470,459],
[443,0,491,465,468,458,488,441,472,451],
[418,400,0,444,444,442,456,419,445,422],
[459,426,447,0,455,470,449,442,452,436],
[430,423,447,436,0,466,481,462,440,436],
[434,433,449,421,425,0,448,433,454,425],
[436,403,435,442,410,443,0,424,439,431],
[462,450,472,449,429,458,467,0,465,443],
[421,419,446,439,451,437,452,426,0,414],
[432,440,469,455,455,466,460,448,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,454,471,473,435,485,455,463,462],
[427,0,435,445,442,447,426,435,466,439],
[437,456,0,448,429,437,458,432,458,445],
[420,446,443,0,448,440,435,446,446,416],
[418,449,462,443,0,432,449,450,442,442],
[456,444,454,451,459,0,455,452,451,441],
[406,465,433,456,442,436,0,438,442,434],
[436,456,459,445,441,439,453,0,453,450],
[428,425,433,445,449,440,449,438,0,439],
[429,452,446,475,449,450,457,441,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,435,446,487,440,451,445,464,463],
[384,0,420,418,451,387,395,398,423,400],
[456,471,0,446,489,456,460,467,450,427],
[445,473,445,0,464,452,448,441,444,455],
[404,440,402,427,0,420,406,396,430,434],
[451,504,435,439,471,0,444,436,452,459],
[440,496,431,443,485,447,0,454,455,457],
[446,493,424,450,495,455,437,0,449,477],
[427,468,441,447,461,439,436,442,0,427],
[428,491,464,436,457,432,434,414,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,460,386,452,414,432,438,450,390],
[505,0,493,423,430,455,431,503,495,422],
[431,398,0,407,440,426,410,484,462,436],
[505,468,484,0,486,474,431,533,477,499],
[439,461,451,405,0,399,428,463,474,428],
[477,436,465,417,492,0,413,515,426,458],
[459,460,481,460,463,478,0,427,476,433],
[453,388,407,358,428,376,464,0,434,396],
[441,396,429,414,417,465,415,457,0,433],
[501,469,455,392,463,433,458,495,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,443,430,460,469,438,433,448],
[458,0,478,464,456,449,474,428,442,454],
[452,413,0,427,437,456,454,421,436,462],
[448,427,464,0,429,457,452,422,452,465],
[461,435,454,462,0,475,467,462,469,494],
[431,442,435,434,416,0,467,415,436,446],
[422,417,437,439,424,424,0,419,438,458],
[453,463,470,469,429,476,472,0,470,479],
[458,449,455,439,422,455,453,421,0,462],
[443,437,429,426,397,445,433,412,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,426,448,425,447,441,439,442,447],
[464,0,441,454,466,456,441,446,448,452],
[465,450,0,452,453,482,442,440,451,467],
[443,437,439,0,452,464,423,424,430,444],
[466,425,438,439,0,465,454,439,445,458],
[444,435,409,427,426,0,402,404,420,441],
[450,450,449,468,437,489,0,455,446,466],
[452,445,451,467,452,487,436,0,452,454],
[449,443,440,461,446,471,445,439,0,450],
[444,439,424,447,433,450,425,437,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,447,464,445,460,459,446,449,429],
[426,0,436,447,450,426,458,422,411,437],
[444,455,0,474,426,474,465,403,433,440],
[427,444,417,0,420,400,454,423,415,420],
[446,441,465,471,0,479,449,437,422,455],
[431,465,417,491,412,0,467,442,430,440],
[432,433,426,437,442,424,0,406,421,437],
[445,469,488,468,454,449,485,0,443,473],
[442,480,458,476,469,461,470,448,0,443],
[462,454,451,471,436,451,454,418,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,450,445,465,444,444,477,461,433],
[432,0,438,426,429,424,428,424,456,436],
[441,453,0,438,448,448,427,468,455,438],
[446,465,453,0,460,453,451,469,458,442],
[426,462,443,431,0,452,431,434,501,437],
[447,467,443,438,439,0,425,449,463,435],
[447,463,464,440,460,466,0,444,461,446],
[414,467,423,422,457,442,447,0,473,441],
[430,435,436,433,390,428,430,418,0,423],
[458,455,453,449,454,456,445,450,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,409,430,444,421,416,417,438,439],
[463,0,462,464,460,451,438,441,459,464],
[482,429,0,458,467,453,450,450,459,443],
[461,427,433,0,451,421,404,408,448,447],
[447,431,424,440,0,437,420,426,441,441],
[470,440,438,470,454,0,442,448,454,441],
[475,453,441,487,471,449,0,441,460,471],
[474,450,441,483,465,443,450,0,450,446],
[453,432,432,443,450,437,431,441,0,446],
[452,427,448,444,450,450,420,445,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,473,478,455,495,452,464,422,459],
[430,0,458,448,481,453,459,448,448,467],
[418,433,0,456,465,457,457,451,432,467],
[413,443,435,0,462,436,443,447,439,428],
[436,410,426,429,0,447,465,448,430,443],
[396,438,434,455,444,0,416,425,424,443],
[439,432,434,448,426,475,0,444,442,463],
[427,443,440,444,443,466,447,0,424,452],
[469,443,459,452,461,467,449,467,0,466],
[432,424,424,463,448,448,428,439,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,452,444,447,429,450,429,446,448],
[431,0,458,454,478,447,466,422,454,453],
[439,433,0,467,453,450,441,445,465,456],
[447,437,424,0,428,418,452,419,447,459],
[444,413,438,463,0,456,432,460,464,474],
[462,444,441,473,435,0,461,421,485,469],
[441,425,450,439,459,430,0,435,498,452],
[462,469,446,472,431,470,456,0,490,474],
[445,437,426,444,427,406,393,401,0,416],
[443,438,435,432,417,422,439,417,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,453,452,440,455,442,450,450,465],
[424,0,448,441,439,455,434,429,443,440],
[438,443,0,453,429,420,428,445,454,436],
[439,450,438,0,442,417,412,428,454,443],
[451,452,462,449,0,442,424,451,448,453],
[436,436,471,474,449,0,431,442,456,453],
[449,457,463,479,467,460,0,437,453,467],
[441,462,446,463,440,449,454,0,450,449],
[441,448,437,437,443,435,438,441,0,453],
[426,451,455,448,438,438,424,442,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,453,469,458,437,475,516,468,465],
[420,0,466,465,459,448,475,474,460,422],
[438,425,0,455,432,442,449,452,454,421],
[422,426,436,0,426,440,453,423,425,399],
[433,432,459,465,0,446,492,456,439,443],
[454,443,449,451,445,0,453,432,460,410],
[416,416,442,438,399,438,0,441,427,407],
[375,417,439,468,435,459,450,0,427,398],
[423,431,437,466,452,431,464,464,0,426],
[426,469,470,492,448,481,484,493,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,426,417,471,451,449,463,443,438],
[463,0,461,445,471,465,461,448,469,458],
[465,430,0,451,478,485,449,451,452,447],
[474,446,440,0,489,463,445,463,464,456],
[420,420,413,402,0,427,428,451,408,418],
[440,426,406,428,464,0,428,418,424,442],
[442,430,442,446,463,463,0,433,443,454],
[428,443,440,428,440,473,458,0,448,446],
[448,422,439,427,483,467,448,443,0,414],
[453,433,444,435,473,449,437,445,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,455,460,444,414,450,453,462],
[440,0,448,426,453,451,412,416,452,451],
[451,443,0,440,449,478,425,435,475,465],
[436,465,451,0,436,457,430,450,447,442],
[431,438,442,455,0,468,404,421,434,443],
[447,440,413,434,423,0,424,442,453,439],
[477,479,466,461,487,467,0,435,484,481],
[441,475,456,441,470,449,456,0,462,455],
[438,439,416,444,457,438,407,429,0,438],
[429,440,426,449,448,452,410,436,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,421,447,468,519,515,481,446,459],
[413,0,432,436,490,487,485,485,465,465],
[470,459,0,452,498,534,475,488,477,445],
[444,455,439,0,485,528,512,457,442,462],
[423,401,393,406,0,439,467,438,420,420],
[372,404,357,363,452,0,458,435,386,415],
[376,406,416,379,424,433,0,428,418,420],
[410,406,403,434,453,456,463,0,407,432],
[445,426,414,449,471,505,473,484,0,466],
[432,426,446,429,471,476,471,459,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,468,504,465,473,454,443,477,425],
[436,0,470,489,441,467,447,449,462,448],
[423,421,0,509,436,466,448,458,434,441],
[387,402,382,0,403,416,428,437,372,398],
[426,450,455,488,0,471,446,466,441,456],
[418,424,425,475,420,0,404,434,430,444],
[437,444,443,463,445,487,0,445,437,426],
[448,442,433,454,425,457,446,0,446,424],
[414,429,457,519,450,461,454,445,0,431],
[466,443,450,493,435,447,465,467,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,424,452,427,424,445,445,427,429],
[473,0,452,467,446,475,459,467,437,444],
[467,439,0,454,458,464,447,459,433,482],
[439,424,437,0,452,442,460,455,457,435],
[464,445,433,439,0,449,465,467,451,451],
[467,416,427,449,442,0,438,470,448,446],
[446,432,444,431,426,453,0,453,425,450],
[446,424,432,436,424,421,438,0,421,417],
[464,454,458,434,440,443,466,470,0,462],
[462,447,409,456,440,445,441,474,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,438,452,420,435,430,459,408,429],
[476,0,484,470,470,474,433,470,443,466],
[453,407,0,431,445,414,399,478,415,424],
[439,421,460,0,420,433,422,440,435,430],
[471,421,446,471,0,439,445,466,427,459],
[456,417,477,458,452,0,448,466,439,463],
[461,458,492,469,446,443,0,480,464,495],
[432,421,413,451,425,425,411,0,418,437],
[483,448,476,456,464,452,427,473,0,471],
[462,425,467,461,432,428,396,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,457,443,468,465,438,466,448,482],
[449,0,483,449,494,479,456,470,437,466],
[434,408,0,402,467,439,437,438,404,440],
[448,442,489,0,481,468,456,457,458,455],
[423,397,424,410,0,417,424,413,399,430],
[426,412,452,423,474,0,417,482,425,464],
[453,435,454,435,467,474,0,449,421,471],
[425,421,453,434,478,409,442,0,422,433],
[443,454,487,433,492,466,470,469,0,462],
[409,425,451,436,461,427,420,458,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,443,491,433,464,509,451,426,406],
[453,0,457,448,469,469,483,453,421,428],
[448,434,0,494,410,467,496,417,440,444],
[400,443,397,0,448,443,467,453,476,411],
[458,422,481,443,0,492,509,480,494,411],
[427,422,424,448,399,0,443,408,377,373],
[382,408,395,424,382,448,0,425,353,376],
[440,438,474,438,411,483,466,0,425,452],
[465,470,451,415,397,514,538,466,0,455],
[485,463,447,480,480,518,515,439,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,424,435,429,436,432,417,474,423],
[469,0,447,448,474,445,465,476,488,474],
[467,444,0,429,451,454,470,447,478,447],
[456,443,462,0,456,458,440,439,494,426],
[462,417,440,435,0,428,442,453,480,410],
[455,446,437,433,463,0,457,432,492,446],
[459,426,421,451,449,434,0,438,474,448],
[474,415,444,452,438,459,453,0,490,452],
[417,403,413,397,411,399,417,401,0,412],
[468,417,444,465,481,445,443,439,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,449,445,423,468,458,453,441,469],
[470,0,468,464,445,455,513,462,488,488],
[442,423,0,433,411,459,455,440,472,473],
[446,427,458,0,499,476,477,463,517,463],
[468,446,480,392,0,468,495,437,461,460],
[423,436,432,415,423,0,471,406,439,472],
[433,378,436,414,396,420,0,398,440,438],
[438,429,451,428,454,485,493,0,531,470],
[450,403,419,374,430,452,451,360,0,404],
[422,403,418,428,431,419,453,421,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,447,423,438,443,419,429,444,445],
[482,0,468,467,449,478,460,439,460,450],
[444,423,0,441,454,465,434,455,463,442],
[468,424,450,0,449,444,455,447,474,466],
[453,442,437,442,0,465,427,450,449,455],
[448,413,426,447,426,0,427,437,425,442],
[472,431,457,436,464,464,0,472,476,455],
[462,452,436,444,441,454,419,0,451,463],
[447,431,428,417,442,466,415,440,0,448],
[446,441,449,425,436,449,436,428,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,463,437,417,466,457,448,441,447],
[448,0,460,447,441,452,453,437,475,435],
[428,431,0,417,415,441,432,436,447,432],
[454,444,474,0,451,477,474,460,485,473],
[474,450,476,440,0,468,463,444,474,452],
[425,439,450,414,423,0,456,422,443,436],
[434,438,459,417,428,435,0,436,443,416],
[443,454,455,431,447,469,455,0,456,455],
[450,416,444,406,417,448,448,435,0,454],
[444,456,459,418,439,455,475,436,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,444,470,435,453,456,451,437,427],
[439,0,422,446,445,433,435,401,431,412],
[447,469,0,460,439,466,487,419,440,450],
[421,445,431,0,440,468,457,428,437,438],
[456,446,452,451,0,467,458,425,444,439],
[438,458,425,423,424,0,446,424,430,406],
[435,456,404,434,433,445,0,422,421,409],
[440,490,472,463,466,467,469,0,440,431],
[454,460,451,454,447,461,470,451,0,428],
[464,479,441,453,452,485,482,460,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,455,481,453,436,421,425,459,465],
[464,0,429,443,436,429,428,426,429,449],
[436,462,0,466,443,449,448,454,434,457],
[410,448,425,0,426,426,425,422,408,437],
[438,455,448,465,0,442,429,443,469,456],
[455,462,442,465,449,0,422,433,422,473],
[470,463,443,466,462,469,0,473,446,476],
[466,465,437,469,448,458,418,0,450,454],
[432,462,457,483,422,469,445,441,0,439],
[426,442,434,454,435,418,415,437,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,405,432,411,396,427,441,450,431],
[481,0,432,488,464,463,486,487,480,485],
[486,459,0,467,479,442,447,459,474,466],
[459,403,424,0,448,422,463,458,468,457],
[480,427,412,443,0,449,424,463,460,454],
[495,428,449,469,442,0,443,480,475,448],
[464,405,444,428,467,448,0,484,452,457],
[450,404,432,433,428,411,407,0,415,426],
[441,411,417,423,431,416,439,476,0,446],
[460,406,425,434,437,443,434,465,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,374,440,435,443,407,426,460,396],
[468,0,413,468,458,442,401,444,429,484],
[517,478,0,458,473,458,477,447,445,481],
[451,423,433,0,462,413,427,448,437,462],
[456,433,418,429,0,434,402,441,446,454],
[448,449,433,478,457,0,429,422,430,455],
[484,490,414,464,489,462,0,489,452,460],
[465,447,444,443,450,469,402,0,456,517],
[431,462,446,454,445,461,439,435,0,439],
[495,407,410,429,437,436,431,374,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,426,463,448,465,427,440,431,454],
[439,0,436,459,462,444,433,413,453,433],
[465,455,0,459,459,449,427,411,429,433],
[428,432,432,0,442,444,412,405,436,423],
[443,429,432,449,0,441,414,429,429,449],
[426,447,442,447,450,0,422,427,427,443],
[464,458,464,479,477,469,0,439,463,459],
[451,478,480,486,462,464,452,0,442,466],
[460,438,462,455,462,464,428,449,0,439],
[437,458,458,468,442,448,432,425,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,429,433,428,454,418,445,432,453],
[458,0,428,417,440,460,393,441,438,453],
[462,463,0,452,451,452,448,452,460,416],
[458,474,439,0,465,454,409,437,464,437],
[463,451,440,426,0,471,408,452,444,445],
[437,431,439,437,420,0,413,475,448,411],
[473,498,443,482,483,478,0,470,483,475],
[446,450,439,454,439,416,421,0,456,432],
[459,453,431,427,447,443,408,435,0,420],
[438,438,475,454,446,480,416,459,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,449,453,441,450,445,455,446,468],
[426,0,427,435,420,410,412,414,443,448],
[442,464,0,444,454,460,451,436,460,460],
[438,456,447,0,457,451,441,445,456,458],
[450,471,437,434,0,447,462,451,449,462],
[441,481,431,440,444,0,426,439,451,457],
[446,479,440,450,429,465,0,460,478,466],
[436,477,455,446,440,452,431,0,431,444],
[445,448,431,435,442,440,413,460,0,456],
[423,443,431,433,429,434,425,447,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,469,423,452,471,441,457,457,480],
[452,0,475,451,462,470,436,470,465,465],
[422,416,0,427,433,459,418,433,424,407],
[468,440,464,0,437,459,446,438,451,449],
[439,429,458,454,0,490,451,448,470,452],
[420,421,432,432,401,0,409,404,405,435],
[450,455,473,445,440,482,0,428,489,433],
[434,421,458,453,443,487,463,0,465,453],
[434,426,467,440,421,486,402,426,0,419],
[411,426,484,442,439,456,458,438,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,453,440,457,423,448,447,431,466],
[442,0,446,450,458,439,443,446,435,453],
[438,445,0,443,422,436,435,461,437,453],
[451,441,448,0,444,418,444,444,435,450],
[434,433,469,447,0,432,435,426,435,434],
[468,452,455,473,459,0,462,442,437,454],
[443,448,456,447,456,429,0,457,447,441],
[444,445,430,447,465,449,434,0,420,449],
[460,456,454,456,456,454,444,471,0,471],
[425,438,438,441,457,437,450,442,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,453,479,468,491,463,441,492,460],
[437,0,474,475,469,467,433,461,466,460],
[438,417,0,470,454,439,418,428,464,487],
[412,416,421,0,423,459,408,404,436,460],
[423,422,437,468,0,477,465,443,463,461],
[400,424,452,432,414,0,451,408,443,439],
[428,458,473,483,426,440,0,450,463,452],
[450,430,463,487,448,483,441,0,454,470],
[399,425,427,455,428,448,428,437,0,454],
[431,431,404,431,430,452,439,421,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,386,423,441,403,417,413,381,379],
[486,0,455,443,467,444,452,446,440,427],
[505,436,0,505,489,475,480,471,452,472],
[468,448,386,0,447,439,450,458,421,414],
[450,424,402,444,0,422,436,422,435,432],
[488,447,416,452,469,0,453,451,445,424],
[474,439,411,441,455,438,0,462,435,431],
[478,445,420,433,469,440,429,0,389,406],
[510,451,439,470,456,446,456,502,0,440],
[512,464,419,477,459,467,460,485,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,429,413,448,465,439,421,449,461],
[430,0,410,391,426,446,435,406,422,427],
[462,481,0,442,473,469,451,461,465,468],
[478,500,449,0,478,494,443,462,469,472],
[443,465,418,413,0,445,431,424,451,460],
[426,445,422,397,446,0,428,412,425,448],
[452,456,440,448,460,463,0,449,465,450],
[470,485,430,429,467,479,442,0,436,463],
[442,469,426,422,440,466,426,455,0,454],
[430,464,423,419,431,443,441,428,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,443,447,451,429,463,440,424,448],
[441,0,421,452,427,405,418,438,445,440],
[448,470,0,474,445,454,470,437,452,462],
[444,439,417,0,445,427,460,441,442,453],
[440,464,446,446,0,436,449,469,450,455],
[462,486,437,464,455,0,460,459,456,451],
[428,473,421,431,442,431,0,434,432,452],
[451,453,454,450,422,432,457,0,440,449],
[467,446,439,449,441,435,459,451,0,444],
[443,451,429,438,436,440,439,442,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,480,462,446,435,473,485,480,457],
[441,0,483,464,452,453,457,445,474,429],
[411,408,0,431,429,442,424,437,432,417],
[429,427,460,0,428,440,435,444,451,435],
[445,439,462,463,0,446,428,466,456,451],
[456,438,449,451,445,0,483,442,472,440],
[418,434,467,456,463,408,0,454,448,433],
[406,446,454,447,425,449,437,0,453,435],
[411,417,459,440,435,419,443,438,0,416],
[434,462,474,456,440,451,458,456,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,446,453,436,436,442,428,443,427],
[451,0,425,449,449,449,473,456,517,471],
[445,466,0,443,426,429,445,442,468,443],
[438,442,448,0,425,432,438,463,470,441],
[455,442,465,466,0,427,457,457,460,465],
[455,442,462,459,464,0,450,459,458,446],
[449,418,446,453,434,441,0,426,458,461],
[463,435,449,428,434,432,465,0,460,443],
[448,374,423,421,431,433,433,431,0,442],
[464,420,448,450,426,445,430,448,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,405,393,425,432,452,433,431,407],
[463,0,436,445,438,472,457,446,458,448],
[486,455,0,452,428,475,464,454,465,445],
[498,446,439,0,453,455,488,467,463,445],
[466,453,463,438,0,447,460,440,452,433],
[459,419,416,436,444,0,441,454,422,416],
[439,434,427,403,431,450,0,415,419,427],
[458,445,437,424,451,437,476,0,444,420],
[460,433,426,428,439,469,472,447,0,434],
[484,443,446,446,458,475,464,471,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,428,430,459,433,446,443,429,475],
[421,0,405,424,423,426,405,424,399,436],
[463,486,0,465,467,451,451,447,444,495],
[461,467,426,0,444,429,424,453,442,461],
[432,468,424,447,0,438,434,437,445,463],
[458,465,440,462,453,0,446,462,439,471],
[445,486,440,467,457,445,0,447,453,480],
[448,467,444,438,454,429,444,0,458,466],
[462,492,447,449,446,452,438,433,0,456],
[416,455,396,430,428,420,411,425,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,474,482,447,474,453,446,435,464],
[424,0,455,461,433,458,433,446,438,440],
[417,436,0,446,438,446,435,416,444,422],
[409,430,445,0,420,446,429,411,402,432],
[444,458,453,471,0,467,448,424,451,445],
[417,433,445,445,424,0,420,419,420,425],
[438,458,456,462,443,471,0,456,423,453],
[445,445,475,480,467,472,435,0,425,447],
[456,453,447,489,440,471,468,466,0,442],
[427,451,469,459,446,466,438,444,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,428,421,437,428,438,446,454,422],
[482,0,448,451,472,457,439,480,472,430],
[463,443,0,437,443,433,460,451,485,421],
[470,440,454,0,443,456,447,469,470,446],
[454,419,448,448,0,428,439,444,451,439],
[463,434,458,435,463,0,421,482,455,462],
[453,452,431,444,452,470,0,472,484,454],
[445,411,440,422,447,409,419,0,468,424],
[437,419,406,421,440,436,407,423,0,432],
[469,461,470,445,452,429,437,467,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,472,461,448,451,457,462,471,432],
[413,0,430,422,431,428,413,437,443,410],
[419,461,0,437,447,461,442,440,467,433],
[430,469,454,0,461,460,466,462,460,436],
[443,460,444,430,0,438,436,435,434,423],
[440,463,430,431,453,0,437,441,444,446],
[434,478,449,425,455,454,0,476,445,447],
[429,454,451,429,456,450,415,0,456,438],
[420,448,424,431,457,447,446,435,0,408],
[459,481,458,455,468,445,444,453,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,438,458,462,466,436,448,453,451],
[439,0,442,438,442,449,431,436,432,463],
[453,449,0,430,459,442,449,429,435,450],
[433,453,461,0,450,444,439,440,445,439],
[429,449,432,441,0,457,424,443,425,440],
[425,442,449,447,434,0,431,452,413,440],
[455,460,442,452,467,460,0,438,448,438],
[443,455,462,451,448,439,453,0,444,449],
[438,459,456,446,466,478,443,447,0,443],
[440,428,441,452,451,451,453,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,450,445,455,460,462,438,438,453],
[451,0,449,459,436,449,427,450,452,461],
[441,442,0,445,416,431,430,434,426,448],
[446,432,446,0,438,452,447,451,460,446],
[436,455,475,453,0,453,433,442,444,461],
[431,442,460,439,438,0,456,454,444,459],
[429,464,461,444,458,435,0,441,440,450],
[453,441,457,440,449,437,450,0,443,453],
[453,439,465,431,447,447,451,448,0,457],
[438,430,443,445,430,432,441,438,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,491,469,467,451,441,482,460,448],
[460,0,465,483,471,466,470,472,470,439],
[400,426,0,446,410,433,460,433,435,446],
[422,408,445,0,404,413,422,417,430,414],
[424,420,481,487,0,431,439,466,451,447],
[440,425,458,478,460,0,452,439,446,448],
[450,421,431,469,452,439,0,424,455,436],
[409,419,458,474,425,452,467,0,411,427],
[431,421,456,461,440,445,436,480,0,457],
[443,452,445,477,444,443,455,464,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,428,438,440,428,435,433,445,426],
[422,0,411,427,420,424,424,423,426,416],
[463,480,0,449,452,441,451,455,465,443],
[453,464,442,0,458,449,456,441,447,446],
[451,471,439,433,0,439,443,441,438,437],
[463,467,450,442,452,0,444,442,442,446],
[456,467,440,435,448,447,0,440,459,433],
[458,468,436,450,450,449,451,0,452,459],
[446,465,426,444,453,449,432,439,0,452],
[465,475,448,445,454,445,458,432,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,472,391,547,456,562,506,530,613],
[462,0,404,304,373,434,502,441,460,563],
[419,487,0,494,534,546,568,531,440,653],
[500,587,397,0,513,419,597,514,553,657],
[344,518,357,378,0,363,445,444,383,435],
[435,457,345,472,528,0,570,503,458,589],
[329,389,323,294,446,321,0,446,439,485],
[385,450,360,377,447,388,445,0,421,582],
[361,431,451,338,508,433,452,470,0,566],
[278,328,238,234,456,302,406,309,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,399,455,449,459,418,421,496,447],
[456,0,407,461,437,428,469,416,443,433],
[492,484,0,448,486,445,466,447,452,487],
[436,430,443,0,443,426,412,419,417,437],
[442,454,405,448,0,443,457,409,416,435],
[432,463,446,465,448,0,471,443,466,471],
[473,422,425,479,434,420,0,443,443,434],
[470,475,444,472,482,448,448,0,442,472],
[395,448,439,474,475,425,448,449,0,452],
[444,458,404,454,456,420,457,419,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,464,447,418,453,436,423,455,433],
[443,0,453,436,435,458,395,412,433,446],
[427,438,0,405,415,428,404,408,426,396],
[444,455,486,0,443,480,434,448,461,446],
[473,456,476,448,0,478,451,449,478,437],
[438,433,463,411,413,0,448,412,442,424],
[455,496,487,457,440,443,0,445,469,435],
[468,479,483,443,442,479,446,0,433,436],
[436,458,465,430,413,449,422,458,0,428],
[458,445,495,445,454,467,456,455,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,445,441,449,448,424,444,454,458],
[441,0,423,425,434,426,416,438,425,433],
[446,468,0,454,450,462,428,475,441,455],
[450,466,437,0,462,434,444,448,444,449],
[442,457,441,429,0,441,438,453,433,438],
[443,465,429,457,450,0,436,442,439,474],
[467,475,463,447,453,455,0,462,436,431],
[447,453,416,443,438,449,429,0,437,442],
[437,466,450,447,458,452,455,454,0,456],
[433,458,436,442,453,417,460,449,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,460,487,451,456,450,449,481,420],
[448,0,440,414,418,431,430,425,425,438],
[431,451,0,457,399,414,482,414,456,429],
[404,477,434,0,421,446,426,467,482,430],
[440,473,492,470,0,451,463,419,461,448],
[435,460,477,445,440,0,462,431,504,468],
[441,461,409,465,428,429,0,451,463,423],
[442,466,477,424,472,460,440,0,527,471],
[410,466,435,409,430,387,428,364,0,406],
[471,453,462,461,443,423,468,420,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,409,425,399,429,434,412,415,474],
[420,0,358,388,414,369,440,422,396,422],
[482,533,0,479,444,481,480,397,422,508],
[466,503,412,0,465,440,479,392,414,515],
[492,477,447,426,0,376,429,445,365,445],
[462,522,410,451,515,0,505,463,462,527],
[457,451,411,412,462,386,0,432,415,441],
[479,469,494,499,446,428,459,0,431,503],
[476,495,469,477,526,429,476,460,0,511],
[417,469,383,376,446,364,450,388,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,449,451,524,478,492,418,554,476],
[439,0,426,501,508,463,427,459,489,424],
[442,465,0,468,518,454,393,452,553,484],
[440,390,423,0,475,477,467,465,495,488],
[367,383,373,416,0,448,412,418,473,399],
[413,428,437,414,443,0,422,439,505,465],
[399,464,498,424,479,469,0,451,585,514],
[473,432,439,426,473,452,440,0,491,532],
[337,402,338,396,418,386,306,400,0,409],
[415,467,407,403,492,426,377,359,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,444,427,446,448,406,443,451,447],
[449,0,416,435,450,438,445,448,443,426],
[447,475,0,445,461,479,424,466,439,431],
[464,456,446,0,451,445,434,470,438,479],
[445,441,430,440,0,472,432,467,458,455],
[443,453,412,446,419,0,416,448,428,438],
[485,446,467,457,459,475,0,434,446,456],
[448,443,425,421,424,443,457,0,468,420],
[440,448,452,453,433,463,445,423,0,442],
[444,465,460,412,436,453,435,471,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,469,446,449,496,488,450,474,444],
[427,0,474,395,414,439,458,433,449,458],
[422,417,0,442,384,437,424,401,432,432],
[445,496,449,0,440,464,460,458,509,466],
[442,477,507,451,0,481,459,451,499,463],
[395,452,454,427,410,0,446,407,435,459],
[403,433,467,431,432,445,0,415,430,441],
[441,458,490,433,440,484,476,0,434,472],
[417,442,459,382,392,456,461,457,0,451],
[447,433,459,425,428,432,450,419,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,455,439,444,476,465,450,475,435],
[415,0,388,362,399,423,420,384,424,354],
[436,503,0,427,427,439,488,456,470,432],
[452,529,464,0,427,462,484,476,474,379],
[447,492,464,464,0,460,428,416,426,448],
[415,468,452,429,431,0,434,421,439,367],
[426,471,403,407,463,457,0,443,434,419],
[441,507,435,415,475,470,448,0,416,443],
[416,467,421,417,465,452,457,475,0,433],
[456,537,459,512,443,524,472,448,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,459,468,475,467,455,457,464,439],
[454,0,450,447,461,457,438,441,442,420],
[432,441,0,446,442,435,451,425,437,429],
[423,444,445,0,447,443,431,428,449,439],
[416,430,449,444,0,438,438,418,422,427],
[424,434,456,448,453,0,435,426,436,430],
[436,453,440,460,453,456,0,431,452,436],
[434,450,466,463,473,465,460,0,435,440],
[427,449,454,442,469,455,439,456,0,461],
[452,471,462,452,464,461,455,451,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,444,483,453,447,432,464,448,466],
[419,0,433,453,426,426,407,425,436,437],
[447,458,0,443,441,429,438,448,453,456],
[408,438,448,0,418,413,428,416,424,421],
[438,465,450,473,0,463,442,450,442,449],
[444,465,462,478,428,0,447,465,463,478],
[459,484,453,463,449,444,0,480,440,463],
[427,466,443,475,441,426,411,0,441,423],
[443,455,438,467,449,428,451,450,0,449],
[425,454,435,470,442,413,428,468,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,429,439,445,426,443,420,461,440],
[468,0,428,449,459,437,473,398,463,448],
[462,463,0,459,447,462,469,443,470,459],
[452,442,432,0,452,450,454,450,478,440],
[446,432,444,439,0,465,458,446,484,434],
[465,454,429,441,426,0,455,441,467,437],
[448,418,422,437,433,436,0,430,449,420],
[471,493,448,441,445,450,461,0,485,443],
[430,428,421,413,407,424,442,406,0,435],
[451,443,432,451,457,454,471,448,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,452,450,432,450,463,440,437,466],
[460,0,416,416,438,450,449,423,441,431],
[439,475,0,443,445,452,453,457,444,469],
[441,475,448,0,438,465,473,439,440,473],
[459,453,446,453,0,458,470,460,436,434],
[441,441,439,426,433,0,444,441,431,449],
[428,442,438,418,421,447,0,420,438,442],
[451,468,434,452,431,450,471,0,454,477],
[454,450,447,451,455,460,453,437,0,453],
[425,460,422,418,457,442,449,414,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,468,436,452,456,446,422,449,443],
[481,0,474,448,452,489,441,451,485,496],
[423,417,0,443,414,457,408,431,447,487],
[455,443,448,0,450,474,420,436,502,484],
[439,439,477,441,0,455,403,464,478,497],
[435,402,434,417,436,0,382,384,460,438],
[445,450,483,471,488,509,0,483,497,491],
[469,440,460,455,427,507,408,0,449,513],
[442,406,444,389,413,431,394,442,0,476],
[448,395,404,407,394,453,400,378,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,432,454,399,394,403,452,476,459],
[489,0,418,442,446,432,454,473,476,447],
[459,473,0,462,445,437,438,484,448,484],
[437,449,429,0,442,426,434,436,453,485],
[492,445,446,449,0,425,430,477,468,476],
[497,459,454,465,466,0,439,492,472,477],
[488,437,453,457,461,452,0,525,494,493],
[439,418,407,455,414,399,366,0,441,434],
[415,415,443,438,423,419,397,450,0,471],
[432,444,407,406,415,414,398,457,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,285,413,516,4,463,341,398,285],
[709,0,422,490,524,130,656,471,709,293],
[606,469,0,542,706,4,644,353,466,471],
[478,401,349,0,528,4,527,409,353,349],
[375,367,185,363,0,129,481,246,348,234],
[887,761,887,887,762,0,656,409,887,758],
[428,235,247,364,410,235,0,584,466,410],
[550,420,538,482,645,482,307,0,701,482],
[493,182,425,538,543,4,425,190,0,296],
[606,598,420,542,657,133,481,409,595,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,486,351,495,413,476,581,493,451],
[396,0,438,373,488,560,519,509,525,446],
[405,453,0,384,386,506,516,464,380,383],
[540,518,507,0,484,531,546,515,484,420],
[396,403,505,407,0,454,468,491,400,405],
[478,331,385,360,437,0,406,489,452,375],
[415,372,375,345,423,485,0,452,437,359],
[310,382,427,376,400,402,439,0,409,352],
[398,366,511,407,491,439,454,482,0,374],
[440,445,508,471,486,516,532,539,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,432,455,476,448,477,444,491,422],
[423,0,462,457,474,424,480,431,487,444],
[459,429,0,433,506,426,452,415,464,450],
[436,434,458,0,490,452,458,419,470,421],
[415,417,385,401,0,388,439,444,480,428],
[443,467,465,439,503,0,485,460,487,465],
[414,411,439,433,452,406,0,438,493,433],
[447,460,476,472,447,431,453,0,490,452],
[400,404,427,421,411,404,398,401,0,441],
[469,447,441,470,463,426,458,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,429,421,455,479,441,450,424,456],
[426,0,427,409,429,461,438,441,390,445],
[462,464,0,395,398,475,422,479,408,465],
[470,482,496,0,469,478,466,473,431,491],
[436,462,493,422,0,460,458,452,413,453],
[412,430,416,413,431,0,437,420,380,436],
[450,453,469,425,433,454,0,434,434,449],
[441,450,412,418,439,471,457,0,395,427],
[467,501,483,460,478,511,457,496,0,439],
[435,446,426,400,438,455,442,464,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,433,450,438,468,468,473,442,443],
[423,0,459,441,459,429,459,460,439,437],
[458,432,0,453,466,435,454,432,430,463],
[441,450,438,0,441,464,482,449,434,442],
[453,432,425,450,0,467,483,459,405,454],
[423,462,456,427,424,0,473,459,400,435],
[423,432,437,409,408,418,0,417,418,441],
[418,431,459,442,432,432,474,0,459,454],
[449,452,461,457,486,491,473,432,0,477],
[448,454,428,449,437,456,450,437,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,449,453,470,444,484,442,443,423],
[451,0,441,452,446,455,439,454,435,426],
[442,450,0,466,463,455,444,434,438,462],
[438,439,425,0,431,417,429,427,416,424],
[421,445,428,460,0,427,448,430,440,426],
[447,436,436,474,464,0,444,436,455,444],
[407,452,447,462,443,447,0,421,440,440],
[449,437,457,464,461,455,470,0,437,455],
[448,456,453,475,451,436,451,454,0,431],
[468,465,429,467,465,447,451,436,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,442,448,433,439,429,430,435,422],
[445,0,451,434,447,468,436,456,447,421],
[449,440,0,429,466,447,441,433,437,438],
[443,457,462,0,438,445,448,432,455,452],
[458,444,425,453,0,444,447,453,447,441],
[452,423,444,446,447,0,452,431,451,430],
[462,455,450,443,444,439,0,434,474,454],
[461,435,458,459,438,460,457,0,467,455],
[456,444,454,436,444,440,417,424,0,396],
[469,470,453,439,450,461,437,436,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,422,408,416,421,418,429,429,433],
[451,0,438,428,453,421,454,448,465,441],
[469,453,0,437,445,440,453,462,460,461],
[483,463,454,0,447,444,451,473,454,486],
[475,438,446,444,0,453,460,452,464,456],
[470,470,451,447,438,0,462,444,465,445],
[473,437,438,440,431,429,0,441,430,452],
[462,443,429,418,439,447,450,0,445,442],
[462,426,431,437,427,426,461,446,0,461],
[458,450,430,405,435,446,439,449,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,456,429,433,430,464,464,444,455],
[419,0,451,446,418,445,443,442,427,424],
[435,440,0,433,455,443,413,451,427,418],
[462,445,458,0,441,447,450,451,436,433],
[458,473,436,450,0,459,465,448,447,415],
[461,446,448,444,432,0,439,442,454,436],
[427,448,478,441,426,452,0,433,441,435],
[427,449,440,440,443,449,458,0,430,431],
[447,464,464,455,444,437,450,461,0,437],
[436,467,473,458,476,455,456,460,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,444,394,450,440,418,413,390,403],
[473,0,449,462,461,445,426,436,436,424],
[447,442,0,422,422,419,449,450,431,415],
[497,429,469,0,451,466,441,440,438,456],
[441,430,469,440,0,453,410,448,452,417],
[451,446,472,425,438,0,449,460,402,423],
[473,465,442,450,481,442,0,437,433,417],
[478,455,441,451,443,431,454,0,438,418],
[501,455,460,453,439,489,458,453,0,427],
[488,467,476,435,474,468,474,473,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,475,437,454,447,440,470,451,469],
[425,0,461,438,461,442,405,463,468,443],
[416,430,0,430,454,427,414,451,456,449],
[454,453,461,0,445,450,457,481,478,435],
[437,430,437,446,0,427,391,444,424,439],
[444,449,464,441,464,0,409,469,452,448],
[451,486,477,434,500,482,0,508,476,489],
[421,428,440,410,447,422,383,0,439,427],
[440,423,435,413,467,439,415,452,0,423],
[422,448,442,456,452,443,402,464,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,408,421,460,457,416,457,425,400],
[439,0,414,426,426,446,440,480,491,447],
[483,477,0,396,374,473,409,462,464,444],
[470,465,495,0,434,514,457,491,446,462],
[431,465,517,457,0,503,466,489,514,444],
[434,445,418,377,388,0,388,436,409,397],
[475,451,482,434,425,503,0,455,480,477],
[434,411,429,400,402,455,436,0,458,387],
[466,400,427,445,377,482,411,433,0,392],
[491,444,447,429,447,494,414,504,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,443,453,453,453,454,466,456,452],
[422,0,452,474,439,448,453,452,435,467],
[448,439,0,463,437,427,428,447,415,447],
[438,417,428,0,432,408,423,447,431,445],
[438,452,454,459,0,442,445,461,438,430],
[438,443,464,483,449,0,454,478,441,455],
[437,438,463,468,446,437,0,458,428,462],
[425,439,444,444,430,413,433,0,418,428],
[435,456,476,460,453,450,463,473,0,493],
[439,424,444,446,461,436,429,463,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,445,452,432,431,439,457,458,460],
[448,0,467,444,435,456,444,474,428,452],
[446,424,0,426,419,426,426,449,437,443],
[439,447,465,0,447,452,425,451,451,438],
[459,456,472,444,0,435,438,482,430,465],
[460,435,465,439,456,0,460,477,442,462],
[452,447,465,466,453,431,0,462,457,447],
[434,417,442,440,409,414,429,0,410,436],
[433,463,454,440,461,449,434,481,0,459],
[431,439,448,453,426,429,444,455,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,436,460,455,453,460,448,441,465],
[441,0,440,429,446,441,444,443,428,467],
[455,451,0,453,446,454,463,453,442,449],
[431,462,438,0,443,453,453,428,432,448],
[436,445,445,448,0,456,435,445,421,436],
[438,450,437,438,435,0,465,448,441,455],
[431,447,428,438,456,426,0,451,448,439],
[443,448,438,463,446,443,440,0,430,467],
[450,463,449,459,470,450,443,461,0,467],
[426,424,442,443,455,436,452,424,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,438,418,453,431,426,435,444,442],
[461,0,443,439,456,452,444,459,459,444],
[453,448,0,442,463,442,453,446,449,435],
[473,452,449,0,442,453,448,449,459,462],
[438,435,428,449,0,431,438,440,442,462],
[460,439,449,438,460,0,444,437,443,445],
[465,447,438,443,453,447,0,443,450,460],
[456,432,445,442,451,454,448,0,451,451],
[447,432,442,432,449,448,441,440,0,446],
[449,447,456,429,429,446,431,440,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,434,418,429,405,427,424,447,403],
[493,0,455,416,436,413,420,440,450,434],
[457,436,0,417,451,395,444,480,452,462],
[473,475,474,0,428,443,444,462,460,493],
[462,455,440,463,0,469,432,441,438,471],
[486,478,496,448,422,0,448,459,466,459],
[464,471,447,447,459,443,0,477,446,429],
[467,451,411,429,450,432,414,0,441,411],
[444,441,439,431,453,425,445,450,0,422],
[488,457,429,398,420,432,462,480,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,507,476,482,461,470,455,464,440],
[444,0,485,419,448,437,432,437,449,404],
[384,406,0,424,443,409,431,401,407,391],
[415,472,467,0,429,434,432,428,454,436],
[409,443,448,462,0,437,436,442,451,442],
[430,454,482,457,454,0,456,414,465,430],
[421,459,460,459,455,435,0,427,458,421],
[436,454,490,463,449,477,464,0,436,463],
[427,442,484,437,440,426,433,455,0,442],
[451,487,500,455,449,461,470,428,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,457,430,445,433,424,431,426,419],
[432,0,431,413,439,425,406,407,438,423],
[434,460,0,420,419,435,425,398,422,434],
[461,478,471,0,461,467,407,458,468,464],
[446,452,472,430,0,429,407,446,452,461],
[458,466,456,424,462,0,459,448,442,480],
[467,485,466,484,484,432,0,446,470,469],
[460,484,493,433,445,443,445,0,447,449],
[465,453,469,423,439,449,421,444,0,428],
[472,468,457,427,430,411,422,442,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,447,462,475,444,483,468,508,460],
[431,0,394,448,443,421,431,436,470,421],
[444,497,0,456,482,474,442,481,493,463],
[429,443,435,0,463,429,452,445,498,450],
[416,448,409,428,0,456,414,475,470,446],
[447,470,417,462,435,0,449,445,472,454],
[408,460,449,439,477,442,0,455,468,429],
[423,455,410,446,416,446,436,0,469,451],
[383,421,398,393,421,419,423,422,0,433],
[431,470,428,441,445,437,462,440,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,432,451,474,476,424,430,440,414],
[470,0,429,487,494,458,449,467,451,444],
[459,462,0,454,486,470,448,438,491,430],
[440,404,437,0,422,437,393,414,449,427],
[417,397,405,469,0,422,406,429,440,403],
[415,433,421,454,469,0,428,460,443,433],
[467,442,443,498,485,463,0,452,467,442],
[461,424,453,477,462,431,439,0,427,444],
[451,440,400,442,451,448,424,464,0,448],
[477,447,461,464,488,458,449,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,478,464,429,462,439,479,487,445],
[467,0,470,429,466,476,486,503,485,470],
[413,421,0,433,453,429,428,451,446,420],
[427,462,458,0,448,447,464,531,494,456],
[462,425,438,443,0,443,391,415,431,408],
[429,415,462,444,448,0,468,463,443,409],
[452,405,463,427,500,423,0,507,507,451],
[412,388,440,360,476,428,384,0,449,418],
[404,406,445,397,460,448,384,442,0,407],
[446,421,471,435,483,482,440,473,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,523,475,376,360,508,525,379,313],
[448,0,533,539,488,455,489,404,486,340],
[368,358,0,372,363,269,512,316,341,333],
[416,352,519,0,262,337,445,446,396,376],
[515,403,528,629,0,364,603,630,540,457],
[531,436,622,554,527,0,630,572,463,475],
[383,402,379,446,288,261,0,392,334,352],
[366,487,575,445,261,319,499,0,441,325],
[512,405,550,495,351,428,557,450,0,380],
[578,551,558,515,434,416,539,566,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,438,434,434,457,450,478,439,463],
[450,0,451,434,462,448,443,457,450,439],
[453,440,0,449,460,440,447,461,434,449],
[457,457,442,0,452,455,423,466,435,455],
[457,429,431,439,0,440,434,472,428,447],
[434,443,451,436,451,0,439,470,437,466],
[441,448,444,468,457,452,0,494,451,450],
[413,434,430,425,419,421,397,0,425,411],
[452,441,457,456,463,454,440,466,0,450],
[428,452,442,436,444,425,441,480,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,465,445,475,442,438,447,449,462],
[419,0,437,428,459,428,414,424,431,431],
[426,454,0,455,472,441,451,438,433,445],
[446,463,436,0,455,441,428,426,441,459],
[416,432,419,436,0,427,407,441,420,434],
[449,463,450,450,464,0,420,441,428,453],
[453,477,440,463,484,471,0,438,444,462],
[444,467,453,465,450,450,453,0,440,478],
[442,460,458,450,471,463,447,451,0,450],
[429,460,446,432,457,438,429,413,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,470,446,445,449,434,427,455,457],
[456,0,472,455,454,450,443,445,452,459],
[421,419,0,429,413,423,411,431,443,442],
[445,436,462,0,432,437,425,425,442,456],
[446,437,478,459,0,457,450,458,478,472],
[442,441,468,454,434,0,427,439,443,437],
[457,448,480,466,441,464,0,450,450,456],
[464,446,460,466,433,452,441,0,460,457],
[436,439,448,449,413,448,441,431,0,455],
[434,432,449,435,419,454,435,434,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,673,667,497,412,621,564,526,702,756],
[218,0,291,347,396,375,534,314,464,380],
[224,600,0,220,402,440,451,215,258,313],
[394,544,671,0,408,413,503,523,552,632],
[479,495,489,483,0,375,529,302,512,431],
[270,516,451,478,516,0,447,441,556,467],
[327,357,440,388,362,444,0,426,448,442],
[365,577,676,368,589,450,465,0,405,710],
[189,427,633,339,379,335,443,486,0,603],
[135,511,578,259,460,424,449,181,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,449,455,441,451,423,420,443,447],
[446,0,448,455,436,458,435,449,467,457],
[442,443,0,459,453,455,457,433,464,454],
[436,436,432,0,438,467,433,449,442,461],
[450,455,438,453,0,486,440,427,465,459],
[440,433,436,424,405,0,441,406,447,462],
[468,456,434,458,451,450,0,416,458,450],
[471,442,458,442,464,485,475,0,474,471],
[448,424,427,449,426,444,433,417,0,451],
[444,434,437,430,432,429,441,420,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,457,478,473,509,474,474,434,451],
[447,0,449,433,449,467,435,416,452,451],
[434,442,0,491,466,483,447,493,482,417],
[413,458,400,0,437,442,439,444,438,433],
[418,442,425,454,0,476,398,431,430,419],
[382,424,408,449,415,0,423,452,455,451],
[417,456,444,452,493,468,0,483,453,469],
[417,475,398,447,460,439,408,0,428,473],
[457,439,409,453,461,436,438,463,0,464],
[440,440,474,458,472,440,422,418,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,452,428,426,441,426,431,452,418],
[423,0,430,433,427,455,412,421,452,409],
[439,461,0,439,416,454,443,437,461,414],
[463,458,452,0,449,483,445,441,448,448],
[465,464,475,442,0,460,438,440,476,426],
[450,436,437,408,431,0,412,416,446,417],
[465,479,448,446,453,479,0,452,461,441],
[460,470,454,450,451,475,439,0,460,438],
[439,439,430,443,415,445,430,431,0,416],
[473,482,477,443,465,474,450,453,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,276,493,162,162,467,133,320,676],
[729,0,487,495,247,441,520,309,387,729],
[615,404,0,685,371,511,496,449,636,661],
[398,396,206,0,33,429,397,261,214,308],
[729,644,520,858,0,544,656,417,495,762],
[729,450,380,462,347,0,495,424,355,696],
[424,371,395,494,235,396,0,342,148,408],
[758,582,442,630,474,467,549,0,548,758],
[571,504,255,677,396,536,743,343,0,633],
[215,162,230,583,129,195,483,133,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,430,434,427,459,439,429,434,455],
[446,0,449,454,453,495,478,474,448,437],
[461,442,0,463,447,487,448,459,435,450],
[457,437,428,0,455,479,435,461,430,443],
[464,438,444,436,0,476,452,453,454,464],
[432,396,404,412,415,0,423,387,411,430],
[452,413,443,456,439,468,0,431,436,432],
[462,417,432,430,438,504,460,0,462,468],
[457,443,456,461,437,480,455,429,0,437],
[436,454,441,448,427,461,459,423,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,434,435,464,433,438,438,439,446],
[450,0,410,384,422,442,417,428,443,422],
[457,481,0,449,444,468,458,465,437,446],
[456,507,442,0,411,450,473,473,447,460],
[427,469,447,480,0,463,440,455,444,453],
[458,449,423,441,428,0,436,475,474,442],
[453,474,433,418,451,455,0,456,434,436],
[453,463,426,418,436,416,435,0,447,432],
[452,448,454,444,447,417,457,444,0,430],
[445,469,445,431,438,449,455,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,427,407,414,437,396,395,418,381],
[457,0,458,436,451,430,427,444,435,421],
[464,433,0,447,420,426,414,414,393,423],
[484,455,444,0,442,430,447,427,419,408],
[477,440,471,449,0,448,449,447,446,456],
[454,461,465,461,443,0,422,437,436,435],
[495,464,477,444,442,469,0,442,410,427],
[496,447,477,464,444,454,449,0,427,438],
[473,456,498,472,445,455,481,464,0,439],
[510,470,468,483,435,456,464,453,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,463,437,471,461,460,456,482,485],
[474,0,451,448,499,466,511,434,471,463],
[428,440,0,442,469,462,466,430,444,469],
[454,443,449,0,471,476,490,418,466,479],
[420,392,422,420,0,422,415,402,431,443],
[430,425,429,415,469,0,436,395,458,473],
[431,380,425,401,476,455,0,417,446,422],
[435,457,461,473,489,496,474,0,480,496],
[409,420,447,425,460,433,445,411,0,447],
[406,428,422,412,448,418,469,395,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,448,459,467,445,465,463,466,452],
[423,0,445,455,457,445,461,448,444,426],
[443,446,0,450,449,445,439,441,440,440],
[432,436,441,0,449,430,427,447,431,437],
[424,434,442,442,0,447,436,435,432,426],
[446,446,446,461,444,0,438,437,441,446],
[426,430,452,464,455,453,0,442,441,430],
[428,443,450,444,456,454,449,0,436,443],
[425,447,451,460,459,450,450,455,0,435],
[439,465,451,454,465,445,461,448,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,456,466,479,437,467,459,460,448],
[462,0,485,427,479,469,469,461,479,464],
[435,406,0,421,440,447,425,433,436,422],
[425,464,470,0,473,452,462,441,465,451],
[412,412,451,418,0,434,440,421,419,442],
[454,422,444,439,457,0,449,436,447,433],
[424,422,466,429,451,442,0,451,450,448],
[432,430,458,450,470,455,440,0,471,433],
[431,412,455,426,472,444,441,420,0,443],
[443,427,469,440,449,458,443,458,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,445,451,452,462,429,437,465,454],
[459,0,456,467,474,464,455,412,483,466],
[446,435,0,455,424,447,420,437,457,446],
[440,424,436,0,413,433,391,402,458,446],
[439,417,467,478,0,468,422,441,481,475],
[429,427,444,458,423,0,410,418,421,451],
[462,436,471,500,469,481,0,475,509,476],
[454,479,454,489,450,473,416,0,472,452],
[426,408,434,433,410,470,382,419,0,425],
[437,425,445,445,416,440,415,439,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,439,439,415,427,410,433,422,444],
[475,0,445,448,422,459,440,477,461,455],
[452,446,0,446,436,438,430,453,455,438],
[452,443,445,0,433,430,427,449,455,430],
[476,469,455,458,0,463,442,472,447,440],
[464,432,453,461,428,0,458,456,445,436],
[481,451,461,464,449,433,0,460,449,468],
[458,414,438,442,419,435,431,0,444,430],
[469,430,436,436,444,446,442,447,0,454],
[447,436,453,461,451,455,423,461,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,441,429,456,432,422,371,458,433],
[441,0,426,444,458,428,476,418,468,397],
[450,465,0,456,452,478,490,433,475,449],
[462,447,435,0,436,422,476,427,445,397],
[435,433,439,455,0,418,468,412,475,447],
[459,463,413,469,473,0,463,439,467,431],
[469,415,401,415,423,428,0,429,466,408],
[520,473,458,464,479,452,462,0,486,440],
[433,423,416,446,416,424,425,405,0,442],
[458,494,442,494,444,460,483,451,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,400,432,413,470,437,415,398,390],
[516,0,453,504,453,523,494,437,474,497],
[491,438,0,461,455,543,492,462,455,488],
[459,387,430,0,414,468,461,425,440,438],
[478,438,436,477,0,480,476,433,447,463],
[421,368,348,423,411,0,446,378,375,396],
[454,397,399,430,415,445,0,399,404,436],
[476,454,429,466,458,513,492,0,464,468],
[493,417,436,451,444,516,487,427,0,466],
[501,394,403,453,428,495,455,423,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,419,440,426,423,442,454,410,429],
[418,0,403,422,448,460,435,441,415,423],
[472,488,0,415,443,406,438,464,422,401],
[451,469,476,0,472,460,441,449,447,463],
[465,443,448,419,0,400,434,463,408,403],
[468,431,485,431,491,0,463,487,441,442],
[449,456,453,450,457,428,0,488,427,415],
[437,450,427,442,428,404,403,0,432,411],
[481,476,469,444,483,450,464,459,0,443],
[462,468,490,428,488,449,476,480,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,508,352,450,431,463,488,539,487],
[409,0,437,346,478,429,502,486,532,489],
[383,454,0,381,402,390,425,420,441,377],
[539,545,510,0,465,495,512,506,557,442],
[441,413,489,426,0,448,495,449,470,436],
[460,462,501,396,443,0,452,558,546,438],
[428,389,466,379,396,439,0,510,505,435],
[403,405,471,385,442,333,381,0,455,399],
[352,359,450,334,421,345,386,436,0,350],
[404,402,514,449,455,453,456,492,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,418,457,461,456,467,461,473,452],
[439,0,424,477,468,472,452,432,495,434],
[473,467,0,484,448,443,467,482,477,442],
[434,414,407,0,417,416,457,432,445,414],
[430,423,443,474,0,464,470,452,463,440],
[435,419,448,475,427,0,445,444,463,423],
[424,439,424,434,421,446,0,397,457,413],
[430,459,409,459,439,447,494,0,470,441],
[418,396,414,446,428,428,434,421,0,437],
[439,457,449,477,451,468,478,450,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,430,423,384,438,413,372,416,405],
[432,0,418,416,397,477,426,409,409,441],
[461,473,0,491,424,465,460,455,475,439],
[468,475,400,0,404,492,401,485,458,470],
[507,494,467,487,0,506,432,476,466,427],
[453,414,426,399,385,0,414,464,439,432],
[478,465,431,490,459,477,0,485,460,474],
[519,482,436,406,415,427,406,0,419,471],
[475,482,416,433,425,452,431,472,0,442],
[486,450,452,421,464,459,417,420,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,442,437,439,466,461,454,431,452],
[453,0,448,496,492,454,501,489,471,428],
[449,443,0,481,453,441,460,442,426,431],
[454,395,410,0,430,447,439,435,428,425],
[452,399,438,461,0,420,463,440,440,423],
[425,437,450,444,471,0,452,443,434,422],
[430,390,431,452,428,439,0,432,436,415],
[437,402,449,456,451,448,459,0,440,436],
[460,420,465,463,451,457,455,451,0,419],
[439,463,460,466,468,469,476,455,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,451,472,479,516,437,519,485,523],
[420,0,439,439,488,453,416,459,427,448],
[440,452,0,445,457,458,452,492,466,466],
[419,452,446,0,447,463,414,498,448,470],
[412,403,434,444,0,442,406,455,435,462],
[375,438,433,428,449,0,405,428,421,433],
[454,475,439,477,485,486,0,493,467,459],
[372,432,399,393,436,463,398,0,394,441],
[406,464,425,443,456,470,424,497,0,471],
[368,443,425,421,429,458,432,450,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,440,429,419,427,472,444,434,452],
[466,0,431,438,448,434,479,439,459,455],
[451,460,0,437,452,443,482,470,428,449],
[462,453,454,0,436,446,491,475,454,475],
[472,443,439,455,0,470,465,456,460,467],
[464,457,448,445,421,0,480,432,448,441],
[419,412,409,400,426,411,0,453,407,422],
[447,452,421,416,435,459,438,0,434,433],
[457,432,463,437,431,443,484,457,0,448],
[439,436,442,416,424,450,469,458,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,474,487,460,454,484,443,469,476],
[405,0,470,442,431,405,450,428,454,437],
[417,421,0,457,448,428,465,441,440,463],
[404,449,434,0,458,400,419,434,445,480],
[431,460,443,433,0,437,482,430,451,461],
[437,486,463,491,454,0,482,469,469,491],
[407,441,426,472,409,409,0,408,445,472],
[448,463,450,457,461,422,483,0,442,475],
[422,437,451,446,440,422,446,449,0,471],
[415,454,428,411,430,400,419,416,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,403,396,395,370,371,479,390,383],
[502,0,507,471,471,440,449,511,504,494],
[488,384,0,342,457,355,392,471,397,400],
[495,420,549,0,500,450,471,529,488,480],
[496,420,434,391,0,389,443,498,436,423],
[521,451,536,441,502,0,449,514,475,463],
[520,442,499,420,448,442,0,551,459,466],
[412,380,420,362,393,377,340,0,384,390],
[501,387,494,403,455,416,432,507,0,472],
[508,397,491,411,468,428,425,501,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,480,475,497,490,451,467,432,510],
[426,0,446,476,475,505,482,435,488,497],
[411,445,0,426,462,421,450,442,414,458],
[416,415,465,0,450,475,464,406,420,510],
[394,416,429,441,0,454,402,463,458,480],
[401,386,470,416,437,0,396,384,423,442],
[440,409,441,427,489,495,0,449,451,498],
[424,456,449,485,428,507,442,0,487,505],
[459,403,477,471,433,468,440,404,0,473],
[381,394,433,381,411,449,393,386,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,463,465,431,436,461,437,442],
[452,0,440,448,469,447,425,450,441,452],
[445,451,0,454,469,454,446,472,445,451],
[428,443,437,0,458,442,433,442,452,440],
[426,422,422,433,0,432,432,432,430,430],
[460,444,437,449,459,0,443,445,461,448],
[455,466,445,458,459,448,0,461,455,453],
[430,441,419,449,459,446,430,0,417,444],
[454,450,446,439,461,430,436,474,0,453],
[449,439,440,451,461,443,438,447,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,452,485,439,458,452,432,464,448],
[414,0,440,432,436,416,435,415,435,427],
[439,451,0,467,456,433,434,428,459,446],
[406,459,424,0,454,442,442,427,439,441],
[452,455,435,437,0,442,459,428,446,480],
[433,475,458,449,449,0,471,401,451,458],
[439,456,457,449,432,420,0,447,457,448],
[459,476,463,464,463,490,444,0,471,491],
[427,456,432,452,445,440,434,420,0,463],
[443,464,445,450,411,433,443,400,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,441,461,470,455,441,446,469,443],
[428,0,438,409,458,417,441,421,439,455],
[450,453,0,429,437,444,452,445,442,448],
[430,482,462,0,463,445,457,464,438,453],
[421,433,454,428,0,455,460,441,433,439],
[436,474,447,446,436,0,468,445,460,450],
[450,450,439,434,431,423,0,462,452,460],
[445,470,446,427,450,446,429,0,441,448],
[422,452,449,453,458,431,439,450,0,416],
[448,436,443,438,452,441,431,443,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,424,420,430,435,443,453,454,443],
[443,0,453,442,451,446,458,470,459,454],
[467,438,0,437,437,459,440,473,446,455],
[471,449,454,0,456,433,445,457,463,470],
[461,440,454,435,0,450,456,460,457,462],
[456,445,432,458,441,0,441,450,453,463],
[448,433,451,446,435,450,0,453,455,440],
[438,421,418,434,431,441,438,0,428,444],
[437,432,445,428,434,438,436,463,0,457],
[448,437,436,421,429,428,451,447,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,492,505,424,490,501,461,476,435],
[424,0,455,493,420,460,475,436,453,444],
[399,436,0,465,414,441,461,411,428,412],
[386,398,426,0,395,455,438,420,419,391],
[467,471,477,496,0,464,454,476,440,452],
[401,431,450,436,427,0,453,423,392,429],
[390,416,430,453,437,438,0,408,386,411],
[430,455,480,471,415,468,483,0,449,455],
[415,438,463,472,451,499,505,442,0,464],
[456,447,479,500,439,462,480,436,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,421,394,369,435,404,370,362,442],
[449,0,433,423,421,475,411,383,394,457],
[470,458,0,417,438,462,445,417,414,486],
[497,468,474,0,479,510,448,445,457,537],
[522,470,453,412,0,492,453,405,441,494],
[456,416,429,381,399,0,412,375,374,439],
[487,480,446,443,438,479,0,440,433,507],
[521,508,474,446,486,516,451,0,431,481],
[529,497,477,434,450,517,458,460,0,486],
[449,434,405,354,397,452,384,410,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,414,430,443,430,447,448,416,431],
[439,0,429,421,435,442,424,440,427,400],
[477,462,0,453,440,453,455,453,450,432],
[461,470,438,0,451,441,474,450,440,437],
[448,456,451,440,0,457,455,452,453,444],
[461,449,438,450,434,0,451,438,421,446],
[444,467,436,417,436,440,0,455,433,428],
[443,451,438,441,439,453,436,0,431,452],
[475,464,441,451,438,470,458,460,0,452],
[460,491,459,454,447,445,463,439,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,459,450,442,432,462,466,502,462],
[443,0,461,470,449,459,465,463,495,466],
[432,430,0,478,445,445,453,490,465,441],
[441,421,413,0,446,428,443,456,465,444],
[449,442,446,445,0,442,447,463,467,477],
[459,432,446,463,449,0,435,465,472,452],
[429,426,438,448,444,456,0,464,479,464],
[425,428,401,435,428,426,427,0,441,429],
[389,396,426,426,424,419,412,450,0,429],
[429,425,450,447,414,439,427,462,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,433,411,423,410,410,411,451,440],
[434,0,424,409,391,422,421,416,446,413],
[458,467,0,417,438,438,424,461,455,446],
[480,482,474,0,433,467,449,479,483,462],
[468,500,453,458,0,454,442,457,468,467],
[481,469,453,424,437,0,417,447,434,437],
[481,470,467,442,449,474,0,455,432,452],
[480,475,430,412,434,444,436,0,456,482],
[440,445,436,408,423,457,459,435,0,435],
[451,478,445,429,424,454,439,409,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,449,435,449,450,444,464,433,447],
[453,0,464,435,439,453,436,462,441,449],
[442,427,0,419,433,437,435,461,442,440],
[456,456,472,0,454,448,456,488,446,441],
[442,452,458,437,0,463,451,471,456,455],
[441,438,454,443,428,0,448,465,453,446],
[447,455,456,435,440,443,0,466,441,443],
[427,429,430,403,420,426,425,0,397,432],
[458,450,449,445,435,438,450,494,0,445],
[444,442,451,450,436,445,448,459,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,447,466,422,459,464,435,443,450],
[428,0,436,412,427,425,448,441,455,445],
[444,455,0,458,455,447,463,443,459,463],
[425,479,433,0,452,451,464,445,453,430],
[469,464,436,439,0,472,456,435,469,443],
[432,466,444,440,419,0,465,433,469,446],
[427,443,428,427,435,426,0,436,464,430],
[456,450,448,446,456,458,455,0,445,455],
[448,436,432,438,422,422,427,446,0,446],
[441,446,428,461,448,445,461,436,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,462,454,483,457,456,469,500,440],
[429,0,498,485,447,484,475,479,484,519],
[429,393,0,404,479,430,409,464,427,451],
[437,406,487,0,468,438,451,453,492,490],
[408,444,412,423,0,433,399,449,462,430],
[434,407,461,453,458,0,439,439,466,431],
[435,416,482,440,492,452,0,447,521,455],
[422,412,427,438,442,452,444,0,466,423],
[391,407,464,399,429,425,370,425,0,394],
[451,372,440,401,461,460,436,468,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,495,439,461,457,485,461,439,459],
[430,0,490,465,477,473,476,426,446,474],
[396,401,0,448,470,468,464,434,430,483],
[452,426,443,0,452,466,475,427,449,443],
[430,414,421,439,0,457,468,426,420,447],
[434,418,423,425,434,0,458,449,410,453],
[406,415,427,416,423,433,0,423,410,449],
[430,465,457,464,465,442,468,0,432,444],
[452,445,461,442,471,481,481,459,0,471],
[432,417,408,448,444,438,442,447,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,410,434,437,448,425,428,454,433],
[457,0,441,448,420,438,418,424,446,433],
[481,450,0,459,432,464,443,445,463,464],
[457,443,432,0,425,435,418,436,434,408],
[454,471,459,466,0,442,460,469,458,465],
[443,453,427,456,449,0,439,466,476,444],
[466,473,448,473,431,452,0,466,469,464],
[463,467,446,455,422,425,425,0,456,464],
[437,445,428,457,433,415,422,435,0,422],
[458,458,427,483,426,447,427,427,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,468,445,450,497,468,462,467],
[443,0,415,425,421,439,477,431,453,467],
[435,476,0,444,459,457,463,466,464,465],
[423,466,447,0,446,436,450,438,437,459],
[446,470,432,445,0,437,453,460,449,469],
[441,452,434,455,454,0,454,478,455,455],
[394,414,428,441,438,437,0,435,421,437],
[423,460,425,453,431,413,456,0,439,471],
[429,438,427,454,442,436,470,452,0,429],
[424,424,426,432,422,436,454,420,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,445,458,459,478,442,473,457,453],
[438,0,420,428,444,453,428,468,435,433],
[446,471,0,440,451,462,421,455,436,445],
[433,463,451,0,463,472,445,479,464,457],
[432,447,440,428,0,440,429,467,439,441],
[413,438,429,419,451,0,420,476,432,421],
[449,463,470,446,462,471,0,483,433,464],
[418,423,436,412,424,415,408,0,425,405],
[434,456,455,427,452,459,458,466,0,434],
[438,458,446,434,450,470,427,486,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,509,479,427,456,510,460,421,440],
[417,0,466,474,415,428,470,444,439,413],
[382,425,0,432,389,420,456,401,375,446],
[412,417,459,0,413,372,419,446,420,423],
[464,476,502,478,0,408,459,448,470,464],
[435,463,471,519,483,0,531,467,443,508],
[381,421,435,472,432,360,0,436,412,398],
[431,447,490,445,443,424,455,0,390,447],
[470,452,516,471,421,448,479,501,0,449],
[451,478,445,468,427,383,493,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,430,448,451,441,453,429,446,463],
[460,0,473,464,460,468,466,445,459,449],
[461,418,0,435,433,459,427,414,437,444],
[443,427,456,0,432,458,458,429,442,491],
[440,431,458,459,0,468,474,456,446,460],
[450,423,432,433,423,0,454,418,433,447],
[438,425,464,433,417,437,0,408,446,450],
[462,446,477,462,435,473,483,0,472,462],
[445,432,454,449,445,458,445,419,0,466],
[428,442,447,400,431,444,441,429,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,452,447,437,474,382,443,416,428],
[458,0,456,479,407,446,399,440,459,484],
[439,435,0,445,383,428,413,424,409,433],
[444,412,446,0,419,456,425,481,446,462],
[454,484,508,472,0,450,463,498,426,483],
[417,445,463,435,441,0,408,452,416,425],
[509,492,478,466,428,483,0,472,463,495],
[448,451,467,410,393,439,419,0,415,497],
[475,432,482,445,465,475,428,476,0,478],
[463,407,458,429,408,466,396,394,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,680,433,451,721,674,685,630,573,568],
[211,0,406,294,521,400,467,354,484,290],
[458,485,0,314,460,472,519,366,208,366],
[440,597,577,0,492,627,626,334,313,378],
[170,370,431,399,0,479,444,357,429,486],
[217,491,419,264,412,0,492,367,294,448],
[206,424,372,265,447,399,0,327,326,441],
[261,537,525,557,534,524,564,0,573,659],
[318,407,683,578,462,597,565,318,0,424],
[323,601,525,513,405,443,450,232,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,428,438,456,434,443,446,462,435],
[443,0,436,443,457,449,461,514,481,467],
[463,455,0,431,429,418,435,454,457,441],
[453,448,460,0,442,440,454,483,457,467],
[435,434,462,449,0,445,477,475,455,447],
[457,442,473,451,446,0,442,467,459,449],
[448,430,456,437,414,449,0,476,449,450],
[445,377,437,408,416,424,415,0,437,420],
[429,410,434,434,436,432,442,454,0,427],
[456,424,450,424,444,442,441,471,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,448,460,440,461,444,474,458,463],
[441,0,458,455,437,464,430,472,448,462],
[443,433,0,435,431,432,429,475,436,437],
[431,436,456,0,438,426,413,457,458,441],
[451,454,460,453,0,450,461,473,473,437],
[430,427,459,465,441,0,438,471,469,445],
[447,461,462,478,430,453,0,474,481,451],
[417,419,416,434,418,420,417,0,441,416],
[433,443,455,433,418,422,410,450,0,424],
[428,429,454,450,454,446,440,475,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,441,456,473,447,441,440,460,435],
[439,0,454,457,478,436,457,434,475,454],
[450,437,0,431,471,423,452,414,463,431],
[435,434,460,0,480,399,433,432,424,434],
[418,413,420,411,0,423,416,413,398,388],
[444,455,468,492,468,0,478,435,456,474],
[450,434,439,458,475,413,0,424,438,410],
[451,457,477,459,478,456,467,0,441,477],
[431,416,428,467,493,435,453,450,0,456],
[456,437,460,457,503,417,481,414,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,447,440,438,460,453,430,441,452],
[448,0,463,428,438,461,447,435,453,467],
[444,428,0,436,448,457,427,418,449,451],
[451,463,455,0,445,461,441,446,460,438],
[453,453,443,446,0,443,441,421,472,456],
[431,430,434,430,448,0,423,425,439,448],
[438,444,464,450,450,468,0,454,473,463],
[461,456,473,445,470,466,437,0,462,454],
[450,438,442,431,419,452,418,429,0,443],
[439,424,440,453,435,443,428,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,418,422,490,436,444,393,410,454],
[456,0,409,401,452,420,413,417,394,437],
[473,482,0,446,436,451,412,390,443,496],
[469,490,445,0,459,488,427,413,416,465],
[401,439,455,432,0,427,419,388,367,442],
[455,471,440,403,464,0,447,444,430,461],
[447,478,479,464,472,444,0,398,482,461],
[498,474,501,478,503,447,493,0,441,526],
[481,497,448,475,524,461,409,450,0,471],
[437,454,395,426,449,430,430,365,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,446,439,430,438,419,441,429,436],
[424,0,437,435,416,400,420,420,421,411],
[445,454,0,454,447,421,434,449,422,428],
[452,456,437,0,419,426,446,458,431,431],
[461,475,444,472,0,434,451,483,456,446],
[453,491,470,465,457,0,441,466,435,446],
[472,471,457,445,440,450,0,460,444,424],
[450,471,442,433,408,425,431,0,438,427],
[462,470,469,460,435,456,447,453,0,436],
[455,480,463,460,445,445,467,464,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,449,402,395,425,423,414,438,400],
[449,0,451,429,387,413,432,400,425,420],
[442,440,0,450,442,445,400,440,452,421],
[489,462,441,0,420,464,463,475,470,457],
[496,504,449,471,0,434,459,440,490,460],
[466,478,446,427,457,0,456,442,442,472],
[468,459,491,428,432,435,0,438,444,471],
[477,491,451,416,451,449,453,0,457,432],
[453,466,439,421,401,449,447,434,0,423],
[491,471,470,434,431,419,420,459,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,433,454,458,431,438,439,456,441],
[439,0,443,454,446,446,425,426,433,426],
[458,448,0,462,474,449,437,443,449,436],
[437,437,429,0,444,416,431,430,462,416],
[433,445,417,447,0,425,437,420,421,428],
[460,445,442,475,466,0,443,432,448,438],
[453,466,454,460,454,448,0,445,442,444],
[452,465,448,461,471,459,446,0,443,453],
[435,458,442,429,470,443,449,448,0,432],
[450,465,455,475,463,453,447,438,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,468,449,447,442,465,449,476,456],
[456,0,455,454,457,448,470,452,464,445],
[423,436,0,442,438,457,433,460,453,446],
[442,437,449,0,454,446,451,450,456,450],
[444,434,453,437,0,432,469,446,443,439],
[449,443,434,445,459,0,433,468,470,440],
[426,421,458,440,422,458,0,443,437,438],
[442,439,431,441,445,423,448,0,457,444],
[415,427,438,435,448,421,454,434,0,436],
[435,446,445,441,452,451,453,447,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,428,466,439,457,431,458,432,439],
[447,0,425,446,440,458,440,425,426,419],
[463,466,0,470,426,494,424,450,454,447],
[425,445,421,0,426,438,409,405,416,427],
[452,451,465,465,0,465,429,438,445,442],
[434,433,397,453,426,0,421,428,420,418],
[460,451,467,482,462,470,0,440,461,449],
[433,466,441,486,453,463,451,0,429,440],
[459,465,437,475,446,471,430,462,0,450],
[452,472,444,464,449,473,442,451,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,449,439,444,398,477,406,452,433],
[428,0,455,443,463,424,485,416,439,445],
[442,436,0,437,418,403,460,433,426,415],
[452,448,454,0,425,439,478,434,430,427],
[447,428,473,466,0,446,478,413,437,439],
[493,467,488,452,445,0,485,448,450,450],
[414,406,431,413,413,406,0,408,411,450],
[485,475,458,457,478,443,483,0,461,480],
[439,452,465,461,454,441,480,430,0,442],
[458,446,476,464,452,441,441,411,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,420,458,461,433,422,462,470,445],
[477,0,452,418,472,454,453,456,500,430],
[471,439,0,459,494,456,419,458,465,460],
[433,473,432,0,510,427,449,474,479,445],
[430,419,397,381,0,433,427,460,464,414],
[458,437,435,464,458,0,428,462,475,454],
[469,438,472,442,464,463,0,452,485,468],
[429,435,433,417,431,429,439,0,468,405],
[421,391,426,412,427,416,406,423,0,407],
[446,461,431,446,477,437,423,486,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,420,442,429,420,444,418,448,418],
[461,0,441,468,431,455,461,438,458,442],
[471,450,0,454,454,448,442,465,448,435],
[449,423,437,0,422,427,445,443,444,452],
[462,460,437,469,0,461,453,449,458,451],
[471,436,443,464,430,0,447,457,445,420],
[447,430,449,446,438,444,0,441,451,438],
[473,453,426,448,442,434,450,0,448,439],
[443,433,443,447,433,446,440,443,0,410],
[473,449,456,439,440,471,453,452,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,468,439,462,401,484,495,387,477],
[432,0,504,479,475,435,499,517,446,507],
[423,387,0,439,467,387,483,425,407,406],
[452,412,452,0,446,387,478,437,403,427],
[429,416,424,445,0,388,459,437,372,438],
[490,456,504,504,503,0,521,508,441,479],
[407,392,408,413,432,370,0,431,364,398],
[396,374,466,454,454,383,460,0,392,419],
[504,445,484,488,519,450,527,499,0,512],
[414,384,485,464,453,412,493,472,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,445,432,453,436,434,444,434,456],
[444,0,447,434,463,460,456,458,430,459],
[446,444,0,442,449,459,435,444,441,459],
[459,457,449,0,462,446,442,446,449,439],
[438,428,442,429,0,442,440,426,429,436],
[455,431,432,445,449,0,450,449,454,452],
[457,435,456,449,451,441,0,447,440,448],
[447,433,447,445,465,442,444,0,446,445],
[457,461,450,442,462,437,451,445,0,463],
[435,432,432,452,455,439,443,446,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,465,483,450,477,442,437,452,455],
[416,0,434,429,426,419,435,420,442,422],
[426,457,0,453,428,441,428,434,446,427],
[408,462,438,0,434,415,426,419,432,463],
[441,465,463,457,0,437,447,455,449,457],
[414,472,450,476,454,0,445,432,460,470],
[449,456,463,465,444,446,0,432,461,461],
[454,471,457,472,436,459,459,0,452,448],
[439,449,445,459,442,431,430,439,0,439],
[436,469,464,428,434,421,430,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,445,416,448,431,501,468,433,512],
[443,0,436,476,490,477,524,560,508,515],
[446,455,0,445,450,503,462,492,438,452],
[475,415,446,0,517,431,486,521,510,507],
[443,401,441,374,0,503,537,483,461,500],
[460,414,388,460,388,0,514,463,512,481],
[390,367,429,405,354,377,0,510,378,463],
[423,331,399,370,408,428,381,0,445,450],
[458,383,453,381,430,379,513,446,0,493],
[379,376,439,384,391,410,428,441,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,488,470,454,443,470,455,463,482],
[436,0,461,470,461,436,468,456,455,449],
[403,430,0,433,408,418,441,433,412,437],
[421,421,458,0,426,447,464,441,436,437],
[437,430,483,465,0,436,481,451,450,464],
[448,455,473,444,455,0,460,458,456,460],
[421,423,450,427,410,431,0,434,436,432],
[436,435,458,450,440,433,457,0,434,461],
[428,436,479,455,441,435,455,457,0,447],
[409,442,454,454,427,431,459,430,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,460,429,485,457,482,578,434,535],
[425,0,437,495,419,405,481,513,499,452],
[431,454,0,399,365,374,445,487,428,420],
[462,396,492,0,285,422,470,360,396,332],
[406,472,526,606,0,445,477,587,522,509],
[434,486,517,469,446,0,529,500,508,537],
[409,410,446,421,414,362,0,371,461,369],
[313,378,404,531,304,391,520,0,439,360],
[457,392,463,495,369,383,430,452,0,512],
[356,439,471,559,382,354,522,531,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,431,436,440,434,470,442,452,453],
[430,0,421,420,432,430,461,447,431,442],
[460,470,0,454,452,437,468,464,447,453],
[455,471,437,0,450,460,477,459,456,452],
[451,459,439,441,0,430,465,474,449,446],
[457,461,454,431,461,0,459,466,464,454],
[421,430,423,414,426,432,0,440,437,430],
[449,444,427,432,417,425,451,0,430,436],
[439,460,444,435,442,427,454,461,0,452],
[438,449,438,439,445,437,461,455,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,445,431,432,439,430,437,454,417],
[438,0,440,426,426,437,447,430,465,427],
[446,451,0,436,427,445,443,440,463,452],
[460,465,455,0,457,463,464,443,473,444],
[459,465,464,434,0,454,450,453,474,448],
[452,454,446,428,437,0,449,452,466,449],
[461,444,448,427,441,442,0,434,446,448],
[454,461,451,448,438,439,457,0,468,460],
[437,426,428,418,417,425,445,423,0,431],
[474,464,439,447,443,442,443,431,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,351,471,448,344,411,384,466,432],
[519,0,403,488,425,458,436,422,519,482],
[540,488,0,520,507,442,395,480,515,462],
[420,403,371,0,392,444,392,437,422,418],
[443,466,384,499,0,430,433,479,481,479],
[547,433,449,447,461,0,461,520,512,445],
[480,455,496,499,458,430,0,493,500,473],
[507,469,411,454,412,371,398,0,451,456],
[425,372,376,469,410,379,391,440,0,368],
[459,409,429,473,412,446,418,435,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,444,405,415,408,413,444,451,427],
[448,0,439,445,425,448,435,415,443,410],
[447,452,0,447,425,442,438,414,431,414],
[486,446,444,0,430,460,462,436,462,440],
[476,466,466,461,0,442,483,491,469,447],
[483,443,449,431,449,0,418,463,450,414],
[478,456,453,429,408,473,0,449,459,444],
[447,476,477,455,400,428,442,0,436,459],
[440,448,460,429,422,441,432,455,0,428],
[464,481,477,451,444,477,447,432,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,409,472,451,454,449,430,422,435],
[451,0,384,437,430,429,440,450,435,428],
[482,507,0,435,477,468,463,436,478,472],
[419,454,456,0,438,428,426,426,465,396],
[440,461,414,453,0,465,420,423,477,461],
[437,462,423,463,426,0,409,448,460,427],
[442,451,428,465,471,482,0,423,477,452],
[461,441,455,465,468,443,468,0,457,483],
[469,456,413,426,414,431,414,434,0,425],
[456,463,419,495,430,464,439,408,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,523,417,501,649,580,422,464,438],
[389,0,497,419,455,443,418,350,373,408],
[368,394,0,375,487,466,444,411,382,467],
[474,472,516,0,437,624,429,477,364,530],
[390,436,404,454,0,509,444,322,390,427],
[242,448,425,267,382,0,395,421,353,348],
[311,473,447,462,447,496,0,387,420,366],
[469,541,480,414,569,470,504,0,380,461],
[427,518,509,527,501,538,471,511,0,494],
[453,483,424,361,464,543,525,430,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,450,441,454,457,447,458,451,449],
[450,0,456,440,437,434,442,448,460,444],
[441,435,0,438,427,435,433,432,457,430],
[450,451,453,0,444,441,447,457,453,452],
[437,454,464,447,0,445,431,443,462,463],
[434,457,456,450,446,0,456,436,467,446],
[444,449,458,444,460,435,0,434,453,435],
[433,443,459,434,448,455,457,0,460,446],
[440,431,434,438,429,424,438,431,0,440],
[442,447,461,439,428,445,456,445,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,510,462,502,419,477,473,471,463],
[424,0,463,446,455,389,428,447,440,426],
[381,428,0,444,467,388,372,420,405,397],
[429,445,447,0,478,426,461,448,445,444],
[389,436,424,413,0,370,418,447,413,393],
[472,502,503,465,521,0,479,437,449,459],
[414,463,519,430,473,412,0,423,432,473],
[418,444,471,443,444,454,468,0,483,459],
[420,451,486,446,478,442,459,408,0,448],
[428,465,494,447,498,432,418,432,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,451,460,434,463,474,468,462,461],
[435,0,448,464,451,429,454,452,457,469],
[440,443,0,446,448,445,449,453,434,447],
[431,427,445,0,420,450,433,439,438,431],
[457,440,443,471,0,445,462,440,453,456],
[428,462,446,441,446,0,476,447,455,444],
[417,437,442,458,429,415,0,435,439,442],
[423,439,438,452,451,444,456,0,432,442],
[429,434,457,453,438,436,452,459,0,452],
[430,422,444,460,435,447,449,449,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,472,444,432,463,453,435,435,457],
[437,0,456,447,429,466,440,434,435,454],
[419,435,0,433,411,447,444,415,424,424],
[447,444,458,0,434,461,449,429,441,442],
[459,462,480,457,0,471,451,433,454,461],
[428,425,444,430,420,0,426,408,441,431],
[438,451,447,442,440,465,0,414,441,449],
[456,457,476,462,458,483,477,0,441,476],
[456,456,467,450,437,450,450,450,0,440],
[434,437,467,449,430,460,442,415,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,441,446,447,456,444,462,475,398],
[460,0,442,438,415,414,414,431,479,443],
[450,449,0,410,421,439,466,437,466,454],
[445,453,481,0,457,416,462,481,464,437],
[444,476,470,434,0,446,464,469,461,423],
[435,477,452,475,445,0,443,430,437,413],
[447,477,425,429,427,448,0,449,420,388],
[429,460,454,410,422,461,442,0,448,422],
[416,412,425,427,430,454,471,443,0,430],
[493,448,437,454,468,478,503,469,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,477,462,466,498,435,466,458,428],
[421,0,436,436,444,478,435,458,444,447],
[414,455,0,462,461,474,454,489,451,442],
[429,455,429,0,446,473,437,456,423,420],
[425,447,430,445,0,449,432,465,460,440],
[393,413,417,418,442,0,431,458,401,419],
[456,456,437,454,459,460,0,475,463,443],
[425,433,402,435,426,433,416,0,415,406],
[433,447,440,468,431,490,428,476,0,443],
[463,444,449,471,451,472,448,485,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,414,470,506,438,373,426,506,476],
[446,0,401,403,400,401,339,421,449,504],
[477,490,0,504,457,431,397,483,484,525],
[421,488,387,0,430,496,457,465,485,475],
[385,491,434,461,0,429,407,414,447,422],
[453,490,460,395,462,0,317,409,459,426],
[518,552,494,434,484,574,0,585,561,478],
[465,470,408,426,477,482,306,0,518,494],
[385,442,407,406,444,432,330,373,0,410],
[415,387,366,416,469,465,413,397,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,391,473,412,458,417,377,425,444],
[482,0,454,505,435,465,441,418,451,462],
[500,437,0,494,433,435,457,439,457,478],
[418,386,397,0,389,400,397,360,391,445],
[479,456,458,502,0,492,453,432,474,492],
[433,426,456,491,399,0,387,387,455,472],
[474,450,434,494,438,504,0,448,460,484],
[514,473,452,531,459,504,443,0,454,495],
[466,440,434,500,417,436,431,437,0,482],
[447,429,413,446,399,419,407,396,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,446,435,456,464,434,470,440,473],
[423,0,425,432,435,423,430,433,427,434],
[445,466,0,447,453,472,447,456,446,449],
[456,459,444,0,452,469,459,453,444,460],
[435,456,438,439,0,466,440,447,428,450],
[427,468,419,422,425,0,433,442,425,441],
[457,461,444,432,451,458,0,468,446,459],
[421,458,435,438,444,449,423,0,419,445],
[451,464,445,447,463,466,445,472,0,464],
[418,457,442,431,441,450,432,446,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,406,511,498,303,558,500,373,420],
[413,0,323,489,557,344,383,460,346,484],
[485,568,0,438,609,374,526,521,450,477],
[380,402,453,0,591,385,406,418,405,477],
[393,334,282,300,0,180,209,235,222,202],
[588,547,517,506,711,0,472,601,417,650],
[333,508,365,485,682,419,0,434,293,441],
[391,431,370,473,656,290,457,0,102,549],
[518,545,441,486,669,474,598,789,0,519],
[471,407,414,414,689,241,450,342,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,426,445,409,424,406,414,411,426],
[463,0,441,473,439,458,432,465,444,453],
[465,450,0,452,461,448,465,470,470,445],
[446,418,439,0,436,451,425,449,439,454],
[482,452,430,455,0,458,455,472,439,430],
[467,433,443,440,433,0,449,466,444,438],
[485,459,426,466,436,442,0,455,441,450],
[477,426,421,442,419,425,436,0,439,426],
[480,447,421,452,452,447,450,452,0,435],
[465,438,446,437,461,453,441,465,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,447,418,446,444,408,417,442,452],
[449,0,467,448,452,436,417,452,439,432],
[444,424,0,427,444,452,425,433,446,415],
[473,443,464,0,453,449,460,451,447,445],
[445,439,447,438,0,454,428,430,443,436],
[447,455,439,442,437,0,429,425,429,441],
[483,474,466,431,463,462,0,432,444,457],
[474,439,458,440,461,466,459,0,445,459],
[449,452,445,444,448,462,447,446,0,426],
[439,459,476,446,455,450,434,432,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,378,400,465,422,392,415,435,444],
[522,0,447,419,485,473,470,504,473,427],
[513,444,0,474,459,419,472,469,482,461],
[491,472,417,0,471,422,448,462,448,469],
[426,406,432,420,0,413,429,407,440,436],
[469,418,472,469,478,0,473,473,468,461],
[499,421,419,443,462,418,0,467,476,459],
[476,387,422,429,484,418,424,0,472,435],
[456,418,409,443,451,423,415,419,0,454],
[447,464,430,422,455,430,432,456,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,441,446,432,421,434,408,436],
[441,0,474,445,481,455,433,475,449,471],
[454,417,0,465,473,466,457,458,459,448],
[450,446,426,0,470,460,461,443,446,474],
[445,410,418,421,0,433,416,485,444,465],
[459,436,425,431,458,0,451,444,440,437],
[470,458,434,430,475,440,0,472,441,442],
[457,416,433,448,406,447,419,0,404,437],
[483,442,432,445,447,451,450,487,0,438],
[455,420,443,417,426,454,449,454,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,461,453,463,441,454,449,430,473],
[423,0,428,434,446,440,437,443,445,454],
[430,463,0,464,453,450,473,458,441,484],
[438,457,427,0,439,453,459,441,445,457],
[428,445,438,452,0,453,463,445,427,472],
[450,451,441,438,438,0,465,441,435,470],
[437,454,418,432,428,426,0,437,420,464],
[442,448,433,450,446,450,454,0,455,469],
[461,446,450,446,464,456,471,436,0,464],
[418,437,407,434,419,421,427,422,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,447,425,468,473,455,366,482,377],
[607,0,581,605,563,522,514,438,574,467],
[444,310,0,440,401,431,444,361,426,335],
[466,286,451,0,402,390,466,351,514,391],
[423,328,490,489,0,357,431,303,479,435],
[418,369,460,501,534,0,514,513,497,349],
[436,377,447,425,460,377,0,484,487,310],
[525,453,530,540,588,378,407,0,581,450],
[409,317,465,377,412,394,404,310,0,407],
[514,424,556,500,456,542,581,441,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,424,442,442,415,475,494,260,525],
[570,0,442,522,510,363,479,509,386,577],
[467,449,0,394,483,483,423,501,376,616],
[449,369,497,0,529,508,445,564,480,587],
[449,381,408,362,0,475,377,496,431,547],
[476,528,408,383,416,0,491,473,355,505],
[416,412,468,446,514,400,0,485,426,594],
[397,382,390,327,395,418,406,0,377,618],
[631,505,515,411,460,536,465,514,0,620],
[366,314,275,304,344,386,297,273,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,465,453,441,495,458,481,433,459],
[442,0,480,438,439,499,473,457,415,466],
[426,411,0,454,445,469,450,438,394,434],
[438,453,437,0,440,476,468,435,454,459],
[450,452,446,451,0,504,442,462,442,454],
[396,392,422,415,387,0,398,381,390,423],
[433,418,441,423,449,493,0,459,425,445],
[410,434,453,456,429,510,432,0,435,455],
[458,476,497,437,449,501,466,456,0,471],
[432,425,457,432,437,468,446,436,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,462,487,472,462,453,460,472,434],
[410,0,453,502,477,468,446,460,470,429],
[429,438,0,476,471,449,440,426,435,424],
[404,389,415,0,434,397,409,434,447,398],
[419,414,420,457,0,429,427,427,430,421],
[429,423,442,494,462,0,434,453,456,429],
[438,445,451,482,464,457,0,454,453,448],
[431,431,465,457,464,438,437,0,448,425],
[419,421,456,444,461,435,438,443,0,420],
[457,462,467,493,470,462,443,466,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,425,457,487,468,445,461,468,473],
[459,0,445,480,458,455,462,451,430,468],
[466,446,0,468,479,473,465,439,459,494],
[434,411,423,0,436,459,430,436,440,459],
[404,433,412,455,0,452,438,425,412,460],
[423,436,418,432,439,0,456,443,446,446],
[446,429,426,461,453,435,0,464,442,492],
[430,440,452,455,466,448,427,0,452,480],
[423,461,432,451,479,445,449,439,0,467],
[418,423,397,432,431,445,399,411,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,526,432,440,407,459,488,477,566],
[342,0,516,392,446,380,473,388,440,474],
[365,375,0,327,380,318,362,390,390,378],
[459,499,564,0,420,382,420,399,495,475],
[451,445,511,471,0,443,470,484,455,552],
[484,511,573,509,448,0,434,436,479,560],
[432,418,529,471,421,457,0,433,479,473],
[403,503,501,492,407,455,458,0,499,454],
[414,451,501,396,436,412,412,392,0,455],
[325,417,513,416,339,331,418,437,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,437,440,458,469,465,449,431,461],
[425,0,434,411,452,441,426,436,435,434],
[454,457,0,442,463,477,442,468,446,451],
[451,480,449,0,467,479,445,446,455,451],
[433,439,428,424,0,467,438,447,451,449],
[422,450,414,412,424,0,411,419,435,431],
[426,465,449,446,453,480,0,452,453,452],
[442,455,423,445,444,472,439,0,445,458],
[460,456,445,436,440,456,438,446,0,431],
[430,457,440,440,442,460,439,433,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,474,439,452,472,432,446,456,466],
[442,0,447,446,436,460,434,435,479,428],
[417,444,0,467,436,453,416,450,441,445],
[452,445,424,0,455,445,422,436,473,446],
[439,455,455,436,0,453,426,421,465,450],
[419,431,438,446,438,0,413,414,436,425],
[459,457,475,469,465,478,0,432,477,442],
[445,456,441,455,470,477,459,0,453,454],
[435,412,450,418,426,455,414,438,0,437],
[425,463,446,445,441,466,449,437,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,458,456,439,417,413,465,448,418],
[432,0,440,470,432,427,437,482,380,430],
[433,451,0,520,450,460,410,508,438,449],
[435,421,371,0,434,422,374,486,447,416],
[452,459,441,457,0,415,386,442,396,429],
[474,464,431,469,476,0,440,511,426,425],
[478,454,481,517,505,451,0,513,414,441],
[426,409,383,405,449,380,378,0,391,457],
[443,511,453,444,495,465,477,500,0,478],
[473,461,442,475,462,466,450,434,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,474,472,443,418,436,398,426,469],
[477,0,430,426,425,453,421,466,395,420],
[417,461,0,408,429,406,448,401,397,448],
[419,465,483,0,455,491,461,440,401,458],
[448,466,462,436,0,411,473,423,399,458],
[473,438,485,400,480,0,478,486,461,416],
[455,470,443,430,418,413,0,437,445,444],
[493,425,490,451,468,405,454,0,434,470],
[465,496,494,490,492,430,446,457,0,453],
[422,471,443,433,433,475,447,421,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,440,455,439,433,449,435,442,453],
[454,0,428,452,438,439,448,421,445,461],
[451,463,0,482,413,406,421,437,421,486],
[436,439,409,0,440,460,406,411,445,454],
[452,453,478,451,0,425,454,443,442,462],
[458,452,485,431,466,0,452,462,476,459],
[442,443,470,485,437,439,0,453,473,473],
[456,470,454,480,448,429,438,0,433,481],
[449,446,470,446,449,415,418,458,0,446],
[438,430,405,437,429,432,418,410,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,456,564,388,207,158,426,465,327],
[613,0,461,521,662,395,393,313,521,463],
[435,430,0,612,528,474,555,534,574,370],
[327,370,279,0,480,250,250,464,370,427],
[503,229,363,411,0,444,241,395,462,334],
[684,496,417,641,447,0,405,490,630,397],
[733,498,336,641,650,486,0,625,545,378],
[465,578,357,427,496,401,266,0,615,336],
[426,370,317,521,429,261,346,276,0,378],
[564,428,521,464,557,494,513,555,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,433,446,462,449,446,432,452,433],
[455,0,452,471,447,467,441,449,459,440],
[458,439,0,444,459,463,450,432,456,420],
[445,420,447,0,454,457,446,427,442,416],
[429,444,432,437,0,439,427,421,429,401],
[442,424,428,434,452,0,403,428,431,439],
[445,450,441,445,464,488,0,437,431,436],
[459,442,459,464,470,463,454,0,467,453],
[439,432,435,449,462,460,460,424,0,430],
[458,451,471,475,490,452,455,438,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,420,427,488,492,499,409,484,350],
[489,0,433,431,436,525,418,324,472,402],
[471,458,0,419,470,459,422,375,441,339],
[464,460,472,0,547,565,435,477,564,442],
[403,455,421,344,0,440,358,354,460,379],
[399,366,432,326,451,0,415,341,433,369],
[392,473,469,456,533,476,0,455,518,355],
[482,567,516,414,537,550,436,0,511,513],
[407,419,450,327,431,458,373,380,0,424],
[541,489,552,449,512,522,536,378,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,443,420,450,464,452,444,450,459],
[438,0,465,447,442,460,458,455,460,463],
[448,426,0,445,457,470,441,451,454,470],
[471,444,446,0,461,453,461,446,460,463],
[441,449,434,430,0,456,444,468,435,457],
[427,431,421,438,435,0,418,422,426,455],
[439,433,450,430,447,473,0,447,419,444],
[447,436,440,445,423,469,444,0,444,463],
[441,431,437,431,456,465,472,447,0,458],
[432,428,421,428,434,436,447,428,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,458,414,437,425,430,436,436,433],
[472,0,467,453,450,466,465,466,466,440],
[433,424,0,430,437,427,441,450,417,429],
[477,438,461,0,446,458,447,476,467,456],
[454,441,454,445,0,455,465,443,459,437],
[466,425,464,433,436,0,456,449,441,443],
[461,426,450,444,426,435,0,432,455,427],
[455,425,441,415,448,442,459,0,436,448],
[455,425,474,424,432,450,436,455,0,425],
[458,451,462,435,454,448,464,443,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,426,447,426,430,445,404,439,431],
[438,0,437,435,462,445,466,427,432,422],
[465,454,0,423,479,437,477,439,454,433],
[444,456,468,0,460,477,460,472,451,451],
[465,429,412,431,0,418,434,445,423,403],
[461,446,454,414,473,0,474,441,460,415],
[446,425,414,431,457,417,0,415,438,379],
[487,464,452,419,446,450,476,0,443,413],
[452,459,437,440,468,431,453,448,0,435],
[460,469,458,440,488,476,512,478,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,474,498,482,458,476,458,458,456],
[449,0,430,473,461,447,462,427,436,458],
[417,461,0,473,449,439,449,432,436,449],
[393,418,418,0,432,407,414,408,411,406],
[409,430,442,459,0,460,437,429,425,435],
[433,444,452,484,431,0,449,426,444,451],
[415,429,442,477,454,442,0,446,430,435],
[433,464,459,483,462,465,445,0,460,456],
[433,455,455,480,466,447,461,431,0,429],
[435,433,442,485,456,440,456,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,353,410,401,424,366,443,385,343],
[511,0,453,467,466,498,465,502,442,442],
[538,438,0,464,500,479,475,478,486,483],
[481,424,427,0,397,471,420,493,411,403],
[490,425,391,494,0,500,430,457,428,401],
[467,393,412,420,391,0,395,428,379,406],
[525,426,416,471,461,496,0,480,398,407],
[448,389,413,398,434,463,411,0,368,399],
[506,449,405,480,463,512,493,523,0,434],
[548,449,408,488,490,485,484,492,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,419,485,468,442,464,463,419,467],
[477,0,409,516,447,438,450,440,448,450],
[472,482,0,502,442,442,433,434,425,478],
[406,375,389,0,413,350,434,450,408,419],
[423,444,449,478,0,436,447,460,395,422],
[449,453,449,541,455,0,423,462,468,434],
[427,441,458,457,444,468,0,471,473,470],
[428,451,457,441,431,429,420,0,470,453],
[472,443,466,483,496,423,418,421,0,529],
[424,441,413,472,469,457,421,438,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,451,438,447,450,443,449,407,431],
[470,0,472,456,465,461,480,454,432,458],
[440,419,0,435,443,445,437,424,435,435],
[453,435,456,0,476,455,466,445,449,440],
[444,426,448,415,0,454,436,416,439,435],
[441,430,446,436,437,0,440,418,430,437],
[448,411,454,425,455,451,0,443,415,446],
[442,437,467,446,475,473,448,0,433,438],
[484,459,456,442,452,461,476,458,0,435],
[460,433,456,451,456,454,445,453,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,485,480,485,487,482,458,496,482],
[468,0,435,451,485,490,462,469,511,496],
[406,456,0,430,457,459,433,436,469,465],
[411,440,461,0,479,506,442,429,472,443],
[406,406,434,412,0,440,429,449,452,476],
[404,401,432,385,451,0,391,421,445,425],
[409,429,458,449,462,500,0,487,490,482],
[433,422,455,462,442,470,404,0,470,433],
[395,380,422,419,439,446,401,421,0,431],
[409,395,426,448,415,466,409,458,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,491,421,449,467,427,490,484,467],
[425,0,486,426,441,434,501,481,477,477],
[400,405,0,400,431,425,335,403,432,409],
[470,465,491,0,488,449,441,450,483,463],
[442,450,460,403,0,484,437,447,473,435],
[424,457,466,442,407,0,451,468,490,412],
[464,390,556,450,454,440,0,432,417,433],
[401,410,488,441,444,423,459,0,431,489],
[407,414,459,408,418,401,474,460,0,467],
[424,414,482,428,456,479,458,402,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,447,436,460,456,446,474,443,445],
[461,0,464,454,462,478,440,487,463,467],
[444,427,0,450,421,468,428,461,437,430],
[455,437,441,0,452,474,466,473,463,451],
[431,429,470,439,0,447,442,481,437,432],
[435,413,423,417,444,0,446,440,445,442],
[445,451,463,425,449,445,0,438,436,462],
[417,404,430,418,410,451,453,0,433,429],
[448,428,454,428,454,446,455,458,0,466],
[446,424,461,440,459,449,429,462,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,461,341,470,536,438,424,476,467],
[533,0,621,394,537,373,517,544,562,627],
[430,270,0,307,425,288,357,429,473,502],
[550,497,584,0,491,577,418,505,530,614],
[421,354,466,400,0,464,337,352,478,479],
[355,518,603,314,427,0,385,506,372,458],
[453,374,534,473,554,506,0,521,500,493],
[467,347,462,386,539,385,370,0,460,420],
[415,329,418,361,413,519,391,431,0,407],
[424,264,389,277,412,433,398,471,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,428,456,474,455,438,473,438,445],
[448,0,421,484,461,452,451,445,433,455],
[463,470,0,481,487,460,459,445,454,456],
[435,407,410,0,463,456,436,445,441,425],
[417,430,404,428,0,421,448,434,430,428],
[436,439,431,435,470,0,455,450,446,462],
[453,440,432,455,443,436,0,437,433,441],
[418,446,446,446,457,441,454,0,444,460],
[453,458,437,450,461,445,458,447,0,456],
[446,436,435,466,463,429,450,431,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,469,347,358,383,370,359,413,408],
[423,0,510,442,445,451,432,450,459,444],
[422,381,0,415,362,409,419,352,382,456],
[544,449,476,0,406,437,445,366,421,464],
[533,446,529,485,0,440,427,446,446,467],
[508,440,482,454,451,0,485,433,396,471],
[521,459,472,446,464,406,0,425,444,394],
[532,441,539,525,445,458,466,0,457,469],
[478,432,509,470,445,495,447,434,0,455],
[483,447,435,427,424,420,497,422,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,438,429,445,410,428,458,436,444],
[443,0,441,450,479,473,422,453,459,449],
[453,450,0,438,462,420,432,462,452,463],
[462,441,453,0,459,435,446,449,454,443],
[446,412,429,432,0,393,385,453,433,447],
[481,418,471,456,498,0,432,448,468,483],
[463,469,459,445,506,459,0,469,470,473],
[433,438,429,442,438,443,422,0,471,474],
[455,432,439,437,458,423,421,420,0,428],
[447,442,428,448,444,408,418,417,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,385,468,399,426,451,368,389,392],
[492,0,473,470,464,505,443,453,439,438],
[506,418,0,517,444,491,477,497,474,414],
[423,421,374,0,407,452,392,415,410,406],
[492,427,447,484,0,432,441,430,462,452],
[465,386,400,439,459,0,442,410,405,400],
[440,448,414,499,450,449,0,400,407,417],
[523,438,394,476,461,481,491,0,470,450],
[502,452,417,481,429,486,484,421,0,413],
[499,453,477,485,439,491,474,441,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,428,429,443,431,436,446,414,446],
[437,0,431,415,414,405,431,436,429,456],
[463,460,0,472,438,453,465,476,438,477],
[462,476,419,0,442,451,437,444,429,441],
[448,477,453,449,0,444,407,480,440,482],
[460,486,438,440,447,0,442,467,440,444],
[455,460,426,454,484,449,0,472,447,456],
[445,455,415,447,411,424,419,0,410,458],
[477,462,453,462,451,451,444,481,0,471],
[445,435,414,450,409,447,435,433,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,373,486,422,458,430,389,356,404],
[456,0,454,443,409,480,417,495,441,427],
[518,437,0,476,551,569,409,525,478,581],
[405,448,415,0,533,478,487,432,499,490],
[469,482,340,358,0,433,440,456,445,392],
[433,411,322,413,458,0,264,412,361,459],
[461,474,482,404,451,627,0,517,445,452],
[502,396,366,459,435,479,374,0,403,457],
[535,450,413,392,446,530,446,488,0,528],
[487,464,310,401,499,432,439,434,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,438,455,439,452,457,461,443,440],
[463,0,468,456,443,457,452,454,451,448],
[453,423,0,449,399,425,450,430,451,436],
[436,435,442,0,446,466,448,462,461,435],
[452,448,492,445,0,470,471,464,474,451],
[439,434,466,425,421,0,440,437,453,421],
[434,439,441,443,420,451,0,423,426,432],
[430,437,461,429,427,454,468,0,457,448],
[448,440,440,430,417,438,465,434,0,435],
[451,443,455,456,440,470,459,443,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,432,464,441,452,438,443,471,466],
[433,0,424,445,433,471,464,445,441,464],
[459,467,0,478,435,445,465,470,452,472],
[427,446,413,0,439,426,454,445,463,502],
[450,458,456,452,0,438,444,443,473,467],
[439,420,446,465,453,0,459,446,450,462],
[453,427,426,437,447,432,0,436,430,446],
[448,446,421,446,448,445,455,0,430,460],
[420,450,439,428,418,441,461,461,0,495],
[425,427,419,389,424,429,445,431,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,435,464,478,454,473,463,451,462],
[432,0,438,443,460,455,471,457,464,426],
[456,453,0,446,453,436,465,457,470,476],
[427,448,445,0,467,449,446,448,451,452],
[413,431,438,424,0,406,436,418,437,436],
[437,436,455,442,485,0,438,457,449,428],
[418,420,426,445,455,453,0,429,438,448],
[428,434,434,443,473,434,462,0,446,438],
[440,427,421,440,454,442,453,445,0,430],
[429,465,415,439,455,463,443,453,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,409,466,402,432,450,407,438,431],
[462,0,443,441,402,462,437,430,447,431],
[482,448,0,475,451,420,483,444,455,442],
[425,450,416,0,384,393,441,432,419,408],
[489,489,440,507,0,436,498,443,466,464],
[459,429,471,498,455,0,464,463,459,436],
[441,454,408,450,393,427,0,431,454,416],
[484,461,447,459,448,428,460,0,446,401],
[453,444,436,472,425,432,437,445,0,449],
[460,460,449,483,427,455,475,490,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,456,420,436,429,451,452,471,437],
[485,0,451,444,477,452,493,457,491,478],
[435,440,0,480,426,461,468,460,489,441],
[471,447,411,0,489,460,448,463,461,466],
[455,414,465,402,0,439,435,444,438,439],
[462,439,430,431,452,0,487,468,495,485],
[440,398,423,443,456,404,0,416,434,421],
[439,434,431,428,447,423,475,0,429,422],
[420,400,402,430,453,396,457,462,0,427],
[454,413,450,425,452,406,470,469,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,417,499,485,468,443,414,411,444],
[431,0,407,473,487,431,448,433,389,417],
[474,484,0,531,527,481,499,454,418,434],
[392,418,360,0,413,462,383,389,385,407],
[406,404,364,478,0,414,413,398,392,410],
[423,460,410,429,477,0,397,404,384,432],
[448,443,392,508,478,494,0,417,402,438],
[477,458,437,502,493,487,474,0,469,459],
[480,502,473,506,499,507,489,422,0,452],
[447,474,457,484,481,459,453,432,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,484,461,464,409,469,400,378,409],
[464,0,460,424,410,340,393,429,396,436],
[407,431,0,464,419,354,360,342,340,421],
[430,467,427,0,378,347,431,465,334,426],
[427,481,472,513,0,465,408,383,399,447],
[482,551,537,544,426,0,434,433,388,459],
[422,498,531,460,483,457,0,382,483,436],
[491,462,549,426,508,458,509,0,427,521],
[513,495,551,557,492,503,408,464,0,493],
[482,455,470,465,444,432,455,370,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,461,438,452,467,460,488,466,476],
[423,0,477,455,440,436,469,455,451,461],
[430,414,0,432,454,450,442,480,444,458],
[453,436,459,0,464,475,471,485,468,469],
[439,451,437,427,0,438,457,469,453,459],
[424,455,441,416,453,0,443,464,438,439],
[431,422,449,420,434,448,0,463,440,447],
[403,436,411,406,422,427,428,0,433,426],
[425,440,447,423,438,453,451,458,0,450],
[415,430,433,422,432,452,444,465,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,388,405,435,444,453,424,423,416],
[446,0,417,447,488,476,448,463,449,452],
[503,474,0,445,505,448,487,463,509,466],
[486,444,446,0,492,460,463,461,447,445],
[456,403,386,399,0,445,449,441,470,416],
[447,415,443,431,446,0,415,428,449,407],
[438,443,404,428,442,476,0,462,437,444],
[467,428,428,430,450,463,429,0,465,422],
[468,442,382,444,421,442,454,426,0,430],
[475,439,425,446,475,484,447,469,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,462,380,561,526,462,548,439,403],
[371,0,326,308,530,482,418,505,338,393],
[429,565,0,438,536,414,390,527,474,502],
[511,583,453,0,611,462,411,529,483,538],
[330,361,355,280,0,470,354,536,452,414],
[365,409,477,429,421,0,475,548,488,548],
[429,473,501,480,537,416,0,601,565,572],
[343,386,364,362,355,343,290,0,362,442],
[452,553,417,408,439,403,326,529,0,467],
[488,498,389,353,477,343,319,449,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,510,481,427,537,485,511,537,421],
[441,0,391,424,491,380,403,518,490,426],
[381,500,0,473,481,460,408,449,499,477],
[410,467,418,0,455,479,459,528,493,507],
[464,400,410,436,0,469,338,429,480,414],
[354,511,431,412,422,0,481,382,391,465],
[406,488,483,432,553,410,0,532,514,476],
[380,373,442,363,462,509,359,0,447,453],
[354,401,392,398,411,500,377,444,0,434],
[470,465,414,384,477,426,415,438,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,477,459,471,497,473,486,445,477],
[436,0,446,464,449,463,420,462,461,467],
[414,445,0,458,463,464,456,455,441,471],
[432,427,433,0,425,461,431,441,446,448],
[420,442,428,466,0,472,447,467,462,461],
[394,428,427,430,419,0,412,432,415,427],
[418,471,435,460,444,479,0,480,425,478],
[405,429,436,450,424,459,411,0,448,439],
[446,430,450,445,429,476,466,443,0,485],
[414,424,420,443,430,464,413,452,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,471,468,464,452,460,425,484,461],
[439,0,420,452,435,422,444,395,455,435],
[420,471,0,457,456,447,464,458,471,429],
[423,439,434,0,453,415,449,437,448,426],
[427,456,435,438,0,445,449,446,461,428],
[439,469,444,476,446,0,474,457,466,435],
[431,447,427,442,442,417,0,416,459,418],
[466,496,433,454,445,434,475,0,484,430],
[407,436,420,443,430,425,432,407,0,417],
[430,456,462,465,463,456,473,461,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,427,427,444,429,445,447,442,451],
[465,0,461,436,425,456,444,436,439,439],
[464,430,0,422,434,439,443,446,419,450],
[464,455,469,0,439,459,450,442,453,477],
[447,466,457,452,0,425,436,441,437,459],
[462,435,452,432,466,0,461,458,451,482],
[446,447,448,441,455,430,0,440,454,468],
[444,455,445,449,450,433,451,0,462,462],
[449,452,472,438,454,440,437,429,0,458],
[440,452,441,414,432,409,423,429,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,443,439,427,447,403,422,413,445],
[470,0,468,477,457,475,460,451,442,493],
[448,423,0,425,415,433,435,426,458,441],
[452,414,466,0,426,448,439,439,440,453],
[464,434,476,465,0,473,461,454,474,473],
[444,416,458,443,418,0,442,434,419,445],
[488,431,456,452,430,449,0,460,452,461],
[469,440,465,452,437,457,431,0,446,454],
[478,449,433,451,417,472,439,445,0,460],
[446,398,450,438,418,446,430,437,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,445,520,449,531,329,440,433,387],
[363,0,366,496,391,383,308,456,343,368],
[446,525,0,586,486,580,497,510,488,421],
[371,395,305,0,374,416,380,493,285,393],
[442,500,405,517,0,495,372,502,313,525],
[360,508,311,475,396,0,313,422,398,400],
[562,583,394,511,519,578,0,516,449,428],
[451,435,381,398,389,469,375,0,289,419],
[458,548,403,606,578,493,442,602,0,510],
[504,523,470,498,366,491,463,472,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,480,431,466,475,404,470,432,434],
[443,0,474,469,482,495,450,463,460,473],
[411,417,0,415,410,451,390,430,411,419],
[460,422,476,0,443,475,429,444,434,447],
[425,409,481,448,0,453,424,438,430,444],
[416,396,440,416,438,0,379,440,424,423],
[487,441,501,462,467,512,0,503,450,488],
[421,428,461,447,453,451,388,0,420,438],
[459,431,480,457,461,467,441,471,0,454],
[457,418,472,444,447,468,403,453,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,442,458,452,436,434,449,443,448],
[452,0,464,444,465,453,473,474,447,442],
[449,427,0,431,433,422,413,437,446,421],
[433,447,460,0,476,416,439,444,475,436],
[439,426,458,415,0,423,433,442,442,427],
[455,438,469,475,468,0,465,463,469,462],
[457,418,478,452,458,426,0,460,417,451],
[442,417,454,447,449,428,431,0,439,449],
[448,444,445,416,449,422,474,452,0,441],
[443,449,470,455,464,429,440,442,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,418,503,471,418,418,440,465,462],
[435,0,422,476,504,364,460,403,396,409],
[473,469,0,541,535,445,447,388,502,474],
[388,415,350,0,450,365,424,397,343,428],
[420,387,356,441,0,361,402,348,420,425],
[473,527,446,526,530,0,528,501,430,444],
[473,431,444,467,489,363,0,373,364,372],
[451,488,503,494,543,390,518,0,458,453],
[426,495,389,548,471,461,527,433,0,430],
[429,482,417,463,466,447,519,438,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,418,483,426,458,426,439,457,447],
[446,0,430,487,443,449,455,430,448,428],
[473,461,0,468,469,467,445,434,482,460],
[408,404,423,0,410,428,437,422,428,397],
[465,448,422,481,0,458,475,435,451,461],
[433,442,424,463,433,0,452,422,492,450],
[465,436,446,454,416,439,0,446,467,462],
[452,461,457,469,456,469,445,0,469,451],
[434,443,409,463,440,399,424,422,0,414],
[444,463,431,494,430,441,429,440,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,480,448,438,469,456,440,466,495],
[387,0,405,411,402,402,415,400,419,431],
[411,486,0,418,429,447,431,414,447,452],
[443,480,473,0,449,475,444,455,462,454],
[453,489,462,442,0,468,445,447,454,445],
[422,489,444,416,423,0,426,426,427,440],
[435,476,460,447,446,465,0,410,446,468],
[451,491,477,436,444,465,481,0,467,475],
[425,472,444,429,437,464,445,424,0,454],
[396,460,439,437,446,451,423,416,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,414,433,435,423,436,446,446,438],
[459,0,444,463,467,437,445,459,462,435],
[477,447,0,433,434,442,446,454,457,444],
[458,428,458,0,460,449,461,452,442,455],
[456,424,457,431,0,441,443,438,453,446],
[468,454,449,442,450,0,447,445,465,465],
[455,446,445,430,448,444,0,454,452,460],
[445,432,437,439,453,446,437,0,451,463],
[445,429,434,449,438,426,439,440,0,449],
[453,456,447,436,445,426,431,428,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,442,443,468,442,477,438,437,442],
[427,0,427,432,428,412,439,415,430,437],
[449,464,0,458,444,455,463,447,457,439],
[448,459,433,0,431,422,444,428,436,446],
[423,463,447,460,0,436,462,430,446,449],
[449,479,436,469,455,0,452,448,447,461],
[414,452,428,447,429,439,0,442,419,451],
[453,476,444,463,461,443,449,0,438,461],
[454,461,434,455,445,444,472,453,0,468],
[449,454,452,445,442,430,440,430,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,416,427,461,480,446,449,427,437],
[436,0,453,430,461,447,463,454,439,432],
[475,438,0,445,437,466,469,453,457,435],
[464,461,446,0,488,485,493,472,443,467],
[430,430,454,403,0,447,415,437,406,436],
[411,444,425,406,444,0,425,439,409,411],
[445,428,422,398,476,466,0,462,429,425],
[442,437,438,419,454,452,429,0,422,421],
[464,452,434,448,485,482,462,469,0,443],
[454,459,456,424,455,480,466,470,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,457,463,459,449,453,455,447],
[449,0,447,441,433,498,457,442,450,442],
[443,444,0,457,439,458,449,445,458,427],
[434,450,434,0,438,468,444,449,469,444],
[428,458,452,453,0,465,452,444,462,459],
[432,393,433,423,426,0,431,428,447,440],
[442,434,442,447,439,460,0,426,453,435],
[438,449,446,442,447,463,465,0,447,445],
[436,441,433,422,429,444,438,444,0,434],
[444,449,464,447,432,451,456,446,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,455,453,417,402,418,445,450,442],
[449,0,475,478,434,422,418,463,461,421],
[436,416,0,436,416,397,383,416,438,394],
[438,413,455,0,435,451,420,476,481,434],
[474,457,475,456,0,410,465,446,467,424],
[489,469,494,440,481,0,441,465,478,471],
[473,473,508,471,426,450,0,450,497,454],
[446,428,475,415,445,426,441,0,483,443],
[441,430,453,410,424,413,394,408,0,415],
[449,470,497,457,467,420,437,448,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,435,426,429,435,408,422,433,442],
[505,0,463,485,431,487,476,461,492,452],
[456,428,0,461,432,458,468,429,452,427],
[465,406,430,0,432,481,459,428,444,434],
[462,460,459,459,0,459,456,454,498,438],
[456,404,433,410,432,0,463,414,442,426],
[483,415,423,432,435,428,0,455,462,407],
[469,430,462,463,437,477,436,0,471,419],
[458,399,439,447,393,449,429,420,0,409],
[449,439,464,457,453,465,484,472,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,439,428,429,482,431,460,418,433],
[470,0,451,447,446,461,458,461,433,441],
[452,440,0,434,426,481,457,451,451,416],
[463,444,457,0,453,478,476,444,470,451],
[462,445,465,438,0,459,473,450,435,412],
[409,430,410,413,432,0,414,435,417,423],
[460,433,434,415,418,477,0,457,462,425],
[431,430,440,447,441,456,434,0,443,424],
[473,458,440,421,456,474,429,448,0,402],
[458,450,475,440,479,468,466,467,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,428,405,449,422,421,446,432,427],
[478,0,462,477,460,464,453,467,451,435],
[463,429,0,442,462,444,409,437,442,430],
[486,414,449,0,477,437,426,424,447,408],
[442,431,429,414,0,447,420,451,438,417],
[469,427,447,454,444,0,439,424,437,434],
[470,438,482,465,471,452,0,444,445,456],
[445,424,454,467,440,467,447,0,455,431],
[459,440,449,444,453,454,446,436,0,434],
[464,456,461,483,474,457,435,460,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,404,390,372,418,459,400,397,398],
[468,0,394,448,405,423,496,415,417,431],
[487,497,0,450,434,462,498,461,491,443],
[501,443,441,0,449,444,463,448,458,455],
[519,486,457,442,0,462,499,447,478,468],
[473,468,429,447,429,0,492,437,458,448],
[432,395,393,428,392,399,0,427,421,395],
[491,476,430,443,444,454,464,0,473,462],
[494,474,400,433,413,433,470,418,0,452],
[493,460,448,436,423,443,496,429,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,414,483,456,418,438,449,434,462],
[463,0,410,497,456,435,442,424,423,472],
[477,481,0,476,442,414,497,473,446,470],
[408,394,415,0,400,419,452,430,439,447],
[435,435,449,491,0,433,463,470,445,453],
[473,456,477,472,458,0,459,467,444,472],
[453,449,394,439,428,432,0,452,403,469],
[442,467,418,461,421,424,439,0,423,456],
[457,468,445,452,446,447,488,468,0,471],
[429,419,421,444,438,419,422,435,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,460,442,457,443,449,442,448,474],
[428,0,475,487,481,462,485,448,467,496],
[431,416,0,437,444,407,453,408,440,441],
[449,404,454,0,441,452,464,437,452,472],
[434,410,447,450,0,440,447,419,433,475],
[448,429,484,439,451,0,477,448,427,472],
[442,406,438,427,444,414,0,427,423,484],
[449,443,483,454,472,443,464,0,433,445],
[443,424,451,439,458,464,468,458,0,458],
[417,395,450,419,416,419,407,446,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,431,420,436,456,432,436,433,414],
[467,0,430,445,444,445,445,460,454,445],
[460,461,0,438,435,469,446,477,453,454],
[471,446,453,0,461,465,464,469,439,443],
[455,447,456,430,0,456,446,461,448,440],
[435,446,422,426,435,0,426,457,432,438],
[459,446,445,427,445,465,0,482,466,446],
[455,431,414,422,430,434,409,0,428,420],
[458,437,438,452,443,459,425,463,0,442],
[477,446,437,448,451,453,445,471,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,436,459,421,459,423,470,433,455],
[475,0,476,492,446,478,469,509,466,441],
[455,415,0,475,427,417,463,441,447,456],
[432,399,416,0,400,425,432,453,437,431],
[470,445,464,491,0,453,449,442,443,463],
[432,413,474,466,438,0,443,462,456,443],
[468,422,428,459,442,448,0,463,441,441],
[421,382,450,438,449,429,428,0,420,442],
[458,425,444,454,448,435,450,471,0,427],
[436,450,435,460,428,448,450,449,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,444,443,430,454,456,503,411,408],
[505,0,466,407,493,486,446,438,433,402],
[447,425,0,442,482,446,454,426,426,429],
[448,484,449,0,459,462,458,453,432,449],
[461,398,409,432,0,446,422,413,409,417],
[437,405,445,429,445,0,469,414,458,464],
[435,445,437,433,469,422,0,419,418,444],
[388,453,465,438,478,477,472,0,418,445],
[480,458,465,459,482,433,473,473,0,407],
[483,489,462,442,474,427,447,446,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,438,463,428,432,435,444,449],
[442,0,431,465,459,411,453,433,411,442],
[442,460,0,482,454,430,448,449,451,443],
[453,426,409,0,444,407,439,432,425,416],
[428,432,437,447,0,412,420,444,435,420],
[463,480,461,484,479,0,468,484,459,437],
[459,438,443,452,471,423,0,445,445,446],
[456,458,442,459,447,407,446,0,442,450],
[447,480,440,466,456,432,446,449,0,459],
[442,449,448,475,471,454,445,441,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,410,445,395,438,430,415,425,409],
[461,0,447,457,440,436,441,444,458,434],
[481,444,0,452,446,456,466,439,459,452],
[446,434,439,0,425,433,446,420,417,470],
[496,451,445,466,0,479,457,462,455,468],
[453,455,435,458,412,0,440,401,446,436],
[461,450,425,445,434,451,0,448,446,430],
[476,447,452,471,429,490,443,0,441,466],
[466,433,432,474,436,445,445,450,0,461],
[482,457,439,421,423,455,461,425,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,461,447,461,438,477,482,429,491],
[408,0,436,475,445,446,463,460,425,467],
[430,455,0,442,469,442,455,479,453,453],
[444,416,449,0,450,441,447,473,419,477],
[430,446,422,441,0,441,450,489,407,468],
[453,445,449,450,450,0,462,480,437,479],
[414,428,436,444,441,429,0,444,415,491],
[409,431,412,418,402,411,447,0,394,434],
[462,466,438,472,484,454,476,497,0,483],
[400,424,438,414,423,412,400,457,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,445,447,425,424,446,463,446,414],
[457,0,434,464,449,462,443,462,447,467],
[446,457,0,466,449,450,462,451,433,445],
[444,427,425,0,438,432,447,435,446,431],
[466,442,442,453,0,459,440,451,453,440],
[467,429,441,459,432,0,445,462,451,445],
[445,448,429,444,451,446,0,468,421,449],
[428,429,440,456,440,429,423,0,418,402],
[445,444,458,445,438,440,470,473,0,424],
[477,424,446,460,451,446,442,489,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,438,421,398,416,419,417,409,450],
[465,0,435,418,405,437,428,428,418,438],
[453,456,0,427,435,431,436,440,444,448],
[470,473,464,0,446,445,456,451,464,473],
[493,486,456,445,0,447,458,446,464,466],
[475,454,460,446,444,0,443,448,473,471],
[472,463,455,435,433,448,0,432,435,442],
[474,463,451,440,445,443,459,0,466,462],
[482,473,447,427,427,418,456,425,0,463],
[441,453,443,418,425,420,449,429,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,452,462,456,453,433,426,493,456],
[481,0,459,471,472,471,452,441,479,453],
[439,432,0,464,440,437,414,427,473,445],
[429,420,427,0,445,439,418,440,457,434],
[435,419,451,446,0,433,433,446,454,444],
[438,420,454,452,458,0,438,459,493,463],
[458,439,477,473,458,453,0,441,481,462],
[465,450,464,451,445,432,450,0,469,452],
[398,412,418,434,437,398,410,422,0,416],
[435,438,446,457,447,428,429,439,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,448,477,444,471,448,475,433,458],
[451,0,451,473,437,467,444,449,452,471],
[443,440,0,504,466,490,439,445,441,457],
[414,418,387,0,411,445,421,406,415,432],
[447,454,425,480,0,479,447,438,461,458],
[420,424,401,446,412,0,440,426,408,425],
[443,447,452,470,444,451,0,461,442,454],
[416,442,446,485,453,465,430,0,425,442],
[458,439,450,476,430,483,449,466,0,465],
[433,420,434,459,433,466,437,449,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,455,439,457,447,437,435,428,439],
[462,0,456,462,466,445,421,442,438,441],
[436,435,0,452,455,431,425,412,412,451],
[452,429,439,0,464,437,428,431,420,437],
[434,425,436,427,0,426,408,423,408,432],
[444,446,460,454,465,0,425,434,434,438],
[454,470,466,463,483,466,0,439,450,463],
[456,449,479,460,468,457,452,0,443,450],
[463,453,479,471,483,457,441,448,0,455],
[452,450,440,454,459,453,428,441,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,464,489,533,444,456,436,463,469],
[393,0,430,433,464,429,448,432,421,444],
[427,461,0,465,439,408,454,424,439,432],
[402,458,426,0,484,419,429,416,428,433],
[358,427,452,407,0,424,447,379,445,418],
[447,462,483,472,467,0,456,450,435,471],
[435,443,437,462,444,435,0,425,451,446],
[455,459,467,475,512,441,466,0,453,488],
[428,470,452,463,446,456,440,438,0,467],
[422,447,459,458,473,420,445,403,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,441,438,456,470,455,449,447,444],
[458,0,466,446,449,453,450,440,436,454],
[450,425,0,451,461,465,450,441,434,448],
[453,445,440,0,437,462,454,459,429,438],
[435,442,430,454,0,466,436,444,436,447],
[421,438,426,429,425,0,419,425,394,437],
[436,441,441,437,455,472,0,444,433,432],
[442,451,450,432,447,466,447,0,425,432],
[444,455,457,462,455,497,458,466,0,462],
[447,437,443,453,444,454,459,459,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,458,456,437,476,419,445,437,462],
[477,0,481,499,464,497,425,450,485,486],
[433,410,0,428,424,482,418,452,444,453],
[435,392,463,0,426,441,397,425,443,435],
[454,427,467,465,0,488,397,453,463,452],
[415,394,409,450,403,0,399,404,450,421],
[472,466,473,494,494,492,0,445,481,507],
[446,441,439,466,438,487,446,0,482,476],
[454,406,447,448,428,441,410,409,0,456],
[429,405,438,456,439,470,384,415,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,476,429,412,178,389,434,504,326],
[576,0,754,450,508,390,456,441,600,422],
[415,137,0,251,141,0,200,370,372,330],
[462,441,640,0,430,216,504,241,489,537],
[479,383,750,461,0,289,293,351,499,367],
[713,501,891,675,602,0,661,441,647,627],
[502,435,691,387,598,230,0,399,550,490],
[457,450,521,650,540,450,492,0,596,382],
[387,291,519,402,392,244,341,295,0,499],
[565,469,561,354,524,264,401,509,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,477,492,408,467,469,408,514,453],
[477,0,372,469,476,448,493,409,447,395],
[414,519,0,490,426,451,504,383,531,421],
[399,422,401,0,441,350,478,425,508,486],
[483,415,465,450,0,486,521,436,496,432],
[424,443,440,541,405,0,449,459,477,458],
[422,398,387,413,370,442,0,414,485,465],
[483,482,508,466,455,432,477,0,455,451],
[377,444,360,383,395,414,406,436,0,406],
[438,496,470,405,459,433,426,440,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,456,448,437,429,489,451,465,472],
[451,0,439,418,429,414,460,444,453,466],
[435,452,0,417,419,428,441,445,450,435],
[443,473,474,0,437,456,465,442,483,481],
[454,462,472,454,0,451,472,475,461,444],
[462,477,463,435,440,0,457,481,458,484],
[402,431,450,426,419,434,0,448,445,467],
[440,447,446,449,416,410,443,0,458,458],
[426,438,441,408,430,433,446,433,0,455],
[419,425,456,410,447,407,424,433,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,464,483,447,491,444,485,479,472],
[419,0,390,418,420,461,390,442,435,438],
[427,501,0,472,459,509,477,485,469,438],
[408,473,419,0,427,477,424,450,426,451],
[444,471,432,464,0,465,434,501,473,465],
[400,430,382,414,426,0,407,424,435,419],
[447,501,414,467,457,484,0,481,481,475],
[406,449,406,441,390,467,410,0,410,441],
[412,456,422,465,418,456,410,481,0,408],
[419,453,453,440,426,472,416,450,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,450,467,447,439,453,452,452,434],
[424,0,449,452,432,441,437,448,426,426],
[441,442,0,447,420,461,468,469,466,456],
[424,439,444,0,420,436,430,445,422,440],
[444,459,471,471,0,459,468,453,447,460],
[452,450,430,455,432,0,447,462,461,424],
[438,454,423,461,423,444,0,451,449,439],
[439,443,422,446,438,429,440,0,452,427],
[439,465,425,469,444,430,442,439,0,445],
[457,465,435,451,431,467,452,464,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,474,453,523,493,510,456,482,438],
[452,0,466,446,492,469,462,422,459,498],
[417,425,0,420,473,480,461,419,453,496],
[438,445,471,0,493,517,487,440,481,475],
[368,399,418,398,0,443,451,424,423,445],
[398,422,411,374,448,0,422,383,429,386],
[381,429,430,404,440,469,0,374,443,429],
[435,469,472,451,467,508,517,0,486,480],
[409,432,438,410,468,462,448,405,0,433],
[453,393,395,416,446,505,462,411,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,443,457,464,458,452,446,458,463],
[430,0,422,444,482,444,425,418,444,415],
[448,469,0,453,467,464,439,443,444,453],
[434,447,438,0,483,465,464,454,463,451],
[427,409,424,408,0,427,432,440,441,412],
[433,447,427,426,464,0,433,445,438,425],
[439,466,452,427,459,458,0,437,424,432],
[445,473,448,437,451,446,454,0,452,445],
[433,447,447,428,450,453,467,439,0,436],
[428,476,438,440,479,466,459,446,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,501,567,521,637,480,496,493,539],
[504,0,404,450,628,503,444,458,498,486],
[390,487,0,585,546,502,428,425,555,605],
[324,441,306,0,497,559,472,365,556,537],
[370,263,345,394,0,497,411,324,494,391],
[254,388,389,332,394,0,384,202,401,377],
[411,447,463,419,480,507,0,389,494,557],
[395,433,466,526,567,689,502,0,594,522],
[398,393,336,335,397,490,397,297,0,442],
[352,405,286,354,500,514,334,369,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,393,453,403,504,378,372,398],
[437,0,411,401,477,383,451,435,446,423],
[436,480,0,492,472,452,500,434,474,422],
[498,490,399,0,464,479,437,470,415,445],
[438,414,419,427,0,406,450,383,429,396],
[488,508,439,412,485,0,494,428,441,418],
[387,440,391,454,441,397,0,337,413,414],
[513,456,457,421,508,463,554,0,459,481],
[519,445,417,476,462,450,478,432,0,430],
[493,468,469,446,495,473,477,410,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,501,521,414,436,436,472,427,437],
[481,0,433,525,449,500,420,497,438,453],
[390,458,0,529,468,511,495,492,455,455],
[370,366,362,0,329,387,377,422,337,366],
[477,442,423,562,0,471,430,509,384,457],
[455,391,380,504,420,0,421,466,410,447],
[455,471,396,514,461,470,0,515,414,444],
[419,394,399,469,382,425,376,0,430,431],
[464,453,436,554,507,481,477,461,0,462],
[454,438,436,525,434,444,447,460,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,461,393,434,462,497,522,431,426],
[462,0,496,423,483,483,464,500,440,449],
[430,395,0,453,492,475,512,539,471,417],
[498,468,438,0,444,428,479,495,478,449],
[457,408,399,447,0,415,405,444,442,441],
[429,408,416,463,476,0,495,545,463,428],
[394,427,379,412,486,396,0,450,419,396],
[369,391,352,396,447,346,441,0,374,362],
[460,451,420,413,449,428,472,517,0,431],
[465,442,474,442,450,463,495,529,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,431,435,450,461,447,446,423,444],
[412,0,419,469,436,460,455,442,434,405],
[460,472,0,456,441,471,470,461,447,435],
[456,422,435,0,444,463,446,464,439,435],
[441,455,450,447,0,454,462,449,443,432],
[430,431,420,428,437,0,465,422,419,409],
[444,436,421,445,429,426,0,444,415,405],
[445,449,430,427,442,469,447,0,424,426],
[468,457,444,452,448,472,476,467,0,452],
[447,486,456,456,459,482,486,465,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,413,418,466,438,420,441,416,441],
[471,0,484,433,466,486,471,499,498,516],
[478,407,0,449,501,446,450,457,436,487],
[473,458,442,0,515,459,449,517,475,518],
[425,425,390,376,0,436,452,392,441,428],
[453,405,445,432,455,0,442,423,410,459],
[471,420,441,442,439,449,0,481,480,452],
[450,392,434,374,499,468,410,0,440,429],
[475,393,455,416,450,481,411,451,0,480],
[450,375,404,373,463,432,439,462,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,441,428,468,456,478,431,434,433],
[439,0,446,449,466,447,460,435,441,433],
[450,445,0,442,440,437,450,458,454,496],
[463,442,449,0,436,434,437,427,467,434],
[423,425,451,455,0,437,463,422,416,442],
[435,444,454,457,454,0,467,450,433,447],
[413,431,441,454,428,424,0,407,434,430],
[460,456,433,464,469,441,484,0,449,461],
[457,450,437,424,475,458,457,442,0,453],
[458,458,395,457,449,444,461,430,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,374,425,444,486,469,417,404,399],
[411,0,382,437,452,478,420,387,396,410],
[517,509,0,550,521,541,503,508,450,425],
[466,454,341,0,443,426,417,400,355,395],
[447,439,370,448,0,413,436,387,417,436],
[405,413,350,465,478,0,428,450,398,387],
[422,471,388,474,455,463,0,436,413,445],
[474,504,383,491,504,441,455,0,461,438],
[487,495,441,536,474,493,478,430,0,486],
[492,481,466,496,455,504,446,453,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,471,441,503,414,445,415,518,402],
[510,0,474,493,511,471,473,442,490,424],
[420,417,0,436,497,442,426,437,505,468],
[450,398,455,0,500,413,449,468,501,414],
[388,380,394,391,0,401,415,403,458,420],
[477,420,449,478,490,0,479,430,471,446],
[446,418,465,442,476,412,0,427,466,411],
[476,449,454,423,488,461,464,0,484,404],
[373,401,386,390,433,420,425,407,0,330],
[489,467,423,477,471,445,480,487,561,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,444,460,437,433,435,449,495,457],
[495,0,452,431,433,476,471,430,511,456],
[447,439,0,427,427,428,473,434,433,410],
[431,460,464,0,449,421,424,495,481,412],
[454,458,464,442,0,433,443,434,476,457],
[458,415,463,470,458,0,461,449,512,462],
[456,420,418,467,448,430,0,457,470,451],
[442,461,457,396,457,442,434,0,473,433],
[396,380,458,410,415,379,421,418,0,448],
[434,435,481,479,434,429,440,458,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,495,409,511,505,387,509,397,508],
[401,0,578,486,455,484,382,474,490,439],
[396,313,0,473,327,432,416,598,454,361],
[482,405,418,0,389,397,431,545,420,420],
[380,436,564,502,0,408,578,567,416,394],
[386,407,459,494,483,0,511,480,343,387],
[504,509,475,460,313,380,0,534,394,401],
[382,417,293,346,324,411,357,0,380,285],
[494,401,437,471,475,548,497,511,0,433],
[383,452,530,471,497,504,490,606,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,417,441,436,457,428,446,435,439],
[457,0,457,448,464,489,432,486,433,475],
[474,434,0,446,437,489,441,451,420,471],
[450,443,445,0,455,475,405,451,446,437],
[455,427,454,436,0,463,450,466,451,431],
[434,402,402,416,428,0,381,402,418,435],
[463,459,450,486,441,510,0,444,444,460],
[445,405,440,440,425,489,447,0,435,467],
[456,458,471,445,440,473,447,456,0,468],
[452,416,420,454,460,456,431,424,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,511,399,436,422,465,461,468,512],
[382,0,463,406,392,414,351,423,398,459],
[380,428,0,416,400,415,443,468,400,449],
[492,485,475,0,494,439,444,515,434,490],
[455,499,491,397,0,454,435,480,465,496],
[469,477,476,452,437,0,452,482,417,508],
[426,540,448,447,456,439,0,504,457,480],
[430,468,423,376,411,409,387,0,409,463],
[423,493,491,457,426,474,434,482,0,475],
[379,432,442,401,395,383,411,428,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,384,378,370,394,371,390,428,422],
[504,0,462,427,429,481,418,410,413,471],
[507,429,0,418,442,492,459,466,473,448],
[513,464,473,0,433,503,477,413,428,488],
[521,462,449,458,0,527,471,424,502,485],
[497,410,399,388,364,0,432,374,420,458],
[520,473,432,414,420,459,0,414,448,503],
[501,481,425,478,467,517,477,0,462,496],
[463,478,418,463,389,471,443,429,0,475],
[469,420,443,403,406,433,388,395,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,464,440,444,446,468,460,470,449],
[432,0,435,406,437,422,443,441,432,421],
[427,456,0,418,443,407,460,450,457,446],
[451,485,473,0,440,453,460,446,451,429],
[447,454,448,451,0,433,454,450,460,443],
[445,469,484,438,458,0,462,481,470,443],
[423,448,431,431,437,429,0,435,458,433],
[431,450,441,445,441,410,456,0,461,440],
[421,459,434,440,431,421,433,430,0,414],
[442,470,445,462,448,448,458,451,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,448,453,441,474,439,454,457,455],
[461,0,461,456,455,447,430,444,444,462],
[443,430,0,450,439,463,448,456,432,441],
[438,435,441,0,449,488,452,437,429,471],
[450,436,452,442,0,452,450,467,442,463],
[417,444,428,403,439,0,413,448,425,423],
[452,461,443,439,441,478,0,455,463,458],
[437,447,435,454,424,443,436,0,440,464],
[434,447,459,462,449,466,428,451,0,451],
[436,429,450,420,428,468,433,427,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,451,477,457,479,435,435,468,461],
[384,0,435,439,469,457,457,436,457,438],
[440,456,0,486,485,456,468,466,473,455],
[414,452,405,0,442,464,434,437,439,435],
[434,422,406,449,0,448,447,439,419,409],
[412,434,435,427,443,0,428,447,434,468],
[456,434,423,457,444,463,0,444,472,435],
[456,455,425,454,452,444,447,0,458,456],
[423,434,418,452,472,457,419,433,0,461],
[430,453,436,456,482,423,456,435,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,464,443,460,447,487,460,466],
[447,0,427,430,405,427,438,441,436,456],
[438,464,0,473,469,480,472,490,472,476],
[427,461,418,0,416,455,426,435,441,453],
[448,486,422,475,0,498,462,458,480,481],
[431,464,411,436,393,0,418,432,430,468],
[444,453,419,465,429,473,0,473,416,474],
[404,450,401,456,433,459,418,0,434,427],
[431,455,419,450,411,461,475,457,0,442],
[425,435,415,438,410,423,417,464,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,457,461,444,404,446,423,469,458],
[472,0,477,463,486,457,469,454,439,466],
[434,414,0,444,459,438,430,402,438,437],
[430,428,447,0,472,434,448,465,446,454],
[447,405,432,419,0,410,443,421,433,426],
[487,434,453,457,481,0,469,442,466,477],
[445,422,461,443,448,422,0,459,435,476],
[468,437,489,426,470,449,432,0,451,475],
[422,452,453,445,458,425,456,440,0,471],
[433,425,454,437,465,414,415,416,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,423,427,397,369,420,416,439,421],
[494,0,435,477,445,445,470,483,503,458],
[468,456,0,495,441,459,500,472,440,429],
[464,414,396,0,413,437,450,404,454,432],
[494,446,450,478,0,423,504,481,497,479],
[522,446,432,454,468,0,476,478,465,471],
[471,421,391,441,387,415,0,433,442,429],
[475,408,419,487,410,413,458,0,462,438],
[452,388,451,437,394,426,449,429,0,462],
[470,433,462,459,412,420,462,453,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,473,414,446,432,414,402,377,423],
[430,0,435,419,433,449,425,424,426,397],
[418,456,0,386,426,444,447,417,436,419],
[477,472,505,0,475,431,430,433,462,438],
[445,458,465,416,0,414,439,442,454,433],
[459,442,447,460,477,0,463,426,414,477],
[477,466,444,461,452,428,0,440,418,472],
[489,467,474,458,449,465,451,0,461,438],
[514,465,455,429,437,477,473,430,0,450],
[468,494,472,453,458,414,419,453,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,420,422,423,440,408,428,423,409],
[450,0,451,426,438,455,411,452,418,436],
[471,440,0,470,472,470,454,481,448,428],
[469,465,421,0,444,456,439,454,436,449],
[468,453,419,447,0,445,418,429,441,437],
[451,436,421,435,446,0,419,443,432,416],
[483,480,437,452,473,472,0,448,455,447],
[463,439,410,437,462,448,443,0,436,437],
[468,473,443,455,450,459,436,455,0,453],
[482,455,463,442,454,475,444,454,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,585,357,454,464,564,380,479,472,490],
[306,0,396,362,472,457,406,435,355,437],
[534,495,0,473,554,507,432,468,474,532],
[437,529,418,0,519,484,407,475,450,522],
[427,419,337,372,0,387,400,346,419,456],
[327,434,384,407,504,0,380,350,326,514],
[511,485,459,484,491,511,0,416,503,563],
[412,456,423,416,545,541,475,0,504,550],
[419,536,417,441,472,565,388,387,0,558],
[401,454,359,369,435,377,328,341,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,564,443,389,367,456,407,490,527,441],
[327,0,371,344,339,388,342,445,483,338],
[448,520,0,476,469,479,396,481,504,451],
[502,547,415,0,457,580,450,541,565,463],
[524,552,422,434,0,492,397,544,669,421],
[435,503,412,311,399,0,373,434,520,443],
[484,549,495,441,494,518,0,549,616,495],
[401,446,410,350,347,457,342,0,389,435],
[364,408,387,326,222,371,275,502,0,349],
[450,553,440,428,470,448,396,456,542,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,493,430,443,454,453,473,420,421],
[455,0,488,459,446,462,448,477,438,429],
[398,403,0,424,397,415,413,415,404,401],
[461,432,467,0,434,410,409,432,426,450],
[448,445,494,457,0,444,458,478,463,470],
[437,429,476,481,447,0,454,474,432,466],
[438,443,478,482,433,437,0,476,427,459],
[418,414,476,459,413,417,415,0,454,443],
[471,453,487,465,428,459,464,437,0,477],
[470,462,490,441,421,425,432,448,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,442,426,507,445,383,448,455,449],
[433,0,415,473,393,431,415,443,364,448],
[449,476,0,451,488,465,378,467,350,437],
[465,418,440,0,479,442,445,404,377,421],
[384,498,403,412,0,444,381,497,397,369],
[446,460,426,449,447,0,434,503,392,481],
[508,476,513,446,510,457,0,487,445,476],
[443,448,424,487,394,388,404,0,357,420],
[436,527,541,514,494,499,446,534,0,462],
[442,443,454,470,522,410,415,471,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,497,478,408,457,402,491,424,408],
[498,0,505,426,470,461,465,477,478,455],
[394,386,0,433,425,433,419,470,381,384],
[413,465,458,0,447,498,511,518,467,433],
[483,421,466,444,0,445,458,494,447,388],
[434,430,458,393,446,0,416,455,424,398],
[489,426,472,380,433,475,0,462,388,381],
[400,414,421,373,397,436,429,0,436,398],
[467,413,510,424,444,467,503,455,0,382],
[483,436,507,458,503,493,510,493,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,462,435,453,443,443,462,420,448],
[484,0,491,483,457,469,477,476,445,477],
[429,400,0,447,419,431,415,442,425,420],
[456,408,444,0,440,465,454,446,441,462],
[438,434,472,451,0,442,439,462,439,457],
[448,422,460,426,449,0,472,450,440,457],
[448,414,476,437,452,419,0,445,450,455],
[429,415,449,445,429,441,446,0,420,436],
[471,446,466,450,452,451,441,471,0,453],
[443,414,471,429,434,434,436,455,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,449,443,469,437,434,481,433,445],
[439,0,425,428,431,422,431,476,435,438],
[442,466,0,448,472,461,441,489,448,473],
[448,463,443,0,467,447,458,477,441,459],
[422,460,419,424,0,439,429,457,428,438],
[454,469,430,444,452,0,429,484,426,452],
[457,460,450,433,462,462,0,477,441,456],
[410,415,402,414,434,407,414,0,409,414],
[458,456,443,450,463,465,450,482,0,444],
[446,453,418,432,453,439,435,477,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,441,460,429,461,445,450,450,452],
[443,0,450,444,452,468,448,431,433,432],
[450,441,0,443,429,447,420,415,438,434],
[431,447,448,0,427,445,419,436,434,444],
[462,439,462,464,0,484,446,437,430,442],
[430,423,444,446,407,0,422,409,449,402],
[446,443,471,472,445,469,0,430,445,453],
[441,460,476,455,454,482,461,0,461,456],
[441,458,453,457,461,442,446,430,0,437],
[439,459,457,447,449,489,438,435,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,424,417,418,425,421,450,413,411],
[453,0,436,428,439,417,445,462,435,425],
[467,455,0,428,443,435,436,471,432,440],
[474,463,463,0,465,449,425,496,442,448],
[473,452,448,426,0,431,450,470,425,417],
[466,474,456,442,460,0,463,480,453,439],
[470,446,455,466,441,428,0,458,439,435],
[441,429,420,395,421,411,433,0,399,413],
[478,456,459,449,466,438,452,492,0,444],
[480,466,451,443,474,452,456,478,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,397,388,437,416,426,470,432,432],
[416,0,407,432,433,464,440,420,449,423],
[494,484,0,417,431,462,478,470,503,462],
[503,459,474,0,474,445,497,460,469,482],
[454,458,460,417,0,482,457,469,441,444],
[475,427,429,446,409,0,437,473,444,442],
[465,451,413,394,434,454,0,472,440,448],
[421,471,421,431,422,418,419,0,428,432],
[459,442,388,422,450,447,451,463,0,459],
[459,468,429,409,447,449,443,459,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,455,434,431,439,456,466,432,446],
[448,0,445,430,448,456,474,447,433,442],
[436,446,0,452,439,441,453,441,441,423],
[457,461,439,0,453,447,465,459,459,439],
[460,443,452,438,0,446,462,447,454,455],
[452,435,450,444,445,0,474,461,426,443],
[435,417,438,426,429,417,0,419,429,428],
[425,444,450,432,444,430,472,0,426,421],
[459,458,450,432,437,465,462,465,0,446],
[445,449,468,452,436,448,463,470,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,420,425,465,460,427,410,399],
[445,0,417,462,427,463,409,417,419,432],
[437,474,0,441,444,459,491,468,401,424],
[471,429,450,0,427,465,439,440,433,446],
[466,464,447,464,0,473,453,430,455,397],
[426,428,432,426,418,0,447,451,384,413],
[431,482,400,452,438,444,0,419,420,463],
[464,474,423,451,461,440,472,0,422,441],
[481,472,490,458,436,507,471,469,0,453],
[492,459,467,445,494,478,428,450,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,469,418,467,451,440,428,452,474],
[440,0,454,441,447,469,460,432,455,456],
[422,437,0,401,422,448,411,392,431,453],
[473,450,490,0,472,453,434,448,472,484],
[424,444,469,419,0,434,447,391,429,475],
[440,422,443,438,457,0,447,423,466,454],
[451,431,480,457,444,444,0,420,471,466],
[463,459,499,443,500,468,471,0,511,492],
[439,436,460,419,462,425,420,380,0,442],
[417,435,438,407,416,437,425,399,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,452,441,451,430,427,441,448,454],
[447,0,461,437,461,438,431,421,454,456],
[439,430,0,415,431,424,416,458,413,453],
[450,454,476,0,461,463,455,442,449,459],
[440,430,460,430,0,443,437,461,425,446],
[461,453,467,428,448,0,416,438,452,440],
[464,460,475,436,454,475,0,465,456,475],
[450,470,433,449,430,453,426,0,435,458],
[443,437,478,442,466,439,435,456,0,472],
[437,435,438,432,445,451,416,433,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,445,462,456,441,452,472,458,447],
[441,0,467,428,433,447,474,451,440,447],
[446,424,0,443,434,426,447,446,447,437],
[429,463,448,0,432,437,457,450,441,446],
[435,458,457,459,0,472,475,462,462,445],
[450,444,465,454,419,0,460,453,439,466],
[439,417,444,434,416,431,0,434,430,427],
[419,440,445,441,429,438,457,0,458,436],
[433,451,444,450,429,452,461,433,0,453],
[444,444,454,445,446,425,464,455,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,424,513,499,526,376,465,494,501],
[337,0,347,503,470,379,460,406,340,362],
[467,544,0,639,597,539,545,441,555,443],
[378,388,252,0,471,452,285,384,350,309],
[392,421,294,420,0,329,416,427,388,310],
[365,512,352,439,562,0,417,394,388,402],
[515,431,346,606,475,474,0,463,463,455],
[426,485,450,507,464,497,428,0,456,437],
[397,551,336,541,503,503,428,435,0,365],
[390,529,448,582,581,489,436,454,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,414,429,420,415,421,411,419,434],
[440,0,396,451,417,416,427,434,403,410],
[477,495,0,479,453,443,483,442,453,463],
[462,440,412,0,442,404,416,421,395,443],
[471,474,438,449,0,436,443,421,430,445],
[476,475,448,487,455,0,459,460,426,471],
[470,464,408,475,448,432,0,439,437,448],
[480,457,449,470,470,431,452,0,441,477],
[472,488,438,496,461,465,454,450,0,472],
[457,481,428,448,446,420,443,414,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,438,460,450,444,455,430,421,478],
[463,0,435,467,464,469,435,441,462,445],
[453,456,0,467,445,428,463,447,438,476],
[431,424,424,0,408,407,414,422,426,437],
[441,427,446,483,0,455,432,413,434,448],
[447,422,463,484,436,0,468,431,453,449],
[436,456,428,477,459,423,0,412,445,460],
[461,450,444,469,478,460,479,0,443,490],
[470,429,453,465,457,438,446,448,0,462],
[413,446,415,454,443,442,431,401,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,447,412,444,426,423,446,431,443],
[470,0,469,442,453,433,431,443,448,455],
[444,422,0,423,457,427,434,439,451,455],
[479,449,468,0,453,456,447,466,466,434],
[447,438,434,438,0,460,436,431,452,448],
[465,458,464,435,431,0,431,442,452,448],
[468,460,457,444,455,460,0,450,442,450],
[445,448,452,425,460,449,441,0,458,450],
[460,443,440,425,439,439,449,433,0,458],
[448,436,436,457,443,443,441,441,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,492,455,471,446,456,439,469,479],
[405,0,450,445,459,456,440,420,439,467],
[399,441,0,434,434,430,428,439,437,461],
[436,446,457,0,448,446,432,441,431,485],
[420,432,457,443,0,439,434,453,461,466],
[445,435,461,445,452,0,447,443,451,456],
[435,451,463,459,457,444,0,451,465,469],
[452,471,452,450,438,448,440,0,448,458],
[422,452,454,460,430,440,426,443,0,440],
[412,424,430,406,425,435,422,433,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,455,423,432,424,423,439,425,419],
[435,0,454,430,459,444,441,410,446,429],
[436,437,0,441,433,429,445,435,432,438],
[468,461,450,0,461,452,458,429,456,431],
[459,432,458,430,0,433,450,447,453,438],
[467,447,462,439,458,0,455,448,451,442],
[468,450,446,433,441,436,0,427,451,458],
[452,481,456,462,444,443,464,0,452,456],
[466,445,459,435,438,440,440,439,0,425],
[472,462,453,460,453,449,433,435,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,432,456,452,416,436,461,443,438],
[446,0,414,455,450,430,444,449,460,425],
[459,477,0,472,457,445,451,451,439,457],
[435,436,419,0,442,461,436,427,449,444],
[439,441,434,449,0,433,446,447,475,461],
[475,461,446,430,458,0,451,460,454,445],
[455,447,440,455,445,440,0,466,433,431],
[430,442,440,464,444,431,425,0,443,452],
[448,431,452,442,416,437,458,448,0,453],
[453,466,434,447,430,446,460,439,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,424,438,451,459,439,440,434,443],
[464,0,444,434,467,461,447,450,454,425],
[467,447,0,436,463,475,456,444,476,432],
[453,457,455,0,476,456,475,455,447,437],
[440,424,428,415,0,450,446,434,423,430],
[432,430,416,435,441,0,432,419,421,421],
[452,444,435,416,445,459,0,447,452,447],
[451,441,447,436,457,472,444,0,451,442],
[457,437,415,444,468,470,439,440,0,405],
[448,466,459,454,461,470,444,449,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,419,445,445,429,443,426,451,447],
[443,0,419,450,434,450,429,423,453,426],
[472,472,0,488,447,468,469,471,430,439],
[446,441,403,0,424,405,394,401,411,437],
[446,457,444,467,0,448,460,431,412,406],
[462,441,423,486,443,0,464,415,452,421],
[448,462,422,497,431,427,0,441,442,421],
[465,468,420,490,460,476,450,0,442,444],
[440,438,461,480,479,439,449,449,0,437],
[444,465,452,454,485,470,470,447,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,440,426,432,440,444,445,423,420],
[473,0,450,435,386,450,440,443,379,435],
[451,441,0,420,408,456,448,452,431,433],
[465,456,471,0,449,424,445,418,442,459],
[459,505,483,442,0,456,488,461,468,470],
[451,441,435,467,435,0,441,436,429,468],
[447,451,443,446,403,450,0,384,383,401],
[446,448,439,473,430,455,507,0,411,458],
[468,512,460,449,423,462,508,480,0,454],
[471,456,458,432,421,423,490,433,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,443,461,455,439,425,437,436,434],
[440,0,448,464,455,420,434,473,474,456],
[448,443,0,477,420,455,471,474,432,414],
[430,427,414,0,424,397,420,428,463,411],
[436,436,471,467,0,436,454,424,438,420],
[452,471,436,494,455,0,449,443,457,469],
[466,457,420,471,437,442,0,461,443,467],
[454,418,417,463,467,448,430,0,442,460],
[455,417,459,428,453,434,448,449,0,407],
[457,435,477,480,471,422,424,431,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,459,457,468,467,440,458,472,482],
[451,0,441,431,442,460,440,431,449,471],
[432,450,0,418,434,457,454,441,421,483],
[434,460,473,0,444,431,452,444,445,482],
[423,449,457,447,0,429,451,428,453,444],
[424,431,434,460,462,0,428,438,444,465],
[451,451,437,439,440,463,0,427,437,455],
[433,460,450,447,463,453,464,0,455,461],
[419,442,470,446,438,447,454,436,0,449],
[409,420,408,409,447,426,436,430,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,392,407,377,442,446,458,488,390],
[492,0,478,484,408,503,451,465,515,428],
[499,413,0,431,378,436,493,403,488,449],
[484,407,460,0,423,489,478,444,450,457],
[514,483,513,468,0,488,469,430,526,453],
[449,388,455,402,403,0,465,399,464,431],
[445,440,398,413,422,426,0,433,448,436],
[433,426,488,447,461,492,458,0,465,434],
[403,376,403,441,365,427,443,426,0,386],
[501,463,442,434,438,460,455,457,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,437,468,439,444,414,432,415,462],
[444,0,430,427,449,421,441,420,409,421],
[454,461,0,467,459,442,442,448,439,454],
[423,464,424,0,433,434,458,437,427,450],
[452,442,432,458,0,439,416,442,427,438],
[447,470,449,457,452,0,461,470,468,429],
[477,450,449,433,475,430,0,467,446,472],
[459,471,443,454,449,421,424,0,437,456],
[476,482,452,464,464,423,445,454,0,451],
[429,470,437,441,453,462,419,435,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,445,436,453,459,458,468,458,439],
[443,0,471,433,476,439,450,488,437,469],
[446,420,0,423,436,447,450,478,446,445],
[455,458,468,0,466,451,466,501,444,470],
[438,415,455,425,0,417,430,475,416,434],
[432,452,444,440,474,0,452,498,441,474],
[433,441,441,425,461,439,0,480,423,444],
[423,403,413,390,416,393,411,0,409,420],
[433,454,445,447,475,450,468,482,0,457],
[452,422,446,421,457,417,447,471,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,430,445,452,456,458,435,447,452],
[454,0,477,443,467,470,457,446,453,462],
[461,414,0,421,445,448,460,439,430,465],
[446,448,470,0,445,464,429,451,452,466],
[439,424,446,446,0,456,442,460,436,496],
[435,421,443,427,435,0,430,448,433,456],
[433,434,431,462,449,461,0,438,454,467],
[456,445,452,440,431,443,453,0,458,471],
[444,438,461,439,455,458,437,433,0,448],
[439,429,426,425,395,435,424,420,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,441,428,456,474,435,438,470,425],
[447,0,437,433,429,443,421,437,451,384],
[450,454,0,390,446,466,447,426,442,398],
[463,458,501,0,480,470,458,442,492,456],
[435,462,445,411,0,463,424,426,469,448],
[417,448,425,421,428,0,418,385,458,415],
[456,470,444,433,467,473,0,458,482,424],
[453,454,465,449,465,506,433,0,471,455],
[421,440,449,399,422,433,409,420,0,412],
[466,507,493,435,443,476,467,436,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,451,424,435,460,454,451,455,453],
[451,0,458,452,447,472,463,444,459,451],
[440,433,0,425,436,426,451,422,418,429],
[467,439,466,0,420,397,465,434,436,454],
[456,444,455,471,0,454,468,470,446,464],
[431,419,465,494,437,0,449,471,449,450],
[437,428,440,426,423,442,0,436,438,444],
[440,447,469,457,421,420,455,0,425,435],
[436,432,473,455,445,442,453,466,0,481],
[438,440,462,437,427,441,447,456,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,442,476,466,461,460,452,443,464],
[463,0,442,461,479,464,444,430,474,466],
[449,449,0,457,481,463,456,436,461,477],
[415,430,434,0,448,426,437,430,433,453],
[425,412,410,443,0,450,441,433,432,448],
[430,427,428,465,441,0,446,438,423,464],
[431,447,435,454,450,445,0,423,434,440],
[439,461,455,461,458,453,468,0,463,474],
[448,417,430,458,459,468,457,428,0,465],
[427,425,414,438,443,427,451,417,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,419,441,420,437,407,426,413,443],
[458,0,431,446,448,436,429,454,445,443],
[472,460,0,469,457,454,445,459,452,476],
[450,445,422,0,439,457,465,443,467,482],
[471,443,434,452,0,447,437,448,454,449],
[454,455,437,434,444,0,420,438,450,460],
[484,462,446,426,454,471,0,461,458,476],
[465,437,432,448,443,453,430,0,446,451],
[478,446,439,424,437,441,433,445,0,459],
[448,448,415,409,442,431,415,440,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,456,465,442,451,487,450,420,455],
[456,0,427,457,431,437,477,461,435,437],
[435,464,0,438,409,440,458,432,405,442],
[426,434,453,0,434,405,448,440,410,433],
[449,460,482,457,0,446,476,444,468,464],
[440,454,451,486,445,0,478,432,438,468],
[404,414,433,443,415,413,0,434,444,428],
[441,430,459,451,447,459,457,0,426,439],
[471,456,486,481,423,453,447,465,0,438],
[436,454,449,458,427,423,463,452,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,529,412,370,454,529,493,470,375],
[454,0,504,437,492,458,452,463,398,490],
[362,387,0,336,399,397,415,419,416,411],
[479,454,555,0,437,474,499,450,443,492],
[521,399,492,454,0,405,415,441,389,353],
[437,433,494,417,486,0,572,460,450,376],
[362,439,476,392,476,319,0,374,420,296],
[398,428,472,441,450,431,517,0,377,372],
[421,493,475,448,502,441,471,514,0,410],
[516,401,480,399,538,515,595,519,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,417,427,429,418,406,423,409,442],
[462,0,442,434,453,430,438,416,438,444],
[474,449,0,461,437,432,454,437,445,465],
[464,457,430,0,445,421,433,411,427,437],
[462,438,454,446,0,436,416,429,431,445],
[473,461,459,470,455,0,441,417,414,456],
[485,453,437,458,475,450,0,461,446,502],
[468,475,454,480,462,474,430,0,440,448],
[482,453,446,464,460,477,445,451,0,464],
[449,447,426,454,446,435,389,443,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,428,415,452,414,433,411,429,430],
[447,0,471,449,472,431,453,419,396,458],
[463,420,0,414,470,442,433,432,392,439],
[476,442,477,0,494,446,515,456,464,448],
[439,419,421,397,0,437,429,404,427,415],
[477,460,449,445,454,0,446,475,443,467],
[458,438,458,376,462,445,0,435,422,421],
[480,472,459,435,487,416,456,0,445,474],
[462,495,499,427,464,448,469,446,0,467],
[461,433,452,443,476,424,470,417,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,405,430,439,486,469,542,512,429],
[447,0,305,313,469,391,348,463,420,386],
[486,586,0,558,454,602,419,605,529,469],
[461,578,333,0,514,454,299,594,470,373],
[452,422,437,377,0,440,446,535,472,380],
[405,500,289,437,451,0,378,529,478,497],
[422,543,472,592,445,513,0,532,575,541],
[349,428,286,297,356,362,359,0,358,312],
[379,471,362,421,419,413,316,533,0,423],
[462,505,422,518,511,394,350,579,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,372,404,427,409,407,410,383,412],
[521,0,509,506,437,487,441,470,471,451],
[519,382,0,356,449,451,443,468,371,519],
[487,385,535,0,412,447,468,414,423,383],
[464,454,442,479,0,429,462,528,441,435],
[482,404,440,444,462,0,424,465,397,422],
[484,450,448,423,429,467,0,490,447,414],
[481,421,423,477,363,426,401,0,425,366],
[508,420,520,468,450,494,444,466,0,464],
[479,440,372,508,456,469,477,525,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,500,397,347,360,399,443,383,400],
[606,0,532,458,505,500,613,586,484,428],
[391,359,0,380,356,361,446,371,433,356],
[494,433,511,0,458,412,572,449,342,330],
[544,386,535,433,0,496,530,551,518,343],
[531,391,530,479,395,0,493,438,490,386],
[492,278,445,319,361,398,0,339,414,316],
[448,305,520,442,340,453,552,0,433,396],
[508,407,458,549,373,401,477,458,0,453],
[491,463,535,561,548,505,575,495,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,400,407,443,449,433,419,424,430],
[441,0,447,428,442,477,460,433,452,456],
[491,444,0,457,458,460,439,449,465,443],
[484,463,434,0,469,473,457,434,450,458],
[448,449,433,422,0,451,442,439,440,431],
[442,414,431,418,440,0,436,420,420,444],
[458,431,452,434,449,455,0,434,436,458],
[472,458,442,457,452,471,457,0,451,454],
[467,439,426,441,451,471,455,440,0,435],
[461,435,448,433,460,447,433,437,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,443,431,437,462,425,416,429,410],
[443,0,453,455,440,459,460,421,448,441],
[448,438,0,458,453,448,437,427,445,434],
[460,436,433,0,451,454,436,435,444,436],
[454,451,438,440,0,446,441,444,438,442],
[429,432,443,437,445,0,436,441,437,436],
[466,431,454,455,450,455,0,425,435,434],
[475,470,464,456,447,450,466,0,437,454],
[462,443,446,447,453,454,456,454,0,446],
[481,450,457,455,449,455,457,437,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,446,433,444,436,430,446,464,436],
[465,0,479,476,445,469,464,467,482,456],
[445,412,0,440,440,453,449,447,435,444],
[458,415,451,0,455,440,444,453,456,469],
[447,446,451,436,0,449,445,456,457,451],
[455,422,438,451,442,0,434,453,457,439],
[461,427,442,447,446,457,0,460,474,455],
[445,424,444,438,435,438,431,0,451,447],
[427,409,456,435,434,434,417,440,0,437],
[455,435,447,422,440,452,436,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,452,433,406,449,456,445,454,457],
[426,0,456,442,439,455,420,474,443,428],
[439,435,0,420,388,426,455,464,483,446],
[458,449,471,0,449,490,447,457,458,440],
[485,452,503,442,0,458,469,471,469,490],
[442,436,465,401,433,0,425,444,462,420],
[435,471,436,444,422,466,0,418,424,415],
[446,417,427,434,420,447,473,0,472,446],
[437,448,408,433,422,429,467,419,0,450],
[434,463,445,451,401,471,476,445,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,448,456,533,449,481,443,473,453],
[451,0,453,459,481,438,457,468,470,437],
[443,438,0,468,466,448,434,440,403,492],
[435,432,423,0,470,515,496,460,461,427],
[358,410,425,421,0,392,410,450,397,358],
[442,453,443,376,499,0,431,486,493,448],
[410,434,457,395,481,460,0,452,478,467],
[448,423,451,431,441,405,439,0,424,441],
[418,421,488,430,494,398,413,467,0,467],
[438,454,399,464,533,443,424,450,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,422,447,437,423,454,468,445,462],
[439,0,419,450,415,422,438,430,438,424],
[469,472,0,459,443,454,448,456,455,451],
[444,441,432,0,461,449,446,454,459,445],
[454,476,448,430,0,444,446,461,456,465],
[468,469,437,442,447,0,451,462,459,457],
[437,453,443,445,445,440,0,448,447,451],
[423,461,435,437,430,429,443,0,449,456],
[446,453,436,432,435,432,444,442,0,462],
[429,467,440,446,426,434,440,435,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,398,431,410,396,383,398,416,438],
[507,0,423,465,438,443,453,430,497,484],
[493,468,0,447,441,480,477,440,480,495],
[460,426,444,0,454,451,431,433,421,481],
[481,453,450,437,0,464,442,435,468,462],
[495,448,411,440,427,0,461,453,479,434],
[508,438,414,460,449,430,0,383,474,479],
[493,461,451,458,456,438,508,0,520,469],
[475,394,411,470,423,412,417,371,0,486],
[453,407,396,410,429,457,412,422,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,438,415,441,416,442,440,407,486],
[462,0,448,450,457,470,447,456,426,480],
[453,443,0,444,468,467,415,416,415,491],
[476,441,447,0,442,467,468,422,435,488],
[450,434,423,449,0,436,426,422,406,462],
[475,421,424,424,455,0,445,384,414,474],
[449,444,476,423,465,446,0,441,427,443],
[451,435,475,469,469,507,450,0,446,480],
[484,465,476,456,485,477,464,445,0,514],
[405,411,400,403,429,417,448,411,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,431,462,432,431,378,436,447,440],
[484,0,470,453,468,487,432,464,467,495],
[460,421,0,461,431,432,446,407,438,443],
[429,438,430,0,448,412,414,366,443,426],
[459,423,460,443,0,458,431,428,470,490],
[460,404,459,479,433,0,391,421,426,461],
[513,459,445,477,460,500,0,454,469,464],
[455,427,484,525,463,470,437,0,480,482],
[444,424,453,448,421,465,422,411,0,456],
[451,396,448,465,401,430,427,409,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,405,404,461,431,392,375,412,401],
[464,0,420,462,482,456,454,460,442,464],
[486,471,0,444,496,471,441,449,462,462],
[487,429,447,0,485,465,457,447,428,482],
[430,409,395,406,0,427,426,395,423,422],
[460,435,420,426,464,0,393,420,446,440],
[499,437,450,434,465,498,0,437,437,442],
[516,431,442,444,496,471,454,0,433,452],
[479,449,429,463,468,445,454,458,0,434],
[490,427,429,409,469,451,449,439,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,454,469,474,458,454,442,443,481],
[425,0,428,450,439,448,446,419,428,461],
[437,463,0,486,476,469,454,451,448,493],
[422,441,405,0,436,446,426,398,411,454],
[417,452,415,455,0,449,453,415,419,451],
[433,443,422,445,442,0,446,436,449,480],
[437,445,437,465,438,445,0,429,425,450],
[449,472,440,493,476,455,462,0,453,481],
[448,463,443,480,472,442,466,438,0,482],
[410,430,398,437,440,411,441,410,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,450,461,456,480,454,496,436,448],
[421,0,423,425,401,445,420,445,415,411],
[441,468,0,474,404,473,472,477,454,443],
[430,466,417,0,422,469,440,485,441,435],
[435,490,487,469,0,465,448,480,470,427],
[411,446,418,422,426,0,449,446,425,426],
[437,471,419,451,443,442,0,468,434,460],
[395,446,414,406,411,445,423,0,439,424],
[455,476,437,450,421,466,457,452,0,439],
[443,480,448,456,464,465,431,467,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,349,365,395,390,430,429,431,380],
[481,0,422,458,385,422,425,411,509,424],
[542,469,0,489,459,439,451,474,541,444],
[526,433,402,0,463,419,464,502,502,441],
[496,506,432,428,0,391,475,485,492,452],
[501,469,452,472,500,0,526,507,503,408],
[461,466,440,427,416,365,0,430,458,444],
[462,480,417,389,406,384,461,0,487,427],
[460,382,350,389,399,388,433,404,0,428],
[511,467,447,450,439,483,447,464,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,464,466,446,478,485,479,394,444],
[376,0,394,409,342,329,431,436,402,337],
[427,497,0,461,417,468,487,419,408,398],
[425,482,430,0,378,375,449,449,452,377],
[445,549,474,513,0,430,520,489,411,447],
[413,562,423,516,461,0,537,464,427,394],
[406,460,404,442,371,354,0,450,350,350],
[412,455,472,442,402,427,441,0,452,427],
[497,489,483,439,480,464,541,439,0,426],
[447,554,493,514,444,497,541,464,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,468,488,456,461,475,426,456,420],
[435,0,445,462,469,475,464,415,431,433],
[423,446,0,459,454,468,462,448,436,441],
[403,429,432,0,458,444,456,404,415,418],
[435,422,437,433,0,452,453,421,425,420],
[430,416,423,447,439,0,448,424,415,397],
[416,427,429,435,438,443,0,424,409,432],
[465,476,443,487,470,467,467,0,450,464],
[435,460,455,476,466,476,482,441,0,437],
[471,458,450,473,471,494,459,427,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,443,473,437,471,489,453,455,439],
[467,0,466,465,453,472,461,485,458,430],
[448,425,0,458,447,470,455,450,434,416],
[418,426,433,0,400,446,439,435,427,415],
[454,438,444,491,0,483,468,454,444,447],
[420,419,421,445,408,0,452,452,421,408],
[402,430,436,452,423,439,0,446,423,428],
[438,406,441,456,437,439,445,0,431,410],
[436,433,457,464,447,470,468,460,0,444],
[452,461,475,476,444,483,463,481,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,443,448,453,418,434,427,473,442],
[474,0,437,443,473,420,441,449,488,431],
[448,454,0,449,426,464,451,470,499,476],
[443,448,442,0,409,404,399,399,493,420],
[438,418,465,482,0,413,418,446,473,473],
[473,471,427,487,478,0,436,440,490,482],
[457,450,440,492,473,455,0,443,506,436],
[464,442,421,492,445,451,448,0,488,469],
[418,403,392,398,418,401,385,403,0,423],
[449,460,415,471,418,409,455,422,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,454,442,432,444,481,475,448,448],
[441,0,432,447,415,429,485,424,435,460],
[437,459,0,428,448,431,471,448,436,444],
[449,444,463,0,441,438,473,449,452,438],
[459,476,443,450,0,465,477,454,452,460],
[447,462,460,453,426,0,470,448,446,442],
[410,406,420,418,414,421,0,439,397,405],
[416,467,443,442,437,443,452,0,430,426],
[443,456,455,439,439,445,494,461,0,448],
[443,431,447,453,431,449,486,465,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,460,472,486,525,492,439,515,503],
[381,0,398,381,421,469,420,431,460,431],
[431,493,0,420,452,455,450,435,461,482],
[419,510,471,0,457,514,475,464,471,426],
[405,470,439,434,0,489,459,398,471,392],
[366,422,436,377,402,0,432,385,417,397],
[399,471,441,416,432,459,0,440,478,413],
[452,460,456,427,493,506,451,0,462,454],
[376,431,430,420,420,474,413,429,0,407],
[388,460,409,465,499,494,478,437,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,449,462,444,477,455,470,472,484],
[423,0,447,429,433,444,435,455,462,447],
[442,444,0,457,446,463,454,443,486,468],
[429,462,434,0,420,494,453,455,465,466],
[447,458,445,471,0,478,470,476,486,503],
[414,447,428,397,413,0,413,435,421,434],
[436,456,437,438,421,478,0,438,476,465],
[421,436,448,436,415,456,453,0,453,467],
[419,429,405,426,405,470,415,438,0,438],
[407,444,423,425,388,457,426,424,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,430,437,429,411,454,431,418,449],
[453,0,476,425,485,488,514,425,440,470],
[461,415,0,450,464,435,499,469,448,438],
[454,466,441,0,472,428,501,438,501,445],
[462,406,427,419,0,430,464,425,409,435],
[480,403,456,463,461,0,433,461,469,472],
[437,377,392,390,427,458,0,426,385,404],
[460,466,422,453,466,430,465,0,446,447],
[473,451,443,390,482,422,506,445,0,473],
[442,421,453,446,456,419,487,444,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,457,504,469,489,466,394,443],
[447,0,429,417,521,487,496,480,421,512],
[447,462,0,455,467,429,475,444,401,451],
[434,474,436,0,443,448,515,438,413,495],
[387,370,424,448,0,440,442,421,379,400],
[422,404,462,443,451,0,462,436,348,407],
[402,395,416,376,449,429,0,397,353,389],
[425,411,447,453,470,455,494,0,454,461],
[497,470,490,478,512,543,538,437,0,496],
[448,379,440,396,491,484,502,430,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,458,433,441,444,425,438,456,430],
[425,0,439,434,434,434,435,440,425,427],
[433,452,0,429,452,448,433,453,440,443],
[458,457,462,0,449,454,443,463,453,422],
[450,457,439,442,0,434,425,449,450,428],
[447,457,443,437,457,0,440,471,452,435],
[466,456,458,448,466,451,0,467,438,459],
[453,451,438,428,442,420,424,0,423,433],
[435,466,451,438,441,439,453,468,0,422],
[461,464,448,469,463,456,432,458,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,424,409,428,431,430,429,433,433],
[442,0,416,433,436,426,428,441,437,424],
[467,475,0,455,443,446,436,457,449,445],
[482,458,436,0,448,440,423,441,456,446],
[463,455,448,443,0,446,454,474,463,476],
[460,465,445,451,445,0,417,470,456,455],
[461,463,455,468,437,474,0,460,453,456],
[462,450,434,450,417,421,431,0,442,436],
[458,454,442,435,428,435,438,449,0,451],
[458,467,446,445,415,436,435,455,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,432,455,457,430,404,452,457,446],
[464,0,459,480,446,437,452,463,451,445],
[459,432,0,449,447,441,429,452,440,470],
[436,411,442,0,419,416,396,422,429,431],
[434,445,444,472,0,430,424,450,455,462],
[461,454,450,475,461,0,431,463,454,465],
[487,439,462,495,467,460,0,464,463,459],
[439,428,439,469,441,428,427,0,428,464],
[434,440,451,462,436,437,428,463,0,461],
[445,446,421,460,429,426,432,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,440,450,445,430,429,452,453,439],
[471,0,432,459,445,441,444,469,456,446],
[451,459,0,466,443,440,468,450,446,440],
[441,432,425,0,443,432,465,460,434,433],
[446,446,448,448,0,438,468,452,449,436],
[461,450,451,459,453,0,468,470,451,438],
[462,447,423,426,423,423,0,454,441,439],
[439,422,441,431,439,421,437,0,447,429],
[438,435,445,457,442,440,450,444,0,437],
[452,445,451,458,455,453,452,462,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,485,447,439,440,453,477,449,452],
[413,0,442,418,408,428,422,441,411,425],
[406,449,0,416,410,423,436,419,437,434],
[444,473,475,0,466,443,461,470,446,437],
[452,483,481,425,0,457,456,464,468,462],
[451,463,468,448,434,0,452,455,451,450],
[438,469,455,430,435,439,0,431,454,445],
[414,450,472,421,427,436,460,0,438,429],
[442,480,454,445,423,440,437,453,0,445],
[439,466,457,454,429,441,446,462,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,512,460,437,449,456,496,438,519],
[445,0,450,473,458,404,446,499,433,526],
[379,441,0,407,434,407,430,467,421,428],
[431,418,484,0,498,482,472,493,484,492],
[454,433,457,393,0,442,440,485,453,463],
[442,487,484,409,449,0,472,498,431,481],
[435,445,461,419,451,419,0,475,447,489],
[395,392,424,398,406,393,416,0,403,435],
[453,458,470,407,438,460,444,488,0,470],
[372,365,463,399,428,410,402,456,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,317,392,345,360,301,404,473,295],
[483,0,501,464,341,530,241,444,329,267],
[574,390,0,510,331,328,488,403,373,441],
[499,427,381,0,309,411,240,478,389,220],
[546,550,560,582,0,586,300,490,463,423],
[531,361,563,480,305,0,240,435,576,391],
[590,650,403,651,591,651,0,527,534,503],
[487,447,488,413,401,456,364,0,529,469],
[418,562,518,502,428,315,357,362,0,427],
[596,624,450,671,468,500,388,422,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,249,526,277,467,299,361,368,305],
[578,0,430,739,457,617,502,334,472,428],
[642,461,0,624,434,654,555,366,408,530],
[365,152,267,0,255,285,342,360,414,195],
[614,434,457,636,0,589,591,445,573,399],
[424,274,237,606,302,0,417,225,368,306],
[592,389,336,549,300,474,0,350,230,330],
[530,557,525,531,446,666,541,0,419,505],
[523,419,483,477,318,523,661,472,0,349],
[586,463,361,696,492,585,561,386,542,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,425,441,412,422,443,456,412,450],
[476,0,464,481,469,487,484,478,466,444],
[466,427,0,463,431,462,445,444,437,471],
[450,410,428,0,428,457,439,452,422,441],
[479,422,460,463,0,468,463,451,453,453],
[469,404,429,434,423,0,442,471,432,437],
[448,407,446,452,428,449,0,458,448,455],
[435,413,447,439,440,420,433,0,425,431],
[479,425,454,469,438,459,443,466,0,469],
[441,447,420,450,438,454,436,460,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,419,425,467,415,438,440,431,452],
[450,0,422,431,447,426,452,446,434,465],
[472,469,0,456,457,443,460,451,467,474],
[466,460,435,0,474,450,476,466,459,476],
[424,444,434,417,0,409,454,434,437,446],
[476,465,448,441,482,0,458,462,466,444],
[453,439,431,415,437,433,0,441,434,440],
[451,445,440,425,457,429,450,0,415,446],
[460,457,424,432,454,425,457,476,0,454],
[439,426,417,415,445,447,451,445,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,396,387,399,410,432,344,385,426],
[455,0,388,419,429,431,420,380,394,308],
[495,503,0,496,435,498,445,386,445,426],
[504,472,395,0,482,486,476,469,479,431],
[492,462,456,409,0,488,514,444,436,467],
[481,460,393,405,403,0,437,455,411,410],
[459,471,446,415,377,454,0,464,457,435],
[547,511,505,422,447,436,427,0,461,412],
[506,497,446,412,455,480,434,430,0,459],
[465,583,465,460,424,481,456,479,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,412,480,473,462,505,547,550,479],
[463,0,391,428,474,392,440,477,507,429],
[479,500,0,457,521,439,512,526,546,458],
[411,463,434,0,456,446,494,467,524,444],
[418,417,370,435,0,416,462,480,464,427],
[429,499,452,445,475,0,476,486,526,482],
[386,451,379,397,429,415,0,428,483,448],
[344,414,365,424,411,405,463,0,400,451],
[341,384,345,367,427,365,408,491,0,407],
[412,462,433,447,464,409,443,440,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,457,445,476,441,452,457,453,439],
[435,0,467,455,479,468,458,452,461,458],
[434,424,0,473,497,461,466,480,464,460],
[446,436,418,0,485,433,435,426,433,453],
[415,412,394,406,0,415,423,431,434,425],
[450,423,430,458,476,0,446,449,458,446],
[439,433,425,456,468,445,0,461,458,437],
[434,439,411,465,460,442,430,0,455,445],
[438,430,427,458,457,433,433,436,0,448],
[452,433,431,438,466,445,454,446,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,469,507,561,494,391,410,477,432],
[459,0,452,443,492,501,409,407,503,446],
[422,439,0,479,474,426,446,394,491,427],
[384,448,412,0,477,394,414,317,522,355],
[330,399,417,414,0,416,365,280,485,341],
[397,390,465,497,475,0,386,320,555,393],
[500,482,445,477,526,505,0,450,577,456],
[481,484,497,574,611,571,441,0,558,477],
[414,388,400,369,406,336,314,333,0,367],
[459,445,464,536,550,498,435,414,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,409,396,407,427,401,395,392,385],
[502,0,481,422,485,432,446,464,466,459],
[482,410,0,463,468,422,439,471,451,431],
[495,469,428,0,455,426,471,422,465,411],
[484,406,423,436,0,458,422,439,426,422],
[464,459,469,465,433,0,444,445,460,448],
[490,445,452,420,469,447,0,480,472,422],
[496,427,420,469,452,446,411,0,431,448],
[499,425,440,426,465,431,419,460,0,420],
[506,432,460,480,469,443,469,443,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,439,426,434,453,455,434,471],
[444,0,456,405,434,441,433,424,398,435],
[442,435,0,423,437,425,437,435,408,459],
[452,486,468,0,456,447,475,471,442,482],
[465,457,454,435,0,428,447,449,421,477],
[457,450,466,444,463,0,469,458,447,457],
[438,458,454,416,444,422,0,452,423,457],
[436,467,456,420,442,433,439,0,438,439],
[457,493,483,449,470,444,468,453,0,481],
[420,456,432,409,414,434,434,452,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,460,427,513,441,497,445,480,425],
[360,0,410,377,416,437,504,417,418,378],
[431,481,0,428,492,429,437,406,470,402],
[464,514,463,0,525,448,470,448,418,416],
[378,475,399,366,0,349,431,426,431,350],
[450,454,462,443,542,0,526,430,500,455],
[394,387,454,421,460,365,0,407,434,374],
[446,474,485,443,465,461,484,0,497,451],
[411,473,421,473,460,391,457,394,0,433],
[466,513,489,475,541,436,517,440,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,409,468,457,395,436,433,433,430],
[447,0,441,435,468,436,467,425,446,455],
[482,450,0,508,462,437,485,450,434,473],
[423,456,383,0,428,454,452,427,432,430],
[434,423,429,463,0,438,461,431,427,440],
[496,455,454,437,453,0,476,446,463,435],
[455,424,406,439,430,415,0,436,457,439],
[458,466,441,464,460,445,455,0,454,462],
[458,445,457,459,464,428,434,437,0,436],
[461,436,418,461,451,456,452,429,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,446,415,483,476,440,447,463,429],
[423,0,456,444,461,470,433,481,443,441],
[445,435,0,449,445,460,455,470,436,442],
[476,447,442,0,430,465,467,469,448,423],
[408,430,446,461,0,457,414,457,437,422],
[415,421,431,426,434,0,423,425,391,403],
[451,458,436,424,477,468,0,453,448,447],
[444,410,421,422,434,466,438,0,431,398],
[428,448,455,443,454,500,443,460,0,458],
[462,450,449,468,469,488,444,493,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,441,461,453,472,461,457,445,460],
[451,0,454,446,446,450,442,456,439,445],
[450,437,0,450,466,448,453,422,455,444],
[430,445,441,0,466,465,454,446,433,434],
[438,445,425,425,0,433,443,447,417,432],
[419,441,443,426,458,0,460,442,432,463],
[430,449,438,437,448,431,0,437,424,464],
[434,435,469,445,444,449,454,0,436,456],
[446,452,436,458,474,459,467,455,0,456],
[431,446,447,457,459,428,427,435,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,446,441,457,482,474,465,436,468],
[411,0,424,415,427,435,424,441,418,433],
[445,467,0,439,449,472,466,470,447,467],
[450,476,452,0,482,454,469,461,436,482],
[434,464,442,409,0,461,467,454,442,451],
[409,456,419,437,430,0,431,441,433,450],
[417,467,425,422,424,460,0,459,417,438],
[426,450,421,430,437,450,432,0,413,434],
[455,473,444,455,449,458,474,478,0,452],
[423,458,424,409,440,441,453,457,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,721,723,432,288,377,561,491,501,485],
[170,0,474,352,328,194,543,269,310,560],
[168,417,0,432,271,237,531,223,353,471],
[459,539,459,0,459,459,505,444,425,436],
[603,563,620,432,0,490,572,437,660,517],
[514,697,654,432,401,0,688,449,435,589],
[330,348,360,386,319,203,0,360,370,494],
[400,622,668,447,454,442,531,0,501,575],
[390,581,538,466,231,456,521,390,0,501],
[406,331,420,455,374,302,397,316,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,436,427,431,415,426,428,397,459],
[459,0,474,455,446,422,434,462,445,436],
[455,417,0,419,418,403,437,419,410,446],
[464,436,472,0,464,417,440,443,408,457],
[460,445,473,427,0,415,453,448,408,465],
[476,469,488,474,476,0,464,446,430,472],
[465,457,454,451,438,427,0,410,438,436],
[463,429,472,448,443,445,481,0,425,445],
[494,446,481,483,483,461,453,466,0,431],
[432,455,445,434,426,419,455,446,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,423,426,444,438,435,434,445,418],
[461,0,443,427,448,460,448,447,461,420],
[468,448,0,428,439,449,417,442,434,437],
[465,464,463,0,452,478,443,431,459,442],
[447,443,452,439,0,454,421,439,442,403],
[453,431,442,413,437,0,409,410,417,400],
[456,443,474,448,470,482,0,443,471,452],
[457,444,449,460,452,481,448,0,447,445],
[446,430,457,432,449,474,420,444,0,431],
[473,471,454,449,488,491,439,446,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,459,463,449,464,453,421,444,463],
[444,0,434,437,447,454,438,438,448,446],
[432,457,0,441,464,446,453,451,457,464],
[428,454,450,0,426,454,446,423,444,455],
[442,444,427,465,0,456,450,455,432,449],
[427,437,445,437,435,0,435,430,453,451],
[438,453,438,445,441,456,0,439,443,456],
[470,453,440,468,436,461,452,0,472,474],
[447,443,434,447,459,438,448,419,0,455],
[428,445,427,436,442,440,435,417,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,439,450,431,420,437,442,460,414],
[461,0,440,476,447,440,416,425,446,426],
[452,451,0,458,436,438,433,434,449,435],
[441,415,433,0,403,423,417,427,429,400],
[460,444,455,488,0,433,437,441,470,432],
[471,451,453,468,458,0,450,448,462,431],
[454,475,458,474,454,441,0,462,463,452],
[449,466,457,464,450,443,429,0,458,420],
[431,445,442,462,421,429,428,433,0,417],
[477,465,456,491,459,460,439,471,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,448,437,433,441,455,436,436,447],
[458,0,456,430,443,450,446,441,451,462],
[443,435,0,447,442,443,448,446,424,451],
[454,461,444,0,451,452,452,446,457,469],
[458,448,449,440,0,456,451,445,443,464],
[450,441,448,439,435,0,449,441,436,475],
[436,445,443,439,440,442,0,436,433,462],
[455,450,445,445,446,450,455,0,456,449],
[455,440,467,434,448,455,458,435,0,478],
[444,429,440,422,427,416,429,442,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,447,451,423,441,463,440,433,434],
[461,0,468,438,452,454,464,465,454,433],
[444,423,0,431,463,434,447,464,468,463],
[440,453,460,0,438,450,472,424,460,443],
[468,439,428,453,0,463,471,478,472,446],
[450,437,457,441,428,0,482,442,441,432],
[428,427,444,419,420,409,0,443,418,439],
[451,426,427,467,413,449,448,0,437,433],
[458,437,423,431,419,450,473,454,0,462],
[457,458,428,448,445,459,452,458,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,448,437,453,420,429,438,421,426],
[461,0,460,477,454,436,464,458,457,461],
[443,431,0,468,435,431,454,450,438,452],
[454,414,423,0,434,422,411,436,416,429],
[438,437,456,457,0,445,434,478,447,465],
[471,455,460,469,446,0,439,494,445,470],
[462,427,437,480,457,452,0,453,443,441],
[453,433,441,455,413,397,438,0,452,448],
[470,434,453,475,444,446,448,439,0,457],
[465,430,439,462,426,421,450,443,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,466,471,419,463,445,426,419,448],
[472,0,458,489,455,424,482,462,468,459],
[425,433,0,448,419,437,440,458,433,428],
[420,402,443,0,421,420,450,444,433,401],
[472,436,472,470,0,455,454,458,438,436],
[428,467,454,471,436,0,437,446,456,454],
[446,409,451,441,437,454,0,459,446,447],
[465,429,433,447,433,445,432,0,431,457],
[472,423,458,458,453,435,445,460,0,454],
[443,432,463,490,455,437,444,434,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,426,424,449,414,428,424,423,426],
[466,0,452,448,466,436,458,467,447,465],
[465,439,0,438,432,416,449,439,425,434],
[467,443,453,0,454,457,452,463,445,442],
[442,425,459,437,0,438,432,453,448,443],
[477,455,475,434,453,0,453,455,444,459],
[463,433,442,439,459,438,0,458,442,454],
[467,424,452,428,438,436,433,0,444,444],
[468,444,466,446,443,447,449,447,0,443],
[465,426,457,449,448,432,437,447,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,393,413,479,417,461,543,427,419],
[423,0,419,372,418,392,438,443,335,358],
[498,472,0,441,438,443,524,442,476,471],
[478,519,450,0,459,452,501,566,428,532],
[412,473,453,432,0,520,464,474,452,520],
[474,499,448,439,371,0,485,461,461,477],
[430,453,367,390,427,406,0,456,373,378],
[348,448,449,325,417,430,435,0,331,402],
[464,556,415,463,439,430,518,560,0,522],
[472,533,420,359,371,414,513,489,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,415,380,400,453,424,449,448,457],
[498,0,457,455,415,469,488,469,479,501],
[476,434,0,457,424,466,421,443,474,468],
[511,436,434,0,430,449,453,442,466,484],
[491,476,467,461,0,484,424,459,447,468],
[438,422,425,442,407,0,421,483,431,441],
[467,403,470,438,467,470,0,472,452,491],
[442,422,448,449,432,408,419,0,427,445],
[443,412,417,425,444,460,439,464,0,467],
[434,390,423,407,423,450,400,446,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,431,417,444,450,407,437,452,423],
[488,0,472,486,475,493,456,458,444,450],
[460,419,0,455,443,444,436,441,444,413],
[474,405,436,0,445,461,427,448,443,410],
[447,416,448,446,0,480,441,427,428,395],
[441,398,447,430,411,0,399,412,429,384],
[484,435,455,464,450,492,0,422,434,439],
[454,433,450,443,464,479,469,0,464,439],
[439,447,447,448,463,462,457,427,0,442],
[468,441,478,481,496,507,452,452,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,425,445,465,419,379,425,459,415],
[460,0,424,480,466,430,409,403,447,440],
[466,467,0,470,451,416,410,411,453,444],
[446,411,421,0,463,411,400,427,425,432],
[426,425,440,428,0,433,394,390,449,423],
[472,461,475,480,458,0,402,447,459,439],
[512,482,481,491,497,489,0,445,493,491],
[466,488,480,464,501,444,446,0,475,458],
[432,444,438,466,442,432,398,416,0,423],
[476,451,447,459,468,452,400,433,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,429,448,432,463,486,409,421,448],
[420,0,437,440,434,442,464,435,439,441],
[462,454,0,456,425,469,480,452,429,491],
[443,451,435,0,451,448,457,454,431,454],
[459,457,466,440,0,471,473,414,449,479],
[428,449,422,443,420,0,475,438,435,455],
[405,427,411,434,418,416,0,411,428,452],
[482,456,439,437,477,453,480,0,461,429],
[470,452,462,460,442,456,463,430,0,416],
[443,450,400,437,412,436,439,462,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,464,440,464,472,458,475,479,432],
[436,0,472,420,464,491,494,465,487,457],
[427,419,0,421,404,461,432,446,455,443],
[451,471,470,0,445,469,473,494,478,468],
[427,427,487,446,0,486,457,454,455,451],
[419,400,430,422,405,0,418,418,443,443],
[433,397,459,418,434,473,0,481,477,453],
[416,426,445,397,437,473,410,0,471,439],
[412,404,436,413,436,448,414,420,0,436],
[459,434,448,423,440,448,438,452,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,426,430,428,419,418,417,434,441],
[444,0,386,441,422,399,462,413,425,444],
[465,505,0,447,459,430,451,446,464,472],
[461,450,444,0,438,425,456,432,477,448],
[463,469,432,453,0,403,440,425,439,434],
[472,492,461,466,488,0,480,467,428,458],
[473,429,440,435,451,411,0,440,460,452],
[474,478,445,459,466,424,451,0,441,492],
[457,466,427,414,452,463,431,450,0,462],
[450,447,419,443,457,433,439,399,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,443,409,504,462,457,463,480,436],
[440,0,472,443,493,396,471,448,451,472],
[448,419,0,373,487,430,407,424,411,421],
[482,448,518,0,512,405,471,452,508,492],
[387,398,404,379,0,375,368,435,404,394],
[429,495,461,486,516,0,506,483,525,479],
[434,420,484,420,523,385,0,469,457,430],
[428,443,467,439,456,408,422,0,510,444],
[411,440,480,383,487,366,434,381,0,418],
[455,419,470,399,497,412,461,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,461,426,366,390,361,398,381,420],
[472,0,498,345,456,476,418,429,406,460],
[430,393,0,404,349,369,337,348,408,377],
[465,546,487,0,464,437,437,540,458,492],
[525,435,542,427,0,467,410,477,354,512],
[501,415,522,454,424,0,420,507,421,531],
[530,473,554,454,481,471,0,481,415,540],
[493,462,543,351,414,384,410,0,406,467],
[510,485,483,433,537,470,476,485,0,490],
[471,431,514,399,379,360,351,424,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,441,421,423,437,441,436,428,454],
[455,0,452,447,427,435,426,464,445,467],
[450,439,0,437,465,420,432,453,450,437],
[470,444,454,0,445,458,443,482,439,467],
[468,464,426,446,0,480,448,477,446,430],
[454,456,471,433,411,0,420,475,449,428],
[450,465,459,448,443,471,0,459,462,454],
[455,427,438,409,414,416,432,0,414,447],
[463,446,441,452,445,442,429,477,0,476],
[437,424,454,424,461,463,437,444,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,613,545,250,492,497,419,533,726],
[403,0,346,356,477,486,522,370,442,296],
[278,545,0,399,369,297,364,530,361,549],
[346,535,492,0,316,444,315,368,591,385],
[641,414,522,575,0,641,507,469,447,507],
[399,405,594,447,250,0,307,485,514,505],
[394,369,527,576,384,584,0,442,576,413],
[472,521,361,523,422,406,449,0,552,385],
[358,449,530,300,444,377,315,339,0,368],
[165,595,342,506,384,386,478,506,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,456,447,455,408,444,424,427,432],
[449,0,453,432,425,413,419,432,457,464],
[435,438,0,434,463,412,401,435,414,433],
[444,459,457,0,433,438,461,462,447,481],
[436,466,428,458,0,447,397,411,430,434],
[483,478,479,453,444,0,430,434,451,457],
[447,472,490,430,494,461,0,463,452,457],
[467,459,456,429,480,457,428,0,422,468],
[464,434,477,444,461,440,439,469,0,489],
[459,427,458,410,457,434,434,423,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,485,375,403,388,273,439,365,452],
[495,0,560,444,473,566,459,529,394,526],
[406,331,0,353,349,284,302,482,405,382],
[516,447,538,0,485,487,428,536,478,391],
[488,418,542,406,0,402,473,455,394,487],
[503,325,607,404,489,0,480,477,419,503],
[618,432,589,463,418,411,0,473,486,445],
[452,362,409,355,436,414,418,0,312,400],
[526,497,486,413,497,472,405,579,0,556],
[439,365,509,500,404,388,446,491,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,434,450,438,455,451,427,448,471],
[433,0,457,457,449,461,454,464,450,454],
[457,434,0,447,429,445,445,437,438,454],
[441,434,444,0,457,448,432,428,452,456],
[453,442,462,434,0,465,463,413,447,445],
[436,430,446,443,426,0,460,422,448,454],
[440,437,446,459,428,431,0,440,436,444],
[464,427,454,463,478,469,451,0,454,449],
[443,441,453,439,444,443,455,437,0,446],
[420,437,437,435,446,437,447,442,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,424,418,407,451,434,458,437,433],
[495,0,437,464,438,504,442,453,475,442],
[467,454,0,459,468,465,463,473,500,423],
[473,427,432,0,441,498,473,451,473,414],
[484,453,423,450,0,455,422,464,463,434],
[440,387,426,393,436,0,430,416,417,406],
[457,449,428,418,469,461,0,447,464,448],
[433,438,418,440,427,475,444,0,429,423],
[454,416,391,418,428,474,427,462,0,407],
[458,449,468,477,457,485,443,468,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,459,442,446,440,431,440,448,430],
[472,0,474,447,452,449,450,438,439,435],
[432,417,0,413,466,423,420,440,454,424],
[449,444,478,0,448,418,450,461,459,433],
[445,439,425,443,0,429,432,434,432,416],
[451,442,468,473,462,0,452,441,457,453],
[460,441,471,441,459,439,0,465,475,439],
[451,453,451,430,457,450,426,0,450,448],
[443,452,437,432,459,434,416,441,0,418],
[461,456,467,458,475,438,452,443,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,477,488,419,486,453,470,470,498],
[405,0,428,431,404,442,438,424,413,423],
[414,463,0,447,441,437,460,519,461,505],
[403,460,444,0,474,466,427,455,460,485],
[472,487,450,417,0,466,469,485,435,479],
[405,449,454,425,425,0,408,445,412,446],
[438,453,431,464,422,483,0,445,444,474],
[421,467,372,436,406,446,446,0,454,463],
[421,478,430,431,456,479,447,437,0,495],
[393,468,386,406,412,445,417,428,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,423,447,453,440,437,444,420,459],
[448,0,439,436,456,435,454,464,457,464],
[468,452,0,467,475,445,465,485,429,470],
[444,455,424,0,428,436,425,454,430,452],
[438,435,416,463,0,432,447,469,436,451],
[451,456,446,455,459,0,474,480,429,445],
[454,437,426,466,444,417,0,466,421,435],
[447,427,406,437,422,411,425,0,405,433],
[471,434,462,461,455,462,470,486,0,475],
[432,427,421,439,440,446,456,458,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,457,457,476,454,425,485,487,443],
[387,0,418,424,452,418,417,437,461,413],
[434,473,0,447,480,418,419,467,498,415],
[434,467,444,0,487,454,448,465,496,431],
[415,439,411,404,0,410,419,451,459,420],
[437,473,473,437,481,0,446,493,501,457],
[466,474,472,443,472,445,0,491,481,464],
[406,454,424,426,440,398,400,0,468,419],
[404,430,393,395,432,390,410,423,0,406],
[448,478,476,460,471,434,427,472,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,443,481,481,501,462,501,477,480],
[437,0,451,436,454,469,457,460,444,479],
[448,440,0,417,446,456,444,487,455,475],
[410,455,474,0,428,487,471,499,425,456],
[410,437,445,463,0,456,430,430,422,453],
[390,422,435,404,435,0,407,436,436,474],
[429,434,447,420,461,484,0,458,433,443],
[390,431,404,392,461,455,433,0,401,453],
[414,447,436,466,469,455,458,490,0,453],
[411,412,416,435,438,417,448,438,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,424,419,430,420,453,442,446,441],
[443,0,446,431,467,444,449,456,445,439],
[467,445,0,457,468,465,475,466,458,458],
[472,460,434,0,480,462,478,471,459,486],
[461,424,423,411,0,427,454,458,434,446],
[471,447,426,429,464,0,464,471,444,460],
[438,442,416,413,437,427,0,448,448,439],
[449,435,425,420,433,420,443,0,427,460],
[445,446,433,432,457,447,443,464,0,443],
[450,452,433,405,445,431,452,431,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,458,455,432,438,446,425,441,445],
[441,0,459,443,450,429,447,456,436,455],
[433,432,0,435,415,411,451,438,429,458],
[436,448,456,0,460,446,445,448,429,462],
[459,441,476,431,0,427,477,444,440,455],
[453,462,480,445,464,0,453,451,453,462],
[445,444,440,446,414,438,0,427,433,444],
[466,435,453,443,447,440,464,0,455,454],
[450,455,462,462,451,438,458,436,0,469],
[446,436,433,429,436,429,447,437,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,509,455,381,427,440,423,422,404],
[456,0,474,470,499,444,498,452,524,432],
[382,417,0,414,385,399,439,405,399,381],
[436,421,477,0,478,424,448,436,468,396],
[510,392,506,413,0,435,484,423,485,423],
[464,447,492,467,456,0,448,384,493,394],
[451,393,452,443,407,443,0,426,445,380],
[468,439,486,455,468,507,465,0,530,455],
[469,367,492,423,406,398,446,361,0,412],
[487,459,510,495,468,497,511,436,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,458,446,442,426,464,460,445],
[435,0,462,434,453,444,447,467,460,469],
[443,429,0,456,445,462,467,467,458,462],
[433,457,435,0,428,425,439,436,464,444],
[445,438,446,463,0,432,441,455,436,460],
[449,447,429,466,459,0,447,460,465,446],
[465,444,424,452,450,444,0,458,445,454],
[427,424,424,455,436,431,433,0,445,424],
[431,431,433,427,455,426,446,446,0,441],
[446,422,429,447,431,445,437,467,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,415,372,414,447,462,439,411,464],
[418,0,409,392,430,435,446,433,424,479],
[476,482,0,411,431,506,499,470,411,450],
[519,499,480,0,482,507,519,537,438,496],
[477,461,460,409,0,493,498,467,450,463],
[444,456,385,384,398,0,439,433,420,416],
[429,445,392,372,393,452,0,438,397,452],
[452,458,421,354,424,458,453,0,436,483],
[480,467,480,453,441,471,494,455,0,500],
[427,412,441,395,428,475,439,408,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,485,479,426,448,468,449,442,435],
[429,0,469,459,443,440,455,451,436,434],
[406,422,0,433,414,439,441,437,438,438],
[412,432,458,0,409,433,436,431,428,441],
[465,448,477,482,0,452,442,456,448,448],
[443,451,452,458,439,0,456,439,435,438],
[423,436,450,455,449,435,0,461,438,450],
[442,440,454,460,435,452,430,0,429,448],
[449,455,453,463,443,456,453,462,0,472],
[456,457,453,450,443,453,441,443,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,446,455,457,478,464,460,453,447],
[460,0,467,431,458,450,470,445,457,461],
[445,424,0,430,439,451,428,435,445,424],
[436,460,461,0,459,465,443,448,448,441],
[434,433,452,432,0,443,439,439,440,441],
[413,441,440,426,448,0,440,423,431,444],
[427,421,463,448,452,451,0,429,429,442],
[431,446,456,443,452,468,462,0,459,434],
[438,434,446,443,451,460,462,432,0,442],
[444,430,467,450,450,447,449,457,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,431,448,418,358,468,426,391,508],
[429,0,378,407,326,272,418,394,360,489],
[460,513,0,563,513,489,556,448,397,599],
[443,484,328,0,439,378,455,410,396,480],
[473,565,378,452,0,384,478,448,353,509],
[533,619,402,513,507,0,480,415,524,565],
[423,473,335,436,413,411,0,397,361,459],
[465,497,443,481,443,476,494,0,424,579],
[500,531,494,495,538,367,530,467,0,554],
[383,402,292,411,382,326,432,312,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,457,439,447,498,437,471,465,448],
[444,0,460,451,443,485,445,440,467,445],
[434,431,0,447,434,445,437,439,468,453],
[452,440,444,0,432,462,439,453,478,427],
[444,448,457,459,0,472,434,451,464,445],
[393,406,446,429,419,0,401,415,447,426],
[454,446,454,452,457,490,0,442,456,433],
[420,451,452,438,440,476,449,0,459,446],
[426,424,423,413,427,444,435,432,0,396],
[443,446,438,464,446,465,458,445,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,451,441,443,444,429,440,434,438],
[458,0,483,455,476,474,439,480,460,475],
[440,408,0,435,449,457,432,447,441,429],
[450,436,456,0,481,443,444,451,433,427],
[448,415,442,410,0,430,427,433,449,431],
[447,417,434,448,461,0,417,444,436,424],
[462,452,459,447,464,474,0,458,469,424],
[451,411,444,440,458,447,433,0,450,433],
[457,431,450,458,442,455,422,441,0,433],
[453,416,462,464,460,467,467,458,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,402,444,415,418,457,464,345,445],
[392,0,417,379,348,358,403,393,310,477],
[489,474,0,382,427,379,487,477,415,495],
[447,512,509,0,421,451,463,459,421,558],
[476,543,464,470,0,476,443,429,471,503],
[473,533,512,440,415,0,459,497,468,469],
[434,488,404,428,448,432,0,438,447,481],
[427,498,414,432,462,394,453,0,343,458],
[546,581,476,470,420,423,444,548,0,527],
[446,414,396,333,388,422,410,433,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,423,432,434,449,449,448,463,405],
[438,0,421,453,453,436,461,471,469,440],
[468,470,0,463,476,432,487,476,477,451],
[459,438,428,0,452,423,454,457,470,421],
[457,438,415,439,0,450,466,455,459,445],
[442,455,459,468,441,0,471,467,475,428],
[442,430,404,437,425,420,0,460,466,420],
[443,420,415,434,436,424,431,0,467,445],
[428,422,414,421,432,416,425,424,0,409],
[486,451,440,470,446,463,471,446,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,482,468,466,482,476,457,477,488],
[448,0,475,460,492,467,465,442,457,466],
[409,416,0,435,454,435,462,415,436,440],
[423,431,456,0,449,429,443,414,432,450],
[425,399,437,442,0,434,403,413,440,440],
[409,424,456,462,457,0,426,422,435,455],
[415,426,429,448,488,465,0,430,442,446],
[434,449,476,477,478,469,461,0,447,438],
[414,434,455,459,451,456,449,444,0,451],
[403,425,451,441,451,436,445,453,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,443,419,443,439,448,436,435,439],
[444,0,436,461,450,444,439,447,456,462],
[448,455,0,460,455,438,448,449,469,457],
[472,430,431,0,440,434,442,450,441,438],
[448,441,436,451,0,446,448,442,446,441],
[452,447,453,457,445,0,436,451,438,437],
[443,452,443,449,443,455,0,431,437,446],
[455,444,442,441,449,440,460,0,436,463],
[456,435,422,450,445,453,454,455,0,440],
[452,429,434,453,450,454,445,428,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,470,469,473,456,463,441,478,455],
[409,0,447,477,449,432,425,424,456,441],
[421,444,0,462,475,440,464,437,467,434],
[422,414,429,0,453,431,424,413,446,416],
[418,442,416,438,0,421,444,464,464,427],
[435,459,451,460,470,0,452,450,465,433],
[428,466,427,467,447,439,0,428,440,431],
[450,467,454,478,427,441,463,0,456,442],
[413,435,424,445,427,426,451,435,0,431],
[436,450,457,475,464,458,460,449,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,439,447,451,409,428,429,426,429],
[484,0,453,463,455,437,455,442,444,448],
[452,438,0,455,468,455,464,441,466,460],
[444,428,436,0,452,433,444,442,437,434],
[440,436,423,439,0,444,437,435,449,435],
[482,454,436,458,447,0,480,437,466,460],
[463,436,427,447,454,411,0,443,432,459],
[462,449,450,449,456,454,448,0,433,438],
[465,447,425,454,442,425,459,458,0,453],
[462,443,431,457,456,431,432,453,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,439,443,460,439,440,430,458,433],
[411,0,431,438,431,412,416,416,426,430],
[452,460,0,452,456,449,417,431,449,455],
[448,453,439,0,471,422,442,432,451,435],
[431,460,435,420,0,426,434,418,440,422],
[452,479,442,469,465,0,432,445,441,447],
[451,475,474,449,457,459,0,446,463,439],
[461,475,460,459,473,446,445,0,441,464],
[433,465,442,440,451,450,428,450,0,451],
[458,461,436,456,469,444,452,427,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,410,414,428,486,324,444,397,467],
[459,0,434,374,440,505,286,445,329,437],
[481,457,0,461,568,547,434,443,440,516],
[477,517,430,0,520,503,482,467,405,459],
[463,451,323,371,0,476,326,440,420,379],
[405,386,344,388,415,0,332,355,336,382],
[567,605,457,409,565,559,0,564,476,503],
[447,446,448,424,451,536,327,0,506,448],
[494,562,451,486,471,555,415,385,0,411],
[424,454,375,432,512,509,388,443,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,425,403,429,398,468,493,439,473],
[449,0,401,394,476,393,413,465,440,444],
[466,490,0,423,415,454,469,497,426,423],
[488,497,468,0,432,469,458,555,458,479],
[462,415,476,459,0,434,472,513,410,477],
[493,498,437,422,457,0,466,475,399,465],
[423,478,422,433,419,425,0,389,463,412],
[398,426,394,336,378,416,502,0,371,408],
[452,451,465,433,481,492,428,520,0,449],
[418,447,468,412,414,426,479,483,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,511,458,402,394,434,380,453,498],
[480,0,550,505,525,443,502,464,482,547],
[380,341,0,400,382,374,356,320,375,480],
[433,386,491,0,428,399,399,423,442,512],
[489,366,509,463,0,430,461,410,509,511],
[497,448,517,492,461,0,483,424,497,556],
[457,389,535,492,430,408,0,406,466,570],
[511,427,571,468,481,467,485,0,537,524],
[438,409,516,449,382,394,425,354,0,478],
[393,344,411,379,380,335,321,367,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,443,469,412,435,449,427,514,406],
[468,0,452,456,435,445,409,394,460,426],
[448,439,0,483,412,487,457,476,472,442],
[422,435,408,0,383,428,454,429,454,422],
[479,456,479,508,0,440,481,461,483,491],
[456,446,404,463,451,0,437,451,492,443],
[442,482,434,437,410,454,0,429,469,398],
[464,497,415,462,430,440,462,0,496,430],
[377,431,419,437,408,399,422,395,0,431],
[485,465,449,469,400,448,493,461,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,402,421,482,458,408,412,422,503],
[406,0,464,454,429,458,479,392,424,515],
[489,427,0,414,445,385,414,419,408,472],
[470,437,477,0,416,401,426,384,440,476],
[409,462,446,475,0,403,432,395,369,436],
[433,433,506,490,488,0,499,439,497,513],
[483,412,477,465,459,392,0,380,388,433],
[479,499,472,507,496,452,511,0,398,509],
[469,467,483,451,522,394,503,493,0,481],
[388,376,419,415,455,378,458,382,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,500,436,511,375,421,480,382,497],
[379,0,478,421,467,409,452,465,425,486],
[391,413,0,390,382,371,380,366,409,443],
[455,470,501,0,397,423,458,500,387,496],
[380,424,509,494,0,441,419,464,398,469],
[516,482,520,468,450,0,498,465,407,518],
[470,439,511,433,472,393,0,504,455,483],
[411,426,525,391,427,426,387,0,418,518],
[509,466,482,504,493,484,436,473,0,563],
[394,405,448,395,422,373,408,373,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,463,459,468,449,451,451,457,439],
[423,0,405,404,454,409,431,426,440,427],
[428,486,0,428,485,431,440,450,436,456],
[432,487,463,0,479,416,443,440,447,448],
[423,437,406,412,0,424,434,427,437,434],
[442,482,460,475,467,0,464,452,456,476],
[440,460,451,448,457,427,0,457,445,435],
[440,465,441,451,464,439,434,0,453,452],
[434,451,455,444,454,435,446,438,0,449],
[452,464,435,443,457,415,456,439,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,432,420,431,445,442,409,431],
[433,0,431,420,399,432,454,414,422,442],
[445,460,0,442,457,445,460,449,458,460],
[459,471,449,0,451,441,462,437,453,453],
[471,492,434,440,0,449,463,439,449,473],
[460,459,446,450,442,0,450,449,435,465],
[446,437,431,429,428,441,0,446,414,441],
[449,477,442,454,452,442,445,0,441,454],
[482,469,433,438,442,456,477,450,0,456],
[460,449,431,438,418,426,450,437,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,532,484,538,421,533,440,490,558],
[404,0,460,432,531,401,430,436,458,478],
[359,431,0,436,438,447,441,419,454,501],
[407,459,455,0,558,352,450,437,520,511],
[353,360,453,333,0,390,403,335,403,421],
[470,490,444,539,501,0,568,493,486,508],
[358,461,450,441,488,323,0,386,446,528],
[451,455,472,454,556,398,505,0,470,568],
[401,433,437,371,488,405,445,421,0,529],
[333,413,390,380,470,383,363,323,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,467,446,483,437,440,439,460,471],
[442,0,458,432,466,441,447,426,449,445],
[424,433,0,423,458,439,436,453,438,440],
[445,459,468,0,484,451,464,442,463,467],
[408,425,433,407,0,433,424,420,425,425],
[454,450,452,440,458,0,450,439,436,453],
[451,444,455,427,467,441,0,440,455,467],
[452,465,438,449,471,452,451,0,452,453],
[431,442,453,428,466,455,436,439,0,455],
[420,446,451,424,466,438,424,438,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,473,477,481,469,470,430,476,488],
[420,0,463,454,482,461,515,398,476,459],
[418,428,0,438,442,463,458,384,412,426],
[414,437,453,0,426,452,470,450,395,446],
[410,409,449,465,0,443,499,424,416,439],
[422,430,428,439,448,0,481,406,443,421],
[421,376,433,421,392,410,0,357,371,430],
[461,493,507,441,467,485,534,0,459,493],
[415,415,479,496,475,448,520,432,0,489],
[403,432,465,445,452,470,461,398,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,315,463,474,181,432,382,398,484],
[505,0,373,601,457,492,344,359,480,431],
[576,518,0,599,484,337,474,524,671,510],
[428,290,292,0,349,288,262,157,451,421],
[417,434,407,542,0,427,472,368,446,444],
[710,399,554,603,464,0,367,425,498,469],
[459,547,417,629,419,524,0,458,461,552],
[509,532,367,734,523,466,433,0,500,534],
[493,411,220,440,445,393,430,391,0,330],
[407,460,381,470,447,422,339,357,561,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,454,458,459,465,445,448,462,457],
[433,0,450,442,463,460,448,458,438,444],
[437,441,0,434,439,460,423,440,451,440],
[433,449,457,0,465,452,451,433,437,445],
[432,428,452,426,0,454,433,432,439,434],
[426,431,431,439,437,0,428,430,443,429],
[446,443,468,440,458,463,0,452,442,438],
[443,433,451,458,459,461,439,0,457,438],
[429,453,440,454,452,448,449,434,0,427],
[434,447,451,446,457,462,453,453,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,440,469,469,434,489,459,493],
[449,0,459,442,492,453,461,506,438,483],
[457,432,0,484,451,472,463,490,476,525],
[451,449,407,0,473,462,422,478,455,516],
[422,399,440,418,0,407,421,460,422,477],
[422,438,419,429,484,0,427,483,471,519],
[457,430,428,469,470,464,0,484,481,535],
[402,385,401,413,431,408,407,0,408,439],
[432,453,415,436,469,420,410,483,0,470],
[398,408,366,375,414,372,356,452,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,414,420,422,446,429,469,443,391],
[439,0,440,414,437,429,440,467,433,405],
[477,451,0,426,433,458,446,453,433,428],
[471,477,465,0,431,418,442,469,446,433],
[469,454,458,460,0,442,459,455,453,421],
[445,462,433,473,449,0,452,476,433,436],
[462,451,445,449,432,439,0,479,422,423],
[422,424,438,422,436,415,412,0,419,389],
[448,458,458,445,438,458,469,472,0,448],
[500,486,463,458,470,455,468,502,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,456,463,498,491,441,470,475,449],
[411,0,411,437,464,443,390,402,432,444],
[435,480,0,436,448,444,430,441,441,446],
[428,454,455,0,474,456,448,455,446,460],
[393,427,443,417,0,425,419,413,430,446],
[400,448,447,435,466,0,424,466,445,481],
[450,501,461,443,472,467,0,457,439,461],
[421,489,450,436,478,425,434,0,442,461],
[416,459,450,445,461,446,452,449,0,458],
[442,447,445,431,445,410,430,430,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,412,387,451,444,470,380,423,419],
[452,0,456,429,477,424,477,449,434,438],
[479,435,0,428,438,424,486,436,430,434],
[504,462,463,0,457,446,470,424,456,439],
[440,414,453,434,0,467,458,439,444,431],
[447,467,467,445,424,0,461,397,446,438],
[421,414,405,421,433,430,0,439,417,395],
[511,442,455,467,452,494,452,0,474,468],
[468,457,461,435,447,445,474,417,0,435],
[472,453,457,452,460,453,496,423,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,417,453,453,454,438,443,423,440],
[471,0,448,489,467,478,461,444,465,465],
[474,443,0,479,465,451,456,464,466,460],
[438,402,412,0,459,463,415,433,436,439],
[438,424,426,432,0,437,424,438,412,453],
[437,413,440,428,454,0,416,440,441,423],
[453,430,435,476,467,475,0,454,437,466],
[448,447,427,458,453,451,437,0,468,450],
[468,426,425,455,479,450,454,423,0,457],
[451,426,431,452,438,468,425,441,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,537,465,462,504,432,502,445,453],
[432,0,483,416,474,441,429,476,459,416],
[354,408,0,416,387,436,446,436,434,369],
[426,475,475,0,464,483,461,462,493,450],
[429,417,504,427,0,501,464,477,511,432],
[387,450,455,408,390,0,434,488,500,470],
[459,462,445,430,427,457,0,449,474,423],
[389,415,455,429,414,403,442,0,507,421],
[446,432,457,398,380,391,417,384,0,395],
[438,475,522,441,459,421,468,470,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,394,406,418,452,410,447,405,394],
[444,0,476,401,412,453,412,434,397,384],
[497,415,0,418,420,482,429,423,439,411],
[485,490,473,0,440,472,451,424,472,462],
[473,479,471,451,0,493,452,440,467,412],
[439,438,409,419,398,0,435,432,453,407],
[481,479,462,440,439,456,0,445,459,442],
[444,457,468,467,451,459,446,0,421,403],
[486,494,452,419,424,438,432,470,0,420],
[497,507,480,429,479,484,449,488,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,481,477,417,476,433,472,479,472],
[429,0,457,446,431,433,431,444,389,508],
[410,434,0,449,354,405,451,491,452,376],
[414,445,442,0,518,397,465,380,436,492],
[474,460,537,373,0,518,530,476,448,470],
[415,458,486,494,373,0,474,450,470,562],
[458,460,440,426,361,417,0,433,381,410],
[419,447,400,511,415,441,458,0,457,378],
[412,502,439,455,443,421,510,434,0,419],
[419,383,515,399,421,329,481,513,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,448,461,436,479,450,442,459,492],
[422,0,432,429,431,449,449,448,422,455],
[443,459,0,472,469,477,459,451,441,487],
[430,462,419,0,457,434,450,453,438,461],
[455,460,422,434,0,454,437,462,431,451],
[412,442,414,457,437,0,470,436,404,455],
[441,442,432,441,454,421,0,450,446,461],
[449,443,440,438,429,455,441,0,431,462],
[432,469,450,453,460,487,445,460,0,453],
[399,436,404,430,440,436,430,429,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,468,439,473,476,461,453,480,497],
[403,0,416,414,423,427,417,426,404,430],
[423,475,0,449,481,447,446,471,447,450],
[452,477,442,0,465,444,449,457,467,469],
[418,468,410,426,0,443,423,438,453,419],
[415,464,444,447,448,0,451,457,476,474],
[430,474,445,442,468,440,0,438,468,457],
[438,465,420,434,453,434,453,0,466,444],
[411,487,444,424,438,415,423,425,0,446],
[394,461,441,422,472,417,434,447,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,469,439,439,458,460,445,438],
[431,0,446,444,434,433,446,425,454,428],
[424,445,0,456,447,452,456,441,443,444],
[422,447,435,0,435,416,441,415,423,422],
[452,457,444,456,0,457,437,441,430,435],
[452,458,439,475,434,0,440,423,425,447],
[433,445,435,450,454,451,0,443,430,443],
[431,466,450,476,450,468,448,0,439,425],
[446,437,448,468,461,466,461,452,0,446],
[453,463,447,469,456,444,448,466,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,459,459,479,465,451,425,523,497],
[407,0,455,385,469,415,399,424,483,423],
[432,436,0,371,414,450,399,454,519,467],
[432,506,520,0,513,479,443,462,547,527],
[412,422,477,378,0,400,404,372,485,456],
[426,476,441,412,491,0,447,454,536,465],
[440,492,492,448,487,444,0,442,556,471],
[466,467,437,429,519,437,449,0,526,446],
[368,408,372,344,406,355,335,365,0,413],
[394,468,424,364,435,426,420,445,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,422,500,493,470,450,466,484,463],
[436,0,420,455,445,467,430,469,462,443],
[469,471,0,517,483,461,428,434,496,465],
[391,436,374,0,458,417,413,415,433,422],
[398,446,408,433,0,398,417,425,430,422],
[421,424,430,474,493,0,422,426,459,447],
[441,461,463,478,474,469,0,497,515,459],
[425,422,457,476,466,465,394,0,479,427],
[407,429,395,458,461,432,376,412,0,445],
[428,448,426,469,469,444,432,464,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,488,472,427,471,479,441,454,507],
[424,0,480,453,430,450,464,435,463,469],
[403,411,0,411,402,389,416,373,416,402],
[419,438,480,0,423,430,450,450,463,437],
[464,461,489,468,0,476,448,440,484,481],
[420,441,502,461,415,0,455,486,461,460],
[412,427,475,441,443,436,0,457,444,468],
[450,456,518,441,451,405,434,0,441,503],
[437,428,475,428,407,430,447,450,0,433],
[384,422,489,454,410,431,423,388,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,361,475,470,370,444,484,449,434],
[497,0,437,456,498,388,449,423,502,399],
[530,454,0,505,516,388,468,396,478,453],
[416,435,386,0,485,421,405,406,449,417],
[421,393,375,406,0,363,428,420,495,352],
[521,503,503,470,528,0,419,490,532,466],
[447,442,423,486,463,472,0,485,499,437],
[407,468,495,485,471,401,406,0,446,438],
[442,389,413,442,396,359,392,445,0,428],
[457,492,438,474,539,425,454,453,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,426,440,432,434,448,448,457,461],
[455,0,440,453,449,464,461,455,444,463],
[465,451,0,465,445,461,438,459,454,460],
[451,438,426,0,451,457,463,451,461,471],
[459,442,446,440,0,445,456,441,478,460],
[457,427,430,434,446,0,449,437,448,454],
[443,430,453,428,435,442,0,444,443,455],
[443,436,432,440,450,454,447,0,444,453],
[434,447,437,430,413,443,448,447,0,449],
[430,428,431,420,431,437,436,438,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,455,445,407,441,455,452,417,435],
[460,0,453,450,470,450,438,479,441,451],
[436,438,0,415,466,432,413,438,422,423],
[446,441,476,0,446,414,466,457,417,406],
[484,421,425,445,0,426,453,454,487,421],
[450,441,459,477,465,0,456,473,452,428],
[436,453,478,425,438,435,0,428,479,469],
[439,412,453,434,437,418,463,0,443,442],
[474,450,469,474,404,439,412,448,0,469],
[456,440,468,485,470,463,422,449,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,470,459,443,456,490,505,434,438],
[398,0,429,434,421,384,461,424,401,442],
[421,462,0,420,402,395,425,450,438,405],
[432,457,471,0,452,426,467,469,425,454],
[448,470,489,439,0,460,476,518,462,441],
[435,507,496,465,431,0,447,506,470,432],
[401,430,466,424,415,444,0,485,442,410],
[386,467,441,422,373,385,406,0,408,393],
[457,490,453,466,429,421,449,483,0,432],
[453,449,486,437,450,459,481,498,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,449,455,476,462,446,434,457],
[435,0,431,407,440,448,461,439,385,423],
[443,460,0,447,453,489,451,450,449,459],
[442,484,444,0,461,490,495,478,446,446],
[436,451,438,430,0,488,426,415,444,463],
[415,443,402,401,403,0,423,393,392,440],
[429,430,440,396,465,468,0,432,420,472],
[445,452,441,413,476,498,459,0,418,479],
[457,506,442,445,447,499,471,473,0,480],
[434,468,432,445,428,451,419,412,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,426,391,442,404,429,461,439,428],
[437,0,466,463,474,437,452,478,430,473],
[465,425,0,446,465,423,460,485,440,450],
[500,428,445,0,490,432,451,460,448,467],
[449,417,426,401,0,404,413,441,427,418],
[487,454,468,459,487,0,456,484,440,478],
[462,439,431,440,478,435,0,483,453,464],
[430,413,406,431,450,407,408,0,438,442],
[452,461,451,443,464,451,438,453,0,438],
[463,418,441,424,473,413,427,449,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,461,410,410,371,441,423,462,446],
[504,0,458,485,453,415,460,425,471,464],
[430,433,0,420,443,424,483,422,424,430],
[481,406,471,0,435,399,457,438,453,438],
[481,438,448,456,0,390,497,435,471,425],
[520,476,467,492,501,0,477,442,464,466],
[450,431,408,434,394,414,0,464,466,406],
[468,466,469,453,456,449,427,0,474,444],
[429,420,467,438,420,427,425,417,0,402],
[445,427,461,453,466,425,485,447,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,490,465,457,434,457,459,439,490],
[449,0,462,441,450,429,420,439,452,443],
[401,429,0,423,438,400,409,403,402,440],
[426,450,468,0,461,445,436,441,418,470],
[434,441,453,430,0,427,435,432,411,446],
[457,462,491,446,464,0,455,458,441,469],
[434,471,482,455,456,436,0,445,438,460],
[432,452,488,450,459,433,446,0,414,466],
[452,439,489,473,480,450,453,477,0,476],
[401,448,451,421,445,422,431,425,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,439,419,485,465,430,452,431,448],
[452,0,426,440,457,449,465,452,450,430],
[452,465,0,441,468,493,447,481,440,460],
[472,451,450,0,458,442,465,458,423,420],
[406,434,423,433,0,445,458,492,385,440],
[426,442,398,449,446,0,442,461,400,421],
[461,426,444,426,433,449,0,441,431,435],
[439,439,410,433,399,430,450,0,422,424],
[460,441,451,468,506,491,460,469,0,462],
[443,461,431,471,451,470,456,467,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,438,449,434,438,492,464,461,464],
[421,0,441,438,444,451,500,442,412,462],
[453,450,0,450,443,440,479,434,467,445],
[442,453,441,0,426,460,449,415,484,440],
[457,447,448,465,0,451,463,443,460,471],
[453,440,451,431,440,0,459,422,487,445],
[399,391,412,442,428,432,0,435,464,460],
[427,449,457,476,448,469,456,0,464,458],
[430,479,424,407,431,404,427,427,0,448],
[427,429,446,451,420,446,431,433,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,450,458,450,451,453,437,443,443],
[421,0,436,455,439,435,439,435,421,455],
[441,455,0,459,440,448,455,460,452,453],
[433,436,432,0,443,434,443,428,476,432],
[441,452,451,448,0,454,448,444,445,448],
[440,456,443,457,437,0,443,467,461,450],
[438,452,436,448,443,448,0,449,422,438],
[454,456,431,463,447,424,442,0,441,454],
[448,470,439,415,446,430,469,450,0,443],
[448,436,438,459,443,441,453,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,513,441,460,460,449,466,468,459],
[460,0,513,454,427,448,468,447,480,488],
[378,378,0,386,395,403,431,410,434,401],
[450,437,505,0,449,461,452,455,464,467],
[431,464,496,442,0,462,485,441,455,444],
[431,443,488,430,429,0,443,455,435,428],
[442,423,460,439,406,448,0,457,443,458],
[425,444,481,436,450,436,434,0,463,452],
[423,411,457,427,436,456,448,428,0,438],
[432,403,490,424,447,463,433,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,427,402,391,437,476,433,443,413],
[493,0,469,441,467,509,500,503,493,461],
[464,422,0,448,438,488,499,488,459,424],
[489,450,443,0,465,471,508,481,478,436],
[500,424,453,426,0,455,477,463,484,437],
[454,382,403,420,436,0,446,440,434,420],
[415,391,392,383,414,445,0,454,408,387],
[458,388,403,410,428,451,437,0,444,427],
[448,398,432,413,407,457,483,447,0,443],
[478,430,467,455,454,471,504,464,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,460,440,430,439,460,450,455,447],
[428,0,458,429,449,424,475,456,452,440],
[431,433,0,413,412,430,481,445,428,434],
[451,462,478,0,444,458,513,478,476,475],
[461,442,479,447,0,433,489,460,458,452],
[452,467,461,433,458,0,487,485,472,475],
[431,416,410,378,402,404,0,424,420,408],
[441,435,446,413,431,406,467,0,427,437],
[436,439,463,415,433,419,471,464,0,439],
[444,451,457,416,439,416,483,454,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,478,441,453,456,452,474,454,456],
[451,0,442,442,437,456,449,464,436,454],
[413,449,0,413,435,456,437,441,445,447],
[450,449,478,0,444,450,460,471,466,463],
[438,454,456,447,0,464,460,451,447,449],
[435,435,435,441,427,0,423,438,443,441],
[439,442,454,431,431,468,0,451,437,461],
[417,427,450,420,440,453,440,0,425,421],
[437,455,446,425,444,448,454,466,0,440],
[435,437,444,428,442,450,430,470,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,460,454,491,449,430,466,431,443],
[452,0,443,452,474,450,444,449,467,442],
[431,448,0,449,456,442,444,435,433,440],
[437,439,442,0,449,438,442,444,437,428],
[400,417,435,442,0,425,440,447,428,426],
[442,441,449,453,466,0,445,450,434,433],
[461,447,447,449,451,446,0,445,433,424],
[425,442,456,447,444,441,446,0,446,425],
[460,424,458,454,463,457,458,445,0,450],
[448,449,451,463,465,458,467,466,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,403,421,447,460,406,464,432,411],
[514,0,471,538,469,522,455,528,421,433],
[488,420,0,512,487,524,511,546,477,462],
[470,353,379,0,488,477,484,461,447,415],
[444,422,404,403,0,452,462,409,417,410],
[431,369,367,414,439,0,457,452,426,420],
[485,436,380,407,429,434,0,427,463,385],
[427,363,345,430,482,439,464,0,404,409],
[459,470,414,444,474,465,428,487,0,428],
[480,458,429,476,481,471,506,482,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,435,427,438,417,438,440,439,414],
[461,0,453,451,445,443,469,491,457,450],
[456,438,0,437,457,430,447,474,448,434],
[464,440,454,0,450,442,446,471,460,434],
[453,446,434,441,0,438,428,458,451,439],
[474,448,461,449,453,0,442,462,451,445],
[453,422,444,445,463,449,0,483,427,452],
[451,400,417,420,433,429,408,0,433,430],
[452,434,443,431,440,440,464,458,0,431],
[477,441,457,457,452,446,439,461,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,441,437,429,447,442,439,448,444],
[431,0,444,434,432,443,449,440,443,436],
[450,447,0,447,412,430,417,430,441,439],
[454,457,444,0,427,441,439,434,438,442],
[462,459,479,464,0,438,435,468,457,445],
[444,448,461,450,453,0,429,458,441,463],
[449,442,474,452,456,462,0,456,466,460],
[452,451,461,457,423,433,435,0,460,447],
[443,448,450,453,434,450,425,431,0,446],
[447,455,452,449,446,428,431,444,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,454,444,400,424,402,402,406,356],
[462,0,422,462,445,430,405,377,430,427],
[437,469,0,500,438,418,403,466,447,402],
[447,429,391,0,435,445,401,385,417,363],
[491,446,453,456,0,433,396,457,427,383],
[467,461,473,446,458,0,418,427,457,408],
[489,486,488,490,495,473,0,429,478,434],
[489,514,425,506,434,464,462,0,469,475],
[485,461,444,474,464,434,413,422,0,435],
[535,464,489,528,508,483,457,416,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,439,449,486,440,442,445,467,477],
[453,0,426,428,444,453,434,447,459,447],
[452,465,0,472,473,440,465,493,466,496],
[442,463,419,0,466,431,458,442,455,437],
[405,447,418,425,0,424,453,435,455,445],
[451,438,451,460,467,0,472,461,478,476],
[449,457,426,433,438,419,0,469,453,459],
[446,444,398,449,456,430,422,0,410,441],
[424,432,425,436,436,413,438,481,0,460],
[414,444,395,454,446,415,432,450,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,423,456,446,460,436,438,447,479],
[443,0,427,449,446,485,486,450,453,476],
[468,464,0,476,466,465,492,436,461,481],
[435,442,415,0,439,439,466,442,461,452],
[445,445,425,452,0,446,465,400,440,455],
[431,406,426,452,445,0,454,420,456,459],
[455,405,399,425,426,437,0,401,412,430],
[453,441,455,449,491,471,490,0,457,470],
[444,438,430,430,451,435,479,434,0,483],
[412,415,410,439,436,432,461,421,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,457,445,452,497,454,452,473,453],
[440,0,437,466,415,456,445,429,468,465],
[434,454,0,461,436,470,457,465,457,444],
[446,425,430,0,417,474,419,459,418,443],
[439,476,455,474,0,477,441,470,454,471],
[394,435,421,417,414,0,402,422,427,425],
[437,446,434,472,450,489,0,467,456,479],
[439,462,426,432,421,469,424,0,440,458],
[418,423,434,473,437,464,435,451,0,451],
[438,426,447,448,420,466,412,433,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,452,470,422,435,465,433,481,442],
[443,0,478,450,455,426,443,451,448,454],
[439,413,0,427,428,445,478,467,458,485],
[421,441,464,0,431,447,434,437,468,455],
[469,436,463,460,0,457,446,486,469,487],
[456,465,446,444,434,0,461,435,470,468],
[426,448,413,457,445,430,0,414,436,452],
[458,440,424,454,405,456,477,0,465,428],
[410,443,433,423,422,421,455,426,0,431],
[449,437,406,436,404,423,439,463,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,464,462,443,479,453,456,459,463],
[451,0,458,449,456,457,456,454,455,427],
[427,433,0,475,460,460,438,449,435,435],
[429,442,416,0,420,421,415,451,429,462],
[448,435,431,471,0,464,457,457,473,431],
[412,434,431,470,427,0,441,450,456,441],
[438,435,453,476,434,450,0,457,449,439],
[435,437,442,440,434,441,434,0,461,439],
[432,436,456,462,418,435,442,430,0,433],
[428,464,456,429,460,450,452,452,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,435,471,457,464,458,451,471,478],
[432,0,420,464,434,441,432,428,420,433],
[456,471,0,469,462,454,458,453,440,461],
[420,427,422,0,455,441,442,422,437,463],
[434,457,429,436,0,460,438,455,420,450],
[427,450,437,450,431,0,433,450,429,460],
[433,459,433,449,453,458,0,426,444,465],
[440,463,438,469,436,441,465,0,432,437],
[420,471,451,454,471,462,447,459,0,469],
[413,458,430,428,441,431,426,454,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,572,443,378,458,458,491,581,526,474],
[319,0,424,302,415,441,394,565,471,427],
[448,467,0,449,424,398,276,514,556,500],
[513,589,442,0,613,462,542,695,505,502],
[433,476,467,278,0,352,501,506,427,424],
[433,450,493,429,539,0,496,637,512,418],
[400,497,615,349,390,395,0,569,474,422],
[310,326,377,196,385,254,322,0,426,269],
[365,420,335,386,464,379,417,465,0,388],
[417,464,391,389,467,473,469,622,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,432,447,447,451,442,442,461,446],
[435,0,414,462,427,438,459,446,442,416],
[459,477,0,476,445,477,452,480,462,465],
[444,429,415,0,420,429,433,460,423,414],
[444,464,446,471,0,469,460,458,453,461],
[440,453,414,462,422,0,449,438,452,422],
[449,432,439,458,431,442,0,446,455,433],
[449,445,411,431,433,453,445,0,455,439],
[430,449,429,468,438,439,436,436,0,444],
[445,475,426,477,430,469,458,452,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,444,437,440,442,445,429,435,427],
[453,0,442,463,453,446,453,442,452,440],
[447,449,0,446,442,454,439,461,445,442],
[454,428,445,0,442,444,439,420,440,425],
[451,438,449,449,0,439,464,437,439,432],
[449,445,437,447,452,0,447,424,458,444],
[446,438,452,452,427,444,0,445,446,425],
[462,449,430,471,454,467,446,0,456,455],
[456,439,446,451,452,433,445,435,0,441],
[464,451,449,466,459,447,466,436,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,431,463,454,454,441,458,440,439],
[439,0,414,427,439,440,418,457,445,419],
[460,477,0,448,474,451,439,470,438,450],
[428,464,443,0,428,430,423,438,435,420],
[437,452,417,463,0,446,448,452,447,425],
[437,451,440,461,445,0,446,468,441,432],
[450,473,452,468,443,445,0,492,445,446],
[433,434,421,453,439,423,399,0,419,413],
[451,446,453,456,444,450,446,472,0,433],
[452,472,441,471,466,459,445,478,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,443,417,405,434,429,431,443,440],
[444,0,459,432,416,448,438,434,452,434],
[448,432,0,432,415,437,434,447,454,429],
[474,459,459,0,423,456,455,459,461,437],
[486,475,476,468,0,475,445,465,484,455],
[457,443,454,435,416,0,453,450,456,446],
[462,453,457,436,446,438,0,459,459,444],
[460,457,444,432,426,441,432,0,449,457],
[448,439,437,430,407,435,432,442,0,419],
[451,457,462,454,436,445,447,434,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,448,432,451,451,447,420,465,448],
[426,0,454,428,441,448,446,461,420,452],
[443,437,0,453,426,433,423,437,459,441],
[459,463,438,0,431,426,425,439,447,438],
[440,450,465,460,0,463,425,426,441,438],
[440,443,458,465,428,0,420,447,439,423],
[444,445,468,466,466,471,0,437,461,448],
[471,430,454,452,465,444,454,0,447,432],
[426,471,432,444,450,452,430,444,0,467],
[443,439,450,453,453,468,443,459,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,419,418,365,472,418,498,415,487],
[422,0,419,419,424,479,446,491,435,475],
[472,472,0,446,467,480,422,484,485,526],
[473,472,445,0,414,463,464,486,492,511],
[526,467,424,477,0,494,456,465,500,545],
[419,412,411,428,397,0,381,480,456,425],
[473,445,469,427,435,510,0,468,440,466],
[393,400,407,405,426,411,423,0,407,428],
[476,456,406,399,391,435,451,484,0,434],
[404,416,365,380,346,466,425,463,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,484,491,409,462,408,459,475,490],
[446,0,432,432,443,466,420,434,431,492],
[407,459,0,444,451,438,413,398,397,443],
[400,459,447,0,406,468,431,416,421,412],
[482,448,440,485,0,493,447,444,455,457],
[429,425,453,423,398,0,355,455,428,444],
[483,471,478,460,444,536,0,467,424,471],
[432,457,493,475,447,436,424,0,397,457],
[416,460,494,470,436,463,467,494,0,472],
[401,399,448,479,434,447,420,434,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,415,439,451,457,461,504,440,457],
[430,0,398,437,447,426,424,474,454,435],
[476,493,0,475,437,483,446,469,467,460],
[452,454,416,0,419,434,426,464,464,441],
[440,444,454,472,0,466,458,481,455,451],
[434,465,408,457,425,0,408,471,443,492],
[430,467,445,465,433,483,0,500,467,493],
[387,417,422,427,410,420,391,0,425,459],
[451,437,424,427,436,448,424,466,0,461],
[434,456,431,450,440,399,398,432,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,405,475,539,453,465,470,437,467],
[497,0,446,482,526,474,521,476,367,454],
[486,445,0,477,577,444,476,517,434,482],
[416,409,414,0,479,477,470,476,391,487],
[352,365,314,412,0,362,380,477,352,366],
[438,417,447,414,529,0,477,491,401,488],
[426,370,415,421,511,414,0,441,368,445],
[421,415,374,415,414,400,450,0,399,393],
[454,524,457,500,539,490,523,492,0,429],
[424,437,409,404,525,403,446,498,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,407,470,428,451,447,450,448,461],
[457,0,409,483,430,424,442,450,422,450],
[484,482,0,495,465,466,471,445,444,492],
[421,408,396,0,452,435,414,441,423,458],
[463,461,426,439,0,470,473,465,454,499],
[440,467,425,456,421,0,460,459,442,467],
[444,449,420,477,418,431,0,443,442,470],
[441,441,446,450,426,432,448,0,426,463],
[443,469,447,468,437,449,449,465,0,467],
[430,441,399,433,392,424,421,428,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,484,420,380,391,452,512,476,372],
[469,0,462,379,396,376,457,451,398,392],
[407,429,0,413,417,344,447,432,420,408],
[471,512,478,0,422,434,459,504,449,448],
[511,495,474,469,0,459,499,498,460,443],
[500,515,547,457,432,0,478,495,451,447],
[439,434,444,432,392,413,0,445,459,368],
[379,440,459,387,393,396,446,0,407,343],
[415,493,471,442,431,440,432,484,0,421],
[519,499,483,443,448,444,523,548,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,439,443,445,422,379,472,419,431],
[461,0,449,461,432,455,429,466,451,460],
[452,442,0,446,464,430,429,477,472,469],
[448,430,445,0,423,426,413,432,440,438],
[446,459,427,468,0,464,466,450,447,450],
[469,436,461,465,427,0,441,485,451,463],
[512,462,462,478,425,450,0,499,448,469],
[419,425,414,459,441,406,392,0,417,446],
[472,440,419,451,444,440,443,474,0,453],
[460,431,422,453,441,428,422,445,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,451,479,404,473,438,450,446,451],
[404,0,451,439,386,418,425,407,421,421],
[440,440,0,440,425,438,427,433,424,434],
[412,452,451,0,432,427,427,414,420,417],
[487,505,466,459,0,451,462,470,452,437],
[418,473,453,464,440,0,461,448,453,474],
[453,466,464,464,429,430,0,451,441,418],
[441,484,458,477,421,443,440,0,438,445],
[445,470,467,471,439,438,450,453,0,440],
[440,470,457,474,454,417,473,446,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,445,417,435,442,440,430,432,434],
[464,0,444,473,448,461,456,469,472,451],
[446,447,0,435,451,457,454,437,439,460],
[474,418,456,0,427,423,458,454,450,471],
[456,443,440,464,0,452,456,451,452,433],
[449,430,434,468,439,0,480,462,457,459],
[451,435,437,433,435,411,0,454,446,446],
[461,422,454,437,440,429,437,0,433,467],
[459,419,452,441,439,434,445,458,0,450],
[457,440,431,420,458,432,445,424,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,518,498,522,484,499,473,427,531],
[427,0,486,495,506,476,471,486,470,478],
[373,405,0,434,488,502,467,445,426,485],
[393,396,457,0,495,472,459,466,435,483],
[369,385,403,396,0,424,409,404,378,447],
[407,415,389,419,467,0,394,376,374,410],
[392,420,424,432,482,497,0,459,445,448],
[418,405,446,425,487,515,432,0,408,468],
[464,421,465,456,513,517,446,483,0,470],
[360,413,406,408,444,481,443,423,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,461,422,442,439,437,438,461,501],
[432,0,430,436,429,429,439,423,437,523],
[430,461,0,410,439,419,415,414,428,481],
[469,455,481,0,476,448,447,424,475,484],
[449,462,452,415,0,425,474,462,421,538],
[452,462,472,443,466,0,451,433,449,521],
[454,452,476,444,417,440,0,444,456,488],
[453,468,477,467,429,458,447,0,488,511],
[430,454,463,416,470,442,435,403,0,453],
[390,368,410,407,353,370,403,380,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,472,430,473,475,454,481,502,508],
[454,0,468,429,458,437,426,452,481,474],
[419,423,0,446,434,455,451,426,495,434],
[461,462,445,0,477,431,458,486,493,452],
[418,433,457,414,0,430,406,435,460,451],
[416,454,436,460,461,0,453,470,460,446],
[437,465,440,433,485,438,0,469,451,465],
[410,439,465,405,456,421,422,0,455,473],
[389,410,396,398,431,431,440,436,0,431],
[383,417,457,439,440,445,426,418,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,472,502,432,474,452,434,446,453],
[411,0,453,503,432,477,425,450,457,455],
[419,438,0,448,423,465,452,402,473,436],
[389,388,443,0,418,422,445,408,420,420],
[459,459,468,473,0,444,451,435,417,441],
[417,414,426,469,447,0,432,409,442,450],
[439,466,439,446,440,459,0,431,452,428],
[457,441,489,483,456,482,460,0,470,474],
[445,434,418,471,474,449,439,421,0,461],
[438,436,455,471,450,441,463,417,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,410,453,467,434,468,469,452,436],
[418,0,403,406,405,401,407,443,401,422],
[481,488,0,449,448,440,478,496,462,475],
[438,485,442,0,431,458,468,509,456,466],
[424,486,443,460,0,464,464,457,434,463],
[457,490,451,433,427,0,485,508,430,458],
[423,484,413,423,427,406,0,449,412,436],
[422,448,395,382,434,383,442,0,388,413],
[439,490,429,435,457,461,479,503,0,473],
[455,469,416,425,428,433,455,478,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,498,483,360,477,427,394,445,445],
[445,0,509,504,421,510,457,353,454,450],
[393,382,0,487,351,418,409,343,442,406],
[408,387,404,0,372,474,360,360,427,400],
[531,470,540,519,0,565,454,399,496,500],
[414,381,473,417,326,0,354,409,415,414],
[464,434,482,531,437,537,0,459,547,538],
[497,538,548,531,492,482,432,0,539,496],
[446,437,449,464,395,476,344,352,0,432],
[446,441,485,491,391,477,353,395,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,456,465,474,457,433,462,451,449],
[440,0,446,433,455,454,440,458,414,463],
[435,445,0,421,439,452,439,460,433,440],
[426,458,470,0,457,481,425,449,445,452],
[417,436,452,434,0,456,448,454,441,460],
[434,437,439,410,435,0,432,461,435,444],
[458,451,452,466,443,459,0,483,430,472],
[429,433,431,442,437,430,408,0,424,430],
[440,477,458,446,450,456,461,467,0,473],
[442,428,451,439,431,447,419,461,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,452,450,438,458,427,440,471,448],
[437,0,444,453,476,459,434,438,445,435],
[439,447,0,459,467,426,422,429,457,437],
[441,438,432,0,448,452,413,428,452,435],
[453,415,424,443,0,415,425,424,444,436],
[433,432,465,439,476,0,399,441,449,430],
[464,457,469,478,466,492,0,442,464,440],
[451,453,462,463,467,450,449,0,454,439],
[420,446,434,439,447,442,427,437,0,417],
[443,456,454,456,455,461,451,452,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,447,423,440,442,450,433,440,436],
[418,0,403,399,419,435,415,415,422,427],
[444,488,0,410,437,446,457,456,450,487],
[468,492,481,0,442,438,471,469,462,472],
[451,472,454,449,0,424,438,422,435,464],
[449,456,445,453,467,0,447,447,465,451],
[441,476,434,420,453,444,0,432,451,471],
[458,476,435,422,469,444,459,0,478,461],
[451,469,441,429,456,426,440,413,0,460],
[455,464,404,419,427,440,420,430,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,457,386,441,419,430,419,446,465],
[419,0,460,429,449,421,442,411,416,409],
[434,431,0,449,421,399,470,439,446,421],
[505,462,442,0,444,464,444,441,452,466],
[450,442,470,447,0,434,470,425,437,430],
[472,470,492,427,457,0,468,450,456,430],
[461,449,421,447,421,423,0,437,446,477],
[472,480,452,450,466,441,454,0,453,463],
[445,475,445,439,454,435,445,438,0,445],
[426,482,470,425,461,461,414,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,415,422,429,430,398,411,423,401],
[497,0,451,458,459,436,448,455,465,446],
[476,440,0,457,452,389,422,448,424,423],
[469,433,434,0,437,427,426,427,439,441],
[462,432,439,454,0,414,423,450,426,427],
[461,455,502,464,477,0,450,441,457,447],
[493,443,469,465,468,441,0,464,464,473],
[480,436,443,464,441,450,427,0,470,430],
[468,426,467,452,465,434,427,421,0,447],
[490,445,468,450,464,444,418,461,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,491,538,479,441,471,449,450,472],
[376,0,420,421,434,436,409,378,395,425],
[400,471,0,414,399,406,391,366,411,450],
[353,470,477,0,454,460,398,401,448,424],
[412,457,492,437,0,448,462,401,429,410],
[450,455,485,431,443,0,423,401,428,420],
[420,482,500,493,429,468,0,458,420,450],
[442,513,525,490,490,490,433,0,420,513],
[441,496,480,443,462,463,471,471,0,464],
[419,466,441,467,481,471,441,378,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,439,450,465,470,483,451,451,487],
[430,0,452,453,440,458,437,441,434,473],
[452,439,0,453,436,442,447,442,432,471],
[441,438,438,0,443,459,464,447,435,471],
[426,451,455,448,0,440,447,453,437,463],
[421,433,449,432,451,0,450,423,443,459],
[408,454,444,427,444,441,0,419,437,454],
[440,450,449,444,438,468,472,0,435,472],
[440,457,459,456,454,448,454,456,0,456],
[404,418,420,420,428,432,437,419,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,424,408,427,386,374,414,390,435],
[480,0,463,431,458,452,409,457,412,408],
[467,428,0,476,463,415,447,438,443,451],
[483,460,415,0,512,457,492,476,398,422],
[464,433,428,379,0,414,390,447,438,420],
[505,439,476,434,477,0,422,419,397,429],
[517,482,444,399,501,469,0,477,458,463],
[477,434,453,415,444,472,414,0,386,393],
[501,479,448,493,453,494,433,505,0,443],
[456,483,440,469,471,462,428,498,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,462,440,477,453,468,495,459,489],
[445,0,484,475,467,439,473,483,472,470],
[429,407,0,448,453,407,448,449,418,456],
[451,416,443,0,461,434,448,440,448,451],
[414,424,438,430,0,436,422,455,421,471],
[438,452,484,457,455,0,445,473,446,469],
[423,418,443,443,469,446,0,450,427,452],
[396,408,442,451,436,418,441,0,413,429],
[432,419,473,443,470,445,464,478,0,451],
[402,421,435,440,420,422,439,462,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,458,499,438,441,459,414,442,516],
[469,0,454,503,468,481,443,438,442,506],
[433,437,0,486,444,461,410,437,439,454],
[392,388,405,0,393,426,375,406,413,462],
[453,423,447,498,0,449,418,458,412,457],
[450,410,430,465,442,0,430,441,434,464],
[432,448,481,516,473,461,0,457,447,497],
[477,453,454,485,433,450,434,0,430,456],
[449,449,452,478,479,457,444,461,0,482],
[375,385,437,429,434,427,394,435,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,478,431,453,457,470,467,444,455],
[442,0,478,448,448,425,432,439,437,452],
[413,413,0,438,429,412,440,411,404,407],
[460,443,453,0,441,435,457,448,453,436],
[438,443,462,450,0,455,444,453,441,442],
[434,466,479,456,436,0,437,479,449,433],
[421,459,451,434,447,454,0,448,426,426],
[424,452,480,443,438,412,443,0,432,408],
[447,454,487,438,450,442,465,459,0,439],
[436,439,484,455,449,458,465,483,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,430,420,485,439,423,426,421,499],
[477,0,460,457,533,475,413,488,483,513],
[461,431,0,448,458,438,416,370,390,481],
[471,434,443,0,476,482,409,456,407,497],
[406,358,433,415,0,424,414,390,391,470],
[452,416,453,409,467,0,388,438,445,494],
[468,478,475,482,477,503,0,449,445,527],
[465,403,521,435,501,453,442,0,467,534],
[470,408,501,484,500,446,446,424,0,551],
[392,378,410,394,421,397,364,357,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,481,461,445,433,482,464,444,477],
[462,0,461,436,430,456,490,471,460,500],
[410,430,0,436,406,417,445,456,421,445],
[430,455,455,0,447,431,464,443,445,493],
[446,461,485,444,0,467,494,450,472,481],
[458,435,474,460,424,0,453,470,460,468],
[409,401,446,427,397,438,0,426,421,424],
[427,420,435,448,441,421,465,0,450,481],
[447,431,470,446,419,431,470,441,0,459],
[414,391,446,398,410,423,467,410,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,433,441,466,450,434,433,428,453],
[457,0,440,459,465,430,459,445,412,463],
[458,451,0,447,485,430,465,441,446,456],
[450,432,444,0,464,419,433,453,430,441],
[425,426,406,427,0,439,429,421,406,412],
[441,461,461,472,452,0,443,445,442,463],
[457,432,426,458,462,448,0,435,435,460],
[458,446,450,438,470,446,456,0,450,442],
[463,479,445,461,485,449,456,441,0,467],
[438,428,435,450,479,428,431,449,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,454,435,422,429,447,453,434,431],
[454,0,449,426,406,432,456,454,442,424],
[437,442,0,415,428,448,437,455,426,411],
[456,465,476,0,460,441,450,462,453,427],
[469,485,463,431,0,466,469,458,458,461],
[462,459,443,450,425,0,434,459,436,423],
[444,435,454,441,422,457,0,471,452,425],
[438,437,436,429,433,432,420,0,450,419],
[457,449,465,438,433,455,439,441,0,438],
[460,467,480,464,430,468,466,472,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,477,460,445,471,459,460,467,473],
[452,0,462,440,421,472,448,460,459,476],
[414,429,0,441,425,442,447,434,443,459],
[431,451,450,0,467,467,444,458,428,452],
[446,470,466,424,0,459,437,443,460,471],
[420,419,449,424,432,0,414,449,408,450],
[432,443,444,447,454,477,0,430,433,465],
[431,431,457,433,448,442,461,0,434,459],
[424,432,448,463,431,483,458,457,0,481],
[418,415,432,439,420,441,426,432,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,385,389,430,407,355,341,408,364],
[441,0,414,452,448,461,409,403,425,422],
[506,477,0,451,435,462,428,442,408,391],
[502,439,440,0,450,481,401,447,410,421],
[461,443,456,441,0,473,413,433,380,427],
[484,430,429,410,418,0,416,402,439,482],
[536,482,463,490,478,475,0,443,392,510],
[550,488,449,444,458,489,448,0,446,507],
[483,466,483,481,511,452,499,445,0,425],
[527,469,500,470,464,409,381,384,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,421,499,462,480,471,408,417,451],
[427,0,475,469,441,440,445,469,429,478],
[470,416,0,434,441,483,452,420,437,467],
[392,422,457,0,421,438,424,404,431,435],
[429,450,450,470,0,437,452,436,412,440],
[411,451,408,453,454,0,456,466,452,484],
[420,446,439,467,439,435,0,451,399,445],
[483,422,471,487,455,425,440,0,419,477],
[474,462,454,460,479,439,492,472,0,465],
[440,413,424,456,451,407,446,414,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,440,423,424,451,434,456,435,437],
[456,0,441,434,450,433,422,448,445,436],
[451,450,0,428,456,456,414,451,433,435],
[468,457,463,0,471,462,447,456,470,438],
[467,441,435,420,0,457,430,453,447,455],
[440,458,435,429,434,0,429,449,455,438],
[457,469,477,444,461,462,0,480,467,461],
[435,443,440,435,438,442,411,0,439,432],
[456,446,458,421,444,436,424,452,0,449],
[454,455,456,453,436,453,430,459,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,471,443,430,452,417,437,430,419],
[422,0,483,448,429,485,430,445,444,455],
[420,408,0,426,442,450,404,421,439,412],
[448,443,465,0,437,469,450,449,440,439],
[461,462,449,454,0,478,419,463,450,445],
[439,406,441,422,413,0,401,427,415,422],
[474,461,487,441,472,490,0,438,464,431],
[454,446,470,442,428,464,453,0,457,443],
[461,447,452,451,441,476,427,434,0,447],
[472,436,479,452,446,469,460,448,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,399,382,389,454,359,400,453,452],
[510,0,409,433,467,460,425,446,494,507],
[492,482,0,468,501,467,428,473,498,485],
[509,458,423,0,484,411,414,452,494,474],
[502,424,390,407,0,407,446,406,521,470],
[437,431,424,480,484,0,446,422,509,435],
[532,466,463,477,445,445,0,417,481,507],
[491,445,418,439,485,469,474,0,497,462],
[438,397,393,397,370,382,410,394,0,407],
[439,384,406,417,421,456,384,429,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,426,444,432,457,439,433,433,450],
[477,0,463,472,458,449,468,441,420,467],
[465,428,0,447,454,466,451,454,439,462],
[447,419,444,0,434,447,454,450,431,451],
[459,433,437,457,0,440,468,428,428,470],
[434,442,425,444,451,0,447,415,418,462],
[452,423,440,437,423,444,0,427,433,459],
[458,450,437,441,463,476,464,0,454,468],
[458,471,452,460,463,473,458,437,0,489],
[441,424,429,440,421,429,432,423,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,455,434,449,458,448,468,464,445],
[441,0,452,442,443,437,467,461,467,427],
[436,439,0,431,412,417,424,432,442,422],
[457,449,460,0,442,455,478,467,470,447],
[442,448,479,449,0,452,448,467,467,447],
[433,454,474,436,439,0,452,473,467,447],
[443,424,467,413,443,439,0,447,454,434],
[423,430,459,424,424,418,444,0,459,449],
[427,424,449,421,424,424,437,432,0,433],
[446,464,469,444,444,444,457,442,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,464,469,448,496,461,428,470,475],
[443,0,476,471,460,464,453,457,459,461],
[427,415,0,472,448,453,439,427,463,458],
[422,420,419,0,447,452,441,412,437,450],
[443,431,443,444,0,448,436,434,445,465],
[395,427,438,439,443,0,431,406,428,439],
[430,438,452,450,455,460,0,422,458,465],
[463,434,464,479,457,485,469,0,472,487],
[421,432,428,454,446,463,433,419,0,453],
[416,430,433,441,426,452,426,404,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,430,443,445,452,447,442,439],
[449,0,425,437,447,472,438,459,444,423],
[446,466,0,443,439,445,432,442,436,465],
[461,454,448,0,460,451,426,464,439,432],
[448,444,452,431,0,462,445,437,439,437],
[446,419,446,440,429,0,412,447,439,433],
[439,453,459,465,446,479,0,473,457,470],
[444,432,449,427,454,444,418,0,440,441],
[449,447,455,452,452,452,434,451,0,440],
[452,468,426,459,454,458,421,450,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,467,450,465,476,467,430,479,492],
[456,0,471,469,500,467,407,449,426,482],
[424,420,0,421,441,461,410,400,425,478],
[441,422,470,0,451,471,453,425,441,481],
[426,391,450,440,0,463,411,460,440,504],
[415,424,430,420,428,0,381,429,438,455],
[424,484,481,438,480,510,0,473,468,501],
[461,442,491,466,431,462,418,0,430,477],
[412,465,466,450,451,453,423,461,0,480],
[399,409,413,410,387,436,390,414,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,449,428,438,457,447,447,445,437],
[432,0,447,439,455,447,448,456,442,445],
[442,444,0,436,441,440,430,448,430,424],
[463,452,455,0,462,442,415,455,436,437],
[453,436,450,429,0,465,444,463,449,450],
[434,444,451,449,426,0,426,449,423,444],
[444,443,461,476,447,465,0,457,448,434],
[444,435,443,436,428,442,434,0,458,439],
[446,449,461,455,442,468,443,433,0,458],
[454,446,467,454,441,447,457,452,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,446,456,470,458,456,445,463,447],
[428,0,446,469,468,440,441,449,455,448],
[445,445,0,463,459,444,433,460,459,435],
[435,422,428,0,453,462,424,466,472,423],
[421,423,432,438,0,429,429,442,451,429],
[433,451,447,429,462,0,430,456,446,427],
[435,450,458,467,462,461,0,456,461,443],
[446,442,431,425,449,435,435,0,456,432],
[428,436,432,419,440,445,430,435,0,426],
[444,443,456,468,462,464,448,459,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,407,453,459,469,414,455,444,420],
[470,0,481,480,406,517,460,475,452,479],
[484,410,0,444,422,434,422,436,462,476],
[438,411,447,0,401,464,416,420,461,412],
[432,485,469,490,0,502,459,466,495,459],
[422,374,457,427,389,0,431,448,467,406],
[477,431,469,475,432,460,0,472,466,435],
[436,416,455,471,425,443,419,0,422,463],
[447,439,429,430,396,424,425,469,0,421],
[471,412,415,479,432,485,456,428,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,456,443,462,465,458,396,411,425],
[462,0,408,418,452,470,463,348,394,440],
[435,483,0,420,468,470,417,434,450,503],
[448,473,471,0,558,486,478,438,483,507],
[429,439,423,333,0,469,450,415,417,393],
[426,421,421,405,422,0,407,389,391,367],
[433,428,474,413,441,484,0,322,377,421],
[495,543,457,453,476,502,569,0,526,438],
[480,497,441,408,474,500,514,365,0,407],
[466,451,388,384,498,524,470,453,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,442,458,436,436,427,452,429,441],
[466,0,442,477,449,457,449,459,480,454],
[449,449,0,478,457,450,442,459,494,449],
[433,414,413,0,425,422,413,441,444,428],
[455,442,434,466,0,448,443,453,458,445],
[455,434,441,469,443,0,447,452,453,424],
[464,442,449,478,448,444,0,449,466,451],
[439,432,432,450,438,439,442,0,458,437],
[462,411,397,447,433,438,425,433,0,429],
[450,437,442,463,446,467,440,454,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,435,445,431,427,422,432,443,444],
[446,0,437,462,455,447,438,425,455,456],
[456,454,0,451,462,452,447,430,441,484],
[446,429,440,0,438,422,402,452,445,461],
[460,436,429,453,0,445,423,447,426,457],
[464,444,439,469,446,0,431,451,457,453],
[469,453,444,489,468,460,0,451,466,455],
[459,466,461,439,444,440,440,0,450,456],
[448,436,450,446,465,434,425,441,0,450],
[447,435,407,430,434,438,436,435,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,433,499,473,484,464,475,459,448],
[393,0,321,426,354,497,369,390,441,375],
[458,570,0,478,467,538,448,497,467,418],
[392,465,413,0,438,430,444,409,453,310],
[418,537,424,453,0,461,500,455,466,400],
[407,394,353,461,430,0,360,375,330,294],
[427,522,443,447,391,531,0,474,400,430],
[416,501,394,482,436,516,417,0,465,419],
[432,450,424,438,425,561,491,426,0,427],
[443,516,473,581,491,597,461,472,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,387,434,436,428,439,424,451,429],
[420,0,412,412,422,452,397,403,444,395],
[504,479,0,450,449,487,476,435,491,411],
[457,479,441,0,446,490,473,446,459,419],
[455,469,442,445,0,453,450,426,484,435],
[463,439,404,401,438,0,442,410,438,419],
[452,494,415,418,441,449,0,424,452,436],
[467,488,456,445,465,481,467,0,477,452],
[440,447,400,432,407,453,439,414,0,408],
[462,496,480,472,456,472,455,439,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,466,476,454,455,478,452,478,443],
[442,0,441,418,434,437,455,410,457,445],
[425,450,0,455,445,444,462,431,464,435],
[415,473,436,0,448,436,457,433,460,449],
[437,457,446,443,0,445,442,446,454,450],
[436,454,447,455,446,0,455,445,451,454],
[413,436,429,434,449,436,0,416,435,440],
[439,481,460,458,445,446,475,0,484,459],
[413,434,427,431,437,440,456,407,0,439],
[448,446,456,442,441,437,451,432,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,436,417,446,450,430,404,418,424],
[442,0,454,435,442,451,446,419,430,434],
[455,437,0,456,461,437,459,448,453,437],
[474,456,435,0,434,429,438,396,446,453],
[445,449,430,457,0,452,432,394,422,440],
[441,440,454,462,439,0,435,405,431,434],
[461,445,432,453,459,456,0,441,426,433],
[487,472,443,495,497,486,450,0,442,452],
[473,461,438,445,469,460,465,449,0,438],
[467,457,454,438,451,457,458,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,477,456,509,491,464,434,459,454],
[421,0,433,403,454,424,382,450,398,420],
[414,458,0,405,488,460,416,415,414,427],
[435,488,486,0,494,485,460,457,457,468],
[382,437,403,397,0,431,401,396,391,400],
[400,467,431,406,460,0,384,431,419,427],
[427,509,475,431,490,507,0,468,448,458],
[457,441,476,434,495,460,423,0,434,446],
[432,493,477,434,500,472,443,457,0,461],
[437,471,464,423,491,464,433,445,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,454,460,456,464,464,461,485,526],
[448,0,424,456,415,411,433,423,437,472],
[437,467,0,476,450,420,444,401,456,511],
[431,435,415,0,421,435,439,406,445,478],
[435,476,441,470,0,448,448,431,457,532],
[427,480,471,456,443,0,437,392,466,503],
[427,458,447,452,443,454,0,398,452,490],
[430,468,490,485,460,499,493,0,480,518],
[406,454,435,446,434,425,439,411,0,507],
[365,419,380,413,359,388,401,373,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,448,402,416,420,434,459,458,439],
[477,0,460,462,438,475,447,468,471,440],
[443,431,0,429,422,467,449,442,455,401],
[489,429,462,0,450,456,452,469,474,436],
[475,453,469,441,0,468,443,457,469,464],
[471,416,424,435,423,0,419,461,458,420],
[457,444,442,439,448,472,0,469,457,440],
[432,423,449,422,434,430,422,0,424,441],
[433,420,436,417,422,433,434,467,0,438],
[452,451,490,455,427,471,451,450,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,498,535,523,416,414,503,403,527],
[462,0,368,490,486,403,421,452,470,472],
[393,523,0,518,445,509,414,473,450,383],
[356,401,373,0,401,347,341,333,347,399],
[368,405,446,490,0,366,366,396,418,387],
[475,488,382,544,525,0,479,447,437,484],
[477,470,477,550,525,412,0,429,508,506],
[388,439,418,558,495,444,462,0,443,476],
[488,421,441,544,473,454,383,448,0,464],
[364,419,508,492,504,407,385,415,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,421,422,463,416,435,445,407],
[440,0,437,408,389,420,409,399,446,404],
[451,454,0,446,407,435,434,433,442,427],
[470,483,445,0,418,452,444,456,464,441],
[469,502,484,473,0,463,435,470,473,464],
[428,471,456,439,428,0,438,416,462,416],
[475,482,457,447,456,453,0,468,475,442],
[456,492,458,435,421,475,423,0,455,427],
[446,445,449,427,418,429,416,436,0,440],
[484,487,464,450,427,475,449,464,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,432,427,436,417,432,414,439],
[443,0,454,442,425,444,436,455,444,443],
[449,437,0,410,453,431,431,422,441,433],
[459,449,481,0,443,455,454,462,450,448],
[464,466,438,448,0,442,444,433,437,440],
[455,447,460,436,449,0,444,454,442,440],
[474,455,460,437,447,447,0,476,445,455],
[459,436,469,429,458,437,415,0,430,422],
[477,447,450,441,454,449,446,461,0,424],
[452,448,458,443,451,451,436,469,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,449,439,452,460,451,456,446,460],
[433,0,439,458,452,445,431,440,467,431],
[442,452,0,444,447,467,441,449,462,467],
[452,433,447,0,439,461,439,431,437,436],
[439,439,444,452,0,493,436,447,480,441],
[431,446,424,430,398,0,426,437,459,402],
[440,460,450,452,455,465,0,431,458,422],
[435,451,442,460,444,454,460,0,439,435],
[445,424,429,454,411,432,433,452,0,431],
[431,460,424,455,450,489,469,456,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,450,366,420,464,376,431,412,454],
[456,0,480,446,421,446,422,428,422,458],
[441,411,0,397,385,404,383,420,368,439],
[525,445,494,0,446,470,429,474,476,475],
[471,470,506,445,0,492,430,460,409,468],
[427,445,487,421,399,0,391,419,411,467],
[515,469,508,462,461,500,0,493,445,501],
[460,463,471,417,431,472,398,0,439,456],
[479,469,523,415,482,480,446,452,0,471],
[437,433,452,416,423,424,390,435,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,430,441,461,409,456,426,486,461],
[448,0,449,442,456,448,474,432,482,470],
[461,442,0,498,468,479,465,452,508,495],
[450,449,393,0,454,436,446,459,506,457],
[430,435,423,437,0,462,446,425,481,478],
[482,443,412,455,429,0,467,440,457,490],
[435,417,426,445,445,424,0,412,448,442],
[465,459,439,432,466,451,479,0,496,473],
[405,409,383,385,410,434,443,395,0,426],
[430,421,396,434,413,401,449,418,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,460,403,455,422,449,469,452],
[449,0,456,437,434,441,421,458,473,430],
[443,435,0,475,403,443,438,448,459,439],
[431,454,416,0,412,419,423,443,455,430],
[488,457,488,479,0,456,438,457,484,457],
[436,450,448,472,435,0,451,455,481,452],
[469,470,453,468,453,440,0,463,456,425],
[442,433,443,448,434,436,428,0,438,448],
[422,418,432,436,407,410,435,453,0,428],
[439,461,452,461,434,439,466,443,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,479,448,464,465,450,454,431,464],
[406,0,467,460,447,445,428,404,404,433],
[412,424,0,440,467,413,410,386,409,436],
[443,431,451,0,455,431,440,436,440,436],
[427,444,424,436,0,429,451,456,409,404],
[426,446,478,460,462,0,453,417,458,454],
[441,463,481,451,440,438,0,457,425,458],
[437,487,505,455,435,474,434,0,459,484],
[460,487,482,451,482,433,466,432,0,438],
[427,458,455,455,487,437,433,407,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,393,383,353,355,431,402,355,359],
[440,0,340,464,333,344,379,344,247,307],
[498,551,0,483,463,457,542,491,349,410],
[508,427,408,0,388,376,398,404,331,327],
[538,558,428,503,0,453,474,464,310,432],
[536,547,434,515,438,0,540,537,447,400],
[460,512,349,493,417,351,0,434,338,401],
[489,547,400,487,427,354,457,0,284,403],
[536,644,542,560,581,444,553,607,0,524],
[532,584,481,564,459,491,490,488,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,440,442,471,455,430,416,418,466],
[473,0,486,448,489,458,474,502,444,515],
[451,405,0,476,445,437,436,444,463,489],
[449,443,415,0,450,480,403,483,410,493],
[420,402,446,441,0,428,396,468,440,481],
[436,433,454,411,463,0,444,455,419,461],
[461,417,455,488,495,447,0,463,439,488],
[475,389,447,408,423,436,428,0,402,463],
[473,447,428,481,451,472,452,489,0,473],
[425,376,402,398,410,430,403,428,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,425,443,451,414,421,447,406,418],
[425,0,420,453,426,423,420,427,415,415],
[466,471,0,481,445,452,453,477,453,439],
[448,438,410,0,439,411,411,429,415,435],
[440,465,446,452,0,447,421,445,452,427],
[477,468,439,480,444,0,432,461,443,447],
[470,471,438,480,470,459,0,471,443,430],
[444,464,414,462,446,430,420,0,425,422],
[485,476,438,476,439,448,448,466,0,450],
[473,476,452,456,464,444,461,469,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,401,409,382,427,421,376,327,587],
[407,0,413,415,404,470,464,438,365,523],
[490,478,0,481,505,379,445,484,425,541],
[482,476,410,0,457,501,468,456,421,609],
[509,487,386,434,0,453,418,455,401,504],
[464,421,512,390,438,0,482,500,466,544],
[470,427,446,423,473,409,0,457,416,563],
[515,453,407,435,436,391,434,0,509,540],
[564,526,466,470,490,425,475,382,0,555],
[304,368,350,282,387,347,328,351,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,460,455,463,449,448,435,460],
[431,0,457,449,447,455,416,443,446,470],
[424,434,0,426,440,437,411,441,453,444],
[431,442,465,0,457,448,414,440,473,480],
[436,444,451,434,0,459,425,446,444,457],
[428,436,454,443,432,0,401,439,451,459],
[442,475,480,477,466,490,0,467,465,488],
[443,448,450,451,445,452,424,0,448,444],
[456,445,438,418,447,440,426,443,0,450],
[431,421,447,411,434,432,403,447,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,437,438,493,443,471,443,465,454],
[469,0,436,438,456,447,475,458,444,452],
[454,455,0,431,474,433,466,447,473,465],
[453,453,460,0,463,437,472,443,459,475],
[398,435,417,428,0,426,452,446,458,442],
[448,444,458,454,465,0,451,435,455,453],
[420,416,425,419,439,440,0,454,470,454],
[448,433,444,448,445,456,437,0,481,471],
[426,447,418,432,433,436,421,410,0,441],
[437,439,426,416,449,438,437,420,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,440,458,426,444,443,419,435,436],
[460,0,477,449,445,459,466,458,433,455],
[451,414,0,454,443,434,429,438,433,443],
[433,442,437,0,445,462,450,434,430,434],
[465,446,448,446,0,440,460,453,447,427],
[447,432,457,429,451,0,428,443,429,413],
[448,425,462,441,431,463,0,449,421,438],
[472,433,453,457,438,448,442,0,447,430],
[456,458,458,461,444,462,470,444,0,444],
[455,436,448,457,464,478,453,461,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,455,472,445,423,460,466,450,436],
[451,0,458,471,414,430,442,449,439,452],
[436,433,0,445,429,414,449,466,444,408],
[419,420,446,0,422,413,448,439,432,438],
[446,477,462,469,0,455,455,484,457,442],
[468,461,477,478,436,0,449,470,451,444],
[431,449,442,443,436,442,0,470,441,409],
[425,442,425,452,407,421,421,0,424,409],
[441,452,447,459,434,440,450,467,0,443],
[455,439,483,453,449,447,482,482,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,432,434,420,440,415,412,451,440],
[443,0,456,452,456,456,433,438,456,465],
[459,435,0,439,425,446,426,427,449,447],
[457,439,452,0,437,433,437,443,459,439],
[471,435,466,454,0,472,439,449,469,438],
[451,435,445,458,419,0,431,406,436,418],
[476,458,465,454,452,460,0,431,462,443],
[479,453,464,448,442,485,460,0,460,452],
[440,435,442,432,422,455,429,431,0,439],
[451,426,444,452,453,473,448,439,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,427,412,494,457,454,386,406,432],
[452,0,396,469,470,455,453,439,476,450],
[464,495,0,449,565,498,506,451,436,486],
[479,422,442,0,513,472,471,422,423,451],
[397,421,326,378,0,423,420,369,370,383],
[434,436,393,419,468,0,448,396,391,461],
[437,438,385,420,471,443,0,395,429,415],
[505,452,440,469,522,495,496,0,474,466],
[485,415,455,468,521,500,462,417,0,440],
[459,441,405,440,508,430,476,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,440,433,430,430,427,435,413,428],
[443,0,453,454,453,418,408,435,398,444],
[451,438,0,403,439,442,383,443,384,477],
[458,437,488,0,479,460,457,450,454,472],
[461,438,452,412,0,472,442,462,405,424],
[461,473,449,431,419,0,414,437,430,455],
[464,483,508,434,449,477,0,484,458,459],
[456,456,448,441,429,454,407,0,433,482],
[478,493,507,437,486,461,433,458,0,522],
[463,447,414,419,467,436,432,409,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,442,415,418,432,431,433,441,455],
[449,0,440,414,409,422,416,443,446,451],
[449,451,0,438,441,436,429,454,453,441],
[476,477,453,0,448,469,434,454,444,463],
[473,482,450,443,0,462,441,440,464,472],
[459,469,455,422,429,0,415,455,447,448],
[460,475,462,457,450,476,0,424,466,464],
[458,448,437,437,451,436,467,0,457,448],
[450,445,438,447,427,444,425,434,0,447],
[436,440,450,428,419,443,427,443,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,464,462,483,451,460,461,455,442],
[432,0,450,465,469,453,483,461,448,440],
[427,441,0,467,460,440,473,453,459,442],
[429,426,424,0,450,441,467,446,440,441],
[408,422,431,441,0,448,449,451,452,428],
[440,438,451,450,443,0,477,439,439,440],
[431,408,418,424,442,414,0,426,427,428],
[430,430,438,445,440,452,465,0,437,463],
[436,443,432,451,439,452,464,454,0,435],
[449,451,449,450,463,451,463,428,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,462,435,466,430,452,470,456,453],
[441,0,438,454,443,461,456,447,451,455],
[429,453,0,466,455,451,435,440,441,447],
[456,437,425,0,458,459,446,445,423,451],
[425,448,436,433,0,434,429,446,421,433],
[461,430,440,432,457,0,432,455,448,445],
[439,435,456,445,462,459,0,446,418,420],
[421,444,451,446,445,436,445,0,433,442],
[435,440,450,468,470,443,473,458,0,454],
[438,436,444,440,458,446,471,449,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,736,477,435,722,456,548,517,617,640],
[155,0,508,324,513,258,120,389,271,690],
[414,383,0,244,583,317,246,392,367,344],
[456,567,647,0,577,410,605,577,551,647],
[169,378,308,314,0,185,134,355,223,328],
[435,633,574,481,706,0,532,501,446,672],
[343,771,645,286,757,359,0,517,267,686],
[374,502,499,314,536,390,374,0,347,525],
[274,620,524,340,668,445,624,544,0,620],
[251,201,547,244,563,219,205,366,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,474,428,418,448,490,482,415,425],
[438,0,399,391,405,416,452,438,409,386],
[417,492,0,434,424,436,466,486,417,427],
[463,500,457,0,424,480,499,491,439,455],
[473,486,467,467,0,473,479,481,446,418],
[443,475,455,411,418,0,453,462,425,419],
[401,439,425,392,412,438,0,436,427,417],
[409,453,405,400,410,429,455,0,367,377],
[476,482,474,452,445,466,464,524,0,451],
[466,505,464,436,473,472,474,514,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,455,458,439,435,459,444,432,462],
[447,0,449,430,431,438,450,431,455,448],
[436,442,0,431,430,437,439,444,466,458],
[433,461,460,0,450,453,448,434,452,466],
[452,460,461,441,0,444,468,446,454,472],
[456,453,454,438,447,0,444,456,435,453],
[432,441,452,443,423,447,0,441,447,459],
[447,460,447,457,445,435,450,0,471,463],
[459,436,425,439,437,456,444,420,0,450],
[429,443,433,425,419,438,432,428,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,587,532,410,378,429,332,518,403],
[353,0,400,556,392,391,536,375,473,406],
[304,491,0,508,375,304,544,462,520,424],
[359,335,383,0,269,335,415,297,440,298],
[481,499,516,622,0,381,546,439,650,298],
[513,500,587,556,510,0,648,472,583,379],
[462,355,347,476,345,243,0,427,553,297],
[559,516,429,594,452,419,464,0,487,451],
[373,418,371,451,241,308,338,404,0,281],
[488,485,467,593,593,512,594,440,610,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,430,482,431,434,436,411,473,457],
[437,0,449,477,463,435,425,410,483,451],
[461,442,0,497,482,434,454,435,482,428],
[409,414,394,0,436,408,391,402,415,379],
[460,428,409,455,0,428,412,403,480,418],
[457,456,457,483,463,0,427,447,493,437],
[455,466,437,500,479,464,0,441,471,410],
[480,481,456,489,488,444,450,0,474,444],
[418,408,409,476,411,398,420,417,0,399],
[434,440,463,512,473,454,481,447,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,443,443,452,441,450,452,458,447],
[433,0,430,446,440,452,453,466,455,446],
[448,461,0,441,440,486,455,455,440,466],
[448,445,450,0,439,456,451,468,442,462],
[439,451,451,452,0,447,440,439,443,464],
[450,439,405,435,444,0,428,426,426,439],
[441,438,436,440,451,463,0,437,452,440],
[439,425,436,423,452,465,454,0,437,457],
[433,436,451,449,448,465,439,454,0,457],
[444,445,425,429,427,452,451,434,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,444,453,455,443,477,465,450,411],
[436,0,458,463,424,458,443,450,452,449],
[447,433,0,457,454,465,460,477,429,458],
[438,428,434,0,409,456,456,452,434,420],
[436,467,437,482,0,448,468,468,422,461],
[448,433,426,435,443,0,441,479,423,437],
[414,448,431,435,423,450,0,452,453,409],
[426,441,414,439,423,412,439,0,442,405],
[441,439,462,457,469,468,438,449,0,455],
[480,442,433,471,430,454,482,486,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,446,417,455,481,474,445,468,426],
[372,0,401,422,443,381,429,394,406,400],
[445,490,0,463,468,460,445,423,454,459],
[474,469,428,0,443,447,440,436,418,446],
[436,448,423,448,0,435,436,433,443,414],
[410,510,431,444,456,0,461,415,478,450],
[417,462,446,451,455,430,0,445,458,427],
[446,497,468,455,458,476,446,0,474,419],
[423,485,437,473,448,413,433,417,0,423],
[465,491,432,445,477,441,464,472,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,438,461,441,443,442,455,440,422],
[437,0,413,412,421,436,426,435,416,434],
[453,478,0,469,456,457,465,443,467,448],
[430,479,422,0,452,442,454,433,431,446],
[450,470,435,439,0,423,430,439,452,446],
[448,455,434,449,468,0,438,447,444,437],
[449,465,426,437,461,453,0,454,436,443],
[436,456,448,458,452,444,437,0,434,432],
[451,475,424,460,439,447,455,457,0,442],
[469,457,443,445,445,454,448,459,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,448,461,440,466,422,450,417],
[458,0,470,463,474,484,481,439,479,480],
[441,421,0,418,443,443,476,457,454,432],
[443,428,473,0,470,456,473,436,458,440],
[430,417,448,421,0,426,464,419,446,434],
[451,407,448,435,465,0,470,447,468,444],
[425,410,415,418,427,421,0,417,444,456],
[469,452,434,455,472,444,474,0,446,451],
[441,412,437,433,445,423,447,445,0,444],
[474,411,459,451,457,447,435,440,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,442,467,424,416,483,427,452,437],
[451,0,453,499,462,467,446,434,457,423],
[449,438,0,495,430,460,462,454,427,453],
[424,392,396,0,414,412,419,418,421,421],
[467,429,461,477,0,443,461,450,455,457],
[475,424,431,479,448,0,451,423,460,427],
[408,445,429,472,430,440,0,432,425,457],
[464,457,437,473,441,468,459,0,455,450],
[439,434,464,470,436,431,466,436,0,463],
[454,468,438,470,434,464,434,441,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,449,439,458,440,439,447,443,439],
[440,0,424,450,414,453,431,426,424,441],
[442,467,0,453,437,444,450,440,446,444],
[452,441,438,0,435,436,447,437,449,412],
[433,477,454,456,0,447,453,430,442,434],
[451,438,447,455,444,0,450,447,431,451],
[452,460,441,444,438,441,0,432,441,441],
[444,465,451,454,461,444,459,0,452,471],
[448,467,445,442,449,460,450,439,0,461],
[452,450,447,479,457,440,450,420,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,553,606,403,632,497,393,523,490,574],
[338,0,489,309,474,417,351,392,405,353],
[285,402,0,283,513,378,334,390,433,357],
[488,582,608,0,456,507,465,443,420,550],
[259,417,378,435,0,348,427,384,232,347],
[394,474,513,384,543,0,483,433,383,583],
[498,540,557,426,464,408,0,335,405,554],
[368,499,501,448,507,458,556,0,329,452],
[401,486,458,471,659,508,486,562,0,540],
[317,538,534,341,544,308,337,439,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,438,468,459,428,514,444,451,434],
[436,0,478,496,473,449,487,479,486,457],
[453,413,0,465,449,432,442,426,482,428],
[423,395,426,0,419,405,440,425,416,451],
[432,418,442,472,0,439,480,438,446,464],
[463,442,459,486,452,0,500,499,435,468],
[377,404,449,451,411,391,0,448,425,444],
[447,412,465,466,453,392,443,0,462,488],
[440,405,409,475,445,456,466,429,0,446],
[457,434,463,440,427,423,447,403,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,426,435,436,404,434,448,414,416],
[470,0,408,470,477,417,460,467,413,487],
[465,483,0,439,496,463,400,459,451,478],
[456,421,452,0,474,437,427,451,443,477],
[455,414,395,417,0,398,382,429,368,409],
[487,474,428,454,493,0,458,468,460,500],
[457,431,491,464,509,433,0,482,469,527],
[443,424,432,440,462,423,409,0,420,468],
[477,478,440,448,523,431,422,471,0,439],
[475,404,413,414,482,391,364,423,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,466,440,453,449,469,432,442,439],
[420,0,447,430,465,458,425,447,434,441],
[425,444,0,424,439,428,457,444,416,446],
[451,461,467,0,443,453,456,445,442,448],
[438,426,452,448,0,436,458,422,434,458],
[442,433,463,438,455,0,446,448,447,426],
[422,466,434,435,433,445,0,444,428,436],
[459,444,447,446,469,443,447,0,447,453],
[449,457,475,449,457,444,463,444,0,446],
[452,450,445,443,433,465,455,438,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,424,471,428,442,465,468,476,434],
[429,0,429,452,448,459,433,454,484,451],
[467,462,0,460,443,437,473,469,469,438],
[420,439,431,0,439,425,456,466,442,444],
[463,443,448,452,0,458,454,464,476,453],
[449,432,454,466,433,0,463,467,458,446],
[426,458,418,435,437,428,0,441,473,449],
[423,437,422,425,427,424,450,0,433,418],
[415,407,422,449,415,433,418,458,0,444],
[457,440,453,447,438,445,442,473,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,434,458,456,491,435,427,441,472],
[460,0,473,491,461,455,477,455,458,444],
[457,418,0,472,463,442,430,402,435,469],
[433,400,419,0,450,429,431,419,441,420],
[435,430,428,441,0,450,422,441,437,435],
[400,436,449,462,441,0,430,444,440,435],
[456,414,461,460,469,461,0,439,448,467],
[464,436,489,472,450,447,452,0,481,471],
[450,433,456,450,454,451,443,410,0,451],
[419,447,422,471,456,456,424,420,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,454,441,437,454,427,456,436,443],
[453,0,446,468,422,462,440,452,445,436],
[437,445,0,441,438,446,430,458,453,439],
[450,423,450,0,447,427,433,447,446,433],
[454,469,453,444,0,461,448,442,462,461],
[437,429,445,464,430,0,423,445,435,446],
[464,451,461,458,443,468,0,463,455,449],
[435,439,433,444,449,446,428,0,440,421],
[455,446,438,445,429,456,436,451,0,440],
[448,455,452,458,430,445,442,470,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,456,495,406,415,430,530,526,448],
[555,0,427,498,488,537,469,544,486,507],
[435,464,0,563,499,452,453,518,517,428],
[396,393,328,0,404,431,425,470,466,358],
[485,403,392,487,0,468,487,545,567,419],
[476,354,439,460,423,0,520,425,466,438],
[461,422,438,466,404,371,0,444,505,347],
[361,347,373,421,346,466,447,0,497,392],
[365,405,374,425,324,425,386,394,0,432],
[443,384,463,533,472,453,544,499,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,437,429,465,427,391,457,471,400],
[491,0,450,450,467,466,426,452,483,430],
[454,441,0,420,466,457,447,459,473,436],
[462,441,471,0,451,439,414,443,478,454],
[426,424,425,440,0,446,426,433,455,415],
[464,425,434,452,445,0,440,452,442,431],
[500,465,444,477,465,451,0,464,488,443],
[434,439,432,448,458,439,427,0,455,439],
[420,408,418,413,436,449,403,436,0,401],
[491,461,455,437,476,460,448,452,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,406,447,413,505,400,376,451,390],
[443,0,395,453,443,509,470,417,468,447],
[485,496,0,476,490,515,490,444,513,454],
[444,438,415,0,397,520,384,401,416,424],
[478,448,401,494,0,504,436,422,499,457],
[386,382,376,371,387,0,387,381,406,389],
[491,421,401,507,455,504,0,413,461,427],
[515,474,447,490,469,510,478,0,474,437],
[440,423,378,475,392,485,430,417,0,435],
[501,444,437,467,434,502,464,454,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,428,431,435,413,419,416,425,419],
[450,0,437,434,424,418,430,439,430,396],
[463,454,0,452,456,410,453,451,435,428],
[460,457,439,0,426,433,437,436,422,418],
[456,467,435,465,0,424,418,449,450,426],
[478,473,481,458,467,0,456,454,463,442],
[472,461,438,454,473,435,0,457,461,452],
[475,452,440,455,442,437,434,0,425,417],
[466,461,456,469,441,428,430,466,0,422],
[472,495,463,473,465,449,439,474,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,438,433,444,419,447,437,450,436],
[470,0,442,432,441,440,459,445,446,455],
[453,449,0,446,449,453,446,453,437,461],
[458,459,445,0,459,478,467,444,462,459],
[447,450,442,432,0,431,452,446,439,445],
[472,451,438,413,460,0,444,453,444,460],
[444,432,445,424,439,447,0,448,447,450],
[454,446,438,447,445,438,443,0,427,438],
[441,445,454,429,452,447,444,464,0,457],
[455,436,430,432,446,431,441,453,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,433,420,444,418,411,458,440,429],
[451,0,435,450,474,415,444,470,465,470],
[458,456,0,468,460,434,461,509,486,473],
[471,441,423,0,456,420,448,443,466,444],
[447,417,431,435,0,405,425,446,450,428],
[473,476,457,471,486,0,435,464,482,469],
[480,447,430,443,466,456,0,475,463,465],
[433,421,382,448,445,427,416,0,443,404],
[451,426,405,425,441,409,428,448,0,434],
[462,421,418,447,463,422,426,487,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,452,412,448,445,476,467,445,441],
[419,0,445,410,429,438,445,449,438,435],
[439,446,0,434,438,418,453,451,453,456],
[479,481,457,0,445,443,457,457,448,446],
[443,462,453,446,0,445,466,464,445,424],
[446,453,473,448,446,0,462,476,445,428],
[415,446,438,434,425,429,0,455,437,425],
[424,442,440,434,427,415,436,0,420,443],
[446,453,438,443,446,446,454,471,0,433],
[450,456,435,445,467,463,466,448,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,446,423,450,435,430,420,446,496],
[454,0,437,424,482,430,453,427,448,509],
[445,454,0,441,494,436,460,434,423,463],
[468,467,450,0,489,423,429,447,475,462],
[441,409,397,402,0,404,381,412,420,412],
[456,461,455,468,487,0,470,429,450,456],
[461,438,431,462,510,421,0,427,479,487],
[471,464,457,444,479,462,464,0,437,473],
[445,443,468,416,471,441,412,454,0,486],
[395,382,428,429,479,435,404,418,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,473,435,423,443,447,446,446],
[449,0,455,487,453,459,441,453,466,441],
[446,436,0,472,461,438,467,450,453,465],
[418,404,419,0,422,414,421,427,433,420],
[456,438,430,469,0,428,440,447,449,448],
[468,432,453,477,463,0,462,453,470,460],
[448,450,424,470,451,429,0,430,460,438],
[444,438,441,464,444,438,461,0,455,452],
[445,425,438,458,442,421,431,436,0,429],
[445,450,426,471,443,431,453,439,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,433,448,450,427,462,450,448,447],
[461,0,454,441,470,458,465,432,432,468],
[458,437,0,456,488,442,466,448,451,461],
[443,450,435,0,444,437,451,454,422,472],
[441,421,403,447,0,424,443,427,425,440],
[464,433,449,454,467,0,444,455,424,443],
[429,426,425,440,448,447,0,427,432,449],
[441,459,443,437,464,436,464,0,440,469],
[443,459,440,469,466,467,459,451,0,456],
[444,423,430,419,451,448,442,422,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,457,446,437,427,413,424,419,398],
[457,0,462,462,476,438,445,430,437,417],
[434,429,0,425,429,404,405,410,419,422],
[445,429,466,0,476,441,423,425,422,438],
[454,415,462,415,0,420,418,417,423,403],
[464,453,487,450,471,0,425,444,444,440],
[478,446,486,468,473,466,0,447,459,442],
[467,461,481,466,474,447,444,0,441,435],
[472,454,472,469,468,447,432,450,0,455],
[493,474,469,453,488,451,449,456,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,438,456,459,418,464,419,452,449],
[430,0,411,420,414,413,434,420,438,463],
[453,480,0,466,459,449,455,442,482,474],
[435,471,425,0,466,426,476,454,458,469],
[432,477,432,425,0,432,471,439,474,439],
[473,478,442,465,459,0,473,439,478,468],
[427,457,436,415,420,418,0,418,435,470],
[472,471,449,437,452,452,473,0,459,443],
[439,453,409,433,417,413,456,432,0,443],
[442,428,417,422,452,423,421,448,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,434,451,460,449,454,404,439,453],
[425,0,408,452,413,386,411,380,413,431],
[457,483,0,459,451,449,459,418,443,463],
[440,439,432,0,429,406,437,410,437,439],
[431,478,440,462,0,425,425,432,422,426],
[442,505,442,485,466,0,472,447,462,460],
[437,480,432,454,466,419,0,431,475,457],
[487,511,473,481,459,444,460,0,446,455],
[452,478,448,454,469,429,416,445,0,444],
[438,460,428,452,465,431,434,436,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,446,504,454,421,471,471,468,439],
[411,0,477,432,438,460,446,450,467,448],
[445,414,0,440,439,449,439,402,414,412],
[387,459,451,0,449,447,467,460,396,417],
[437,453,452,442,0,463,442,458,469,437],
[470,431,442,444,428,0,441,453,455,460],
[420,445,452,424,449,450,0,442,444,411],
[420,441,489,431,433,438,449,0,431,439],
[423,424,477,495,422,436,447,460,0,423],
[452,443,479,474,454,431,480,452,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,405,523,549,516,480,496,445,525],
[472,0,469,530,613,358,475,431,340,460],
[486,422,0,529,604,509,592,438,483,532],
[368,361,362,0,538,312,500,320,412,395],
[342,278,287,353,0,370,514,314,381,455],
[375,533,382,579,521,0,543,491,404,492],
[411,416,299,391,377,348,0,349,332,449],
[395,460,453,571,577,400,542,0,482,513],
[446,551,408,479,510,487,559,409,0,414],
[366,431,359,496,436,399,442,378,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,448,458,431,452,447,457,461,500],
[417,0,423,437,457,473,412,454,425,466],
[443,468,0,439,440,438,429,454,457,438],
[433,454,452,0,437,463,474,448,465,428],
[460,434,451,454,0,436,426,451,426,434],
[439,418,453,428,455,0,431,458,452,452],
[444,479,462,417,465,460,0,471,439,454],
[434,437,437,443,440,433,420,0,433,444],
[430,466,434,426,465,439,452,458,0,439],
[391,425,453,463,457,439,437,447,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,486,444,447,454,467,438,443],
[449,0,402,475,441,415,451,420,427,401],
[457,489,0,496,465,461,471,441,458,445],
[405,416,395,0,406,402,423,425,385,401],
[447,450,426,485,0,444,480,427,455,434],
[444,476,430,489,447,0,455,454,420,419],
[437,440,420,468,411,436,0,418,430,421],
[424,471,450,466,464,437,473,0,454,436],
[453,464,433,506,436,471,461,437,0,460],
[448,490,446,490,457,472,470,455,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,472,492,394,499,431,478,426,459],
[472,0,514,521,438,473,441,405,457,380],
[419,377,0,478,418,494,501,386,425,362],
[399,370,413,0,353,455,395,348,394,342],
[497,453,473,538,0,545,471,430,494,369],
[392,418,397,436,346,0,454,378,390,341],
[460,450,390,496,420,437,0,408,406,340],
[413,486,505,543,461,513,483,0,510,472],
[465,434,466,497,397,501,485,381,0,390],
[432,511,529,549,522,550,551,419,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,413,442,439,404,452,440,430,443],
[457,0,427,451,452,413,454,456,416,437],
[478,464,0,466,464,450,463,479,458,435],
[449,440,425,0,431,431,430,433,437,440],
[452,439,427,460,0,411,438,452,428,432],
[487,478,441,460,480,0,463,478,447,451],
[439,437,428,461,453,428,0,452,438,439],
[451,435,412,458,439,413,439,0,429,433],
[461,475,433,454,463,444,453,462,0,457],
[448,454,456,451,459,440,452,458,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,460,449,462,439,471,430,442,457],
[451,0,450,461,464,440,482,466,463,436],
[431,441,0,468,444,401,473,460,452,444],
[442,430,423,0,457,449,471,444,459,438],
[429,427,447,434,0,407,447,424,435,427],
[452,451,490,442,484,0,485,457,478,457],
[420,409,418,420,444,406,0,417,426,422],
[461,425,431,447,467,434,474,0,432,445],
[449,428,439,432,456,413,465,459,0,451],
[434,455,447,453,464,434,469,446,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,444,434,469,453,442,493,446,446],
[494,0,488,442,529,477,487,501,478,429],
[447,403,0,429,473,409,455,474,422,437],
[457,449,462,0,445,445,459,468,420,441],
[422,362,418,446,0,418,459,472,372,418],
[438,414,482,446,473,0,499,491,481,454],
[449,404,436,432,432,392,0,478,432,435],
[398,390,417,423,419,400,413,0,406,417],
[445,413,469,471,519,410,459,485,0,468],
[445,462,454,450,473,437,456,474,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,291,400,375,496,364,337,428,412],
[463,0,330,393,402,507,379,434,409,475],
[600,561,0,479,460,531,381,446,550,587],
[491,498,412,0,373,506,428,479,484,532],
[516,489,431,518,0,612,487,442,472,492],
[395,384,360,385,279,0,305,295,375,410],
[527,512,510,463,404,586,0,494,506,592],
[554,457,445,412,449,596,397,0,514,438],
[463,482,341,407,419,516,385,377,0,494],
[479,416,304,359,399,481,299,453,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,433,424,465,393,421,428,413,418],
[497,0,517,478,493,443,511,495,476,448],
[458,374,0,416,439,382,450,422,395,439],
[467,413,475,0,465,435,464,436,427,418],
[426,398,452,426,0,396,441,434,429,399],
[498,448,509,456,495,0,459,481,424,443],
[470,380,441,427,450,432,0,414,417,396],
[463,396,469,455,457,410,477,0,442,418],
[478,415,496,464,462,467,474,449,0,489],
[473,443,452,473,492,448,495,473,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,449,447,438,447,451,447,456,464],
[429,0,447,429,422,459,450,431,438,436],
[442,444,0,416,440,444,442,437,451,433],
[444,462,475,0,470,467,437,471,446,439],
[453,469,451,421,0,451,458,454,445,461],
[444,432,447,424,440,0,448,420,436,435],
[440,441,449,454,433,443,0,452,448,451],
[444,460,454,420,437,471,439,0,449,446],
[435,453,440,445,446,455,443,442,0,457],
[427,455,458,452,430,456,440,445,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,446,437,429,451,442,439,437,438],
[458,0,427,434,449,451,443,448,414,432],
[445,464,0,427,450,465,456,444,429,459],
[454,457,464,0,467,457,457,440,444,467],
[462,442,441,424,0,444,448,484,439,438],
[440,440,426,434,447,0,453,429,447,431],
[449,448,435,434,443,438,0,427,412,438],
[452,443,447,451,407,462,464,0,428,456],
[454,477,462,447,452,444,479,463,0,437],
[453,459,432,424,453,460,453,435,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,451,471,410,422,370,453,388,431],
[476,0,463,475,420,449,448,457,434,457],
[440,428,0,441,416,397,418,445,423,418],
[420,416,450,0,400,402,422,433,393,427],
[481,471,475,491,0,440,455,469,438,480],
[469,442,494,489,451,0,420,435,444,450],
[521,443,473,469,436,471,0,448,446,494],
[438,434,446,458,422,456,443,0,402,454],
[503,457,468,498,453,447,445,489,0,479],
[460,434,473,464,411,441,397,437,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,403,417,422,417,422,432,436,447],
[471,0,408,431,452,462,476,426,433,454],
[488,483,0,452,473,481,472,444,498,483],
[474,460,439,0,441,466,474,449,459,456],
[469,439,418,450,0,468,463,440,467,457],
[474,429,410,425,423,0,440,420,437,442],
[469,415,419,417,428,451,0,410,454,458],
[459,465,447,442,451,471,481,0,461,445],
[455,458,393,432,424,454,437,430,0,456],
[444,437,408,435,434,449,433,446,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,427,449,449,417,443,414,423,457],
[451,0,462,423,441,425,436,409,429,440],
[464,429,0,446,433,408,460,434,424,434],
[442,468,445,0,432,399,448,423,437,430],
[442,450,458,459,0,437,461,471,465,465],
[474,466,483,492,454,0,491,483,436,503],
[448,455,431,443,430,400,0,437,433,454],
[477,482,457,468,420,408,454,0,449,470],
[468,462,467,454,426,455,458,442,0,447],
[434,451,457,461,426,388,437,421,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,442,457,437,456,421,448,459],
[431,0,449,437,446,410,458,424,429,447],
[438,442,0,416,460,425,451,416,425,456],
[449,454,475,0,471,428,483,457,439,470],
[434,445,431,420,0,424,453,427,419,457],
[454,481,466,463,467,0,496,466,445,482],
[435,433,440,408,438,395,0,422,428,451],
[470,467,475,434,464,425,469,0,447,481],
[443,462,466,452,472,446,463,444,0,490],
[432,444,435,421,434,409,440,410,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,413,424,439,449,424,430,453,487],
[438,0,414,402,457,441,440,458,463,443],
[478,477,0,492,473,483,424,467,475,506],
[467,489,399,0,442,444,435,439,465,450],
[452,434,418,449,0,426,423,408,459,412],
[442,450,408,447,465,0,463,444,458,468],
[467,451,467,456,468,428,0,463,497,471],
[461,433,424,452,483,447,428,0,484,469],
[438,428,416,426,432,433,394,407,0,471],
[404,448,385,441,479,423,420,422,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,433,444,424,446,441,454,435,466],
[469,0,452,458,436,437,446,454,454,441],
[458,439,0,445,439,442,465,445,452,434],
[447,433,446,0,441,438,441,451,452,449],
[467,455,452,450,0,438,454,462,463,456],
[445,454,449,453,453,0,450,438,440,447],
[450,445,426,450,437,441,0,445,452,451],
[437,437,446,440,429,453,446,0,451,430],
[456,437,439,439,428,451,439,440,0,442],
[425,450,457,442,435,444,440,461,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,454,450,459,397,435,440,462,423],
[444,0,450,452,414,368,469,409,460,444],
[437,441,0,421,408,357,392,423,413,424],
[441,439,470,0,422,426,467,428,492,477],
[432,477,483,469,0,425,417,464,446,470],
[494,523,534,465,466,0,429,478,479,504],
[456,422,499,424,474,462,0,453,462,487],
[451,482,468,463,427,413,438,0,499,485],
[429,431,478,399,445,412,429,392,0,467],
[468,447,467,414,421,387,404,406,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,401,458,443,409,506,453,441,486],
[410,0,371,445,390,381,444,449,387,411],
[490,520,0,491,433,478,478,505,444,485],
[433,446,400,0,415,372,468,466,396,470],
[448,501,458,476,0,386,469,496,455,464],
[482,510,413,519,505,0,519,519,481,486],
[385,447,413,423,422,372,0,454,429,447],
[438,442,386,425,395,372,437,0,407,433],
[450,504,447,495,436,410,462,484,0,476],
[405,480,406,421,427,405,444,458,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,448,427,439,454,427,456,449,466],
[433,0,442,425,441,430,414,428,458,423],
[443,449,0,425,433,428,408,416,446,445],
[464,466,466,0,429,472,440,442,449,453],
[452,450,458,462,0,447,439,454,451,436],
[437,461,463,419,444,0,450,446,438,444],
[464,477,483,451,452,441,0,434,445,472],
[435,463,475,449,437,445,457,0,454,455],
[442,433,445,442,440,453,446,437,0,449],
[425,468,446,438,455,447,419,436,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,441,428,447,442,436,435,469,455],
[458,0,446,440,448,443,426,437,444,453],
[450,445,0,408,450,454,423,443,453,450],
[463,451,483,0,483,458,442,449,468,471],
[444,443,441,408,0,453,435,427,459,461],
[449,448,437,433,438,0,423,430,444,469],
[455,465,468,449,456,468,0,441,461,474],
[456,454,448,442,464,461,450,0,460,473],
[422,447,438,423,432,447,430,431,0,443],
[436,438,441,420,430,422,417,418,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,479,493,459,467,492,486,454,449],
[450,0,468,477,458,495,480,445,453,448],
[412,423,0,480,423,442,469,425,419,417],
[398,414,411,0,383,434,435,372,422,408],
[432,433,468,508,0,452,491,442,458,444],
[424,396,449,457,439,0,447,427,413,432],
[399,411,422,456,400,444,0,419,422,439],
[405,446,466,519,449,464,472,0,464,430],
[437,438,472,469,433,478,469,427,0,460],
[442,443,474,483,447,459,452,461,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,461,418,453,441,418,492,414,448],
[440,0,484,422,471,443,431,464,435,449],
[430,407,0,404,448,430,398,433,407,416],
[473,469,487,0,470,439,426,461,438,424],
[438,420,443,421,0,431,423,442,443,437],
[450,448,461,452,460,0,425,491,429,456],
[473,460,493,465,468,466,0,501,442,475],
[399,427,458,430,449,400,390,0,407,423],
[477,456,484,453,448,462,449,484,0,442],
[443,442,475,467,454,435,416,468,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,412,446,416,426,450,418,432,414],
[475,0,429,486,451,471,433,426,440,422],
[479,462,0,488,466,432,478,450,461,463],
[445,405,403,0,385,414,433,431,428,396],
[475,440,425,506,0,443,458,463,441,413],
[465,420,459,477,448,0,444,456,453,450],
[441,458,413,458,433,447,0,423,445,433],
[473,465,441,460,428,435,468,0,477,424],
[459,451,430,463,450,438,446,414,0,433],
[477,469,428,495,478,441,458,467,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,422,446,429,432,432,422,427,432],
[469,0,441,457,469,445,451,415,432,457],
[469,450,0,456,455,451,438,437,434,438],
[445,434,435,0,432,425,433,430,415,431],
[462,422,436,459,0,444,429,431,427,445],
[459,446,440,466,447,0,431,433,431,447],
[459,440,453,458,462,460,0,433,440,435],
[469,476,454,461,460,458,458,0,439,454],
[464,459,457,476,464,460,451,452,0,437],
[459,434,453,460,446,444,456,437,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,442,427,457,448,449,466,454,452],
[445,0,465,452,477,456,467,443,458,457],
[449,426,0,433,453,443,456,424,465,421],
[464,439,458,0,446,457,444,465,461,448],
[434,414,438,445,0,441,466,441,454,450],
[443,435,448,434,450,0,468,432,448,448],
[442,424,435,447,425,423,0,446,436,422],
[425,448,467,426,450,459,445,0,445,452],
[437,433,426,430,437,443,455,446,0,439],
[439,434,470,443,441,443,469,439,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,504,497,512,447,439,495,459,496],
[456,0,481,452,444,460,484,482,448,491],
[387,410,0,433,447,414,394,420,417,448],
[394,439,458,0,452,430,470,473,465,493],
[379,447,444,439,0,411,439,450,493,509],
[444,431,477,461,480,0,465,476,435,481],
[452,407,497,421,452,426,0,481,457,475],
[396,409,471,418,441,415,410,0,438,470],
[432,443,474,426,398,456,434,453,0,478],
[395,400,443,398,382,410,416,421,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,474,474,436,491,511,476,437,546],
[389,0,427,442,429,430,446,442,466,471],
[417,464,0,484,459,369,481,475,476,491],
[417,449,407,0,413,380,491,486,435,465],
[455,462,432,478,0,463,471,418,449,497],
[400,461,522,511,428,0,512,492,499,520],
[380,445,410,400,420,379,0,420,453,452],
[415,449,416,405,473,399,471,0,423,505],
[454,425,415,456,442,392,438,468,0,488],
[345,420,400,426,394,371,439,386,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,426,414,460,404,443,413,422,446],
[453,0,402,414,435,417,407,367,393,417],
[465,489,0,441,463,472,465,456,425,468],
[477,477,450,0,456,453,470,434,444,450],
[431,456,428,435,0,438,421,413,403,435],
[487,474,419,438,453,0,455,437,471,459],
[448,484,426,421,470,436,0,425,425,454],
[478,524,435,457,478,454,466,0,444,474],
[469,498,466,447,488,420,466,447,0,472],
[445,474,423,441,456,432,437,417,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,429,443,447,428,398,407,419,451],
[481,0,446,457,458,435,444,446,442,467],
[462,445,0,430,457,441,433,465,443,471],
[448,434,461,0,451,433,446,450,431,447],
[444,433,434,440,0,409,421,451,437,446],
[463,456,450,458,482,0,427,457,443,472],
[493,447,458,445,470,464,0,477,457,471],
[484,445,426,441,440,434,414,0,435,463],
[472,449,448,460,454,448,434,456,0,451],
[440,424,420,444,445,419,420,428,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,454,451,447,437,445,422,415,448],
[452,0,444,454,450,455,456,430,448,443],
[437,447,0,452,438,445,431,457,437,447],
[440,437,439,0,444,447,449,446,444,444],
[444,441,453,447,0,447,457,452,440,424],
[454,436,446,444,444,0,450,438,443,448],
[446,435,460,442,434,441,0,426,450,431],
[469,461,434,445,439,453,465,0,434,433],
[476,443,454,447,451,448,441,457,0,434],
[443,448,444,447,467,443,460,458,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,440,445,440,447,447,427,456,423],
[441,0,461,452,436,453,438,449,446,436],
[451,430,0,443,448,439,465,425,453,423],
[446,439,448,0,437,443,424,448,463,437],
[451,455,443,454,0,457,462,449,464,423],
[444,438,452,448,434,0,435,449,425,450],
[444,453,426,467,429,456,0,460,463,419],
[464,442,466,443,442,442,431,0,469,432],
[435,445,438,428,427,466,428,422,0,414],
[468,455,468,454,468,441,472,459,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,445,429,455,452,460,406,427,441],
[473,0,469,472,461,479,473,440,465,472],
[446,422,0,447,471,443,468,449,461,473],
[462,419,444,0,463,449,456,446,456,453],
[436,430,420,428,0,457,437,428,428,445],
[439,412,448,442,434,0,474,424,446,453],
[431,418,423,435,454,417,0,418,440,436],
[485,451,442,445,463,467,473,0,472,430],
[464,426,430,435,463,445,451,419,0,454],
[450,419,418,438,446,438,455,461,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,439,433,469,435,452,462,439,423],
[439,0,443,430,451,443,421,465,412,456],
[452,448,0,434,485,441,432,459,445,439],
[458,461,457,0,472,456,438,464,447,438],
[422,440,406,419,0,423,422,431,421,420],
[456,448,450,435,468,0,453,461,444,448],
[439,470,459,453,469,438,0,482,438,422],
[429,426,432,427,460,430,409,0,432,426],
[452,479,446,444,470,447,453,459,0,431],
[468,435,452,453,471,443,469,465,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,391,428,398,494,413,399,394,446],
[446,0,406,427,401,475,421,406,375,405],
[500,485,0,435,452,518,461,461,455,484],
[463,464,456,0,432,515,416,424,432,439],
[493,490,439,459,0,489,438,412,464,461],
[397,416,373,376,402,0,396,335,330,416],
[478,470,430,475,453,495,0,404,398,454],
[492,485,430,467,479,556,487,0,406,501],
[497,516,436,459,427,561,493,485,0,467],
[445,486,407,452,430,475,437,390,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,495,483,479,472,445,450,468,500],
[423,0,450,439,454,464,427,426,434,451],
[396,441,0,429,427,434,413,408,447,412],
[408,452,462,0,458,459,448,440,450,451],
[412,437,464,433,0,455,445,406,427,448],
[419,427,457,432,436,0,417,413,458,480],
[446,464,478,443,446,474,0,436,433,456],
[441,465,483,451,485,478,455,0,455,482],
[423,457,444,441,464,433,458,436,0,470],
[391,440,479,440,443,411,435,409,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,468,413,441,358,428,458,455,452],
[481,0,489,455,498,421,500,490,490,466],
[423,402,0,386,444,371,431,397,415,387],
[478,436,505,0,491,443,490,468,427,444],
[450,393,447,400,0,467,460,404,436,435],
[533,470,520,448,424,0,505,482,517,443],
[463,391,460,401,431,386,0,458,437,364],
[433,401,494,423,487,409,433,0,442,427],
[436,401,476,464,455,374,454,449,0,436],
[439,425,504,447,456,448,527,464,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,427,465,450,437,452,405,429,431],
[433,0,431,460,419,430,444,405,428,431],
[464,460,0,450,456,438,467,430,454,445],
[426,431,441,0,445,431,454,405,444,429],
[441,472,435,446,0,446,451,447,451,454],
[454,461,453,460,445,0,469,436,450,443],
[439,447,424,437,440,422,0,426,414,423],
[486,486,461,486,444,455,465,0,472,450],
[462,463,437,447,440,441,477,419,0,442],
[460,460,446,462,437,448,468,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,422,421,428,414,442,437,425,417],
[489,0,447,449,460,453,448,464,459,445],
[469,444,0,443,461,440,444,428,427,433],
[470,442,448,0,450,427,460,445,430,425],
[463,431,430,441,0,432,444,440,434,432],
[477,438,451,464,459,0,444,445,460,437],
[449,443,447,431,447,447,0,451,446,440],
[454,427,463,446,451,446,440,0,421,447],
[466,432,464,461,457,431,445,470,0,452],
[474,446,458,466,459,454,451,444,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,438,435,402,473,431,456,479,371],
[455,0,446,412,409,473,474,461,424,414],
[453,445,0,360,399,431,441,435,388,419],
[456,479,531,0,460,459,480,471,443,483],
[489,482,492,431,0,480,498,488,447,447],
[418,418,460,432,411,0,445,422,425,389],
[460,417,450,411,393,446,0,506,433,425],
[435,430,456,420,403,469,385,0,397,385],
[412,467,503,448,444,466,458,494,0,437],
[520,477,472,408,444,502,466,506,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,431,448,448,439,450,479,446,463],
[447,0,426,430,420,410,434,481,426,449],
[460,465,0,419,426,436,441,469,449,434],
[443,461,472,0,475,450,430,502,460,490],
[443,471,465,416,0,429,426,460,452,464],
[452,481,455,441,462,0,432,474,459,512],
[441,457,450,461,465,459,0,456,448,453],
[412,410,422,389,431,417,435,0,439,456],
[445,465,442,431,439,432,443,452,0,458],
[428,442,457,401,427,379,438,435,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,488,452,445,452,437,462,467,441],
[465,0,481,442,446,481,470,465,453,439],
[403,410,0,383,430,455,427,418,403,422],
[439,449,508,0,447,465,458,466,455,461],
[446,445,461,444,0,459,424,437,457,452],
[439,410,436,426,432,0,443,439,422,426],
[454,421,464,433,467,448,0,455,468,468],
[429,426,473,425,454,452,436,0,420,441],
[424,438,488,436,434,469,423,471,0,431],
[450,452,469,430,439,465,423,450,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,403,453,408,447,458,457,405,400],
[487,0,473,503,465,505,524,494,441,485],
[488,418,0,479,426,458,496,475,451,481],
[438,388,412,0,365,483,484,478,437,449],
[483,426,465,526,0,500,507,501,475,463],
[444,386,433,408,391,0,472,453,423,442],
[433,367,395,407,384,419,0,439,423,424],
[434,397,416,413,390,438,452,0,393,431],
[486,450,440,454,416,468,468,498,0,448],
[491,406,410,442,428,449,467,460,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,467,471,475,503,433,455,466,431],
[474,0,422,513,459,510,455,479,473,406],
[424,469,0,514,462,505,442,442,464,426],
[420,378,377,0,436,513,421,413,405,396],
[416,432,429,455,0,517,411,428,433,395],
[388,381,386,378,374,0,399,383,404,364],
[458,436,449,470,480,492,0,483,476,420],
[436,412,449,478,463,508,408,0,411,434],
[425,418,427,486,458,487,415,480,0,450],
[460,485,465,495,496,527,471,457,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,306,405,349,392,299,307,480,512],
[582,0,411,395,393,413,379,403,465,539],
[585,480,0,404,507,440,397,420,530,595],
[486,496,487,0,447,445,436,480,552,551],
[542,498,384,444,0,362,368,504,464,532],
[499,478,451,446,529,0,488,439,445,575],
[592,512,494,455,523,403,0,446,516,619],
[584,488,471,411,387,452,445,0,602,623],
[411,426,361,339,427,446,375,289,0,454],
[379,352,296,340,359,316,272,268,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,443,433,421,425,452,401,454,429],
[481,0,510,448,440,455,493,459,502,449],
[448,381,0,383,476,411,363,375,431,365],
[458,443,508,0,379,429,479,354,458,414],
[470,451,415,512,0,436,484,442,513,482],
[466,436,480,462,455,0,489,415,492,462],
[439,398,528,412,407,402,0,385,464,397],
[490,432,516,537,449,476,506,0,515,517],
[437,389,460,433,378,399,427,376,0,415],
[462,442,526,477,409,429,494,374,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,427,421,451,435,414,435,444],
[458,0,443,444,439,407,440,452,456,441],
[441,448,0,426,421,433,443,442,437,444],
[464,447,465,0,419,430,430,435,459,440],
[470,452,470,472,0,434,470,457,461,483],
[440,484,458,461,457,0,433,445,450,449],
[456,451,448,461,421,458,0,457,443,450],
[477,439,449,456,434,446,434,0,448,454],
[456,435,454,432,430,441,448,443,0,432],
[447,450,447,451,408,442,441,437,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,456,440,465,470,462,449,442,476],
[448,0,446,442,446,437,452,431,457,457],
[435,445,0,435,456,438,433,436,449,444],
[451,449,456,0,434,440,458,453,444,464],
[426,445,435,457,0,437,449,440,436,439],
[421,454,453,451,454,0,452,433,435,434],
[429,439,458,433,442,439,0,443,462,464],
[442,460,455,438,451,458,448,0,446,459],
[449,434,442,447,455,456,429,445,0,452],
[415,434,447,427,452,457,427,432,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,438,421,414,472,433,415,422,472],
[486,0,462,427,423,459,453,436,426,483],
[453,429,0,413,408,436,461,423,412,465],
[470,464,478,0,448,440,452,455,418,490],
[477,468,483,443,0,460,460,441,427,492],
[419,432,455,451,431,0,472,421,419,480],
[458,438,430,439,431,419,0,414,427,497],
[476,455,468,436,450,470,477,0,451,457],
[469,465,479,473,464,472,464,440,0,483],
[419,408,426,401,399,411,394,434,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,448,438,442,444,446,457,476,444],
[444,0,430,451,470,472,468,457,475,469],
[443,461,0,454,437,466,449,453,469,437],
[453,440,437,0,447,489,439,447,459,457],
[449,421,454,444,0,461,431,447,442,464],
[447,419,425,402,430,0,434,430,450,416],
[445,423,442,452,460,457,0,456,452,450],
[434,434,438,444,444,461,435,0,459,444],
[415,416,422,432,449,441,439,432,0,418],
[447,422,454,434,427,475,441,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,424,454,449,413,435,419,463,436],
[447,0,422,467,445,433,427,402,484,400],
[467,469,0,468,470,442,452,450,474,447],
[437,424,423,0,437,406,419,386,438,412],
[442,446,421,454,0,425,417,433,451,411],
[478,458,449,485,466,0,476,444,472,443],
[456,464,439,472,474,415,0,423,471,443],
[472,489,441,505,458,447,468,0,488,440],
[428,407,417,453,440,419,420,403,0,400],
[455,491,444,479,480,448,448,451,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,418,448,438,442,422,413,433,391],
[383,0,474,441,417,391,405,412,403,316],
[473,417,0,460,429,337,338,463,510,351],
[443,450,431,0,429,462,487,467,458,425],
[453,474,462,462,0,504,491,491,472,395],
[449,500,554,429,387,0,466,469,458,387],
[469,486,553,404,400,425,0,486,554,447],
[478,479,428,424,400,422,405,0,440,403],
[458,488,381,433,419,433,337,451,0,378],
[500,575,540,466,496,504,444,488,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,432,400,427,437,428,413,414,435],
[473,0,457,446,441,501,454,438,467,488],
[459,434,0,434,401,483,440,450,427,465],
[491,445,457,0,440,488,449,455,452,458],
[464,450,490,451,0,486,472,466,442,468],
[454,390,408,403,405,0,432,422,408,451],
[463,437,451,442,419,459,0,447,434,447],
[478,453,441,436,425,469,444,0,435,436],
[477,424,464,439,449,483,457,456,0,471],
[456,403,426,433,423,440,444,455,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,441,434,438,432,462,454,428,412],
[455,0,432,452,455,464,475,465,435,436],
[450,459,0,453,431,467,471,460,451,447],
[457,439,438,0,438,428,458,434,438,414],
[453,436,460,453,0,464,476,452,464,419],
[459,427,424,463,427,0,451,439,428,424],
[429,416,420,433,415,440,0,454,408,417],
[437,426,431,457,439,452,437,0,428,424],
[463,456,440,453,427,463,483,463,0,445],
[479,455,444,477,472,467,474,467,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,439,466,445,445,496,448,450,461],
[451,0,430,441,448,458,487,443,466,444],
[452,461,0,447,466,437,463,452,457,424],
[425,450,444,0,439,425,445,429,440,428],
[446,443,425,452,0,473,500,463,472,450],
[446,433,454,466,418,0,465,443,451,417],
[395,404,428,446,391,426,0,421,438,424],
[443,448,439,462,428,448,470,0,497,468],
[441,425,434,451,419,440,453,394,0,403],
[430,447,467,463,441,474,467,423,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,404,429,415,400,432,425,403,412],
[465,0,440,467,443,435,441,462,440,426],
[487,451,0,464,430,434,446,425,444,421],
[462,424,427,0,439,402,444,424,407,407],
[476,448,461,452,0,440,439,451,437,447],
[491,456,457,489,451,0,450,452,446,424],
[459,450,445,447,452,441,0,449,454,457],
[466,429,466,467,440,439,442,0,415,416],
[488,451,447,484,454,445,437,476,0,463],
[479,465,470,484,444,467,434,475,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,448,449,399,423,362,418,436,407],
[466,0,504,412,441,425,509,447,578,485],
[443,387,0,384,413,408,362,377,475,365],
[442,479,507,0,449,484,447,360,534,492],
[492,450,478,442,0,465,449,432,523,424],
[468,466,483,407,426,0,364,412,522,485],
[529,382,529,444,442,527,0,441,487,463],
[473,444,514,531,459,479,450,0,527,528],
[455,313,416,357,368,369,404,364,0,449],
[484,406,526,399,467,406,428,363,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,462,449,437,448,452,452,443,428],
[449,0,427,433,460,441,432,450,442,449],
[429,464,0,438,461,432,453,456,450,439],
[442,458,453,0,446,437,433,441,461,445],
[454,431,430,445,0,448,443,450,437,452],
[443,450,459,454,443,0,441,459,467,441],
[439,459,438,458,448,450,0,448,449,449],
[439,441,435,450,441,432,443,0,427,454],
[448,449,441,430,454,424,442,464,0,429],
[463,442,452,446,439,450,442,437,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,462,456,442,449,456,454,431,463],
[428,0,437,433,437,446,458,448,411,436],
[429,454,0,411,434,447,435,440,443,428],
[435,458,480,0,449,455,457,458,416,422],
[449,454,457,442,0,438,427,469,434,443],
[442,445,444,436,453,0,460,450,428,472],
[435,433,456,434,464,431,0,478,447,441],
[437,443,451,433,422,441,413,0,414,423],
[460,480,448,475,457,463,444,477,0,454],
[428,455,463,469,448,419,450,468,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,409,446,441,439,433,449,431,452],
[414,0,426,433,445,441,435,478,416,432],
[482,465,0,433,454,461,438,466,452,466],
[445,458,458,0,455,458,464,485,454,493],
[450,446,437,436,0,450,445,478,440,445],
[452,450,430,433,441,0,430,441,436,432],
[458,456,453,427,446,461,0,467,419,458],
[442,413,425,406,413,450,424,0,423,435],
[460,475,439,437,451,455,472,468,0,464],
[439,459,425,398,446,459,433,456,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,464,427,440,438,453,435,436,452],
[422,0,448,410,413,420,437,412,430,425],
[427,443,0,391,424,415,445,437,415,443],
[464,481,500,0,455,444,448,449,466,456],
[451,478,467,436,0,432,459,447,436,445],
[453,471,476,447,459,0,459,444,444,464],
[438,454,446,443,432,432,0,437,416,441],
[456,479,454,442,444,447,454,0,431,462],
[455,461,476,425,455,447,475,460,0,440],
[439,466,448,435,446,427,450,429,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,431,460,414,429,420,436,417],
[442,0,421,452,443,437,382,418,421,420],
[442,470,0,443,478,451,425,471,464,449],
[460,439,448,0,481,428,412,453,417,433],
[431,448,413,410,0,381,377,452,416,429],
[477,454,440,463,510,0,451,467,473,431],
[462,509,466,479,514,440,0,464,492,469],
[471,473,420,438,439,424,427,0,448,442],
[455,470,427,474,475,418,399,443,0,454],
[474,471,442,458,462,460,422,449,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,435,442,429,451,438,464,429,435],
[447,0,438,450,438,432,432,464,424,407],
[456,453,0,467,435,450,431,463,420,434],
[449,441,424,0,451,433,435,448,438,426],
[462,453,456,440,0,440,426,471,450,429],
[440,459,441,458,451,0,423,443,440,428],
[453,459,460,456,465,468,0,472,444,438],
[427,427,428,443,420,448,419,0,420,433],
[462,467,471,453,441,451,447,471,0,446],
[456,484,457,465,462,463,453,458,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,375,386,422,417,366,393,454,399],
[481,0,427,465,503,485,482,449,512,490],
[516,464,0,464,477,464,421,418,486,436],
[505,426,427,0,432,501,422,432,437,433],
[469,388,414,459,0,464,429,441,432,470],
[474,406,427,390,427,0,404,407,465,433],
[525,409,470,469,462,487,0,468,482,492],
[498,442,473,459,450,484,423,0,490,478],
[437,379,405,454,459,426,409,401,0,415],
[492,401,455,458,421,458,399,413,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,447,444,455,428,484,457,432,450],
[489,0,476,461,460,429,474,457,448,443],
[444,415,0,445,462,397,443,430,428,416],
[447,430,446,0,453,432,455,432,425,441],
[436,431,429,438,0,437,447,432,421,437],
[463,462,494,459,454,0,486,453,444,460],
[407,417,448,436,444,405,0,419,426,422],
[434,434,461,459,459,438,472,0,448,452],
[459,443,463,466,470,447,465,443,0,471],
[441,448,475,450,454,431,469,439,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,451,501,454,433,429,464,491,471],
[413,0,448,444,404,410,432,453,477,451],
[440,443,0,477,432,427,434,447,483,440],
[390,447,414,0,388,418,387,425,451,446],
[437,487,459,503,0,474,437,439,509,455],
[458,481,464,473,417,0,451,455,458,467],
[462,459,457,504,454,440,0,484,528,479],
[427,438,444,466,452,436,407,0,475,490],
[400,414,408,440,382,433,363,416,0,418],
[420,440,451,445,436,424,412,401,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,464,471,423,430,447,422,467,434],
[466,0,450,426,381,438,435,406,434,433],
[427,441,0,447,428,410,431,410,442,417],
[420,465,444,0,417,392,445,394,430,446],
[468,510,463,474,0,435,489,448,500,467],
[461,453,481,499,456,0,445,446,475,458],
[444,456,460,446,402,446,0,436,503,416],
[469,485,481,497,443,445,455,0,444,470],
[424,457,449,461,391,416,388,447,0,386],
[457,458,474,445,424,433,475,421,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,441,432,422,443,431,429,435,428],
[449,0,440,444,429,438,461,451,460,449],
[450,451,0,455,429,451,437,449,425,415],
[459,447,436,0,443,452,453,445,455,405],
[469,462,462,448,0,460,440,451,461,442],
[448,453,440,439,431,0,429,418,426,449],
[460,430,454,438,451,462,0,436,453,426],
[462,440,442,446,440,473,455,0,444,435],
[456,431,466,436,430,465,438,447,0,417],
[463,442,476,486,449,442,465,456,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,365,387,399,368,397,369,392,403],
[533,0,478,511,467,478,488,438,472,491],
[526,413,0,458,458,451,487,444,421,470],
[504,380,433,0,454,423,438,442,433,441],
[492,424,433,437,0,456,478,450,447,491],
[523,413,440,468,435,0,437,398,458,457],
[494,403,404,453,413,454,0,419,436,457],
[522,453,447,449,441,493,472,0,485,492],
[499,419,470,458,444,433,455,406,0,479],
[488,400,421,450,400,434,434,399,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,462,447,450,457,442,464,510,461],
[436,0,445,476,417,460,417,422,470,460],
[429,446,0,436,425,455,401,395,472,439],
[444,415,455,0,415,417,414,426,470,451],
[441,474,466,476,0,448,463,421,526,441],
[434,431,436,474,443,0,432,440,484,440],
[449,474,490,477,428,459,0,431,446,420],
[427,469,496,465,470,451,460,0,492,472],
[381,421,419,421,365,407,445,399,0,404],
[430,431,452,440,450,451,471,419,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,435,439,447,476,428,476,430,468],
[408,0,438,431,439,475,412,437,405,435],
[456,453,0,435,426,474,431,457,411,433],
[452,460,456,0,415,458,422,466,439,443],
[444,452,465,476,0,463,439,469,453,450],
[415,416,417,433,428,0,417,446,414,434],
[463,479,460,469,452,474,0,472,427,452],
[415,454,434,425,422,445,419,0,422,440],
[461,486,480,452,438,477,464,469,0,466],
[423,456,458,448,441,457,439,451,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,446,453,450,453,458,451,454,450],
[455,0,455,458,436,430,470,457,444,456],
[445,436,0,436,445,433,442,418,433,439],
[438,433,455,0,428,424,457,425,428,434],
[441,455,446,463,0,434,457,442,443,433],
[438,461,458,467,457,0,477,460,426,441],
[433,421,449,434,434,414,0,429,438,432],
[440,434,473,466,449,431,462,0,460,452],
[437,447,458,463,448,465,453,431,0,436],
[441,435,452,457,458,450,459,439,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,443,431,432,441,439,419,432,434],
[442,0,431,441,461,470,447,423,438,441],
[448,460,0,448,433,449,413,423,427,441],
[460,450,443,0,428,461,452,426,446,445],
[459,430,458,463,0,461,458,431,454,465],
[450,421,442,430,430,0,429,438,436,466],
[452,444,478,439,433,462,0,450,431,447],
[472,468,468,465,460,453,441,0,471,461],
[459,453,464,445,437,455,460,420,0,459],
[457,450,450,446,426,425,444,430,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,298,460,437,379,398,425,213,304],
[656,0,482,596,508,429,449,571,351,492],
[593,409,0,454,391,372,378,433,255,268],
[431,295,437,0,437,416,394,384,370,364],
[454,383,500,454,0,400,441,403,405,330],
[512,462,519,475,491,0,410,479,483,358],
[493,442,513,497,450,481,0,420,474,423],
[466,320,458,507,488,412,471,0,462,363],
[678,540,636,521,486,408,417,429,0,545],
[587,399,623,527,561,533,468,528,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,446,441,422,451,421,448,402,452],
[418,0,424,430,426,449,416,445,459,443],
[445,467,0,445,449,455,419,449,457,439],
[450,461,446,0,421,431,420,434,428,437],
[469,465,442,470,0,454,447,443,483,455],
[440,442,436,460,437,0,424,439,415,428],
[470,475,472,471,444,467,0,430,450,491],
[443,446,442,457,448,452,461,0,463,473],
[489,432,434,463,408,476,441,428,0,453],
[439,448,452,454,436,463,400,418,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,382,241,362,132,494,330,233,276],
[373,0,339,258,425,105,469,227,282,271],
[509,552,0,415,537,310,437,488,336,284],
[650,633,476,0,436,391,562,299,390,277],
[529,466,354,455,0,344,511,372,404,348],
[759,786,581,500,547,0,606,447,656,439],
[397,422,454,329,380,285,0,251,326,342],
[561,664,403,592,519,444,640,0,541,461],
[658,609,555,501,487,235,565,350,0,386],
[615,620,607,614,543,452,549,430,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,449,436,452,441,449,455,438,433],
[446,0,452,457,437,427,450,434,453,443],
[442,439,0,471,458,411,437,449,412,450],
[455,434,420,0,448,430,457,443,408,430],
[439,454,433,443,0,450,450,447,459,441],
[450,464,480,461,441,0,466,464,454,450],
[442,441,454,434,441,425,0,437,432,444],
[436,457,442,448,444,427,454,0,436,444],
[453,438,479,483,432,437,459,455,0,445],
[458,448,441,461,450,441,447,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,415,434,427,403,417,373,436,402],
[506,0,436,455,465,457,444,449,446,440],
[476,455,0,441,492,446,441,436,441,437],
[457,436,450,0,456,415,447,448,446,403],
[464,426,399,435,0,424,476,461,449,451],
[488,434,445,476,467,0,467,429,501,477],
[474,447,450,444,415,424,0,436,451,458],
[518,442,455,443,430,462,455,0,428,477],
[455,445,450,445,442,390,440,463,0,438],
[489,451,454,488,440,414,433,414,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,472,485,463,404,433,444,489,456],
[475,0,484,509,446,455,440,484,527,479],
[419,407,0,487,460,440,436,496,482,459],
[406,382,404,0,403,409,408,377,434,453],
[428,445,431,488,0,441,466,450,483,475],
[487,436,451,482,450,0,476,491,496,501],
[458,451,455,483,425,415,0,474,490,456],
[447,407,395,514,441,400,417,0,464,450],
[402,364,409,457,408,395,401,427,0,409],
[435,412,432,438,416,390,435,441,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,512,471,467,435,433,431,498,479],
[446,0,493,453,460,425,441,456,456,483],
[379,398,0,412,433,387,400,341,388,412],
[420,438,479,0,447,403,410,431,436,451],
[424,431,458,444,0,417,421,429,403,444],
[456,466,504,488,474,0,420,416,463,464],
[458,450,491,481,470,471,0,459,444,465],
[460,435,550,460,462,475,432,0,466,458],
[393,435,503,455,488,428,447,425,0,436],
[412,408,479,440,447,427,426,433,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,462,435,458,473,447,466,457],
[435,0,435,438,438,467,460,452,455,454],
[443,456,0,444,455,473,458,437,469,468],
[429,453,447,0,442,454,460,445,474,451],
[456,453,436,449,0,470,484,440,481,455],
[433,424,418,437,421,0,454,435,434,446],
[418,431,433,431,407,437,0,423,428,429],
[444,439,454,446,451,456,468,0,456,463],
[425,436,422,417,410,457,463,435,0,433],
[434,437,423,440,436,445,462,428,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,440,416,416,479,465,401,428,400],
[478,0,453,438,472,436,448,404,442,457],
[451,438,0,426,436,407,444,416,434,395],
[475,453,465,0,462,434,450,455,445,466],
[475,419,455,429,0,435,468,471,404,454],
[412,455,484,457,456,0,449,432,409,422],
[426,443,447,441,423,442,0,401,423,447],
[490,487,475,436,420,459,490,0,467,463],
[463,449,457,446,487,482,468,424,0,467],
[491,434,496,425,437,469,444,428,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,457,444,449,459,450,459,456,428],
[428,0,419,457,443,447,417,452,450,427],
[434,472,0,453,482,500,458,489,459,462],
[447,434,438,0,451,438,436,424,457,422],
[442,448,409,440,0,448,443,411,436,437],
[432,444,391,453,443,0,445,442,458,433],
[441,474,433,455,448,446,0,451,443,434],
[432,439,402,467,480,449,440,0,443,430],
[435,441,432,434,455,433,448,448,0,422],
[463,464,429,469,454,458,457,461,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,422,447,438,454,389,425,451,402],
[453,0,445,455,447,427,404,417,429,374],
[469,446,0,449,425,446,416,459,430,423],
[444,436,442,0,399,462,407,420,450,404],
[453,444,466,492,0,476,451,446,440,420],
[437,464,445,429,415,0,444,460,447,409],
[502,487,475,484,440,447,0,499,458,454],
[466,474,432,471,445,431,392,0,381,408],
[440,462,461,441,451,444,433,510,0,417],
[489,517,468,487,471,482,437,483,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,449,450,439,432,445,460,434,425],
[454,0,454,475,464,422,474,463,446,456],
[442,437,0,459,435,433,450,454,434,437],
[441,416,432,0,440,439,444,456,455,402],
[452,427,456,451,0,460,468,445,436,431],
[459,469,458,452,431,0,451,442,460,441],
[446,417,441,447,423,440,0,436,433,433],
[431,428,437,435,446,449,455,0,430,436],
[457,445,457,436,455,431,458,461,0,438],
[466,435,454,489,460,450,458,455,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,431,444,445,447,431,442,444,424],
[461,0,484,437,469,496,458,465,465,460],
[460,407,0,425,428,468,437,458,443,434],
[447,454,466,0,492,476,445,441,442,454],
[446,422,463,399,0,456,425,461,455,440],
[444,395,423,415,435,0,434,443,440,433],
[460,433,454,446,466,457,0,452,451,452],
[449,426,433,450,430,448,439,0,445,442],
[447,426,448,449,436,451,440,446,0,441],
[467,431,457,437,451,458,439,449,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,490,441,458,489,496,516,454,501],
[386,0,438,419,394,425,449,513,419,375],
[401,453,0,389,419,411,429,443,419,455],
[450,472,502,0,497,500,440,542,421,471],
[433,497,472,394,0,451,439,446,448,458],
[402,466,480,391,440,0,428,506,413,430],
[395,442,462,451,452,463,0,519,419,453],
[375,378,448,349,445,385,372,0,367,370],
[437,472,472,470,443,478,472,524,0,472],
[390,516,436,420,433,461,438,521,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,442,472,456,474,466,464,423,439],
[428,0,491,467,473,448,448,482,428,495],
[449,400,0,469,435,438,398,422,432,407],
[419,424,422,0,439,426,413,424,424,396],
[435,418,456,452,0,464,439,453,418,435],
[417,443,453,465,427,0,460,444,458,429],
[425,443,493,478,452,431,0,466,416,442],
[427,409,469,467,438,447,425,0,411,409],
[468,463,459,467,473,433,475,480,0,459],
[452,396,484,495,456,462,449,482,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,438,445,465,460,452,448,448,445],
[452,0,452,437,466,456,461,466,467,458],
[453,439,0,454,476,483,463,464,484,453],
[446,454,437,0,465,478,459,467,465,431],
[426,425,415,426,0,440,430,426,445,421],
[431,435,408,413,451,0,433,429,441,420],
[439,430,428,432,461,458,0,440,460,452],
[443,425,427,424,465,462,451,0,450,438],
[443,424,407,426,446,450,431,441,0,430],
[446,433,438,460,470,471,439,453,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,415,430,446,424,442,397,414,422],
[470,0,416,434,461,428,463,435,447,434],
[476,475,0,443,476,441,463,403,444,433],
[461,457,448,0,489,445,453,432,436,434],
[445,430,415,402,0,414,427,428,434,415],
[467,463,450,446,477,0,435,428,449,451],
[449,428,428,438,464,456,0,427,436,438],
[494,456,488,459,463,463,464,0,458,434],
[477,444,447,455,457,442,455,433,0,430],
[469,457,458,457,476,440,453,457,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,394,368,435,432,413,446,448,400],
[485,0,431,405,423,536,444,477,422,415],
[497,460,0,430,448,495,455,442,498,394],
[523,486,461,0,460,502,497,472,487,419],
[456,468,443,431,0,521,480,445,448,409],
[459,355,396,389,370,0,417,399,462,348],
[478,447,436,394,411,474,0,515,451,450],
[445,414,449,419,446,492,376,0,428,401],
[443,469,393,404,443,429,440,463,0,434],
[491,476,497,472,482,543,441,490,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,404,394,429,670,739,299,581,297],
[426,0,448,518,442,614,526,382,649,449],
[487,443,0,449,488,573,509,322,582,451],
[497,373,442,0,437,710,597,339,526,281],
[462,449,403,454,0,671,634,496,538,524],
[221,277,318,181,220,0,418,189,430,217],
[152,365,382,294,257,473,0,164,419,256],
[592,509,569,552,395,702,727,0,552,588],
[310,242,309,365,353,461,472,339,0,400],
[594,442,440,610,367,674,635,303,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,474,428,453,429,447,479,437,453],
[470,0,439,448,472,465,463,466,463,467],
[417,452,0,435,446,441,448,477,435,435],
[463,443,456,0,467,454,472,473,428,466],
[438,419,445,424,0,423,452,441,450,428],
[462,426,450,437,468,0,473,465,445,439],
[444,428,443,419,439,418,0,459,455,426],
[412,425,414,418,450,426,432,0,433,423],
[454,428,456,463,441,446,436,458,0,459],
[438,424,456,425,463,452,465,468,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,478,387,371,523,402,486,545,439],
[410,0,410,497,391,390,428,516,543,464],
[413,481,0,528,452,416,349,402,580,451],
[504,394,363,0,365,463,399,410,512,394],
[520,500,439,526,0,520,513,481,616,433],
[368,501,475,428,371,0,440,383,512,430],
[489,463,542,492,378,451,0,507,600,521],
[405,375,489,481,410,508,384,0,488,346],
[346,348,311,379,275,379,291,403,0,319],
[452,427,440,497,458,461,370,545,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,403,491,439,431,490,459,551,448],
[440,0,432,467,418,463,477,417,440,478],
[488,459,0,488,474,456,527,460,455,438],
[400,424,403,0,411,412,445,366,418,420],
[452,473,417,480,0,470,541,433,513,397],
[460,428,435,479,421,0,471,376,498,445],
[401,414,364,446,350,420,0,388,483,381],
[432,474,431,525,458,515,503,0,508,452],
[340,451,436,473,378,393,408,383,0,396],
[443,413,453,471,494,446,510,439,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,419,461,433,432,441,465,472,458],
[466,0,406,481,419,441,451,450,465,451],
[472,485,0,476,481,445,438,479,486,475],
[430,410,415,0,414,446,429,440,487,444],
[458,472,410,477,0,448,444,448,490,453],
[459,450,446,445,443,0,455,440,505,467],
[450,440,453,462,447,436,0,442,461,457],
[426,441,412,451,443,451,449,0,477,441],
[419,426,405,404,401,386,430,414,0,396],
[433,440,416,447,438,424,434,450,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,361,428,279,414,344,451,266,242],
[544,0,339,323,270,500,422,473,345,510],
[530,552,0,509,395,463,461,479,458,429],
[463,568,382,0,430,442,393,409,365,429],
[612,621,496,461,0,515,475,435,585,513],
[477,391,428,449,376,0,408,461,338,381],
[547,469,430,498,416,483,0,532,509,403],
[440,418,412,482,456,430,359,0,528,341],
[625,546,433,526,306,553,382,363,0,440],
[649,381,462,462,378,510,488,550,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,419,485,474,446,462,426,409,446],
[442,0,426,466,456,480,458,430,431,432],
[472,465,0,424,509,458,495,453,443,480],
[406,425,467,0,431,409,440,416,413,438],
[417,435,382,460,0,418,425,415,405,421],
[445,411,433,482,473,0,450,444,435,458],
[429,433,396,451,466,441,0,434,458,457],
[465,461,438,475,476,447,457,0,460,478],
[482,460,448,478,486,456,433,431,0,488],
[445,459,411,453,470,433,434,413,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,409,412,443,432,414,388,449,420],
[426,0,456,405,453,442,448,400,434,457],
[482,435,0,436,437,474,424,376,465,477],
[479,486,455,0,456,449,450,415,447,482],
[448,438,454,435,0,460,446,390,407,443],
[459,449,417,442,431,0,461,409,423,464],
[477,443,467,441,445,430,0,434,451,455],
[503,491,515,476,501,482,457,0,472,432],
[442,457,426,444,484,468,440,419,0,438],
[471,434,414,409,448,427,436,459,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,442,423,433,485,446,444,426,432],
[400,0,428,416,414,450,436,421,415,418],
[449,463,0,437,449,467,473,425,458,418],
[468,475,454,0,459,465,510,450,437,452],
[458,477,442,432,0,474,459,454,463,434],
[406,441,424,426,417,0,462,425,430,411],
[445,455,418,381,432,429,0,424,440,411],
[447,470,466,441,437,466,467,0,438,430],
[465,476,433,454,428,461,451,453,0,432],
[459,473,473,439,457,480,480,461,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,455,436,456,446,452,469,444],
[443,0,445,461,449,436,457,439,460,464],
[449,446,0,440,434,455,457,448,465,426],
[436,430,451,0,446,437,452,437,463,448],
[455,442,457,445,0,447,451,425,447,449],
[435,455,436,454,444,0,470,439,468,436],
[445,434,434,439,440,421,0,425,457,459],
[439,452,443,454,466,452,466,0,470,487],
[422,431,426,428,444,423,434,421,0,427],
[447,427,465,443,442,455,432,404,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,457,431,445,468,458,465,456,445],
[428,0,453,437,435,462,445,456,454,449],
[434,438,0,430,424,447,435,423,456,437],
[460,454,461,0,444,456,438,466,445,435],
[446,456,467,447,0,481,456,453,472,440],
[423,429,444,435,410,0,425,444,429,431],
[433,446,456,453,435,466,0,451,447,436],
[426,435,468,425,438,447,440,0,432,434],
[435,437,435,446,419,462,444,459,0,440],
[446,442,454,456,451,460,455,457,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,434,433,427,409,393,416,402,439],
[493,0,447,448,452,447,441,444,425,434],
[457,444,0,453,453,425,463,445,441,439],
[458,443,438,0,437,434,440,443,438,432],
[464,439,438,454,0,431,434,444,443,455],
[482,444,466,457,460,0,440,459,431,477],
[498,450,428,451,457,451,0,432,439,458],
[475,447,446,448,447,432,459,0,432,443],
[489,466,450,453,448,460,452,459,0,444],
[452,457,452,459,436,414,433,448,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,448,463,469,462,454,468,459,484],
[448,0,436,462,446,459,436,454,457,467],
[443,455,0,466,473,458,445,453,463,463],
[428,429,425,0,441,438,437,443,446,455],
[422,445,418,450,0,453,441,448,439,445],
[429,432,433,453,438,0,455,439,440,447],
[437,455,446,454,450,436,0,464,458,454],
[423,437,438,448,443,452,427,0,457,470],
[432,434,428,445,452,451,433,434,0,446],
[407,424,428,436,446,444,437,421,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,479,462,494,433,452,456,478,393],
[413,0,451,431,485,440,452,444,446,423],
[412,440,0,449,425,407,418,491,425,423],
[429,460,442,0,431,420,457,459,415,410],
[397,406,466,460,0,437,455,456,412,426],
[458,451,484,471,454,0,464,473,410,417],
[439,439,473,434,436,427,0,490,457,427],
[435,447,400,432,435,418,401,0,443,414],
[413,445,466,476,479,481,434,448,0,451],
[498,468,468,481,465,474,464,477,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,429,436,432,473,441,427,433,441],
[424,0,427,410,416,436,408,424,420,442],
[462,464,0,432,457,470,449,435,449,440],
[455,481,459,0,467,459,463,475,454,442],
[459,475,434,424,0,459,453,436,449,422],
[418,455,421,432,432,0,425,426,415,413],
[450,483,442,428,438,466,0,436,431,452],
[464,467,456,416,455,465,455,0,460,467],
[458,471,442,437,442,476,460,431,0,452],
[450,449,451,449,469,478,439,424,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,420,443,451,440,455,465,444,457],
[439,0,445,443,452,456,429,458,421,453],
[471,446,0,458,484,462,465,462,419,458],
[448,448,433,0,437,449,461,480,441,457],
[440,439,407,454,0,433,462,455,445,430],
[451,435,429,442,458,0,448,486,466,458],
[436,462,426,430,429,443,0,439,420,441],
[426,433,429,411,436,405,452,0,422,434],
[447,470,472,450,446,425,471,469,0,474],
[434,438,433,434,461,433,450,457,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,467,431,452,409,438,437,449,462],
[454,0,474,442,469,435,441,464,460,454],
[424,417,0,396,401,425,406,410,433,416],
[460,449,495,0,460,466,449,466,439,452],
[439,422,490,431,0,424,429,437,456,444],
[482,456,466,425,467,0,473,464,502,466],
[453,450,485,442,462,418,0,444,476,480],
[454,427,481,425,454,427,447,0,427,448],
[442,431,458,452,435,389,415,464,0,442],
[429,437,475,439,447,425,411,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,441,465,405,420,439,445,435,435],
[448,0,440,436,431,451,429,451,451,423],
[450,451,0,452,415,445,447,457,441,434],
[426,455,439,0,418,437,423,445,444,414],
[486,460,476,473,0,475,441,467,454,448],
[471,440,446,454,416,0,418,424,452,425],
[452,462,444,468,450,473,0,457,462,432],
[446,440,434,446,424,467,434,0,450,425],
[456,440,450,447,437,439,429,441,0,427],
[456,468,457,477,443,466,459,466,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,414,384,394,412,388,422,443,406],
[493,0,468,434,459,508,450,512,492,478],
[477,423,0,423,441,468,445,491,471,478],
[507,457,468,0,440,469,444,467,519,448],
[497,432,450,451,0,485,446,483,484,461],
[479,383,423,422,406,0,411,446,472,431],
[503,441,446,447,445,480,0,491,470,447],
[469,379,400,424,408,445,400,0,447,429],
[448,399,420,372,407,419,421,444,0,411],
[485,413,413,443,430,460,444,462,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,441,449,408,457,460,484,456,439],
[438,0,467,459,453,473,477,459,429,439],
[450,424,0,452,432,452,483,465,455,423],
[442,432,439,0,420,461,476,460,446,454],
[483,438,459,471,0,478,509,492,473,445],
[434,418,439,430,413,0,450,428,436,418],
[431,414,408,415,382,441,0,439,427,419],
[407,432,426,431,399,463,452,0,427,435],
[435,462,436,445,418,455,464,464,0,419],
[452,452,468,437,446,473,472,456,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,397,408,444,435,420,459,417,438],
[421,0,406,395,456,466,392,458,412,439],
[494,485,0,434,497,524,447,472,508,466],
[483,496,457,0,505,479,484,513,445,484],
[447,435,394,386,0,400,440,446,393,445],
[456,425,367,412,491,0,420,446,462,438],
[471,499,444,407,451,471,0,460,463,450],
[432,433,419,378,445,445,431,0,430,427],
[474,479,383,446,498,429,428,461,0,456],
[453,452,425,407,446,453,441,464,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,458,426,431,437,436,422,473],
[452,0,452,466,450,447,451,444,427,486],
[443,439,0,459,437,447,448,441,434,472],
[433,425,432,0,425,415,431,425,428,454],
[465,441,454,466,0,449,449,433,444,484],
[460,444,444,476,442,0,459,443,450,463],
[454,440,443,460,442,432,0,459,429,433],
[455,447,450,466,458,448,432,0,448,465],
[469,464,457,463,447,441,462,443,0,480],
[418,405,419,437,407,428,458,426,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,486,467,449,462,439,475,500,458],
[440,0,444,446,433,437,437,473,481,448],
[405,447,0,436,438,448,442,461,465,424],
[424,445,455,0,445,454,438,423,464,460],
[442,458,453,446,0,469,458,470,475,469],
[429,454,443,437,422,0,428,458,460,451],
[452,454,449,453,433,463,0,459,472,445],
[416,418,430,468,421,433,432,0,458,453],
[391,410,426,427,416,431,419,433,0,435],
[433,443,467,431,422,440,446,438,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,460,438,434,437,445,430,427,469],
[451,0,465,452,444,480,455,452,445,474],
[431,426,0,451,456,467,469,451,443,466],
[453,439,440,0,454,437,456,438,462,468],
[457,447,435,437,0,461,454,466,436,462],
[454,411,424,454,430,0,454,437,436,461],
[446,436,422,435,437,437,0,455,433,489],
[461,439,440,453,425,454,436,0,420,451],
[464,446,448,429,455,455,458,471,0,459],
[422,417,425,423,429,430,402,440,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,431,436,451,435,473,441,462,428],
[432,0,404,409,429,410,460,412,436,413],
[460,487,0,458,446,427,451,425,458,448],
[455,482,433,0,439,429,468,424,445,426],
[440,462,445,452,0,455,466,441,441,455],
[456,481,464,462,436,0,462,434,470,463],
[418,431,440,423,425,429,0,423,439,441],
[450,479,466,467,450,457,468,0,455,442],
[429,455,433,446,450,421,452,436,0,440],
[463,478,443,465,436,428,450,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,427,428,444,440,409,415,424,464],
[466,0,434,429,438,448,459,440,429,484],
[464,457,0,450,465,443,464,468,462,480],
[463,462,441,0,451,453,457,459,461,490],
[447,453,426,440,0,434,447,437,448,464],
[451,443,448,438,457,0,453,442,463,460],
[482,432,427,434,444,438,0,438,448,471],
[476,451,423,432,454,449,453,0,458,484],
[467,462,429,430,443,428,443,433,0,473],
[427,407,411,401,427,431,420,407,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,424,455,426,429,457,433,435,446],
[444,0,403,412,423,397,453,437,433,454],
[467,488,0,435,463,451,448,464,442,452],
[436,479,456,0,464,453,471,462,437,457],
[465,468,428,427,0,418,453,438,430,463],
[462,494,440,438,473,0,477,439,465,466],
[434,438,443,420,438,414,0,424,436,451],
[458,454,427,429,453,452,467,0,446,430],
[456,458,449,454,461,426,455,445,0,462],
[445,437,439,434,428,425,440,461,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,451,437,448,431,426,447,431,432],
[489,0,457,453,447,446,480,461,439,447],
[440,434,0,441,418,426,438,412,424,427],
[454,438,450,0,411,437,417,429,428,411],
[443,444,473,480,0,438,451,448,454,445],
[460,445,465,454,453,0,438,470,449,441],
[465,411,453,474,440,453,0,461,466,438],
[444,430,479,462,443,421,430,0,442,432],
[460,452,467,463,437,442,425,449,0,432],
[459,444,464,480,446,450,453,459,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,455,468,434,433,436,425,452],
[433,0,426,455,447,431,421,423,421,437],
[445,465,0,458,482,438,442,446,438,461],
[436,436,433,0,455,428,447,449,432,430],
[423,444,409,436,0,432,419,434,414,414],
[457,460,453,463,459,0,427,426,422,437],
[458,470,449,444,472,464,0,444,431,454],
[455,468,445,442,457,465,447,0,449,460],
[466,470,453,459,477,469,460,442,0,468],
[439,454,430,461,477,454,437,431,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,398,412,438,455,425,457,403,443],
[448,0,391,430,432,460,435,462,438,415],
[493,500,0,425,489,525,463,474,453,483],
[479,461,466,0,463,512,493,486,423,457],
[453,459,402,428,0,438,443,431,407,401],
[436,431,366,379,453,0,413,429,415,396],
[466,456,428,398,448,478,0,444,410,448],
[434,429,417,405,460,462,447,0,420,421],
[488,453,438,468,484,476,481,471,0,459],
[448,476,408,434,490,495,443,470,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,436,440,450,431,444,464,462,451],
[426,0,433,444,433,435,433,437,461,414],
[455,458,0,472,446,429,449,459,473,444],
[451,447,419,0,442,434,440,430,468,433],
[441,458,445,449,0,454,465,453,462,450],
[460,456,462,457,437,0,459,457,467,474],
[447,458,442,451,426,432,0,429,466,447],
[427,454,432,461,438,434,462,0,482,434],
[429,430,418,423,429,424,425,409,0,437],
[440,477,447,458,441,417,444,457,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,455,500,506,507,496,461,528,434],
[373,0,420,430,453,459,517,431,447,416],
[436,471,0,517,473,521,486,425,464,464],
[391,461,374,0,401,428,462,431,443,443],
[385,438,418,490,0,477,436,495,395,411],
[384,432,370,463,414,0,453,424,428,445],
[395,374,405,429,455,438,0,438,407,431],
[430,460,466,460,396,467,453,0,461,403],
[363,444,427,448,496,463,484,430,0,407],
[457,475,427,448,480,446,460,488,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,446,474,434,424,459,464,459],
[435,0,435,448,477,430,450,452,456,459],
[443,456,0,444,476,452,445,449,470,464],
[445,443,447,0,474,446,436,446,450,471],
[417,414,415,417,0,437,428,429,435,434],
[457,461,439,445,454,0,438,454,461,451],
[467,441,446,455,463,453,0,456,468,491],
[432,439,442,445,462,437,435,0,440,448],
[427,435,421,441,456,430,423,451,0,458],
[432,432,427,420,457,440,400,443,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,453,413,454,402,422,424,440,434],
[461,0,461,440,427,422,441,442,443,449],
[438,430,0,451,435,450,433,458,451,471],
[478,451,440,0,430,430,435,426,459,467],
[437,464,456,461,0,430,438,429,441,459],
[489,469,441,461,461,0,442,446,459,473],
[469,450,458,456,453,449,0,429,456,471],
[467,449,433,465,462,445,462,0,463,452],
[451,448,440,432,450,432,435,428,0,467],
[457,442,420,424,432,418,420,439,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,420,481,456,462,431,446,443,447],
[448,0,447,474,455,470,438,456,452,449],
[471,444,0,464,464,465,432,453,451,470],
[410,417,427,0,463,445,416,419,452,430],
[435,436,427,428,0,444,425,440,429,449],
[429,421,426,446,447,0,430,446,441,435],
[460,453,459,475,466,461,0,436,443,463],
[445,435,438,472,451,445,455,0,430,457],
[448,439,440,439,462,450,448,461,0,441],
[444,442,421,461,442,456,428,434,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,463,427,424,433,423,412,439,412],
[456,0,464,439,440,461,447,452,451,440],
[428,427,0,415,429,440,430,417,464,444],
[464,452,476,0,449,447,465,453,452,432],
[467,451,462,442,0,448,461,445,454,440],
[458,430,451,444,443,0,456,426,425,420],
[468,444,461,426,430,435,0,444,450,426],
[479,439,474,438,446,465,447,0,459,457],
[452,440,427,439,437,466,441,432,0,430],
[479,451,447,459,451,471,465,434,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,442,434,420,445,475,448,423],
[439,0,471,434,441,399,456,483,444,437],
[444,420,0,418,409,430,425,430,433,452],
[449,457,473,0,450,420,445,479,430,429],
[457,450,482,441,0,435,445,455,446,451],
[471,492,461,471,456,0,464,447,455,431],
[446,435,466,446,446,427,0,432,459,441],
[416,408,461,412,436,444,459,0,431,434],
[443,447,458,461,445,436,432,460,0,439],
[468,454,439,462,440,460,450,457,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,433,432,431,427,449,431,414,432],
[458,0,414,450,446,451,458,459,417,439],
[458,477,0,456,460,457,448,478,447,444],
[459,441,435,0,453,464,476,459,426,443],
[460,445,431,438,0,465,458,445,439,455],
[464,440,434,427,426,0,459,464,443,447],
[442,433,443,415,433,432,0,439,435,461],
[460,432,413,432,446,427,452,0,409,436],
[477,474,444,465,452,448,456,482,0,478],
[459,452,447,448,436,444,430,455,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,448,420,423,435,488,431,457,470],
[426,0,414,447,444,414,441,412,437,444],
[443,477,0,440,467,440,472,460,449,454],
[471,444,451,0,441,454,472,436,481,475],
[468,447,424,450,0,423,474,433,430,455],
[456,477,451,437,468,0,478,437,465,455],
[403,450,419,419,417,413,0,444,416,443],
[460,479,431,455,458,454,447,0,455,499],
[434,454,442,410,461,426,475,436,0,447],
[421,447,437,416,436,436,448,392,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,492,484,467,417,449,485,442,453],
[437,0,481,458,423,448,446,455,436,458],
[399,410,0,437,402,409,425,421,388,436],
[407,433,454,0,462,429,439,430,446,454],
[424,468,489,429,0,447,464,453,438,447],
[474,443,482,462,444,0,471,460,457,459],
[442,445,466,452,427,420,0,461,409,447],
[406,436,470,461,438,431,430,0,413,456],
[449,455,503,445,453,434,482,478,0,469],
[438,433,455,437,444,432,444,435,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,434,515,451,483,502,484,450,439],
[438,0,436,476,431,466,454,442,457,405],
[457,455,0,467,428,439,471,457,474,447],
[376,415,424,0,438,416,410,425,409,399],
[440,460,463,453,0,471,454,483,451,453],
[408,425,452,475,420,0,477,435,467,407],
[389,437,420,481,437,414,0,449,421,419],
[407,449,434,466,408,456,442,0,409,415],
[441,434,417,482,440,424,470,482,0,399],
[452,486,444,492,438,484,472,476,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,443,439,458,451,477,447,446,452],
[431,0,448,437,448,453,455,430,444,471],
[448,443,0,428,459,469,445,434,437,447],
[452,454,463,0,450,442,455,449,442,467],
[433,443,432,441,0,452,448,421,421,446],
[440,438,422,449,439,0,438,434,426,442],
[414,436,446,436,443,453,0,419,436,436],
[444,461,457,442,470,457,472,0,448,459],
[445,447,454,449,470,465,455,443,0,461],
[439,420,444,424,445,449,455,432,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,444,471,469,454,472,464,450,472],
[412,0,419,488,444,414,437,450,465,448],
[447,472,0,466,441,426,501,492,473,465],
[420,403,425,0,376,429,432,451,463,426],
[422,447,450,515,0,468,465,467,458,458],
[437,477,465,462,423,0,439,431,480,487],
[419,454,390,459,426,452,0,408,437,456],
[427,441,399,440,424,460,483,0,485,452],
[441,426,418,428,433,411,454,406,0,476],
[419,443,426,465,433,404,435,439,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,422,497,478,499,464,464,454,474],
[423,0,459,494,456,458,457,488,432,450],
[469,432,0,450,486,476,503,474,456,442],
[394,397,441,0,452,434,461,410,474,449],
[413,435,405,439,0,436,466,372,424,453],
[392,433,415,457,455,0,460,441,430,442],
[427,434,388,430,425,431,0,455,409,447],
[427,403,417,481,519,450,436,0,396,462],
[437,459,435,417,467,461,482,495,0,454],
[417,441,449,442,438,449,444,429,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,471,443,396,433,434,422,437,433],
[488,0,468,473,454,440,433,447,474,436],
[420,423,0,413,440,425,429,424,451,431],
[448,418,478,0,467,445,466,454,469,465],
[495,437,451,424,0,437,462,425,454,430],
[458,451,466,446,454,0,464,423,479,452],
[457,458,462,425,429,427,0,449,462,449],
[469,444,467,437,466,468,442,0,480,449],
[454,417,440,422,437,412,429,411,0,446],
[458,455,460,426,461,439,442,442,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,427,567,414,563,453,497,494,539],
[435,0,345,524,476,391,516,433,498,412],
[464,546,0,464,440,525,591,436,459,499],
[324,367,427,0,411,449,475,410,412,498],
[477,415,451,480,0,564,515,496,496,473],
[328,500,366,442,327,0,478,283,455,496],
[438,375,300,416,376,413,0,392,498,390],
[394,458,455,481,395,608,499,0,517,538],
[397,393,432,479,395,436,393,374,0,414],
[352,479,392,393,418,395,501,353,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,442,458,452,451,467,445,471,443],
[455,0,465,420,440,460,455,447,417,435],
[449,426,0,445,459,459,485,433,456,448],
[433,471,446,0,466,476,491,428,474,458],
[439,451,432,425,0,455,456,424,441,443],
[440,431,432,415,436,0,451,442,448,461],
[424,436,406,400,435,440,0,425,425,437],
[446,444,458,463,467,449,466,0,473,460],
[420,474,435,417,450,443,466,418,0,429],
[448,456,443,433,448,430,454,431,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,451,429,424,466,439,454,441,439],
[412,0,452,440,435,453,455,476,439,466],
[440,439,0,431,450,470,479,443,448,451],
[462,451,460,0,427,454,465,453,434,459],
[467,456,441,464,0,459,484,462,440,447],
[425,438,421,437,432,0,480,447,426,454],
[452,436,412,426,407,411,0,433,420,442],
[437,415,448,438,429,444,458,0,416,444],
[450,452,443,457,451,465,471,475,0,462],
[452,425,440,432,444,437,449,447,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,503,447,425,484,466,500,468,486],
[462,0,443,447,443,426,481,443,483,523],
[388,448,0,427,520,427,350,467,487,428],
[444,444,464,0,481,387,427,481,465,427],
[466,448,371,410,0,334,334,426,411,485],
[407,465,464,504,557,0,445,448,482,503],
[425,410,541,464,557,446,0,518,521,520],
[391,448,424,410,465,443,373,0,393,467],
[423,408,404,426,480,409,370,498,0,579],
[405,368,463,464,406,388,371,424,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,442,460,430,454,475,422,431,411],
[451,0,445,457,470,475,469,455,437,454],
[449,446,0,459,442,459,466,472,410,418],
[431,434,432,0,433,466,440,426,424,429],
[461,421,449,458,0,457,475,444,419,464],
[437,416,432,425,434,0,438,444,397,422],
[416,422,425,451,416,453,0,477,427,430],
[469,436,419,465,447,447,414,0,419,412],
[460,454,481,467,472,494,464,472,0,436],
[480,437,473,462,427,469,461,479,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,453,461,454,439,415,418,445,447],
[438,0,426,450,452,440,431,447,433,451],
[438,465,0,433,443,443,446,427,437,426],
[430,441,458,0,436,425,418,432,415,425],
[437,439,448,455,0,430,446,456,435,451],
[452,451,448,466,461,0,429,467,455,455],
[476,460,445,473,445,462,0,462,458,459],
[473,444,464,459,435,424,429,0,449,450],
[446,458,454,476,456,436,433,442,0,437],
[444,440,465,466,440,436,432,441,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,459,450,452,458,431,451,422,430],
[473,0,449,426,476,430,429,441,469,449],
[432,442,0,461,485,468,441,443,450,452],
[441,465,430,0,460,431,417,418,456,400],
[439,415,406,431,0,447,426,451,427,403],
[433,461,423,460,444,0,458,451,446,455],
[460,462,450,474,465,433,0,492,469,452],
[440,450,448,473,440,440,399,0,463,452],
[469,422,441,435,464,445,422,428,0,432],
[461,442,439,491,488,436,439,439,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,431,413,438,459,466,477,402,424],
[483,0,455,457,451,440,453,442,403,412],
[460,436,0,443,452,435,418,366,435,411],
[478,434,448,0,509,492,463,473,469,479],
[453,440,439,382,0,435,390,422,364,453],
[432,451,456,399,456,0,422,466,431,412],
[425,438,473,428,501,469,0,463,404,433],
[414,449,525,418,469,425,428,0,467,451],
[489,488,456,422,527,460,487,424,0,463],
[467,479,480,412,438,479,458,440,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,449,439,423,460,437,430,440,443],
[435,0,428,449,427,449,422,419,449,436],
[442,463,0,459,433,443,438,443,454,438],
[452,442,432,0,427,441,442,443,459,431],
[468,464,458,464,0,456,445,448,461,444],
[431,442,448,450,435,0,447,437,455,437],
[454,469,453,449,446,444,0,433,453,447],
[461,472,448,448,443,454,458,0,463,430],
[451,442,437,432,430,436,438,428,0,427],
[448,455,453,460,447,454,444,461,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,419,433,440,443,418,430,466,424],
[459,0,463,439,474,444,445,460,457,441],
[472,428,0,449,485,462,461,474,482,471],
[458,452,442,0,464,421,409,450,465,451],
[451,417,406,427,0,419,426,444,436,448],
[448,447,429,470,472,0,441,436,450,425],
[473,446,430,482,465,450,0,469,472,434],
[461,431,417,441,447,455,422,0,459,426],
[425,434,409,426,455,441,419,432,0,427],
[467,450,420,440,443,466,457,465,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,449,424,422,441,425,450,436,455],
[468,0,452,455,432,465,426,455,462,455],
[442,439,0,460,441,450,429,459,448,460],
[467,436,431,0,448,469,450,473,459,430],
[469,459,450,443,0,470,430,463,458,447],
[450,426,441,422,421,0,434,451,464,438],
[466,465,462,441,461,457,0,445,443,441],
[441,436,432,418,428,440,446,0,460,436],
[455,429,443,432,433,427,448,431,0,442],
[436,436,431,461,444,453,450,455,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,438,445,463,463,448,448,438,424],
[432,0,442,452,445,460,439,452,438,422],
[453,449,0,455,466,468,464,433,452,449],
[446,439,436,0,457,444,441,443,432,422],
[428,446,425,434,0,449,437,419,431,440],
[428,431,423,447,442,0,435,427,432,440],
[443,452,427,450,454,456,0,429,451,453],
[443,439,458,448,472,464,462,0,467,459],
[453,453,439,459,460,459,440,424,0,439],
[467,469,442,469,451,451,438,432,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,435,471,431,459,424,445,382,400],
[471,0,458,483,447,483,456,491,415,429],
[456,433,0,439,463,482,442,469,400,421],
[420,408,452,0,502,452,443,474,402,429],
[460,444,428,389,0,454,406,386,395,366],
[432,408,409,439,437,0,380,435,403,433],
[467,435,449,448,485,511,0,465,452,413],
[446,400,422,417,505,456,426,0,427,412],
[509,476,491,489,496,488,439,464,0,462],
[491,462,470,462,525,458,478,479,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,433,466,447,457,472,409,477,456],
[462,0,437,456,449,458,446,457,476,444],
[458,454,0,462,402,424,479,438,458,417],
[425,435,429,0,417,450,485,451,477,464],
[444,442,489,474,0,471,488,452,489,455],
[434,433,467,441,420,0,461,427,469,397],
[419,445,412,406,403,430,0,390,462,407],
[482,434,453,440,439,464,501,0,466,465],
[414,415,433,414,402,422,429,425,0,442],
[435,447,474,427,436,494,484,426,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,422,411,434,428,419,457,449,409],
[454,0,422,412,461,415,427,412,439,450],
[469,469,0,421,450,399,460,442,395,456],
[480,479,470,0,476,444,469,449,435,478],
[457,430,441,415,0,433,455,440,404,433],
[463,476,492,447,458,0,486,454,436,451],
[472,464,431,422,436,405,0,438,407,403],
[434,479,449,442,451,437,453,0,430,479],
[442,452,496,456,487,455,484,461,0,487],
[482,441,435,413,458,440,488,412,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,467,464,467,447,468,469,428,433],
[442,0,488,501,463,438,458,452,466,452],
[424,403,0,424,416,444,437,445,427,410],
[427,390,467,0,414,421,459,423,406,425],
[424,428,475,477,0,445,464,462,451,433],
[444,453,447,470,446,0,448,449,412,409],
[423,433,454,432,427,443,0,456,414,432],
[422,439,446,468,429,442,435,0,420,428],
[463,425,464,485,440,479,477,471,0,426],
[458,439,481,466,458,482,459,463,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,433,431,434,437,442,427,439,407],
[454,0,467,463,454,440,448,447,449,430],
[458,424,0,417,474,453,451,456,472,439],
[460,428,474,0,433,455,461,449,477,439],
[457,437,417,458,0,447,448,439,461,408],
[454,451,438,436,444,0,472,435,482,459],
[449,443,440,430,443,419,0,424,458,424],
[464,444,435,442,452,456,467,0,505,464],
[452,442,419,414,430,409,433,386,0,412],
[484,461,452,452,483,432,467,427,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,424,458,468,437,462,438,447,437],
[438,0,462,452,476,450,456,458,442,448],
[467,429,0,449,458,450,463,444,424,413],
[433,439,442,0,465,427,444,432,436,421],
[423,415,433,426,0,365,432,425,419,384],
[454,441,441,464,526,0,480,466,443,436],
[429,435,428,447,459,411,0,452,453,400],
[453,433,447,459,466,425,439,0,478,456],
[444,449,467,455,472,448,438,413,0,417],
[454,443,478,470,507,455,491,435,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,461,480,456,442,452,456,455,438],
[435,0,415,453,428,435,450,450,431,428],
[430,476,0,470,459,441,474,461,438,444],
[411,438,421,0,436,438,452,452,452,436],
[435,463,432,455,0,426,438,453,435,450],
[449,456,450,453,465,0,455,448,451,436],
[439,441,417,439,453,436,0,447,431,439],
[435,441,430,439,438,443,444,0,437,436],
[436,460,453,439,456,440,460,454,0,426],
[453,463,447,455,441,455,452,455,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,434,476,428,490,473,469,434,473],
[428,0,482,418,445,477,455,472,439,446],
[457,409,0,453,470,462,457,443,457,489],
[415,473,438,0,449,429,448,473,454,463],
[463,446,421,442,0,451,430,455,405,442],
[401,414,429,462,440,0,418,414,412,427],
[418,436,434,443,461,473,0,438,422,433],
[422,419,448,418,436,477,453,0,387,417],
[457,452,434,437,486,479,469,504,0,461],
[418,445,402,428,449,464,458,474,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,428,453,439,467,433,461,442,461],
[467,0,448,470,447,476,413,456,428,445],
[463,443,0,453,458,458,454,452,457,458],
[438,421,438,0,451,479,435,444,433,438],
[452,444,433,440,0,478,433,473,428,461],
[424,415,433,412,413,0,409,437,419,425],
[458,478,437,456,458,482,0,465,459,463],
[430,435,439,447,418,454,426,0,436,437],
[449,463,434,458,463,472,432,455,0,454],
[430,446,433,453,430,466,428,454,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,436,451,443,445,444,434,463,442],
[440,0,436,440,435,444,420,406,446,417],
[455,455,0,453,450,449,441,436,469,449],
[440,451,438,0,441,456,445,429,456,436],
[448,456,441,450,0,457,429,422,438,437],
[446,447,442,435,434,0,456,423,444,446],
[447,471,450,446,462,435,0,449,440,442],
[457,485,455,462,469,468,442,0,465,454],
[428,445,422,435,453,447,451,426,0,432],
[449,474,442,455,454,445,449,437,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,435,435,449,462,464,444,432,451],
[459,0,465,433,468,459,484,474,455,466],
[456,426,0,431,468,443,483,451,451,462],
[456,458,460,0,471,454,487,473,441,456],
[442,423,423,420,0,432,458,441,426,436],
[429,432,448,437,459,0,458,457,441,457],
[427,407,408,404,433,433,0,459,403,425],
[447,417,440,418,450,434,432,0,431,458],
[459,436,440,450,465,450,488,460,0,450],
[440,425,429,435,455,434,466,433,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,451,453,433,453,450,440,422,458],
[438,0,433,459,436,457,449,458,460,460],
[440,458,0,467,458,447,464,443,461,463],
[438,432,424,0,438,439,444,438,424,457],
[458,455,433,453,0,453,449,465,437,459],
[438,434,444,452,438,0,462,447,440,457],
[441,442,427,447,442,429,0,452,445,446],
[451,433,448,453,426,444,439,0,433,459],
[469,431,430,467,454,451,446,458,0,448],
[433,431,428,434,432,434,445,432,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,452,456,452,407,463,456,465,455],
[442,0,461,429,419,473,500,425,440,395],
[439,430,0,428,440,391,451,453,412,457],
[435,462,463,0,473,468,462,485,458,480],
[439,472,451,418,0,440,487,488,443,470],
[484,418,500,423,451,0,469,460,461,437],
[428,391,440,429,404,422,0,414,424,433],
[435,466,438,406,403,431,477,0,410,425],
[426,451,479,433,448,430,467,481,0,465],
[436,496,434,411,421,454,458,466,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,450,427,439,417,465,426,438,443],
[495,0,461,444,482,438,509,459,480,467],
[441,430,0,460,457,423,477,449,466,461],
[464,447,431,0,449,426,476,446,479,442],
[452,409,434,442,0,424,475,404,432,444],
[474,453,468,465,467,0,457,452,458,441],
[426,382,414,415,416,434,0,415,431,446],
[465,432,442,445,487,439,476,0,481,463],
[453,411,425,412,459,433,460,410,0,446],
[448,424,430,449,447,450,445,428,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,435,443,419,428,416,450,420,456],
[470,0,445,454,431,404,456,434,421,488],
[456,446,0,419,433,405,435,432,434,446],
[448,437,472,0,446,433,447,468,417,459],
[472,460,458,445,0,446,451,456,411,451],
[463,487,486,458,445,0,459,427,472,481],
[475,435,456,444,440,432,0,416,430,483],
[441,457,459,423,435,464,475,0,448,488],
[471,470,457,474,480,419,461,443,0,480],
[435,403,445,432,440,410,408,403,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,447,460,457,477,405,448,470,425],
[422,0,415,430,416,463,423,431,468,453],
[444,476,0,469,439,469,435,417,486,451],
[431,461,422,0,417,460,413,428,449,442],
[434,475,452,474,0,493,427,463,473,437],
[414,428,422,431,398,0,423,409,448,425],
[486,468,456,478,464,468,0,443,484,444],
[443,460,474,463,428,482,448,0,474,437],
[421,423,405,442,418,443,407,417,0,436],
[466,438,440,449,454,466,447,454,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,448,457,466,453,443,450,448,464],
[451,0,463,447,464,448,444,449,453,453],
[443,428,0,425,426,458,442,448,451,456],
[434,444,466,0,456,462,443,450,447,441],
[425,427,465,435,0,429,436,449,442,460],
[438,443,433,429,462,0,454,449,470,459],
[448,447,449,448,455,437,0,466,458,456],
[441,442,443,441,442,442,425,0,436,466],
[443,438,440,444,449,421,433,455,0,438],
[427,438,435,450,431,432,435,425,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,445,411,449,444,473,434,441,432],
[403,0,409,447,442,463,404,400,451,421],
[446,482,0,425,482,463,463,422,441,443],
[480,444,466,0,475,502,424,436,432,436],
[442,449,409,416,0,433,468,397,432,393],
[447,428,428,389,458,0,408,422,440,449],
[418,487,428,467,423,483,0,437,517,427],
[457,491,469,455,494,469,454,0,471,423],
[450,440,450,459,459,451,374,420,0,441],
[459,470,448,455,498,442,464,468,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,450,447,462,449,461,453,449,463],
[448,0,449,459,451,431,457,461,438,436],
[441,442,0,440,455,441,455,453,436,453],
[444,432,451,0,440,430,443,435,417,438],
[429,440,436,451,0,436,442,444,432,448],
[442,460,450,461,455,0,451,448,436,449],
[430,434,436,448,449,440,0,434,426,445],
[438,430,438,456,447,443,457,0,438,454],
[442,453,455,474,459,455,465,453,0,447],
[428,455,438,453,443,442,446,437,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,285,447,321,405,325,243,367,409],
[607,0,444,612,440,405,524,406,451,650],
[606,447,0,611,403,407,485,364,529,528],
[444,279,280,0,241,404,360,320,443,406],
[570,451,488,650,0,405,408,370,529,572],
[486,486,484,487,486,0,402,365,446,570],
[566,367,406,531,483,489,0,449,328,490],
[648,485,527,571,521,526,442,0,528,651],
[524,440,362,448,362,445,563,363,0,568],
[482,241,363,485,319,321,401,240,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,459,437,429,432,451,453,454,470],
[444,0,465,443,430,427,441,429,455,461],
[432,426,0,411,429,433,424,441,446,480],
[454,448,480,0,435,443,435,458,457,466],
[462,461,462,456,0,431,452,461,446,449],
[459,464,458,448,460,0,451,444,451,485],
[440,450,467,456,439,440,0,452,459,470],
[438,462,450,433,430,447,439,0,427,441],
[437,436,445,434,445,440,432,464,0,469],
[421,430,411,425,442,406,421,450,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,418,443,301,376,423,325,369,400],
[422,0,346,513,395,401,472,419,346,352],
[473,545,0,562,424,497,471,355,445,493],
[448,378,329,0,326,450,379,354,395,353],
[590,496,467,565,0,520,473,420,466,444],
[515,490,394,441,371,0,400,420,414,447],
[468,419,420,512,418,491,0,467,464,513],
[566,472,536,537,471,471,424,0,464,514],
[522,545,446,496,425,477,427,427,0,497],
[491,539,398,538,447,444,378,377,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,432,437,451,417,438,453,441,434],
[489,0,487,480,468,461,469,440,446,441],
[459,404,0,462,431,455,443,437,438,475],
[454,411,429,0,464,451,477,438,439,445],
[440,423,460,427,0,436,477,483,436,471],
[474,430,436,440,455,0,451,477,445,460],
[453,422,448,414,414,440,0,439,423,432],
[438,451,454,453,408,414,452,0,473,435],
[450,445,453,452,455,446,468,418,0,465],
[457,450,416,446,420,431,459,456,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,443,455,454,432,466,455,434,437],
[422,0,419,409,428,420,427,438,390,425],
[448,472,0,460,443,455,459,447,447,439],
[436,482,431,0,440,448,435,448,435,438],
[437,463,448,451,0,449,458,447,432,459],
[459,471,436,443,442,0,464,447,441,468],
[425,464,432,456,433,427,0,446,426,456],
[436,453,444,443,444,444,445,0,444,451],
[457,501,444,456,459,450,465,447,0,460],
[454,466,452,453,432,423,435,440,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,419,426,444,440,407,406,444,425],
[438,0,423,454,471,446,433,426,451,445],
[472,468,0,490,479,486,466,421,469,454],
[465,437,401,0,476,462,454,445,478,459],
[447,420,412,415,0,404,427,406,432,443],
[451,445,405,429,487,0,420,445,445,451],
[484,458,425,437,464,471,0,447,433,489],
[485,465,470,446,485,446,444,0,481,481],
[447,440,422,413,459,446,458,410,0,442],
[466,446,437,432,448,440,402,410,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,589,487,536,535,440,451,483,452],
[400,0,521,379,453,395,394,415,467,425],
[302,370,0,358,410,371,353,412,491,414],
[404,512,533,0,527,487,471,483,513,443],
[355,438,481,364,0,373,338,382,452,369],
[356,496,520,404,518,0,398,443,509,453],
[451,497,538,420,553,493,0,538,560,478],
[440,476,479,408,509,448,353,0,507,436],
[408,424,400,378,439,382,331,384,0,369],
[439,466,477,448,522,438,413,455,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,438,371,407,407,378,418,428,405],
[467,0,443,437,445,430,447,455,457,452],
[453,448,0,432,418,408,402,418,410,415],
[520,454,459,0,448,455,445,420,426,476],
[484,446,473,443,0,437,426,432,450,419],
[484,461,483,436,454,0,470,459,464,465],
[513,444,489,446,465,421,0,437,466,421],
[473,436,473,471,459,432,454,0,461,483],
[463,434,481,465,441,427,425,430,0,429],
[486,439,476,415,472,426,470,408,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,433,429,441,454,453,438,441,425],
[429,0,442,416,454,441,481,421,430,437],
[458,449,0,412,422,438,437,452,428,457],
[462,475,479,0,433,458,475,430,450,435],
[450,437,469,458,0,437,462,438,442,461],
[437,450,453,433,454,0,474,451,452,441],
[438,410,454,416,429,417,0,428,438,424],
[453,470,439,461,453,440,463,0,429,452],
[450,461,463,441,449,439,453,462,0,450],
[466,454,434,456,430,450,467,439,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,425,439,415,433,448,421,484,473],
[425,0,429,441,431,445,443,419,450,478],
[466,462,0,457,438,445,451,430,475,481],
[452,450,434,0,466,431,460,447,462,461],
[476,460,453,425,0,461,459,449,473,473],
[458,446,446,460,430,0,442,421,438,472],
[443,448,440,431,432,449,0,415,442,459],
[470,472,461,444,442,470,476,0,461,466],
[407,441,416,429,418,453,449,430,0,431],
[418,413,410,430,418,419,432,425,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,450,440,451,451,442,435,412,459],
[449,0,453,467,447,460,467,453,423,458],
[441,438,0,436,433,430,435,412,403,456],
[451,424,455,0,429,428,461,414,401,450],
[440,444,458,462,0,448,450,447,417,454],
[440,431,461,463,443,0,451,444,439,457],
[449,424,456,430,441,440,0,456,416,421],
[456,438,479,477,444,447,435,0,447,439],
[479,468,488,490,474,452,475,444,0,453],
[432,433,435,441,437,434,470,452,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,417,431,437,439,432,423,419,422],
[488,0,438,430,449,453,431,441,465,452],
[474,453,0,459,457,462,453,436,473,447],
[460,461,432,0,466,463,433,438,475,468],
[454,442,434,425,0,439,420,451,426,421],
[452,438,429,428,452,0,430,447,445,444],
[459,460,438,458,471,461,0,428,467,444],
[468,450,455,453,440,444,463,0,457,448],
[472,426,418,416,465,446,424,434,0,446],
[469,439,444,423,470,447,447,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,436,448,429,412,447,457,453,468],
[461,0,455,444,453,453,447,444,453,469],
[455,436,0,460,438,452,469,449,458,452],
[443,447,431,0,439,451,459,451,434,453],
[462,438,453,452,0,454,445,450,462,478],
[479,438,439,440,437,0,458,466,446,467],
[444,444,422,432,446,433,0,462,417,455],
[434,447,442,440,441,425,429,0,423,453],
[438,438,433,457,429,445,474,468,0,441],
[423,422,439,438,413,424,436,438,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,422,424,410,433,431,431,437,420],
[440,0,451,447,445,457,446,434,470,454],
[469,440,0,452,434,443,427,448,442,453],
[467,444,439,0,418,455,433,435,457,460],
[481,446,457,473,0,450,440,436,473,462],
[458,434,448,436,441,0,428,429,447,431],
[460,445,464,458,451,463,0,454,466,451],
[460,457,443,456,455,462,437,0,462,449],
[454,421,449,434,418,444,425,429,0,446],
[471,437,438,431,429,460,440,442,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,433,520,398,501,477,587,455,476],
[445,0,470,520,405,476,526,511,467,461],
[458,421,0,522,480,542,521,531,473,483],
[371,371,369,0,354,458,414,495,386,412],
[493,486,411,537,0,479,548,517,467,479],
[390,415,349,433,412,0,452,478,393,395],
[414,365,370,477,343,439,0,482,395,440],
[304,380,360,396,374,413,409,0,337,380],
[436,424,418,505,424,498,496,554,0,454],
[415,430,408,479,412,496,451,511,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,424,457,430,470,456,460,461,461],
[469,0,466,459,430,494,485,437,497,416],
[467,425,0,433,413,495,459,440,481,428],
[434,432,458,0,454,482,451,464,472,442],
[461,461,478,437,0,499,467,459,462,456],
[421,397,396,409,392,0,451,430,444,398],
[435,406,432,440,424,440,0,415,464,414],
[431,454,451,427,432,461,476,0,485,439],
[430,394,410,419,429,447,427,406,0,384],
[430,475,463,449,435,493,477,452,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,449,433,445,481,438,438,435,436],
[399,0,438,419,439,439,428,447,420,422],
[442,453,0,438,436,469,451,451,444,423],
[458,472,453,0,478,483,459,448,463,441],
[446,452,455,413,0,471,452,455,453,435],
[410,452,422,408,420,0,424,422,425,426],
[453,463,440,432,439,467,0,425,439,443],
[453,444,440,443,436,469,466,0,437,448],
[456,471,447,428,438,466,452,454,0,455],
[455,469,468,450,456,465,448,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,422,452,417,459,441,413,424,425],
[464,0,450,475,449,444,445,448,446,433],
[469,441,0,444,442,421,467,425,417,440],
[439,416,447,0,427,432,446,417,405,425],
[474,442,449,464,0,442,451,436,420,435],
[432,447,470,459,449,0,467,431,440,453],
[450,446,424,445,440,424,0,429,445,450],
[478,443,466,474,455,460,462,0,453,454],
[467,445,474,486,471,451,446,438,0,460],
[466,458,451,466,456,438,441,437,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,461,460,456,435,451,439,455,425],
[429,0,461,438,464,419,410,453,430,443],
[430,430,0,458,440,439,440,443,446,451],
[431,453,433,0,443,456,430,456,456,425],
[435,427,451,448,0,435,451,447,463,413],
[456,472,452,435,456,0,420,443,468,451],
[440,481,451,461,440,471,0,439,481,458],
[452,438,448,435,444,448,452,0,460,434],
[436,461,445,435,428,423,410,431,0,448],
[466,448,440,466,478,440,433,457,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,451,448,459,417,466,488,450,446],
[449,0,431,452,470,417,445,469,462,460],
[440,460,0,461,460,446,458,497,482,459],
[443,439,430,0,454,443,471,482,451,458],
[432,421,431,437,0,440,467,478,475,425],
[474,474,445,448,451,0,455,482,481,457],
[425,446,433,420,424,436,0,479,452,420],
[403,422,394,409,413,409,412,0,483,410],
[441,429,409,440,416,410,439,408,0,424],
[445,431,432,433,466,434,471,481,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,446,366,394,452,427,424,487,460],
[411,0,433,345,317,413,369,374,478,467],
[445,458,0,404,432,415,467,435,519,447],
[525,546,487,0,441,502,456,452,516,470],
[497,574,459,450,0,484,469,422,537,534],
[439,478,476,389,407,0,435,370,476,513],
[464,522,424,435,422,456,0,484,508,536],
[467,517,456,439,469,521,407,0,539,505],
[404,413,372,375,354,415,383,352,0,438],
[431,424,444,421,357,378,355,386,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,530,365,417,473,336,443,501,503],
[530,0,504,417,443,472,334,331,389,392],
[361,387,0,305,388,333,361,389,333,390],
[526,474,586,0,441,417,472,470,553,528],
[474,448,503,450,0,502,394,474,531,478],
[418,419,558,474,389,0,391,500,418,449],
[555,557,530,419,497,500,0,468,528,559],
[448,560,502,421,417,391,423,0,504,504],
[390,502,558,338,360,473,363,387,0,418],
[388,499,501,363,413,442,332,387,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,452,430,429,439,423,450,438,453],
[435,0,426,431,446,408,446,443,446,465],
[439,465,0,444,447,436,421,462,455,446],
[461,460,447,0,461,431,466,441,469,457],
[462,445,444,430,0,427,444,447,467,455],
[452,483,455,460,464,0,444,463,466,471],
[468,445,470,425,447,447,0,473,455,464],
[441,448,429,450,444,428,418,0,460,471],
[453,445,436,422,424,425,436,431,0,441],
[438,426,445,434,436,420,427,420,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,464,445,443,480,452,482,469,457],
[428,0,458,438,417,465,457,411,435,443],
[427,433,0,472,423,479,433,450,479,452],
[446,453,419,0,429,428,430,441,426,432],
[448,474,468,462,0,465,430,418,445,447],
[411,426,412,463,426,0,407,453,403,422],
[439,434,458,461,461,484,0,427,465,464],
[409,480,441,450,473,438,464,0,472,444],
[422,456,412,465,446,488,426,419,0,432],
[434,448,439,459,444,469,427,447,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,440,470,490,491,450,439,443,474],
[413,0,441,438,436,450,433,401,450,451],
[451,450,0,446,464,476,439,443,447,470],
[421,453,445,0,441,454,445,443,430,456],
[401,455,427,450,0,455,406,411,452,458],
[400,441,415,437,436,0,429,429,429,442],
[441,458,452,446,485,462,0,465,481,472],
[452,490,448,448,480,462,426,0,466,468],
[448,441,444,461,439,462,410,425,0,445],
[417,440,421,435,433,449,419,423,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,437,457,443,435,434,429,461,472],
[418,0,418,438,457,440,435,423,435,455],
[454,473,0,483,460,452,444,439,467,473],
[434,453,408,0,445,436,445,419,453,456],
[448,434,431,446,0,438,445,430,442,458],
[456,451,439,455,453,0,441,434,454,469],
[457,456,447,446,446,450,0,447,434,453],
[462,468,452,472,461,457,444,0,458,468],
[430,456,424,438,449,437,457,433,0,459],
[419,436,418,435,433,422,438,423,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,439,461,411,461,440,437,439,432],
[426,0,405,418,439,419,443,458,447,422],
[452,486,0,452,448,445,440,471,451,451],
[430,473,439,0,464,447,430,446,441,410],
[480,452,443,427,0,456,461,445,436,452],
[430,472,446,444,435,0,432,450,413,422],
[451,448,451,461,430,459,0,463,450,461],
[454,433,420,445,446,441,428,0,439,404],
[452,444,440,450,455,478,441,452,0,460],
[459,469,440,481,439,469,430,487,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,435,420,442,437,415,410,417,427],
[465,0,465,448,454,440,426,399,413,431],
[456,426,0,460,450,444,423,430,444,427],
[471,443,431,0,454,423,415,419,429,426],
[449,437,441,437,0,433,435,437,429,397],
[454,451,447,468,458,0,440,430,449,444],
[476,465,468,476,456,451,0,437,461,466],
[481,492,461,472,454,461,454,0,440,439],
[474,478,447,462,462,442,430,451,0,430],
[464,460,464,465,494,447,425,452,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,492,457,456,441,460,481,474,420],
[400,0,453,423,430,425,434,440,445,419],
[399,438,0,454,417,421,427,411,422,404],
[434,468,437,0,430,427,435,460,430,418],
[435,461,474,461,0,452,424,438,424,371],
[450,466,470,464,439,0,455,476,466,434],
[431,457,464,456,467,436,0,433,436,463],
[410,451,480,431,453,415,458,0,441,420],
[417,446,469,461,467,425,455,450,0,412],
[471,472,487,473,520,457,428,471,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,402,430,425,419,457,444,435,432],
[438,0,419,447,395,414,434,443,448,436],
[489,472,0,464,435,464,448,455,454,484],
[461,444,427,0,429,389,418,441,450,438],
[466,496,456,462,0,432,455,454,445,439],
[472,477,427,502,459,0,467,445,439,462],
[434,457,443,473,436,424,0,431,419,488],
[447,448,436,450,437,446,460,0,430,443],
[456,443,437,441,446,452,472,461,0,489],
[459,455,407,453,452,429,403,448,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,446,429,429,438,454,436,444,458],
[462,0,445,445,449,463,480,436,451,480],
[445,446,0,460,442,445,452,439,456,454],
[462,446,431,0,430,431,447,441,457,473],
[462,442,449,461,0,473,466,448,458,458],
[453,428,446,460,418,0,428,439,431,440],
[437,411,439,444,425,463,0,426,435,448],
[455,455,452,450,443,452,465,0,452,442],
[447,440,435,434,433,460,456,439,0,450],
[433,411,437,418,433,451,443,449,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,436,416,418,427,425,402,458,447],
[455,0,424,418,415,429,459,388,437,450],
[455,467,0,431,418,433,458,437,460,447],
[475,473,460,0,463,453,458,428,462,450],
[473,476,473,428,0,460,479,428,462,452],
[464,462,458,438,431,0,473,426,461,433],
[466,432,433,433,412,418,0,399,433,439],
[489,503,454,463,463,465,492,0,443,443],
[433,454,431,429,429,430,458,448,0,424],
[444,441,444,441,439,458,452,448,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,343,548,519,487,432,461,399,545],
[401,0,402,548,518,432,434,372,348,520],
[548,489,0,636,487,519,547,520,432,605],
[343,343,255,0,430,370,402,312,401,431],
[372,373,404,461,0,345,375,374,376,432],
[404,459,372,521,546,0,433,463,461,521],
[459,457,344,489,516,458,0,344,372,487],
[430,519,371,579,517,428,547,0,458,605],
[492,543,459,490,515,430,519,433,0,630],
[346,371,286,460,459,370,404,286,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,489,355,353,331,402,465,354,421],
[533,0,600,445,513,466,518,602,446,559],
[402,291,0,383,359,402,385,426,359,384],
[536,446,508,0,443,442,492,533,398,513],
[538,378,532,448,0,515,496,518,452,474],
[560,425,489,449,376,0,449,496,399,536],
[489,373,506,399,395,442,0,418,398,486],
[426,289,465,358,373,395,473,0,374,490],
[537,445,532,493,439,492,493,517,0,626],
[470,332,507,378,417,355,405,401,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,472,468,466,439,448,411,510,451],
[448,0,459,458,498,476,426,430,533,455],
[419,432,0,433,465,437,449,459,512,414],
[423,433,458,0,463,481,461,452,507,462],
[425,393,426,428,0,463,428,504,517,471],
[452,415,454,410,428,0,381,431,441,414],
[443,465,442,430,463,510,0,480,494,450],
[480,461,432,439,387,460,411,0,516,427],
[381,358,379,384,374,450,397,375,0,403],
[440,436,477,429,420,477,441,464,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,440,461,439,459,430,465,431,454],
[466,0,443,431,418,439,432,435,434,433],
[451,448,0,427,421,428,420,424,426,415],
[430,460,464,0,419,459,435,447,435,428],
[452,473,470,472,0,445,459,471,461,461],
[432,452,463,432,446,0,433,445,432,447],
[461,459,471,456,432,458,0,460,451,466],
[426,456,467,444,420,446,431,0,433,460],
[460,457,465,456,430,459,440,458,0,432],
[437,458,476,463,430,444,425,431,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,407,447,415,430,444,427,411,481],
[482,0,453,443,439,467,458,452,449,484],
[484,438,0,445,470,452,458,439,475,471],
[444,448,446,0,456,453,455,451,418,469],
[476,452,421,435,0,466,446,440,460,474],
[461,424,439,438,425,0,446,418,428,457],
[447,433,433,436,445,445,0,428,467,480],
[464,439,452,440,451,473,463,0,455,490],
[480,442,416,473,431,463,424,436,0,457],
[410,407,420,422,417,434,411,401,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,480,408,450,431,531,417,510,495],
[409,0,441,407,284,395,376,399,446,376],
[411,450,0,344,439,317,431,468,508,429],
[483,484,547,0,418,366,531,436,494,482],
[441,607,452,473,0,420,504,527,506,456],
[460,496,574,525,471,0,542,450,560,395],
[360,515,460,360,387,349,0,468,510,412],
[474,492,423,455,364,441,423,0,522,391],
[381,445,383,397,385,331,381,369,0,312],
[396,515,462,409,435,496,479,500,579,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,467,456,454,437,437,433,448,466],
[453,0,428,433,427,411,434,449,448,418],
[424,463,0,454,442,434,436,452,450,433],
[435,458,437,0,439,423,435,447,429,440],
[437,464,449,452,0,452,443,444,437,459],
[454,480,457,468,439,0,450,462,475,474],
[454,457,455,456,448,441,0,457,457,439],
[458,442,439,444,447,429,434,0,444,441],
[443,443,441,462,454,416,434,447,0,446],
[425,473,458,451,432,417,452,450,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,483,482,445,447,462,443,459,494],
[386,0,414,412,401,418,404,405,403,456],
[408,477,0,438,409,435,432,406,424,461],
[409,479,453,0,412,442,425,425,437,455],
[446,490,482,479,0,440,458,482,453,498],
[444,473,456,449,451,0,417,435,434,492],
[429,487,459,466,433,474,0,457,435,493],
[448,486,485,466,409,456,434,0,477,479],
[432,488,467,454,438,457,456,414,0,481],
[397,435,430,436,393,399,398,412,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,469,472,461,440,446,466,432,467],
[450,0,471,484,454,450,434,453,451,466],
[422,420,0,447,433,437,419,433,436,469],
[419,407,444,0,426,417,429,450,436,446],
[430,437,458,465,0,443,435,466,445,486],
[451,441,454,474,448,0,443,460,437,486],
[445,457,472,462,456,448,0,469,452,478],
[425,438,458,441,425,431,422,0,428,454],
[459,440,455,455,446,454,439,463,0,467],
[424,425,422,445,405,405,413,437,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,474,490,453,456,477,453,433,433],
[429,0,470,491,432,474,447,434,427,454],
[417,421,0,501,426,445,431,462,431,433],
[401,400,390,0,382,394,392,437,413,396],
[438,459,465,509,0,498,452,433,448,474],
[435,417,446,497,393,0,430,452,446,404],
[414,444,460,499,439,461,0,442,441,433],
[438,457,429,454,458,439,449,0,437,445],
[458,464,460,478,443,445,450,454,0,431],
[458,437,458,495,417,487,458,446,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,443,465,466,474,454,454,487,505],
[402,0,471,403,435,441,445,409,429,441],
[448,420,0,461,454,467,448,471,467,453],
[426,488,430,0,455,456,430,429,486,494],
[425,456,437,436,0,484,461,476,463,479],
[417,450,424,435,407,0,447,396,441,473],
[437,446,443,461,430,444,0,466,431,445],
[437,482,420,462,415,495,425,0,472,484],
[404,462,424,405,428,450,460,419,0,441],
[386,450,438,397,412,418,446,407,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,385,504,462,449,464,445,447,448],
[465,0,401,441,440,450,417,449,440,412],
[506,490,0,489,442,503,478,477,466,455],
[387,450,402,0,426,462,404,445,382,358],
[429,451,449,465,0,476,422,441,462,410],
[442,441,388,429,415,0,420,417,442,383],
[427,474,413,487,469,471,0,472,474,396],
[446,442,414,446,450,474,419,0,428,438],
[444,451,425,509,429,449,417,463,0,407],
[443,479,436,533,481,508,495,453,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,434,403,473,375,400,456,474,440],
[423,0,419,426,433,407,449,391,444,417],
[457,472,0,461,491,414,413,442,501,464],
[488,465,430,0,435,398,398,474,477,495],
[418,458,400,456,0,429,418,442,450,439],
[516,484,477,493,462,0,434,481,475,483],
[491,442,478,493,473,457,0,488,542,497],
[435,500,449,417,449,410,403,0,500,488],
[417,447,390,414,441,416,349,391,0,383],
[451,474,427,396,452,408,394,403,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,441,423,424,417,437,442,438,460],
[463,0,472,436,451,434,436,486,406,465],
[450,419,0,427,445,447,440,438,430,454],
[468,455,464,0,445,457,455,477,437,462],
[467,440,446,446,0,454,457,467,431,427],
[474,457,444,434,437,0,436,462,441,462],
[454,455,451,436,434,455,0,468,447,461],
[449,405,453,414,424,429,423,0,420,430],
[453,485,461,454,460,450,444,471,0,473],
[431,426,437,429,464,429,430,461,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,463,460,442,447,433,438,443,420],
[480,0,488,469,464,482,467,479,445,463],
[428,403,0,438,428,440,441,417,446,422],
[431,422,453,0,441,446,456,427,433,432],
[449,427,463,450,0,448,458,432,430,428],
[444,409,451,445,443,0,452,439,440,432],
[458,424,450,435,433,439,0,420,441,429],
[453,412,474,464,459,452,471,0,460,446],
[448,446,445,458,461,451,450,431,0,461],
[471,428,469,459,463,459,462,445,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,437,435,431,444,441,436,462,440],
[453,0,423,415,456,430,442,455,447,452],
[454,468,0,451,470,435,467,439,467,451],
[456,476,440,0,459,461,457,465,463,457],
[460,435,421,432,0,454,446,443,452,459],
[447,461,456,430,437,0,453,447,447,476],
[450,449,424,434,445,438,0,448,452,449],
[455,436,452,426,448,444,443,0,459,444],
[429,444,424,428,439,444,439,432,0,452],
[451,439,440,434,432,415,442,447,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,505,453,504,410,460,444,504,432],
[383,0,450,377,437,347,380,375,429,368],
[386,441,0,425,448,380,411,396,459,394],
[438,514,466,0,502,413,418,409,471,416],
[387,454,443,389,0,389,401,388,459,359],
[481,544,511,478,502,0,430,442,527,449],
[431,511,480,473,490,461,0,439,489,425],
[447,516,495,482,503,449,452,0,503,431],
[387,462,432,420,432,364,402,388,0,378],
[459,523,497,475,532,442,466,460,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,488,467,475,453,487,425,465,456],
[417,0,452,438,487,465,472,391,451,444],
[403,439,0,421,459,467,465,421,440,432],
[424,453,470,0,473,484,472,446,462,498],
[416,404,432,418,0,456,450,410,420,419],
[438,426,424,407,435,0,460,421,422,441],
[404,419,426,419,441,431,0,397,440,412],
[466,500,470,445,481,470,494,0,473,462],
[426,440,451,429,471,469,451,418,0,460],
[435,447,459,393,472,450,479,429,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,478,463,444,470,475,412,509,435],
[454,0,440,420,406,481,508,487,503,419],
[413,451,0,431,389,500,481,421,470,456],
[428,471,460,0,440,485,491,484,475,461],
[447,485,502,451,0,499,499,468,490,428],
[421,410,391,406,392,0,427,446,442,411],
[416,383,410,400,392,464,0,414,443,404],
[479,404,470,407,423,445,477,0,469,435],
[382,388,421,416,401,449,448,422,0,385],
[456,472,435,430,463,480,487,456,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,399,454,424,354,361,400,422,448],
[478,0,389,436,434,458,403,393,443,443],
[492,502,0,453,465,443,416,365,502,485],
[437,455,438,0,487,461,435,436,435,461],
[467,457,426,404,0,453,426,394,426,542],
[537,433,448,430,438,0,471,480,513,488],
[530,488,475,456,465,420,0,498,452,436],
[491,498,526,455,497,411,393,0,466,430],
[469,448,389,456,465,378,439,425,0,428],
[443,448,406,430,349,403,455,461,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,453,431,445,461,445,465,452,449],
[432,0,452,449,447,448,449,481,461,455],
[438,439,0,436,441,442,412,458,454,471],
[460,442,455,0,464,455,461,479,466,459],
[446,444,450,427,0,438,431,460,449,445],
[430,443,449,436,453,0,419,455,456,446],
[446,442,479,430,460,472,0,475,459,476],
[426,410,433,412,431,436,416,0,437,438],
[439,430,437,425,442,435,432,454,0,439],
[442,436,420,432,446,445,415,453,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,409,417,436,441,431,436,463,432],
[421,0,394,434,422,401,421,399,418,412],
[482,497,0,445,474,469,449,466,489,457],
[474,457,446,0,458,434,439,431,453,452],
[455,469,417,433,0,423,422,452,472,439],
[450,490,422,457,468,0,424,441,437,450],
[460,470,442,452,469,467,0,467,490,445],
[455,492,425,460,439,450,424,0,461,433],
[428,473,402,438,419,454,401,430,0,422],
[459,479,434,439,452,441,446,458,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,430,421,407,428,434,429,433,411],
[467,0,449,435,420,447,437,435,435,444],
[461,442,0,476,433,435,445,453,440,422],
[470,456,415,0,433,443,442,434,428,427],
[484,471,458,458,0,472,439,456,434,463],
[463,444,456,448,419,0,457,442,448,424],
[457,454,446,449,452,434,0,435,454,460],
[462,456,438,457,435,449,456,0,452,452],
[458,456,451,463,457,443,437,439,0,432],
[480,447,469,464,428,467,431,439,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,377,465,385,499,465,466,458,324],
[512,0,495,570,444,440,528,569,485,399],
[514,396,0,513,427,414,455,428,511,418],
[426,321,378,0,403,422,408,484,402,337],
[506,447,464,488,0,477,420,563,463,452],
[392,451,477,469,414,0,452,496,424,450],
[426,363,436,483,471,439,0,539,509,423],
[425,322,463,407,328,395,352,0,383,365],
[433,406,380,489,428,467,382,508,0,351],
[567,492,473,554,439,441,468,526,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,462,446,454,453,471,452,467,445],
[404,0,440,409,419,412,454,413,398,425],
[429,451,0,420,420,449,434,434,427,439],
[445,482,471,0,437,453,472,450,446,447],
[437,472,471,454,0,455,463,460,443,421],
[438,479,442,438,436,0,449,428,422,439],
[420,437,457,419,428,442,0,414,414,409],
[439,478,457,441,431,463,477,0,442,457],
[424,493,464,445,448,469,477,449,0,447],
[446,466,452,444,470,452,482,434,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,408,394,392,424,422,456,401,411],
[503,0,446,468,447,460,447,483,398,381],
[483,445,0,441,431,449,431,497,430,410],
[497,423,450,0,419,434,423,474,430,412],
[499,444,460,472,0,501,486,513,478,449],
[467,431,442,457,390,0,450,474,406,437],
[469,444,460,468,405,441,0,504,442,459],
[435,408,394,417,378,417,387,0,397,386],
[490,493,461,461,413,485,449,494,0,443],
[480,510,481,479,442,454,432,505,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,462,369,411,449,444,474,428,456],
[431,0,481,458,498,478,480,513,456,488],
[429,410,0,389,403,461,435,452,445,450],
[522,433,502,0,495,481,497,509,479,502],
[480,393,488,396,0,478,452,530,470,465],
[442,413,430,410,413,0,454,470,443,436],
[447,411,456,394,439,437,0,457,424,443],
[417,378,439,382,361,421,434,0,404,442],
[463,435,446,412,421,448,467,487,0,482],
[435,403,441,389,426,455,448,449,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,415,457,551,409,442,490,486,434],
[406,0,409,415,476,442,374,490,493,427],
[476,482,0,416,514,436,427,495,479,456],
[434,476,475,0,533,466,413,517,431,513],
[340,415,377,358,0,399,311,388,427,394],
[482,449,455,425,492,0,489,503,483,457],
[449,517,464,478,580,402,0,495,503,473],
[401,401,396,374,503,388,396,0,469,448],
[405,398,412,460,464,408,388,422,0,417],
[457,464,435,378,497,434,418,443,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,403,454,425,415,432,422,392,411],
[445,0,443,451,438,447,437,454,445,442],
[488,448,0,466,398,437,447,425,419,453],
[437,440,425,0,389,420,425,455,445,420],
[466,453,493,502,0,476,486,482,477,445],
[476,444,454,471,415,0,458,483,444,458],
[459,454,444,466,405,433,0,466,476,451],
[469,437,466,436,409,408,425,0,417,429],
[499,446,472,446,414,447,415,474,0,443],
[480,449,438,471,446,433,440,462,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,452,420,465,405,430,425,449,457],
[448,0,446,456,448,413,422,440,474,463],
[439,445,0,410,421,414,415,433,427,449],
[471,435,481,0,459,447,445,457,455,467],
[426,443,470,432,0,422,437,432,447,480],
[486,478,477,444,469,0,462,465,465,485],
[461,469,476,446,454,429,0,450,442,465],
[466,451,458,434,459,426,441,0,467,470],
[442,417,464,436,444,426,449,424,0,459],
[434,428,442,424,411,406,426,421,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,403,446,405,447,223,358,313,402],
[533,0,536,577,488,536,487,489,581,401],
[488,355,0,400,356,399,400,400,311,311],
[445,314,491,0,404,536,267,536,490,446],
[486,403,535,487,0,447,355,534,443,535],
[444,355,492,355,444,0,444,491,311,447],
[668,404,491,624,536,447,0,492,583,537],
[533,402,491,355,357,400,399,0,400,490],
[578,310,580,401,448,580,308,491,0,401],
[489,490,580,445,356,444,354,401,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,409,492,414,420,476,456,422,458],
[455,0,410,481,436,465,506,468,398,422],
[482,481,0,484,470,477,516,429,468,482],
[399,410,407,0,452,437,468,399,442,431],
[477,455,421,439,0,460,487,440,448,482],
[471,426,414,454,431,0,466,423,436,394],
[415,385,375,423,404,425,0,432,389,411],
[435,423,462,492,451,468,459,0,408,475],
[469,493,423,449,443,455,502,483,0,466],
[433,469,409,460,409,497,480,416,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,444,436,450,470,448,451,454,476],
[428,0,428,421,433,435,430,442,416,436],
[447,463,0,443,455,445,433,430,450,439],
[455,470,448,0,456,436,453,429,431,434],
[441,458,436,435,0,436,456,423,425,435],
[421,456,446,455,455,0,424,419,450,470],
[443,461,458,438,435,467,0,436,436,442],
[440,449,461,462,468,472,455,0,451,456],
[437,475,441,460,466,441,455,440,0,438],
[415,455,452,457,456,421,449,435,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,515,497,468,478,447,480,424,463],
[441,0,485,470,403,428,444,460,392,495],
[376,406,0,366,378,402,429,464,375,433],
[394,421,525,0,428,407,429,473,412,435],
[423,488,513,463,0,456,461,464,401,478],
[413,463,489,484,435,0,443,458,460,471],
[444,447,462,462,430,448,0,460,438,462],
[411,431,427,418,427,433,431,0,400,433],
[467,499,516,479,490,431,453,491,0,462],
[428,396,458,456,413,420,429,458,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,439,464,433,449,423,421,425,429],
[475,0,458,454,445,440,444,469,463,459],
[452,433,0,449,455,467,417,449,454,434],
[427,437,442,0,432,464,438,461,453,442],
[458,446,436,459,0,467,447,447,438,452],
[442,451,424,427,424,0,418,423,442,436],
[468,447,474,453,444,473,0,465,443,437],
[470,422,442,430,444,468,426,0,471,449],
[466,428,437,438,453,449,448,420,0,438],
[462,432,457,449,439,455,454,442,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,458,448,462,445,478,475,463,461],
[425,0,443,435,414,412,466,449,438,428],
[433,448,0,436,454,464,463,456,462,451],
[443,456,455,0,454,455,488,476,467,459],
[429,477,437,437,0,433,461,446,425,436],
[446,479,427,436,458,0,473,460,452,469],
[413,425,428,403,430,418,0,444,421,415],
[416,442,435,415,445,431,447,0,439,434],
[428,453,429,424,466,439,470,452,0,438],
[430,463,440,432,455,422,476,457,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,454,457,457,464,468,471,453,481],
[455,0,444,452,460,480,455,455,452,466],
[437,447,0,447,448,444,467,463,451,444],
[434,439,444,0,463,452,468,463,448,446],
[434,431,443,428,0,450,444,452,442,447],
[427,411,447,439,441,0,449,460,437,442],
[423,436,424,423,447,442,0,471,437,442],
[420,436,428,428,439,431,420,0,435,426],
[438,439,440,443,449,454,454,456,0,451],
[410,425,447,445,444,449,449,465,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,448,474,462,439,454,484,469,476],
[437,0,441,461,467,460,464,450,470,482],
[443,450,0,457,489,435,473,480,464,484],
[417,430,434,0,472,435,466,482,481,463],
[429,424,402,419,0,417,424,457,453,436],
[452,431,456,456,474,0,467,486,466,478],
[437,427,418,425,467,424,0,458,459,465],
[407,441,411,409,434,405,433,0,451,441],
[422,421,427,410,438,425,432,440,0,451],
[415,409,407,428,455,413,426,450,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,434,436,513,497,458,423,461,466],
[407,0,487,484,453,450,483,472,502,469],
[457,404,0,517,551,462,534,545,507,506],
[455,407,374,0,459,410,442,465,505,429],
[378,438,340,432,0,474,419,430,504,461],
[394,441,429,481,417,0,474,433,409,412],
[433,408,357,449,472,417,0,396,430,415],
[468,419,346,426,461,458,495,0,460,469],
[430,389,384,386,387,482,461,431,0,453],
[425,422,385,462,430,479,476,422,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,413,417,388,390,388,441,416,372],
[465,0,408,418,404,423,453,446,431,417],
[478,483,0,476,431,459,480,484,467,433],
[474,473,415,0,437,421,440,486,462,446],
[503,487,460,454,0,432,476,477,475,450],
[501,468,432,470,459,0,465,458,473,428],
[503,438,411,451,415,426,0,465,482,460],
[450,445,407,405,414,433,426,0,433,416],
[475,460,424,429,416,418,409,458,0,421],
[519,474,458,445,441,463,431,475,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,440,463,448,454,452,439,417,446],
[441,0,454,459,468,446,464,447,428,431],
[451,437,0,470,445,428,438,435,428,431],
[428,432,421,0,444,427,416,423,410,431],
[443,423,446,447,0,420,430,426,417,421],
[437,445,463,464,471,0,446,445,454,417],
[439,427,453,475,461,445,0,441,446,431],
[452,444,456,468,465,446,450,0,430,445],
[474,463,463,481,474,437,445,461,0,448],
[445,460,460,460,470,474,460,446,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,450,437,446,452,416,387,434,421],
[451,0,472,414,447,461,435,451,422,478],
[441,419,0,439,450,425,467,450,429,447],
[454,477,452,0,501,447,415,460,461,481],
[445,444,441,390,0,437,437,391,412,395],
[439,430,466,444,454,0,425,440,451,462],
[475,456,424,476,454,466,0,420,439,449],
[504,440,441,431,500,451,471,0,447,462],
[457,469,462,430,479,440,452,444,0,463],
[470,413,444,410,496,429,442,429,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,449,474,485,443,421,456,435,427],
[460,0,437,455,501,438,441,439,451,467],
[442,454,0,492,454,471,468,461,472,463],
[417,436,399,0,479,427,407,440,491,447],
[406,390,437,412,0,413,399,411,397,419],
[448,453,420,464,478,0,479,441,484,420],
[470,450,423,484,492,412,0,466,450,408],
[435,452,430,451,480,450,425,0,450,425],
[456,440,419,400,494,407,441,441,0,452],
[464,424,428,444,472,471,483,466,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,415,386,361,433,417,416,462,474],
[433,0,437,358,396,366,420,393,434,405],
[476,454,0,442,467,463,429,433,446,405],
[505,533,449,0,525,508,478,482,406,449],
[530,495,424,366,0,431,457,402,445,413],
[458,525,428,383,460,0,486,345,381,386],
[474,471,462,413,434,405,0,394,388,448],
[475,498,458,409,489,546,497,0,416,404],
[429,457,445,485,446,510,503,475,0,490],
[417,486,486,442,478,505,443,487,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,474,422,510,466,496,473,484,449],
[432,0,434,450,447,403,472,460,481,459],
[417,457,0,425,457,446,454,450,490,425],
[469,441,466,0,481,455,471,495,499,456],
[381,444,434,410,0,424,457,440,414,426],
[425,488,445,436,467,0,475,472,485,489],
[395,419,437,420,434,416,0,435,482,418],
[418,431,441,396,451,419,456,0,464,432],
[407,410,401,392,477,406,409,427,0,418],
[442,432,466,435,465,402,473,459,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,418,448,431,409,448,444,456,435],
[465,0,485,456,462,452,457,457,454,445],
[473,406,0,481,466,444,463,470,463,461],
[443,435,410,0,429,425,442,448,426,423],
[460,429,425,462,0,455,458,453,430,437],
[482,439,447,466,436,0,449,461,452,445],
[443,434,428,449,433,442,0,463,461,433],
[447,434,421,443,438,430,428,0,444,415],
[435,437,428,465,461,439,430,447,0,451],
[456,446,430,468,454,446,458,476,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,425,434,437,427,442,438,434,447],
[447,0,434,426,427,432,427,433,434,431],
[466,457,0,444,440,440,430,444,460,461],
[457,465,447,0,447,434,433,445,432,443],
[454,464,451,444,0,444,442,440,444,448],
[464,459,451,457,447,0,434,446,457,446],
[449,464,461,458,449,457,0,467,435,458],
[453,458,447,446,451,445,424,0,466,460],
[457,457,431,459,447,434,456,425,0,435],
[444,460,430,448,443,445,433,431,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,462,433,437,437,441,445,442,429],
[452,0,456,417,417,436,461,426,447,431],
[429,435,0,434,423,444,445,434,448,416],
[458,474,457,0,441,441,458,454,466,450],
[454,474,468,450,0,451,463,455,479,434],
[454,455,447,450,440,0,457,437,454,464],
[450,430,446,433,428,434,0,434,454,444],
[446,465,457,437,436,454,457,0,463,456],
[449,444,443,425,412,437,437,428,0,429],
[462,460,475,441,457,427,447,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,416,448,454,453,440,428,464,470],
[435,0,428,465,435,464,461,434,473,441],
[475,463,0,459,459,468,473,419,452,473],
[443,426,432,0,435,462,438,434,455,448],
[437,456,432,456,0,468,455,425,442,458],
[438,427,423,429,423,0,430,431,450,444],
[451,430,418,453,436,461,0,447,449,461],
[463,457,472,457,466,460,444,0,452,473],
[427,418,439,436,449,441,442,439,0,474],
[421,450,418,443,433,447,430,418,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,464,482,463,443,464,464,465,462],
[433,0,409,449,443,451,447,462,434,467],
[427,482,0,463,442,427,459,479,448,447],
[409,442,428,0,441,422,455,442,440,455],
[428,448,449,450,0,429,464,469,467,440],
[448,440,464,469,462,0,476,492,473,452],
[427,444,432,436,427,415,0,456,449,453],
[427,429,412,449,422,399,435,0,449,440],
[426,457,443,451,424,418,442,442,0,426],
[429,424,444,436,451,439,438,451,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,507,467,457,395,429,407,414,461],
[427,0,584,554,520,550,426,383,412,521],
[384,307,0,397,460,448,364,354,320,398],
[424,337,494,0,440,459,420,370,348,413],
[434,371,431,451,0,479,290,404,416,417],
[496,341,443,432,412,0,396,417,336,359],
[462,465,527,471,601,495,0,419,465,462],
[484,508,537,521,487,474,472,0,429,485],
[477,479,571,543,475,555,426,462,0,456],
[430,370,493,478,474,532,429,406,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,441,440,434,446,433,438,444,463],
[423,0,434,422,406,436,417,429,447,461],
[450,457,0,458,465,442,435,462,453,483],
[451,469,433,0,432,440,451,463,453,465],
[457,485,426,459,0,466,454,461,467,476],
[445,455,449,451,425,0,451,465,449,476],
[458,474,456,440,437,440,0,457,464,457],
[453,462,429,428,430,426,434,0,457,466],
[447,444,438,438,424,442,427,434,0,448],
[428,430,408,426,415,415,434,425,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,463,467,402,428,469,410,398,434],
[458,0,495,493,474,497,487,416,436,432],
[428,396,0,405,345,407,442,386,390,374],
[424,398,486,0,401,401,457,406,368,396],
[489,417,546,490,0,464,493,445,446,462],
[463,394,484,490,427,0,470,416,431,390],
[422,404,449,434,398,421,0,383,398,398],
[481,475,505,485,446,475,508,0,433,425],
[493,455,501,523,445,460,493,458,0,434],
[457,459,517,495,429,501,493,466,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,434,437,427,451,429,453,456,428],
[465,0,446,437,425,458,440,433,451,435],
[457,445,0,438,443,446,435,451,455,427],
[454,454,453,0,443,445,435,439,445,438],
[464,466,448,448,0,453,449,443,469,443],
[440,433,445,446,438,0,431,447,443,446],
[462,451,456,456,442,460,0,450,466,431],
[438,458,440,452,448,444,441,0,454,444],
[435,440,436,446,422,448,425,437,0,423],
[463,456,464,453,448,445,460,447,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,504,472,498,440,497,484,499,472],
[433,0,502,518,517,448,422,484,496,458],
[387,389,0,419,453,409,374,480,489,430],
[419,373,472,0,476,436,386,427,495,394],
[393,374,438,415,0,433,361,438,485,393],
[451,443,482,455,458,0,422,445,459,461],
[394,469,517,505,530,469,0,501,508,462],
[407,407,411,464,453,446,390,0,473,486],
[392,395,402,396,406,432,383,418,0,416],
[419,433,461,497,498,430,429,405,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,468,480,444,459,472,486,386,439],
[411,0,478,474,478,422,450,451,420,424],
[423,413,0,417,439,447,423,429,388,369],
[411,417,474,0,450,452,469,420,459,462],
[447,413,452,441,0,449,480,484,419,401],
[432,469,444,439,442,0,486,483,464,415],
[419,441,468,422,411,405,0,451,432,400],
[405,440,462,471,407,408,440,0,431,469],
[505,471,503,432,472,427,459,460,0,416],
[452,467,522,429,490,476,491,422,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,411,487,400,463,454,439,404,400],
[457,0,458,454,447,448,437,447,440,392],
[480,433,0,454,439,456,468,495,440,428],
[404,437,437,0,398,422,432,457,421,413],
[491,444,452,493,0,472,467,470,424,418],
[428,443,435,469,419,0,439,459,425,373],
[437,454,423,459,424,452,0,452,412,389],
[452,444,396,434,421,432,439,0,460,444],
[487,451,451,470,467,466,479,431,0,448],
[491,499,463,478,473,518,502,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,427,433,444,449,429,428,458,444],
[443,0,439,438,439,429,433,412,450,442],
[464,452,0,454,433,456,461,450,457,466],
[458,453,437,0,441,460,436,418,472,456],
[447,452,458,450,0,460,444,447,474,470],
[442,462,435,431,431,0,414,418,455,447],
[462,458,430,455,447,477,0,443,479,459],
[463,479,441,473,444,473,448,0,484,466],
[433,441,434,419,417,436,412,407,0,423],
[447,449,425,435,421,444,432,425,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,457,455,466,438,486,462,460,441],
[442,0,452,433,457,447,478,447,440,455],
[434,439,0,429,424,444,457,440,428,408],
[436,458,462,0,459,456,446,450,470,437],
[425,434,467,432,0,445,468,445,444,442],
[453,444,447,435,446,0,454,443,442,426],
[405,413,434,445,423,437,0,428,419,414],
[429,444,451,441,446,448,463,0,434,448],
[431,451,463,421,447,449,472,457,0,456],
[450,436,483,454,449,465,477,443,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,462,455,466,463,428,462,476,466],
[445,0,479,461,444,463,454,458,510,471],
[429,412,0,438,425,408,421,415,437,417],
[436,430,453,0,448,448,433,478,463,454],
[425,447,466,443,0,433,417,453,455,455],
[428,428,483,443,458,0,425,459,465,451],
[463,437,470,458,474,466,0,453,481,453],
[429,433,476,413,438,432,438,0,448,426],
[415,381,454,428,436,426,410,443,0,414],
[425,420,474,437,436,440,438,465,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,465,446,459,462,462,482,480,460],
[470,0,455,446,397,442,430,444,473,410],
[426,436,0,434,424,456,440,463,464,425],
[445,445,457,0,450,456,445,496,488,412],
[432,494,467,441,0,477,444,482,502,443],
[429,449,435,435,414,0,477,467,404,417],
[429,461,451,446,447,414,0,476,451,475],
[409,447,428,395,409,424,415,0,424,443],
[411,418,427,403,389,487,440,467,0,409],
[431,481,466,479,448,474,416,448,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,454,441,432,420,442,438,428,440],
[449,0,462,427,431,421,444,438,436,436],
[437,429,0,428,420,397,424,435,428,402],
[450,464,463,0,444,431,443,441,476,438],
[459,460,471,447,0,443,460,453,472,441],
[471,470,494,460,448,0,456,441,462,448],
[449,447,467,448,431,435,0,453,463,423],
[453,453,456,450,438,450,438,0,453,417],
[463,455,463,415,419,429,428,438,0,435],
[451,455,489,453,450,443,468,474,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,388,394,343,441,423,429,420,390],
[461,0,473,410,369,488,447,451,434,425],
[503,418,0,414,378,476,456,494,452,421],
[497,481,477,0,461,466,469,444,475,416],
[548,522,513,430,0,503,485,520,468,461],
[450,403,415,425,388,0,441,439,438,368],
[468,444,435,422,406,450,0,460,448,434],
[462,440,397,447,371,452,431,0,482,406],
[471,457,439,416,423,453,443,409,0,434],
[501,466,470,475,430,523,457,485,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,402,434,398,438,410,403,435,419],
[482,0,433,476,490,470,471,442,454,462],
[489,458,0,452,473,450,477,451,464,442],
[457,415,439,0,414,469,456,432,415,430],
[493,401,418,477,0,469,457,474,452,455],
[453,421,441,422,422,0,451,439,441,403],
[481,420,414,435,434,440,0,412,418,432],
[488,449,440,459,417,452,479,0,431,444],
[456,437,427,476,439,450,473,460,0,397],
[472,429,449,461,436,488,459,447,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,403,450,471,441,447,441,423,452],
[470,0,443,420,473,389,451,436,412,438],
[488,448,0,459,493,466,437,446,457,462],
[441,471,432,0,466,413,460,465,445,468],
[420,418,398,425,0,401,449,437,402,466],
[450,502,425,478,490,0,473,490,418,479],
[444,440,454,431,442,418,0,447,472,467],
[450,455,445,426,454,401,444,0,428,459],
[468,479,434,446,489,473,419,463,0,479],
[439,453,429,423,425,412,424,432,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,425,447,455,444,427,434,450,439],
[431,0,424,442,440,453,409,413,413,403],
[466,467,0,440,452,447,444,450,441,410],
[444,449,451,0,467,416,428,422,422,418],
[436,451,439,424,0,440,410,422,401,396],
[447,438,444,475,451,0,437,418,443,419],
[464,482,447,463,481,454,0,456,458,439],
[457,478,441,469,469,473,435,0,442,415],
[441,478,450,469,490,448,433,449,0,457],
[452,488,481,473,495,472,452,476,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,425,454,432,448,445,403,470,515],
[486,0,467,508,472,442,425,512,461,529],
[466,424,0,475,499,497,426,460,440,470],
[437,383,416,0,405,417,440,444,439,488],
[459,419,392,486,0,443,385,433,414,458],
[443,449,394,474,448,0,454,449,392,478],
[446,466,465,451,506,437,0,468,454,521],
[488,379,431,447,458,442,423,0,434,524],
[421,430,451,452,477,499,437,457,0,502],
[376,362,421,403,433,413,370,367,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,452,433,434,412,427,451,417,437],
[461,0,476,439,435,439,437,429,454,442],
[439,415,0,503,437,450,486,450,446,469],
[458,452,388,0,425,433,445,408,460,420],
[457,456,454,466,0,466,497,405,440,498],
[479,452,441,458,425,0,458,470,465,479],
[464,454,405,446,394,433,0,434,429,437],
[440,462,441,483,486,421,457,0,422,481],
[474,437,445,431,451,426,462,469,0,506],
[454,449,422,471,393,412,454,410,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,486,465,461,442,468,472,459,454],
[437,0,468,448,473,456,459,468,441,459],
[405,423,0,435,452,418,417,425,430,433],
[426,443,456,0,470,449,417,459,434,446],
[430,418,439,421,0,426,446,442,448,444],
[449,435,473,442,465,0,440,450,440,449],
[423,432,474,474,445,451,0,461,424,435],
[419,423,466,432,449,441,430,0,417,427],
[432,450,461,457,443,451,467,474,0,465],
[437,432,458,445,447,442,456,464,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,446,408,445,423,454,459,437],
[446,0,447,455,441,434,450,447,463,434],
[448,444,0,473,437,449,432,477,476,454],
[445,436,418,0,414,454,424,457,447,424],
[483,450,454,477,0,458,439,476,466,480],
[446,457,442,437,433,0,465,474,449,456],
[468,441,459,467,452,426,0,448,443,449],
[437,444,414,434,415,417,443,0,436,416],
[432,428,415,444,425,442,448,455,0,439],
[454,457,437,467,411,435,442,475,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,460,435,461,441,429,446,427],
[450,0,473,484,441,484,463,450,441,442],
[447,418,0,463,435,442,431,441,436,449],
[431,407,428,0,397,428,417,440,413,412],
[456,450,456,494,0,470,461,445,458,463],
[430,407,449,463,421,0,441,431,443,418],
[450,428,460,474,430,450,0,440,454,437],
[462,441,450,451,446,460,451,0,457,427],
[445,450,455,478,433,448,437,434,0,438],
[464,449,442,479,428,473,454,464,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,473,537,470,427,471,480,491,497],
[409,0,410,501,463,406,432,465,458,439],
[418,481,0,508,420,418,416,469,420,420],
[354,390,383,0,401,360,360,404,393,369],
[421,428,471,490,0,406,420,461,460,412],
[464,485,473,531,485,0,461,470,506,444],
[420,459,475,531,471,430,0,477,472,455],
[411,426,422,487,430,421,414,0,431,410],
[400,433,471,498,431,385,419,460,0,430],
[394,452,471,522,479,447,436,481,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,479,434,438,446,436,451,447,462],
[457,0,460,444,444,468,456,468,448,445],
[412,431,0,394,404,427,408,424,438,435],
[457,447,497,0,434,423,424,473,455,460],
[453,447,487,457,0,457,421,451,466,447],
[445,423,464,468,434,0,425,445,458,453],
[455,435,483,467,470,466,0,462,464,471],
[440,423,467,418,440,446,429,0,456,461],
[444,443,453,436,425,433,427,435,0,459],
[429,446,456,431,444,438,420,430,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,399,398,435,415,439,450,415,445],
[482,0,443,461,482,500,449,494,474,478],
[492,448,0,477,441,473,443,484,449,474],
[493,430,414,0,424,426,451,475,451,465],
[456,409,450,467,0,462,431,467,446,457],
[476,391,418,465,429,0,435,467,421,468],
[452,442,448,440,460,456,0,481,453,470],
[441,397,407,416,424,424,410,0,408,399],
[476,417,442,440,445,470,438,483,0,442],
[446,413,417,426,434,423,421,492,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,335,449,443,429,475,459,429,411],
[426,0,379,369,464,397,427,426,381,472],
[556,512,0,454,551,463,437,432,406,559],
[442,522,437,0,486,398,443,458,440,503],
[448,427,340,405,0,466,451,418,417,508],
[462,494,428,493,425,0,496,426,446,521],
[416,464,454,448,440,395,0,415,385,494],
[432,465,459,433,473,465,476,0,385,488],
[462,510,485,451,474,445,506,506,0,523],
[480,419,332,388,383,370,397,403,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,452,453,442,450,451,442,438,442],
[434,0,456,434,449,447,439,447,444,432],
[439,435,0,435,452,440,458,416,441,449],
[438,457,456,0,466,454,455,443,457,459],
[449,442,439,425,0,448,446,423,427,460],
[441,444,451,437,443,0,428,428,424,450],
[440,452,433,436,445,463,0,430,452,470],
[449,444,475,448,468,463,461,0,464,472],
[453,447,450,434,464,467,439,427,0,454],
[449,459,442,432,431,441,421,419,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,446,457,433,465,463,461,460,486],
[457,0,438,475,462,470,477,452,428,477],
[445,453,0,456,442,476,452,451,420,483],
[434,416,435,0,412,455,445,438,421,444],
[458,429,449,479,0,459,460,473,456,482],
[426,421,415,436,432,0,416,421,426,437],
[428,414,439,446,431,475,0,448,428,461],
[430,439,440,453,418,470,443,0,435,441],
[431,463,471,470,435,465,463,456,0,478],
[405,414,408,447,409,454,430,450,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,439,444,471,443,470,449,444,442],
[425,0,435,423,456,451,462,437,429,445],
[452,456,0,452,467,452,475,433,455,463],
[447,468,439,0,451,449,456,449,449,432],
[420,435,424,440,0,420,455,420,426,441],
[448,440,439,442,471,0,458,430,435,429],
[421,429,416,435,436,433,0,421,420,432],
[442,454,458,442,471,461,470,0,441,471],
[447,462,436,442,465,456,471,450,0,447],
[449,446,428,459,450,462,459,420,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,481,472,431,455,475,444,466,459],
[455,0,465,486,425,494,479,452,430,438],
[410,426,0,459,444,439,442,434,404,446],
[419,405,432,0,448,456,478,415,430,408],
[460,466,447,443,0,454,473,446,457,451],
[436,397,452,435,437,0,464,437,422,418],
[416,412,449,413,418,427,0,434,397,409],
[447,439,457,476,445,454,457,0,459,427],
[425,461,487,461,434,469,494,432,0,451],
[432,453,445,483,440,473,482,464,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,469,477,497,511,441,492,492,457],
[391,0,452,434,434,415,419,450,454,416],
[422,439,0,417,435,461,425,450,453,390],
[414,457,474,0,448,443,427,465,444,401],
[394,457,456,443,0,429,406,460,423,396],
[380,476,430,448,462,0,423,465,462,429],
[450,472,466,464,485,468,0,486,476,423],
[399,441,441,426,431,426,405,0,455,388],
[399,437,438,447,468,429,415,436,0,416],
[434,475,501,490,495,462,468,503,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,465,492,419,418,433,447,428,421],
[455,0,440,507,444,451,456,447,464,462],
[426,451,0,483,460,471,435,417,462,435],
[399,384,408,0,391,390,373,388,391,381],
[472,447,431,500,0,446,446,443,464,456],
[473,440,420,501,445,0,434,435,451,432],
[458,435,456,518,445,457,0,446,457,459],
[444,444,474,503,448,456,445,0,458,449],
[463,427,429,500,427,440,434,433,0,444],
[470,429,456,510,435,459,432,442,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,457,355,406,572,361,649,456,430],
[363,0,431,381,380,429,454,455,335,334],
[434,460,0,530,358,506,411,480,437,458],
[536,510,361,0,431,529,460,555,557,458],
[485,511,533,460,0,652,486,628,510,435],
[319,462,385,362,239,0,316,529,363,358],
[530,437,480,431,405,575,0,574,412,480],
[242,436,411,336,263,362,317,0,362,361],
[435,556,454,334,381,528,479,529,0,455],
[461,557,433,433,456,533,411,530,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,434,452,443,440,438,420,419,463],
[443,0,436,450,445,430,423,427,420,439],
[457,455,0,463,444,448,459,446,454,475],
[439,441,428,0,431,436,435,421,449,459],
[448,446,447,460,0,440,439,434,441,447],
[451,461,443,455,451,0,442,443,455,464],
[453,468,432,456,452,449,0,443,447,459],
[471,464,445,470,457,448,448,0,460,459],
[472,471,437,442,450,436,444,431,0,460],
[428,452,416,432,444,427,432,432,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,447,439,453,446,440,453,435,461],
[436,0,443,435,444,450,430,455,444,448],
[444,448,0,436,449,456,437,475,437,444],
[452,456,455,0,451,461,465,470,441,453],
[438,447,442,440,0,466,443,475,445,460],
[445,441,435,430,425,0,416,443,423,435],
[451,461,454,426,448,475,0,456,459,467],
[438,436,416,421,416,448,435,0,420,435],
[456,447,454,450,446,468,432,471,0,468],
[430,443,447,438,431,456,424,456,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,452,446,438,474,462,432,452,464],
[458,0,459,440,419,453,440,448,450,465],
[439,432,0,442,450,462,455,453,436,448],
[445,451,449,0,445,459,456,442,474,467],
[453,472,441,446,0,448,465,454,461,487],
[417,438,429,432,443,0,444,439,449,455],
[429,451,436,435,426,447,0,417,458,424],
[459,443,438,449,437,452,474,0,444,444],
[439,441,455,417,430,442,433,447,0,445],
[427,426,443,424,404,436,467,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,434,442,466,456,442,434,452,466],
[433,0,423,442,436,434,437,432,449,450],
[457,468,0,451,476,432,459,461,459,456],
[449,449,440,0,451,432,433,418,437,444],
[425,455,415,440,0,420,419,415,417,444],
[435,457,459,459,471,0,459,454,456,493],
[449,454,432,458,472,432,0,446,447,450],
[457,459,430,473,476,437,445,0,431,467],
[439,442,432,454,474,435,444,460,0,474],
[425,441,435,447,447,398,441,424,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,454,478,449,465,454,474,429,457],
[439,0,493,462,431,434,432,431,395,438],
[437,398,0,443,417,445,403,419,422,427],
[413,429,448,0,444,454,422,450,435,433],
[442,460,474,447,0,467,417,473,446,458],
[426,457,446,437,424,0,452,471,428,469],
[437,459,488,469,474,439,0,493,443,485],
[417,460,472,441,418,420,398,0,396,415],
[462,496,469,456,445,463,448,495,0,490],
[434,453,464,458,433,422,406,476,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,424,437,409,438,437,460,445,449],
[445,0,439,456,461,449,442,469,459,469],
[467,452,0,468,439,442,451,495,457,462],
[454,435,423,0,439,428,442,478,451,464],
[482,430,452,452,0,456,455,485,451,482],
[453,442,449,463,435,0,450,431,440,444],
[454,449,440,449,436,441,0,473,450,468],
[431,422,396,413,406,460,418,0,417,449],
[446,432,434,440,440,451,441,474,0,436],
[442,422,429,427,409,447,423,442,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,454,468,438,499,430,447,444,434],
[416,0,453,442,424,453,453,466,432,425],
[437,438,0,436,455,460,454,435,430,439],
[423,449,455,0,429,457,452,449,446,441],
[453,467,436,462,0,484,454,453,434,446],
[392,438,431,434,407,0,414,440,438,426],
[461,438,437,439,437,477,0,452,431,438],
[444,425,456,442,438,451,439,0,446,431],
[447,459,461,445,457,453,460,445,0,418],
[457,466,452,450,445,465,453,460,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,480,448,426,484,450,448,462,436],
[426,0,459,415,417,423,415,410,449,416],
[411,432,0,419,431,424,463,444,419,421],
[443,476,472,0,462,492,478,472,472,478],
[465,474,460,429,0,476,481,448,433,424],
[407,468,467,399,415,0,433,420,412,430],
[441,476,428,413,410,458,0,449,448,421],
[443,481,447,419,443,471,442,0,433,442],
[429,442,472,419,458,479,443,458,0,421],
[455,475,470,413,467,461,470,449,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,451,448,450,446,432,431,470,446],
[445,0,484,447,469,471,470,448,473,443],
[440,407,0,429,434,439,458,430,459,429],
[443,444,462,0,443,447,453,468,491,433],
[441,422,457,448,0,425,429,417,454,430],
[445,420,452,444,466,0,451,463,484,431],
[459,421,433,438,462,440,0,448,480,424],
[460,443,461,423,474,428,443,0,475,453],
[421,418,432,400,437,407,411,416,0,421],
[445,448,462,458,461,460,467,438,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,446,467,438,481,473,450,446,489],
[442,0,420,445,413,464,459,459,423,467],
[445,471,0,515,456,483,476,479,446,480],
[424,446,376,0,449,469,463,448,402,454],
[453,478,435,442,0,457,458,463,444,473],
[410,427,408,422,434,0,422,451,414,458],
[418,432,415,428,433,469,0,437,437,457],
[441,432,412,443,428,440,454,0,423,485],
[445,468,445,489,447,477,454,468,0,483],
[402,424,411,437,418,433,434,406,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,468,433,464,482,493,472,472,494],
[407,0,424,461,442,472,486,451,457,467],
[423,467,0,422,458,438,471,437,465,473],
[458,430,469,0,452,488,467,447,462,505],
[427,449,433,439,0,497,497,474,479,494],
[409,419,453,403,394,0,464,430,451,485],
[398,405,420,424,394,427,0,424,420,455],
[419,440,454,444,417,461,467,0,449,428],
[419,434,426,429,412,440,471,442,0,453],
[397,424,418,386,397,406,436,463,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,450,433,442,457,429,442,424,438],
[445,0,431,437,448,459,447,439,447,458],
[441,460,0,444,438,477,436,441,459,432],
[458,454,447,0,457,459,439,439,409,419],
[449,443,453,434,0,456,463,450,411,440],
[434,432,414,432,435,0,436,450,430,416],
[462,444,455,452,428,455,0,477,446,440],
[449,452,450,452,441,441,414,0,448,438],
[467,444,432,482,480,461,445,443,0,488],
[453,433,459,472,451,475,451,453,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,418,432,419,443,422,426,422,431],
[471,0,456,431,457,471,452,440,432,439],
[473,435,0,448,437,464,464,440,434,449],
[459,460,443,0,454,459,450,447,448,444],
[472,434,454,437,0,464,436,436,430,439],
[448,420,427,432,427,0,438,442,422,446],
[469,439,427,441,455,453,0,448,432,449],
[465,451,451,444,455,449,443,0,427,459],
[469,459,457,443,461,469,459,464,0,461],
[460,452,442,447,452,445,442,432,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,457,491,476,434,464,464,452,464],
[403,0,407,423,411,403,427,420,399,413],
[434,484,0,489,445,455,467,458,436,481],
[400,468,402,0,422,401,422,423,412,424],
[415,480,446,469,0,405,463,442,405,457],
[457,488,436,490,486,0,448,483,420,458],
[427,464,424,469,428,443,0,428,409,442],
[427,471,433,468,449,408,463,0,431,445],
[439,492,455,479,486,471,482,460,0,469],
[427,478,410,467,434,433,449,446,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,424,435,402,429,448,461,456,414],
[475,0,473,430,455,504,475,473,470,460],
[467,418,0,458,431,467,454,467,462,493],
[456,461,433,0,415,485,454,460,455,439],
[489,436,460,476,0,466,451,460,488,476],
[462,387,424,406,425,0,459,447,418,435],
[443,416,437,437,440,432,0,468,436,457],
[430,418,424,431,431,444,423,0,422,423],
[435,421,429,436,403,473,455,469,0,448],
[477,431,398,452,415,456,434,468,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,451,459,453,415,444,460,480,463],
[447,0,443,465,428,445,483,440,454,447],
[440,448,0,457,470,415,478,455,428,454],
[432,426,434,0,406,408,432,449,451,443],
[438,463,421,485,0,454,464,461,442,433],
[476,446,476,483,437,0,436,463,446,460],
[447,408,413,459,427,455,0,446,433,420],
[431,451,436,442,430,428,445,0,447,455],
[411,437,463,440,449,445,458,444,0,445],
[428,444,437,448,458,431,471,436,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,465,451,454,462,464,476,490,434],
[429,0,466,440,416,432,448,433,460,417],
[426,425,0,431,399,438,443,443,459,404],
[440,451,460,0,433,449,478,452,442,424],
[437,475,492,458,0,476,476,453,464,461],
[429,459,453,442,415,0,431,450,444,414],
[427,443,448,413,415,460,0,444,448,418],
[415,458,448,439,438,441,447,0,458,428],
[401,431,432,449,427,447,443,433,0,419],
[457,474,487,467,430,477,473,463,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,470,433,479,452,466,440,453,430],
[446,0,455,434,464,466,460,446,443,436],
[421,436,0,415,439,429,433,428,421,412],
[458,457,476,0,475,475,473,450,449,442],
[412,427,452,416,0,444,444,442,402,419],
[439,425,462,416,447,0,437,438,442,426],
[425,431,458,418,447,454,0,417,414,434],
[451,445,463,441,449,453,474,0,449,449],
[438,448,470,442,489,449,477,442,0,435],
[461,455,479,449,472,465,457,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,453,447,436,452,457,446,420,495],
[463,0,473,470,441,479,462,437,456,517],
[438,418,0,460,447,449,453,440,417,479],
[444,421,431,0,423,478,431,428,415,477],
[455,450,444,468,0,455,465,417,426,515],
[439,412,442,413,436,0,465,392,418,497],
[434,429,438,460,426,426,0,416,435,487],
[445,454,451,463,474,499,475,0,435,502],
[471,435,474,476,465,473,456,456,0,516],
[396,374,412,414,376,394,404,389,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,447,451,423,426,442,468,424,444],
[463,0,454,460,436,444,464,484,466,465],
[444,437,0,466,427,458,462,488,434,446],
[440,431,425,0,405,421,462,449,423,419],
[468,455,464,486,0,440,480,475,451,441],
[465,447,433,470,451,0,469,446,455,454],
[449,427,429,429,411,422,0,432,416,418],
[423,407,403,442,416,445,459,0,422,397],
[467,425,457,468,440,436,475,469,0,457],
[447,426,445,472,450,437,473,494,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,413,409,393,418,401,411,421,428],
[457,0,441,412,391,451,443,425,400,481],
[478,450,0,447,456,390,465,459,423,460],
[482,479,444,0,441,422,452,466,447,474],
[498,500,435,450,0,442,487,466,469,499],
[473,440,501,469,449,0,464,471,478,463],
[490,448,426,439,404,427,0,462,424,440],
[480,466,432,425,425,420,429,0,445,468],
[470,491,468,444,422,413,467,446,0,462],
[463,410,431,417,392,428,451,423,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,434,429,426,420,458,403,413,449],
[426,0,444,435,452,422,441,418,428,420],
[457,447,0,434,450,424,429,413,422,422],
[462,456,457,0,445,448,428,461,448,425],
[465,439,441,446,0,450,433,437,434,424],
[471,469,467,443,441,0,410,452,454,461],
[433,450,462,463,458,481,0,453,442,455],
[488,473,478,430,454,439,438,0,461,424],
[478,463,469,443,457,437,449,430,0,463],
[442,471,469,466,467,430,436,467,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,433,449,448,457,459,434,472,481],
[435,0,431,452,432,451,448,446,497,476],
[458,460,0,475,441,455,450,455,451,462],
[442,439,416,0,438,421,411,427,455,462],
[443,459,450,453,0,420,411,467,459,485],
[434,440,436,470,471,0,440,432,448,472],
[432,443,441,480,480,451,0,437,471,452],
[457,445,436,464,424,459,454,0,451,463],
[419,394,440,436,432,443,420,440,0,419],
[410,415,429,429,406,419,439,428,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,408,506,564,483,433,459,609,433],
[435,0,207,355,334,406,356,358,434,257],
[483,684,0,479,484,610,456,432,558,457],
[385,536,412,0,436,538,430,411,431,411],
[327,557,407,455,0,453,455,531,482,279],
[408,485,281,353,438,0,457,382,455,310],
[458,535,435,461,436,434,0,485,508,332],
[432,533,459,480,360,509,406,0,405,485],
[282,457,333,460,409,436,383,486,0,358],
[458,634,434,480,612,581,559,406,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,456,457,431,468,438,441,456,461],
[456,0,450,432,413,461,439,420,460,427],
[435,441,0,424,430,464,423,405,437,425],
[434,459,467,0,433,466,470,417,449,456],
[460,478,461,458,0,496,443,448,487,462],
[423,430,427,425,395,0,423,390,432,422],
[453,452,468,421,448,468,0,425,473,447],
[450,471,486,474,443,501,466,0,467,465],
[435,431,454,442,404,459,418,424,0,431],
[430,464,466,435,429,469,444,426,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,421,427,423,435,432,455,436],
[437,0,448,428,440,450,436,403,456,441],
[436,443,0,448,424,436,435,436,451,424],
[470,463,443,0,450,457,445,468,451,474],
[464,451,467,441,0,452,420,452,473,455],
[468,441,455,434,439,0,434,427,457,433],
[456,455,456,446,471,457,0,444,477,455],
[459,488,455,423,439,464,447,0,477,444],
[436,435,440,440,418,434,414,414,0,411],
[455,450,467,417,436,458,436,447,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,426,436,437,445,449,443,447],
[435,0,455,424,437,413,425,432,437,427],
[449,436,0,432,450,433,453,450,446,454],
[465,467,459,0,455,447,453,439,447,453],
[455,454,441,436,0,448,446,436,436,457],
[454,478,458,444,443,0,453,465,456,461],
[446,466,438,438,445,438,0,464,443,448],
[442,459,441,452,455,426,427,0,430,452],
[448,454,445,444,455,435,448,461,0,442],
[444,464,437,438,434,430,443,439,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,431,476,485,442,476,477,465,455],
[439,0,411,440,440,447,451,454,467,438],
[460,480,0,445,457,460,446,472,475,451],
[415,451,446,0,451,450,439,454,453,439],
[406,451,434,440,0,461,430,456,454,435],
[449,444,431,441,430,0,442,440,450,430],
[415,440,445,452,461,449,0,466,471,440],
[414,437,419,437,435,451,425,0,451,422],
[426,424,416,438,437,441,420,440,0,439],
[436,453,440,452,456,461,451,469,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,466,453,460,428,461,432,433,458],
[433,0,451,434,465,425,433,432,441,451],
[425,440,0,427,460,433,439,424,432,439],
[438,457,464,0,441,443,447,427,437,434],
[431,426,431,450,0,427,436,402,432,440],
[463,466,458,448,464,0,451,437,438,439],
[430,458,452,444,455,440,0,434,418,437],
[459,459,467,464,489,454,457,0,452,437],
[458,450,459,454,459,453,473,439,0,434],
[433,440,452,457,451,452,454,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,438,451,478,464,450,451,459,424],
[427,0,425,416,441,438,452,446,428,423],
[453,466,0,445,485,456,455,464,432,447],
[440,475,446,0,481,444,453,469,458,452],
[413,450,406,410,0,441,431,443,440,432],
[427,453,435,447,450,0,430,447,443,445],
[441,439,436,438,460,461,0,459,456,445],
[440,445,427,422,448,444,432,0,447,445],
[432,463,459,433,451,448,435,444,0,427],
[467,468,444,439,459,446,446,446,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,436,441,437,452,413,444,422,437],
[459,0,443,458,462,463,435,447,433,466],
[455,448,0,440,451,439,445,451,440,457],
[450,433,451,0,452,447,419,450,437,449],
[454,429,440,439,0,439,439,446,427,437],
[439,428,452,444,452,0,426,437,431,428],
[478,456,446,472,452,465,0,438,461,473],
[447,444,440,441,445,454,453,0,435,450],
[469,458,451,454,464,460,430,456,0,476],
[454,425,434,442,454,463,418,441,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,450,471,451,433,427,442,460,421],
[448,0,438,440,445,446,427,455,461,460],
[441,453,0,445,443,409,457,430,451,441],
[420,451,446,0,435,417,435,449,448,442],
[440,446,448,456,0,451,425,468,478,468],
[458,445,482,474,440,0,456,438,460,421],
[464,464,434,456,466,435,0,442,470,443],
[449,436,461,442,423,453,449,0,465,418],
[431,430,440,443,413,431,421,426,0,424],
[470,431,450,449,423,470,448,473,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,423,452,443,419,482,413,449,437],
[465,0,431,451,452,418,463,416,463,425],
[468,460,0,469,453,425,456,438,449,414],
[439,440,422,0,458,436,432,446,460,440],
[448,439,438,433,0,437,470,435,463,432],
[472,473,466,455,454,0,484,444,493,470],
[409,428,435,459,421,407,0,413,432,425],
[478,475,453,445,456,447,478,0,480,438],
[442,428,442,431,428,398,459,411,0,447],
[454,466,477,451,459,421,466,453,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,475,444,460,477,458,436,477,439],
[442,0,486,469,461,498,462,451,461,453],
[416,405,0,419,427,431,420,410,426,428],
[447,422,472,0,451,480,454,450,466,463],
[431,430,464,440,0,462,438,430,444,436],
[414,393,460,411,429,0,446,423,429,428],
[433,429,471,437,453,445,0,424,448,457],
[455,440,481,441,461,468,467,0,458,470],
[414,430,465,425,447,462,443,433,0,446],
[452,438,463,428,455,463,434,421,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,426,456,475,489,411,415,462,454],
[452,0,445,440,432,410,481,479,446,359],
[465,446,0,434,386,449,494,455,515,382],
[435,451,457,0,448,411,552,518,520,428],
[416,459,505,443,0,403,501,482,495,400],
[402,481,442,480,488,0,522,455,512,440],
[480,410,397,339,390,369,0,409,398,347],
[476,412,436,373,409,436,482,0,486,408],
[429,445,376,371,396,379,493,405,0,347],
[437,532,509,463,491,451,544,483,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,442,449,452,479,430,424,452,445],
[415,0,422,442,461,466,431,430,436,426],
[449,469,0,441,469,485,443,433,456,458],
[442,449,450,0,472,446,445,438,440,426],
[439,430,422,419,0,468,418,422,438,413],
[412,425,406,445,423,0,404,386,404,444],
[461,460,448,446,473,487,0,466,438,452],
[467,461,458,453,469,505,425,0,457,450],
[439,455,435,451,453,487,453,434,0,444],
[446,465,433,465,478,447,439,441,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,450,477,448,448,459,461,466,460],
[447,0,446,435,443,431,446,451,462,455],
[441,445,0,455,465,428,463,439,452,429],
[414,456,436,0,429,435,423,432,449,454],
[443,448,426,462,0,432,452,441,457,451],
[443,460,463,456,459,0,471,445,472,462],
[432,445,428,468,439,420,0,438,442,444],
[430,440,452,459,450,446,453,0,461,441],
[425,429,439,442,434,419,449,430,0,422],
[431,436,462,437,440,429,447,450,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,465,461,452,463,445,459,432,453],
[422,0,439,455,474,455,445,433,449,462],
[426,452,0,443,433,436,450,457,468,446],
[430,436,448,0,445,453,436,451,464,469],
[439,417,458,446,0,448,442,465,449,441],
[428,436,455,438,443,0,440,440,460,450],
[446,446,441,455,449,451,0,460,463,473],
[432,458,434,440,426,451,431,0,445,440],
[459,442,423,427,442,431,428,446,0,455],
[438,429,445,422,450,441,418,451,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,426,445,430,424,428,468,504,446],
[459,0,439,434,446,429,442,473,472,435],
[465,452,0,477,476,415,420,454,474,439],
[446,457,414,0,477,441,452,456,445,460],
[461,445,415,414,0,446,414,449,468,420],
[467,462,476,450,445,0,467,487,489,470],
[463,449,471,439,477,424,0,483,472,463],
[423,418,437,435,442,404,408,0,469,438],
[387,419,417,446,423,402,419,422,0,425],
[445,456,452,431,471,421,428,453,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,438,428,463,455,416,430,433,432],
[440,0,433,419,456,408,438,416,457,455],
[453,458,0,431,452,435,436,436,463,421],
[463,472,460,0,461,459,428,428,483,454],
[428,435,439,430,0,431,420,428,446,426],
[436,483,456,432,460,0,428,449,446,436],
[475,453,455,463,471,463,0,428,456,413],
[461,475,455,463,463,442,463,0,486,439],
[458,434,428,408,445,445,435,405,0,431],
[459,436,470,437,465,455,478,452,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,402,442,441,434,423,447,420,459],
[466,0,436,450,454,444,422,446,448,454],
[489,455,0,480,459,480,451,455,436,461],
[449,441,411,0,427,445,414,442,423,457],
[450,437,432,464,0,475,421,449,452,459],
[457,447,411,446,416,0,449,437,430,446],
[468,469,440,477,470,442,0,479,448,466],
[444,445,436,449,442,454,412,0,448,451],
[471,443,455,468,439,461,443,443,0,462],
[432,437,430,434,432,445,425,440,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,477,498,402,486,499,475,462,446],
[415,0,409,415,445,397,437,431,409,410],
[414,482,0,473,437,514,468,476,492,455],
[393,476,418,0,392,533,473,422,429,456],
[489,446,454,499,0,499,485,460,428,459],
[405,494,377,358,392,0,437,441,401,404],
[392,454,423,418,406,454,0,421,441,427],
[416,460,415,469,431,450,470,0,432,433],
[429,482,399,462,463,490,450,459,0,445],
[445,481,436,435,432,487,464,458,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,470,434,427,438,435,465,409,422],
[469,0,450,427,423,465,443,474,451,428],
[421,441,0,423,428,431,417,430,413,420],
[457,464,468,0,463,449,441,481,451,468],
[464,468,463,428,0,450,443,470,454,457],
[453,426,460,442,441,0,437,432,429,441],
[456,448,474,450,448,454,0,462,431,443],
[426,417,461,410,421,459,429,0,429,401],
[482,440,478,440,437,462,460,462,0,453],
[469,463,471,423,434,450,448,490,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,578,542,503,654,387,542,466,546,391],
[313,0,311,346,422,350,469,273,350,392],
[349,580,0,350,579,276,467,389,548,391],
[388,545,541,0,577,509,582,348,584,428],
[237,469,312,314,0,276,470,158,357,390],
[504,541,615,382,615,0,582,385,620,583],
[349,422,424,309,421,309,0,156,352,349],
[425,618,502,543,733,506,735,0,546,541],
[345,541,343,307,534,271,539,345,0,463],
[500,499,500,463,501,308,542,350,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,465,496,429,424,424,448,444,428],
[411,0,420,414,402,417,384,417,431,431],
[426,471,0,440,399,412,398,415,417,404],
[395,477,451,0,416,429,423,423,425,420],
[462,489,492,475,0,438,451,444,470,498],
[467,474,479,462,453,0,438,467,473,447],
[467,507,493,468,440,453,0,471,493,476],
[443,474,476,468,447,424,420,0,457,441],
[447,460,474,466,421,418,398,434,0,430],
[463,460,487,471,393,444,415,450,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,410,400,438,408,431,438,410,425],
[481,0,456,425,477,438,431,432,447,450],
[481,435,0,423,425,429,459,448,427,446],
[491,466,468,0,469,407,460,445,483,451],
[453,414,466,422,0,417,445,432,408,457],
[483,453,462,484,474,0,477,442,466,485],
[460,460,432,431,446,414,0,440,440,456],
[453,459,443,446,459,449,451,0,466,445],
[481,444,464,408,483,425,451,425,0,428],
[466,441,445,440,434,406,435,446,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,571,458,618,518,567,511,403,542],
[405,0,567,459,592,597,517,455,512,543],
[320,324,0,482,510,515,462,431,323,351],
[433,432,409,0,485,544,462,458,379,571],
[273,299,381,406,0,438,466,326,323,383],
[373,294,376,347,453,0,322,318,213,379],
[324,374,429,429,425,569,0,402,348,486],
[380,436,460,433,565,573,489,0,458,544],
[488,379,568,512,568,678,543,433,0,488],
[349,348,540,320,508,512,405,347,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,448,443,435,446,424,413,463,475],
[404,0,437,414,426,394,397,410,411,427],
[443,454,0,442,462,426,411,436,440,462],
[448,477,449,0,438,416,434,450,443,459],
[456,465,429,453,0,438,446,450,432,467],
[445,497,465,475,453,0,449,450,458,467],
[467,494,480,457,445,442,0,458,459,473],
[478,481,455,441,441,441,433,0,462,456],
[428,480,451,448,459,433,432,429,0,472],
[416,464,429,432,424,424,418,435,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,432,474,478,495,484,461,465,504],
[395,0,436,411,475,476,422,428,414,435],
[459,455,0,401,491,490,466,456,441,459],
[417,480,490,0,508,462,458,439,407,480],
[413,416,400,383,0,479,442,433,400,393],
[396,415,401,429,412,0,424,416,396,457],
[407,469,425,433,449,467,0,467,366,415],
[430,463,435,452,458,475,424,0,393,470],
[426,477,450,484,491,495,525,498,0,444],
[387,456,432,411,498,434,476,421,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,423,422,397,370,449,429,427,421],
[542,0,482,483,430,451,448,472,457,499],
[468,409,0,486,450,413,410,478,453,481],
[469,408,405,0,449,456,464,447,438,483],
[494,461,441,442,0,410,478,452,436,507],
[521,440,478,435,481,0,490,500,463,490],
[442,443,481,427,413,401,0,525,459,453],
[462,419,413,444,439,391,366,0,378,487],
[464,434,438,453,455,428,432,513,0,478],
[470,392,410,408,384,401,438,404,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,419,367,408,359,422,471,359,391],
[470,0,462,439,347,364,368,531,402,480],
[472,429,0,407,449,398,451,555,453,450],
[524,452,484,0,450,418,482,540,432,449],
[483,544,442,441,0,372,464,584,376,452],
[532,527,493,473,519,0,449,567,411,568],
[469,523,440,409,427,442,0,520,485,464],
[420,360,336,351,307,324,371,0,346,390],
[532,489,438,459,515,480,406,545,0,493],
[500,411,441,442,439,323,427,501,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,457,465,460,447,447,494,452,441],
[436,0,427,444,422,425,439,451,438,434],
[434,464,0,438,449,441,435,469,438,441],
[426,447,453,0,460,462,459,484,473,446],
[431,469,442,431,0,451,434,462,451,437],
[444,466,450,429,440,0,443,470,459,423],
[444,452,456,432,457,448,0,463,463,458],
[397,440,422,407,429,421,428,0,430,416],
[439,453,453,418,440,432,428,461,0,417],
[450,457,450,445,454,468,433,475,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,420,434,453,476,462,447,443,461],
[498,0,445,464,430,476,471,450,426,435],
[471,446,0,419,446,487,454,451,446,463],
[457,427,472,0,474,458,443,463,434,472],
[438,461,445,417,0,438,459,411,415,425],
[415,415,404,433,453,0,406,426,423,444],
[429,420,437,448,432,485,0,427,411,471],
[444,441,440,428,480,465,464,0,413,449],
[448,465,445,457,476,468,480,478,0,450],
[430,456,428,419,466,447,420,442,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,442,518,462,503,484,467,459,435],
[462,0,458,514,486,500,460,476,469,421],
[449,433,0,538,485,495,466,492,466,483],
[373,377,353,0,372,439,389,389,351,388],
[429,405,406,519,0,450,455,441,428,410],
[388,391,396,452,441,0,428,426,434,387],
[407,431,425,502,436,463,0,448,464,418],
[424,415,399,502,450,465,443,0,455,423],
[432,422,425,540,463,457,427,436,0,394],
[456,470,408,503,481,504,473,468,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,417,413,430,432,452,462,417,441],
[447,0,462,431,431,469,446,477,459,444],
[474,429,0,448,435,464,424,473,457,419],
[478,460,443,0,447,469,473,500,460,487],
[461,460,456,444,0,481,458,486,471,477],
[459,422,427,422,410,0,423,446,435,418],
[439,445,467,418,433,468,0,463,428,438],
[429,414,418,391,405,445,428,0,434,409],
[474,432,434,431,420,456,463,457,0,473],
[450,447,472,404,414,473,453,482,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,469,501,498,472,454,487,437,463],
[437,0,477,501,477,455,454,472,465,460],
[422,414,0,433,410,462,433,455,411,473],
[390,390,458,0,472,434,439,464,427,466],
[393,414,481,419,0,434,442,482,432,460],
[419,436,429,457,457,0,438,458,441,479],
[437,437,458,452,449,453,0,438,443,457],
[404,419,436,427,409,433,453,0,440,447],
[454,426,480,464,459,450,448,451,0,464],
[428,431,418,425,431,412,434,444,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,470,488,444,489,451,487,453,441],
[405,0,396,449,428,423,405,411,431,411],
[421,495,0,453,428,451,429,429,440,423],
[403,442,438,0,438,437,407,416,416,405],
[447,463,463,453,0,454,439,431,408,456],
[402,468,440,454,437,0,431,414,443,468],
[440,486,462,484,452,460,0,450,448,467],
[404,480,462,475,460,477,441,0,446,450],
[438,460,451,475,483,448,443,445,0,465],
[450,480,468,486,435,423,424,441,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,425,435,421,406,480,443,381,427],
[435,0,450,455,437,441,460,395,444,411],
[466,441,0,455,473,448,412,438,450,391],
[456,436,436,0,471,448,488,454,435,453],
[470,454,418,420,0,450,492,425,412,439],
[485,450,443,443,441,0,420,433,474,426],
[411,431,479,403,399,471,0,418,400,423],
[448,496,453,437,466,458,473,0,422,486],
[510,447,441,456,479,417,491,469,0,439],
[464,480,500,438,452,465,468,405,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,398,396,397,418,461,417,500,352],
[582,0,527,376,458,543,501,563,584,501],
[493,364,0,436,436,519,497,537,643,433],
[495,515,455,0,436,580,459,459,581,450],
[494,433,455,455,0,497,395,559,494,473],
[473,348,372,311,394,0,437,522,541,433],
[430,390,394,432,496,454,0,492,601,367],
[474,328,354,432,332,369,399,0,520,289],
[391,307,248,310,397,350,290,371,0,329],
[539,390,458,441,418,458,524,602,562,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,485,457,410,421,415,441,463,426],
[432,0,464,431,426,431,385,443,456,403],
[406,427,0,461,419,407,426,396,442,405],
[434,460,430,0,407,403,421,416,435,423],
[481,465,472,484,0,430,464,453,475,447],
[470,460,484,488,461,0,438,441,486,461],
[476,506,465,470,427,453,0,443,471,467],
[450,448,495,475,438,450,448,0,478,450],
[428,435,449,456,416,405,420,413,0,409],
[465,488,486,468,444,430,424,441,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,491,411,443,464,508,410,456,419],
[469,0,474,461,510,464,468,423,522,450],
[400,417,0,403,410,387,450,411,419,418],
[480,430,488,0,507,459,448,456,512,515],
[448,381,481,384,0,468,480,413,452,404],
[427,427,504,432,423,0,501,436,448,399],
[383,423,441,443,411,390,0,416,450,421],
[481,468,480,435,478,455,475,0,429,486],
[435,369,472,379,439,443,441,462,0,459],
[472,441,473,376,487,492,470,405,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,478,480,483,469,484,461,431,451],
[448,0,454,481,488,483,479,425,457,471],
[413,437,0,506,479,440,466,448,430,478],
[411,410,385,0,464,397,457,354,377,405],
[408,403,412,427,0,410,486,369,379,416],
[422,408,451,494,481,0,506,447,451,489],
[407,412,425,434,405,385,0,398,357,427],
[430,466,443,537,522,444,493,0,492,478],
[460,434,461,514,512,440,534,399,0,460],
[440,420,413,486,475,402,464,413,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,438,445,443,459,411,433,446,456],
[463,0,428,461,433,482,427,451,448,462],
[453,463,0,464,450,445,448,448,459,449],
[446,430,427,0,445,464,424,454,435,457],
[448,458,441,446,0,462,452,464,438,467],
[432,409,446,427,429,0,408,427,403,454],
[480,464,443,467,439,483,0,460,451,473],
[458,440,443,437,427,464,431,0,432,461],
[445,443,432,456,453,488,440,459,0,473],
[435,429,442,434,424,437,418,430,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,422,407,427,479,491,437,442,508],
[478,0,446,501,542,500,459,470,439,540],
[469,445,0,521,522,506,503,513,449,532],
[484,390,370,0,507,479,415,366,377,469],
[464,349,369,384,0,416,407,337,359,377],
[412,391,385,412,475,0,426,389,366,504],
[400,432,388,476,484,465,0,454,430,449],
[454,421,378,525,554,502,437,0,423,524],
[449,452,442,514,532,525,461,468,0,526],
[383,351,359,422,514,387,442,367,365,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,437,458,447,444,460,451,471,438],
[445,0,418,428,439,441,429,445,445,420],
[454,473,0,450,431,453,434,447,474,457],
[433,463,441,0,435,439,449,468,456,438],
[444,452,460,456,0,467,454,466,453,438],
[447,450,438,452,424,0,419,442,477,447],
[431,462,457,442,437,472,0,445,462,427],
[440,446,444,423,425,449,446,0,477,430],
[420,446,417,435,438,414,429,414,0,402],
[453,471,434,453,453,444,464,461,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,450,448,419,538,517,474,464,476],
[420,0,431,381,416,412,481,372,436,487],
[441,460,0,413,381,465,439,467,430,470],
[443,510,478,0,468,469,477,450,448,530],
[472,475,510,423,0,478,465,453,455,486],
[353,479,426,422,413,0,474,427,428,420],
[374,410,452,414,426,417,0,411,424,402],
[417,519,424,441,438,464,480,0,465,509],
[427,455,461,443,436,463,467,426,0,445],
[415,404,421,361,405,471,489,382,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,427,382,443,445,432,411,422,410],
[423,0,434,401,402,425,406,424,437,415],
[464,457,0,383,426,458,427,417,452,403],
[509,490,508,0,488,494,466,480,469,445],
[448,489,465,403,0,430,425,430,469,430],
[446,466,433,397,461,0,419,396,483,431],
[459,485,464,425,466,472,0,436,495,434],
[480,467,474,411,461,495,455,0,489,462],
[469,454,439,422,422,408,396,402,0,431],
[481,476,488,446,461,460,457,429,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,476,487,446,447,484,433,469,439],
[421,0,472,442,423,419,425,406,440,395],
[415,419,0,413,419,425,411,433,444,419],
[404,449,478,0,446,431,455,418,454,417],
[445,468,472,445,0,442,463,439,440,440],
[444,472,466,460,449,0,450,455,483,451],
[407,466,480,436,428,441,0,428,469,426],
[458,485,458,473,452,436,463,0,455,427],
[422,451,447,437,451,408,422,436,0,439],
[452,496,472,474,451,440,465,464,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,461,455,420,468,460,456,477,429],
[447,0,488,458,447,472,495,463,480,436],
[430,403,0,402,427,407,435,414,438,410],
[436,433,489,0,432,469,489,463,467,467],
[471,444,464,459,0,455,469,467,492,439],
[423,419,484,422,436,0,460,430,457,442],
[431,396,456,402,422,431,0,441,436,424],
[435,428,477,428,424,461,450,0,453,432],
[414,411,453,424,399,434,455,438,0,422],
[462,455,481,424,452,449,467,459,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,442,458,430,437,484,460,464],
[440,0,455,459,460,460,419,440,428,463],
[451,436,0,457,460,441,429,450,439,451],
[449,432,434,0,456,431,425,464,431,437],
[433,431,431,435,0,429,412,436,460,445],
[461,431,450,460,462,0,466,488,483,482],
[454,472,462,466,479,425,0,491,483,498],
[407,451,441,427,455,403,400,0,474,436],
[431,463,452,460,431,408,408,417,0,455],
[427,428,440,454,446,409,393,455,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,439,463,427,422,429,419,442,434],
[462,0,476,478,458,487,453,437,470,472],
[452,415,0,450,412,411,409,423,430,427],
[428,413,441,0,427,427,433,401,424,427],
[464,433,479,464,0,439,459,429,472,462],
[469,404,480,464,452,0,444,459,435,467],
[462,438,482,458,432,447,0,434,458,444],
[472,454,468,490,462,432,457,0,446,474],
[449,421,461,467,419,456,433,445,0,453],
[457,419,464,464,429,424,447,417,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,442,455,414,396,422,443,410,446],
[441,0,431,421,444,417,435,436,438,441],
[449,460,0,437,436,445,426,446,452,457],
[436,470,454,0,445,432,438,440,446,457],
[477,447,455,446,0,434,453,451,457,483],
[495,474,446,459,457,0,460,450,442,469],
[469,456,465,453,438,431,0,463,417,470],
[448,455,445,451,440,441,428,0,422,455],
[481,453,439,445,434,449,474,469,0,470],
[445,450,434,434,408,422,421,436,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,432,432,443,448,438,438,472,425],
[452,0,427,458,432,440,442,441,457,417],
[459,464,0,449,442,461,460,444,473,432],
[459,433,442,0,472,462,445,437,464,442],
[448,459,449,419,0,454,425,454,465,454],
[443,451,430,429,437,0,453,449,477,421],
[453,449,431,446,466,438,0,454,466,425],
[453,450,447,454,437,442,437,0,462,441],
[419,434,418,427,426,414,425,429,0,424],
[466,474,459,449,437,470,466,450,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,416,437,440,427,443,465,448,439],
[419,0,423,437,452,437,424,465,451,430],
[475,468,0,439,454,452,456,497,444,462],
[454,454,452,0,456,425,459,469,456,466],
[451,439,437,435,0,438,452,476,457,433],
[464,454,439,466,453,0,451,490,455,461],
[448,467,435,432,439,440,0,491,426,435],
[426,426,394,422,415,401,400,0,424,447],
[443,440,447,435,434,436,465,467,0,454],
[452,461,429,425,458,430,456,444,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,472,422,470,483,471,457,442,453],
[426,0,439,428,442,449,469,399,462,435],
[419,452,0,409,417,462,425,424,445,444],
[469,463,482,0,469,490,469,456,445,477],
[421,449,474,422,0,456,468,440,451,477],
[408,442,429,401,435,0,444,412,425,441],
[420,422,466,422,423,447,0,413,439,447],
[434,492,467,435,451,479,478,0,437,469],
[449,429,446,446,440,466,452,454,0,438],
[438,456,447,414,414,450,444,422,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,447,480,436,434,460,470,434,455],
[444,0,449,466,487,476,455,500,480,441],
[444,442,0,408,440,437,408,444,445,411],
[411,425,483,0,430,438,451,426,426,416],
[455,404,451,461,0,449,425,475,459,428],
[457,415,454,453,442,0,426,441,433,427],
[431,436,483,440,466,465,0,482,477,422],
[421,391,447,465,416,450,409,0,423,405],
[457,411,446,465,432,458,414,468,0,442],
[436,450,480,475,463,464,469,486,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,396,431,433,420,426,431,408,454],
[451,0,435,451,466,410,443,439,430,453],
[495,456,0,448,475,438,466,462,438,461],
[460,440,443,0,461,421,457,440,429,456],
[458,425,416,430,0,417,423,445,408,433],
[471,481,453,470,474,0,472,466,439,476],
[465,448,425,434,468,419,0,431,439,470],
[460,452,429,451,446,425,460,0,446,440],
[483,461,453,462,483,452,452,445,0,472],
[437,438,430,435,458,415,421,451,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,452,458,453,477,469,470,446,454],
[448,0,416,446,446,467,450,444,429,435],
[439,475,0,452,454,464,466,467,449,463],
[433,445,439,0,444,453,449,451,438,434],
[438,445,437,447,0,448,457,443,443,429],
[414,424,427,438,443,0,461,465,431,423],
[422,441,425,442,434,430,0,434,440,425],
[421,447,424,440,448,426,457,0,435,437],
[445,462,442,453,448,460,451,456,0,445],
[437,456,428,457,462,468,466,454,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,420,448,452,454,399,449,456,472],
[475,0,449,457,477,404,446,452,458,460],
[471,442,0,464,445,450,426,486,480,493],
[443,434,427,0,406,422,441,448,457,492],
[439,414,446,485,0,424,410,465,445,470],
[437,487,441,469,467,0,429,445,446,502],
[492,445,465,450,481,462,0,459,460,512],
[442,439,405,443,426,446,432,0,451,442],
[435,433,411,434,446,445,431,440,0,468],
[419,431,398,399,421,389,379,449,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,477,439,435,475,435,480,429,457],
[457,0,443,444,438,454,408,449,451,460],
[414,448,0,455,427,481,445,459,428,442],
[452,447,436,0,443,456,406,496,421,458],
[456,453,464,448,0,464,427,462,422,447],
[416,437,410,435,427,0,435,451,414,440],
[456,483,446,485,464,456,0,456,421,469],
[411,442,432,395,429,440,435,0,427,465],
[462,440,463,470,469,477,470,464,0,455],
[434,431,449,433,444,451,422,426,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,426,448,428,434,413,425,446,445],
[467,0,450,451,454,427,445,440,431,456],
[465,441,0,450,444,425,449,446,444,453],
[443,440,441,0,460,440,419,442,438,438],
[463,437,447,431,0,422,423,444,421,449],
[457,464,466,451,469,0,442,461,448,462],
[478,446,442,472,468,449,0,475,429,476],
[466,451,445,449,447,430,416,0,440,456],
[445,460,447,453,470,443,462,451,0,476],
[446,435,438,453,442,429,415,435,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,433,449,415,450,464,444,439,445],
[456,0,432,450,453,458,424,471,432,447],
[458,459,0,439,469,450,452,478,459,447],
[442,441,452,0,441,454,441,477,448,433],
[476,438,422,450,0,474,444,450,436,432],
[441,433,441,437,417,0,443,449,418,420],
[427,467,439,450,447,448,0,454,438,460],
[447,420,413,414,441,442,437,0,399,443],
[452,459,432,443,455,473,453,492,0,446],
[446,444,444,458,459,471,431,448,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,495,500,444,447,482,456,514,491],
[390,0,451,446,410,483,460,423,438,458],
[396,440,0,406,446,458,465,451,470,488],
[391,445,485,0,455,443,473,408,447,466],
[447,481,445,436,0,474,492,459,465,497],
[444,408,433,448,417,0,458,439,489,473],
[409,431,426,418,399,433,0,410,454,421],
[435,468,440,483,432,452,481,0,444,492],
[377,453,421,444,426,402,437,447,0,481],
[400,433,403,425,394,418,470,399,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,442,450,454,447,439,442,444,453],
[417,0,440,466,472,446,471,416,463,459],
[449,451,0,425,434,428,468,424,443,469],
[441,425,466,0,487,472,468,453,473,460],
[437,419,457,404,0,404,448,402,453,444],
[444,445,463,419,487,0,458,420,444,489],
[452,420,423,423,443,433,0,420,431,466],
[449,475,467,438,489,471,471,0,456,489],
[447,428,448,418,438,447,460,435,0,427],
[438,432,422,431,447,402,425,402,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,441,481,443,465,451,441,451,458],
[437,0,428,472,445,463,434,431,433,418],
[450,463,0,471,462,445,443,422,475,464],
[410,419,420,0,434,440,469,421,422,430],
[448,446,429,457,0,426,439,416,440,430],
[426,428,446,451,465,0,457,420,451,450],
[440,457,448,422,452,434,0,447,454,426],
[450,460,469,470,475,471,444,0,436,459],
[440,458,416,469,451,440,437,455,0,436],
[433,473,427,461,461,441,465,432,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,457,413,425,440,445,428,437,420],
[469,0,464,464,442,448,458,461,449,445],
[434,427,0,457,431,420,444,424,437,414],
[478,427,434,0,441,449,460,449,447,428],
[466,449,460,450,0,447,442,473,440,434],
[451,443,471,442,444,0,449,472,446,446],
[446,433,447,431,449,442,0,443,426,417],
[463,430,467,442,418,419,448,0,446,441],
[454,442,454,444,451,445,465,445,0,428],
[471,446,477,463,457,445,474,450,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,432,465,454,443,470,448,454,474],
[441,0,453,471,445,451,447,492,453,472],
[459,438,0,454,440,439,467,482,455,467],
[426,420,437,0,415,422,456,443,434,464],
[437,446,451,476,0,429,456,436,444,458],
[448,440,452,469,462,0,471,479,454,476],
[421,444,424,435,435,420,0,454,424,454],
[443,399,409,448,455,412,437,0,432,455],
[437,438,436,457,447,437,467,459,0,462],
[417,419,424,427,433,415,437,436,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,397,362,400,435,417,394,401,397],
[478,0,463,423,449,522,464,426,470,461],
[494,428,0,446,481,530,472,459,480,473],
[529,468,445,0,490,524,475,473,460,512],
[491,442,410,401,0,465,471,424,457,473],
[456,369,361,367,426,0,450,400,432,405],
[474,427,419,416,420,441,0,431,465,441],
[497,465,432,418,467,491,460,0,473,464],
[490,421,411,431,434,459,426,418,0,449],
[494,430,418,379,418,486,450,427,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,461,452,436,447,433,490,459,471],
[455,0,462,447,438,449,458,474,490,463],
[430,429,0,443,455,463,459,477,462,473],
[439,444,448,0,443,433,451,458,461,475],
[455,453,436,448,0,435,447,451,473,470],
[444,442,428,458,456,0,432,467,464,449],
[458,433,432,440,444,459,0,473,476,462],
[401,417,414,433,440,424,418,0,424,448],
[432,401,429,430,418,427,415,467,0,439],
[420,428,418,416,421,442,429,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,423,428,468,418,383,451,429,454],
[444,0,448,448,478,414,413,459,417,461],
[468,443,0,421,442,430,404,434,468,447],
[463,443,470,0,487,419,400,423,458,446],
[423,413,449,404,0,451,398,419,427,431],
[473,477,461,472,440,0,444,464,475,439],
[508,478,487,491,493,447,0,448,477,440],
[440,432,457,468,472,427,443,0,466,445],
[462,474,423,433,464,416,414,425,0,471],
[437,430,444,445,460,452,451,446,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,469,463,438,456,452,482,462,473],
[429,0,439,416,391,437,414,459,433,433],
[422,452,0,416,432,440,440,464,458,436],
[428,475,475,0,445,473,417,454,476,449],
[453,500,459,446,0,452,430,480,476,443],
[435,454,451,418,439,0,435,463,443,458],
[439,477,451,474,461,456,0,468,466,455],
[409,432,427,437,411,428,423,0,440,437],
[429,458,433,415,415,448,425,451,0,426],
[418,458,455,442,448,433,436,454,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,417,436,413,433,482,424,451,424],
[447,0,432,453,433,454,480,443,458,432],
[474,459,0,419,466,473,515,450,483,463],
[455,438,472,0,445,477,496,458,447,457],
[478,458,425,446,0,468,512,464,465,451],
[458,437,418,414,423,0,475,439,430,412],
[409,411,376,395,379,416,0,403,426,387],
[467,448,441,433,427,452,488,0,481,433],
[440,433,408,444,426,461,465,410,0,415],
[467,459,428,434,440,479,504,458,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,425,450,462,438,442,428,420,418],
[409,0,398,434,457,425,432,424,415,416],
[466,493,0,481,487,465,474,466,441,437],
[441,457,410,0,440,424,449,425,414,428],
[429,434,404,451,0,425,438,428,415,406],
[453,466,426,467,466,0,458,428,436,434],
[449,459,417,442,453,433,0,418,421,437],
[463,467,425,466,463,463,473,0,428,446],
[471,476,450,477,476,455,470,463,0,427],
[473,475,454,463,485,457,454,445,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,448,442,467,440,463,435,443,432],
[475,0,466,490,460,455,456,433,461,473],
[443,425,0,423,424,420,422,429,426,418],
[449,401,468,0,448,427,432,448,431,432],
[424,431,467,443,0,426,429,441,430,438],
[451,436,471,464,465,0,438,456,441,462],
[428,435,469,459,462,453,0,439,450,451],
[456,458,462,443,450,435,452,0,442,435],
[448,430,465,460,461,450,441,449,0,477],
[459,418,473,459,453,429,440,456,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,441,468,457,453,466,435,443,468],
[441,0,439,465,428,424,466,442,431,451],
[450,452,0,453,443,436,452,433,434,441],
[423,426,438,0,427,416,449,422,421,446],
[434,463,448,464,0,445,464,422,436,462],
[438,467,455,475,446,0,461,450,452,468],
[425,425,439,442,427,430,0,421,422,439],
[456,449,458,469,469,441,470,0,445,472],
[448,460,457,470,455,439,469,446,0,469],
[423,440,450,445,429,423,452,419,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,488,442,450,456,466,476,471,493],
[407,0,432,394,417,472,439,446,420,432],
[403,459,0,432,440,433,450,478,427,433],
[449,497,459,0,424,469,481,480,426,520],
[441,474,451,467,0,467,478,457,472,510],
[435,419,458,422,424,0,426,442,422,476],
[425,452,441,410,413,465,0,451,423,471],
[415,445,413,411,434,449,440,0,417,465],
[420,471,464,465,419,469,468,474,0,484],
[398,459,458,371,381,415,420,426,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,448,417,445,467,472,453,438,413],
[399,0,445,405,449,447,389,463,434,450],
[443,446,0,437,415,457,409,482,447,453],
[474,486,454,0,447,414,467,455,480,444],
[446,442,476,444,0,448,415,449,449,477],
[424,444,434,477,443,0,487,448,472,456],
[419,502,482,424,476,404,0,499,475,478],
[438,428,409,436,442,443,392,0,447,442],
[453,457,444,411,442,419,416,444,0,455],
[478,441,438,447,414,435,413,449,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,434,433,456,464,406,426,457,467],
[463,0,423,462,476,488,483,434,450,453],
[457,468,0,438,454,466,467,437,478,431],
[458,429,453,0,463,475,430,419,445,457],
[435,415,437,428,0,425,425,420,464,424],
[427,403,425,416,466,0,433,446,460,467],
[485,408,424,461,466,458,0,411,459,445],
[465,457,454,472,471,445,480,0,503,515],
[434,441,413,446,427,431,432,388,0,454],
[424,438,460,434,467,424,446,376,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,452,443,436,456,425,437,441,429],
[444,0,419,457,431,440,425,450,463,437],
[439,472,0,457,438,444,421,481,455,466],
[448,434,434,0,438,460,446,450,462,439],
[455,460,453,453,0,464,457,428,471,447],
[435,451,447,431,427,0,437,450,447,444],
[466,466,470,445,434,454,0,455,491,468],
[454,441,410,441,463,441,436,0,462,414],
[450,428,436,429,420,444,400,429,0,445],
[462,454,425,452,444,447,423,477,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,450,454,435,434,436,423,438,456],
[456,0,448,444,422,448,420,433,448,444],
[441,443,0,433,420,445,458,422,448,444],
[437,447,458,0,434,453,452,430,456,473],
[456,469,471,457,0,466,459,450,456,440],
[457,443,446,438,425,0,432,432,446,443],
[455,471,433,439,432,459,0,455,465,439],
[468,458,469,461,441,459,436,0,479,450],
[453,443,443,435,435,445,426,412,0,415],
[435,447,447,418,451,448,452,441,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,437,413,431,436,442,457,425,463],
[466,0,443,455,460,494,441,465,470,480],
[454,448,0,423,442,443,442,468,472,483],
[478,436,468,0,458,470,441,473,472,486],
[460,431,449,433,0,450,442,446,429,462],
[455,397,448,421,441,0,451,448,441,463],
[449,450,449,450,449,440,0,448,451,483],
[434,426,423,418,445,443,443,0,445,450],
[466,421,419,419,462,450,440,446,0,442],
[428,411,408,405,429,428,408,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,441,451,439,440,435,432,441,445],
[446,0,431,442,433,418,437,437,455,468],
[450,460,0,423,443,446,430,443,451,451],
[440,449,468,0,454,440,458,461,452,441],
[452,458,448,437,0,449,430,463,423,457],
[451,473,445,451,442,0,449,440,422,451],
[456,454,461,433,461,442,0,447,451,463],
[459,454,448,430,428,451,444,0,461,448],
[450,436,440,439,468,469,440,430,0,446],
[446,423,440,450,434,440,428,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,442,476,442,482,502,465,436,512],
[405,0,434,446,386,431,452,397,399,452],
[449,457,0,457,467,408,459,395,443,481],
[415,445,434,0,389,367,399,381,383,430],
[449,505,424,502,0,464,441,472,470,477],
[409,460,483,524,427,0,500,432,499,497],
[389,439,432,492,450,391,0,402,435,433],
[426,494,496,510,419,459,489,0,456,509],
[455,492,448,508,421,392,456,435,0,487],
[379,439,410,461,414,394,458,382,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,430,426,447,417,418,399,429,414],
[457,0,434,457,419,433,435,434,438,420],
[461,457,0,452,460,427,428,432,449,443],
[465,434,439,0,438,412,438,411,444,418],
[444,472,431,453,0,442,436,433,447,448],
[474,458,464,479,449,0,441,450,457,450],
[473,456,463,453,455,450,0,444,477,465],
[492,457,459,480,458,441,447,0,470,438],
[462,453,442,447,444,434,414,421,0,433],
[477,471,448,473,443,441,426,453,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,438,443,436,405,430,426,452,438],
[477,0,473,443,454,460,440,472,481,446],
[453,418,0,438,432,449,455,472,485,461],
[448,448,453,0,399,452,457,446,469,464],
[455,437,459,492,0,447,454,450,506,459],
[486,431,442,439,444,0,468,441,463,469],
[461,451,436,434,437,423,0,439,467,424],
[465,419,419,445,441,450,452,0,467,455],
[439,410,406,422,385,428,424,424,0,446],
[453,445,430,427,432,422,467,436,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,470,448,433,435,465,453,447,432],
[452,0,464,477,454,466,442,458,464,455],
[421,427,0,442,426,449,432,458,458,455],
[443,414,449,0,438,450,421,443,441,426],
[458,437,465,453,0,457,440,448,462,452],
[456,425,442,441,434,0,424,459,424,441],
[426,449,459,470,451,467,0,454,458,445],
[438,433,433,448,443,432,437,0,436,425],
[444,427,433,450,429,467,433,455,0,427],
[459,436,436,465,439,450,446,466,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,426,442,437,404,454,428,422,423],
[461,0,444,468,471,461,476,466,463,445],
[465,447,0,448,447,436,461,463,447,459],
[449,423,443,0,448,438,454,466,425,456],
[454,420,444,443,0,431,460,426,421,434],
[487,430,455,453,460,0,490,457,451,472],
[437,415,430,437,431,401,0,402,421,423],
[463,425,428,425,465,434,489,0,439,467],
[469,428,444,466,470,440,470,452,0,459],
[468,446,432,435,457,419,468,424,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,454,447,424,438,441,457,452,439],
[417,0,455,458,426,421,459,407,442,444],
[437,436,0,440,420,450,429,427,461,411],
[444,433,451,0,418,442,430,403,442,441],
[467,465,471,473,0,442,456,433,461,464],
[453,470,441,449,449,0,423,433,463,452],
[450,432,462,461,435,468,0,434,467,448],
[434,484,464,488,458,458,457,0,474,484],
[439,449,430,449,430,428,424,417,0,431],
[452,447,480,450,427,439,443,407,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,425,443,458,477,434,459,434,428],
[463,0,443,452,457,468,435,469,453,463],
[466,448,0,447,476,464,427,466,458,438],
[448,439,444,0,477,472,469,478,452,440],
[433,434,415,414,0,442,401,431,440,441],
[414,423,427,419,449,0,435,456,424,411],
[457,456,464,422,490,456,0,457,454,444],
[432,422,425,413,460,435,434,0,432,419],
[457,438,433,439,451,467,437,459,0,439],
[463,428,453,451,450,480,447,472,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,445,436,438,476,426,437,433,446],
[396,0,435,420,394,419,442,420,397,402],
[446,456,0,436,404,449,448,443,420,417],
[455,471,455,0,424,479,436,443,454,437],
[453,497,487,467,0,489,482,476,440,466],
[415,472,442,412,402,0,464,419,433,425],
[465,449,443,455,409,427,0,424,411,411],
[454,471,448,448,415,472,467,0,423,440],
[458,494,471,437,451,458,480,468,0,462],
[445,489,474,454,425,466,480,451,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,463,460,480,460,466,427,451,472],
[444,0,446,438,456,437,450,443,454,474],
[428,445,0,443,452,427,436,440,453,433],
[431,453,448,0,472,429,444,437,441,464],
[411,435,439,419,0,405,430,421,418,446],
[431,454,464,462,486,0,445,442,438,487],
[425,441,455,447,461,446,0,471,464,442],
[464,448,451,454,470,449,420,0,413,443],
[440,437,438,450,473,453,427,478,0,466],
[419,417,458,427,445,404,449,448,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,446,470,473,496,439,450,447,462],
[416,0,423,451,446,454,426,424,403,441],
[445,468,0,444,441,482,464,456,444,462],
[421,440,447,0,455,435,416,434,426,469],
[418,445,450,436,0,451,405,432,420,432],
[395,437,409,456,440,0,402,438,412,442],
[452,465,427,475,486,489,0,463,437,469],
[441,467,435,457,459,453,428,0,446,450],
[444,488,447,465,471,479,454,445,0,459],
[429,450,429,422,459,449,422,441,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,438,424,461,438,435,435,442,417],
[447,0,431,414,459,434,448,431,440,431],
[453,460,0,441,455,430,453,434,455,461],
[467,477,450,0,476,438,461,438,467,450],
[430,432,436,415,0,410,398,434,426,413],
[453,457,461,453,481,0,442,447,460,452],
[456,443,438,430,493,449,0,430,441,427],
[456,460,457,453,457,444,461,0,455,437],
[449,451,436,424,465,431,450,436,0,429],
[474,460,430,441,478,439,464,454,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,433,432,446,439,436,414,416,425],
[482,0,462,439,448,484,463,462,476,466],
[458,429,0,437,447,461,429,445,423,448],
[459,452,454,0,455,447,439,436,452,450],
[445,443,444,436,0,465,451,450,445,439],
[452,407,430,444,426,0,420,428,436,438],
[455,428,462,452,440,471,0,450,454,431],
[477,429,446,455,441,463,441,0,458,455],
[475,415,468,439,446,455,437,433,0,441],
[466,425,443,441,452,453,460,436,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,461,417,440,440,447,465,433,450],
[454,0,447,421,442,449,439,445,459,460],
[430,444,0,437,436,435,448,447,468,437],
[474,470,454,0,448,445,469,454,463,448],
[451,449,455,443,0,436,464,463,437,433],
[451,442,456,446,455,0,461,444,446,436],
[444,452,443,422,427,430,0,451,435,408],
[426,446,444,437,428,447,440,0,433,436],
[458,432,423,428,454,445,456,458,0,444],
[441,431,454,443,458,455,483,455,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,448,487,455,379,475,444,474,460],
[443,0,424,470,453,447,448,467,434,439],
[443,467,0,453,461,440,483,440,429,446],
[404,421,438,0,419,408,437,425,433,412],
[436,438,430,472,0,401,469,457,446,427],
[512,444,451,483,490,0,490,453,487,451],
[416,443,408,454,422,401,0,432,456,427],
[447,424,451,466,434,438,459,0,457,424],
[417,457,462,458,445,404,435,434,0,450],
[431,452,445,479,464,440,464,467,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,505,487,544,412,509,512,511,453],
[413,0,507,471,435,378,382,422,508,401],
[386,384,0,420,454,469,495,426,512,405],
[404,420,471,0,419,418,417,404,497,406],
[347,456,437,472,0,382,366,424,494,368],
[479,513,422,473,509,0,440,421,458,386],
[382,509,396,474,525,451,0,513,508,437],
[379,469,465,487,467,470,378,0,492,421],
[380,383,379,394,397,433,383,399,0,384],
[438,490,486,485,523,505,454,470,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,455,438,459,448,456,423,452,444],
[434,0,446,440,435,436,445,436,419,444],
[436,445,0,421,428,436,437,431,404,418],
[453,451,470,0,442,464,453,415,421,454],
[432,456,463,449,0,437,454,432,410,455],
[443,455,455,427,454,0,454,410,413,440],
[435,446,454,438,437,437,0,403,416,458],
[468,455,460,476,459,481,488,0,432,466],
[439,472,487,470,481,478,475,459,0,471],
[447,447,473,437,436,451,433,425,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,433,438,436,421,445,421,447,399],
[477,0,471,477,479,445,434,457,467,443],
[458,420,0,455,462,447,452,459,428,445],
[453,414,436,0,455,425,430,442,407,417],
[455,412,429,436,0,432,428,403,412,434],
[470,446,444,466,459,0,458,441,452,445],
[446,457,439,461,463,433,0,462,430,451],
[470,434,432,449,488,450,429,0,453,448],
[444,424,463,484,479,439,461,438,0,465],
[492,448,446,474,457,446,440,443,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,461,463,476,441,457,433,460,452],
[430,0,447,419,445,442,437,418,438,425],
[430,444,0,425,431,418,433,405,414,414],
[428,472,466,0,452,437,467,456,469,485],
[415,446,460,439,0,460,437,417,465,458],
[450,449,473,454,431,0,455,432,470,477],
[434,454,458,424,454,436,0,441,449,465],
[458,473,486,435,474,459,450,0,451,472],
[431,453,477,422,426,421,442,440,0,437],
[439,466,477,406,433,414,426,419,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,499,484,466,443,433,455,476,448],
[432,0,440,438,456,429,443,456,441,456],
[392,451,0,451,444,437,414,428,463,433],
[407,453,440,0,416,421,447,439,443,478],
[425,435,447,475,0,450,415,472,457,461],
[448,462,454,470,441,0,438,467,430,453],
[458,448,477,444,476,453,0,459,454,478],
[436,435,463,452,419,424,432,0,449,456],
[415,450,428,448,434,461,437,442,0,455],
[443,435,458,413,430,438,413,435,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,434,457,464,466,444,452,467,460],
[423,0,444,434,429,444,424,424,443,421],
[457,447,0,436,425,468,439,451,451,465],
[434,457,455,0,453,446,456,447,456,465],
[427,462,466,438,0,465,448,434,451,460],
[425,447,423,445,426,0,419,445,429,437],
[447,467,452,435,443,472,0,434,476,478],
[439,467,440,444,457,446,457,0,442,460],
[424,448,440,435,440,462,415,449,0,458],
[431,470,426,426,431,454,413,431,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,443,487,464,451,463,459,448,478],
[442,0,421,457,447,436,459,433,440,447],
[448,470,0,451,459,471,454,478,442,453],
[404,434,440,0,443,439,444,418,412,439],
[427,444,432,448,0,432,437,449,426,444],
[440,455,420,452,459,0,448,450,449,448],
[428,432,437,447,454,443,0,455,423,452],
[432,458,413,473,442,441,436,0,448,464],
[443,451,449,479,465,442,468,443,0,450],
[413,444,438,452,447,443,439,427,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,448,498,456,445,462,442,463,451],
[468,0,450,444,430,450,421,394,442,421],
[443,441,0,454,459,422,435,464,453,417],
[393,447,437,0,423,428,403,401,413,371],
[435,461,432,468,0,445,445,431,455,395],
[446,441,469,463,446,0,434,468,457,422],
[429,470,456,488,446,457,0,478,464,414],
[449,497,427,490,460,423,413,0,454,450],
[428,449,438,478,436,434,427,437,0,401],
[440,470,474,520,496,469,477,441,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,449,458,430,466,440,451,455,454],
[435,0,441,442,437,453,421,440,434,437],
[442,450,0,467,425,470,447,448,444,442],
[433,449,424,0,441,467,440,455,446,451],
[461,454,466,450,0,456,431,467,472,469],
[425,438,421,424,435,0,399,442,433,428],
[451,470,444,451,460,492,0,468,475,455],
[440,451,443,436,424,449,423,0,442,451],
[436,457,447,445,419,458,416,449,0,453],
[437,454,449,440,422,463,436,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,427,462,451,430,497,428,443,469],
[425,0,462,460,489,434,495,473,467,505],
[464,429,0,469,450,450,501,449,472,489],
[429,431,422,0,487,433,447,390,406,460],
[440,402,441,404,0,407,466,430,436,465],
[461,457,441,458,484,0,509,447,467,462],
[394,396,390,444,425,382,0,393,398,438],
[463,418,442,501,461,444,498,0,454,446],
[448,424,419,485,455,424,493,437,0,478],
[422,386,402,431,426,429,453,445,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,481,435,477,433,443,429,398,451],
[453,0,454,471,511,454,463,489,422,457],
[410,437,0,427,479,421,431,440,406,465],
[456,420,464,0,443,408,457,467,436,442],
[414,380,412,448,0,380,395,414,373,417],
[458,437,470,483,511,0,424,468,458,465],
[448,428,460,434,496,467,0,480,435,489],
[462,402,451,424,477,423,411,0,416,456],
[493,469,485,455,518,433,456,475,0,471],
[440,434,426,449,474,426,402,435,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,461,419,427,437,435,418,429,420],
[452,0,460,444,443,452,441,449,461,432],
[430,431,0,434,438,428,437,435,449,427],
[472,447,457,0,454,441,418,442,443,442],
[464,448,453,437,0,451,460,450,462,444],
[454,439,463,450,440,0,445,444,469,435],
[456,450,454,473,431,446,0,439,463,452],
[473,442,456,449,441,447,452,0,464,428],
[462,430,442,448,429,422,428,427,0,425],
[471,459,464,449,447,456,439,463,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,465,439,456,441,456,437,448,458],
[444,0,466,444,454,426,457,433,469,477],
[426,425,0,408,434,434,430,432,421,444],
[452,447,483,0,447,431,465,440,429,447],
[435,437,457,444,0,465,446,468,444,449],
[450,465,457,460,426,0,461,437,470,481],
[435,434,461,426,445,430,0,430,447,449],
[454,458,459,451,423,454,461,0,448,426],
[443,422,470,462,447,421,444,443,0,439],
[433,414,447,444,442,410,442,465,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,444,425,423,437,433,451,448],
[449,0,450,453,442,434,446,448,451,446],
[446,441,0,454,443,425,439,456,437,455],
[447,438,437,0,421,427,444,440,427,432],
[466,449,448,470,0,447,445,460,436,464],
[468,457,466,464,444,0,464,453,443,467],
[454,445,452,447,446,427,0,449,427,442],
[458,443,435,451,431,438,442,0,420,428],
[440,440,454,464,455,448,464,471,0,466],
[443,445,436,459,427,424,449,463,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,436,457,500,480,522,522,457,503],
[433,0,435,459,370,435,479,547,373,392],
[455,456,0,479,519,454,500,501,458,435],
[434,432,412,0,455,391,542,545,456,458],
[391,521,372,436,0,368,457,479,413,481],
[411,456,437,500,523,0,498,502,482,480],
[369,412,391,349,434,393,0,502,437,522],
[369,344,390,346,412,389,389,0,435,283],
[434,518,433,435,478,409,454,456,0,436],
[388,499,456,433,410,411,369,608,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,432,425,426,452,435,454,449,448],
[455,0,458,454,445,474,433,453,457,464],
[459,433,0,427,439,457,431,447,440,460],
[466,437,464,0,459,488,454,465,471,455],
[465,446,452,432,0,477,421,457,458,475],
[439,417,434,403,414,0,410,425,436,439],
[456,458,460,437,470,481,0,456,446,464],
[437,438,444,426,434,466,435,0,451,447],
[442,434,451,420,433,455,445,440,0,448],
[443,427,431,436,416,452,427,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,442,465,438,473,435,436,431,430],
[451,0,463,482,456,439,435,464,436,458],
[449,428,0,442,422,424,430,442,440,441],
[426,409,449,0,406,456,408,423,418,428],
[453,435,469,485,0,433,439,450,446,468],
[418,452,467,435,458,0,449,437,459,444],
[456,456,461,483,452,442,0,452,422,449],
[455,427,449,468,441,454,439,0,453,433],
[460,455,451,473,445,432,469,438,0,446],
[461,433,450,463,423,447,442,458,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,450,444,462,437,433,456,456,443],
[436,0,453,458,461,448,433,456,440,438],
[441,438,0,447,460,423,428,477,418,441],
[447,433,444,0,466,432,429,458,420,432],
[429,430,431,425,0,440,426,435,424,428],
[454,443,468,459,451,0,422,441,416,452],
[458,458,463,462,465,469,0,475,440,474],
[435,435,414,433,456,450,416,0,438,430],
[435,451,473,471,467,475,451,453,0,460],
[448,453,450,459,463,439,417,461,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,438,450,484,470,427,476,408,438],
[437,0,484,474,473,462,461,489,447,430],
[453,407,0,443,448,467,422,470,413,428],
[441,417,448,0,466,458,430,474,426,436],
[407,418,443,425,0,434,404,437,421,425],
[421,429,424,433,457,0,419,467,405,443],
[464,430,469,461,487,472,0,504,440,459],
[415,402,421,417,454,424,387,0,398,416],
[483,444,478,465,470,486,451,493,0,446],
[453,461,463,455,466,448,432,475,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,463,451,450,477,467,450,445,452],
[457,0,451,438,450,464,451,431,460,441],
[428,440,0,437,464,466,440,438,419,411],
[440,453,454,0,442,481,491,452,433,419],
[441,441,427,449,0,487,459,451,435,434],
[414,427,425,410,404,0,428,413,411,447],
[424,440,451,400,432,463,0,441,448,429],
[441,460,453,439,440,478,450,0,451,435],
[446,431,472,458,456,480,443,440,0,436],
[439,450,480,472,457,444,462,456,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,438,434,422,442,467,446,417,451],
[461,0,454,446,425,451,466,478,463,474],
[453,437,0,449,423,453,440,464,442,464],
[457,445,442,0,437,464,469,460,440,441],
[469,466,468,454,0,466,481,489,439,467],
[449,440,438,427,425,0,451,462,422,448],
[424,425,451,422,410,440,0,437,423,436],
[445,413,427,431,402,429,454,0,430,417],
[474,428,449,451,452,469,468,461,0,471],
[440,417,427,450,424,443,455,474,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,404,455,425,414,462,411,442,435],
[473,0,460,502,492,411,523,513,475,482],
[487,431,0,470,443,436,489,448,448,422],
[436,389,421,0,386,421,466,459,446,433],
[466,399,448,505,0,454,481,445,417,461],
[477,480,455,470,437,0,522,483,442,486],
[429,368,402,425,410,369,0,421,415,415],
[480,378,443,432,446,408,470,0,428,428],
[449,416,443,445,474,449,476,463,0,472],
[456,409,469,458,430,405,476,463,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,431,406,417,417,406,405,431,443],
[444,0,445,402,414,407,414,422,430,462],
[460,446,0,387,422,396,393,420,447,452],
[485,489,504,0,446,439,461,474,491,495],
[474,477,469,445,0,438,449,437,467,483],
[474,484,495,452,453,0,428,468,458,465],
[485,477,498,430,442,463,0,452,485,473],
[486,469,471,417,454,423,439,0,457,458],
[460,461,444,400,424,433,406,434,0,449],
[448,429,439,396,408,426,418,433,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,430,444,431,449,441,463,421,444],
[457,0,437,443,461,464,431,473,434,448],
[461,454,0,478,455,444,448,487,442,465],
[447,448,413,0,439,462,405,463,445,446],
[460,430,436,452,0,448,413,462,435,426],
[442,427,447,429,443,0,448,467,436,457],
[450,460,443,486,478,443,0,469,446,453],
[428,418,404,428,429,424,422,0,420,423],
[470,457,449,446,456,455,445,471,0,439],
[447,443,426,445,465,434,438,468,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,453,434,448,471,466,450,456,471],
[441,0,450,442,452,466,488,440,455,492],
[438,441,0,420,413,456,433,436,446,488],
[457,449,471,0,454,462,461,445,448,485],
[443,439,478,437,0,485,448,455,460,462],
[420,425,435,429,406,0,413,444,446,475],
[425,403,458,430,443,478,0,446,453,483],
[441,451,455,446,436,447,445,0,459,475],
[435,436,445,443,431,445,438,432,0,469],
[420,399,403,406,429,416,408,416,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,424,445,428,438,455,432,432,424],
[458,0,441,443,441,466,444,452,439,451],
[467,450,0,459,453,474,458,446,440,452],
[446,448,432,0,452,439,441,421,428,412],
[463,450,438,439,0,440,465,456,445,416],
[453,425,417,452,451,0,440,441,435,433],
[436,447,433,450,426,451,0,458,433,413],
[459,439,445,470,435,450,433,0,445,447],
[459,452,451,463,446,456,458,446,0,424],
[467,440,439,479,475,458,478,444,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,438,452,427,463,451,462,456,459],
[479,0,444,452,430,471,489,479,477,468],
[453,447,0,425,442,455,455,444,459,451],
[439,439,466,0,448,446,467,466,478,462],
[464,461,449,443,0,458,475,470,457,468],
[428,420,436,445,433,0,446,451,422,425],
[440,402,436,424,416,445,0,443,433,433],
[429,412,447,425,421,440,448,0,449,426],
[435,414,432,413,434,469,458,442,0,436],
[432,423,440,429,423,466,458,465,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,460,433,441,439,429,434,429,434],
[437,0,470,443,483,438,460,448,463,476],
[431,421,0,431,431,422,441,403,433,424],
[458,448,460,0,466,425,448,429,418,441],
[450,408,460,425,0,426,414,432,433,415],
[452,453,469,466,465,0,465,459,461,430],
[462,431,450,443,477,426,0,446,443,431],
[457,443,488,462,459,432,445,0,418,427],
[462,428,458,473,458,430,448,473,0,430],
[457,415,467,450,476,461,460,464,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,507,509,445,444,511,443,382,447],
[510,0,572,573,446,318,702,508,447,447],
[384,319,0,384,448,255,448,380,448,256],
[382,318,507,0,255,320,510,445,255,318],
[446,445,443,636,0,255,637,443,511,381],
[447,573,636,571,636,0,575,443,573,447],
[380,189,443,381,254,316,0,379,191,381],
[448,383,511,446,448,448,512,0,448,257],
[509,444,443,636,380,318,700,443,0,445],
[444,444,635,573,510,444,510,634,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,443,467,460,445,455,463,433,452],
[403,0,456,458,444,433,458,457,418,446],
[448,435,0,445,446,434,451,456,438,450],
[424,433,446,0,443,440,450,430,424,426],
[431,447,445,448,0,427,427,449,421,404],
[446,458,457,451,464,0,449,452,420,434],
[436,433,440,441,464,442,0,461,456,443],
[428,434,435,461,442,439,430,0,419,447],
[458,473,453,467,470,471,435,472,0,474],
[439,445,441,465,487,457,448,444,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,412,447,451,433,466,462,444,461],
[456,0,435,465,433,473,456,470,446,481],
[479,456,0,471,462,436,466,487,496,494],
[444,426,420,0,417,432,433,421,447,463],
[440,458,429,474,0,443,446,436,440,470],
[458,418,455,459,448,0,432,431,451,448],
[425,435,425,458,445,459,0,456,461,462],
[429,421,404,470,455,460,435,0,473,453],
[447,445,395,444,451,440,430,418,0,448],
[430,410,397,428,421,443,429,438,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,503,468,485,462,464,513,447,443],
[483,0,505,439,487,437,443,495,457,488],
[388,386,0,375,428,422,454,452,413,449],
[423,452,516,0,480,443,384,466,425,438],
[406,404,463,411,0,414,405,476,417,425],
[429,454,469,448,477,0,429,421,376,470],
[427,448,437,507,486,462,0,499,423,468],
[378,396,439,425,415,470,392,0,364,414],
[444,434,478,466,474,515,468,527,0,502],
[448,403,442,453,466,421,423,477,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,428,430,413,452,420,425,428,437],
[468,0,454,453,448,456,440,430,441,448],
[463,437,0,429,444,457,433,455,451,441],
[461,438,462,0,441,443,440,451,434,438],
[478,443,447,450,0,451,458,432,447,439],
[439,435,434,448,440,0,424,432,425,431],
[471,451,458,451,433,467,0,438,433,459],
[466,461,436,440,459,459,453,0,432,444],
[463,450,440,457,444,466,458,459,0,436],
[454,443,450,453,452,460,432,447,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,463,476,441,440,464,452,442,450],
[443,0,448,452,455,439,474,444,447,443],
[428,443,0,422,435,423,458,434,412,436],
[415,439,469,0,446,427,462,452,440,432],
[450,436,456,445,0,439,418,465,456,445],
[451,452,468,464,452,0,455,467,441,446],
[427,417,433,429,473,436,0,460,436,446],
[439,447,457,439,426,424,431,0,421,428],
[449,444,479,451,435,450,455,470,0,432],
[441,448,455,459,446,445,445,463,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,437,451,447,437,484,414,439,422],
[469,0,455,475,467,434,495,460,455,461],
[454,436,0,444,484,445,495,424,443,465],
[440,416,447,0,470,418,455,427,445,425],
[444,424,407,421,0,384,436,397,393,431],
[454,457,446,473,507,0,494,456,459,443],
[407,396,396,436,455,397,0,411,403,395],
[477,431,467,464,494,435,480,0,472,453],
[452,436,448,446,498,432,488,419,0,445],
[469,430,426,466,460,448,496,438,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,353,379,420,442,407,402,410,404],
[516,0,453,437,431,391,471,422,470,418],
[538,438,0,432,509,412,444,449,467,454],
[512,454,459,0,506,448,494,447,465,403],
[471,460,382,385,0,429,491,377,424,393],
[449,500,479,443,462,0,486,459,496,437],
[484,420,447,397,400,405,0,379,453,388],
[489,469,442,444,514,432,512,0,472,451],
[481,421,424,426,467,395,438,419,0,396],
[487,473,437,488,498,454,503,440,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,496,460,459,461,423,415,403,455],
[394,0,495,441,467,442,394,410,381,416],
[395,396,0,444,446,445,384,371,359,398],
[431,450,447,0,503,462,427,439,440,431],
[432,424,445,388,0,469,441,404,430,414],
[430,449,446,429,422,0,420,438,361,417],
[468,497,507,464,450,471,0,424,450,457],
[476,481,520,452,487,453,467,0,401,445],
[488,510,532,451,461,530,441,490,0,463],
[436,475,493,460,477,474,434,446,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,396,470,450,420,449,457,466,420],
[446,0,423,442,417,432,450,427,517,462],
[495,468,0,474,479,470,480,449,523,444],
[421,449,417,0,426,415,456,448,475,440],
[441,474,412,465,0,443,438,439,516,415],
[471,459,421,476,448,0,448,450,472,434],
[442,441,411,435,453,443,0,439,464,432],
[434,464,442,443,452,441,452,0,475,457],
[425,374,368,416,375,419,427,416,0,408],
[471,429,447,451,476,457,459,434,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,405,394,487,436,411,449,399,470],
[464,0,435,476,476,441,481,451,447,450],
[486,456,0,432,510,486,469,487,440,447],
[497,415,459,0,499,453,450,464,423,458],
[404,415,381,392,0,415,387,437,403,379],
[455,450,405,438,476,0,440,454,464,454],
[480,410,422,441,504,451,0,484,449,467],
[442,440,404,427,454,437,407,0,414,466],
[492,444,451,468,488,427,442,477,0,430],
[421,441,444,433,512,437,424,425,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,463,429,593,558,519,579,449,560],
[443,0,497,449,506,629,539,526,489,505],
[428,394,0,453,483,477,462,414,484,465],
[462,442,438,0,462,499,513,480,520,496],
[298,385,408,429,0,457,461,429,432,502],
[333,262,414,392,434,0,407,448,376,430],
[372,352,429,378,430,484,0,374,471,430],
[312,365,477,411,462,443,517,0,465,409],
[442,402,407,371,459,515,420,426,0,369],
[331,386,426,395,389,461,461,482,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,449,476,453,448,447,412,411,455],
[416,0,411,432,424,424,384,413,415,430],
[442,480,0,469,454,458,460,457,454,434],
[415,459,422,0,423,413,394,426,395,434],
[438,467,437,468,0,445,443,426,413,481],
[443,467,433,478,446,0,442,432,411,419],
[444,507,431,497,448,449,0,442,425,459],
[479,478,434,465,465,459,449,0,458,457],
[480,476,437,496,478,480,466,433,0,441],
[436,461,457,457,410,472,432,434,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,475,495,473,447,470,472,366,341],
[417,0,345,420,449,446,445,421,422,317],
[416,546,0,417,499,470,526,394,368,393],
[396,471,474,0,425,632,528,506,451,347],
[418,442,392,466,0,444,365,446,313,391],
[444,445,421,259,447,0,526,449,258,316],
[421,446,365,363,526,365,0,446,364,449],
[419,470,497,385,445,442,445,0,257,340],
[525,469,523,440,578,633,527,634,0,444],
[550,574,498,544,500,575,442,551,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,465,426,457,445,414,449,439,440],
[441,0,456,424,463,436,431,437,444,437],
[426,435,0,424,442,445,413,454,429,416],
[465,467,467,0,465,451,435,477,485,455],
[434,428,449,426,0,402,391,438,447,416],
[446,455,446,440,489,0,438,461,450,445],
[477,460,478,456,500,453,0,482,446,439],
[442,454,437,414,453,430,409,0,437,450],
[452,447,462,406,444,441,445,454,0,451],
[451,454,475,436,475,446,452,441,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,471,502,459,456,465,480,468],
[447,0,473,449,481,446,464,453,453,439],
[442,418,0,430,457,433,451,452,464,446],
[420,442,461,0,472,456,463,475,456,460],
[389,410,434,419,0,414,438,425,438,416],
[432,445,458,435,477,0,451,474,470,463],
[435,427,440,428,453,440,0,477,449,451],
[426,438,439,416,466,417,414,0,452,444],
[411,438,427,435,453,421,442,439,0,418],
[423,452,445,431,475,428,440,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,430,424,411,399,396,404,398,380],
[480,0,445,457,425,459,416,462,428,437],
[461,446,0,424,430,417,430,429,440,437],
[467,434,467,0,441,465,427,484,448,428],
[480,466,461,450,0,432,434,459,444,426],
[492,432,474,426,459,0,419,433,445,412],
[495,475,461,464,457,472,0,488,457,445],
[487,429,462,407,432,458,403,0,440,405],
[493,463,451,443,447,446,434,451,0,463],
[511,454,454,463,465,479,446,486,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,468,446,444,441,466,447,453,439],
[429,0,439,443,455,439,450,464,463,435],
[423,452,0,425,424,440,438,436,426,437],
[445,448,466,0,459,444,455,451,465,441],
[447,436,467,432,0,446,454,463,457,452],
[450,452,451,447,445,0,455,444,441,437],
[425,441,453,436,437,436,0,426,453,433],
[444,427,455,440,428,447,465,0,433,427],
[438,428,465,426,434,450,438,458,0,434],
[452,456,454,450,439,454,458,464,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,446,447,470,467,461,438,432,424],
[426,0,436,417,456,448,434,438,392,413],
[445,455,0,444,491,471,451,483,458,456],
[444,474,447,0,463,470,469,442,428,457],
[421,435,400,428,0,443,440,399,431,404],
[424,443,420,421,448,0,431,422,443,411],
[430,457,440,422,451,460,0,454,429,411],
[453,453,408,449,492,469,437,0,413,427],
[459,499,433,463,460,448,462,478,0,436],
[467,478,435,434,487,480,480,464,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,433,436,427,410,431,432,455,399],
[469,0,440,454,470,461,460,468,471,460],
[458,451,0,441,473,450,423,493,469,431],
[455,437,450,0,471,446,483,494,453,437],
[464,421,418,420,0,421,468,439,464,407],
[481,430,441,445,470,0,468,464,449,459],
[460,431,468,408,423,423,0,464,427,429],
[459,423,398,397,452,427,427,0,425,431],
[436,420,422,438,427,442,464,466,0,421],
[492,431,460,454,484,432,462,460,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,470,490,442,448,438,470,440,467],
[427,0,468,468,415,408,405,451,435,442],
[421,423,0,475,408,414,442,431,397,459],
[401,423,416,0,416,431,423,438,400,439],
[449,476,483,475,0,430,433,475,443,466],
[443,483,477,460,461,0,472,468,441,447],
[453,486,449,468,458,419,0,463,463,468],
[421,440,460,453,416,423,428,0,432,435],
[451,456,494,491,448,450,428,459,0,453],
[424,449,432,452,425,444,423,456,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,426,479,447,447,450,460,449,451],
[441,0,416,463,436,458,470,444,441,431],
[465,475,0,468,466,449,451,461,472,444],
[412,428,423,0,411,426,458,444,423,437],
[444,455,425,480,0,434,442,456,463,430],
[444,433,442,465,457,0,439,466,451,450],
[441,421,440,433,449,452,0,415,432,419],
[431,447,430,447,435,425,476,0,457,446],
[442,450,419,468,428,440,459,434,0,439],
[440,460,447,454,461,441,472,445,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,405,414,441,416,383,410,430,406],
[494,0,454,493,475,466,428,451,454,457],
[486,437,0,461,463,455,424,443,438,442],
[477,398,430,0,424,425,424,421,468,396],
[450,416,428,467,0,441,422,411,456,424],
[475,425,436,466,450,0,417,455,441,434],
[508,463,467,467,469,474,0,445,469,458],
[481,440,448,470,480,436,446,0,453,437],
[461,437,453,423,435,450,422,438,0,440],
[485,434,449,495,467,457,433,454,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,442,426,444,431,437,442,428,415],
[444,0,407,437,434,414,456,428,414,417],
[449,484,0,439,441,455,437,453,453,436],
[465,454,452,0,456,474,473,464,453,440],
[447,457,450,435,0,460,450,431,415,453],
[460,477,436,417,431,0,426,433,446,428],
[454,435,454,418,441,465,0,442,438,419],
[449,463,438,427,460,458,449,0,428,439],
[463,477,438,438,476,445,453,463,0,456],
[476,474,455,451,438,463,472,452,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,447,444,436,435,452,460,436,444],
[457,0,446,425,441,460,477,467,479,472],
[444,445,0,430,445,462,470,445,447,439],
[447,466,461,0,454,464,476,448,431,474],
[455,450,446,437,0,459,491,451,467,456],
[456,431,429,427,432,0,454,433,445,433],
[439,414,421,415,400,437,0,425,432,451],
[431,424,446,443,440,458,466,0,460,465],
[455,412,444,460,424,446,459,431,0,448],
[447,419,452,417,435,458,440,426,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,462,461,455,455,432,471,437,419],
[435,0,426,434,415,421,404,423,406,421],
[429,465,0,434,438,435,413,458,404,437],
[430,457,457,0,434,442,449,475,442,444],
[436,476,453,457,0,451,433,451,428,449],
[436,470,456,449,440,0,449,459,445,445],
[459,487,478,442,458,442,0,463,468,471],
[420,468,433,416,440,432,428,0,432,428],
[454,485,487,449,463,446,423,459,0,440],
[472,470,454,447,442,446,420,463,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,459,469,464,453,440,463,451,476],
[429,0,460,436,452,446,455,453,437,483],
[432,431,0,433,454,433,444,449,452,470],
[422,455,458,0,470,445,452,454,483,480],
[427,439,437,421,0,444,433,456,409,446],
[438,445,458,446,447,0,428,453,451,481],
[451,436,447,439,458,463,0,452,449,453],
[428,438,442,437,435,438,439,0,443,443],
[440,454,439,408,482,440,442,448,0,459],
[415,408,421,411,445,410,438,448,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,474,441,455,486,514,486,377,462],
[518,0,462,367,394,457,531,439,410,454],
[417,429,0,456,405,452,484,483,447,462],
[450,524,435,0,526,513,543,508,499,475],
[436,497,486,365,0,378,499,422,470,499],
[405,434,439,378,513,0,513,496,448,528],
[377,360,407,348,392,378,0,423,360,375],
[405,452,408,383,469,395,468,0,435,420],
[514,481,444,392,421,443,531,456,0,482],
[429,437,429,416,392,363,516,471,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,434,425,453,423,451,446,455,429],
[462,0,446,421,449,414,448,467,447,423],
[457,445,0,436,473,474,449,426,491,428],
[466,470,455,0,457,482,430,460,453,446],
[438,442,418,434,0,462,429,437,416,437],
[468,477,417,409,429,0,442,459,457,439],
[440,443,442,461,462,449,0,448,449,406],
[445,424,465,431,454,432,443,0,461,442],
[436,444,400,438,475,434,442,430,0,434],
[462,468,463,445,454,452,485,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,437,442,434,433,422,436,440,438],
[462,0,442,486,457,445,450,460,459,452],
[454,449,0,452,441,451,427,451,462,415],
[449,405,439,0,430,431,408,451,455,436],
[457,434,450,461,0,441,432,457,475,447],
[458,446,440,460,450,0,448,437,461,439],
[469,441,464,483,459,443,0,482,475,441],
[455,431,440,440,434,454,409,0,450,406],
[451,432,429,436,416,430,416,441,0,403],
[453,439,476,455,444,452,450,485,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,451,446,449,464,460,450,444,464],
[458,0,479,454,455,461,450,475,426,464],
[440,412,0,428,444,449,434,446,417,449],
[445,437,463,0,444,482,440,428,424,446],
[442,436,447,447,0,462,408,454,424,425],
[427,430,442,409,429,0,417,442,417,444],
[431,441,457,451,483,474,0,465,447,456],
[441,416,445,463,437,449,426,0,428,448],
[447,465,474,467,467,474,444,463,0,487],
[427,427,442,445,466,447,435,443,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,427,439,434,426,434,411,416,448],
[496,0,404,479,462,431,440,449,448,472],
[464,487,0,467,418,438,467,444,423,465],
[452,412,424,0,422,408,439,423,418,435],
[457,429,473,469,0,455,479,433,451,475],
[465,460,453,483,436,0,466,463,443,477],
[457,451,424,452,412,425,0,436,425,465],
[480,442,447,468,458,428,455,0,438,468],
[475,443,468,473,440,448,466,453,0,458],
[443,419,426,456,416,414,426,423,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,511,517,452,472,405,521,472,477],
[413,0,458,441,463,412,407,448,477,440],
[380,433,0,429,476,422,349,430,442,431],
[374,450,462,0,416,444,390,421,428,390],
[439,428,415,475,0,428,399,414,443,434],
[419,479,469,447,463,0,457,464,481,480],
[486,484,542,501,492,434,0,547,462,482],
[370,443,461,470,477,427,344,0,440,455],
[419,414,449,463,448,410,429,451,0,391],
[414,451,460,501,457,411,409,436,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,440,374,405,418,402,423,461,411],
[456,0,436,422,427,434,439,425,460,408],
[451,455,0,449,456,430,450,420,489,466],
[517,469,442,0,456,475,463,465,468,474],
[486,464,435,435,0,470,481,468,481,474],
[473,457,461,416,421,0,438,443,448,478],
[489,452,441,428,410,453,0,430,459,474],
[468,466,471,426,423,448,461,0,468,432],
[430,431,402,423,410,443,432,423,0,438],
[480,483,425,417,417,413,417,459,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,441,430,475,441,421,432,468],
[440,0,431,433,422,464,440,440,423,466],
[451,460,0,442,445,478,439,423,445,484],
[450,458,449,0,442,465,464,463,422,463],
[461,469,446,449,0,463,472,425,444,481],
[416,427,413,426,428,0,418,429,404,461],
[450,451,452,427,419,473,0,417,437,457],
[470,451,468,428,466,462,474,0,446,494],
[459,468,446,469,447,487,454,445,0,493],
[423,425,407,428,410,430,434,397,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,429,416,404,375,424,433,423,412],
[476,0,431,429,413,414,425,443,438,463],
[462,460,0,467,447,458,438,466,456,486],
[475,462,424,0,424,440,426,457,452,457],
[487,478,444,467,0,428,453,453,463,472],
[516,477,433,451,463,0,450,469,456,475],
[467,466,453,465,438,441,0,450,469,477],
[458,448,425,434,438,422,441,0,447,472],
[468,453,435,439,428,435,422,444,0,442],
[479,428,405,434,419,416,414,419,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,451,474,442,442,456,452,422,456],
[467,0,487,493,466,441,488,483,425,465],
[440,404,0,451,439,418,416,434,420,442],
[417,398,440,0,438,408,447,440,414,430],
[449,425,452,453,0,434,457,456,404,462],
[449,450,473,483,457,0,468,494,428,437],
[435,403,475,444,434,423,0,426,400,453],
[439,408,457,451,435,397,465,0,452,420],
[469,466,471,477,487,463,491,439,0,451],
[435,426,449,461,429,454,438,471,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,442,457,426,429,415,455,453,451],
[422,0,440,453,417,443,431,438,435,442],
[449,451,0,456,429,445,439,449,454,447],
[434,438,435,0,421,447,439,439,431,419],
[465,474,462,470,0,470,453,475,446,442],
[462,448,446,444,421,0,433,442,460,427],
[476,460,452,452,438,458,0,450,445,434],
[436,453,442,452,416,449,441,0,441,436],
[438,456,437,460,445,431,446,450,0,445],
[440,449,444,472,449,464,457,455,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,428,437,447,441,443,442,459,444],
[411,0,389,394,435,421,380,389,431,378],
[463,502,0,459,480,457,464,444,469,455],
[454,497,432,0,447,428,456,415,445,431],
[444,456,411,444,0,441,454,404,456,430],
[450,470,434,463,450,0,477,445,451,422],
[448,511,427,435,437,414,0,469,462,430],
[449,502,447,476,487,446,422,0,470,454],
[432,460,422,446,435,440,429,421,0,410],
[447,513,436,460,461,469,461,437,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,442,492,462,482,433,489,446,477],
[410,0,398,485,463,454,475,439,459,440],
[449,493,0,491,456,469,474,482,440,486],
[399,406,400,0,423,438,447,456,402,439],
[429,428,435,468,0,483,442,489,486,469],
[409,437,422,453,408,0,434,453,426,439],
[458,416,417,444,449,457,0,487,438,477],
[402,452,409,435,402,438,404,0,395,448],
[445,432,451,489,405,465,453,496,0,466],
[414,451,405,452,422,452,414,443,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,446,504,452,452,421,379,401,371],
[438,0,428,478,466,484,439,418,383,358],
[445,463,0,493,522,554,460,483,427,446],
[387,413,398,0,473,418,412,398,419,388],
[439,425,369,418,0,450,434,365,389,429],
[439,407,337,473,441,0,444,384,441,404],
[470,452,431,479,457,447,0,412,416,431],
[512,473,408,493,526,507,479,0,523,407],
[490,508,464,472,502,450,475,368,0,361],
[520,533,445,503,462,487,460,484,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,461,462,471,440,452,413,443,438],
[463,0,451,468,446,484,463,434,457,443],
[430,440,0,452,456,437,455,440,447,429],
[429,423,439,0,431,435,442,433,439,448],
[420,445,435,460,0,432,442,422,458,425],
[451,407,454,456,459,0,460,456,448,439],
[439,428,436,449,449,431,0,435,455,430],
[478,457,451,458,469,435,456,0,445,452],
[448,434,444,452,433,443,436,446,0,433],
[453,448,462,443,466,452,461,439,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,456,472,456,446,454,449,455,440],
[429,0,452,472,444,455,440,439,463,439],
[435,439,0,455,452,440,465,460,471,440],
[419,419,436,0,429,432,458,418,436,430],
[435,447,439,462,0,453,465,452,453,449],
[445,436,451,459,438,0,454,433,435,450],
[437,451,426,433,426,437,0,451,438,435],
[442,452,431,473,439,458,440,0,450,431],
[436,428,420,455,438,456,453,441,0,439],
[451,452,451,461,442,441,456,460,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,447,459,483,448,462,460,451,471],
[449,0,460,446,454,463,466,442,461,465],
[444,431,0,450,446,453,474,441,444,454],
[432,445,441,0,455,440,446,433,457,481],
[408,437,445,436,0,450,468,409,461,463],
[443,428,438,451,441,0,466,444,458,452],
[429,425,417,445,423,425,0,427,426,431],
[431,449,450,458,482,447,464,0,482,482],
[440,430,447,434,430,433,465,409,0,454],
[420,426,437,410,428,439,460,409,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,442,465,450,464,473,443,448,470],
[450,0,455,437,473,461,467,450,446,451],
[449,436,0,445,427,454,453,437,434,440],
[426,454,446,0,451,459,450,426,430,435],
[441,418,464,440,0,466,454,442,430,445],
[427,430,437,432,425,0,450,439,410,436],
[418,424,438,441,437,441,0,418,424,432],
[448,441,454,465,449,452,473,0,429,442],
[443,445,457,461,461,481,467,462,0,462],
[421,440,451,456,446,455,459,449,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,462,457,439,463,446,446,493,461],
[420,0,439,422,437,442,428,423,457,422],
[429,452,0,427,430,443,455,456,477,447],
[434,469,464,0,432,442,439,428,470,463],
[452,454,461,459,0,456,463,451,459,445],
[428,449,448,449,435,0,460,450,483,448],
[445,463,436,452,428,431,0,428,451,433],
[445,468,435,463,440,441,463,0,495,442],
[398,434,414,421,432,408,440,396,0,427],
[430,469,444,428,446,443,458,449,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,456,458,458,485,422,486,479,490],
[444,0,414,454,426,465,482,466,481,489],
[435,477,0,487,469,461,489,492,492,485],
[433,437,404,0,424,467,441,468,451,476],
[433,465,422,467,0,441,434,451,431,438],
[406,426,430,424,450,0,458,447,468,447],
[469,409,402,450,457,433,0,463,474,458],
[405,425,399,423,440,444,428,0,431,458],
[412,410,399,440,460,423,417,460,0,456],
[401,402,406,415,453,444,433,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,445,447,446,447,447,438,446,457],
[455,0,479,432,446,431,420,444,433,462],
[446,412,0,416,426,420,402,430,442,429],
[444,459,475,0,437,429,456,459,451,457],
[445,445,465,454,0,455,420,448,417,450],
[444,460,471,462,436,0,442,469,445,462],
[444,471,489,435,471,449,0,465,456,466],
[453,447,461,432,443,422,426,0,446,441],
[445,458,449,440,474,446,435,445,0,446],
[434,429,462,434,441,429,425,450,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,441,424,479,448,445,464,438,454],
[414,0,409,407,435,421,415,432,410,438],
[450,482,0,405,451,447,454,445,435,445],
[467,484,486,0,485,469,471,464,461,429],
[412,456,440,406,0,445,456,442,427,468],
[443,470,444,422,446,0,457,440,449,443],
[446,476,437,420,435,434,0,453,436,439],
[427,459,446,427,449,451,438,0,426,423],
[453,481,456,430,464,442,455,465,0,458],
[437,453,446,462,423,448,452,468,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,510,454,400,482,470,435,453,439],
[393,0,471,429,407,418,456,419,430,422],
[381,420,0,442,388,409,447,399,389,425],
[437,462,449,0,446,475,497,413,432,442],
[491,484,503,445,0,464,489,434,462,461],
[409,473,482,416,427,0,436,431,412,413],
[421,435,444,394,402,455,0,360,416,395],
[456,472,492,478,457,460,531,0,435,458],
[438,461,502,459,429,479,475,456,0,448],
[452,469,466,449,430,478,496,433,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,463,438,452,467,442,448,478,484],
[421,0,449,467,406,421,445,428,481,455],
[428,442,0,462,408,458,446,450,475,455],
[453,424,429,0,440,468,410,431,464,458],
[439,485,483,451,0,503,460,443,498,484],
[424,470,433,423,388,0,429,431,463,483],
[449,446,445,481,431,462,0,444,488,461],
[443,463,441,460,448,460,447,0,493,469],
[413,410,416,427,393,428,403,398,0,441],
[407,436,436,433,407,408,430,422,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,443,441,554,440,445,483,427,469],
[481,0,515,501,556,494,475,497,396,538],
[448,376,0,409,466,446,414,484,379,453],
[450,390,482,0,526,434,460,456,424,483],
[337,335,425,365,0,308,356,392,312,421],
[451,397,445,457,583,0,434,415,456,503],
[446,416,477,431,535,457,0,489,405,463],
[408,394,407,435,499,476,402,0,351,486],
[464,495,512,467,579,435,486,540,0,496],
[422,353,438,408,470,388,428,405,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,426,464,471,456,447,437,465,465],
[400,0,382,412,395,397,364,378,412,434],
[465,509,0,441,476,454,449,467,473,472],
[427,479,450,0,450,437,413,449,439,467],
[420,496,415,441,0,449,439,465,457,457],
[435,494,437,454,442,0,430,436,446,446],
[444,527,442,478,452,461,0,465,468,475],
[454,513,424,442,426,455,426,0,460,479],
[426,479,418,452,434,445,423,431,0,443],
[426,457,419,424,434,445,416,412,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,413,397,437,439,453,396,429,407],
[482,0,424,443,480,517,452,450,472,451],
[478,467,0,462,486,518,480,435,484,471],
[494,448,429,0,485,485,513,459,478,438],
[454,411,405,406,0,447,458,419,411,420],
[452,374,373,406,444,0,445,412,408,406],
[438,439,411,378,433,446,0,452,432,439],
[495,441,456,432,472,479,439,0,466,464],
[462,419,407,413,480,483,459,425,0,431],
[484,440,420,453,471,485,452,427,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,407,424,441,442,447,411,408,452],
[448,0,423,416,453,451,438,425,445,443],
[484,468,0,456,473,474,452,442,461,466],
[467,475,435,0,460,468,430,426,440,467],
[450,438,418,431,0,443,424,423,422,425],
[449,440,417,423,448,0,422,436,432,447],
[444,453,439,461,467,469,0,461,426,489],
[480,466,449,465,468,455,430,0,451,465],
[483,446,430,451,469,459,465,440,0,460],
[439,448,425,424,466,444,402,426,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,433,415,400,456,491,411,439,420],
[427,0,429,419,423,443,447,390,399,451],
[458,462,0,449,453,433,489,424,456,458],
[476,472,442,0,456,437,468,432,443,442],
[491,468,438,435,0,439,481,439,429,426],
[435,448,458,454,452,0,473,408,424,433],
[400,444,402,423,410,418,0,416,425,423],
[480,501,467,459,452,483,475,0,435,456],
[452,492,435,448,462,467,466,456,0,423],
[471,440,433,449,465,458,468,435,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,463,450,464,451,456,430,438,470],
[435,0,471,470,481,452,452,458,458,478],
[428,420,0,440,457,426,447,448,441,447],
[441,421,451,0,435,422,437,425,445,475],
[427,410,434,456,0,414,438,437,426,440],
[440,439,465,469,477,0,445,445,449,486],
[435,439,444,454,453,446,0,435,478,458],
[461,433,443,466,454,446,456,0,455,444],
[453,433,450,446,465,442,413,436,0,457],
[421,413,444,416,451,405,433,447,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,418,442,434,446,446,474,442,452],
[436,0,416,415,446,438,437,459,435,434],
[473,475,0,451,446,459,476,474,438,468],
[449,476,440,0,464,445,468,459,462,460],
[457,445,445,427,0,453,456,468,445,453],
[445,453,432,446,438,0,461,489,447,460],
[445,454,415,423,435,430,0,447,439,464],
[417,432,417,432,423,402,444,0,426,438],
[449,456,453,429,446,444,452,465,0,440],
[439,457,423,431,438,431,427,453,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,451,454,430,433,450,462,435,446],
[452,0,476,443,439,439,435,450,440,435],
[440,415,0,443,457,434,439,464,428,430],
[437,448,448,0,453,456,444,449,422,446],
[461,452,434,438,0,417,433,466,412,422],
[458,452,457,435,474,0,437,467,413,442],
[441,456,452,447,458,454,0,452,406,448],
[429,441,427,442,425,424,439,0,416,434],
[456,451,463,469,479,478,485,475,0,431],
[445,456,461,445,469,449,443,457,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,437,452,473,468,441,434,460,462],
[437,0,420,443,453,462,439,435,454,440],
[454,471,0,443,471,459,456,471,462,455],
[439,448,448,0,456,446,462,445,459,452],
[418,438,420,435,0,445,431,439,447,434],
[423,429,432,445,446,0,433,451,449,428],
[450,452,435,429,460,458,0,431,457,441],
[457,456,420,446,452,440,460,0,465,432],
[431,437,429,432,444,442,434,426,0,430],
[429,451,436,439,457,463,450,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,463,457,480,452,447,464,454,453],
[454,0,447,446,465,442,427,456,447,426],
[428,444,0,457,457,435,439,472,435,441],
[434,445,434,0,456,440,415,450,425,424],
[411,426,434,435,0,428,420,429,432,429],
[439,449,456,451,463,0,429,446,441,443],
[444,464,452,476,471,462,0,449,455,458],
[427,435,419,441,462,445,442,0,439,421],
[437,444,456,466,459,450,436,452,0,455],
[438,465,450,467,462,448,433,470,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,424,432,417,410,421,423,440,434],
[436,0,414,422,408,416,431,414,432,420],
[467,477,0,447,432,456,447,413,458,451],
[459,469,444,0,438,419,464,420,458,438],
[474,483,459,453,0,435,454,435,457,460],
[481,475,435,472,456,0,464,448,484,470],
[470,460,444,427,437,427,0,420,433,448],
[468,477,478,471,456,443,471,0,464,471],
[451,459,433,433,434,407,458,427,0,444],
[457,471,440,453,431,421,443,420,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,448,419,424,460,469,397,392,432],
[448,0,444,404,411,453,452,429,428,412],
[443,447,0,418,404,446,448,433,383,407],
[472,487,473,0,442,457,474,459,408,443],
[467,480,487,449,0,471,498,432,449,475],
[431,438,445,434,420,0,441,432,393,419],
[422,439,443,417,393,450,0,456,401,417],
[494,462,458,432,459,459,435,0,402,433],
[499,463,508,483,442,498,490,489,0,463],
[459,479,484,448,416,472,474,458,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,433,453,428,412,430,430,393,413],
[477,0,465,477,449,443,451,472,429,449],
[458,426,0,439,443,409,430,434,431,428],
[438,414,452,0,439,422,423,446,415,435],
[463,442,448,452,0,448,460,442,428,420],
[479,448,482,469,443,0,457,467,456,440],
[461,440,461,468,431,434,0,465,423,439],
[461,419,457,445,449,424,426,0,420,420],
[498,462,460,476,463,435,468,471,0,436],
[478,442,463,456,471,451,452,471,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,423,432,441,461,434,447,463,438],
[409,0,424,393,443,438,437,418,457,422],
[468,467,0,418,455,475,473,469,487,465],
[459,498,473,0,427,472,462,449,446,454],
[450,448,436,464,0,461,461,415,467,438],
[430,453,416,419,430,0,445,441,438,430],
[457,454,418,429,430,446,0,441,461,435],
[444,473,422,442,476,450,450,0,484,441],
[428,434,404,445,424,453,430,407,0,436],
[453,469,426,437,453,461,456,450,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,476,439,469,475,485,475,439,448],
[416,0,460,425,404,444,450,461,445,451],
[415,431,0,430,414,417,457,450,411,430],
[452,466,461,0,445,461,496,472,442,449],
[422,487,477,446,0,466,485,486,448,455],
[416,447,474,430,425,0,463,444,446,454],
[406,441,434,395,406,428,0,421,408,427],
[416,430,441,419,405,447,470,0,414,418],
[452,446,480,449,443,445,483,477,0,456],
[443,440,461,442,436,437,464,473,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,447,409,446,472,466,455,457,414],
[448,0,474,446,470,486,484,457,450,434],
[444,417,0,370,427,464,415,415,449,397],
[482,445,521,0,474,493,521,494,451,453],
[445,421,464,417,0,502,435,475,459,405],
[419,405,427,398,389,0,437,453,422,391],
[425,407,476,370,456,454,0,444,444,402],
[436,434,476,397,416,438,447,0,467,427],
[434,441,442,440,432,469,447,424,0,427],
[477,457,494,438,486,500,489,464,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,448,456,444,429,459,444,444,431],
[461,0,456,472,447,448,470,470,431,450],
[443,435,0,453,443,441,467,458,428,438],
[435,419,438,0,429,446,449,455,446,411],
[447,444,448,462,0,441,472,447,457,432],
[462,443,450,445,450,0,459,451,425,424],
[432,421,424,442,419,432,0,433,418,426],
[447,421,433,436,444,440,458,0,432,421],
[447,460,463,445,434,466,473,459,0,444],
[460,441,453,480,459,467,465,470,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,433,465,453,443,454,486,441,457],
[432,0,414,456,416,426,418,449,439,433],
[458,477,0,488,456,459,448,483,498,435],
[426,435,403,0,435,432,424,453,447,423],
[438,475,435,456,0,416,453,453,475,440],
[448,465,432,459,475,0,464,496,475,442],
[437,473,443,467,438,427,0,484,463,474],
[405,442,408,438,438,395,407,0,440,436],
[450,452,393,444,416,416,428,451,0,438],
[434,458,456,468,451,449,417,455,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,452,448,417,452,434,423,452,453],
[489,0,487,477,462,440,466,469,503,474],
[439,404,0,425,419,440,422,434,450,459],
[443,414,466,0,441,438,430,428,472,452],
[474,429,472,450,0,439,447,447,472,445],
[439,451,451,453,452,0,426,435,496,453],
[457,425,469,461,444,465,0,459,475,459],
[468,422,457,463,444,456,432,0,458,471],
[439,388,441,419,419,395,416,433,0,446],
[438,417,432,439,446,438,432,420,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,440,461,449,450,474,437,445,462],
[454,0,446,452,476,430,486,458,474,459],
[451,445,0,433,455,416,453,434,454,410],
[430,439,458,0,452,466,460,436,439,391],
[442,415,436,439,0,418,438,419,437,422],
[441,461,475,425,473,0,469,430,458,444],
[417,405,438,431,453,422,0,426,435,405],
[454,433,457,455,472,461,465,0,461,453],
[446,417,437,452,454,433,456,430,0,430],
[429,432,481,500,469,447,486,438,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,424,432,437,429,442,446,459,444],
[431,0,423,453,461,415,429,421,451,430],
[467,468,0,443,464,444,433,443,457,437],
[459,438,448,0,441,451,456,452,455,448],
[454,430,427,450,0,428,418,437,448,436],
[462,476,447,440,463,0,437,453,451,443],
[449,462,458,435,473,454,0,440,472,452],
[445,470,448,439,454,438,451,0,467,453],
[432,440,434,436,443,440,419,424,0,441],
[447,461,454,443,455,448,439,438,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,469,428,471,431,474,448,452,458],
[447,0,433,470,452,435,462,456,499,475],
[422,458,0,428,413,433,451,437,443,429],
[463,421,463,0,450,465,456,448,453,453],
[420,439,478,441,0,433,482,436,457,441],
[460,456,458,426,458,0,463,412,444,412],
[417,429,440,435,409,428,0,396,405,440],
[443,435,454,443,455,479,495,0,461,470],
[439,392,448,438,434,447,486,430,0,443],
[433,416,462,438,450,479,451,421,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,492,450,514,487,470,513,443,464],
[400,0,457,507,447,505,420,503,438,478],
[399,434,0,461,449,474,434,485,452,459],
[441,384,430,0,439,456,442,496,431,440],
[377,444,442,452,0,451,420,466,434,432],
[404,386,417,435,440,0,433,482,408,411],
[421,471,457,449,471,458,0,489,431,426],
[378,388,406,395,425,409,402,0,384,418],
[448,453,439,460,457,483,460,507,0,434],
[427,413,432,451,459,480,465,473,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,475,490,473,473,448,477,461,462],
[455,0,518,498,485,490,476,472,443,470],
[416,373,0,429,421,430,427,434,384,422],
[401,393,462,0,413,440,407,457,387,418],
[418,406,470,478,0,441,416,458,426,459],
[418,401,461,451,450,0,414,434,393,440],
[443,415,464,484,475,477,0,464,430,466],
[414,419,457,434,433,457,427,0,405,459],
[430,448,507,504,465,498,461,486,0,510],
[429,421,469,473,432,451,425,432,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,478,457,433,445,409,419,406,450],
[451,0,485,462,479,441,436,467,474,448],
[413,406,0,442,438,421,418,402,428,415],
[434,429,449,0,433,438,396,401,411,411],
[458,412,453,458,0,446,425,426,423,432],
[446,450,470,453,445,0,420,416,444,431],
[482,455,473,495,466,471,0,458,451,416],
[472,424,489,490,465,475,433,0,450,456],
[485,417,463,480,468,447,440,441,0,450],
[441,443,476,480,459,460,475,435,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,459,461,503,466,448,461,447,441],
[403,0,425,423,478,427,435,385,422,406],
[432,466,0,468,456,425,420,437,427,422],
[430,468,423,0,457,438,444,443,426,429],
[388,413,435,434,0,399,416,376,426,391],
[425,464,466,453,492,0,433,425,434,455],
[443,456,471,447,475,458,0,432,426,458],
[430,506,454,448,515,466,459,0,453,451],
[444,469,464,465,465,457,465,438,0,435],
[450,485,469,462,500,436,433,440,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,458,440,455,432,460,436,464,462],
[434,0,443,378,435,436,443,419,433,420],
[433,448,0,443,422,404,421,430,430,415],
[451,513,448,0,441,432,451,454,453,444],
[436,456,469,450,0,476,464,439,447,441],
[459,455,487,459,415,0,464,459,465,470],
[431,448,470,440,427,427,0,428,439,440],
[455,472,461,437,452,432,463,0,455,443],
[427,458,461,438,444,426,452,436,0,438],
[429,471,476,447,450,421,451,448,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,450,473,436,452,491,422,437,461],
[468,0,446,446,435,450,486,430,437,450],
[441,445,0,467,441,453,472,459,448,452],
[418,445,424,0,426,429,444,419,435,437],
[455,456,450,465,0,470,469,440,441,437],
[439,441,438,462,421,0,462,444,436,447],
[400,405,419,447,422,429,0,418,427,424],
[469,461,432,472,451,447,473,0,432,459],
[454,454,443,456,450,455,464,459,0,464],
[430,441,439,454,454,444,467,432,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,456,436,430,452,431,471,416,462],
[475,0,461,435,455,464,465,456,454,481],
[435,430,0,456,435,465,429,429,440,486],
[455,456,435,0,423,470,426,448,440,460],
[461,436,456,468,0,467,432,460,446,468],
[439,427,426,421,424,0,397,465,450,454],
[460,426,462,465,459,494,0,458,463,478],
[420,435,462,443,431,426,433,0,432,443],
[475,437,451,451,445,441,428,459,0,464],
[429,410,405,431,423,437,413,448,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,462,467,448,463,480,417,435,478],
[411,0,471,482,420,429,465,452,447,409],
[429,420,0,420,454,434,442,421,413,443],
[424,409,471,0,437,417,445,441,391,397],
[443,471,437,454,0,421,448,418,443,433],
[428,462,457,474,470,0,472,448,464,426],
[411,426,449,446,443,419,0,430,430,440],
[474,439,470,450,473,443,461,0,441,457],
[456,444,478,500,448,427,461,450,0,430],
[413,482,448,494,458,465,451,434,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,453,496,462,465,447,436,439,450],
[443,0,425,445,403,461,423,432,437,440],
[438,466,0,461,432,447,421,430,439,423],
[395,446,430,0,435,428,404,415,422,426],
[429,488,459,456,0,452,454,457,464,476],
[426,430,444,463,439,0,426,429,435,421],
[444,468,470,487,437,465,0,462,444,452],
[455,459,461,476,434,462,429,0,428,426],
[452,454,452,469,427,456,447,463,0,449],
[441,451,468,465,415,470,439,465,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,484,486,484,426,465,472,468,494],
[408,0,442,448,461,427,423,466,422,469],
[407,449,0,450,451,402,422,463,429,460],
[405,443,441,0,440,394,422,457,432,437],
[407,430,440,451,0,406,449,459,446,434],
[465,464,489,497,485,0,435,505,452,492],
[426,468,469,469,442,456,0,462,446,493],
[419,425,428,434,432,386,429,0,422,442],
[423,469,462,459,445,439,445,469,0,460],
[397,422,431,454,457,399,398,449,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,493,494,510,531,511,462,445,481],
[397,0,426,466,440,510,431,490,416,484],
[398,465,0,400,400,504,427,433,385,435],
[397,425,491,0,508,478,398,514,425,449],
[381,451,491,383,0,481,384,447,400,462],
[360,381,387,413,410,0,455,392,400,425],
[380,460,464,493,507,436,0,487,451,441],
[429,401,458,377,444,499,404,0,432,442],
[446,475,506,466,491,491,440,459,0,494],
[410,407,456,442,429,466,450,449,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,437,490,539,472,481,503,511,503],
[363,0,393,415,488,446,404,440,450,462],
[454,498,0,446,527,487,439,521,490,478],
[401,476,445,0,510,477,436,468,477,467],
[352,403,364,381,0,441,397,411,429,432],
[419,445,404,414,450,0,386,438,474,451],
[410,487,452,455,494,505,0,473,501,451],
[388,451,370,423,480,453,418,0,434,421],
[380,441,401,414,462,417,390,457,0,449],
[388,429,413,424,459,440,440,470,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,452,448,411,454,465,454,460,435],
[442,0,456,443,475,437,476,456,439,464],
[439,435,0,417,416,449,451,438,442,459],
[443,448,474,0,422,439,456,449,435,458],
[480,416,475,469,0,461,496,464,454,469],
[437,454,442,452,430,0,432,447,431,456],
[426,415,440,435,395,459,0,423,451,444],
[437,435,453,442,427,444,468,0,438,462],
[431,452,449,456,437,460,440,453,0,461],
[456,427,432,433,422,435,447,429,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,442,453,443,436,447,447,444,437],
[438,0,459,430,424,459,444,455,445,450],
[449,432,0,428,455,473,450,440,469,472],
[438,461,463,0,442,449,440,443,462,449],
[448,467,436,449,0,447,455,445,446,461],
[455,432,418,442,444,0,442,434,441,445],
[444,447,441,451,436,449,0,456,453,470],
[444,436,451,448,446,457,435,0,453,447],
[447,446,422,429,445,450,438,438,0,446],
[454,441,419,442,430,446,421,444,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,428,434,457,400,434,420,429,419],
[479,0,473,473,488,434,449,450,476,464],
[463,418,0,457,441,412,454,431,451,447],
[457,418,434,0,455,430,431,422,438,434],
[434,403,450,436,0,429,449,435,455,426],
[491,457,479,461,462,0,441,442,458,456],
[457,442,437,460,442,450,0,448,463,456],
[471,441,460,469,456,449,443,0,453,448],
[462,415,440,453,436,433,428,438,0,435],
[472,427,444,457,465,435,435,443,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,462,497,453,459,442,459,412,465],
[447,0,487,455,455,489,451,435,455,449],
[429,404,0,447,450,468,442,444,426,441],
[394,436,444,0,424,439,445,425,427,447],
[438,436,441,467,0,462,466,437,427,420],
[432,402,423,452,429,0,448,422,413,439],
[449,440,449,446,425,443,0,404,439,433],
[432,456,447,466,454,469,487,0,454,436],
[479,436,465,464,464,478,452,437,0,440],
[426,442,450,444,471,452,458,455,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,457,445,454,444,440,466,470,422],
[452,0,431,462,468,433,457,438,480,479],
[434,460,0,445,420,426,446,453,469,441],
[446,429,446,0,407,438,448,482,463,439],
[437,423,471,484,0,434,431,489,469,463],
[447,458,465,453,457,0,441,473,459,458],
[451,434,445,443,460,450,0,455,467,447],
[425,453,438,409,402,418,436,0,447,454],
[421,411,422,428,422,432,424,444,0,421],
[469,412,450,452,428,433,444,437,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,472,413,516,443,502,408,402,417],
[483,0,420,420,510,502,485,459,455,441],
[419,471,0,416,490,474,553,431,469,439],
[478,471,475,0,502,507,490,454,444,440],
[375,381,401,389,0,474,416,396,405,389],
[448,389,417,384,417,0,494,421,408,387],
[389,406,338,401,475,397,0,392,382,419],
[483,432,460,437,495,470,499,0,474,469],
[489,436,422,447,486,483,509,417,0,419],
[474,450,452,451,502,504,472,422,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,462,450,441,458,449,479,456,453],
[437,0,433,417,443,439,461,451,449,438],
[429,458,0,458,464,468,455,458,415,450],
[441,474,433,0,452,458,439,470,446,436],
[450,448,427,439,0,434,438,454,438,439],
[433,452,423,433,457,0,424,461,434,421],
[442,430,436,452,453,467,0,463,455,445],
[412,440,433,421,437,430,428,0,439,417],
[435,442,476,445,453,457,436,452,0,444],
[438,453,441,455,452,470,446,474,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,426,421,420,443,407,427,441,419],
[464,0,404,397,435,436,441,461,486,393],
[465,487,0,425,470,462,446,454,466,445],
[470,494,466,0,512,483,436,455,474,510],
[471,456,421,379,0,433,424,445,469,418],
[448,455,429,408,458,0,422,429,443,382],
[484,450,445,455,467,469,0,452,491,459],
[464,430,437,436,446,462,439,0,486,477],
[450,405,425,417,422,448,400,405,0,402],
[472,498,446,381,473,509,432,414,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,576,487,666,665,532,534,575,579],
[451,0,489,530,533,619,443,401,442,623],
[315,402,0,443,533,576,443,447,398,625],
[404,361,448,0,538,447,444,356,399,581],
[225,358,358,353,0,444,267,357,222,493],
[226,272,315,444,447,0,447,317,446,271],
[359,448,448,447,624,444,0,361,445,494],
[357,490,444,535,534,574,530,0,573,627],
[316,449,493,492,669,445,446,318,0,406],
[312,268,266,310,398,620,397,264,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,437,435,451,454,450,462,423,431],
[438,0,433,478,475,444,462,461,457,458],
[454,458,0,423,456,458,466,450,432,447],
[456,413,468,0,439,447,442,415,449,477],
[440,416,435,452,0,436,460,452,407,464],
[437,447,433,444,455,0,430,448,400,444],
[441,429,425,449,431,461,0,436,430,460],
[429,430,441,476,439,443,455,0,426,467],
[468,434,459,442,484,491,461,465,0,459],
[460,433,444,414,427,447,431,424,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,424,429,379,468,458,447,428,451],
[448,0,451,421,414,453,426,411,472,437],
[467,440,0,451,430,452,468,440,433,435],
[462,470,440,0,436,467,500,461,466,473],
[512,477,461,455,0,500,469,448,432,498],
[423,438,439,424,391,0,448,462,387,465],
[433,465,423,391,422,443,0,448,469,445],
[444,480,451,430,443,429,443,0,435,472],
[463,419,458,425,459,504,422,456,0,438],
[440,454,456,418,393,426,446,419,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,491,515,490,488,434,545,488,486],
[462,0,491,487,459,489,344,545,429,459],
[400,400,0,346,430,458,429,345,401,284],
[376,404,545,0,522,546,487,460,434,431],
[401,432,461,369,0,401,398,430,311,342],
[403,402,433,345,490,0,371,433,371,376],
[457,547,462,404,493,520,0,462,461,433],
[346,346,546,431,461,458,429,0,370,345],
[403,462,490,457,580,520,430,521,0,405],
[405,432,607,460,549,515,458,546,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,470,455,447,367,417,424,437,443],
[487,0,481,492,451,473,482,437,455,475],
[421,410,0,404,401,420,426,418,454,437],
[436,399,487,0,447,417,438,409,411,430],
[444,440,490,444,0,467,470,504,443,489],
[524,418,471,474,424,0,455,455,490,470],
[474,409,465,453,421,436,0,442,414,476],
[467,454,473,482,387,436,449,0,408,450],
[454,436,437,480,448,401,477,483,0,467],
[448,416,454,461,402,421,415,441,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,432,450,470,444,443,436,452,447],
[439,0,423,421,449,435,435,422,436,434],
[459,468,0,452,471,444,448,452,447,479],
[441,470,439,0,465,466,449,438,447,464],
[421,442,420,426,0,429,410,439,406,443],
[447,456,447,425,462,0,447,419,425,410],
[448,456,443,442,481,444,0,464,444,442],
[455,469,439,453,452,472,427,0,437,468],
[439,455,444,444,485,466,447,454,0,468],
[444,457,412,427,448,481,449,423,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,406,428,377,397,445,424,437,400],
[499,0,471,450,450,444,500,439,464,458],
[485,420,0,441,410,432,474,438,457,458],
[463,441,450,0,442,423,495,455,466,463],
[514,441,481,449,0,470,514,463,472,475],
[494,447,459,468,421,0,476,441,479,459],
[446,391,417,396,377,415,0,409,428,409],
[467,452,453,436,428,450,482,0,464,446],
[454,427,434,425,419,412,463,427,0,437],
[491,433,433,428,416,432,482,445,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,459,432,472,500,497,483,493,457],
[455,0,443,456,466,499,472,464,469,471],
[432,448,0,441,427,461,468,445,477,452],
[459,435,450,0,476,497,496,462,449,485],
[419,425,464,415,0,467,482,444,443,468],
[391,392,430,394,424,0,449,417,437,393],
[394,419,423,395,409,442,0,423,409,450],
[408,427,446,429,447,474,468,0,469,418],
[398,422,414,442,448,454,482,422,0,454],
[434,420,439,406,423,498,441,473,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,477,443,432,460,436,423,473],
[447,0,482,457,484,491,493,457,425,502],
[442,409,0,439,428,448,429,400,395,429],
[414,434,452,0,407,409,438,404,372,458],
[448,407,463,484,0,442,449,415,461,469],
[459,400,443,482,449,0,437,433,432,470],
[431,398,462,453,442,454,0,427,413,455],
[455,434,491,487,476,458,464,0,455,470],
[468,466,496,519,430,459,478,436,0,450],
[418,389,462,433,422,421,436,421,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,463,473,456,490,496,440,413,502],
[395,0,446,416,440,476,426,416,426,442],
[428,445,0,396,454,422,435,451,418,416],
[418,475,495,0,488,502,478,441,481,457],
[435,451,437,403,0,487,433,442,435,427],
[401,415,469,389,404,0,392,450,442,425],
[395,465,456,413,458,499,0,404,402,417],
[451,475,440,450,449,441,487,0,426,423],
[478,465,473,410,456,449,489,465,0,470],
[389,449,475,434,464,466,474,468,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,458,422,432,425,453,432,461,460],
[429,0,449,440,420,450,439,438,449,451],
[433,442,0,447,443,444,455,439,464,456],
[469,451,444,0,426,438,471,437,440,475],
[459,471,448,465,0,468,467,430,467,441],
[466,441,447,453,423,0,429,453,430,445],
[438,452,436,420,424,462,0,430,467,469],
[459,453,452,454,461,438,461,0,445,452],
[430,442,427,451,424,461,424,446,0,419],
[431,440,435,416,450,446,422,439,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,497,492,500,496,442,472,468,508],
[445,0,486,464,454,472,453,470,446,495],
[394,405,0,434,402,430,431,417,450,451],
[399,427,457,0,450,455,431,453,450,500],
[391,437,489,441,0,445,450,441,430,480],
[395,419,461,436,446,0,449,444,431,473],
[449,438,460,460,441,442,0,446,442,492],
[419,421,474,438,450,447,445,0,437,482],
[423,445,441,441,461,460,449,454,0,462],
[383,396,440,391,411,418,399,409,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,409,464,365,422,448,487,383,468],
[406,0,459,445,383,385,388,506,461,464],
[482,432,0,387,385,460,416,488,450,429],
[427,446,504,0,440,360,445,486,404,466],
[526,508,506,451,0,387,489,452,445,510],
[469,506,431,531,504,0,447,510,487,450],
[443,503,475,446,402,444,0,541,484,483],
[404,385,403,405,439,381,350,0,420,424],
[508,430,441,487,446,404,407,471,0,469],
[423,427,462,425,381,441,408,467,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,444,457,454,433,439,456,450,473],
[480,0,484,469,477,475,479,493,440,478],
[447,407,0,480,474,432,461,458,452,448],
[434,422,411,0,484,424,465,437,456,432],
[437,414,417,407,0,402,438,434,424,431],
[458,416,459,467,489,0,453,435,431,454],
[452,412,430,426,453,438,0,435,420,433],
[435,398,433,454,457,456,456,0,439,428],
[441,451,439,435,467,460,471,452,0,421],
[418,413,443,459,460,437,458,463,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,460,448,436,438,445,454,452,455],
[447,0,462,442,458,444,454,450,462,446],
[431,429,0,423,432,436,434,439,453,447],
[443,449,468,0,463,451,438,474,505,433],
[455,433,459,428,0,443,437,472,456,461],
[453,447,455,440,448,0,449,458,481,434],
[446,437,457,453,454,442,0,450,479,434],
[437,441,452,417,419,433,441,0,464,428],
[439,429,438,386,435,410,412,427,0,433],
[436,445,444,458,430,457,457,463,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,396,467,432,433,423,430,437,412],
[495,0,434,461,417,423,421,426,426,406],
[495,457,0,461,417,438,438,436,444,446],
[424,430,430,0,386,368,425,375,459,415],
[459,474,474,505,0,488,483,500,442,475],
[458,468,453,523,403,0,447,436,448,478],
[468,470,453,466,408,444,0,451,462,443],
[461,465,455,516,391,455,440,0,486,487],
[454,465,447,432,449,443,429,405,0,499],
[479,485,445,476,416,413,448,404,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,490,494,502,486,479,463,462,472],
[469,0,497,459,474,450,470,427,448,474],
[401,394,0,442,436,441,421,462,417,438],
[397,432,449,0,428,423,465,438,415,474],
[389,417,455,463,0,466,474,395,431,435],
[405,441,450,468,425,0,406,426,428,416],
[412,421,470,426,417,485,0,426,399,423],
[428,464,429,453,496,465,465,0,439,475],
[429,443,474,476,460,463,492,452,0,439],
[419,417,453,417,456,475,468,416,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,482,463,467,505,493,424,457,468],
[474,0,486,443,487,441,453,443,465,462],
[409,405,0,427,448,442,453,406,412,438],
[428,448,464,0,458,447,467,433,469,452],
[424,404,443,433,0,481,475,446,478,451],
[386,450,449,444,410,0,462,431,444,459],
[398,438,438,424,416,429,0,416,449,434],
[467,448,485,458,445,460,475,0,483,458],
[434,426,479,422,413,447,442,408,0,428],
[423,429,453,439,440,432,457,433,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,459,456,456,451,463,429,448,459],
[451,0,481,470,473,452,447,442,443,463],
[432,410,0,442,421,443,442,416,401,439],
[435,421,449,0,427,437,421,441,430,451],
[435,418,470,464,0,429,447,430,425,448],
[440,439,448,454,462,0,459,439,446,474],
[428,444,449,470,444,432,0,415,437,439],
[462,449,475,450,461,452,476,0,435,463],
[443,448,490,461,466,445,454,456,0,477],
[432,428,452,440,443,417,452,428,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,459,430,456,404,453,445,425,440],
[429,0,458,434,442,436,453,431,420,433],
[432,433,0,426,443,472,441,455,461,431],
[461,457,465,0,475,424,465,459,432,452],
[435,449,448,416,0,424,429,442,435,405],
[487,455,419,467,467,0,450,474,465,465],
[438,438,450,426,462,441,0,427,442,437],
[446,460,436,432,449,417,464,0,431,434],
[466,471,430,459,456,426,449,460,0,458],
[451,458,460,439,486,426,454,457,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,434,436,448,450,434,447,448,456],
[440,0,442,443,468,457,457,463,455,436],
[457,449,0,433,459,455,449,455,437,457],
[455,448,458,0,447,472,444,460,466,451],
[443,423,432,444,0,455,428,448,450,440],
[441,434,436,419,436,0,435,439,416,437],
[457,434,442,447,463,456,0,451,456,452],
[444,428,436,431,443,452,440,0,433,428],
[443,436,454,425,441,475,435,458,0,438],
[435,455,434,440,451,454,439,463,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,454,456,420,434,453,460,475,469],
[423,0,443,465,412,468,444,472,465,508],
[437,448,0,474,426,447,436,428,411,468],
[435,426,417,0,417,469,465,435,444,446],
[471,479,465,474,0,474,413,480,458,519],
[457,423,444,422,417,0,444,433,418,500],
[438,447,455,426,478,447,0,422,455,458],
[431,419,463,456,411,458,469,0,436,469],
[416,426,480,447,433,473,436,455,0,438],
[422,383,423,445,372,391,433,422,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,439,456,486,444,452,441,429,457],
[453,0,435,417,481,461,447,443,447,451],
[452,456,0,475,475,409,412,436,437,449],
[435,474,416,0,493,448,416,426,430,458],
[405,410,416,398,0,398,450,409,433,423],
[447,430,482,443,493,0,429,457,431,435],
[439,444,479,475,441,462,0,469,462,440],
[450,448,455,465,482,434,422,0,435,454],
[462,444,454,461,458,460,429,456,0,474],
[434,440,442,433,468,456,451,437,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,468,526,444,452,483,449,515,502],
[401,0,463,448,464,415,469,445,492,480],
[423,428,0,427,485,422,458,429,445,460],
[365,443,464,0,458,392,460,434,506,444],
[447,427,406,433,0,416,486,397,463,433],
[439,476,469,499,475,0,458,463,501,446],
[408,422,433,431,405,433,0,381,454,465],
[442,446,462,457,494,428,510,0,472,452],
[376,399,446,385,428,390,437,419,0,443],
[389,411,431,447,458,445,426,439,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,479,470,410,446,512,505,476,458],
[426,0,466,397,397,404,444,426,456,441],
[412,425,0,449,417,419,431,445,429,448],
[421,494,442,0,394,419,452,468,468,465],
[481,494,474,497,0,438,511,477,460,480],
[445,487,472,472,453,0,481,494,448,465],
[379,447,460,439,380,410,0,481,455,445],
[386,465,446,423,414,397,410,0,422,413],
[415,435,462,423,431,443,436,469,0,409],
[433,450,443,426,411,426,446,478,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,450,415,448,424,428,437,461,456],
[469,0,471,420,451,437,472,434,507,456],
[441,420,0,450,415,392,443,437,441,462],
[476,471,441,0,434,462,467,436,495,451],
[443,440,476,457,0,421,479,438,522,457],
[467,454,499,429,470,0,489,463,479,470],
[463,419,448,424,412,402,0,458,444,424],
[454,457,454,455,453,428,433,0,504,436],
[430,384,450,396,369,412,447,387,0,407],
[435,435,429,440,434,421,467,455,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,433,483,506,340,382,389,387,460],
[456,0,507,575,648,434,502,457,456,550],
[458,384,0,554,575,437,549,578,483,503],
[408,316,337,0,504,391,384,462,364,435],
[385,243,316,387,0,246,313,314,340,335],
[551,457,454,500,645,0,427,577,479,551],
[509,389,342,507,578,464,0,342,460,460],
[502,434,313,429,577,314,549,0,412,406],
[504,435,408,527,551,412,431,479,0,503],
[431,341,388,456,556,340,431,485,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,437,475,454,504,459,501,466,471],
[456,0,431,422,476,484,427,450,469,445],
[454,460,0,446,493,471,440,471,464,448],
[416,469,445,0,467,444,385,468,450,415],
[437,415,398,424,0,463,379,428,420,412],
[387,407,420,447,428,0,376,451,403,409],
[432,464,451,506,512,515,0,459,495,490],
[390,441,420,423,463,440,432,0,455,466],
[425,422,427,441,471,488,396,436,0,460],
[420,446,443,476,479,482,401,425,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,395,516,462,514,362,529,376,374],
[356,0,408,462,444,545,355,425,325,404],
[496,483,0,547,545,515,449,461,394,373],
[375,429,344,0,431,463,309,413,358,342],
[429,447,346,460,0,481,393,361,426,397],
[377,346,376,428,410,0,340,412,325,428],
[529,536,442,582,498,551,0,478,515,408],
[362,466,430,478,530,479,413,0,394,376],
[515,566,497,533,465,566,376,497,0,512],
[517,487,518,549,494,463,483,515,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,459,476,435,464,457,442,455,445],
[429,0,440,465,448,444,469,449,440,439],
[432,451,0,466,423,457,447,459,458,432],
[415,426,425,0,405,435,423,429,450,433],
[456,443,468,486,0,465,453,458,444,441],
[427,447,434,456,426,0,423,445,458,450],
[434,422,444,468,438,468,0,441,454,450],
[449,442,432,462,433,446,450,0,451,444],
[436,451,433,441,447,433,437,440,0,417],
[446,452,459,458,450,441,441,447,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,473,447,444,434,407,406,434,414],
[444,0,470,463,423,446,418,428,428,414],
[418,421,0,440,407,430,422,407,413,388],
[444,428,451,0,437,455,450,442,428,420],
[447,468,484,454,0,463,447,445,467,455],
[457,445,461,436,428,0,456,453,442,426],
[484,473,469,441,444,435,0,431,461,443],
[485,463,484,449,446,438,460,0,457,466],
[457,463,478,463,424,449,430,434,0,429],
[477,477,503,471,436,465,448,425,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,437,468,437,436,508,467,462,418],
[434,0,453,460,452,426,437,446,465,446],
[454,438,0,459,443,464,463,424,458,447],
[423,431,432,0,433,405,414,426,442,410],
[454,439,448,458,0,425,452,431,460,431],
[455,465,427,486,466,0,459,464,480,446],
[383,454,428,477,439,432,0,455,454,425],
[424,445,467,465,460,427,436,0,469,426],
[429,426,433,449,431,411,437,422,0,432],
[473,445,444,481,460,445,466,465,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,426,462,419,479,430,417,467,433],
[469,0,460,475,464,470,450,458,468,440],
[465,431,0,466,432,444,411,473,478,436],
[429,416,425,0,436,448,409,431,463,432],
[472,427,459,455,0,470,433,458,488,446],
[412,421,447,443,421,0,404,444,471,404],
[461,441,480,482,458,487,0,474,472,440],
[474,433,418,460,433,447,417,0,472,421],
[424,423,413,428,403,420,419,419,0,428],
[458,451,455,459,445,487,451,470,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,420,413,433,452,470,427,428,436],
[466,0,448,438,449,471,474,457,428,461],
[471,443,0,429,437,446,475,473,442,464],
[478,453,462,0,455,452,505,462,435,456],
[458,442,454,436,0,450,477,467,441,442],
[439,420,445,439,441,0,462,473,458,455],
[421,417,416,386,414,429,0,437,409,434],
[464,434,418,429,424,418,454,0,431,448],
[463,463,449,456,450,433,482,460,0,460],
[455,430,427,435,449,436,457,443,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,424,436,454,425,439,439,421,426],
[415,0,421,402,409,416,423,431,401,414],
[467,470,0,428,441,429,420,423,421,421],
[455,489,463,0,459,445,434,455,443,451],
[437,482,450,432,0,435,437,454,456,437],
[466,475,462,446,456,0,437,440,419,443],
[452,468,471,457,454,454,0,444,449,453],
[452,460,468,436,437,451,447,0,428,448],
[470,490,470,448,435,472,442,463,0,449],
[465,477,470,440,454,448,438,443,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,426,425,436,408,443,444,444,435],
[460,0,420,430,429,404,439,460,446,434],
[465,471,0,437,455,439,451,455,452,418],
[466,461,454,0,453,456,461,461,465,443],
[455,462,436,438,0,429,462,459,459,449],
[483,487,452,435,462,0,465,467,454,461],
[448,452,440,430,429,426,0,457,436,446],
[447,431,436,430,432,424,434,0,445,429],
[447,445,439,426,432,437,455,446,0,433],
[456,457,473,448,442,430,445,462,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,477,465,470,487,467,448,440,468],
[403,0,446,452,447,441,446,428,438,455],
[414,445,0,435,449,442,440,432,445,408],
[426,439,456,0,466,442,474,447,441,448],
[421,444,442,425,0,439,454,435,448,439],
[404,450,449,449,452,0,448,444,430,450],
[424,445,451,417,437,443,0,438,455,452],
[443,463,459,444,456,447,453,0,464,437],
[451,453,446,450,443,461,436,427,0,434],
[423,436,483,443,452,441,439,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,429,475,459,455,459,460,456,445],
[443,0,447,504,495,467,447,459,448,447],
[462,444,0,477,483,480,458,462,459,457],
[416,387,414,0,418,422,415,436,412,432],
[432,396,408,473,0,426,455,431,435,414],
[436,424,411,469,465,0,438,462,432,447],
[432,444,433,476,436,453,0,454,440,447],
[431,432,429,455,460,429,437,0,431,411],
[435,443,432,479,456,459,451,460,0,458],
[446,444,434,459,477,444,444,480,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,462,449,444,437,444,426,470,474],
[433,0,444,448,445,429,443,454,453,490],
[429,447,0,436,421,445,435,431,452,441],
[442,443,455,0,457,453,451,441,448,474],
[447,446,470,434,0,441,458,457,484,457],
[454,462,446,438,450,0,483,449,446,449],
[447,448,456,440,433,408,0,448,465,470],
[465,437,460,450,434,442,443,0,439,444],
[421,438,439,443,407,445,426,452,0,476],
[417,401,450,417,434,442,421,447,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,471,480,457,464,459,473,472,472],
[446,0,463,495,423,455,472,487,450,470],
[420,428,0,464,453,446,451,458,463,462],
[411,396,427,0,429,426,432,441,434,435],
[434,468,438,462,0,444,459,460,453,479],
[427,436,445,465,447,0,461,450,452,479],
[432,419,440,459,432,430,0,461,452,446],
[418,404,433,450,431,441,430,0,455,471],
[419,441,428,457,438,439,439,436,0,451],
[419,421,429,456,412,412,445,420,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,448,466,412,400,395,437,403,459],
[464,0,445,441,454,463,442,512,435,480],
[443,446,0,398,506,431,404,490,433,474],
[425,450,493,0,463,459,422,483,457,492],
[479,437,385,428,0,423,441,457,397,455],
[491,428,460,432,468,0,409,498,415,489],
[496,449,487,469,450,482,0,529,435,489],
[454,379,401,408,434,393,362,0,393,437],
[488,456,458,434,494,476,456,498,0,501],
[432,411,417,399,436,402,402,454,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,478,435,441,445,439,465,445,451],
[439,0,468,428,451,461,427,473,436,427],
[413,423,0,413,410,442,412,444,419,409],
[456,463,478,0,459,466,444,481,453,452],
[450,440,481,432,0,450,441,456,446,414],
[446,430,449,425,441,0,420,442,451,441],
[452,464,479,447,450,471,0,474,463,435],
[426,418,447,410,435,449,417,0,417,392],
[446,455,472,438,445,440,428,474,0,437],
[440,464,482,439,477,450,456,499,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,455,438,410,422,431,446,450,454],
[459,0,453,452,434,446,447,477,454,471],
[436,438,0,433,420,424,456,470,439,442],
[453,439,458,0,422,438,450,459,457,469],
[481,457,471,469,0,445,481,493,472,476],
[469,445,467,453,446,0,473,488,442,496],
[460,444,435,441,410,418,0,442,427,452],
[445,414,421,432,398,403,449,0,436,436],
[441,437,452,434,419,449,464,455,0,458],
[437,420,449,422,415,395,439,455,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,413,342,343,548,409,412,410,340],
[411,0,411,342,411,615,342,409,410,477],
[478,480,0,546,408,614,339,478,545,546],
[549,549,345,0,481,685,546,480,479,545],
[548,480,483,410,0,617,204,481,548,545],
[343,276,277,206,274,0,204,478,411,272],
[482,549,552,345,687,687,0,551,616,614],
[479,482,413,411,410,413,340,0,409,477],
[481,481,346,412,343,480,275,482,0,546],
[551,414,345,346,346,619,277,414,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,475,443,468,452,476,444,448,435],
[455,0,439,441,433,432,456,434,426,406],
[416,452,0,432,461,435,434,418,409,422],
[448,450,459,0,468,450,462,437,425,449],
[423,458,430,423,0,435,445,430,417,427],
[439,459,456,441,456,0,457,436,439,427],
[415,435,457,429,446,434,0,431,416,408],
[447,457,473,454,461,455,460,0,443,438],
[443,465,482,466,474,452,475,448,0,453],
[456,485,469,442,464,464,483,453,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,427,470,434,466,467,512,413],
[449,0,460,521,489,446,472,490,515,443],
[446,431,0,449,463,447,424,460,503,446],
[464,370,442,0,435,417,448,444,488,452],
[421,402,428,456,0,447,411,473,463,411],
[457,445,444,474,444,0,431,460,503,441],
[425,419,467,443,480,460,0,463,457,418],
[424,401,431,447,418,431,428,0,429,399],
[379,376,388,403,428,388,434,462,0,405],
[478,448,445,439,480,450,473,492,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,454,465,489,479,464,442,477,452],
[440,0,438,457,482,455,445,459,461,449],
[437,453,0,465,474,472,447,453,467,455],
[426,434,426,0,478,475,458,433,446,443],
[402,409,417,413,0,445,436,434,451,434],
[412,436,419,416,446,0,429,425,438,433],
[427,446,444,433,455,462,0,450,444,444],
[449,432,438,458,457,466,441,0,456,449],
[414,430,424,445,440,453,447,435,0,429],
[439,442,436,448,457,458,447,442,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,415,413,415,409,428,407,384,452],
[488,0,432,436,483,471,445,455,413,463],
[476,459,0,429,456,478,469,456,414,449],
[478,455,462,0,467,497,480,441,464,436],
[476,408,435,424,0,459,468,448,437,446],
[482,420,413,394,432,0,440,459,397,425],
[463,446,422,411,423,451,0,483,463,443],
[484,436,435,450,443,432,408,0,428,442],
[507,478,477,427,454,494,428,463,0,447],
[439,428,442,455,445,466,448,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,436,477,437,501,432,425,474,460],
[427,0,426,469,478,466,418,414,421,422],
[455,465,0,458,481,471,392,439,419,443],
[414,422,433,0,442,463,408,409,423,436],
[454,413,410,449,0,452,396,395,387,414],
[390,425,420,428,439,0,376,395,407,405],
[459,473,499,483,495,515,0,448,467,433],
[466,477,452,482,496,496,443,0,467,434],
[417,470,472,468,504,484,424,424,0,442],
[431,469,448,455,477,486,458,457,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,481,435,456,430,469,481,475,433],
[475,0,444,464,441,448,482,492,454,459],
[410,447,0,477,473,428,460,478,482,419],
[456,427,414,0,478,406,435,458,439,445],
[435,450,418,413,0,433,442,476,441,445],
[461,443,463,485,458,0,466,490,488,458],
[422,409,431,456,449,425,0,451,419,394],
[410,399,413,433,415,401,440,0,415,416],
[416,437,409,452,450,403,472,476,0,459],
[458,432,472,446,446,433,497,475,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,507,374,479,390,456,405,526,451],
[384,0,406,335,357,289,355,321,355,317],
[384,485,0,405,443,340,437,389,435,385],
[517,556,486,0,525,541,506,433,438,534],
[412,534,448,366,0,440,399,434,451,417],
[501,602,551,350,451,0,470,461,520,518],
[435,536,454,385,492,421,0,417,439,451],
[486,570,502,458,457,430,474,0,473,425],
[365,536,456,453,440,371,452,418,0,453],
[440,574,506,357,474,373,440,466,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,494,477,449,444,479,452,437,483],
[430,0,483,433,463,471,499,471,461,477],
[397,408,0,426,416,396,427,422,418,441],
[414,458,465,0,458,441,485,438,452,430],
[442,428,475,433,0,446,435,428,432,444],
[447,420,495,450,445,0,453,440,469,467],
[412,392,464,406,456,438,0,425,432,434],
[439,420,469,453,463,451,466,0,446,437],
[454,430,473,439,459,422,459,445,0,471],
[408,414,450,461,447,424,457,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,495,469,483,477,466,431,513,388],
[395,0,403,489,378,479,394,402,451,438],
[396,488,0,507,507,504,441,361,507,456],
[422,402,384,0,513,433,359,367,514,389],
[408,513,384,378,0,478,342,387,386,419],
[414,412,387,458,413,0,441,379,441,348],
[425,497,450,532,549,450,0,386,501,455],
[460,489,530,524,504,512,505,0,548,413],
[378,440,384,377,505,450,390,343,0,363],
[503,453,435,502,472,543,436,478,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,418,458,434,435,464,447,463,431],
[441,0,423,464,432,415,456,443,440,435],
[473,468,0,469,449,444,450,467,451,449],
[433,427,422,0,417,425,447,442,447,425],
[457,459,442,474,0,435,455,461,439,446],
[456,476,447,466,456,0,465,460,458,445],
[427,435,441,444,436,426,0,440,445,435],
[444,448,424,449,430,431,451,0,452,426],
[428,451,440,444,452,433,446,439,0,426],
[460,456,442,466,445,446,456,465,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,506,526,503,520,476,455,448,476],
[463,0,538,463,477,484,457,450,415,455],
[385,353,0,456,485,424,382,422,397,403],
[365,428,435,0,465,458,488,472,422,478],
[388,414,406,426,0,502,405,425,433,441],
[371,407,467,433,389,0,407,390,403,433],
[415,434,509,403,486,484,0,457,431,459],
[436,441,469,419,466,501,434,0,450,455],
[443,476,494,469,458,488,460,441,0,466],
[415,436,488,413,450,458,432,436,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,471,473,422,423,368,523,522,316],
[418,0,523,470,364,419,626,628,573,523],
[420,368,0,420,472,472,365,471,418,366],
[418,421,471,0,419,474,418,680,468,420],
[469,527,419,472,0,422,523,576,574,473],
[468,472,419,417,469,0,417,626,415,365],
[523,265,526,473,368,474,0,576,472,473],
[368,263,420,211,315,265,315,0,415,262],
[369,318,473,423,317,476,419,476,0,367],
[575,368,525,471,418,526,418,629,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,417,440,431,447,421,429,425,454],
[431,0,428,432,426,416,416,444,423,451],
[474,463,0,440,445,457,453,473,443,469],
[451,459,451,0,429,456,424,473,434,484],
[460,465,446,462,0,465,441,468,438,459],
[444,475,434,435,426,0,432,449,438,449],
[470,475,438,467,450,459,0,457,457,464],
[462,447,418,418,423,442,434,0,407,460],
[466,468,448,457,453,453,434,484,0,481],
[437,440,422,407,432,442,427,431,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,423,448,459,439,483,446,451,455],
[458,0,433,431,432,448,477,452,432,442],
[468,458,0,434,445,441,483,448,460,454],
[443,460,457,0,447,443,473,459,438,452],
[432,459,446,444,0,440,465,429,456,456],
[452,443,450,448,451,0,478,429,460,469],
[408,414,408,418,426,413,0,413,412,433],
[445,439,443,432,462,462,478,0,439,439],
[440,459,431,453,435,431,479,452,0,456],
[436,449,437,439,435,422,458,452,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,499,454,460,448,433,454,482,436],
[439,0,484,446,468,435,435,465,455,466],
[392,407,0,423,460,407,425,439,457,413],
[437,445,468,0,468,410,452,438,462,452],
[431,423,431,423,0,427,436,439,438,431],
[443,456,484,481,464,0,443,463,474,453],
[458,456,466,439,455,448,0,469,456,454],
[437,426,452,453,452,428,422,0,471,454],
[409,436,434,429,453,417,435,420,0,418],
[455,425,478,439,460,438,437,437,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,490,434,455,388,405,457,436,442],
[426,0,440,408,421,394,394,480,415,426],
[401,451,0,445,373,419,376,489,423,405],
[457,483,446,0,415,421,405,453,443,457],
[436,470,518,476,0,428,377,524,460,416],
[503,497,472,470,463,0,443,533,447,483],
[486,497,515,486,514,448,0,524,462,443],
[434,411,402,438,367,358,367,0,367,413],
[455,476,468,448,431,444,429,524,0,498],
[449,465,486,434,475,408,448,478,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,468,486,486,472,479,462,433,464],
[428,0,436,476,435,432,441,449,420,450],
[423,455,0,478,458,444,483,443,453,474],
[405,415,413,0,417,421,426,407,393,424],
[405,456,433,474,0,450,468,443,427,454],
[419,459,447,470,441,0,451,445,420,460],
[412,450,408,465,423,440,0,421,429,463],
[429,442,448,484,448,446,470,0,424,449],
[458,471,438,498,464,471,462,467,0,472],
[427,441,417,467,437,431,428,442,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,514,465,461,472,504,463,454,436],
[420,0,469,437,447,441,450,463,440,427],
[377,422,0,447,451,424,439,439,450,404],
[426,454,444,0,456,442,492,419,450,450],
[430,444,440,435,0,420,486,408,413,465],
[419,450,467,449,471,0,460,459,446,453],
[387,441,452,399,405,431,0,436,402,431],
[428,428,452,472,483,432,455,0,484,447],
[437,451,441,441,478,445,489,407,0,462],
[455,464,487,441,426,438,460,444,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,461,443,414,413,421,435,445,453],
[459,0,434,417,422,411,400,425,443,432],
[430,457,0,454,419,410,404,419,428,448],
[448,474,437,0,445,409,444,436,443,478],
[477,469,472,446,0,431,428,439,477,478],
[478,480,481,482,460,0,455,449,461,430],
[470,491,487,447,463,436,0,436,469,488],
[456,466,472,455,452,442,455,0,486,444],
[446,448,463,448,414,430,422,405,0,440],
[438,459,443,413,413,461,403,447,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,332,367,396,417,408,381,388,393],
[525,0,401,468,417,495,472,407,473,484],
[559,490,0,465,435,507,443,418,503,471],
[524,423,426,0,472,513,500,454,485,467],
[495,474,456,419,0,479,465,417,460,436],
[474,396,384,378,412,0,433,447,422,435],
[483,419,448,391,426,458,0,413,480,436],
[510,484,473,437,474,444,478,0,424,463],
[503,418,388,406,431,469,411,467,0,439],
[498,407,420,424,455,456,455,428,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,475,487,495,461,480,481,489,457],
[463,0,446,446,423,449,469,415,468,427],
[416,445,0,417,465,498,459,408,473,417],
[404,445,474,0,485,468,434,440,442,412],
[396,468,426,406,0,422,461,427,436,390],
[430,442,393,423,469,0,456,444,457,426],
[411,422,432,457,430,435,0,421,481,429],
[410,476,483,451,464,447,470,0,516,442],
[402,423,418,449,455,434,410,375,0,409],
[434,464,474,479,501,465,462,449,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,473,486,438,459,485,446,454,443],
[408,0,430,467,425,437,460,438,405,418],
[418,461,0,459,423,446,450,445,438,448],
[405,424,432,0,407,448,461,439,424,442],
[453,466,468,484,0,469,471,475,427,465],
[432,454,445,443,422,0,460,416,421,424],
[406,431,441,430,420,431,0,401,407,420],
[445,453,446,452,416,475,490,0,442,429],
[437,486,453,467,464,470,484,449,0,448],
[448,473,443,449,426,467,471,462,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,438,459,486,446,438,426,445,443],
[463,0,437,494,505,508,463,461,470,457],
[453,454,0,488,468,473,419,455,457,411],
[432,397,403,0,424,441,397,350,452,440],
[405,386,423,467,0,458,427,411,424,404],
[445,383,418,450,433,0,444,407,428,415],
[453,428,472,494,464,447,0,464,462,454],
[465,430,436,541,480,484,427,0,474,429],
[446,421,434,439,467,463,429,417,0,411],
[448,434,480,451,487,476,437,462,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,450,441,443,430,447,444,415,446],
[441,0,424,444,446,386,412,441,415,448],
[441,467,0,448,446,446,447,453,428,458],
[450,447,443,0,436,412,449,456,424,438],
[448,445,445,455,0,446,433,447,426,466],
[461,505,445,479,445,0,443,438,447,459],
[444,479,444,442,458,448,0,463,418,437],
[447,450,438,435,444,453,428,0,428,435],
[476,476,463,467,465,444,473,463,0,460],
[445,443,433,453,425,432,454,456,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,438,425,457,443,437,453,446,445],
[439,0,445,451,466,448,449,454,488,455],
[453,446,0,438,454,438,450,444,465,460],
[466,440,453,0,459,453,445,461,453,465],
[434,425,437,432,0,443,431,451,444,459],
[448,443,453,438,448,0,410,465,480,455],
[454,442,441,446,460,481,0,473,458,460],
[438,437,447,430,440,426,418,0,456,446],
[445,403,426,438,447,411,433,435,0,452],
[446,436,431,426,432,436,431,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,444,431,423,469,465,478,458,455],
[463,0,444,428,446,443,454,452,425,436],
[447,447,0,465,437,460,440,447,440,415],
[460,463,426,0,424,437,433,451,440,442],
[468,445,454,467,0,476,467,460,451,465],
[422,448,431,454,415,0,453,459,439,435],
[426,437,451,458,424,438,0,446,439,411],
[413,439,444,440,431,432,445,0,435,427],
[433,466,451,451,440,452,452,456,0,432],
[436,455,476,449,426,456,480,464,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,461,439,443,465,446,440,434,487],
[426,0,462,447,483,465,462,433,429,487],
[430,429,0,452,444,451,449,438,453,479],
[452,444,439,0,432,451,444,427,446,460],
[448,408,447,459,0,440,449,447,429,471],
[426,426,440,440,451,0,451,464,440,465],
[445,429,442,447,442,440,0,455,434,466],
[451,458,453,464,444,427,436,0,433,472],
[457,462,438,445,462,451,457,458,0,467],
[404,404,412,431,420,426,425,419,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,469,455,450,470,486,483,482,472],
[448,0,412,409,438,415,445,453,445,425],
[422,479,0,460,450,451,468,451,462,458],
[436,482,431,0,480,446,501,451,467,457],
[441,453,441,411,0,444,453,453,464,461],
[421,476,440,445,447,0,436,459,452,457],
[405,446,423,390,438,455,0,425,421,453],
[408,438,440,440,438,432,466,0,448,451],
[409,446,429,424,427,439,470,443,0,453],
[419,466,433,434,430,434,438,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,393,402,438,392,425,403,487,447],
[457,0,433,454,485,511,412,441,559,531],
[498,458,0,473,499,520,440,446,549,494],
[489,437,418,0,448,458,449,429,521,494],
[453,406,392,443,0,438,403,411,515,469],
[499,380,371,433,453,0,395,376,490,459],
[466,479,451,442,488,496,0,470,523,510],
[488,450,445,462,480,515,421,0,512,469],
[404,332,342,370,376,401,368,379,0,448],
[444,360,397,397,422,432,381,422,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,466,460,454,425,419,460,432,444],
[435,0,444,441,441,413,438,449,430,425],
[425,447,0,443,440,437,408,439,397,431],
[431,450,448,0,447,425,408,450,422,417],
[437,450,451,444,0,425,413,445,423,441],
[466,478,454,466,466,0,434,466,437,436],
[472,453,483,483,478,457,0,477,434,457],
[431,442,452,441,446,425,414,0,424,425],
[459,461,494,469,468,454,457,467,0,445],
[447,466,460,474,450,455,434,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,428,434,447,464,445,407,432,415],
[457,0,451,436,463,498,469,432,445,460],
[463,440,0,422,445,489,470,447,460,407],
[457,455,469,0,482,504,457,442,445,444],
[444,428,446,409,0,454,432,375,414,395],
[427,393,402,387,437,0,419,402,427,392],
[446,422,421,434,459,472,0,441,453,429],
[484,459,444,449,516,489,450,0,461,453],
[459,446,431,446,477,464,438,430,0,444],
[476,431,484,447,496,499,462,438,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,441,443,402,443,412,440,429,429],
[460,0,457,444,422,444,447,437,449,435],
[450,434,0,431,436,420,420,442,434,449],
[448,447,460,0,431,457,438,434,466,455],
[489,469,455,460,0,465,449,445,490,455],
[448,447,471,434,426,0,425,433,449,435],
[479,444,471,453,442,466,0,449,467,450],
[451,454,449,457,446,458,442,0,478,466],
[462,442,457,425,401,442,424,413,0,433],
[462,456,442,436,436,456,441,425,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,425,435,455,458,452,439,458,454],
[474,0,457,442,468,482,456,463,463,468],
[466,434,0,453,468,478,472,455,462,476],
[456,449,438,0,466,450,455,450,473,481],
[436,423,423,425,0,459,462,429,445,461],
[433,409,413,441,432,0,449,418,435,449],
[439,435,419,436,429,442,0,439,454,461],
[452,428,436,441,462,473,452,0,455,467],
[433,428,429,418,446,456,437,436,0,457],
[437,423,415,410,430,442,430,424,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,427,447,445,440,450,435,474,454],
[457,0,422,427,484,418,443,441,477,407],
[464,469,0,479,490,487,451,445,492,439],
[444,464,412,0,489,428,449,470,489,410],
[446,407,401,402,0,406,402,403,437,404],
[451,473,404,463,485,0,457,462,487,473],
[441,448,440,442,489,434,0,467,469,406],
[456,450,446,421,488,429,424,0,468,423],
[417,414,399,402,454,404,422,423,0,375],
[437,484,452,481,487,418,485,468,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,429,446,446,453,425,436,439,448],
[465,0,438,458,465,453,429,444,451,449],
[462,453,0,470,475,443,444,458,481,460],
[445,433,421,0,458,458,464,442,464,471],
[445,426,416,433,0,441,455,452,469,450],
[438,438,448,433,450,0,429,435,454,457],
[466,462,447,427,436,462,0,430,463,453],
[455,447,433,449,439,456,461,0,467,434],
[452,440,410,427,422,437,428,424,0,431],
[443,442,431,420,441,434,438,457,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,402,440,425,462,401,472,432,417],
[446,0,433,456,396,401,438,450,410,385],
[489,458,0,475,480,448,457,504,445,448],
[451,435,416,0,438,448,438,477,431,413],
[466,495,411,453,0,468,472,480,439,457],
[429,490,443,443,423,0,470,476,432,423],
[490,453,434,453,419,421,0,496,437,444],
[419,441,387,414,411,415,395,0,433,396],
[459,481,446,460,452,459,454,458,0,428],
[474,506,443,478,434,468,447,495,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,442,455,451,402,436,436,432,424],
[468,0,441,420,441,404,428,446,450,407],
[449,450,0,466,435,406,439,429,440,439],
[436,471,425,0,442,422,424,417,442,433],
[440,450,456,449,0,430,448,436,466,480],
[489,487,485,469,461,0,435,446,458,457],
[455,463,452,467,443,456,0,441,451,463],
[455,445,462,474,455,445,450,0,469,491],
[459,441,451,449,425,433,440,422,0,425],
[467,484,452,458,411,434,428,400,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,456,377,458,413,389,354,455,468],
[391,0,494,366,428,447,411,470,477,428],
[435,397,0,424,512,433,469,428,434,417],
[514,525,467,0,510,450,470,425,490,556],
[433,463,379,381,0,417,334,348,328,462],
[478,444,458,441,474,0,424,444,434,506],
[502,480,422,421,557,467,0,512,417,508],
[537,421,463,466,543,447,379,0,461,432],
[436,414,457,401,563,457,474,430,0,477],
[423,463,474,335,429,385,383,459,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,447,423,439,434,464,416,464,446],
[428,0,405,428,418,397,430,397,426,446],
[444,486,0,454,440,426,467,436,452,456],
[468,463,437,0,423,410,451,443,460,457],
[452,473,451,468,0,438,452,458,480,479],
[457,494,465,481,453,0,476,436,470,477],
[427,461,424,440,439,415,0,434,446,441],
[475,494,455,448,433,455,457,0,481,466],
[427,465,439,431,411,421,445,410,0,440],
[445,445,435,434,412,414,450,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,501,467,485,461,420,455,455,533],
[414,0,409,444,437,436,399,431,432,479],
[390,482,0,442,435,463,396,439,426,466],
[424,447,449,0,442,482,450,450,448,475],
[406,454,456,449,0,466,396,407,416,482],
[430,455,428,409,425,0,365,419,425,468],
[471,492,495,441,495,526,0,485,465,524],
[436,460,452,441,484,472,406,0,442,534],
[436,459,465,443,475,466,426,449,0,495],
[358,412,425,416,409,423,367,357,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,441,418,426,439,477,424,402,445],
[434,0,421,417,467,457,437,450,397,445],
[450,470,0,426,447,442,475,451,429,458],
[473,474,465,0,460,457,486,445,462,471],
[465,424,444,431,0,447,481,439,441,494],
[452,434,449,434,444,0,471,445,408,473],
[414,454,416,405,410,420,0,444,435,455],
[467,441,440,446,452,446,447,0,463,472],
[489,494,462,429,450,483,456,428,0,461],
[446,446,433,420,397,418,436,419,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,425,470,411,434,437,438,438,438],
[450,0,425,458,443,433,429,440,456,424],
[466,466,0,471,443,447,451,463,443,461],
[421,433,420,0,428,437,434,443,435,438],
[480,448,448,463,0,454,434,454,445,432],
[457,458,444,454,437,0,446,452,433,443],
[454,462,440,457,457,445,0,461,453,465],
[453,451,428,448,437,439,430,0,431,434],
[453,435,448,456,446,458,438,460,0,438],
[453,467,430,453,459,448,426,457,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,451,412,451,433,441,445,436,430],
[440,0,444,446,435,441,427,430,448,464],
[440,447,0,422,435,455,453,451,450,423],
[479,445,469,0,466,474,460,439,449,431],
[440,456,456,425,0,429,432,453,472,431],
[458,450,436,417,462,0,438,438,469,427],
[450,464,438,431,459,453,0,463,425,424],
[446,461,440,452,438,453,428,0,439,425],
[455,443,441,442,419,422,466,452,0,438],
[461,427,468,460,460,464,467,466,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,429,433,499,460,440,448,437,387],
[449,0,479,460,505,441,434,440,407,431],
[462,412,0,460,503,464,418,449,440,440],
[458,431,431,0,450,427,428,459,441,384],
[392,386,388,441,0,465,413,421,393,403],
[431,450,427,464,426,0,434,467,391,423],
[451,457,473,463,478,457,0,432,413,447],
[443,451,442,432,470,424,459,0,420,404],
[454,484,451,450,498,500,478,471,0,432],
[504,460,451,507,488,468,444,487,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,507,431,484,463,418,437,388,482],
[493,0,536,458,538,512,491,472,392,500],
[384,355,0,392,423,472,409,381,364,450],
[460,433,499,0,533,487,455,443,446,450],
[407,353,468,358,0,486,425,416,402,480],
[428,379,419,404,405,0,392,375,429,452],
[473,400,482,436,466,499,0,456,412,463],
[454,419,510,448,475,516,435,0,407,518],
[503,499,527,445,489,462,479,484,0,437],
[409,391,441,441,411,439,428,373,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,479,424,440,491,460,468,436,421],
[458,0,465,451,442,452,442,453,441,430],
[412,426,0,456,421,422,417,436,421,425],
[467,440,435,0,434,459,457,439,390,436],
[451,449,470,457,0,479,459,476,431,433],
[400,439,469,432,412,0,427,429,408,417],
[431,449,474,434,432,464,0,432,408,455],
[423,438,455,452,415,462,459,0,450,436],
[455,450,470,501,460,483,483,441,0,439],
[470,461,466,455,458,474,436,455,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,492,469,489,450,443,456,442,478],
[462,0,463,491,481,448,443,480,449,478],
[399,428,0,435,467,453,439,440,455,433],
[422,400,456,0,500,432,451,454,429,460],
[402,410,424,391,0,390,434,415,391,430],
[441,443,438,459,501,0,438,465,439,495],
[448,448,452,440,457,453,0,472,460,463],
[435,411,451,437,476,426,419,0,407,446],
[449,442,436,462,500,452,431,484,0,461],
[413,413,458,431,461,396,428,445,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,470,391,422,479,496,420,451,432],
[425,0,432,422,411,438,491,408,432,443],
[421,459,0,438,417,456,487,409,420,442],
[500,469,453,0,423,492,471,461,434,461],
[469,480,474,468,0,497,508,421,464,461],
[412,453,435,399,394,0,432,410,392,427],
[395,400,404,420,383,459,0,394,437,411],
[471,483,482,430,470,481,497,0,440,463],
[440,459,471,457,427,499,454,451,0,456],
[459,448,449,430,430,464,480,428,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,492,397,463,525,440,485,440,508],
[495,0,443,510,524,533,458,496,483,477],
[399,448,0,460,459,496,391,459,381,420],
[494,381,431,0,524,511,500,459,448,453],
[428,367,432,367,0,437,457,450,404,415],
[366,358,395,380,454,0,363,374,361,425],
[451,433,500,391,434,528,0,460,392,502],
[406,395,432,432,441,517,431,0,493,446],
[451,408,510,443,487,530,499,398,0,452],
[383,414,471,438,476,466,389,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,434,479,448,408,414,419,409,471],
[445,0,478,512,471,441,465,473,463,475],
[457,413,0,449,441,470,397,428,423,462],
[412,379,442,0,450,372,451,473,417,465],
[443,420,450,441,0,393,423,404,418,426],
[483,450,421,519,498,0,524,465,477,509],
[477,426,494,440,468,367,0,449,463,509],
[472,418,463,418,487,426,442,0,425,410],
[482,428,468,474,473,414,428,466,0,473],
[420,416,429,426,465,382,382,481,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,468,462,470,436,445,446,443,458],
[428,0,424,445,430,429,428,414,397,411],
[423,467,0,476,444,436,424,448,439,446],
[429,446,415,0,446,426,465,436,438,437],
[421,461,447,445,0,419,437,417,426,429],
[455,462,455,465,472,0,456,453,439,430],
[446,463,467,426,454,435,0,417,441,433],
[445,477,443,455,474,438,474,0,452,441],
[448,494,452,453,465,452,450,439,0,446],
[433,480,445,454,462,461,458,450,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,449,481,537,523,439,458,475,471],
[420,0,461,561,519,432,485,468,434,441],
[442,430,0,403,463,530,456,365,408,445],
[410,330,488,0,391,454,453,430,381,392],
[354,372,428,500,0,454,424,403,420,480],
[368,459,361,437,437,0,469,412,433,415],
[452,406,435,438,467,422,0,417,418,371],
[433,423,526,461,488,479,474,0,406,434],
[416,457,483,510,471,458,473,485,0,416],
[420,450,446,499,411,476,520,457,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,460,457,478,460,437,433,478,475],
[428,0,463,447,462,440,456,454,437,452],
[431,428,0,452,467,420,440,402,442,465],
[434,444,439,0,475,459,471,431,429,465],
[413,429,424,416,0,428,445,443,414,449],
[431,451,471,432,463,0,493,431,460,504],
[454,435,451,420,446,398,0,398,402,420],
[458,437,489,460,448,460,493,0,449,496],
[413,454,449,462,477,431,489,442,0,434],
[416,439,426,426,442,387,471,395,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,440,412,469,445,438,433,430],
[447,0,444,441,426,465,463,457,436,442],
[438,447,0,452,418,465,449,442,440,419],
[451,450,439,0,444,454,437,435,461,448],
[479,465,473,447,0,476,477,474,444,440],
[422,426,426,437,415,0,447,436,425,423],
[446,428,442,454,414,444,0,436,404,422],
[453,434,449,456,417,455,455,0,439,410],
[458,455,451,430,447,466,487,452,0,440],
[461,449,472,443,451,468,469,481,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,442,469,461,483,474,430,464,434],
[413,0,416,430,463,426,452,396,427,416],
[449,475,0,437,457,465,444,405,444,432],
[422,461,454,0,472,453,461,423,459,454],
[430,428,434,419,0,442,448,397,419,428],
[408,465,426,438,449,0,458,399,435,409],
[417,439,447,430,443,433,0,390,437,402],
[461,495,486,468,494,492,501,0,494,440],
[427,464,447,432,472,456,454,397,0,434],
[457,475,459,437,463,482,489,451,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,454,447,454,447,412,457,416,418],
[458,0,450,463,461,467,462,464,431,447],
[437,441,0,446,444,450,437,446,438,434],
[444,428,445,0,421,468,435,442,426,391],
[437,430,447,470,0,461,437,446,446,435],
[444,424,441,423,430,0,434,447,427,424],
[479,429,454,456,454,457,0,445,442,439],
[434,427,445,449,445,444,446,0,425,409],
[475,460,453,465,445,464,449,466,0,452],
[473,444,457,500,456,467,452,482,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,400,494,436,448,495,460,474,488],
[466,0,458,452,458,367,488,476,455,449],
[491,433,0,524,491,456,480,512,476,478],
[397,439,367,0,417,388,451,432,404,466],
[455,433,400,474,0,393,462,452,449,403],
[443,524,435,503,498,0,497,505,530,469],
[396,403,411,440,429,394,0,483,433,404],
[431,415,379,459,439,386,408,0,446,453],
[417,436,415,487,442,361,458,445,0,453],
[403,442,413,425,488,422,487,438,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,434,469,420,401,395,458,436,453],
[472,0,474,478,443,442,426,473,447,449],
[457,417,0,444,446,440,447,476,445,475],
[422,413,447,0,448,436,393,451,434,460],
[471,448,445,443,0,430,419,474,418,436],
[490,449,451,455,461,0,424,489,429,496],
[496,465,444,498,472,467,0,487,451,501],
[433,418,415,440,417,402,404,0,419,416],
[455,444,446,457,473,462,440,472,0,468],
[438,442,416,431,455,395,390,475,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,409,445,395,437,414,429,394,453],
[455,0,480,455,455,448,444,455,421,498],
[482,411,0,441,469,433,446,441,430,470],
[446,436,450,0,420,425,422,447,459,459],
[496,436,422,471,0,418,425,440,420,468],
[454,443,458,466,473,0,408,443,433,482],
[477,447,445,469,466,483,0,458,391,458],
[462,436,450,444,451,448,433,0,418,481],
[497,470,461,432,471,458,500,473,0,514],
[438,393,421,432,423,409,433,410,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,451,456,447,444,434,439,425,440],
[447,0,460,462,441,466,446,436,435,428],
[440,431,0,456,452,446,451,439,457,452],
[435,429,435,0,434,430,418,403,439,432],
[444,450,439,457,0,433,437,437,458,449],
[447,425,445,461,458,0,436,429,431,431],
[457,445,440,473,454,455,0,445,441,453],
[452,455,452,488,454,462,446,0,442,456],
[466,456,434,452,433,460,450,449,0,455],
[451,463,439,459,442,460,438,435,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,473,458,463,447,446,449,478,408],
[445,0,481,440,464,483,436,466,470,439],
[418,410,0,451,453,430,423,436,478,414],
[433,451,440,0,437,466,430,442,456,435],
[428,427,438,454,0,468,409,432,446,420],
[444,408,461,425,423,0,446,437,460,445],
[445,455,468,461,482,445,0,454,466,460],
[442,425,455,449,459,454,437,0,480,434],
[413,421,413,435,445,431,425,411,0,418],
[483,452,477,456,471,446,431,457,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,446,459,459,446,460,458,436,458],
[421,0,447,459,441,432,455,449,441,436],
[445,444,0,451,449,431,468,455,457,416],
[432,432,440,0,444,444,444,459,431,433],
[432,450,442,447,0,431,442,449,444,432],
[445,459,460,447,460,0,445,474,453,453],
[431,436,423,447,449,446,0,443,440,426],
[433,442,436,432,442,417,448,0,430,431],
[455,450,434,460,447,438,451,461,0,446],
[433,455,475,458,459,438,465,460,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,432,408,448,464,429,489,434,467],
[437,0,420,437,440,478,434,457,411,488],
[459,471,0,459,473,475,441,479,435,474],
[483,454,432,0,450,493,454,453,463,471],
[443,451,418,441,0,465,446,475,435,462],
[427,413,416,398,426,0,437,439,404,422],
[462,457,450,437,445,454,0,457,420,444],
[402,434,412,438,416,452,434,0,433,405],
[457,480,456,428,456,487,471,458,0,466],
[424,403,417,420,429,469,447,486,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,427,487,469,447,441,463,500,526],
[439,0,410,473,426,449,457,470,499,502],
[464,481,0,458,451,447,470,437,485,485],
[404,418,433,0,443,399,432,459,468,462],
[422,465,440,448,0,462,394,447,415,471],
[444,442,444,492,429,0,438,473,414,459],
[450,434,421,459,497,453,0,446,474,468],
[428,421,454,432,444,418,445,0,461,455],
[391,392,406,423,476,477,417,430,0,459],
[365,389,406,429,420,432,423,436,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,449,487,431,434,490,431,451,460],
[429,0,419,462,446,448,463,448,459,453],
[442,472,0,431,445,441,497,414,451,470],
[404,429,460,0,402,362,443,419,425,457],
[460,445,446,489,0,460,456,446,442,472],
[457,443,450,529,431,0,487,453,474,451],
[401,428,394,448,435,404,0,409,431,426],
[460,443,477,472,445,438,482,0,468,458],
[440,432,440,466,449,417,460,423,0,427],
[431,438,421,434,419,440,465,433,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,478,442,452,469,429,424,448,470],
[465,0,500,443,474,457,426,455,431,468],
[413,391,0,423,424,412,430,426,421,443],
[449,448,468,0,460,468,441,462,446,466],
[439,417,467,431,0,460,443,449,439,461],
[422,434,479,423,431,0,449,446,457,420],
[462,465,461,450,448,442,0,447,446,463],
[467,436,465,429,442,445,444,0,420,469],
[443,460,470,445,452,434,445,471,0,453],
[421,423,448,425,430,471,428,422,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,438,440,459,421,448,449,445,429],
[451,0,430,464,459,447,451,453,460,440],
[453,461,0,422,425,430,450,452,439,432],
[451,427,469,0,443,429,434,463,434,461],
[432,432,466,448,0,439,463,463,450,453],
[470,444,461,462,452,0,458,482,456,462],
[443,440,441,457,428,433,0,471,447,461],
[442,438,439,428,428,409,420,0,417,445],
[446,431,452,457,441,435,444,474,0,438],
[462,451,459,430,438,429,430,446,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,546,497,348,495,548,498,597,496,398],
[345,0,197,293,344,344,348,248,196,245],
[394,694,0,344,542,399,398,495,446,300],
[543,598,547,0,493,597,496,544,397,447],
[396,547,349,398,0,548,350,546,546,298],
[343,547,492,294,343,0,298,494,294,345],
[393,543,493,395,541,593,0,642,344,441],
[294,643,396,347,345,397,249,0,396,348],
[395,695,445,494,345,597,547,495,0,298],
[493,646,591,444,593,546,450,543,593,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,442,468,478,463,453,438,442,460],
[430,0,432,438,438,466,457,416,453,387],
[449,459,0,452,448,465,447,424,435,462],
[423,453,439,0,448,464,448,432,443,410],
[413,453,443,443,0,439,445,447,429,438],
[428,425,426,427,452,0,424,411,443,398],
[438,434,444,443,446,467,0,399,440,425],
[453,475,467,459,444,480,492,0,454,449],
[449,438,456,448,462,448,451,437,0,446],
[431,504,429,481,453,493,466,442,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,476,444,465,432,441,477,456,471],
[491,0,456,444,484,504,514,498,442,485],
[415,435,0,447,411,428,490,461,389,429],
[447,447,444,0,446,476,446,467,450,462],
[426,407,480,445,0,471,477,438,451,460],
[459,387,463,415,420,0,418,432,418,419],
[450,377,401,445,414,473,0,468,426,410],
[414,393,430,424,453,459,423,0,434,408],
[435,449,502,441,440,473,465,457,0,466],
[420,406,462,429,431,472,481,483,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,432,461,406,445,440,427,437,436],
[481,0,454,480,443,477,450,471,464,462],
[459,437,0,458,450,456,455,469,459,459],
[430,411,433,0,423,439,420,436,434,441],
[485,448,441,468,0,451,455,450,440,451],
[446,414,435,452,440,0,424,443,442,454],
[451,441,436,471,436,467,0,449,459,460],
[464,420,422,455,441,448,442,0,436,442],
[454,427,432,457,451,449,432,455,0,450],
[455,429,432,450,440,437,431,449,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,455,437,433,446,460,461,445,441],
[440,0,448,451,434,430,452,443,450,437],
[436,443,0,452,433,444,448,469,429,441],
[454,440,439,0,445,442,447,464,426,443],
[458,457,458,446,0,440,452,467,431,438],
[445,461,447,449,451,0,469,474,440,440],
[431,439,443,444,439,422,0,457,433,400],
[430,448,422,427,424,417,434,0,423,426],
[446,441,462,465,460,451,458,468,0,447],
[450,454,450,448,453,451,491,465,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,443,456,452,452,464,458,469,436],
[435,0,441,467,425,436,458,447,449,448],
[448,450,0,471,429,454,454,469,470,445],
[435,424,420,0,441,449,453,435,433,442],
[439,466,462,450,0,438,470,465,452,444],
[439,455,437,442,453,0,459,463,447,460],
[427,433,437,438,421,432,0,455,433,442],
[433,444,422,456,426,428,436,0,442,447],
[422,442,421,458,439,444,458,449,0,449],
[455,443,446,449,447,431,449,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,459,480,427,433,433,441,431,424],
[438,0,489,469,446,424,437,431,447,431],
[432,402,0,435,404,398,407,371,405,422],
[411,422,456,0,433,432,413,440,427,421],
[464,445,487,458,0,448,429,442,443,456],
[458,467,493,459,443,0,440,439,455,450],
[458,454,484,478,462,451,0,456,479,442],
[450,460,520,451,449,452,435,0,439,461],
[460,444,486,464,448,436,412,452,0,446],
[467,460,469,470,435,441,449,430,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,497,468,433,451,481,477,490,492],
[435,0,420,417,428,419,388,431,466,441],
[394,471,0,419,442,446,440,414,454,434],
[423,474,472,0,479,464,423,481,450,461],
[458,463,449,412,0,410,408,444,425,486],
[440,472,445,427,481,0,413,455,453,473],
[410,503,451,468,483,478,0,523,473,460],
[414,460,477,410,447,436,368,0,436,484],
[401,425,437,441,466,438,418,455,0,466],
[399,450,457,430,405,418,431,407,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,555,458,449,503,428,463,458,484],
[475,0,557,522,440,497,467,486,468,490],
[336,334,0,354,348,362,341,385,357,364],
[433,369,537,0,411,450,378,414,430,420],
[442,451,543,480,0,454,423,455,473,444],
[388,394,529,441,437,0,431,458,439,434],
[463,424,550,513,468,460,0,469,470,478],
[428,405,506,477,436,433,422,0,448,434],
[433,423,534,461,418,452,421,443,0,468],
[407,401,527,471,447,457,413,457,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,421,435,412,412,437,423,446,424],
[462,0,460,449,461,454,453,450,458,421],
[470,431,0,453,447,443,462,458,441,479],
[456,442,438,0,438,448,479,435,467,470],
[479,430,444,453,0,454,460,449,450,451],
[479,437,448,443,437,0,463,427,447,464],
[454,438,429,412,431,428,0,435,426,425],
[468,441,433,456,442,464,456,0,459,457],
[445,433,450,424,441,444,465,432,0,470],
[467,470,412,421,440,427,466,434,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,439,469,413,419,439,444,440,433],
[478,0,439,459,430,443,458,452,469,463],
[452,452,0,459,424,444,446,461,452,452],
[422,432,432,0,430,423,451,438,446,433],
[478,461,467,461,0,444,474,478,481,488],
[472,448,447,468,447,0,431,474,469,471],
[452,433,445,440,417,460,0,453,449,445],
[447,439,430,453,413,417,438,0,425,444],
[451,422,439,445,410,422,442,466,0,449],
[458,428,439,458,403,420,446,447,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,471,475,494,426,441,502,471,453],
[433,0,432,454,486,416,464,462,454,441],
[420,459,0,468,488,465,459,497,459,445],
[416,437,423,0,462,417,425,485,428,438],
[397,405,403,429,0,403,438,445,420,411],
[465,475,426,474,488,0,479,501,455,439],
[450,427,432,466,453,412,0,485,441,413],
[389,429,394,406,446,390,406,0,401,391],
[420,437,432,463,471,436,450,490,0,458],
[438,450,446,453,480,452,478,500,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,501,393,417,519,435,422,465,450],
[495,0,506,452,453,500,445,415,505,454],
[390,385,0,388,405,439,380,370,410,408],
[498,439,503,0,453,511,455,467,483,477],
[474,438,486,438,0,507,439,445,444,432],
[372,391,452,380,384,0,367,411,439,417],
[456,446,511,436,452,524,0,440,471,498],
[469,476,521,424,446,480,451,0,445,459],
[426,386,481,408,447,452,420,446,0,424],
[441,437,483,414,459,474,393,432,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,444,456,454,460,440,467,452,444],
[476,0,468,465,479,489,442,460,466,443],
[447,423,0,451,455,445,428,472,451,438],
[435,426,440,0,448,454,462,462,438,425],
[437,412,436,443,0,445,426,446,461,414],
[431,402,446,437,446,0,406,440,422,436],
[451,449,463,429,465,485,0,463,465,435],
[424,431,419,429,445,451,428,0,434,422],
[439,425,440,453,430,469,426,457,0,446],
[447,448,453,466,477,455,456,469,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,450,463,458,475,460,455,445,449],
[426,0,429,443,443,460,437,432,424,440],
[441,462,0,465,456,466,460,431,442,444],
[428,448,426,0,448,464,436,427,428,431],
[433,448,435,443,0,439,442,434,431,440],
[416,431,425,427,452,0,437,434,424,432],
[431,454,431,455,449,454,0,419,430,431],
[436,459,460,464,457,457,472,0,442,446],
[446,467,449,463,460,467,461,449,0,440],
[442,451,447,460,451,459,460,445,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,434,434,434,429,444,429,415,421],
[440,0,431,448,458,459,444,452,451,443],
[457,460,0,445,472,451,459,477,469,456],
[457,443,446,0,471,459,443,435,449,452],
[457,433,419,420,0,419,445,424,411,436],
[462,432,440,432,472,0,453,461,461,466],
[447,447,432,448,446,438,0,448,440,442],
[462,439,414,456,467,430,443,0,418,465],
[476,440,422,442,480,430,451,473,0,458],
[470,448,435,439,455,425,449,426,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,403,539,461,467,431,455,456,424],
[437,0,410,501,488,423,478,445,432,379],
[488,481,0,554,555,475,435,488,499,436],
[352,390,337,0,384,368,441,394,419,396],
[430,403,336,507,0,378,431,431,403,415],
[424,468,416,523,513,0,497,403,483,458],
[460,413,456,450,460,394,0,379,441,392],
[436,446,403,497,460,488,512,0,489,448],
[435,459,392,472,488,408,450,402,0,417],
[467,512,455,495,476,433,499,443,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,468,439,452,413,474,479,451,449],
[427,0,470,463,480,435,481,441,444,452],
[423,421,0,426,437,451,433,428,455,445],
[452,428,465,0,444,428,476,440,477,446],
[439,411,454,447,0,423,462,444,433,421],
[478,456,440,463,468,0,437,485,487,454],
[417,410,458,415,429,454,0,393,416,437],
[412,450,463,451,447,406,498,0,464,437],
[440,447,436,414,458,404,475,427,0,447],
[442,439,446,445,470,437,454,454,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,408,442,425,436,434,453,425,445],
[456,0,434,445,458,462,453,477,449,446],
[483,457,0,469,447,468,445,458,456,481],
[449,446,422,0,432,450,428,459,439,426],
[466,433,444,459,0,450,459,453,465,463],
[455,429,423,441,441,0,438,455,455,445],
[457,438,446,463,432,453,0,441,461,449],
[438,414,433,432,438,436,450,0,447,449],
[466,442,435,452,426,436,430,444,0,449],
[446,445,410,465,428,446,442,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,438,453,457,442,462,428,459,480],
[464,0,448,452,463,438,466,451,437,467],
[453,443,0,429,449,445,446,427,443,453],
[438,439,462,0,453,446,446,437,460,456],
[434,428,442,438,0,423,442,432,443,445],
[449,453,446,445,468,0,442,427,452,453],
[429,425,445,445,449,449,0,433,439,440],
[463,440,464,454,459,464,458,0,450,450],
[432,454,448,431,448,439,452,441,0,440],
[411,424,438,435,446,438,451,441,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,410,451,435,448,420,404,419,437],
[460,0,448,462,454,456,451,408,448,499],
[481,443,0,494,479,467,438,447,458,498],
[440,429,397,0,428,444,400,410,426,428],
[456,437,412,463,0,440,428,408,445,460],
[443,435,424,447,451,0,441,420,420,481],
[471,440,453,491,463,450,0,428,437,477],
[487,483,444,481,483,471,463,0,468,485],
[472,443,433,465,446,471,454,423,0,463],
[454,392,393,463,431,410,414,406,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,467,440,469,397,396,486,422,436],
[434,0,498,436,423,452,403,476,465,460],
[424,393,0,483,417,403,408,469,518,488],
[451,455,408,0,447,401,407,488,453,441],
[422,468,474,444,0,388,466,471,503,470],
[494,439,488,490,503,0,416,535,496,473],
[495,488,483,484,425,475,0,471,530,450],
[405,415,422,403,420,356,420,0,444,415],
[469,426,373,438,388,395,361,447,0,424],
[455,431,403,450,421,418,441,476,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,436,439,464,463,450,440,499,449],
[430,0,444,398,457,449,431,418,456,443],
[455,447,0,443,471,447,452,466,500,463],
[452,493,448,0,453,462,481,444,465,473],
[427,434,420,438,0,457,444,451,456,460],
[428,442,444,429,434,0,441,410,471,443],
[441,460,439,410,447,450,0,435,446,497],
[451,473,425,447,440,481,456,0,475,468],
[392,435,391,426,435,420,445,416,0,420],
[442,448,428,418,431,448,394,423,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,435,458,440,481,416,414,460,427],
[458,0,447,446,459,468,464,405,453,437],
[456,444,0,435,490,455,463,440,451,458],
[433,445,456,0,461,476,447,439,460,420],
[451,432,401,430,0,446,427,411,418,393],
[410,423,436,415,445,0,405,448,446,424],
[475,427,428,444,464,486,0,424,464,432],
[477,486,451,452,480,443,467,0,440,452],
[431,438,440,431,473,445,427,451,0,415],
[464,454,433,471,498,467,459,439,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,453,432,427,439,445,439,435,455],
[429,0,440,442,448,449,471,462,437,431],
[438,451,0,433,433,453,451,454,443,433],
[459,449,458,0,433,469,464,451,440,430],
[464,443,458,458,0,456,470,449,457,452],
[452,442,438,422,435,0,464,453,411,428],
[446,420,440,427,421,427,0,412,435,402],
[452,429,437,440,442,438,479,0,447,434],
[456,454,448,451,434,480,456,444,0,435],
[436,460,458,461,439,463,489,457,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,463,445,472,467,451,464,451,486],
[395,0,407,393,424,413,423,444,401,398],
[428,484,0,439,413,452,406,452,429,419],
[446,498,452,0,415,422,432,454,444,418],
[419,467,478,476,0,446,484,434,453,437],
[424,478,439,469,445,0,446,476,417,428],
[440,468,485,459,407,445,0,459,456,462],
[427,447,439,437,457,415,432,0,417,424],
[440,490,462,447,438,474,435,474,0,455],
[405,493,472,473,454,463,429,467,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,427,402,427,449,443,400,430,474],
[416,0,428,416,416,431,420,369,376,440],
[464,463,0,443,429,460,452,438,417,462],
[489,475,448,0,461,472,441,455,454,485],
[464,475,462,430,0,464,487,419,459,504],
[442,460,431,419,427,0,473,384,423,466],
[448,471,439,450,404,418,0,356,453,452],
[491,522,453,436,472,507,535,0,474,501],
[461,515,474,437,432,468,438,417,0,474],
[417,451,429,406,387,425,439,390,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,431,446,454,430,435,448,441,436],
[453,0,438,442,426,430,434,424,419,447],
[460,453,0,448,431,433,429,427,431,450],
[445,449,443,0,430,430,440,433,433,441],
[437,465,460,461,0,452,447,440,429,456],
[461,461,458,461,439,0,423,448,446,457],
[456,457,462,451,444,468,0,442,443,455],
[443,467,464,458,451,443,449,0,453,460],
[450,472,460,458,462,445,448,438,0,472],
[455,444,441,450,435,434,436,431,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,431,422,423,411,431,423,444,421],
[473,0,468,441,461,441,461,452,457,437],
[460,423,0,454,436,444,464,445,469,438],
[469,450,437,0,420,433,432,446,450,427],
[468,430,455,471,0,449,472,450,466,461],
[480,450,447,458,442,0,465,470,473,455],
[460,430,427,459,419,426,0,427,428,437],
[468,439,446,445,441,421,464,0,456,440],
[447,434,422,441,425,418,463,435,0,420],
[470,454,453,464,430,436,454,451,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,422,439,456,459,450,423,457,434],
[431,0,391,423,412,407,409,407,432,426],
[469,500,0,457,451,436,431,464,450,462],
[452,468,434,0,430,445,446,438,444,431],
[435,479,440,461,0,420,417,444,432,458],
[432,484,455,446,471,0,449,418,433,444],
[441,482,460,445,474,442,0,443,443,450],
[468,484,427,453,447,473,448,0,436,463],
[434,459,441,447,459,458,448,455,0,468],
[457,465,429,460,433,447,441,428,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,435,437,438,446,455,402,437,460],
[463,0,495,452,434,477,470,437,448,480],
[456,396,0,467,424,451,478,446,428,456],
[454,439,424,0,460,437,451,396,403,438],
[453,457,467,431,0,457,473,443,449,479],
[445,414,440,454,434,0,455,415,416,473],
[436,421,413,440,418,436,0,411,398,451],
[489,454,445,495,448,476,480,0,454,450],
[454,443,463,488,442,475,493,437,0,492],
[431,411,435,453,412,418,440,441,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,405,406,415,415,407,404,420,434],
[510,0,456,473,467,452,445,463,476,486],
[486,435,0,458,413,449,454,447,446,484],
[485,418,433,0,456,439,440,443,453,480],
[476,424,478,435,0,462,445,439,449,471],
[476,439,442,452,429,0,464,434,458,467],
[484,446,437,451,446,427,0,429,471,485],
[487,428,444,448,452,457,462,0,457,462],
[471,415,445,438,442,433,420,434,0,468],
[457,405,407,411,420,424,406,429,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,466,419,410,418,451,450,433,443],
[454,0,422,471,423,455,409,439,437,457],
[425,469,0,446,412,466,434,424,417,439],
[472,420,445,0,454,471,416,447,409,470],
[481,468,479,437,0,480,478,452,456,505],
[473,436,425,420,411,0,412,426,410,463],
[440,482,457,475,413,479,0,443,453,458],
[441,452,467,444,439,465,448,0,439,472],
[458,454,474,482,435,481,438,452,0,477],
[448,434,452,421,386,428,433,419,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,473,454,456,524,492,441,479,475],
[420,0,398,448,418,455,449,411,409,404],
[418,493,0,456,450,485,499,435,441,448],
[437,443,435,0,423,468,459,441,453,430],
[435,473,441,468,0,498,483,453,466,431],
[367,436,406,423,393,0,420,378,411,387],
[399,442,392,432,408,471,0,402,407,375],
[450,480,456,450,438,513,489,0,447,456],
[412,482,450,438,425,480,484,444,0,434],
[416,487,443,461,460,504,516,435,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,474,448,431,447,446,441,475,431],
[466,0,484,477,440,461,454,446,483,465],
[417,407,0,431,399,421,419,414,467,408],
[443,414,460,0,436,430,436,444,467,417],
[460,451,492,455,0,452,454,432,480,447],
[444,430,470,461,439,0,411,427,472,440],
[445,437,472,455,437,480,0,468,474,457],
[450,445,477,447,459,464,423,0,487,446],
[416,408,424,424,411,419,417,404,0,395],
[460,426,483,474,444,451,434,445,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,431,444,466,434,444,458,420,421],
[463,0,439,465,465,440,459,453,459,453],
[460,452,0,474,458,442,462,450,439,442],
[447,426,417,0,467,415,449,429,423,469],
[425,426,433,424,0,430,439,450,436,427],
[457,451,449,476,461,0,452,464,441,449],
[447,432,429,442,452,439,0,440,443,419],
[433,438,441,462,441,427,451,0,414,421],
[471,432,452,468,455,450,448,477,0,461],
[470,438,449,422,464,442,472,470,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,454,468,428,450,449,438,491,458],
[463,0,481,486,445,459,465,460,471,475],
[437,410,0,449,424,423,448,443,447,448],
[423,405,442,0,404,430,403,422,457,429],
[463,446,467,487,0,453,443,442,461,440],
[441,432,468,461,438,0,437,453,473,460],
[442,426,443,488,448,454,0,447,464,451],
[453,431,448,469,449,438,444,0,450,457],
[400,420,444,434,430,418,427,441,0,434],
[433,416,443,462,451,431,440,434,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,419,461,439,444,450,452,442,456],
[434,0,406,424,416,414,452,434,425,439],
[472,485,0,460,441,454,469,467,450,450],
[430,467,431,0,431,440,453,474,447,460],
[452,475,450,460,0,445,498,440,423,430],
[447,477,437,451,446,0,474,440,467,462],
[441,439,422,438,393,417,0,438,431,428],
[439,457,424,417,451,451,453,0,432,454],
[449,466,441,444,468,424,460,459,0,439],
[435,452,441,431,461,429,463,437,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,449,449,439,435,426,440,427,442],
[436,0,430,420,420,430,431,429,419,419],
[442,461,0,430,456,447,424,445,410,439],
[442,471,461,0,444,435,423,434,435,456],
[452,471,435,447,0,444,441,424,434,445],
[456,461,444,456,447,0,455,443,420,459],
[465,460,467,468,450,436,0,453,441,479],
[451,462,446,457,467,448,438,0,454,446],
[464,472,481,456,457,471,450,437,0,459],
[449,472,452,435,446,432,412,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,449,409,422,422,447,452,415,436],
[453,0,433,414,411,437,442,439,409,414],
[442,458,0,427,438,423,434,447,427,445],
[482,477,464,0,466,466,460,491,460,420],
[469,480,453,425,0,438,444,460,456,436],
[469,454,468,425,453,0,449,466,469,465],
[444,449,457,431,447,442,0,448,460,452],
[439,452,444,400,431,425,443,0,416,416],
[476,482,464,431,435,422,431,475,0,454],
[455,477,446,471,455,426,439,475,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,444,355,357,378,481,390,447,399],
[489,0,483,369,335,397,479,357,520,395],
[447,408,0,405,325,431,461,376,463,447],
[536,522,486,0,476,555,555,341,464,473],
[534,556,566,415,0,477,551,452,460,445],
[513,494,460,336,414,0,431,403,490,445],
[410,412,430,336,340,460,0,370,414,365],
[501,534,515,550,439,488,521,0,535,499],
[444,371,428,427,431,401,477,356,0,430],
[492,496,444,418,446,446,526,392,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,462,458,458,460,431,443,452,450],
[485,0,466,453,448,442,443,450,449,459],
[429,425,0,426,444,438,415,429,446,440],
[433,438,465,0,451,443,449,437,440,457],
[433,443,447,440,0,431,438,432,440,424],
[431,449,453,448,460,0,443,429,440,462],
[460,448,476,442,453,448,0,445,440,461],
[448,441,462,454,459,462,446,0,451,481],
[439,442,445,451,451,451,451,440,0,470],
[441,432,451,434,467,429,430,410,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,439,443,453,421,453,439,428,468],
[512,0,429,472,479,464,489,482,461,462],
[452,462,0,459,459,452,478,443,442,452],
[448,419,432,0,428,444,465,450,451,472],
[438,412,432,463,0,440,441,436,443,451],
[470,427,439,447,451,0,442,425,443,452],
[438,402,413,426,450,449,0,437,398,458],
[452,409,448,441,455,466,454,0,446,460],
[463,430,449,440,448,448,493,445,0,466],
[423,429,439,419,440,439,433,431,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,348,409,373,398,362,313,391,431],
[529,0,447,516,462,471,444,460,491,497],
[543,444,0,508,468,470,436,452,524,517],
[482,375,383,0,377,417,416,369,447,474],
[518,429,423,514,0,428,370,389,463,469],
[493,420,421,474,463,0,437,392,497,494],
[529,447,455,475,521,454,0,409,478,469],
[578,431,439,522,502,499,482,0,486,574],
[500,400,367,444,428,394,413,405,0,485],
[460,394,374,417,422,397,422,317,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,457,425,437,447,431,455,462,441],
[468,0,461,465,441,459,491,469,455,450],
[434,430,0,419,449,425,435,394,421,424],
[466,426,472,0,478,479,439,462,477,466],
[454,450,442,413,0,388,420,434,444,400],
[444,432,466,412,503,0,457,411,447,442],
[460,400,456,452,471,434,0,440,456,426],
[436,422,497,429,457,480,451,0,482,463],
[429,436,470,414,447,444,435,409,0,447],
[450,441,467,425,491,449,465,428,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,468,452,460,458,436,471,457,439],
[441,0,443,490,466,453,448,449,432,454],
[423,448,0,442,462,455,442,442,432,425],
[439,401,449,0,443,437,421,425,433,413],
[431,425,429,448,0,443,416,425,417,416],
[433,438,436,454,448,0,417,427,425,412],
[455,443,449,470,475,474,0,435,451,423],
[420,442,449,466,466,464,456,0,464,448],
[434,459,459,458,474,466,440,427,0,430],
[452,437,466,478,475,479,468,443,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,492,439,477,477,483,440,451,456],
[434,0,484,458,447,454,473,423,472,462],
[399,407,0,418,490,432,446,413,411,450],
[452,433,473,0,481,491,505,461,421,433],
[414,444,401,410,0,469,464,416,398,407],
[414,437,459,400,422,0,439,409,403,425],
[408,418,445,386,427,452,0,424,412,424],
[451,468,478,430,475,482,467,0,460,460],
[440,419,480,470,493,488,479,431,0,444],
[435,429,441,458,484,466,467,431,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,436,449,436,438,444,434,437,434],
[471,0,454,445,463,477,439,457,463,449],
[455,437,0,448,444,442,439,457,433,439],
[442,446,443,0,451,463,465,463,441,456],
[455,428,447,440,0,453,447,452,454,451],
[453,414,449,428,438,0,422,431,442,430],
[447,452,452,426,444,469,0,459,432,467],
[457,434,434,428,439,460,432,0,444,457],
[454,428,458,450,437,449,459,447,0,457],
[457,442,452,435,440,461,424,434,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,408,445,468,427,459,471,433,440],
[419,0,434,422,464,392,425,437,425,420],
[483,457,0,412,452,456,498,454,446,454],
[446,469,479,0,468,451,474,473,432,440],
[423,427,439,423,0,403,443,410,419,437],
[464,499,435,440,488,0,491,441,463,463],
[432,466,393,417,448,400,0,452,479,408],
[420,454,437,418,481,450,439,0,453,432],
[458,466,445,459,472,428,412,438,0,430],
[451,471,437,451,454,428,483,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,414,404,428,446,433,434,437,442],
[486,0,444,499,438,496,439,450,445,467],
[477,447,0,456,442,486,451,459,510,469],
[487,392,435,0,435,471,477,456,435,439],
[463,453,449,456,0,457,430,454,461,464],
[445,395,405,420,434,0,436,441,436,434],
[458,452,440,414,461,455,0,448,436,444],
[457,441,432,435,437,450,443,0,423,438],
[454,446,381,456,430,455,455,468,0,456],
[449,424,422,452,427,457,447,453,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,445,560,537,416,566,501,474,476],
[475,0,330,502,538,447,448,413,505,417],
[446,561,0,411,561,558,561,469,532,442],
[331,389,480,0,511,417,420,327,387,390],
[354,353,330,380,0,384,356,415,473,330],
[475,444,333,474,507,0,509,441,417,361],
[325,443,330,471,535,382,0,412,384,359],
[390,478,422,564,476,450,479,0,477,304],
[417,386,359,504,418,474,507,414,0,359],
[415,474,449,501,561,530,532,587,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,436,460,432,446,430,438,431,463],
[453,0,426,447,428,440,453,423,445,447],
[455,465,0,461,431,481,454,457,470,457],
[431,444,430,0,429,462,446,447,433,432],
[459,463,460,462,0,473,464,421,447,462],
[445,451,410,429,418,0,428,411,438,448],
[461,438,437,445,427,463,0,456,447,466],
[453,468,434,444,470,480,435,0,455,452],
[460,446,421,458,444,453,444,436,0,448],
[428,444,434,459,429,443,425,439,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,455,434,472,449,449,449,442,452],
[470,0,478,446,489,454,459,441,469,458],
[436,413,0,422,451,411,433,436,442,429],
[457,445,469,0,472,446,463,449,442,427],
[419,402,440,419,0,420,440,416,426,438],
[442,437,480,445,471,0,467,458,464,450],
[442,432,458,428,451,424,0,435,444,443],
[442,450,455,442,475,433,456,0,481,438],
[449,422,449,449,465,427,447,410,0,435],
[439,433,462,464,453,441,448,453,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,422,451,405,430,421,444,435,429],
[418,0,405,395,396,472,412,428,379,389],
[469,486,0,490,448,437,412,467,436,431],
[440,496,401,0,380,420,428,411,407,417],
[486,495,443,511,0,508,425,497,459,508],
[461,419,454,471,383,0,419,430,429,441],
[470,479,479,463,466,472,0,424,455,449],
[447,463,424,480,394,461,467,0,420,427],
[456,512,455,484,432,462,436,471,0,467],
[462,502,460,474,383,450,442,464,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,467,479,441,460,478,468,457,455],
[410,0,460,478,451,458,448,463,482,448],
[424,431,0,455,411,425,448,438,435,394],
[412,413,436,0,427,429,438,428,443,398],
[450,440,480,464,0,450,476,460,476,440],
[431,433,466,462,441,0,448,469,452,438],
[413,443,443,453,415,443,0,449,444,457],
[423,428,453,463,431,422,442,0,457,437],
[434,409,456,448,415,439,447,434,0,436],
[436,443,497,493,451,453,434,454,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,447,433,477,444,447,402,422,421],
[421,0,411,388,469,413,458,419,387,438],
[444,480,0,418,519,456,466,389,419,397],
[458,503,473,0,508,474,497,477,418,455],
[414,422,372,383,0,425,401,400,368,428],
[447,478,435,417,466,0,464,430,416,444],
[444,433,425,394,490,427,0,414,383,392],
[489,472,502,414,491,461,477,0,450,431],
[469,504,472,473,523,475,508,441,0,488],
[470,453,494,436,463,447,499,460,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,424,433,435,432,429,469,465,415],
[458,0,462,450,438,469,454,423,449,459],
[467,429,0,467,458,448,437,436,464,426],
[458,441,424,0,415,454,432,449,461,445],
[456,453,433,476,0,470,447,461,470,427],
[459,422,443,437,421,0,442,433,426,408],
[462,437,454,459,444,449,0,447,458,431],
[422,468,455,442,430,458,444,0,482,446],
[426,442,427,430,421,465,433,409,0,420],
[476,432,465,446,464,483,460,445,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,480,472,449,444,478,444,447,442],
[416,0,454,453,426,447,431,420,421,436],
[411,437,0,443,407,422,438,420,424,439],
[419,438,448,0,430,423,457,421,417,413],
[442,465,484,461,0,441,487,459,450,474],
[447,444,469,468,450,0,444,438,435,446],
[413,460,453,434,404,447,0,426,435,426],
[447,471,471,470,432,453,465,0,423,442],
[444,470,467,474,441,456,456,468,0,456],
[449,455,452,478,417,445,465,449,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,453,432,407,460,415,437,452,430],
[414,0,418,419,398,419,398,422,434,403],
[438,473,0,489,432,459,440,459,455,445],
[459,472,402,0,448,457,422,442,459,413],
[484,493,459,443,0,460,453,486,460,429],
[431,472,432,434,431,0,409,435,481,428],
[476,493,451,469,438,482,0,467,463,457],
[454,469,432,449,405,456,424,0,450,435],
[439,457,436,432,431,410,428,441,0,416],
[461,488,446,478,462,463,434,456,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,446,447,451,455,440,434,473,498],
[442,0,454,464,447,473,448,452,483,485],
[445,437,0,440,445,486,448,453,480,470],
[444,427,451,0,423,473,432,424,459,468],
[440,444,446,468,0,459,458,455,486,459],
[436,418,405,418,432,0,426,443,435,465],
[451,443,443,459,433,465,0,432,467,471],
[457,439,438,467,436,448,459,0,484,471],
[418,408,411,432,405,456,424,407,0,452],
[393,406,421,423,432,426,420,420,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,469,456,451,446,462,444,467,435],
[424,0,436,436,463,460,458,462,459,456],
[422,455,0,443,444,453,454,464,467,441],
[435,455,448,0,445,439,454,448,447,440],
[440,428,447,446,0,436,446,437,436,443],
[445,431,438,452,455,0,461,467,464,456],
[429,433,437,437,445,430,0,436,434,435],
[447,429,427,443,454,424,455,0,440,439],
[424,432,424,444,455,427,457,451,0,442],
[456,435,450,451,448,435,456,452,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,475,500,504,469,497,439,447,476],
[407,0,449,441,469,475,454,449,433,420],
[416,442,0,451,462,427,468,458,453,451],
[391,450,440,0,466,414,423,437,443,441],
[387,422,429,425,0,411,404,437,417,406],
[422,416,464,477,480,0,473,458,463,462],
[394,437,423,468,487,418,0,416,412,412],
[452,442,433,454,454,433,475,0,439,470],
[444,458,438,448,474,428,479,452,0,417],
[415,471,440,450,485,429,479,421,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,409,418,401,422,405,439,423,422],
[435,0,394,451,378,411,424,398,415,412],
[482,497,0,482,406,450,448,440,464,452],
[473,440,409,0,403,431,412,421,434,458],
[490,513,485,488,0,441,476,483,467,472],
[469,480,441,460,450,0,443,425,452,478],
[486,467,443,479,415,448,0,437,448,455],
[452,493,451,470,408,466,454,0,433,424],
[468,476,427,457,424,439,443,458,0,462],
[469,479,439,433,419,413,436,467,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,473,456,460,445,459,441,455,470],
[429,0,474,448,432,454,439,420,440,459],
[418,417,0,412,419,418,414,439,412,439],
[435,443,479,0,442,445,443,436,447,483],
[431,459,472,449,0,433,442,432,462,477],
[446,437,473,446,458,0,441,452,443,465],
[432,452,477,448,449,450,0,456,438,471],
[450,471,452,455,459,439,435,0,445,460],
[436,451,479,444,429,448,453,446,0,466],
[421,432,452,408,414,426,420,431,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,426,439,432,419,437,453,430,456],
[453,0,443,445,455,425,434,431,435,464],
[465,448,0,453,447,454,432,461,429,475],
[452,446,438,0,434,457,432,448,432,473],
[459,436,444,457,0,444,449,434,432,451],
[472,466,437,434,447,0,443,439,451,444],
[454,457,459,459,442,448,0,457,445,480],
[438,460,430,443,457,452,434,0,446,454],
[461,456,462,459,459,440,446,445,0,468],
[435,427,416,418,440,447,411,437,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,441,437,430,440,452,460,457,427],
[437,0,410,423,436,414,424,439,444,469],
[450,481,0,459,460,476,450,448,439,443],
[454,468,432,0,459,433,450,426,440,433],
[461,455,431,432,0,436,413,413,436,426],
[451,477,415,458,455,0,436,424,443,448],
[439,467,441,441,478,455,0,448,443,469],
[431,452,443,465,478,467,443,0,446,446],
[434,447,452,451,455,448,448,445,0,433],
[464,422,448,458,465,443,422,445,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,458,471,448,467,453,437,443],
[435,0,399,431,447,406,444,395,422,435],
[444,492,0,465,469,458,458,469,444,452],
[433,460,426,0,439,394,454,451,424,418],
[420,444,422,452,0,438,467,447,423,461],
[443,485,433,497,453,0,478,453,448,451],
[424,447,433,437,424,413,0,436,409,413],
[438,496,422,440,444,438,455,0,422,428],
[454,469,447,467,468,443,482,469,0,465],
[448,456,439,473,430,440,478,463,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,479,438,470,470,470,452,479,406],
[409,0,436,398,404,446,381,400,390,396],
[412,455,0,440,477,456,446,416,431,422],
[453,493,451,0,469,447,464,466,482,419],
[421,487,414,422,0,436,447,421,434,426],
[421,445,435,444,455,0,484,446,462,433],
[421,510,445,427,444,407,0,441,460,420],
[439,491,475,425,470,445,450,0,465,471],
[412,501,460,409,457,429,431,426,0,421],
[485,495,469,472,465,458,471,420,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,393,448,432,428,440,437,435,439],
[460,0,478,491,473,478,461,448,443,472],
[498,413,0,472,433,475,460,431,473,449],
[443,400,419,0,396,433,404,391,388,424],
[459,418,458,495,0,450,442,438,450,440],
[463,413,416,458,441,0,482,401,424,426],
[451,430,431,487,449,409,0,413,440,432],
[454,443,460,500,453,490,478,0,467,487],
[456,448,418,503,441,467,451,424,0,448],
[452,419,442,467,451,465,459,404,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,418,442,444,434,445,420,441,435],
[426,0,424,431,438,456,440,438,469,432],
[473,467,0,469,475,462,426,445,490,481],
[449,460,422,0,442,426,444,429,453,443],
[447,453,416,449,0,433,456,455,443,437],
[457,435,429,465,458,0,443,419,448,465],
[446,451,465,447,435,448,0,442,470,459],
[471,453,446,462,436,472,449,0,470,462],
[450,422,401,438,448,443,421,421,0,454],
[456,459,410,448,454,426,432,429,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,432,440,432,423,436,447,420,477],
[431,0,443,431,443,440,420,419,417,468],
[459,448,0,424,427,439,423,415,422,450],
[451,460,467,0,437,443,432,431,433,445],
[459,448,464,454,0,450,436,445,433,462],
[468,451,452,448,441,0,435,433,430,441],
[455,471,468,459,455,456,0,433,430,463],
[444,472,476,460,446,458,458,0,454,477],
[471,474,469,458,458,461,461,437,0,471],
[414,423,441,446,429,450,428,414,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,435,460,482,447,453,469,476,435],
[456,0,451,487,461,465,449,464,447,436],
[456,440,0,462,470,451,463,478,476,456],
[431,404,429,0,442,444,453,473,446,422],
[409,430,421,449,0,432,458,435,430,396],
[444,426,440,447,459,0,462,445,456,414],
[438,442,428,438,433,429,0,459,453,432],
[422,427,413,418,456,446,432,0,433,420],
[415,444,415,445,461,435,438,458,0,426],
[456,455,435,469,495,477,459,471,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,448,442,425,464,434,437,420,416],
[465,0,446,462,437,448,459,434,426,414],
[443,445,0,468,432,428,456,460,439,408],
[449,429,423,0,441,465,429,462,410,426],
[466,454,459,450,0,451,467,448,462,436],
[427,443,463,426,440,0,444,449,457,436],
[457,432,435,462,424,447,0,440,447,445],
[454,457,431,429,443,442,451,0,445,406],
[471,465,452,481,429,434,444,446,0,452],
[475,477,483,465,455,455,446,485,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,481,463,457,481,468,456,457,443],
[421,0,440,446,432,448,460,424,446,423],
[410,451,0,454,420,444,463,445,456,426],
[428,445,437,0,435,445,467,450,451,429],
[434,459,471,456,0,452,478,452,456,438],
[410,443,447,446,439,0,456,425,444,428],
[423,431,428,424,413,435,0,410,430,431],
[435,467,446,441,439,466,481,0,469,452],
[434,445,435,440,435,447,461,422,0,427],
[448,468,465,462,453,463,460,439,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,441,445,435,477,467,437,451,451],
[449,0,449,472,448,432,450,439,451,448],
[450,442,0,451,431,454,441,451,458,463],
[446,419,440,0,439,450,435,422,448,441],
[456,443,460,452,0,453,440,433,462,441],
[414,459,437,441,438,0,457,434,456,435],
[424,441,450,456,451,434,0,420,434,454],
[454,452,440,469,458,457,471,0,453,461],
[440,440,433,443,429,435,457,438,0,466],
[440,443,428,450,450,456,437,430,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,430,465,442,485,423,426,421,416],
[466,0,455,488,486,491,445,456,437,447],
[461,436,0,485,497,472,459,449,446,464],
[426,403,406,0,448,487,414,433,389,425],
[449,405,394,443,0,461,408,436,425,391],
[406,400,419,404,430,0,390,411,407,394],
[468,446,432,477,483,501,0,441,433,424],
[465,435,442,458,455,480,450,0,446,442],
[470,454,445,502,466,484,458,445,0,452],
[475,444,427,466,500,497,467,449,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,400,479,456,434,478,512,444,464],
[451,0,435,469,451,459,453,482,446,436],
[491,456,0,500,442,462,464,482,502,417],
[412,422,391,0,407,371,393,415,465,413],
[435,440,449,484,0,398,431,457,465,458],
[457,432,429,520,493,0,443,516,476,437],
[413,438,427,498,460,448,0,459,468,427],
[379,409,409,476,434,375,432,0,453,415],
[447,445,389,426,426,415,423,438,0,410],
[427,455,474,478,433,454,464,476,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,452,451,412,464,473,409,475,458],
[461,0,475,463,453,458,481,421,475,454],
[439,416,0,439,429,467,491,458,446,430],
[440,428,452,0,420,468,470,428,462,449],
[479,438,462,471,0,491,512,447,492,492],
[427,433,424,423,400,0,447,410,432,457],
[418,410,400,421,379,444,0,394,445,443],
[482,470,433,463,444,481,497,0,467,491],
[416,416,445,429,399,459,446,424,0,439],
[433,437,461,442,399,434,448,400,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,480,481,484,427,462,502,470,459],
[411,0,428,462,439,410,390,406,366,410],
[411,463,0,445,442,422,396,457,360,439],
[410,429,446,0,432,430,415,425,379,392],
[407,452,449,459,0,414,386,432,429,439],
[464,481,469,461,477,0,408,460,461,430],
[429,501,495,476,505,483,0,500,412,479],
[389,485,434,466,459,431,391,0,417,451],
[421,525,531,512,462,430,479,474,0,470],
[432,481,452,499,452,461,412,440,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,455,452,443,446,451,426,466,461],
[445,0,438,439,466,450,447,463,452,434],
[436,453,0,460,442,440,442,442,462,437],
[439,452,431,0,446,430,450,431,442,425],
[448,425,449,445,0,451,445,431,464,451],
[445,441,451,461,440,0,460,449,458,447],
[440,444,449,441,446,431,0,434,453,444],
[465,428,449,460,460,442,457,0,470,470],
[425,439,429,449,427,433,438,421,0,453],
[430,457,454,466,440,444,447,421,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,499,494,402,475,451,478,473,465],
[455,0,472,485,427,487,418,472,438,444],
[392,419,0,410,414,428,411,429,424,459],
[397,406,481,0,398,441,391,427,446,426],
[489,464,477,493,0,480,438,498,463,470],
[416,404,463,450,411,0,416,446,430,406],
[440,473,480,500,453,475,0,464,491,444],
[413,419,462,464,393,445,427,0,427,456],
[418,453,467,445,428,461,400,464,0,444],
[426,447,432,465,421,485,447,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,442,483,435,453,444,425,423,442],
[451,0,455,462,446,429,450,454,458,440],
[449,436,0,447,436,429,445,430,433,438],
[408,429,444,0,403,407,428,421,410,420],
[456,445,455,488,0,444,453,447,459,430],
[438,462,462,484,447,0,438,441,435,448],
[447,441,446,463,438,453,0,443,447,411],
[466,437,461,470,444,450,448,0,467,443],
[468,433,458,481,432,456,444,424,0,438],
[449,451,453,471,461,443,480,448,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,400,440,401,406,447,443,436,461],
[473,0,452,467,451,419,434,488,449,475],
[491,439,0,470,424,421,444,487,441,510],
[451,424,421,0,437,386,411,438,438,489],
[490,440,467,454,0,463,447,445,472,458],
[485,472,470,505,428,0,414,470,444,506],
[444,457,447,480,444,477,0,460,472,535],
[448,403,404,453,446,421,431,0,397,480],
[455,442,450,453,419,447,419,494,0,480],
[430,416,381,402,433,385,356,411,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,429,446,432,455,440,421,432,418],
[469,0,463,449,432,463,463,449,415,453],
[462,428,0,472,454,458,450,429,455,428],
[445,442,419,0,428,441,450,454,439,444],
[459,459,437,463,0,469,445,452,460,443],
[436,428,433,450,422,0,429,430,444,445],
[451,428,441,441,446,462,0,436,448,429],
[470,442,462,437,439,461,455,0,456,450],
[459,476,436,452,431,447,443,435,0,452],
[473,438,463,447,448,446,462,441,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,499,453,447,467,455,450,421,459],
[421,0,433,444,460,448,459,460,463,424],
[392,458,0,450,406,437,433,457,436,430],
[438,447,441,0,473,442,425,439,430,405],
[444,431,485,418,0,455,459,467,454,416],
[424,443,454,449,436,0,427,426,403,404],
[436,432,458,466,432,464,0,414,375,417],
[441,431,434,452,424,465,477,0,428,417],
[470,428,455,461,437,488,516,463,0,454],
[432,467,461,486,475,487,474,474,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,377,409,454,443,455,419,424,505],
[457,0,386,412,453,432,430,416,474,449],
[514,505,0,458,467,470,427,423,471,527],
[482,479,433,0,470,433,513,433,498,478],
[437,438,424,421,0,380,451,398,465,470],
[448,459,421,458,511,0,482,452,507,497],
[436,461,464,378,440,409,0,421,455,480],
[472,475,468,458,493,439,470,0,497,527],
[467,417,420,393,426,384,436,394,0,467],
[386,442,364,413,421,394,411,364,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,356,711,354,715,712,711,535,712,711],
[535,0,533,355,715,534,891,357,712,535],
[180,358,0,358,715,358,358,536,536,180],
[537,536,533,0,715,536,891,357,536,537],
[176,176,176,176,0,534,176,176,534,176],
[179,357,533,355,357,0,533,357,535,355],
[180,0,533,0,715,358,0,178,536,0],
[356,534,355,534,715,534,713,0,712,535],
[179,179,355,355,357,356,355,179,0,355],
[180,356,711,354,715,536,891,356,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,477,467,411,433,459,460,436,440],
[413,0,438,435,443,426,459,438,439,436],
[414,453,0,440,451,470,451,433,417,450],
[424,456,451,0,466,411,455,435,430,472],
[480,448,440,425,0,447,442,440,454,445],
[458,465,421,480,444,0,447,436,427,461],
[432,432,440,436,449,444,0,427,422,467],
[431,453,458,456,451,455,464,0,465,472],
[455,452,474,461,437,464,469,426,0,457],
[451,455,441,419,446,430,424,419,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,471,452,439,476,475,464,480,448],
[427,0,450,417,448,443,473,409,420,436],
[420,441,0,461,498,453,475,408,492,472],
[439,474,430,0,462,472,468,426,456,430],
[452,443,393,429,0,458,466,429,464,405],
[415,448,438,419,433,0,495,397,464,428],
[416,418,416,423,425,396,0,389,412,399],
[427,482,483,465,462,494,502,0,505,481],
[411,471,399,435,427,427,479,386,0,430],
[443,455,419,461,486,463,492,410,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,440,460,516,463,451,428,498,462],
[461,0,468,446,500,476,439,466,464,443],
[451,423,0,432,477,464,376,441,468,414],
[431,445,459,0,457,462,431,452,467,443],
[375,391,414,434,0,436,398,422,441,399],
[428,415,427,429,455,0,392,418,450,427],
[440,452,515,460,493,499,0,438,474,461],
[463,425,450,439,469,473,453,0,477,463],
[393,427,423,424,450,441,417,414,0,417],
[429,448,477,448,492,464,430,428,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,494,462,446,489,440,453,487,471],
[449,0,454,437,446,477,451,451,469,470],
[397,437,0,430,427,448,446,425,455,420],
[429,454,461,0,446,465,452,448,482,450],
[445,445,464,445,0,472,454,441,457,471],
[402,414,443,426,419,0,438,387,456,413],
[451,440,445,439,437,453,0,455,451,464],
[438,440,466,443,450,504,436,0,486,462],
[404,422,436,409,434,435,440,405,0,450],
[420,421,471,441,420,478,427,429,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,497,477,472,512,480,469,478,486],
[453,0,465,524,449,457,437,470,469,513],
[394,426,0,424,428,459,428,390,412,435],
[414,367,467,0,439,437,441,437,429,458],
[419,442,463,452,0,484,435,492,434,442],
[379,434,432,454,407,0,445,462,444,445],
[411,454,463,450,456,446,0,494,443,456],
[422,421,501,454,399,429,397,0,435,463],
[413,422,479,462,457,447,448,456,0,487],
[405,378,456,433,449,446,435,428,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,461,397,418,447,474,462,435,450],
[458,0,457,439,437,449,438,474,420,473],
[430,434,0,424,394,416,426,440,403,463],
[494,452,467,0,426,395,445,444,452,489],
[473,454,497,465,0,447,516,479,442,505],
[444,442,475,496,444,0,491,471,445,488],
[417,453,465,446,375,400,0,441,391,427],
[429,417,451,447,412,420,450,0,409,461],
[456,471,488,439,449,446,500,482,0,511],
[441,418,428,402,386,403,464,430,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,432,471,417,455,456,472,430,446],
[444,0,411,473,463,495,457,445,430,473],
[459,480,0,500,466,472,440,449,470,484],
[420,418,391,0,401,399,370,418,401,434],
[474,428,425,490,0,453,430,436,393,475],
[436,396,419,492,438,0,405,444,420,425],
[435,434,451,521,461,486,0,467,456,477],
[419,446,442,473,455,447,424,0,412,477],
[461,461,421,490,498,471,435,479,0,475],
[445,418,407,457,416,466,414,414,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,417,444,468,459,452,484,462,462],
[457,0,431,446,455,449,461,444,428,438],
[474,460,0,465,442,467,449,488,435,442],
[447,445,426,0,478,449,422,488,462,464],
[423,436,449,413,0,452,446,478,429,419],
[432,442,424,442,439,0,422,468,442,434],
[439,430,442,469,445,469,0,478,421,436],
[407,447,403,403,413,423,413,0,439,405],
[429,463,456,429,462,449,470,452,0,420],
[429,453,449,427,472,457,455,486,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,464,475,478,484,477,441,458,444],
[401,0,427,443,406,445,441,408,415,430],
[427,464,0,513,446,466,494,470,482,467],
[416,448,378,0,439,444,469,422,453,431],
[413,485,445,452,0,440,401,435,427,430],
[407,446,425,447,451,0,467,410,458,434],
[414,450,397,422,490,424,0,458,451,372],
[450,483,421,469,456,481,433,0,491,468],
[433,476,409,438,464,433,440,400,0,416],
[447,461,424,460,461,457,519,423,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,415,448,438,451,468,417,423,443],
[434,0,416,425,440,439,419,442,404,425],
[476,475,0,457,450,441,472,465,444,458],
[443,466,434,0,433,434,418,452,448,428],
[453,451,441,458,0,464,480,474,467,448],
[440,452,450,457,427,0,477,439,452,457],
[423,472,419,473,411,414,0,444,431,440],
[474,449,426,439,417,452,447,0,412,458],
[468,487,447,443,424,439,460,479,0,448],
[448,466,433,463,443,434,451,433,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,446,464,434,429,442,429,456,461],
[441,0,454,447,444,458,441,419,431,461],
[445,437,0,445,442,462,453,433,437,449],
[427,444,446,0,441,421,442,415,427,436],
[457,447,449,450,0,459,437,454,449,458],
[462,433,429,470,432,0,448,432,442,446],
[449,450,438,449,454,443,0,434,443,463],
[462,472,458,476,437,459,457,0,445,471],
[435,460,454,464,442,449,448,446,0,468],
[430,430,442,455,433,445,428,420,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,462,454,464,477,485,446,468,486],
[449,0,446,453,452,446,462,474,451,443],
[429,445,0,434,466,462,476,464,454,466],
[437,438,457,0,453,472,473,459,462,456],
[427,439,425,438,0,457,456,473,436,444],
[414,445,429,419,434,0,425,447,449,444],
[406,429,415,418,435,466,0,460,450,481],
[445,417,427,432,418,444,431,0,443,436],
[423,440,437,429,455,442,441,448,0,469],
[405,448,425,435,447,447,410,455,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,488,465,404,510,462,474,538,501],
[440,0,453,439,440,505,444,453,522,507],
[403,438,0,392,389,442,388,427,503,464],
[426,452,499,0,468,532,476,447,530,485],
[487,451,502,423,0,497,418,468,507,518],
[381,386,449,359,394,0,371,368,441,481],
[429,447,503,415,473,520,0,486,526,505],
[417,438,464,444,423,523,405,0,496,511],
[353,369,388,361,384,450,365,395,0,475],
[390,384,427,406,373,410,386,380,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,417,473,528,405,453,436,387,489],
[353,0,332,252,424,341,424,353,357,424],
[474,559,0,407,492,392,492,403,458,512],
[418,639,484,0,594,369,489,383,455,524],
[363,467,399,297,0,299,383,400,388,450],
[486,550,499,522,592,0,522,379,420,588],
[438,467,399,402,508,369,0,330,370,433],
[455,538,488,508,491,512,561,0,440,595],
[504,534,433,436,503,471,521,451,0,521],
[402,467,379,367,441,303,458,296,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,439,422,440,414,460,445,493,479],
[468,0,434,445,442,443,465,462,473,494],
[452,457,0,447,455,413,479,455,439,472],
[469,446,444,0,471,428,466,447,470,483],
[451,449,436,420,0,426,436,424,478,463],
[477,448,478,463,465,0,479,455,435,454],
[431,426,412,425,455,412,0,448,421,453],
[446,429,436,444,467,436,443,0,447,479],
[398,418,452,421,413,456,470,444,0,431],
[412,397,419,408,428,437,438,412,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,414,410,426,414,443,418,423,414],
[444,0,426,445,436,445,443,456,449,441],
[477,465,0,437,448,416,473,465,462,455],
[481,446,454,0,465,443,454,478,456,463],
[465,455,443,426,0,451,435,455,449,447],
[477,446,475,448,440,0,460,472,453,446],
[448,448,418,437,456,431,0,448,453,441],
[473,435,426,413,436,419,443,0,408,427],
[468,442,429,435,442,438,438,483,0,450],
[477,450,436,428,444,445,450,464,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,450,456,447,440,453,437,440,496],
[445,0,441,450,457,442,429,415,411,481],
[441,450,0,457,450,445,424,433,440,465],
[435,441,434,0,432,432,415,436,435,461],
[444,434,441,459,0,428,435,413,421,463],
[451,449,446,459,463,0,434,446,442,501],
[438,462,467,476,456,457,0,451,451,480],
[454,476,458,455,478,445,440,0,477,494],
[451,480,451,456,470,449,440,414,0,498],
[395,410,426,430,428,390,411,397,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,439,445,451,457,439,445,450,442],
[449,0,447,453,454,423,443,429,479,461],
[452,444,0,472,465,468,453,433,449,451],
[446,438,419,0,449,445,453,460,475,442],
[440,437,426,442,0,441,444,442,438,436],
[434,468,423,446,450,0,459,445,483,471],
[452,448,438,438,447,432,0,462,472,445],
[446,462,458,431,449,446,429,0,453,430],
[441,412,442,416,453,408,419,438,0,432],
[449,430,440,449,455,420,446,461,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,449,439,435,468,439,457,451,408],
[425,0,432,421,427,498,429,462,452,438],
[442,459,0,426,432,458,463,488,464,414],
[452,470,465,0,450,443,457,452,464,448],
[456,464,459,441,0,452,458,472,471,432],
[423,393,433,448,439,0,435,427,444,389],
[452,462,428,434,433,456,0,452,444,412],
[434,429,403,439,419,464,439,0,456,430],
[440,439,427,427,420,447,447,435,0,385],
[483,453,477,443,459,502,479,461,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,445,432,462,431,453,420,430,438],
[464,0,457,456,438,464,433,454,437,451],
[446,434,0,434,451,444,434,451,450,462],
[459,435,457,0,426,461,454,474,426,450],
[429,453,440,465,0,429,449,454,459,431],
[460,427,447,430,462,0,435,455,442,437],
[438,458,457,437,442,456,0,456,467,454],
[471,437,440,417,437,436,435,0,427,412],
[461,454,441,465,432,449,424,464,0,427],
[453,440,429,441,460,454,437,479,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,407,432,421,464,408,451,433,462],
[467,0,431,431,432,459,448,445,422,468],
[484,460,0,459,461,473,419,454,449,474],
[459,460,432,0,442,445,428,429,437,451],
[470,459,430,449,0,472,421,437,425,447],
[427,432,418,446,419,0,440,438,430,440],
[483,443,472,463,470,451,0,456,459,474],
[440,446,437,462,454,453,435,0,444,461],
[458,469,442,454,466,461,432,447,0,467],
[429,423,417,440,444,451,417,430,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,471,475,482,434,476,446,445,490],
[417,0,451,463,465,418,465,443,433,484],
[420,440,0,470,462,426,449,432,431,461],
[416,428,421,0,458,423,458,405,426,456],
[409,426,429,433,0,419,451,431,432,502],
[457,473,465,468,472,0,472,461,442,514],
[415,426,442,433,440,419,0,415,426,449],
[445,448,459,486,460,430,476,0,449,482],
[446,458,460,465,459,449,465,442,0,500],
[401,407,430,435,389,377,442,409,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,438,426,463,435,473,429,452,457],
[448,0,450,416,475,453,475,442,429,460],
[453,441,0,449,479,440,469,452,459,460],
[465,475,442,0,470,443,484,474,455,470],
[428,416,412,421,0,428,462,431,431,447],
[456,438,451,448,463,0,457,450,440,449],
[418,416,422,407,429,434,0,414,439,455],
[462,449,439,417,460,441,477,0,427,472],
[439,462,432,436,460,451,452,464,0,429],
[434,431,431,421,444,442,436,419,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,437,415,453,426,462,453,462,435],
[448,0,417,436,444,425,418,458,442,440],
[454,474,0,451,455,444,452,465,475,449],
[476,455,440,0,467,440,450,474,442,451],
[438,447,436,424,0,436,441,436,452,438],
[465,466,447,451,455,0,466,481,468,439],
[429,473,439,441,450,425,0,449,430,443],
[438,433,426,417,455,410,442,0,445,422],
[429,449,416,449,439,423,461,446,0,422],
[456,451,442,440,453,452,448,469,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,444,438,419,473,450,416,432,432],
[434,0,446,441,450,440,435,423,448,452],
[447,445,0,443,463,455,449,424,437,424],
[453,450,448,0,463,440,435,460,450,451],
[472,441,428,428,0,455,454,451,432,417],
[418,451,436,451,436,0,450,434,440,444],
[441,456,442,456,437,441,0,426,432,446],
[475,468,467,431,440,457,465,0,451,436],
[459,443,454,441,459,451,459,440,0,461],
[459,439,467,440,474,447,445,455,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,606,510,476,571,318,477,416,474],
[384,0,356,285,322,386,414,320,223,256],
[285,535,0,347,345,444,444,378,286,412],
[381,606,544,0,383,479,510,482,477,477],
[415,569,546,508,0,507,572,476,476,443],
[320,505,447,412,384,0,414,383,414,414],
[573,477,447,381,319,477,0,447,317,349],
[414,571,513,409,415,508,444,0,445,381],
[475,668,605,414,415,477,574,446,0,444],
[417,635,479,414,448,477,542,510,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,339,408,550,378,446,409,479,305],
[379,0,310,412,415,446,445,447,410,411],
[552,581,0,408,517,414,448,479,511,479],
[483,479,483,0,516,479,512,516,443,446],
[341,476,374,375,0,345,379,340,478,478],
[513,445,477,412,546,0,476,512,476,442],
[445,446,443,379,512,415,0,481,406,510],
[482,444,412,375,551,379,410,0,514,446],
[412,481,380,448,413,415,485,377,0,443],
[586,480,412,445,413,449,381,445,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,449,449,455,437,451,432,468,458],
[431,0,434,421,435,461,463,438,473,447],
[442,457,0,448,442,438,452,445,473,454],
[442,470,443,0,448,449,458,436,447,447],
[436,456,449,443,0,413,442,433,461,424],
[454,430,453,442,478,0,462,453,489,445],
[440,428,439,433,449,429,0,427,453,449],
[459,453,446,455,458,438,464,0,478,457],
[423,418,418,444,430,402,438,413,0,427],
[433,444,437,444,467,446,442,434,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,473,438,440,447,419,417,420,465],
[475,0,481,434,464,443,447,445,420,456],
[418,410,0,394,422,423,411,437,434,452],
[453,457,497,0,455,454,456,439,449,487],
[451,427,469,436,0,466,440,441,463,490],
[444,448,468,437,425,0,439,450,460,478],
[472,444,480,435,451,452,0,468,463,489],
[474,446,454,452,450,441,423,0,433,457],
[471,471,457,442,428,431,428,458,0,457],
[426,435,439,404,401,413,402,434,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,478,397,450,397,421,442,418,460],
[445,0,465,454,476,405,434,404,449,467],
[413,426,0,382,445,443,420,391,424,488],
[494,437,509,0,450,374,412,427,453,465],
[441,415,446,441,0,383,386,443,405,477],
[494,486,448,517,508,0,478,440,445,489],
[470,457,471,479,505,413,0,468,455,472],
[449,487,500,464,448,451,423,0,435,475],
[473,442,467,438,486,446,436,456,0,451],
[431,424,403,426,414,402,419,416,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,453,405,436,464,447,462,463,436],
[446,0,485,437,471,486,460,458,484,434],
[438,406,0,384,427,461,448,471,475,439],
[486,454,507,0,423,467,468,471,479,470],
[455,420,464,468,0,464,477,450,481,422],
[427,405,430,424,427,0,416,438,440,408],
[444,431,443,423,414,475,0,451,463,423],
[429,433,420,420,441,453,440,0,457,417],
[428,407,416,412,410,451,428,434,0,409],
[455,457,452,421,469,483,468,474,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,435,435,467,431,466,444,457,430],
[447,0,452,448,494,473,445,442,462,451],
[456,439,0,453,473,460,452,452,472,453],
[456,443,438,0,474,458,440,450,464,460],
[424,397,418,417,0,435,428,417,455,447],
[460,418,431,433,456,0,456,447,462,438],
[425,446,439,451,463,435,0,436,449,447],
[447,449,439,441,474,444,455,0,457,457],
[434,429,419,427,436,429,442,434,0,435],
[461,440,438,431,444,453,444,434,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,409,427,428,429,400,462,451,439],
[477,0,479,450,428,461,447,479,446,456],
[482,412,0,452,443,441,449,440,448,439],
[464,441,439,0,406,450,400,437,458,431],
[463,463,448,485,0,458,441,447,428,449],
[462,430,450,441,433,0,420,468,435,450],
[491,444,442,491,450,471,0,481,471,456],
[429,412,451,454,444,423,410,0,434,439],
[440,445,443,433,463,456,420,457,0,458],
[452,435,452,460,442,441,435,452,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,442,441,437,434,402,458,393,422],
[457,0,450,439,412,464,430,468,402,459],
[449,441,0,455,442,424,431,463,415,479],
[450,452,436,0,445,462,402,464,416,451],
[454,479,449,446,0,453,436,461,425,465],
[457,427,467,429,438,0,404,433,410,443],
[489,461,460,489,455,487,0,442,468,483],
[433,423,428,427,430,458,449,0,436,482],
[498,489,476,475,466,481,423,455,0,505],
[469,432,412,440,426,448,408,409,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,419,458,431,519,493,453,407,477],
[484,0,396,429,495,466,472,445,459,440],
[472,495,0,404,453,482,467,447,465,475],
[433,462,487,0,446,496,492,449,403,480],
[460,396,438,445,0,456,525,408,388,439],
[372,425,409,395,435,0,462,420,377,420],
[398,419,424,399,366,429,0,355,376,447],
[438,446,444,442,483,471,536,0,452,502],
[484,432,426,488,503,514,515,439,0,465],
[414,451,416,411,452,471,444,389,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,457,460,430,436,446,445,477,455],
[436,0,446,440,433,456,447,430,470,441],
[434,445,0,421,431,430,425,455,484,434],
[431,451,470,0,419,439,449,444,484,450],
[461,458,460,472,0,443,448,441,469,435],
[455,435,461,452,448,0,450,431,466,435],
[445,444,466,442,443,441,0,428,453,457],
[446,461,436,447,450,460,463,0,475,412],
[414,421,407,407,422,425,438,416,0,442],
[436,450,457,441,456,456,434,479,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,456,444,446,401,440,452,422,426],
[468,0,460,445,495,434,455,483,441,450],
[435,431,0,429,435,412,448,476,439,447],
[447,446,462,0,481,407,453,456,423,420],
[445,396,456,410,0,448,404,446,400,388],
[490,457,479,484,443,0,463,496,457,442],
[451,436,443,438,487,428,0,443,460,450],
[439,408,415,435,445,395,448,0,398,409],
[469,450,452,468,491,434,431,493,0,418],
[465,441,444,471,503,449,441,482,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,508,482,465,537,458,459,506,528],
[450,0,520,435,453,491,419,469,438,456],
[383,371,0,416,449,418,387,381,453,427],
[409,456,475,0,452,413,347,424,416,468],
[426,438,442,439,0,483,493,469,437,466],
[354,400,473,478,408,0,456,431,442,410],
[433,472,504,544,398,435,0,422,429,469],
[432,422,510,467,422,460,469,0,430,429],
[385,453,438,475,454,449,462,461,0,442],
[363,435,464,423,425,481,422,462,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,412,361,440,455,390,404,406,412],
[474,0,449,440,475,477,456,465,437,460],
[479,442,0,438,464,503,463,465,441,464],
[530,451,453,0,486,473,457,436,487,473],
[451,416,427,405,0,447,387,410,398,427],
[436,414,388,418,444,0,442,411,420,443],
[501,435,428,434,504,449,0,439,458,443],
[487,426,426,455,481,480,452,0,461,472],
[485,454,450,404,493,471,433,430,0,475],
[479,431,427,418,464,448,448,419,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,476,451,421,458,463,448,450,436],
[456,0,477,439,445,465,446,436,444,435],
[415,414,0,410,421,441,432,444,437,429],
[440,452,481,0,450,459,466,456,485,457],
[470,446,470,441,0,453,462,467,442,455],
[433,426,450,432,438,0,430,445,427,439],
[428,445,459,425,429,461,0,421,441,417],
[443,455,447,435,424,446,470,0,466,431],
[441,447,454,406,449,464,450,425,0,423],
[455,456,462,434,436,452,474,460,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,409,417,432,425,393,421,404,381],
[487,0,435,425,419,432,408,472,433,448],
[482,456,0,493,432,458,404,461,442,425],
[474,466,398,0,444,433,396,422,434,416],
[459,472,459,447,0,434,433,434,441,475],
[466,459,433,458,457,0,426,436,410,451],
[498,483,487,495,458,465,0,451,461,427],
[470,419,430,469,457,455,440,0,473,427],
[487,458,449,457,450,481,430,418,0,416],
[510,443,466,475,416,440,464,464,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,428,453,463,452,381,424,345,443],
[434,0,416,467,415,400,393,430,379,423],
[463,475,0,487,452,414,443,436,412,467],
[438,424,404,0,426,399,405,440,374,425],
[428,476,439,465,0,437,401,466,421,435],
[439,491,477,492,454,0,435,469,449,472],
[510,498,448,486,490,456,0,460,421,455],
[467,461,455,451,425,422,431,0,419,437],
[546,512,479,517,470,442,470,472,0,502],
[448,468,424,466,456,419,436,454,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,458,453,443,447,444,450,453,463],
[450,0,429,423,431,440,431,423,438,453],
[433,462,0,452,429,450,439,432,432,455],
[438,468,439,0,442,465,423,463,441,466],
[448,460,462,449,0,447,442,441,449,465],
[444,451,441,426,444,0,440,463,433,452],
[447,460,452,468,449,451,0,458,433,466],
[441,468,459,428,450,428,433,0,444,462],
[438,453,459,450,442,458,458,447,0,453],
[428,438,436,425,426,439,425,429,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,417,421,435,433,401,436,456,436],
[429,0,412,424,431,410,417,406,441,431],
[474,479,0,436,463,441,460,443,471,455],
[470,467,455,0,454,447,457,443,471,441],
[456,460,428,437,0,429,431,434,447,449],
[458,481,450,444,462,0,436,435,473,429],
[490,474,431,434,460,455,0,445,458,456],
[455,485,448,448,457,456,446,0,461,439],
[435,450,420,420,444,418,433,430,0,426],
[455,460,436,450,442,462,435,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,428,431,413,461,450,434,455,431],
[460,0,450,443,478,463,479,453,469,453],
[463,441,0,438,448,449,456,449,450,426],
[460,448,453,0,456,447,466,431,447,466],
[478,413,443,435,0,453,451,438,448,424],
[430,428,442,444,438,0,446,443,427,450],
[441,412,435,425,440,445,0,429,435,435],
[457,438,442,460,453,448,462,0,466,453],
[436,422,441,444,443,464,456,425,0,436],
[460,438,465,425,467,441,456,438,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,451,471,441,470,465,450,476,444],
[438,0,418,439,458,456,466,437,441,431],
[440,473,0,473,468,491,496,459,499,481],
[420,452,418,0,435,422,437,421,456,448],
[450,433,423,456,0,439,473,464,428,432],
[421,435,400,469,452,0,430,452,433,433],
[426,425,395,454,418,461,0,443,438,417],
[441,454,432,470,427,439,448,0,465,440],
[415,450,392,435,463,458,453,426,0,446],
[447,460,410,443,459,458,474,451,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,411,451,416,418,463,420,425,464],
[446,0,467,454,441,456,497,451,476,455],
[480,424,0,429,450,450,482,440,462,474],
[440,437,462,0,438,471,454,428,462,467],
[475,450,441,453,0,430,460,464,469,461],
[473,435,441,420,461,0,484,443,455,426],
[428,394,409,437,431,407,0,431,445,421],
[471,440,451,463,427,448,460,0,486,475],
[466,415,429,429,422,436,446,405,0,429],
[427,436,417,424,430,465,470,416,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,462,447,441,507,423,452,439,479],
[391,0,400,401,429,433,426,373,422,451],
[429,491,0,472,443,497,426,413,435,472],
[444,490,419,0,444,507,452,430,432,474],
[450,462,448,447,0,473,424,411,413,497],
[384,458,394,384,418,0,409,347,388,461],
[468,465,465,439,467,482,0,433,468,466],
[439,518,478,461,480,544,458,0,440,547],
[452,469,456,459,478,503,423,451,0,519],
[412,440,419,417,394,430,425,344,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,435,440,426,418,421,451,442],
[460,0,436,416,431,434,446,438,460,433],
[448,455,0,469,445,462,458,469,474,461],
[456,475,422,0,458,445,448,450,441,450],
[451,460,446,433,0,439,443,459,455,440],
[465,457,429,446,452,0,453,434,452,442],
[473,445,433,443,448,438,0,459,468,446],
[470,453,422,441,432,457,432,0,445,440],
[440,431,417,450,436,439,423,446,0,427],
[449,458,430,441,451,449,445,451,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,474,443,463,426,463,451,513,440],
[495,0,499,461,412,436,510,508,481,468],
[417,392,0,452,389,417,435,391,458,451],
[448,430,439,0,396,412,506,421,407,383],
[428,479,502,495,0,459,550,514,518,513],
[465,455,474,479,432,0,482,473,495,453],
[428,381,456,385,341,409,0,430,379,391],
[440,383,500,470,377,418,461,0,438,435],
[378,410,433,484,373,396,512,453,0,417],
[451,423,440,508,378,438,500,456,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,437,414,460,447,402,405,397,424],
[457,0,429,432,444,488,383,421,447,416],
[454,462,0,459,477,494,412,413,497,416],
[477,459,432,0,411,434,399,411,437,383],
[431,447,414,480,0,431,398,403,420,367],
[444,403,397,457,460,0,396,377,472,359],
[489,508,479,492,493,495,0,505,503,422],
[486,470,478,480,488,514,386,0,433,435],
[494,444,394,454,471,419,388,458,0,458],
[467,475,475,508,524,532,469,456,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,418,431,405,443,425,424,432,429],
[464,0,427,468,422,412,417,444,472,454],
[473,464,0,437,458,422,431,442,473,472],
[460,423,454,0,457,445,436,448,466,462],
[486,469,433,434,0,422,443,435,440,472],
[448,479,469,446,469,0,421,440,460,416],
[466,474,460,455,448,470,0,425,464,483],
[467,447,449,443,456,451,466,0,489,486],
[459,419,418,425,451,431,427,402,0,438],
[462,437,419,429,419,475,408,405,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,457,452,461,434,435,438,445,452],
[478,0,469,485,453,465,424,458,450,469],
[434,422,0,439,422,449,419,459,421,454],
[439,406,452,0,454,447,430,462,410,404],
[430,438,469,437,0,457,447,431,414,430],
[457,426,442,444,434,0,425,460,420,456],
[456,467,472,461,444,466,0,483,484,475],
[453,433,432,429,460,431,408,0,455,454],
[446,441,470,481,477,471,407,436,0,427],
[439,422,437,487,461,435,416,437,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,430,410,428,360,409,412,388,389],
[504,0,417,417,457,401,457,409,413,430],
[461,474,0,425,460,438,446,433,415,461],
[481,474,466,0,467,424,478,494,472,468],
[463,434,431,424,0,412,447,457,391,433],
[531,490,453,467,479,0,483,457,445,467],
[482,434,445,413,444,408,0,387,387,457],
[479,482,458,397,434,434,504,0,410,456],
[503,478,476,419,500,446,504,481,0,463],
[502,461,430,423,458,424,434,435,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,472,464,463,449,443,464,481,441],
[458,0,469,460,464,443,447,454,475,469],
[419,422,0,454,446,435,429,438,449,463],
[427,431,437,0,424,432,448,442,485,446],
[428,427,445,467,0,444,403,424,450,444],
[442,448,456,459,447,0,424,456,455,427],
[448,444,462,443,488,467,0,432,480,461],
[427,437,453,449,467,435,459,0,477,451],
[410,416,442,406,441,436,411,414,0,413],
[450,422,428,445,447,464,430,440,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,414,398,443,437,464,432,441,447],
[462,0,436,448,445,447,460,446,446,485],
[477,455,0,489,490,493,475,443,489,525],
[493,443,402,0,464,433,449,451,462,474],
[448,446,401,427,0,458,465,415,461,462],
[454,444,398,458,433,0,448,422,451,452],
[427,431,416,442,426,443,0,428,453,437],
[459,445,448,440,476,469,463,0,457,494],
[450,445,402,429,430,440,438,434,0,454],
[444,406,366,417,429,439,454,397,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,462,472,437,461,485,480,470,449],
[457,0,461,464,442,441,477,493,481,449],
[429,430,0,426,417,431,430,420,459,416],
[419,427,465,0,435,427,464,457,430,433],
[454,449,474,456,0,414,482,485,466,429],
[430,450,460,464,477,0,474,480,475,420],
[406,414,461,427,409,417,0,451,458,432],
[411,398,471,434,406,411,440,0,445,447],
[421,410,432,461,425,416,433,446,0,426],
[442,442,475,458,462,471,459,444,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,437,460,409,435,423,431,411,450],
[455,0,464,455,451,450,442,443,440,442],
[454,427,0,462,426,430,434,457,443,439],
[431,436,429,0,412,435,436,420,433,422],
[482,440,465,479,0,464,474,453,459,470],
[456,441,461,456,427,0,438,437,434,454],
[468,449,457,455,417,453,0,449,447,477],
[460,448,434,471,438,454,442,0,428,458],
[480,451,448,458,432,457,444,463,0,466],
[441,449,452,469,421,437,414,433,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,454,440,480,447,482,437,451,449],
[433,0,434,415,467,432,456,434,441,437],
[437,457,0,417,444,425,463,453,425,442],
[451,476,474,0,490,443,506,462,425,455],
[411,424,447,401,0,383,475,398,406,408],
[444,459,466,448,508,0,505,476,462,450],
[409,435,428,385,416,386,0,407,399,393],
[454,457,438,429,493,415,484,0,395,439],
[440,450,466,466,485,429,492,496,0,476],
[442,454,449,436,483,441,498,452,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,432,461,426,447,444,428,418,420],
[472,0,446,443,423,457,460,420,437,448],
[459,445,0,439,448,460,468,464,479,440],
[430,448,452,0,414,441,460,404,416,429],
[465,468,443,477,0,452,463,437,444,450],
[444,434,431,450,439,0,468,421,423,416],
[447,431,423,431,428,423,0,387,401,425],
[463,471,427,487,454,470,504,0,426,459],
[473,454,412,475,447,468,490,465,0,457],
[471,443,451,462,441,475,466,432,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,434,411,426,447,429,447,448,457],
[419,0,390,396,413,417,413,440,404,416],
[457,501,0,420,464,495,483,454,456,443],
[480,495,471,0,473,493,462,467,444,463],
[465,478,427,418,0,443,443,465,430,428],
[444,474,396,398,448,0,438,421,418,427],
[462,478,408,429,448,453,0,446,426,430],
[444,451,437,424,426,470,445,0,421,433],
[443,487,435,447,461,473,465,470,0,446],
[434,475,448,428,463,464,461,458,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,413,424,427,457,458,443,418,440],
[425,0,406,393,401,460,443,409,422,404],
[478,485,0,443,468,499,420,453,464,519],
[467,498,448,0,461,507,433,454,458,450],
[464,490,423,430,0,498,455,485,458,478],
[434,431,392,384,393,0,440,408,387,420],
[433,448,471,458,436,451,0,432,413,458],
[448,482,438,437,406,483,459,0,390,470],
[473,469,427,433,433,504,478,501,0,456],
[451,487,372,441,413,471,433,421,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,395,431,414,549,378,304,395,429],
[529,0,532,450,445,583,444,354,465,444],
[496,359,0,432,376,485,413,358,435,392],
[460,441,459,0,371,443,463,373,452,370],
[477,446,515,520,0,519,466,448,435,445],
[342,308,406,448,372,0,409,338,380,404],
[513,447,478,428,425,482,0,357,428,425],
[587,537,533,518,443,553,534,0,485,448],
[496,426,456,439,456,511,463,406,0,508],
[462,447,499,521,446,487,466,443,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,433,446,435,418,422,455,426,434],
[464,0,459,457,448,433,418,487,439,445],
[458,432,0,479,462,473,425,463,457,450],
[445,434,412,0,442,412,427,445,448,441],
[456,443,429,449,0,416,412,441,406,440],
[473,458,418,479,475,0,452,496,435,481],
[469,473,466,464,479,439,0,462,456,460],
[436,404,428,446,450,395,429,0,400,438],
[465,452,434,443,485,456,435,491,0,467],
[457,446,441,450,451,410,431,453,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,468,436,405,457,444,453,421,447],
[478,0,487,444,459,466,454,465,433,462],
[423,404,0,420,414,416,422,416,405,422],
[455,447,471,0,427,473,475,452,426,447],
[486,432,477,464,0,467,478,452,464,478],
[434,425,475,418,424,0,463,440,427,458],
[447,437,469,416,413,428,0,431,437,468],
[438,426,475,439,439,451,460,0,444,451],
[470,458,486,465,427,464,454,447,0,480],
[444,429,469,444,413,433,423,440,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,469,461,423,461,436,450,469,436],
[446,0,463,455,429,468,449,438,462,426],
[422,428,0,458,452,443,425,436,442,437],
[430,436,433,0,418,449,431,429,414,434],
[468,462,439,473,0,487,469,448,447,444],
[430,423,448,442,404,0,434,430,427,412],
[455,442,466,460,422,457,0,452,453,459],
[441,453,455,462,443,461,439,0,439,430],
[422,429,449,477,444,464,438,452,0,445],
[455,465,454,457,447,479,432,461,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,492,466,387,413,523,493,440,413],
[537,0,589,476,507,421,588,562,507,479],
[399,302,0,413,311,280,477,504,423,393],
[425,415,478,0,449,336,533,449,451,284],
[504,384,580,442,0,414,470,498,500,333],
[478,470,611,555,477,0,421,472,477,476],
[368,303,414,358,421,470,0,416,472,418],
[398,329,387,442,393,419,475,0,420,392],
[451,384,468,440,391,414,419,471,0,363],
[478,412,498,607,558,415,473,499,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,439,431,493,489,461,458,476,455],
[409,0,384,401,411,452,400,380,436,449],
[452,507,0,458,451,478,479,419,452,452],
[460,490,433,0,501,524,470,436,491,452],
[398,480,440,390,0,414,407,389,430,419],
[402,439,413,367,477,0,424,441,417,439],
[430,491,412,421,484,467,0,436,477,418],
[433,511,472,455,502,450,455,0,473,466],
[415,455,439,400,461,474,414,418,0,440],
[436,442,439,439,472,452,473,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,452,465,498,481,492,438,467,496],
[429,0,450,444,471,425,482,417,478,487],
[439,441,0,464,487,442,464,446,486,473],
[426,447,427,0,463,457,440,417,463,495],
[393,420,404,428,0,431,437,404,417,458],
[410,466,449,434,460,0,447,448,461,476],
[399,409,427,451,454,444,0,421,457,483],
[453,474,445,474,487,443,470,0,482,460],
[424,413,405,428,474,430,434,409,0,457],
[395,404,418,396,433,415,408,431,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,457,441,458,450,461,466,462,447],
[455,0,431,450,443,439,457,453,443,433],
[434,460,0,442,451,442,436,462,445,442],
[450,441,449,0,452,449,452,462,444,438],
[433,448,440,439,0,426,430,464,438,426],
[441,452,449,442,465,0,465,468,454,438],
[430,434,455,439,461,426,0,475,455,448],
[425,438,429,429,427,423,416,0,433,428],
[429,448,446,447,453,437,436,458,0,439],
[444,458,449,453,465,453,443,463,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,452,475,449,455,463,459,439,451],
[436,0,424,464,440,439,438,427,436,433],
[439,467,0,471,451,448,464,445,457,446],
[416,427,420,0,430,422,436,412,426,433],
[442,451,440,461,0,442,450,407,428,419],
[436,452,443,469,449,0,457,436,445,469],
[428,453,427,455,441,434,0,424,441,433],
[432,464,446,479,484,455,467,0,458,461],
[452,455,434,465,463,446,450,433,0,423],
[440,458,445,458,472,422,458,430,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,456,462,463,452,448,440,441,453],
[434,0,455,455,462,427,436,441,421,416],
[435,436,0,467,464,453,447,464,456,456],
[429,436,424,0,440,442,427,441,450,436],
[428,429,427,451,0,437,446,428,417,426],
[439,464,438,449,454,0,428,433,439,425],
[443,455,444,464,445,463,0,449,452,453],
[451,450,427,450,463,458,442,0,422,436],
[450,470,435,441,474,452,439,469,0,438],
[438,475,435,455,465,466,438,455,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,462,438,490,481,467,483,450,447],
[423,0,444,415,409,425,425,450,425,437],
[429,447,0,432,434,428,413,439,436,429],
[453,476,459,0,435,475,449,469,445,459],
[401,482,457,456,0,455,433,462,434,442],
[410,466,463,416,436,0,423,445,423,444],
[424,466,478,442,458,468,0,482,440,441],
[408,441,452,422,429,446,409,0,413,444],
[441,466,455,446,457,468,451,478,0,446],
[444,454,462,432,449,447,450,447,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,424,426,444,435,454,436,413,431],
[469,0,434,466,433,444,437,403,407,479],
[467,457,0,465,471,407,475,479,476,438],
[465,425,426,0,467,430,435,432,422,432],
[447,458,420,424,0,466,424,399,402,448],
[456,447,484,461,425,0,449,477,438,428],
[437,454,416,456,467,442,0,431,431,426],
[455,488,412,459,492,414,460,0,435,451],
[478,484,415,469,489,453,460,456,0,452],
[460,412,453,459,443,463,465,440,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,478,433,458,440,454,456,463,436],
[414,0,532,449,469,443,491,465,468,462],
[413,359,0,427,435,451,370,430,385,418],
[458,442,464,0,447,460,538,480,455,468],
[433,422,456,444,0,468,482,407,437,418],
[451,448,440,431,423,0,390,440,419,391],
[437,400,521,353,409,501,0,425,480,460],
[435,426,461,411,484,451,466,0,493,454],
[428,423,506,436,454,472,411,398,0,425],
[455,429,473,423,473,500,431,437,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,457,458,430,496,459,452,470,450],
[450,0,425,436,453,457,435,454,429,457],
[434,466,0,453,470,446,436,452,460,407],
[433,455,438,0,420,451,439,432,467,437],
[461,438,421,471,0,454,425,447,455,446],
[395,434,445,440,437,0,404,415,424,443],
[432,456,455,452,466,487,0,459,448,419],
[439,437,439,459,444,476,432,0,442,455],
[421,462,431,424,436,467,443,449,0,465],
[441,434,484,454,445,448,472,436,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,407,429,400,437,448,461,433,435],
[457,0,481,478,435,437,490,461,471,452],
[484,410,0,413,437,429,469,457,457,420],
[462,413,478,0,460,460,485,477,503,438],
[491,456,454,431,0,440,478,499,476,449],
[454,454,462,431,451,0,486,486,505,454],
[443,401,422,406,413,405,0,433,444,447],
[430,430,434,414,392,405,458,0,450,423],
[458,420,434,388,415,386,447,441,0,414],
[456,439,471,453,442,437,444,468,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,436,463,444,446,420,463,450,430],
[430,0,407,428,416,438,420,429,425,454],
[455,484,0,461,455,440,445,451,461,482],
[428,463,430,0,444,446,456,419,433,436],
[447,475,436,447,0,474,428,436,436,463],
[445,453,451,445,417,0,432,447,418,443],
[471,471,446,435,463,459,0,447,450,448],
[428,462,440,472,455,444,444,0,424,462],
[441,466,430,458,455,473,441,467,0,457],
[461,437,409,455,428,448,443,429,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,451,462,475,470,482,484,458,473],
[463,0,457,434,463,450,453,473,455,478],
[440,434,0,452,465,461,454,467,445,463],
[429,457,439,0,465,494,468,480,420,462],
[416,428,426,426,0,446,442,484,451,435],
[421,441,430,397,445,0,437,463,415,475],
[409,438,437,423,449,454,0,453,427,445],
[407,418,424,411,407,428,438,0,433,425],
[433,436,446,471,440,476,464,458,0,468],
[418,413,428,429,456,416,446,466,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,465,461,429,457,465,460,458,453],
[435,0,421,440,428,440,460,443,446,467],
[426,470,0,441,423,438,456,447,441,447],
[430,451,450,0,432,436,461,462,453,457],
[462,463,468,459,0,441,469,475,464,441],
[434,451,453,455,450,0,460,471,431,449],
[426,431,435,430,422,431,0,454,450,448],
[431,448,444,429,416,420,437,0,424,431],
[433,445,450,438,427,460,441,467,0,468],
[438,424,444,434,450,442,443,460,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,447,433,467,451,466,446,461,464],
[429,0,435,415,455,469,457,445,455,442],
[444,456,0,432,454,465,464,463,460,461],
[458,476,459,0,446,471,474,444,477,474],
[424,436,437,445,0,466,457,436,448,423],
[440,422,426,420,425,0,461,420,435,439],
[425,434,427,417,434,430,0,449,452,442],
[445,446,428,447,455,471,442,0,460,447],
[430,436,431,414,443,456,439,431,0,434],
[427,449,430,417,468,452,449,444,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,473,457,446,433,452,471,447],
[437,0,458,451,442,439,428,428,447,421],
[436,433,0,435,445,437,432,418,453,426],
[418,440,456,0,447,434,447,432,460,442],
[434,449,446,444,0,426,421,436,475,437],
[445,452,454,457,465,0,447,457,459,463],
[458,463,459,444,470,444,0,442,449,438],
[439,463,473,459,455,434,449,0,444,447],
[420,444,438,431,416,432,442,447,0,427],
[444,470,465,449,454,428,453,444,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,440,442,439,442,479,451,464,452],
[431,0,431,428,438,427,463,448,459,439],
[451,460,0,425,462,437,455,448,459,423],
[449,463,466,0,461,434,479,474,475,459],
[452,453,429,430,0,440,456,437,442,416],
[449,464,454,457,451,0,454,460,467,442],
[412,428,436,412,435,437,0,444,448,417],
[440,443,443,417,454,431,447,0,467,435],
[427,432,432,416,449,424,443,424,0,428],
[439,452,468,432,475,449,474,456,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,433,457,442,459,470,437,464,482],
[447,0,464,458,463,462,449,468,445,450],
[458,427,0,446,456,469,450,460,476,476],
[434,433,445,0,461,451,442,449,439,453],
[449,428,435,430,0,465,447,429,451,469],
[432,429,422,440,426,0,456,422,447,439],
[421,442,441,449,444,435,0,433,466,450],
[454,423,431,442,462,469,458,0,444,466],
[427,446,415,452,440,444,425,447,0,446],
[409,441,415,438,422,452,441,425,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,456,438,496,463,452,473,442,466],
[414,0,430,408,446,413,469,452,457,430],
[435,461,0,458,458,450,457,463,482,448],
[453,483,433,0,461,478,479,503,473,476],
[395,445,433,430,0,450,434,468,415,473],
[428,478,441,413,441,0,466,470,449,455],
[439,422,434,412,457,425,0,440,423,442],
[418,439,428,388,423,421,451,0,405,443],
[449,434,409,418,476,442,468,486,0,488],
[425,461,443,415,418,436,449,448,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,440,454,411,427,453,434,423,433],
[464,0,436,428,459,432,464,433,439,448],
[451,455,0,464,435,461,501,463,442,446],
[437,463,427,0,425,468,460,438,439,453],
[480,432,456,466,0,445,493,449,460,446],
[464,459,430,423,446,0,461,412,410,444],
[438,427,390,431,398,430,0,422,419,415],
[457,458,428,453,442,479,469,0,472,434],
[468,452,449,452,431,481,472,419,0,444],
[458,443,445,438,445,447,476,457,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,382,349,436,401,454,450,393,437],
[525,0,470,445,571,475,509,529,467,491],
[509,421,0,444,494,451,498,511,453,499],
[542,446,447,0,476,486,487,530,433,478],
[455,320,397,415,0,433,428,465,389,420],
[490,416,440,405,458,0,477,511,422,481],
[437,382,393,404,463,414,0,393,417,484],
[441,362,380,361,426,380,498,0,396,440],
[498,424,438,458,502,469,474,495,0,495],
[454,400,392,413,471,410,407,451,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,482,445,443,451,472,463,447,471],
[417,0,412,443,427,391,388,417,408,434],
[409,479,0,437,439,415,400,438,420,463],
[446,448,454,0,447,420,427,486,441,494],
[448,464,452,444,0,432,415,459,408,475],
[440,500,476,471,459,0,418,469,441,471],
[419,503,491,464,476,473,0,497,474,449],
[428,474,453,405,432,422,394,0,437,458],
[444,483,471,450,483,450,417,454,0,494],
[420,457,428,397,416,420,442,433,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,463,416,388,441,402,443,424,421],
[463,0,447,463,405,438,491,456,427,422],
[428,444,0,389,424,440,452,430,404,407],
[475,428,502,0,438,441,502,462,429,393],
[503,486,467,453,0,462,492,456,432,446],
[450,453,451,450,429,0,453,451,430,392],
[489,400,439,389,399,438,0,471,394,406],
[448,435,461,429,435,440,420,0,415,452],
[467,464,487,462,459,461,497,476,0,425],
[470,469,484,498,445,499,485,439,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,494,433,432,453,455,472,447,466],
[464,0,488,414,451,434,449,453,441,463],
[397,403,0,382,418,448,433,427,412,416],
[458,477,509,0,469,487,437,435,448,459],
[459,440,473,422,0,479,441,438,464,433],
[438,457,443,404,412,0,437,447,420,449],
[436,442,458,454,450,454,0,461,448,450],
[419,438,464,456,453,444,430,0,442,427],
[444,450,479,443,427,471,443,449,0,472],
[425,428,475,432,458,442,441,464,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,409,409,451,454,416,422,424,420],
[460,0,433,442,431,458,421,424,454,435],
[482,458,0,453,490,477,436,427,461,472],
[482,449,438,0,468,475,448,460,450,485],
[440,460,401,423,0,438,410,432,444,434],
[437,433,414,416,453,0,429,419,459,444],
[475,470,455,443,481,462,0,439,470,456],
[469,467,464,431,459,472,452,0,464,468],
[467,437,430,441,447,432,421,427,0,456],
[471,456,419,406,457,447,435,423,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,379,439,440,444,459,442,437,461],
[421,0,470,455,459,465,457,453,469,498],
[512,421,0,453,466,474,482,443,451,445],
[452,436,438,0,433,472,456,448,430,473],
[451,432,425,458,0,475,478,450,427,451],
[447,426,417,419,416,0,422,401,406,419],
[432,434,409,435,413,469,0,436,437,443],
[449,438,448,443,441,490,455,0,425,475],
[454,422,440,461,464,485,454,466,0,467],
[430,393,446,418,440,472,448,416,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,427,418,398,402,447,370,429,405],
[499,0,441,455,425,429,441,438,442,412],
[464,450,0,441,436,412,417,409,452,414],
[473,436,450,0,426,455,452,438,450,450],
[493,466,455,465,0,434,495,431,460,468],
[489,462,479,436,457,0,478,447,477,452],
[444,450,474,439,396,413,0,404,455,419],
[521,453,482,453,460,444,487,0,499,421],
[462,449,439,441,431,414,436,392,0,444],
[486,479,477,441,423,439,472,470,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,463,464,477,456,445,465,450,430],
[483,0,476,473,482,459,473,440,468,464],
[428,415,0,428,438,418,394,406,419,437],
[427,418,463,0,447,422,435,448,436,441],
[414,409,453,444,0,458,431,439,439,445],
[435,432,473,469,433,0,439,436,424,476],
[446,418,497,456,460,452,0,463,459,453],
[426,451,485,443,452,455,428,0,431,428],
[441,423,472,455,452,467,432,460,0,413],
[461,427,454,450,446,415,438,463,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,397,485,425,432,434,427,391,437],
[452,0,408,490,472,457,458,420,367,406],
[494,483,0,499,491,470,498,431,458,455],
[406,401,392,0,433,425,467,385,366,371],
[466,419,400,458,0,452,456,420,386,434],
[459,434,421,466,439,0,474,425,434,452],
[457,433,393,424,435,417,0,426,365,402],
[464,471,460,506,471,466,465,0,426,438],
[500,524,433,525,505,457,526,465,0,492],
[454,485,436,520,457,439,489,453,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,431,421,396,420,455,434,427,448],
[435,0,449,407,431,419,429,410,401,454],
[460,442,0,425,419,432,448,427,440,460],
[470,484,466,0,454,451,458,442,494,459],
[495,460,472,437,0,421,420,457,461,486],
[471,472,459,440,470,0,421,416,463,473],
[436,462,443,433,471,470,0,440,487,460],
[457,481,464,449,434,475,451,0,467,461],
[464,490,451,397,430,428,404,424,0,446],
[443,437,431,432,405,418,431,430,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,520,447,525,482,492,445,432,545],
[410,0,459,472,526,467,460,422,352,500],
[371,432,0,397,446,452,504,405,342,466],
[444,419,494,0,463,436,507,482,432,537],
[366,365,445,428,0,404,454,344,412,508],
[409,424,439,455,487,0,483,331,321,429],
[399,431,387,384,437,408,0,392,341,416],
[446,469,486,409,547,560,499,0,458,536],
[459,539,549,459,479,570,550,433,0,542],
[346,391,425,354,383,462,475,355,349,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,462,427,443,344,510,365,402,360],
[548,0,441,469,444,447,445,381,400,465],
[429,450,0,470,449,472,429,451,384,299],
[464,422,421,0,466,401,484,508,380,422],
[448,447,442,425,0,386,467,383,463,378],
[547,444,419,490,505,0,530,447,462,464],
[381,446,462,407,424,361,0,298,440,380],
[526,510,440,383,508,444,593,0,484,466],
[489,491,507,511,428,429,451,407,0,488],
[531,426,592,469,513,427,511,425,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,450,463,443,470,449,451,449,451],
[430,0,446,458,456,460,452,437,461,476],
[441,445,0,463,455,459,456,453,435,483],
[428,433,428,0,450,433,440,429,460,442],
[448,435,436,441,0,446,444,446,435,448],
[421,431,432,458,445,0,430,442,448,432],
[442,439,435,451,447,461,0,453,447,457],
[440,454,438,462,445,449,438,0,452,442],
[442,430,456,431,456,443,444,439,0,440],
[440,415,408,449,443,459,434,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,451,451,471,421,447,461,448,466],
[457,0,467,453,478,462,425,469,444,485],
[440,424,0,429,460,436,417,441,433,467],
[440,438,462,0,463,437,432,441,437,423],
[420,413,431,428,0,409,407,433,407,441],
[470,429,455,454,482,0,436,430,453,477],
[444,466,474,459,484,455,0,471,464,495],
[430,422,450,450,458,461,420,0,438,454],
[443,447,458,454,484,438,427,453,0,444],
[425,406,424,468,450,414,396,437,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,460,439,451,478,417,428,475,440],
[463,0,491,453,465,461,404,412,420,437],
[431,400,0,382,452,379,381,414,419,397],
[452,438,509,0,462,447,409,433,453,404],
[440,426,439,429,0,441,466,394,430,394],
[413,430,512,444,450,0,489,383,467,416],
[474,487,510,482,425,402,0,405,436,453],
[463,479,477,458,497,508,486,0,465,410],
[416,471,472,438,461,424,455,426,0,412],
[451,454,494,487,497,475,438,481,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,445,477,425,453,452,430,428,444],
[452,0,454,458,444,421,439,443,451,460],
[446,437,0,467,442,449,464,444,447,458],
[414,433,424,0,436,415,442,420,435,430],
[466,447,449,455,0,442,446,445,459,458],
[438,470,442,476,449,0,466,450,446,444],
[439,452,427,449,445,425,0,448,423,451],
[461,448,447,471,446,441,443,0,460,466],
[463,440,444,456,432,445,468,431,0,421],
[447,431,433,461,433,447,440,425,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,450,443,435,451,480,396,435,489],
[436,0,420,420,455,407,462,407,482,472],
[441,471,0,450,469,444,484,431,455,489],
[448,471,441,0,450,418,514,474,444,516],
[456,436,422,441,0,412,460,428,466,490],
[440,484,447,473,479,0,468,446,473,515],
[411,429,407,377,431,423,0,375,403,488],
[495,484,460,417,463,445,516,0,444,497],
[456,409,436,447,425,418,488,447,0,467],
[402,419,402,375,401,376,403,394,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,396,432,426,438,455,425,454,451],
[442,0,435,429,426,442,443,434,429,475],
[495,456,0,473,439,459,473,468,446,449],
[459,462,418,0,421,440,461,434,435,452],
[465,465,452,470,0,434,464,458,460,471],
[453,449,432,451,457,0,445,453,447,469],
[436,448,418,430,427,446,0,440,440,439],
[466,457,423,457,433,438,451,0,433,458],
[437,462,445,456,431,444,451,458,0,486],
[440,416,442,439,420,422,452,433,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,446,396,350,400,451,394,499,447],
[393,0,345,395,299,398,398,246,496,344],
[445,546,0,544,647,596,448,544,448,596],
[495,496,347,0,397,252,349,446,398,496],
[541,592,244,494,0,446,296,591,493,493],
[491,493,295,639,445,0,444,544,542,544],
[440,493,443,542,595,447,0,541,494,444],
[497,645,347,445,300,347,350,0,644,444],
[392,395,443,493,398,349,397,247,0,295],
[444,547,295,395,398,347,447,447,596,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,380,461,404,409,426,414,387,452],
[508,0,450,485,518,459,451,417,457,517],
[511,441,0,504,500,498,451,475,464,505],
[430,406,387,0,423,451,400,418,438,458],
[487,373,391,468,0,415,407,427,425,496],
[482,432,393,440,476,0,412,403,444,491],
[465,440,440,491,484,479,0,450,440,499],
[477,474,416,473,464,488,441,0,485,488],
[504,434,427,453,466,447,451,406,0,502],
[439,374,386,433,395,400,392,403,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,427,450,445,458,432,452,417,468],
[396,0,426,419,419,426,425,404,440,437],
[464,465,0,445,454,459,436,449,445,463],
[441,472,446,0,429,443,433,423,443,423],
[446,472,437,462,0,486,431,451,435,471],
[433,465,432,448,405,0,429,413,451,437],
[459,466,455,458,460,462,0,449,466,441],
[439,487,442,468,440,478,442,0,453,491],
[474,451,446,448,456,440,425,438,0,432],
[423,454,428,468,420,454,450,400,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,433,413,465,454,447,450,428,448],
[441,0,420,427,451,441,428,443,420,444],
[458,471,0,446,447,474,446,444,451,482],
[478,464,445,0,468,459,456,472,457,469],
[426,440,444,423,0,443,433,448,453,462],
[437,450,417,432,448,0,468,463,444,451],
[444,463,445,435,458,423,0,460,451,466],
[441,448,447,419,443,428,431,0,425,452],
[463,471,440,434,438,447,440,466,0,473],
[443,447,409,422,429,440,425,439,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,453,440,454,440,457,423,413,466],
[455,0,454,424,448,451,474,456,438,499],
[438,437,0,424,442,462,434,435,414,451],
[451,467,467,0,449,460,452,431,437,489],
[437,443,449,442,0,431,443,428,404,442],
[451,440,429,431,460,0,446,418,416,460],
[434,417,457,439,448,445,0,456,444,459],
[468,435,456,460,463,473,435,0,458,493],
[478,453,477,454,487,475,447,433,0,476],
[425,392,440,402,449,431,432,398,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,472,443,460,441,465,430,452,444],
[446,0,483,452,485,467,452,458,469,418],
[419,408,0,419,450,431,420,442,439,434],
[448,439,472,0,453,417,473,425,440,440],
[431,406,441,438,0,433,434,428,446,406],
[450,424,460,474,458,0,453,461,457,424],
[426,439,471,418,457,438,0,431,438,436],
[461,433,449,466,463,430,460,0,446,454],
[439,422,452,451,445,434,453,445,0,431],
[447,473,457,451,485,467,455,437,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,463,458,473,444,537,451,447,469],
[402,0,422,400,432,411,469,436,433,429],
[428,469,0,439,462,426,498,459,449,449],
[433,491,452,0,473,446,467,468,449,412],
[418,459,429,418,0,423,467,453,458,406],
[447,480,465,445,468,0,495,489,466,417],
[354,422,393,424,424,396,0,420,422,379],
[440,455,432,423,438,402,471,0,434,438],
[444,458,442,442,433,425,469,457,0,399],
[422,462,442,479,485,474,512,453,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,434,425,445,431,465,437,470,438],
[473,0,401,396,420,458,411,426,463,453],
[457,490,0,468,464,442,450,445,484,480],
[466,495,423,0,459,462,459,451,489,483],
[446,471,427,432,0,420,434,450,474,459],
[460,433,449,429,471,0,455,439,469,444],
[426,480,441,432,457,436,0,449,491,438],
[454,465,446,440,441,452,442,0,478,474],
[421,428,407,402,417,422,400,413,0,435],
[453,438,411,408,432,447,453,417,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,459,449,422,447,431,454,454,451],
[455,0,482,445,468,444,439,447,456,469],
[432,409,0,422,412,427,424,449,458,439],
[442,446,469,0,442,438,427,435,432,442],
[469,423,479,449,0,419,418,464,441,444],
[444,447,464,453,472,0,454,461,449,459],
[460,452,467,464,473,437,0,463,462,462],
[437,444,442,456,427,430,428,0,431,452],
[437,435,433,459,450,442,429,460,0,470],
[440,422,452,449,447,432,429,439,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,438,439,447,450,482,441,471,432],
[446,0,435,431,460,459,477,423,475,443],
[453,456,0,454,454,430,474,442,477,442],
[452,460,437,0,455,443,446,453,481,421],
[444,431,437,436,0,458,474,452,471,450],
[441,432,461,448,433,0,446,429,454,420],
[409,414,417,445,417,445,0,412,466,416],
[450,468,449,438,439,462,479,0,488,450],
[420,416,414,410,420,437,425,403,0,379],
[459,448,449,470,441,471,475,441,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,440,358,405,499,405,462,402,375],
[496,0,461,368,468,429,415,455,395,409],
[451,430,0,376,425,469,449,496,422,407],
[533,523,515,0,522,580,471,565,438,506],
[486,423,466,369,0,507,403,472,378,401],
[392,462,422,311,384,0,413,473,385,404],
[486,476,442,420,488,478,0,506,450,474],
[429,436,395,326,419,418,385,0,396,448],
[489,496,469,453,513,506,441,495,0,518],
[516,482,484,385,490,487,417,443,373,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,448,440,433,449,431,486,461,466],
[423,0,421,450,425,424,432,458,436,430],
[443,470,0,458,442,467,439,460,488,443],
[451,441,433,0,410,429,405,451,435,419],
[458,466,449,481,0,425,445,478,457,451],
[442,467,424,462,466,0,455,478,466,463],
[460,459,452,486,446,436,0,468,441,429],
[405,433,431,440,413,413,423,0,427,417],
[430,455,403,456,434,425,450,464,0,445],
[425,461,448,472,440,428,462,474,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,443,451,424,451,453,442,396,454],
[480,0,442,471,459,487,475,453,417,453],
[448,449,0,432,442,465,490,459,448,451],
[440,420,459,0,478,462,487,465,415,442],
[467,432,449,413,0,466,480,440,407,438],
[440,404,426,429,425,0,468,438,404,425],
[438,416,401,404,411,423,0,412,397,398],
[449,438,432,426,451,453,479,0,415,453],
[495,474,443,476,484,487,494,476,0,453],
[437,438,440,449,453,466,493,438,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,437,452,470,434,432,433,417,440],
[434,0,453,479,467,438,433,450,434,452],
[454,438,0,441,480,423,452,457,425,438],
[439,412,450,0,480,437,439,454,433,428],
[421,424,411,411,0,423,421,436,412,420],
[457,453,468,454,468,0,437,464,453,448],
[459,458,439,452,470,454,0,445,431,459],
[458,441,434,437,455,427,446,0,429,445],
[474,457,466,458,479,438,460,462,0,452],
[451,439,453,463,471,443,432,446,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,448,454,442,459,456,435,464,457],
[472,0,446,444,454,437,460,435,469,466],
[443,445,0,441,451,444,451,435,466,472],
[437,447,450,0,433,446,475,413,431,440],
[449,437,440,458,0,441,446,426,440,457],
[432,454,447,445,450,0,466,434,456,461],
[435,431,440,416,445,425,0,455,451,442],
[456,456,456,478,465,457,436,0,461,459],
[427,422,425,460,451,435,440,430,0,454],
[434,425,419,451,434,430,449,432,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,443,459,460,436,438,470,423,455],
[451,0,441,448,441,455,431,404,426,418],
[448,450,0,459,434,430,455,460,445,474],
[432,443,432,0,455,411,420,448,429,448],
[431,450,457,436,0,429,434,456,452,461],
[455,436,461,480,462,0,435,455,426,447],
[453,460,436,471,457,456,0,441,458,467],
[421,487,431,443,435,436,450,0,419,437],
[468,465,446,462,439,465,433,472,0,459],
[436,473,417,443,430,444,424,454,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,459,461,458,445,468,453,460,452],
[427,0,412,452,435,430,417,429,420,439],
[432,479,0,448,451,453,453,449,458,467],
[430,439,443,0,453,444,451,444,457,454],
[433,456,440,438,0,454,431,418,441,418],
[446,461,438,447,437,0,453,441,440,448],
[423,474,438,440,460,438,0,450,457,449],
[438,462,442,447,473,450,441,0,459,445],
[431,471,433,434,450,451,434,432,0,421],
[439,452,424,437,473,443,442,446,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,439,452,453,437,441,455,452,432],
[460,0,441,434,439,438,456,465,462,434],
[452,450,0,455,434,449,424,457,455,452],
[439,457,436,0,443,449,445,450,459,440],
[438,452,457,448,0,453,452,447,464,449],
[454,453,442,442,438,0,455,475,468,464],
[450,435,467,446,439,436,0,445,448,458],
[436,426,434,441,444,416,446,0,431,417],
[439,429,436,432,427,423,443,460,0,430],
[459,457,439,451,442,427,433,474,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,442,421,487,513,538,511,559,515],
[426,0,443,353,565,400,588,514,471,450],
[449,448,0,398,541,444,637,398,448,471],
[470,538,493,0,655,560,564,535,445,493],
[404,326,350,236,0,444,470,535,377,400],
[378,491,447,331,447,0,543,442,448,542],
[353,303,254,327,421,348,0,397,305,328],
[380,377,493,356,356,449,494,0,305,423],
[332,420,443,446,514,443,586,586,0,564],
[376,441,420,398,491,349,563,468,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,534,533,536,535,356,713,534,535],
[355,0,534,533,534,712,355,713,355,712],
[357,357,0,533,536,535,355,713,355,356],
[358,358,358,0,536,357,535,535,179,536],
[355,357,355,355,0,712,355,713,355,533],
[356,179,356,534,179,0,356,356,356,357],
[535,536,536,356,536,535,0,713,357,714],
[178,178,178,356,178,535,178,0,178,356],
[357,536,536,712,536,535,534,713,0,714],
[356,179,535,355,358,534,177,535,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,427,463,441,439,453,433,431,429],
[450,0,466,447,455,438,466,441,460,449],
[464,425,0,431,450,420,467,442,426,420],
[428,444,460,0,436,433,447,432,433,427],
[450,436,441,455,0,428,448,458,413,430],
[452,453,471,458,463,0,468,432,445,457],
[438,425,424,444,443,423,0,420,427,434],
[458,450,449,459,433,459,471,0,426,445],
[460,431,465,458,478,446,464,465,0,465],
[462,442,471,464,461,434,457,446,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,418,459,459,431,430,441,431,454],
[470,0,447,469,468,436,455,466,449,465],
[473,444,0,469,465,461,469,466,449,452],
[432,422,422,0,441,440,412,432,431,451],
[432,423,426,450,0,424,438,433,434,463],
[460,455,430,451,467,0,450,453,457,469],
[461,436,422,479,453,441,0,444,452,468],
[450,425,425,459,458,438,447,0,439,451],
[460,442,442,460,457,434,439,452,0,464],
[437,426,439,440,428,422,423,440,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,455,456,439,447,465,470,501,440],
[428,0,459,448,409,456,462,451,491,457],
[436,432,0,428,424,452,475,436,504,466],
[435,443,463,0,419,422,457,447,465,432],
[452,482,467,472,0,465,473,456,511,443],
[444,435,439,469,426,0,472,467,468,424],
[426,429,416,434,418,419,0,415,465,403],
[421,440,455,444,435,424,476,0,472,404],
[390,400,387,426,380,423,426,419,0,393],
[451,434,425,459,448,467,488,487,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,437,441,442,458,452,440,465,451],
[462,0,465,446,454,476,472,468,447,426],
[454,426,0,427,444,454,474,445,441,410],
[450,445,464,0,432,450,442,449,441,433],
[449,437,447,459,0,455,449,456,480,431],
[433,415,437,441,436,0,430,439,436,410],
[439,419,417,449,442,461,0,447,457,426],
[451,423,446,442,435,452,444,0,445,427],
[426,444,450,450,411,455,434,446,0,405],
[440,465,481,458,460,481,465,464,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,428,443,485,427,482,416,460,451],
[432,0,421,459,459,433,469,416,471,431],
[463,470,0,463,500,440,482,448,484,457],
[448,432,428,0,481,448,473,462,468,426],
[406,432,391,410,0,426,439,388,440,445],
[464,458,451,443,465,0,463,441,466,424],
[409,422,409,418,452,428,0,403,450,424],
[475,475,443,429,503,450,488,0,509,476],
[431,420,407,423,451,425,441,382,0,438],
[440,460,434,465,446,467,467,415,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,432,470,426,431,415,429,440,440],
[463,0,453,473,453,460,447,457,457,443],
[459,438,0,450,450,463,431,438,452,438],
[421,418,441,0,414,415,424,438,426,423],
[465,438,441,477,0,453,454,442,465,443],
[460,431,428,476,438,0,445,430,456,436],
[476,444,460,467,437,446,0,446,448,451],
[462,434,453,453,449,461,445,0,439,447],
[451,434,439,465,426,435,443,452,0,443],
[451,448,453,468,448,455,440,444,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,455,450,434,430,471,463,471,473],
[420,0,419,413,428,432,444,445,442,440],
[436,472,0,464,443,450,461,469,493,486],
[441,478,427,0,443,432,461,452,459,488],
[457,463,448,448,0,437,457,459,486,481],
[461,459,441,459,454,0,494,470,497,472],
[420,447,430,430,434,397,0,428,462,415],
[428,446,422,439,432,421,463,0,463,444],
[420,449,398,432,405,394,429,428,0,454],
[418,451,405,403,410,419,476,447,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,443,446,468,440,429,430,422,419],
[465,0,436,431,464,466,430,407,441,423],
[448,455,0,455,449,475,450,419,438,443],
[445,460,436,0,466,471,439,445,463,451],
[423,427,442,425,0,439,407,419,413,412],
[451,425,416,420,452,0,406,408,423,421],
[462,461,441,452,484,485,0,449,459,424],
[461,484,472,446,472,483,442,0,453,441],
[469,450,453,428,478,468,432,438,0,427],
[472,468,448,440,479,470,467,450,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,467,452,430,470,462,427,436,448],
[446,0,473,438,434,446,461,451,441,454],
[424,418,0,418,413,429,436,414,416,433],
[439,453,473,0,459,474,467,466,477,487],
[461,457,478,432,0,453,465,445,459,464],
[421,445,462,417,438,0,473,440,456,454],
[429,430,455,424,426,418,0,443,448,430],
[464,440,477,425,446,451,448,0,463,443],
[455,450,475,414,432,435,443,428,0,443],
[443,437,458,404,427,437,461,448,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,447,422,451,453,454,447,453,454],
[460,0,467,450,467,442,440,446,428,473],
[444,424,0,435,459,446,433,426,433,445],
[469,441,456,0,476,441,444,437,429,446],
[440,424,432,415,0,452,432,418,423,444],
[438,449,445,450,439,0,438,419,412,425],
[437,451,458,447,459,453,0,414,446,445],
[444,445,465,454,473,472,477,0,470,450],
[438,463,458,462,468,479,445,421,0,468],
[437,418,446,445,447,466,446,441,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,441,421,457,443,433,433,417,452],
[452,0,457,473,474,463,434,465,461,489],
[450,434,0,437,458,458,408,432,441,461],
[470,418,454,0,469,461,446,452,423,470],
[434,417,433,422,0,425,390,418,428,430],
[448,428,433,430,466,0,409,425,434,459],
[458,457,483,445,501,482,0,477,478,488],
[458,426,459,439,473,466,414,0,441,472],
[474,430,450,468,463,457,413,450,0,466],
[439,402,430,421,461,432,403,419,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,413,460,450,370,474,427,473,431],
[393,0,413,457,465,403,487,458,467,448],
[478,478,0,419,503,419,451,488,462,469],
[431,434,472,0,444,478,452,496,467,450],
[441,426,388,447,0,403,461,470,444,415],
[521,488,472,413,488,0,521,523,467,475],
[417,404,440,439,430,370,0,456,398,402],
[464,433,403,395,421,368,435,0,437,397],
[418,424,429,424,447,424,493,454,0,434],
[460,443,422,441,476,416,489,494,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,450,438,440,473,443,455,460],
[445,0,450,461,457,458,452,469,432,436],
[437,441,0,449,467,436,484,459,444,467],
[441,430,442,0,443,433,468,442,431,425],
[453,434,424,448,0,433,444,436,453,460],
[451,433,455,458,458,0,471,466,449,473],
[418,439,407,423,447,420,0,429,428,446],
[448,422,432,449,455,425,462,0,412,429],
[436,459,447,460,438,442,463,479,0,437],
[431,455,424,466,431,418,445,462,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,456,440,485,439,461,456,431,462],
[447,0,435,423,434,445,490,464,450,446],
[435,456,0,421,484,445,476,467,428,468],
[451,468,470,0,457,435,493,491,445,460],
[406,457,407,434,0,459,480,437,413,426],
[452,446,446,456,432,0,467,470,459,419],
[430,401,415,398,411,424,0,442,436,412],
[435,427,424,400,454,421,449,0,417,429],
[460,441,463,446,478,432,455,474,0,465],
[429,445,423,431,465,472,479,462,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,434,468,484,476,475,458,483,409],
[437,0,460,462,459,489,465,435,451,425],
[457,431,0,465,487,479,474,434,467,422],
[423,429,426,0,445,453,445,413,436,406],
[407,432,404,446,0,438,424,411,415,405],
[415,402,412,438,453,0,448,412,450,412],
[416,426,417,446,467,443,0,402,430,399],
[433,456,457,478,480,479,489,0,448,451],
[408,440,424,455,476,441,461,443,0,446],
[482,466,469,485,486,479,492,440,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,459,470,457,460,450,436,457,443],
[417,0,433,415,438,448,428,419,411,422],
[432,458,0,444,449,456,431,437,439,421],
[421,476,447,0,449,460,433,455,459,459],
[434,453,442,442,0,448,422,450,436,441],
[431,443,435,431,443,0,441,422,423,443],
[441,463,460,458,469,450,0,456,446,451],
[455,472,454,436,441,469,435,0,449,443],
[434,480,452,432,455,468,445,442,0,441],
[448,469,470,432,450,448,440,448,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,453,459,439,460,458,446,454,431],
[450,0,463,466,465,472,465,467,461,442],
[438,428,0,444,448,436,461,439,444,425],
[432,425,447,0,451,437,454,450,448,424],
[452,426,443,440,0,439,448,467,469,435],
[431,419,455,454,452,0,450,460,461,450],
[433,426,430,437,443,441,0,428,449,409],
[445,424,452,441,424,431,463,0,458,416],
[437,430,447,443,422,430,442,433,0,425],
[460,449,466,467,456,441,482,475,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,422,484,466,452,460,486,460,427],
[460,0,447,451,444,448,459,442,453,461],
[469,444,0,466,449,472,478,470,472,466],
[407,440,425,0,434,439,467,438,440,435],
[425,447,442,457,0,447,435,454,447,407],
[439,443,419,452,444,0,438,449,453,459],
[431,432,413,424,456,453,0,459,462,453],
[405,449,421,453,437,442,432,0,454,449],
[431,438,419,451,444,438,429,437,0,425],
[464,430,425,456,484,432,438,442,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,437,433,417,446,435,397,452,431],
[448,0,473,426,446,450,462,460,464,448],
[454,418,0,415,391,416,414,416,401,448],
[458,465,476,0,436,463,478,449,450,478],
[474,445,500,455,0,476,461,453,457,483],
[445,441,475,428,415,0,427,437,407,460],
[456,429,477,413,430,464,0,430,465,469],
[494,431,475,442,438,454,461,0,458,464],
[439,427,490,441,434,484,426,433,0,464],
[460,443,443,413,408,431,422,427,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,440,443,435,444,458,430,435,426],
[467,0,447,460,435,445,439,440,452,446],
[451,444,0,434,435,446,450,427,422,432],
[448,431,457,0,445,435,424,424,443,436],
[456,456,456,446,0,455,439,443,443,439],
[447,446,445,456,436,0,454,443,446,443],
[433,452,441,467,452,437,0,448,458,435],
[461,451,464,467,448,448,443,0,466,422],
[456,439,469,448,448,445,433,425,0,428],
[465,445,459,455,452,448,456,469,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,498,437,410,362,384,553,516,390],
[484,0,526,452,435,483,425,513,436,466],
[393,365,0,473,442,461,398,518,456,392],
[454,439,418,0,392,427,412,470,499,390],
[481,456,449,499,0,393,412,518,481,433],
[529,408,430,464,498,0,361,515,466,452],
[507,466,493,479,479,530,0,576,474,412],
[338,378,373,421,373,376,315,0,417,389],
[375,455,435,392,410,425,417,474,0,275],
[501,425,499,501,458,439,479,502,616,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,426,493,472,441,471,472,463,467],
[395,0,423,441,434,416,441,452,448,447],
[465,468,0,472,443,456,464,478,500,490],
[398,450,419,0,435,430,452,450,467,452],
[419,457,448,456,0,444,477,466,480,462],
[450,475,435,461,447,0,458,456,465,473],
[420,450,427,439,414,433,0,455,458,474],
[419,439,413,441,425,435,436,0,464,442],
[428,443,391,424,411,426,433,427,0,447],
[424,444,401,439,429,418,417,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,466,454,446,453,474,451,446,444],
[447,0,451,452,415,453,427,456,425,446],
[425,440,0,443,437,418,437,455,431,432],
[437,439,448,0,443,446,440,453,445,423],
[445,476,454,448,0,466,460,461,462,457],
[438,438,473,445,425,0,454,440,430,429],
[417,464,454,451,431,437,0,435,430,434],
[440,435,436,438,430,451,456,0,430,436],
[445,466,460,446,429,461,461,461,0,429],
[447,445,459,468,434,462,457,455,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,450,432,432,468,439,410,418,438],
[450,0,475,458,429,458,438,427,421,452],
[441,416,0,418,399,458,434,411,394,407],
[459,433,473,0,430,470,446,478,449,453],
[459,462,492,461,0,468,419,450,446,471],
[423,433,433,421,423,0,421,407,404,427],
[452,453,457,445,472,470,0,426,423,442],
[481,464,480,413,441,484,465,0,439,423],
[473,470,497,442,445,487,468,452,0,456],
[453,439,484,438,420,464,449,468,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,403,448,412,528,484,395,452,419],
[441,0,360,453,455,502,440,440,413,451],
[488,531,0,518,425,517,413,518,453,471],
[443,438,373,0,384,416,489,489,394,429],
[479,436,466,507,0,548,423,481,463,506],
[363,389,374,475,343,0,448,363,476,419],
[407,451,478,402,468,443,0,498,453,494],
[496,451,373,402,410,528,393,0,424,462],
[439,478,438,497,428,415,438,467,0,536],
[472,440,420,462,385,472,397,429,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,458,430,448,435,447,436,450,443],
[451,0,458,451,456,449,458,448,452,430],
[433,433,0,454,428,433,445,437,444,444],
[461,440,437,0,448,438,449,457,461,449],
[443,435,463,443,0,438,461,441,467,452],
[456,442,458,453,453,0,461,443,471,454],
[444,433,446,442,430,430,0,454,441,435],
[455,443,454,434,450,448,437,0,455,441],
[441,439,447,430,424,420,450,436,0,438],
[448,461,447,442,439,437,456,450,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,486,432,458,484,470,493,426,451],
[446,0,503,432,467,494,415,479,449,432],
[405,388,0,427,424,440,386,439,392,435],
[459,459,464,0,474,487,447,469,460,427],
[433,424,467,417,0,445,434,447,426,446],
[407,397,451,404,446,0,413,407,424,412],
[421,476,505,444,457,478,0,474,477,451],
[398,412,452,422,444,484,417,0,434,418],
[465,442,499,431,465,467,414,457,0,450],
[440,459,456,464,445,479,440,473,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,426,424,402,398,417,466,438,393],
[484,0,438,441,433,446,427,461,441,432],
[465,453,0,480,458,466,431,485,465,463],
[467,450,411,0,404,412,435,478,449,473],
[489,458,433,487,0,438,472,475,482,487],
[493,445,425,479,453,0,454,462,441,481],
[474,464,460,456,419,437,0,454,490,453],
[425,430,406,413,416,429,437,0,426,396],
[453,450,426,442,409,450,401,465,0,426],
[498,459,428,418,404,410,438,495,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,454,433,437,454,443,431,447,453],
[434,0,447,419,417,444,462,418,444,443],
[437,444,0,445,430,442,438,437,425,454],
[458,472,446,0,455,435,452,449,461,454],
[454,474,461,436,0,450,456,446,463,466],
[437,447,449,456,441,0,454,421,437,456],
[448,429,453,439,435,437,0,414,454,459],
[460,473,454,442,445,470,477,0,461,466],
[444,447,466,430,428,454,437,430,0,463],
[438,448,437,437,425,435,432,425,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,430,438,459,452,415,434,409,434],
[445,0,419,434,428,432,414,423,428,424],
[461,472,0,467,443,459,436,452,438,446],
[453,457,424,0,445,439,428,447,429,433],
[432,463,448,446,0,442,444,432,422,444],
[439,459,432,452,449,0,424,448,428,442],
[476,477,455,463,447,467,0,467,439,456],
[457,468,439,444,459,443,424,0,433,431],
[482,463,453,462,469,463,452,458,0,427],
[457,467,445,458,447,449,435,460,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,413,457,460,419,454,455,463,450],
[426,0,447,426,464,452,448,490,477,452],
[478,444,0,446,445,414,444,465,417,443],
[434,465,445,0,440,433,414,452,468,427],
[431,427,446,451,0,429,460,480,453,428],
[472,439,477,458,462,0,454,491,477,456],
[437,443,447,477,431,437,0,482,445,444],
[436,401,426,439,411,400,409,0,437,414],
[428,414,474,423,438,414,446,454,0,398],
[441,439,448,464,463,435,447,477,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,472,466,454,463,445,470,441,486],
[442,0,465,478,457,465,469,469,452,460],
[419,426,0,437,444,442,425,432,410,467],
[425,413,454,0,413,442,425,431,433,448],
[437,434,447,478,0,483,448,453,444,469],
[428,426,449,449,408,0,418,441,455,449],
[446,422,466,466,443,473,0,425,460,449],
[421,422,459,460,438,450,466,0,441,457],
[450,439,481,458,447,436,431,450,0,475],
[405,431,424,443,422,442,442,434,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,436,461,456,465,460,447,464,448],
[412,0,424,417,452,434,436,460,455,462],
[455,467,0,436,455,456,437,463,467,450],
[430,474,455,0,459,440,447,456,444,446],
[435,439,436,432,0,446,425,446,457,432],
[426,457,435,451,445,0,450,448,454,466],
[431,455,454,444,466,441,0,464,460,447],
[444,431,428,435,445,443,427,0,449,447],
[427,436,424,447,434,437,431,442,0,431],
[443,429,441,445,459,425,444,444,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,455,439,450,474,446,441,426,445],
[458,0,474,469,446,475,446,454,463,429],
[436,417,0,450,454,468,453,428,443,421],
[452,422,441,0,443,459,439,438,441,448],
[441,445,437,448,0,464,435,446,440,447],
[417,416,423,432,427,0,420,401,394,422],
[445,445,438,452,456,471,0,443,460,451],
[450,437,463,453,445,490,448,0,440,434],
[465,428,448,450,451,497,431,451,0,436],
[446,462,470,443,444,469,440,457,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,457,428,473,471,475,463,454,484],
[415,0,424,411,435,444,414,416,433,449],
[434,467,0,417,467,442,415,440,443,424],
[463,480,474,0,464,482,429,454,448,465],
[418,456,424,427,0,458,410,441,429,430],
[420,447,449,409,433,0,394,422,412,414],
[416,477,476,462,481,497,0,457,434,455],
[428,475,451,437,450,469,434,0,452,471],
[437,458,448,443,462,479,457,439,0,435],
[407,442,467,426,461,477,436,420,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,444,444,429,431,463,453,473,479],
[437,0,431,461,454,469,460,432,486,488],
[447,460,0,427,425,468,460,431,486,481],
[447,430,464,0,456,435,460,443,481,513],
[462,437,466,435,0,490,487,459,506,513],
[460,422,423,456,401,0,431,434,491,473],
[428,431,431,431,404,460,0,439,476,471],
[438,459,460,448,432,457,452,0,526,480],
[418,405,405,410,385,400,415,365,0,439],
[412,403,410,378,378,418,420,411,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,436,422,447,472,456,443,447,439],
[439,0,430,449,466,454,438,459,440,465],
[455,461,0,440,458,467,435,448,452,449],
[469,442,451,0,479,457,440,473,432,450],
[444,425,433,412,0,437,440,448,444,443],
[419,437,424,434,454,0,433,457,443,440],
[435,453,456,451,451,458,0,476,456,450],
[448,432,443,418,443,434,415,0,438,432],
[444,451,439,459,447,448,435,453,0,434],
[452,426,442,441,448,451,441,459,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,395,465,415,476,449,360,432,385],
[486,0,432,453,426,493,446,441,425,399],
[496,459,0,438,471,518,493,439,449,431],
[426,438,453,0,429,463,433,438,445,446],
[476,465,420,462,0,445,453,450,434,395],
[415,398,373,428,446,0,430,390,405,377],
[442,445,398,458,438,461,0,413,415,418],
[531,450,452,453,441,501,478,0,456,408],
[459,466,442,446,457,486,476,435,0,449],
[506,492,460,445,496,514,473,483,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,472,489,436,437,471,463,447,437],
[461,0,438,469,457,434,477,464,480,446],
[419,453,0,471,428,421,450,437,444,427],
[402,422,420,0,414,391,441,427,423,416],
[455,434,463,477,0,421,462,462,446,455],
[454,457,470,500,470,0,476,455,482,441],
[420,414,441,450,429,415,0,444,457,423],
[428,427,454,464,429,436,447,0,465,423],
[444,411,447,468,445,409,434,426,0,411],
[454,445,464,475,436,450,468,468,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,448,458,443,446,450,452,461,465],
[443,0,437,442,437,448,435,436,480,435],
[443,454,0,453,456,452,446,432,445,460],
[433,449,438,0,429,461,441,414,457,465],
[448,454,435,462,0,469,465,421,460,469],
[445,443,439,430,422,0,437,416,454,444],
[441,456,445,450,426,454,0,433,463,448],
[439,455,459,477,470,475,458,0,469,477],
[430,411,446,434,431,437,428,422,0,419],
[426,456,431,426,422,447,443,414,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,429,431,426,449,455,460,470,368],
[450,0,415,459,458,446,428,442,442,403],
[462,476,0,474,453,476,475,441,528,437],
[460,432,417,0,409,462,437,459,437,428],
[465,433,438,482,0,476,448,459,460,471],
[442,445,415,429,415,0,400,434,448,394],
[436,463,416,454,443,491,0,411,466,379],
[431,449,450,432,432,457,480,0,475,407],
[421,449,363,454,431,443,425,416,0,376],
[523,488,454,463,420,497,512,484,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,447,468,476,476,497,433,474,427],
[424,0,405,463,433,482,451,442,446,434],
[444,486,0,493,417,447,474,440,446,419],
[423,428,398,0,402,448,452,413,392,405],
[415,458,474,489,0,485,475,469,472,458],
[415,409,444,443,406,0,450,419,407,431],
[394,440,417,439,416,441,0,416,403,427],
[458,449,451,478,422,472,475,0,392,447],
[417,445,445,499,419,484,488,499,0,449],
[464,457,472,486,433,460,464,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,448,433,489,463,466,457,450,472],
[441,0,483,433,453,447,456,467,399,470],
[443,408,0,442,386,472,449,440,431,451],
[458,458,449,0,422,482,499,458,432,474],
[402,438,505,469,0,471,485,423,419,448],
[428,444,419,409,420,0,423,398,416,421],
[425,435,442,392,406,468,0,406,383,446],
[434,424,451,433,468,493,485,0,438,460],
[441,492,460,459,472,475,508,453,0,443],
[419,421,440,417,443,470,445,431,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,434,410,435,478,433,409,386,407],
[457,0,434,409,555,431,409,458,460,434],
[457,457,0,384,436,501,457,480,339,457],
[481,482,507,0,505,552,410,385,409,460],
[456,336,455,386,0,502,507,385,289,382],
[413,460,390,339,389,0,316,438,341,246],
[458,482,434,481,384,575,0,313,335,383],
[482,433,411,506,506,453,578,0,389,312],
[505,431,552,482,602,550,556,502,0,530],
[484,457,434,431,509,645,508,579,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,424,432,428,422,439,438,446,429],
[434,0,434,435,430,429,423,419,446,437],
[467,457,0,471,450,453,446,458,461,443],
[459,456,420,0,431,453,447,435,477,437],
[463,461,441,460,0,432,443,431,461,455],
[469,462,438,438,459,0,469,447,467,449],
[452,468,445,444,448,422,0,434,446,438],
[453,472,433,456,460,444,457,0,477,453],
[445,445,430,414,430,424,445,414,0,408],
[462,454,448,454,436,442,453,438,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,428,459,413,430,418,396,402,419],
[461,0,427,455,482,441,460,423,427,466],
[463,464,0,444,474,430,452,427,441,437],
[432,436,447,0,479,447,449,443,431,443],
[478,409,417,412,0,400,430,388,443,445],
[461,450,461,444,491,0,462,447,448,453],
[473,431,439,442,461,429,0,431,454,450],
[495,468,464,448,503,444,460,0,448,460],
[489,464,450,460,448,443,437,443,0,450],
[472,425,454,448,446,438,441,431,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,410,444,407,431,414,442,414,438],
[450,0,456,382,416,415,424,424,412,400],
[481,435,0,440,440,427,455,456,424,459],
[447,509,451,0,463,515,451,463,423,455],
[484,475,451,428,0,456,419,484,419,414],
[460,476,464,376,435,0,439,456,449,451],
[477,467,436,440,472,452,0,457,465,447],
[449,467,435,428,407,435,434,0,437,404],
[477,479,467,468,472,442,426,454,0,455],
[453,491,432,436,477,440,444,487,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,349,439,427,437,407,413,443,370],
[480,0,448,518,403,462,450,458,474,438],
[542,443,0,455,464,543,454,458,513,459],
[452,373,436,0,413,440,385,406,459,438],
[464,488,427,478,0,466,467,462,478,438],
[454,429,348,451,425,0,419,415,412,414],
[484,441,437,506,424,472,0,436,429,449],
[478,433,433,485,429,476,455,0,504,436],
[448,417,378,432,413,479,462,387,0,433],
[521,453,432,453,453,477,442,455,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,522,451,405,444,405,474,452],
[460,0,458,505,436,381,455,419,422,445],
[448,433,0,490,454,409,463,448,435,477],
[369,386,401,0,428,346,374,384,398,331],
[440,455,437,463,0,436,456,430,413,443],
[486,510,482,545,455,0,479,456,425,462],
[447,436,428,517,435,412,0,428,408,467],
[486,472,443,507,461,435,463,0,457,462],
[417,469,456,493,478,466,483,434,0,489],
[439,446,414,560,448,429,424,429,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,422,421,480,436,445,438,461,442],
[441,0,410,434,422,418,422,429,424,423],
[469,481,0,459,501,492,442,430,469,468],
[470,457,432,0,465,424,428,467,462,435],
[411,469,390,426,0,436,423,455,460,441],
[455,473,399,467,455,0,444,453,457,501],
[446,469,449,463,468,447,0,407,455,465],
[453,462,461,424,436,438,484,0,478,477],
[430,467,422,429,431,434,436,413,0,460],
[449,468,423,456,450,390,426,414,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,525,486,450,490,394,475,452,434],
[444,0,508,473,457,504,475,515,516,497],
[366,383,0,459,383,430,410,393,347,459],
[405,418,432,0,356,378,407,445,371,372],
[441,434,508,535,0,530,469,499,591,497],
[401,387,461,513,361,0,414,473,502,560],
[497,416,481,484,422,477,0,486,489,486],
[416,376,498,446,392,418,405,0,489,456],
[439,375,544,520,300,389,402,402,0,466],
[457,394,432,519,394,331,405,435,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,431,443,440,410,434,446,435,423],
[461,0,432,451,436,445,443,462,433,425],
[460,459,0,476,444,459,432,455,428,404],
[448,440,415,0,427,416,404,446,428,397],
[451,455,447,464,0,464,418,455,462,451],
[481,446,432,475,427,0,427,452,445,410],
[457,448,459,487,473,464,0,444,428,434],
[445,429,436,445,436,439,447,0,436,409],
[456,458,463,463,429,446,463,455,0,403],
[468,466,487,494,440,481,457,482,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,451,446,490,441,427,416,418,456],
[411,0,437,411,476,427,393,437,408,429],
[440,454,0,415,452,441,422,429,462,427],
[445,480,476,0,521,472,457,460,433,491],
[401,415,439,370,0,418,389,430,419,440],
[450,464,450,419,473,0,440,446,450,464],
[464,498,469,434,502,451,0,439,460,460],
[475,454,462,431,461,445,452,0,438,459],
[473,483,429,458,472,441,431,453,0,469],
[435,462,464,400,451,427,431,432,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,466,431,434,447,469,436,440,414],
[439,0,468,444,413,462,432,441,432,494],
[425,423,0,421,447,412,450,394,435,434],
[460,447,470,0,443,490,475,450,468,475],
[457,478,444,448,0,475,448,448,432,490],
[444,429,479,401,416,0,457,470,480,440],
[422,459,441,416,443,434,0,390,434,459],
[455,450,497,441,443,421,501,0,466,486],
[451,459,456,423,459,411,457,425,0,492],
[477,397,457,416,401,451,432,405,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,546,452,534,407,484,524,487,456,451],
[345,0,351,455,386,458,407,412,411,394],
[439,540,0,466,410,500,480,478,414,473],
[357,436,425,0,389,441,418,437,386,364],
[484,505,481,502,0,511,476,434,445,393],
[407,433,391,450,380,0,438,427,383,405],
[367,484,411,473,415,453,0,455,401,463],
[404,479,413,454,457,464,436,0,338,427],
[435,480,477,505,446,508,490,553,0,503],
[440,497,418,527,498,486,428,464,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,427,435,449,433,437,455,467,455],
[452,0,449,454,452,450,438,474,465,428],
[464,442,0,455,470,466,456,463,477,449],
[456,437,436,0,436,449,450,451,450,441],
[442,439,421,455,0,449,438,458,460,469],
[458,441,425,442,442,0,439,438,455,439],
[454,453,435,441,453,452,0,449,479,477],
[436,417,428,440,433,453,442,0,416,449],
[424,426,414,441,431,436,412,475,0,443],
[436,463,442,450,422,452,414,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,471,475,467,474,456,447,437,448],
[437,0,448,432,430,474,451,460,476,442],
[420,443,0,439,431,447,445,445,416,459],
[416,459,452,0,439,443,439,457,414,412],
[424,461,460,452,0,460,460,455,425,428],
[417,417,444,448,431,0,454,449,447,421],
[435,440,446,452,431,437,0,455,438,442],
[444,431,446,434,436,442,436,0,436,413],
[454,415,475,477,466,444,453,455,0,467],
[443,449,432,479,463,470,449,478,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,452,456,440,445,428,424,461,424],
[443,0,439,439,423,443,441,429,455,433],
[439,452,0,456,447,441,436,449,466,420],
[435,452,435,0,425,446,451,450,447,429],
[451,468,444,466,0,438,465,480,499,454],
[446,448,450,445,453,0,443,448,496,424],
[463,450,455,440,426,448,0,469,467,409],
[467,462,442,441,411,443,422,0,469,423],
[430,436,425,444,392,395,424,422,0,426],
[467,458,471,462,437,467,482,468,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,446,411,435,466,472,469,450,398],
[456,0,433,420,423,467,485,439,489,435],
[445,458,0,439,453,488,479,435,475,436],
[480,471,452,0,444,484,505,481,480,474],
[456,468,438,447,0,465,500,471,459,458],
[425,424,403,407,426,0,463,438,413,437],
[419,406,412,386,391,428,0,410,422,428],
[422,452,456,410,420,453,481,0,451,426],
[441,402,416,411,432,478,469,440,0,452],
[493,456,455,417,433,454,463,465,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,376,465,380,395,397,398,401,453],
[464,0,491,502,500,476,491,500,443,502],
[515,400,0,438,399,418,386,475,327,445],
[426,389,453,0,351,461,427,482,396,445],
[511,391,492,540,0,484,487,527,479,510],
[496,415,473,430,407,0,447,468,372,481],
[494,400,505,464,404,444,0,531,453,529],
[493,391,416,409,364,423,360,0,380,407],
[490,448,564,495,412,519,438,511,0,496],
[438,389,446,446,381,410,362,484,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,383,377,426,420,406,384,450,417],
[495,0,395,398,462,498,452,393,463,457],
[508,496,0,407,452,518,474,443,468,450],
[514,493,484,0,476,477,453,444,493,469],
[465,429,439,415,0,485,417,423,447,419],
[471,393,373,414,406,0,376,376,407,391],
[485,439,417,438,474,515,0,491,473,496],
[507,498,448,447,468,515,400,0,494,470],
[441,428,423,398,444,484,418,397,0,442],
[474,434,441,422,472,500,395,421,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,462,491,513,395,452,424,476,436],
[406,0,450,414,369,371,382,404,414,409],
[429,441,0,417,464,408,395,461,444,359],
[400,477,474,0,457,402,408,434,439,421],
[378,522,427,434,0,365,382,443,499,402],
[496,520,483,489,526,0,467,442,458,455],
[439,509,496,483,509,424,0,491,534,455],
[467,487,430,457,448,449,400,0,458,409],
[415,477,447,452,392,433,357,433,0,379],
[455,482,532,470,489,436,436,482,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,450,457,469,455,435,462,476,431],
[442,0,438,450,429,449,442,450,445,433],
[441,453,0,450,452,431,426,452,453,429],
[434,441,441,0,459,451,444,453,444,432],
[422,462,439,432,0,459,438,437,446,448],
[436,442,460,440,432,0,446,461,447,411],
[456,449,465,447,453,445,0,456,462,440],
[429,441,439,438,454,430,435,0,458,443],
[415,446,438,447,445,444,429,433,0,439],
[460,458,462,459,443,480,451,448,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,442,425,435,425,444,460,459,442],
[437,0,441,439,436,420,445,436,446,445],
[449,450,0,429,423,435,463,434,461,434],
[466,452,462,0,450,430,464,447,474,475],
[456,455,468,441,0,428,452,461,474,468],
[466,471,456,461,463,0,431,460,479,481],
[447,446,428,427,439,460,0,426,437,455],
[431,455,457,444,430,431,465,0,459,454],
[432,445,430,417,417,412,454,432,0,464],
[449,446,457,416,423,410,436,437,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,447,470,456,441,428,462,455],
[435,0,437,438,432,445,450,432,457,447],
[443,454,0,447,459,465,452,441,466,454],
[444,453,444,0,435,440,458,415,451,439],
[421,459,432,456,0,453,462,449,474,460],
[435,446,426,451,438,0,441,443,455,444],
[450,441,439,433,429,450,0,441,460,441],
[463,459,450,476,442,448,450,0,476,448],
[429,434,425,440,417,436,431,415,0,404],
[436,444,437,452,431,447,450,443,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,428,409,462,443,468,416,446,411],
[447,0,450,455,438,463,482,469,448,437],
[463,441,0,406,422,464,478,437,449,397],
[482,436,485,0,434,490,467,484,499,453],
[429,453,469,457,0,465,460,446,487,424],
[448,428,427,401,426,0,480,453,440,406],
[423,409,413,424,431,411,0,380,457,369],
[475,422,454,407,445,438,511,0,457,424],
[445,443,442,392,404,451,434,434,0,419],
[480,454,494,438,467,485,522,467,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,437,530,531,523,433,499,453,437],
[361,0,407,434,472,456,438,434,292,320],
[454,484,0,481,549,492,447,420,366,335],
[361,457,410,0,454,425,453,355,386,391],
[360,419,342,437,0,462,420,439,291,420],
[368,435,399,466,429,0,443,364,352,299],
[458,453,444,438,471,448,0,437,291,404],
[392,457,471,536,452,527,454,0,355,339],
[438,599,525,505,600,539,600,536,0,482],
[454,571,556,500,471,592,487,552,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,468,466,437,462,467,432,446,451],
[446,0,424,434,413,458,454,411,418,415],
[423,467,0,453,447,468,474,441,433,447],
[425,457,438,0,433,454,479,432,454,448],
[454,478,444,458,0,454,466,453,450,452],
[429,433,423,437,437,0,471,394,430,421],
[424,437,417,412,425,420,0,426,420,430],
[459,480,450,459,438,497,465,0,466,469],
[445,473,458,437,441,461,471,425,0,453],
[440,476,444,443,439,470,461,422,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,396,409,414,446,408,386,406,414],
[494,0,453,481,452,462,451,466,402,426],
[495,438,0,478,448,440,441,458,448,429],
[482,410,413,0,424,447,420,442,424,422],
[477,439,443,467,0,478,437,442,457,440],
[445,429,451,444,413,0,415,432,429,416],
[483,440,450,471,454,476,0,440,432,416],
[505,425,433,449,449,459,451,0,411,457],
[485,489,443,467,434,462,459,480,0,460],
[477,465,462,469,451,475,475,434,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,449,474,444,437,441,448,441,463],
[425,0,423,414,427,427,418,420,437,426],
[442,468,0,426,441,410,430,417,430,458],
[417,477,465,0,440,443,417,425,439,484],
[447,464,450,451,0,417,433,452,434,465],
[454,464,481,448,474,0,454,429,457,473],
[450,473,461,474,458,437,0,466,439,452],
[443,471,474,466,439,462,425,0,437,463],
[450,454,461,452,457,434,452,454,0,452],
[428,465,433,407,426,418,439,428,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,420,435,436,418,462,432,426,431],
[445,0,439,446,473,445,459,453,439,449],
[471,452,0,445,470,448,445,442,420,466],
[456,445,446,0,485,460,448,443,470,435],
[455,418,421,406,0,423,427,424,415,425],
[473,446,443,431,468,0,453,470,446,461],
[429,432,446,443,464,438,0,457,438,459],
[459,438,449,448,467,421,434,0,450,447],
[465,452,471,421,476,445,453,441,0,447],
[460,442,425,456,466,430,432,444,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,396,407,393,441,397,460,420,441],
[456,0,460,456,423,492,449,451,462,471],
[495,431,0,429,419,463,432,471,464,478],
[484,435,462,0,414,486,442,471,438,468],
[498,468,472,477,0,479,434,486,469,453],
[450,399,428,405,412,0,421,424,432,457],
[494,442,459,449,457,470,0,472,457,472],
[431,440,420,420,405,467,419,0,417,440],
[471,429,427,453,422,459,434,474,0,443],
[450,420,413,423,438,434,419,451,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,441,461,461,450,472,454,458,525],
[478,0,419,414,440,391,496,511,438,451],
[450,472,0,431,428,422,448,477,403,446],
[430,477,460,0,478,451,429,496,399,495],
[430,451,463,413,0,449,459,440,510,463],
[441,500,469,440,442,0,457,465,411,434],
[419,395,443,462,432,434,0,427,386,432],
[437,380,414,395,451,426,464,0,398,448],
[433,453,488,492,381,480,505,493,0,454],
[366,440,445,396,428,457,459,443,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,437,401,440,474,371,495,402,365],
[431,0,471,433,416,397,419,467,471,400],
[454,420,0,435,472,472,477,509,456,381],
[490,458,456,0,385,476,445,489,476,474],
[451,475,419,506,0,473,422,563,476,423],
[417,494,419,415,418,0,400,474,434,473],
[520,472,414,446,469,491,0,504,456,494],
[396,424,382,402,328,417,387,0,383,401],
[489,420,435,415,415,457,435,508,0,419],
[526,491,510,417,468,418,397,490,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,507,479,444,458,442,464,480,505],
[368,0,433,440,403,478,433,384,406,455],
[384,458,0,438,426,432,422,423,415,483],
[412,451,453,0,409,413,451,434,411,474],
[447,488,465,482,0,460,488,459,425,496],
[433,413,459,478,431,0,501,424,398,505],
[449,458,469,440,403,390,0,403,395,469],
[427,507,468,457,432,467,488,0,435,488],
[411,485,476,480,466,493,496,456,0,532],
[386,436,408,417,395,386,422,403,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,492,453,462,434,473,436,468,453],
[460,0,466,457,443,454,466,450,473,468],
[399,425,0,408,408,415,444,399,436,407],
[438,434,483,0,426,432,436,431,453,460],
[429,448,483,465,0,439,468,442,439,431],
[457,437,476,459,452,0,475,431,482,457],
[418,425,447,455,423,416,0,431,424,418],
[455,441,492,460,449,460,460,0,435,458],
[423,418,455,438,452,409,467,456,0,417],
[438,423,484,431,460,434,473,433,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,480,412,408,426,383,427,401,439],
[467,0,507,448,435,456,439,457,493,444],
[411,384,0,419,413,394,366,411,403,366],
[479,443,472,0,450,450,417,441,459,446],
[483,456,478,441,0,413,426,467,473,455],
[465,435,497,441,478,0,435,438,449,450],
[508,452,525,474,465,456,0,484,448,429],
[464,434,480,450,424,453,407,0,464,437],
[490,398,488,432,418,442,443,427,0,437],
[452,447,525,445,436,441,462,454,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,434,439,450,424,442,445,462,466],
[451,0,445,444,479,459,484,510,476,452],
[457,446,0,429,421,390,457,466,491,458],
[452,447,462,0,506,413,460,460,464,467],
[441,412,470,385,0,414,448,460,464,423],
[467,432,501,478,477,0,511,490,494,469],
[449,407,434,431,443,380,0,463,448,412],
[446,381,425,431,431,401,428,0,477,448],
[429,415,400,427,427,397,443,414,0,456],
[425,439,433,424,468,422,479,443,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,447,467,417,427,437,413,445,430],
[447,0,447,450,435,437,431,416,430,419],
[444,444,0,453,406,424,433,424,443,441],
[424,441,438,0,407,432,418,391,435,422],
[474,456,485,484,0,436,467,436,458,473],
[464,454,467,459,455,0,438,452,457,465],
[454,460,458,473,424,453,0,426,438,444],
[478,475,467,500,455,439,465,0,459,475],
[446,461,448,456,433,434,453,432,0,450],
[461,472,450,469,418,426,447,416,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,447,450,437,429,451,426,457,431],
[490,0,454,474,438,468,450,471,464,453],
[444,437,0,433,423,434,430,419,468,447],
[441,417,458,0,439,460,440,437,464,436],
[454,453,468,452,0,475,468,438,485,433],
[462,423,457,431,416,0,440,431,440,426],
[440,441,461,451,423,451,0,433,445,445],
[465,420,472,454,453,460,458,0,466,446],
[434,427,423,427,406,451,446,425,0,442],
[460,438,444,455,458,465,446,445,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,477,453,439,462,459,456,476,455],
[418,0,469,426,440,418,446,440,438,454],
[414,422,0,419,412,418,423,416,420,391],
[438,465,472,0,436,444,463,441,461,450],
[452,451,479,455,0,437,453,449,436,447],
[429,473,473,447,454,0,469,462,455,439],
[432,445,468,428,438,422,0,437,430,430],
[435,451,475,450,442,429,454,0,425,423],
[415,453,471,430,455,436,461,466,0,448],
[436,437,500,441,444,452,461,468,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,409,453,426,438,441,450,446,439],
[471,0,444,459,464,451,469,463,462,457],
[482,447,0,453,443,441,471,468,466,442],
[438,432,438,0,435,428,444,451,450,452],
[465,427,448,456,0,441,440,431,447,422],
[453,440,450,463,450,0,456,446,455,437],
[450,422,420,447,451,435,0,447,443,435],
[441,428,423,440,460,445,444,0,449,438],
[445,429,425,441,444,436,448,442,0,444],
[452,434,449,439,469,454,456,453,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,457,438,488,466,450,439,479,429],
[434,0,458,463,462,451,447,494,477,454],
[434,433,0,457,421,468,478,474,465,445],
[453,428,434,0,480,442,477,504,510,468],
[403,429,470,411,0,403,437,501,446,385],
[425,440,423,449,488,0,476,503,472,407],
[441,444,413,414,454,415,0,447,468,418],
[452,397,417,387,390,388,444,0,419,394],
[412,414,426,381,445,419,423,472,0,410],
[462,437,446,423,506,484,473,497,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,449,451,449,451,461,435,461,434],
[437,0,437,452,454,427,444,422,444,425],
[442,454,0,452,445,450,428,428,461,434],
[440,439,439,0,450,435,440,415,442,429],
[442,437,446,441,0,435,439,434,443,426],
[440,464,441,456,456,0,434,420,465,423],
[430,447,463,451,452,457,0,446,456,428],
[456,469,463,476,457,471,445,0,480,453],
[430,447,430,449,448,426,435,411,0,432],
[457,466,457,462,465,468,463,438,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,458,447,429,445,464,440,425,455],
[434,0,465,482,461,444,458,449,446,467],
[433,426,0,449,436,450,441,448,440,449],
[444,409,442,0,454,434,446,434,406,458],
[462,430,455,437,0,439,456,452,437,462],
[446,447,441,457,452,0,459,434,457,477],
[427,433,450,445,435,432,0,417,429,464],
[451,442,443,457,439,457,474,0,435,433],
[466,445,451,485,454,434,462,456,0,454],
[436,424,442,433,429,414,427,458,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,462,455,445,442,458,456,456,456],
[449,0,462,432,430,432,441,458,439,450],
[429,429,0,454,446,446,445,445,437,447],
[436,459,437,0,448,454,457,466,455,443],
[446,461,445,443,0,435,466,447,433,452],
[449,459,445,437,456,0,471,454,437,438],
[433,450,446,434,425,420,0,440,445,434],
[435,433,446,425,444,437,451,0,451,447],
[435,452,454,436,458,454,446,440,0,436],
[435,441,444,448,439,453,457,444,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,449,447,462,440,451,457,428,437],
[450,0,460,443,463,450,461,453,454,454],
[442,431,0,426,446,440,452,432,434,445],
[444,448,465,0,444,450,459,455,459,452],
[429,428,445,447,0,434,445,461,441,447],
[451,441,451,441,457,0,466,440,451,445],
[440,430,439,432,446,425,0,424,421,429],
[434,438,459,436,430,451,467,0,465,469],
[463,437,457,432,450,440,470,426,0,441],
[454,437,446,439,444,446,462,422,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,461,473,451,467,417,433,439,455],
[479,0,458,456,533,470,417,455,518,474],
[430,433,0,477,499,484,457,443,444,492],
[418,435,414,0,471,428,429,424,444,457],
[440,358,392,420,0,435,402,378,403,446],
[424,421,407,463,456,0,429,401,391,442],
[474,474,434,462,489,462,0,463,444,467],
[458,436,448,467,513,490,428,0,470,485],
[452,373,447,447,488,500,447,421,0,459],
[436,417,399,434,445,449,424,406,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,467,421,463,413,454,394,467,443],
[477,0,464,418,495,495,450,472,552,463],
[424,427,0,388,494,465,436,381,503,465],
[470,473,503,0,450,458,436,400,506,414],
[428,396,397,441,0,461,427,405,482,439],
[478,396,426,433,430,0,406,425,448,441],
[437,441,455,455,464,485,0,456,500,471],
[497,419,510,491,486,466,435,0,560,478],
[424,339,388,385,409,443,391,331,0,411],
[448,428,426,477,452,450,420,413,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,474,461,473,443,475,475,490,453],
[445,0,476,446,450,448,457,453,463,447],
[417,415,0,453,445,421,452,448,462,433],
[430,445,438,0,463,441,452,450,474,436],
[418,441,446,428,0,416,464,459,431,442],
[448,443,470,450,475,0,469,482,474,452],
[416,434,439,439,427,422,0,437,433,420],
[416,438,443,441,432,409,454,0,447,444],
[401,428,429,417,460,417,458,444,0,442],
[438,444,458,455,449,439,471,447,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,422,431,459,433,434,444,437,430],
[457,0,440,471,460,453,444,435,442,434],
[469,451,0,453,441,444,458,440,465,438],
[460,420,438,0,432,441,428,451,410,444],
[432,431,450,459,0,442,446,448,440,429],
[458,438,447,450,449,0,450,440,455,451],
[457,447,433,463,445,441,0,444,445,473],
[447,456,451,440,443,451,447,0,439,443],
[454,449,426,481,451,436,446,452,0,446],
[461,457,453,447,462,440,418,448,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,461,453,470,443,449,463,447,466],
[441,0,457,441,464,416,420,432,419,440],
[430,434,0,431,454,442,441,436,435,452],
[438,450,460,0,470,439,429,448,450,463],
[421,427,437,421,0,439,437,440,423,444],
[448,475,449,452,452,0,448,435,443,461],
[442,471,450,462,454,443,0,457,454,462],
[428,459,455,443,451,456,434,0,426,441],
[444,472,456,441,468,448,437,465,0,464],
[425,451,439,428,447,430,429,450,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,429,414,400,392,478,434,430,453],
[469,0,455,446,430,432,471,473,421,444],
[462,436,0,410,476,421,477,456,439,451],
[477,445,481,0,531,453,502,458,455,471],
[491,461,415,360,0,431,455,457,471,379],
[499,459,470,438,460,0,470,492,447,447],
[413,420,414,389,436,421,0,442,374,395],
[457,418,435,433,434,399,449,0,431,444],
[461,470,452,436,420,444,517,460,0,429],
[438,447,440,420,512,444,496,447,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,476,446,466,426,453,468,439,436],
[436,0,474,418,476,440,488,463,434,458],
[415,417,0,424,409,404,412,465,413,415],
[445,473,467,0,445,443,463,484,442,441],
[425,415,482,446,0,429,444,465,442,407],
[465,451,487,448,462,0,459,504,435,438],
[438,403,479,428,447,432,0,461,421,419],
[423,428,426,407,426,387,430,0,393,429],
[452,457,478,449,449,456,470,498,0,435],
[455,433,476,450,484,453,472,462,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,403,394,368,405,397,393,390,430],
[471,0,505,444,454,489,452,479,493,497],
[488,386,0,429,431,454,396,432,426,425],
[497,447,462,0,422,430,441,503,468,476],
[523,437,460,469,0,451,451,467,472,462],
[486,402,437,461,440,0,419,441,488,431],
[494,439,495,450,440,472,0,476,459,486],
[498,412,459,388,424,450,415,0,420,435],
[501,398,465,423,419,403,432,471,0,443],
[461,394,466,415,429,460,405,456,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,466,449,437,437,476,458,449,434],
[472,0,447,482,453,417,475,446,496,448],
[425,444,0,435,423,406,447,441,476,417],
[442,409,456,0,437,408,440,464,459,436],
[454,438,468,454,0,426,437,489,437,436],
[454,474,485,483,465,0,459,440,496,427],
[415,416,444,451,454,432,0,409,440,451],
[433,445,450,427,402,451,482,0,435,419],
[442,395,415,432,454,395,451,456,0,450],
[457,443,474,455,455,464,440,472,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,474,458,447,446,501,473,441,435],
[447,0,460,459,459,453,471,460,426,460],
[417,431,0,439,451,454,473,463,403,434],
[433,432,452,0,446,442,470,441,469,427],
[444,432,440,445,0,436,469,438,415,407],
[445,438,437,449,455,0,484,443,442,444],
[390,420,418,421,422,407,0,441,417,397],
[418,431,428,450,453,448,450,0,398,399],
[450,465,488,422,476,449,474,493,0,419],
[456,431,457,464,484,447,494,492,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,440,455,453,465,472,451,432,475],
[462,0,429,456,467,443,447,444,433,460],
[451,462,0,447,460,483,469,440,446,461],
[436,435,444,0,449,447,454,417,428,451],
[438,424,431,442,0,447,453,438,422,465],
[426,448,408,444,444,0,464,448,434,467],
[419,444,422,437,438,427,0,438,461,468],
[440,447,451,474,453,443,453,0,434,463],
[459,458,445,463,469,457,430,457,0,484],
[416,431,430,440,426,424,423,428,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,427,456,433,431,450,502,440,433],
[521,0,487,479,473,464,488,491,493,429],
[464,404,0,464,473,422,400,450,444,447],
[435,412,427,0,487,396,434,440,449,445],
[458,418,418,404,0,409,451,465,420,420],
[460,427,469,495,482,0,445,506,477,464],
[441,403,491,457,440,446,0,535,470,443],
[389,400,441,451,426,385,356,0,402,411],
[451,398,447,442,471,414,421,489,0,403],
[458,462,444,446,471,427,448,480,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,431,465,467,423,457,422,389],
[441,0,453,483,441,482,444,423,391,468],
[454,438,0,448,471,445,408,447,426,428],
[460,408,443,0,449,497,419,426,405,445],
[426,450,420,442,0,476,424,406,416,442],
[424,409,446,394,415,0,426,379,409,439],
[468,447,483,472,467,465,0,435,409,445],
[434,468,444,465,485,512,456,0,411,461],
[469,500,465,486,475,482,482,480,0,436],
[502,423,463,446,449,452,446,430,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,452,502,412,499,443,487,435,423],
[460,0,480,487,422,467,463,504,471,473],
[439,411,0,480,443,402,445,448,458,400],
[389,404,411,0,376,431,435,398,403,346],
[479,469,448,515,0,471,477,506,484,424],
[392,424,489,460,420,0,490,437,469,393],
[448,428,446,456,414,401,0,457,445,422],
[404,387,443,493,385,454,434,0,439,382],
[456,420,433,488,407,422,446,452,0,438],
[468,418,491,545,467,498,469,509,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,420,448,436,417,428,429,480,425],
[433,0,427,451,423,380,465,460,459,480],
[471,464,0,442,453,424,521,449,500,460],
[443,440,449,0,420,456,436,439,500,463],
[455,468,438,471,0,421,477,487,493,448],
[474,511,467,435,470,0,523,450,514,477],
[463,426,370,455,414,368,0,391,432,412],
[462,431,442,452,404,441,500,0,501,456],
[411,432,391,391,398,377,459,390,0,431],
[466,411,431,428,443,414,479,435,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,369,403,454,512,377,471,447,446],
[377,0,427,329,459,498,389,432,403,391],
[522,464,0,461,439,507,410,469,448,549],
[488,562,430,0,506,584,382,490,490,538],
[437,432,452,385,0,473,378,433,350,478],
[379,393,384,307,418,0,286,381,363,426],
[514,502,481,509,513,605,0,504,438,574],
[420,459,422,401,458,510,387,0,415,488],
[444,488,443,401,541,528,453,476,0,459],
[445,500,342,353,413,465,317,403,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,456,406,418,404,373,362,416,509],
[476,0,429,450,458,497,416,404,474,495],
[435,462,0,390,491,407,379,449,457,464],
[485,441,501,0,441,408,356,412,442,488],
[473,433,400,450,0,418,460,413,470,478],
[487,394,484,483,473,0,423,399,475,501],
[518,475,512,535,431,468,0,431,473,506],
[529,487,442,479,478,492,460,0,447,534],
[475,417,434,449,421,416,418,444,0,490],
[382,396,427,403,413,390,385,357,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,463,448,481,456,470,423,458,474],
[445,0,465,422,477,406,460,431,452,419],
[428,426,0,439,453,409,458,410,454,429],
[443,469,452,0,440,424,449,422,487,442],
[410,414,438,451,0,395,423,409,463,418],
[435,485,482,467,496,0,469,454,476,484],
[421,431,433,442,468,422,0,430,473,442],
[468,460,481,469,482,437,461,0,491,473],
[433,439,437,404,428,415,418,400,0,431],
[417,472,462,449,473,407,449,418,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,438,421,424,439,449,451,445,438],
[446,0,450,429,426,431,440,461,436,444],
[453,441,0,443,442,440,450,456,429,443],
[470,462,448,0,448,442,447,464,448,469],
[467,465,449,443,0,430,446,475,442,464],
[452,460,451,449,461,0,448,480,423,454],
[442,451,441,444,445,443,0,455,440,448],
[440,430,435,427,416,411,436,0,422,421],
[446,455,462,443,449,468,451,469,0,452],
[453,447,448,422,427,437,443,470,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,427,458,450,415,458,454,452,438],
[405,0,429,448,425,435,464,426,453,439],
[464,462,0,474,439,446,461,462,476,446],
[433,443,417,0,432,435,464,435,439,455],
[441,466,452,459,0,429,453,463,452,486],
[476,456,445,456,462,0,460,456,483,477],
[433,427,430,427,438,431,0,456,438,443],
[437,465,429,456,428,435,435,0,472,477],
[439,438,415,452,439,408,453,419,0,449],
[453,452,445,436,405,414,448,414,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,451,446,446,450,456,447,466,466],
[464,0,451,440,443,433,458,448,465,459],
[440,440,0,403,435,438,452,442,468,411],
[445,451,488,0,442,463,442,452,457,426],
[445,448,456,449,0,436,439,472,455,468],
[441,458,453,428,455,0,443,479,484,445],
[435,433,439,449,452,448,0,445,471,453],
[444,443,449,439,419,412,446,0,431,445],
[425,426,423,434,436,407,420,460,0,434],
[425,432,480,465,423,446,438,446,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,429,420,401,448,430,459,460,395],
[447,0,438,457,402,443,408,444,486,442],
[462,453,0,514,487,452,482,485,495,417],
[471,434,377,0,444,474,393,453,456,384],
[490,489,404,447,0,433,416,473,475,407],
[443,448,439,417,458,0,366,424,408,385],
[461,483,409,498,475,525,0,466,443,429],
[432,447,406,438,418,467,425,0,446,464],
[431,405,396,435,416,483,448,445,0,402],
[496,449,474,507,484,506,462,427,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,335,421,335,507,380,426,253,508],
[512,0,382,507,423,382,385,300,383,592],
[556,509,0,468,337,509,509,427,466,511],
[470,384,423,0,466,471,467,342,340,426],
[556,468,554,425,0,553,470,471,470,639],
[384,509,382,420,338,0,342,299,381,383],
[511,506,382,424,421,549,0,511,382,549],
[465,591,464,549,420,592,380,0,505,548],
[638,508,425,551,421,510,509,386,0,508],
[383,299,380,465,252,508,342,343,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,454,449,429,452,451,455,457,477],
[439,0,451,417,414,412,406,447,438,464],
[437,440,0,429,408,426,425,428,440,448],
[442,474,462,0,437,438,422,432,451,473],
[462,477,483,454,0,432,486,448,455,467],
[439,479,465,453,459,0,424,429,436,442],
[440,485,466,469,405,467,0,458,465,492],
[436,444,463,459,443,462,433,0,431,479],
[434,453,451,440,436,455,426,460,0,474],
[414,427,443,418,424,449,399,412,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,412,413,444,413,501,504,521,411],
[425,0,390,415,484,490,447,464,445,448],
[479,501,0,431,479,485,429,574,480,503],
[478,476,460,0,494,443,459,551,480,519],
[447,407,412,397,0,486,450,518,498,595],
[478,401,406,448,405,0,461,478,497,446],
[390,444,462,432,441,430,0,503,518,502],
[387,427,317,340,373,413,388,0,427,449],
[370,446,411,411,393,394,373,464,0,447],
[480,443,388,372,296,445,389,442,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,423,388,438,435,408,432,415,390],
[471,0,438,432,434,451,426,457,460,446],
[468,453,0,438,448,475,484,447,504,408],
[503,459,453,0,441,499,432,422,496,393],
[453,457,443,450,0,481,410,445,491,444],
[456,440,416,392,410,0,416,389,466,388],
[483,465,407,459,481,475,0,463,472,431],
[459,434,444,469,446,502,428,0,470,458],
[476,431,387,395,400,425,419,421,0,379],
[501,445,483,498,447,503,460,433,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,441,460,455,460,473,448,488,446],
[419,0,433,451,458,476,429,449,462,436],
[450,458,0,480,457,478,439,455,464,448],
[431,440,411,0,468,447,434,439,457,422],
[436,433,434,423,0,451,424,426,446,431],
[431,415,413,444,440,0,428,417,458,438],
[418,462,452,457,467,463,0,448,468,459],
[443,442,436,452,465,474,443,0,456,455],
[403,429,427,434,445,433,423,435,0,423],
[445,455,443,469,460,453,432,436,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,467,432,449,446,446,416,447,435],
[450,0,450,428,432,423,399,427,450,414],
[424,441,0,416,423,420,457,418,434,429],
[459,463,475,0,456,457,416,416,451,447],
[442,459,468,435,0,463,415,443,444,463],
[445,468,471,434,428,0,430,443,450,445],
[445,492,434,475,476,461,0,450,469,445],
[475,464,473,475,448,448,441,0,471,451],
[444,441,457,440,447,441,422,420,0,422],
[456,477,462,444,428,446,446,440,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,489,449,446,480,435,461,467,447],
[446,0,420,421,401,460,463,430,385,380],
[402,471,0,400,419,450,453,429,413,429],
[442,470,491,0,474,509,489,475,465,482],
[445,490,472,417,0,467,448,437,448,450],
[411,431,441,382,424,0,452,378,420,451],
[456,428,438,402,443,439,0,453,440,465],
[430,461,462,416,454,513,438,0,425,453],
[424,506,478,426,443,471,451,466,0,477],
[444,511,462,409,441,440,426,438,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,454,443,413,434,452,460,452,465],
[443,0,487,450,463,460,428,442,487,458],
[437,404,0,425,408,459,421,418,440,423],
[448,441,466,0,425,440,412,452,453,452],
[478,428,483,466,0,466,414,433,457,454],
[457,431,432,451,425,0,436,451,461,437],
[439,463,470,479,477,455,0,450,491,464],
[431,449,473,439,458,440,441,0,469,464],
[439,404,451,438,434,430,400,422,0,430],
[426,433,468,439,437,454,427,427,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,362,384,428,492,450,448,401,536],
[376,0,399,399,356,356,357,379,479,510],
[529,492,0,552,483,534,464,406,460,599],
[507,492,339,0,488,506,447,421,398,535],
[463,535,408,403,0,429,300,488,419,469],
[399,535,357,385,462,0,442,444,438,595],
[441,534,427,444,591,449,0,488,524,540],
[443,512,485,470,403,447,403,0,421,516],
[490,412,431,493,472,453,367,470,0,515],
[355,381,292,356,422,296,351,375,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,434,446,444,427,426,468,427,447],
[464,0,424,450,449,471,423,452,438,440],
[457,467,0,448,477,474,453,444,437,453],
[445,441,443,0,463,467,415,457,427,436],
[447,442,414,428,0,432,415,445,428,432],
[464,420,417,424,459,0,438,469,450,449],
[465,468,438,476,476,453,0,463,465,466],
[423,439,447,434,446,422,428,0,412,437],
[464,453,454,464,463,441,426,479,0,431],
[444,451,438,455,459,442,425,454,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,461,433,455,460,459,450,459,471],
[419,0,435,421,450,433,431,423,440,443],
[430,456,0,419,435,445,451,439,420,450],
[458,470,472,0,466,463,459,439,440,482],
[436,441,456,425,0,428,428,438,453,441],
[431,458,446,428,463,0,426,426,438,460],
[432,460,440,432,463,465,0,438,437,454],
[441,468,452,452,453,465,453,0,462,473],
[432,451,471,451,438,453,454,429,0,470],
[420,448,441,409,450,431,437,418,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,449,441,428,449,455,428,414,449],
[425,0,466,431,437,449,490,425,446,454],
[442,425,0,463,438,460,475,414,431,464],
[450,460,428,0,448,432,461,423,408,467],
[463,454,453,443,0,467,468,420,421,460],
[442,442,431,459,424,0,461,412,417,425],
[436,401,416,430,423,430,0,391,410,436],
[463,466,477,468,471,479,500,0,438,449],
[477,445,460,483,470,474,481,453,0,482],
[442,437,427,424,431,466,455,442,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,495,463,466,448,457,482,431,466],
[438,0,456,449,469,455,421,444,437,458],
[396,435,0,438,414,441,431,425,420,423],
[428,442,453,0,463,452,409,425,430,454],
[425,422,477,428,0,437,402,442,424,419],
[443,436,450,439,454,0,416,419,422,450],
[434,470,460,482,489,475,0,473,449,465],
[409,447,466,466,449,472,418,0,450,453],
[460,454,471,461,467,469,442,441,0,452],
[425,433,468,437,472,441,426,438,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,419,460,461,465,489,469,494,474],
[375,0,397,443,394,438,449,446,460,452],
[472,494,0,435,480,448,470,459,469,454],
[431,448,456,0,436,399,433,475,460,457],
[430,497,411,455,0,429,446,457,506,461],
[426,453,443,492,462,0,466,477,494,469],
[402,442,421,458,445,425,0,430,468,439],
[422,445,432,416,434,414,461,0,486,447],
[397,431,422,431,385,397,423,405,0,426],
[417,439,437,434,430,422,452,444,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,426,426,408,405,450,432,448,468],
[502,0,451,425,444,407,492,412,428,553],
[465,440,0,477,444,430,437,444,490,422],
[465,466,414,0,438,358,377,346,397,358],
[483,447,447,453,0,409,478,422,490,406],
[486,484,461,533,482,0,428,441,478,458],
[441,399,454,514,413,463,0,399,408,453],
[459,479,447,545,469,450,492,0,392,426],
[443,463,401,494,401,413,483,499,0,447],
[423,338,469,533,485,433,438,465,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,494,526,390,329,365,462,560,428],
[467,0,432,526,460,400,464,464,428,492],
[397,459,0,559,460,463,363,462,427,460],
[365,365,332,0,458,363,363,396,364,368],
[501,431,431,433,0,433,433,400,399,398],
[562,491,428,528,458,0,396,462,463,461],
[526,427,528,528,458,495,0,463,396,430],
[429,427,429,495,491,429,428,0,462,465],
[331,463,464,527,492,428,495,429,0,365],
[463,399,431,523,493,430,461,426,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,457,482,421,447,427,460,437,443],
[415,0,400,431,407,410,477,428,425,431],
[434,491,0,451,471,456,484,483,470,476],
[409,460,440,0,446,425,450,442,466,444],
[470,484,420,445,0,449,469,454,443,467],
[444,481,435,466,442,0,452,424,439,463],
[464,414,407,441,422,439,0,439,425,444],
[431,463,408,449,437,467,452,0,431,451],
[454,466,421,425,448,452,466,460,0,470],
[448,460,415,447,424,428,447,440,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,442,220,221,447,223,335,444,333],
[445,0,666,334,332,443,445,112,555,443],
[449,225,0,225,0,336,224,224,336,112],
[671,557,666,0,334,669,559,448,559,446],
[670,559,891,557,0,668,557,337,780,555],
[444,448,555,222,223,0,337,224,332,331],
[668,446,667,332,334,554,0,558,556,444],
[556,779,667,443,554,667,333,0,667,555],
[447,336,555,332,111,559,335,224,0,223],
[558,448,779,445,336,560,447,336,668,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,436,444,430,449,418,438,433,449],
[449,0,435,437,412,442,437,428,421,431],
[455,456,0,464,436,470,451,430,452,444],
[447,454,427,0,413,455,426,445,448,429],
[461,479,455,478,0,480,439,438,454,428],
[442,449,421,436,411,0,411,425,394,416],
[473,454,440,465,452,480,0,454,442,443],
[453,463,461,446,453,466,437,0,465,453],
[458,470,439,443,437,497,449,426,0,429],
[442,460,447,462,463,475,448,438,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,480,477,452,438,391,449,506,485],
[409,0,410,437,386,430,385,370,513,439],
[411,481,0,459,426,454,402,421,466,450],
[414,454,432,0,384,421,377,346,439,423],
[439,505,465,507,0,418,337,404,442,473],
[453,461,437,470,473,0,417,426,479,442],
[500,506,489,514,554,474,0,425,557,553],
[442,521,470,545,487,465,466,0,463,476],
[385,378,425,452,449,412,334,428,0,474],
[406,452,441,468,418,449,338,415,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,363,444,474,432,410,429,434,446],
[473,0,442,471,454,426,446,445,481,457],
[528,449,0,401,467,432,435,434,462,450],
[447,420,490,0,457,414,409,481,434,457],
[417,437,424,434,0,417,452,447,419,449],
[459,465,459,477,474,0,413,442,459,440],
[481,445,456,482,439,478,0,485,459,475],
[462,446,457,410,444,449,406,0,441,438],
[457,410,429,457,472,432,432,450,0,462],
[445,434,441,434,442,451,416,453,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,421,438,490,449,462,451,498,458],
[498,0,464,443,455,466,493,436,466,466],
[470,427,0,489,447,474,498,462,475,504],
[453,448,402,0,406,422,451,412,437,434],
[401,436,444,485,0,463,502,454,467,452],
[442,425,417,469,428,0,458,411,478,456],
[429,398,393,440,389,433,0,404,455,412],
[440,455,429,479,437,480,487,0,463,456],
[393,425,416,454,424,413,436,428,0,429],
[433,425,387,457,439,435,479,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,471,442,464,457,432,437,435,458],
[431,0,426,446,442,425,435,450,407,464],
[420,465,0,435,426,448,418,436,433,444],
[449,445,456,0,446,447,451,462,422,463],
[427,449,465,445,0,414,420,433,418,465],
[434,466,443,444,477,0,435,446,435,462],
[459,456,473,440,471,456,0,447,454,485],
[454,441,455,429,458,445,444,0,437,475],
[456,484,458,469,473,456,437,454,0,480],
[433,427,447,428,426,429,406,416,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,355,457,394,388,448,400,412,364],
[433,0,398,520,388,418,431,428,356,435],
[536,493,0,560,525,488,504,441,465,490],
[434,371,331,0,336,303,419,306,393,365],
[497,503,366,555,0,378,481,421,434,356],
[503,473,403,588,513,0,520,467,481,483],
[443,460,387,472,410,371,0,453,440,413],
[491,463,450,585,470,424,438,0,434,476],
[479,535,426,498,457,410,451,457,0,481],
[527,456,401,526,535,408,478,415,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,431,469,454,437,453,421,452,461],
[451,0,430,467,453,454,450,433,459,447],
[460,461,0,461,445,431,458,447,455,467],
[422,424,430,0,417,408,424,409,437,422],
[437,438,446,474,0,438,445,436,468,432],
[454,437,460,483,453,0,452,437,475,490],
[438,441,433,467,446,439,0,434,450,453],
[470,458,444,482,455,454,457,0,455,466],
[439,432,436,454,423,416,441,436,0,434],
[430,444,424,469,459,401,438,425,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,447,429,429,470,485,453,495,451],
[450,0,471,445,454,479,488,459,491,451],
[444,420,0,414,441,476,484,446,471,471],
[462,446,477,0,430,479,467,461,501,460],
[462,437,450,461,0,462,466,425,489,444],
[421,412,415,412,429,0,443,422,447,430],
[406,403,407,424,425,448,0,428,456,433],
[438,432,445,430,466,469,463,0,467,459],
[396,400,420,390,402,444,435,424,0,417],
[440,440,420,431,447,461,458,432,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,434,438,460,464,415,467,438,446],
[451,0,455,434,460,475,450,455,427,420],
[457,436,0,421,467,435,427,447,440,426],
[453,457,470,0,485,439,452,469,432,452],
[431,431,424,406,0,437,407,435,438,416],
[427,416,456,452,454,0,425,426,435,426],
[476,441,464,439,484,466,0,453,450,462],
[424,436,444,422,456,465,438,0,432,419],
[453,464,451,459,453,456,441,459,0,438],
[445,471,465,439,475,465,429,472,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,439,465,450,465,429,441,458,442],
[426,0,422,442,432,424,422,414,445,416],
[452,469,0,451,435,450,436,444,465,432],
[426,449,440,0,440,438,418,447,438,434],
[441,459,456,451,0,461,455,449,473,445],
[426,467,441,453,430,0,440,439,446,432],
[462,469,455,473,436,451,0,448,462,431],
[450,477,447,444,442,452,443,0,464,450],
[433,446,426,453,418,445,429,427,0,423],
[449,475,459,457,446,459,460,441,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,444,463,448,424,437,434,433,427],
[437,0,416,484,424,416,443,430,405,425],
[447,475,0,459,460,440,465,436,426,412],
[428,407,432,0,412,407,414,429,408,383],
[443,467,431,479,0,443,446,438,451,442],
[467,475,451,484,448,0,454,456,439,471],
[454,448,426,477,445,437,0,453,422,417],
[457,461,455,462,453,435,438,0,441,438],
[458,486,465,483,440,452,469,450,0,454],
[464,466,479,508,449,420,474,453,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,470,442,455,469,466,422,461,475],
[441,0,459,422,417,443,434,415,425,464],
[421,432,0,415,460,440,475,435,446,462],
[449,469,476,0,448,458,466,425,498,479],
[436,474,431,443,0,430,450,430,470,460],
[422,448,451,433,461,0,467,453,458,471],
[425,457,416,425,441,424,0,454,437,467],
[469,476,456,466,461,438,437,0,480,477],
[430,466,445,393,421,433,454,411,0,454],
[416,427,429,412,431,420,424,414,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,495,399,478,464,509,428,444,456],
[397,0,471,434,371,395,403,460,450,445],
[396,420,0,398,443,372,423,426,436,423],
[492,457,493,0,448,407,441,456,411,466],
[413,520,448,443,0,459,453,470,469,411],
[427,496,519,484,432,0,502,471,490,498],
[382,488,468,450,438,389,0,401,405,415],
[463,431,465,435,421,420,490,0,460,462],
[447,441,455,480,422,401,486,431,0,465],
[435,446,468,425,480,393,476,429,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,424,434,426,441,430,413,428,498],
[429,0,408,449,426,459,440,416,430,450],
[467,483,0,436,447,441,443,425,451,487],
[457,442,455,0,427,457,468,434,447,494],
[465,465,444,464,0,472,446,461,454,476],
[450,432,450,434,419,0,427,430,439,448],
[461,451,448,423,445,464,0,437,462,485],
[478,475,466,457,430,461,454,0,451,466],
[463,461,440,444,437,452,429,440,0,477],
[393,441,404,397,415,443,406,425,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,435,469,470,479,455,467,462,482],
[411,0,462,448,450,456,451,444,463,435],
[456,429,0,479,424,437,443,436,476,477],
[422,443,412,0,418,428,427,475,432,433],
[421,441,467,473,0,432,473,501,449,455],
[412,435,454,463,459,0,443,501,470,485],
[436,440,448,464,418,448,0,450,454,473],
[424,447,455,416,390,390,441,0,415,467],
[429,428,415,459,442,421,437,476,0,423],
[409,456,414,458,436,406,418,424,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,515,555,439,424,468,387,509,484],
[418,0,425,438,404,434,403,435,441,439],
[376,466,0,483,393,430,421,439,439,441],
[336,453,408,0,399,365,394,412,414,410],
[452,487,498,492,0,465,509,448,432,472],
[467,457,461,526,426,0,492,437,460,489],
[423,488,470,497,382,399,0,408,418,471],
[504,456,452,479,443,454,483,0,431,474],
[382,450,452,477,459,431,473,460,0,414],
[407,452,450,481,419,402,420,417,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,443,407,422,369,440,377,426,396],
[480,0,480,418,443,421,482,449,476,438],
[448,411,0,365,388,386,458,421,450,420],
[484,473,526,0,457,437,467,444,468,466],
[469,448,503,434,0,447,490,456,514,494],
[522,470,505,454,444,0,504,477,464,477],
[451,409,433,424,401,387,0,407,432,418],
[514,442,470,447,435,414,484,0,501,468],
[465,415,441,423,377,427,459,390,0,450],
[495,453,471,425,397,414,473,423,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,446,431,443,448,385,459,441,424],
[455,0,428,445,440,424,420,420,458,447],
[445,463,0,425,463,435,430,458,463,458],
[460,446,466,0,442,449,428,464,461,442],
[448,451,428,449,0,446,427,440,455,437],
[443,467,456,442,445,0,430,441,441,452],
[506,471,461,463,464,461,0,477,486,444],
[432,471,433,427,451,450,414,0,462,439],
[450,433,428,430,436,450,405,429,0,426],
[467,444,433,449,454,439,447,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,447,454,442,435,449,437,416,457],
[453,0,455,466,448,433,456,434,438,457],
[444,436,0,474,451,440,445,451,417,441],
[437,425,417,0,425,452,432,431,436,439],
[449,443,440,466,0,441,446,439,448,477],
[456,458,451,439,450,0,449,447,430,453],
[442,435,446,459,445,442,0,453,432,445],
[454,457,440,460,452,444,438,0,435,442],
[475,453,474,455,443,461,459,456,0,447],
[434,434,450,452,414,438,446,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,443,437,411,427,418,454,428,448],
[429,0,434,421,387,397,412,427,436,420],
[448,457,0,431,396,421,421,431,449,438],
[454,470,460,0,411,454,446,462,463,451],
[480,504,495,480,0,462,441,476,463,486],
[464,494,470,437,429,0,445,443,463,440],
[473,479,470,445,450,446,0,479,474,443],
[437,464,460,429,415,448,412,0,435,454],
[463,455,442,428,428,428,417,456,0,457],
[443,471,453,440,405,451,448,437,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,459,422,481,465,479,457,478,470],
[419,0,465,435,466,461,440,469,471,476],
[432,426,0,390,443,430,415,447,422,453],
[469,456,501,0,443,451,505,475,500,457],
[410,425,448,448,0,448,467,416,460,478],
[426,430,461,440,443,0,466,446,456,449],
[412,451,476,386,424,425,0,438,469,471],
[434,422,444,416,475,445,453,0,493,451],
[413,420,469,391,431,435,422,398,0,425],
[421,415,438,434,413,442,420,440,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,439,442,455,481,430,456,452,467],
[435,0,455,458,458,482,443,467,467,433],
[452,436,0,465,459,469,466,480,433,465],
[449,433,426,0,415,446,437,437,427,447],
[436,433,432,476,0,467,440,508,492,472],
[410,409,422,445,424,0,419,444,438,440],
[461,448,425,454,451,472,0,478,438,459],
[435,424,411,454,383,447,413,0,441,437],
[439,424,458,464,399,453,453,450,0,442],
[424,458,426,444,419,451,432,454,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,463,449,466,443,439,469,409,425],
[437,0,466,432,448,461,438,435,435,447],
[428,425,0,443,432,443,455,428,433,405],
[442,459,448,0,480,451,420,441,467,439],
[425,443,459,411,0,430,424,427,419,427],
[448,430,448,440,461,0,458,438,425,428],
[452,453,436,471,467,433,0,474,436,419],
[422,456,463,450,464,453,417,0,442,444],
[482,456,458,424,472,466,455,449,0,443],
[466,444,486,452,464,463,472,447,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,479,449,460,474,443,438,449,442],
[429,0,426,434,447,443,435,448,467,433],
[412,465,0,402,464,449,443,445,448,432],
[442,457,489,0,421,474,453,448,463,455],
[431,444,427,470,0,478,423,452,468,480],
[417,448,442,417,413,0,421,436,424,456],
[448,456,448,438,468,470,0,430,443,430],
[453,443,446,443,439,455,461,0,474,468],
[442,424,443,428,423,467,448,417,0,444],
[449,458,459,436,411,435,461,423,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,435,455,435,496,439,459,483,476],
[457,0,441,461,477,448,474,483,456,477],
[456,450,0,456,448,457,476,418,468,489],
[436,430,435,0,442,420,440,483,438,432],
[456,414,443,449,0,459,434,455,501,496],
[395,443,434,471,432,0,430,457,487,485],
[452,417,415,451,457,461,0,439,441,445],
[432,408,473,408,436,434,452,0,464,472],
[408,435,423,453,390,404,450,427,0,503],
[415,414,402,459,395,406,446,419,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,438,433,485,465,489,402,472,468],
[392,0,430,415,473,424,437,390,401,450],
[453,461,0,406,426,464,445,434,432,460],
[458,476,485,0,479,487,510,456,459,426],
[406,418,465,412,0,468,444,424,439,420],
[426,467,427,404,423,0,467,406,449,439],
[402,454,446,381,447,424,0,394,430,414],
[489,501,457,435,467,485,497,0,471,468],
[419,490,459,432,452,442,461,420,0,437],
[423,441,431,465,471,452,477,423,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,462,474,453,456,459,475,482,433],
[416,0,411,420,409,416,428,407,458,425],
[429,480,0,476,458,440,453,454,487,441],
[417,471,415,0,434,398,449,448,474,415],
[438,482,433,457,0,425,444,441,456,453],
[435,475,451,493,466,0,463,455,482,441],
[432,463,438,442,447,428,0,451,452,450],
[416,484,437,443,450,436,440,0,467,439],
[409,433,404,417,435,409,439,424,0,401],
[458,466,450,476,438,450,441,452,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,439,435,474,449,440,431,422,436],
[426,0,443,445,445,448,450,428,416,438],
[452,448,0,413,455,447,449,420,451,452],
[456,446,478,0,432,470,445,398,425,442],
[417,446,436,459,0,452,442,422,437,456],
[442,443,444,421,439,0,440,420,447,436],
[451,441,442,446,449,451,0,428,448,438],
[460,463,471,493,469,471,463,0,441,455],
[469,475,440,466,454,444,443,450,0,477],
[455,453,439,449,435,455,453,436,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,461,426,423,448,435,444,448,440],
[437,0,449,430,444,462,432,428,445,435],
[430,442,0,428,433,446,439,412,431,440],
[465,461,463,0,445,474,460,456,462,447],
[468,447,458,446,0,464,458,437,464,452],
[443,429,445,417,427,0,430,417,445,450],
[456,459,452,431,433,461,0,436,448,444],
[447,463,479,435,454,474,455,0,468,466],
[443,446,460,429,427,446,443,423,0,461],
[451,456,451,444,439,441,447,425,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,430,465,431,459,437,458,458,442],
[408,0,417,433,417,424,422,447,443,417],
[461,474,0,450,423,448,464,471,440,454],
[426,458,441,0,434,441,420,436,445,487],
[460,474,468,457,0,451,435,446,470,467],
[432,467,443,450,440,0,447,471,451,471],
[454,469,427,471,456,444,0,465,427,487],
[433,444,420,455,445,420,426,0,444,478],
[433,448,451,446,421,440,464,447,0,461],
[449,474,437,404,424,420,404,413,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,481,450,451,432,453,487,450,419],
[443,0,473,484,450,500,446,492,461,454],
[410,418,0,442,441,436,474,448,450,393],
[441,407,449,0,415,397,463,424,434,420],
[440,441,450,476,0,443,456,498,412,441],
[459,391,455,494,448,0,468,492,457,412],
[438,445,417,428,435,423,0,486,451,378],
[404,399,443,467,393,399,405,0,439,416],
[441,430,441,457,479,434,440,452,0,459],
[472,437,498,471,450,479,513,475,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,430,436,434,474,450,465,463,469],
[431,0,432,446,458,473,447,449,453,433],
[461,459,0,438,452,490,463,466,461,476],
[455,445,453,0,449,472,472,465,468,473],
[457,433,439,442,0,455,442,457,466,476],
[417,418,401,419,436,0,431,430,441,446],
[441,444,428,419,449,460,0,438,452,431],
[426,442,425,426,434,461,453,0,453,446],
[428,438,430,423,425,450,439,438,0,471],
[422,458,415,418,415,445,460,445,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,440,435,433,442,420,424,442,439],
[470,0,464,444,464,444,448,452,466,452],
[451,427,0,438,444,443,444,447,440,407],
[456,447,453,0,460,450,442,453,459,436],
[458,427,447,431,0,434,425,437,433,427],
[449,447,448,441,457,0,448,445,428,447],
[471,443,447,449,466,443,0,456,462,418],
[467,439,444,438,454,446,435,0,450,433],
[449,425,451,432,458,463,429,441,0,433],
[452,439,484,455,464,444,473,458,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,462,439,442,460,441,439,453,452],
[448,0,479,452,448,466,451,440,450,465],
[429,412,0,437,417,433,430,418,422,422],
[452,439,454,0,458,463,474,440,467,451],
[449,443,474,433,0,440,444,424,446,456],
[431,425,458,428,451,0,436,436,438,454],
[450,440,461,417,447,455,0,442,438,442],
[452,451,473,451,467,455,449,0,438,448],
[438,441,469,424,445,453,453,453,0,449],
[439,426,469,440,435,437,449,443,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,431,436,449,438,425,431,427,493],
[496,0,447,386,435,420,410,411,414,428],
[460,444,0,409,465,423,446,414,428,432],
[455,505,482,0,463,442,463,462,411,461],
[442,456,426,428,0,459,420,477,438,456],
[453,471,468,449,432,0,435,454,449,460],
[466,481,445,428,471,456,0,447,454,467],
[460,480,477,429,414,437,444,0,414,476],
[464,477,463,480,453,442,437,477,0,445],
[398,463,459,430,435,431,424,415,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,457,405,425,422,434,444,453,405],
[486,0,489,456,461,442,475,455,440,432],
[434,402,0,447,391,451,433,445,459,443],
[486,435,444,0,451,445,463,449,447,436],
[466,430,500,440,0,468,445,475,447,448],
[469,449,440,446,423,0,449,453,421,426],
[457,416,458,428,446,442,0,450,441,430],
[447,436,446,442,416,438,441,0,417,411],
[438,451,432,444,444,470,450,474,0,430],
[486,459,448,455,443,465,461,480,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,432,417,448,468,459,467,505,467],
[406,0,430,467,442,476,423,467,479,461],
[459,461,0,463,481,465,444,474,510,481],
[474,424,428,0,438,481,446,466,500,483],
[443,449,410,453,0,489,460,479,475,441],
[423,415,426,410,402,0,392,415,487,430],
[432,468,447,445,431,499,0,473,492,500],
[424,424,417,425,412,476,418,0,444,421],
[386,412,381,391,416,404,399,447,0,410],
[424,430,410,408,450,461,391,470,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,446,439,417,430,447,446,412,441],
[449,0,459,450,432,414,451,449,426,434],
[445,432,0,441,451,440,445,456,423,461],
[452,441,450,0,444,451,457,448,430,447],
[474,459,440,447,0,434,442,464,457,450],
[461,477,451,440,457,0,468,462,450,460],
[444,440,446,434,449,423,0,448,429,434],
[445,442,435,443,427,429,443,0,428,432],
[479,465,468,461,434,441,462,463,0,451],
[450,457,430,444,441,431,457,459,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,409,451,430,512,470,368,416,489],
[427,0,415,447,421,542,541,448,427,520],
[482,476,0,434,441,531,543,416,405,486],
[440,444,457,0,417,475,508,451,499,490],
[461,470,450,474,0,496,539,414,499,522],
[379,349,360,416,395,0,427,346,394,414],
[421,350,348,383,352,464,0,380,431,410],
[523,443,475,440,477,545,511,0,477,474],
[475,464,486,392,392,497,460,414,0,488],
[402,371,405,401,369,477,481,417,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,378,407,440,400,416,386,380,417,422],
[513,0,448,455,437,470,445,440,487,474],
[484,443,0,439,422,458,422,456,475,434],
[451,436,452,0,446,430,439,452,478,416],
[491,454,469,445,0,465,467,432,458,439],
[475,421,433,461,426,0,435,448,434,443],
[505,446,469,452,424,456,0,439,460,486],
[511,451,435,439,459,443,452,0,477,450],
[474,404,416,413,433,457,431,414,0,432],
[469,417,457,475,452,448,405,441,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,459,431,432,434,413,452,458,460],
[447,0,471,461,462,475,423,456,429,455],
[432,420,0,403,425,428,395,427,423,425],
[460,430,488,0,466,459,447,458,456,478],
[459,429,466,425,0,443,446,458,440,459],
[457,416,463,432,448,0,434,448,444,455],
[478,468,496,444,445,457,0,453,451,479],
[439,435,464,433,433,443,438,0,432,467],
[433,462,468,435,451,447,440,459,0,451],
[431,436,466,413,432,436,412,424,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,479,448,425,464,426,415,445,460],
[441,0,455,488,459,460,442,451,447,472],
[412,436,0,425,410,467,422,409,440,453],
[443,403,466,0,448,433,434,440,419,442],
[466,432,481,443,0,443,416,423,424,438],
[427,431,424,458,448,0,413,426,451,453],
[465,449,469,457,475,478,0,443,439,445],
[476,440,482,451,468,465,448,0,458,463],
[446,444,451,472,467,440,452,433,0,455],
[431,419,438,449,453,438,446,428,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,387,415,424,408,412,408,410,401],
[509,0,451,451,453,435,455,427,458,451],
[504,440,0,447,436,472,467,421,449,481],
[476,440,444,0,454,468,468,429,447,475],
[467,438,455,437,0,435,471,414,446,449],
[483,456,419,423,456,0,437,471,471,472],
[479,436,424,423,420,454,0,415,442,433],
[483,464,470,462,477,420,476,0,463,477],
[481,433,442,444,445,420,449,428,0,446],
[490,440,410,416,442,419,458,414,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,410,397,408,447,445,415,437,464],
[473,0,443,431,436,465,452,440,452,412],
[481,448,0,444,441,476,452,458,437,452],
[494,460,447,0,449,447,464,455,459,440],
[483,455,450,442,0,462,460,455,444,451],
[444,426,415,444,429,0,444,434,434,455],
[446,439,439,427,431,447,0,412,440,426],
[476,451,433,436,436,457,479,0,463,460],
[454,439,454,432,447,457,451,428,0,465],
[427,479,439,451,440,436,465,431,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,439,415,417,498,454,495,397,467],
[401,0,438,414,389,462,446,437,371,401],
[452,453,0,486,430,483,475,511,448,499],
[476,477,405,0,475,478,461,512,427,429],
[474,502,461,416,0,433,416,438,440,493],
[393,429,408,413,458,0,389,446,417,424],
[437,445,416,430,475,502,0,475,423,459],
[396,454,380,379,453,445,416,0,403,431],
[494,520,443,464,451,474,468,488,0,503],
[424,490,392,462,398,467,432,460,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,468,414,432,401,413,466,456,428],
[400,0,405,405,422,398,415,462,429,389],
[423,486,0,408,485,423,421,463,390,396],
[477,486,483,0,490,457,444,479,422,416],
[459,469,406,401,0,426,425,473,417,418],
[490,493,468,434,465,0,441,479,437,425],
[478,476,470,447,466,450,0,522,431,454],
[425,429,428,412,418,412,369,0,422,401],
[435,462,501,469,474,454,460,469,0,435],
[463,502,495,475,473,466,437,490,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,466,443,449,444,458,456,428,469],
[404,0,449,410,415,439,440,415,423,443],
[425,442,0,452,446,438,454,430,421,469],
[448,481,439,0,470,462,471,459,433,466],
[442,476,445,421,0,458,450,439,402,462],
[447,452,453,429,433,0,457,438,452,464],
[433,451,437,420,441,434,0,430,433,476],
[435,476,461,432,452,453,461,0,425,462],
[463,468,470,458,489,439,458,466,0,486],
[422,448,422,425,429,427,415,429,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,401,409,311,380,371,435,427,340],
[485,0,467,447,456,495,453,496,487,420],
[490,424,0,461,491,442,471,467,462,414],
[482,444,430,0,494,483,500,496,454,446],
[580,435,400,397,0,477,408,443,438,385],
[511,396,449,408,414,0,367,473,446,349],
[520,438,420,391,483,524,0,482,489,417],
[456,395,424,395,448,418,409,0,476,429],
[464,404,429,437,453,445,402,415,0,379],
[551,471,477,445,506,542,474,462,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,447,489,448,450,408,448,405,485],
[570,0,488,529,486,492,491,528,405,486],
[444,403,0,404,360,527,528,404,399,399],
[402,362,487,0,402,405,407,404,361,362],
[443,405,531,489,0,489,528,363,404,486],
[441,399,364,486,402,0,449,446,441,484],
[483,400,363,484,363,442,0,482,441,401],
[443,363,487,487,528,445,409,0,526,527],
[486,486,492,530,487,450,450,365,0,529],
[406,405,492,529,405,407,490,364,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,449,469,438,456,427,447,426,446],
[452,0,443,463,443,454,439,442,444,470],
[442,448,0,441,423,460,426,448,464,451],
[422,428,450,0,441,448,411,439,423,428],
[453,448,468,450,0,468,433,439,435,457],
[435,437,431,443,423,0,426,423,415,452],
[464,452,465,480,458,465,0,477,440,477],
[444,449,443,452,452,468,414,0,435,453],
[465,447,427,468,456,476,451,456,0,475],
[445,421,440,463,434,439,414,438,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,431,457,439,446,443,460,473,448],
[484,0,466,451,479,491,486,468,485,440],
[460,425,0,444,445,449,431,420,434,414],
[434,440,447,0,455,478,488,464,440,466],
[452,412,446,436,0,453,426,466,480,464],
[445,400,442,413,438,0,433,447,424,406],
[448,405,460,403,465,458,0,421,454,438],
[431,423,471,427,425,444,470,0,450,420],
[418,406,457,451,411,467,437,441,0,469],
[443,451,477,425,427,485,453,471,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,584,389,469,475,529,418,527,416,530],
[307,0,332,386,448,388,363,416,414,387],
[502,559,0,531,420,559,531,531,475,529],
[422,505,360,0,478,497,337,531,416,447],
[416,443,471,413,0,415,385,522,414,495],
[362,503,332,394,476,0,337,472,501,390],
[473,528,360,554,506,554,0,413,528,498],
[364,475,360,360,369,419,478,0,416,446],
[475,477,416,475,477,390,363,475,0,386],
[361,504,362,444,396,501,393,445,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,443,429,413,415,432,442,443],
[438,0,426,429,425,424,429,417,425,425],
[456,465,0,448,450,448,443,463,444,446],
[448,462,443,0,429,428,434,442,420,420],
[462,466,441,462,0,446,447,456,439,434],
[478,467,443,463,445,0,445,467,426,457],
[476,462,448,457,444,446,0,474,446,454],
[459,474,428,449,435,424,417,0,431,446],
[449,466,447,471,452,465,445,460,0,451],
[448,466,445,471,457,434,437,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,420,453,403,435,453,443,458,433],
[439,0,437,483,437,465,457,446,488,458],
[471,454,0,471,443,452,437,480,478,425],
[438,408,420,0,406,429,425,435,411,436],
[488,454,448,485,0,479,474,503,467,439],
[456,426,439,462,412,0,511,461,451,456],
[438,434,454,466,417,380,0,435,448,401],
[448,445,411,456,388,430,456,0,457,449],
[433,403,413,480,424,440,443,434,0,444],
[458,433,466,455,452,435,490,442,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,453,474,441,423,441,411,450,399],
[451,0,461,442,413,455,473,456,463,426],
[438,430,0,454,443,427,478,456,397,404],
[417,449,437,0,442,434,483,427,417,440],
[450,478,448,449,0,468,511,456,442,491],
[468,436,464,457,423,0,514,450,440,461],
[450,418,413,408,380,377,0,390,359,358],
[480,435,435,464,435,441,501,0,450,441],
[441,428,494,474,449,451,532,441,0,465],
[492,465,487,451,400,430,533,450,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,439,475,483,496,430,505,463,446],
[395,0,446,430,391,446,393,424,450,387],
[452,445,0,490,460,456,443,500,457,403],
[416,461,401,0,419,471,398,439,401,388],
[408,500,431,472,0,478,450,451,449,410],
[395,445,435,420,413,0,435,395,414,384],
[461,498,448,493,441,456,0,480,434,432],
[386,467,391,452,440,496,411,0,429,394],
[428,441,434,490,442,477,457,462,0,400],
[445,504,488,503,481,507,459,497,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,491,469,464,469,481,486,448,444],
[450,0,461,444,443,451,450,502,477,435],
[400,430,0,416,463,455,442,470,428,449],
[422,447,475,0,466,472,490,498,451,432],
[427,448,428,425,0,435,440,475,455,444],
[422,440,436,419,456,0,459,486,445,432],
[410,441,449,401,451,432,0,468,453,439],
[405,389,421,393,416,405,423,0,414,406],
[443,414,463,440,436,446,438,477,0,464],
[447,456,442,459,447,459,452,485,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,480,469,418,448,473,435,430,462],
[472,0,536,459,469,480,476,459,443,513],
[411,355,0,396,350,351,398,417,423,410],
[422,432,495,0,423,400,442,432,530,487],
[473,422,541,468,0,496,499,412,470,475],
[443,411,540,491,395,0,469,421,447,464],
[418,415,493,449,392,422,0,388,459,470],
[456,432,474,459,479,470,503,0,457,487],
[461,448,468,361,421,444,432,434,0,409],
[429,378,481,404,416,427,421,404,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,429,448,391,443,400,461,447,471],
[520,0,483,486,401,392,421,470,531,508],
[462,408,0,435,389,405,387,485,463,419],
[443,405,456,0,408,418,425,452,494,467],
[500,490,502,483,0,394,463,479,543,491],
[448,499,486,473,497,0,469,476,477,443],
[491,470,504,466,428,422,0,490,491,454],
[430,421,406,439,412,415,401,0,448,468],
[444,360,428,397,348,414,400,443,0,446],
[420,383,472,424,400,448,437,423,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,464,424,437,425,430,448,413,441],
[421,0,481,429,435,468,385,471,455,454],
[427,410,0,422,460,395,390,488,444,439],
[467,462,469,0,456,445,413,471,457,463],
[454,456,431,435,0,391,388,439,453,473],
[466,423,496,446,500,0,451,472,466,489],
[461,506,501,478,503,440,0,480,469,511],
[443,420,403,420,452,419,411,0,452,456],
[478,436,447,434,438,425,422,439,0,434],
[450,437,452,428,418,402,380,435,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,458,478,469,492,445,494,536,464],
[412,0,461,424,445,385,434,488,465,381],
[433,430,0,467,457,432,456,470,540,434],
[413,467,424,0,449,395,434,430,469,411],
[422,446,434,442,0,404,435,525,497,399],
[399,506,459,496,487,0,463,474,500,424],
[446,457,435,457,456,428,0,468,478,406],
[397,403,421,461,366,417,423,0,441,396],
[355,426,351,422,394,391,413,450,0,402],
[427,510,457,480,492,467,485,495,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,458,470,420,479,470,453,471,499],
[457,0,510,445,449,495,483,519,484,509],
[433,381,0,414,410,447,448,429,440,466],
[421,446,477,0,419,450,453,442,452,481],
[471,442,481,472,0,486,457,455,465,501],
[412,396,444,441,405,0,438,438,409,482],
[421,408,443,438,434,453,0,458,426,474],
[438,372,462,449,436,453,433,0,493,481],
[420,407,451,439,426,482,465,398,0,472],
[392,382,425,410,390,409,417,410,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,429,435,407,415,424,438,453,447],
[449,0,430,445,437,443,438,453,455,450],
[462,461,0,434,436,459,445,450,467,461],
[456,446,457,0,434,442,448,461,459,464],
[484,454,455,457,0,449,443,446,466,459],
[476,448,432,449,442,0,460,448,456,465],
[467,453,446,443,448,431,0,463,466,452],
[453,438,441,430,445,443,428,0,436,441],
[438,436,424,432,425,435,425,455,0,441],
[444,441,430,427,432,426,439,450,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,438,454,462,465,450,459,442,462],
[445,0,382,471,445,446,396,428,401,458],
[453,509,0,501,475,473,419,463,427,482],
[437,420,390,0,395,410,413,399,379,426],
[429,446,416,496,0,433,406,464,440,451],
[426,445,418,481,458,0,414,460,429,443],
[441,495,472,478,485,477,0,461,451,490],
[432,463,428,492,427,431,430,0,382,439],
[449,490,464,512,451,462,440,509,0,455],
[429,433,409,465,440,448,401,452,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,460,467,469,461,425,440,440,438],
[429,0,466,430,464,431,425,429,426,436],
[431,425,0,448,466,431,446,433,453,436],
[424,461,443,0,464,463,472,436,468,483],
[422,427,425,427,0,429,432,407,417,430],
[430,460,460,428,462,0,470,443,419,433],
[466,466,445,419,459,421,0,403,427,423],
[451,462,458,455,484,448,488,0,413,473],
[451,465,438,423,474,472,464,478,0,449],
[453,455,455,408,461,458,468,418,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,369,363,424,393,475,390,476,447],
[527,0,416,444,446,500,446,444,613,473],
[522,475,0,557,499,581,473,442,503,582],
[528,447,334,0,448,476,561,474,444,532],
[467,445,392,443,0,472,416,445,500,528],
[498,391,310,415,419,0,446,443,443,446],
[416,445,418,330,475,445,0,416,527,418],
[501,447,449,417,446,448,475,0,642,502],
[415,278,388,447,391,448,364,249,0,391],
[444,418,309,359,363,445,473,389,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,443,448,434,459,444,440,440],
[444,0,428,463,444,429,446,427,427,443],
[442,463,0,446,450,435,444,454,442,421],
[448,428,445,0,468,435,452,450,423,424],
[443,447,441,423,0,455,445,439,421,435],
[457,462,456,456,436,0,483,450,452,461],
[432,445,447,439,446,408,0,460,415,447],
[447,464,437,441,452,441,431,0,420,425],
[451,464,449,468,470,439,476,471,0,446],
[451,448,470,467,456,430,444,466,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,428,423,406,434,436,465,425,421],
[446,0,471,451,461,456,466,467,447,438],
[463,420,0,443,439,440,438,474,436,418],
[468,440,448,0,456,464,443,482,443,449],
[485,430,452,435,0,458,449,468,466,446],
[457,435,451,427,433,0,446,452,427,443],
[455,425,453,448,442,445,0,461,432,438],
[426,424,417,409,423,439,430,0,432,404],
[466,444,455,448,425,464,459,459,0,441],
[470,453,473,442,445,448,453,487,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,396,375,382,408,400,429,376,456],
[451,0,447,395,411,423,425,421,414,447],
[495,444,0,446,438,449,411,467,434,485],
[516,496,445,0,479,453,455,498,468,481],
[509,480,453,412,0,458,445,428,417,456],
[483,468,442,438,433,0,437,460,400,473],
[491,466,480,436,446,454,0,475,416,527],
[462,470,424,393,463,431,416,0,404,440],
[515,477,457,423,474,491,475,487,0,520],
[435,444,406,410,435,418,364,451,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,459,391,402,389,504,476,423,413],
[451,0,435,415,373,402,423,399,408,409],
[432,456,0,407,419,384,485,440,433,423],
[500,476,484,0,456,410,534,477,464,417],
[489,518,472,435,0,431,522,461,463,432],
[502,489,507,481,460,0,564,467,511,427],
[387,468,406,357,369,327,0,383,386,412],
[415,492,451,414,430,424,508,0,464,448],
[468,483,458,427,428,380,505,427,0,425],
[478,482,468,474,459,464,479,443,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,397,446,396,396,297,396,299,395],
[495,0,395,446,495,447,446,544,448,543],
[494,496,0,446,497,446,446,494,349,345],
[445,445,445,0,494,448,446,544,399,394],
[495,396,394,397,0,445,396,494,398,395],
[495,444,445,443,446,0,445,443,397,395],
[594,445,445,445,495,446,0,443,395,392],
[495,347,397,347,397,448,448,0,348,345],
[592,443,542,492,493,494,496,543,0,494],
[496,348,546,497,496,496,499,546,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,405,483,453,446,429,465,451,467],
[476,0,459,467,480,448,490,421,441,457],
[486,432,0,452,459,467,465,467,467,492],
[408,424,439,0,430,461,426,441,415,470],
[438,411,432,461,0,473,457,443,420,456],
[445,443,424,430,418,0,438,462,436,434],
[462,401,426,465,434,453,0,434,446,469],
[426,470,424,450,448,429,457,0,450,444],
[440,450,424,476,471,455,445,441,0,453],
[424,434,399,421,435,457,422,447,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,445,453,432,472,427,420,443,445],
[419,0,432,439,422,445,453,447,456,451],
[446,459,0,447,444,469,453,443,432,455],
[438,452,444,0,439,470,448,451,448,445],
[459,469,447,452,0,480,457,447,449,431],
[419,446,422,421,411,0,438,433,431,437],
[464,438,438,443,434,453,0,456,444,418],
[471,444,448,440,444,458,435,0,439,447],
[448,435,459,443,442,460,447,452,0,431],
[446,440,436,446,460,454,473,444,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,385,436,454,425,500,455,406,409],
[429,0,373,453,418,470,501,455,473,393],
[506,518,0,458,442,508,505,569,459,393],
[455,438,433,0,437,412,564,440,457,409],
[437,473,449,454,0,487,536,467,437,503],
[466,421,383,479,404,0,510,485,435,404],
[391,390,386,327,355,381,0,391,361,308],
[436,436,322,451,424,406,500,0,420,358],
[485,418,432,434,454,456,530,471,0,453],
[482,498,498,482,388,487,583,533,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,405,400,433,354,324,431,404,429],
[544,0,405,428,381,516,321,354,377,403],
[486,486,0,431,489,488,436,433,350,458],
[491,463,460,0,409,384,326,407,354,404],
[458,510,402,482,0,487,457,431,455,424],
[537,375,403,507,404,0,427,457,426,508],
[567,570,455,565,434,464,0,484,431,426],
[460,537,458,484,460,434,407,0,566,482],
[487,514,541,537,436,465,460,325,0,484],
[462,488,433,487,467,383,465,409,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,426,455,441,427,444,435,454,447],
[430,0,448,438,455,479,434,460,445,419],
[465,443,0,442,484,470,453,471,468,463],
[436,453,449,0,451,458,460,457,439,431],
[450,436,407,440,0,457,453,460,438,452],
[464,412,421,433,434,0,427,463,445,439],
[447,457,438,431,438,464,0,452,451,424],
[456,431,420,434,431,428,439,0,447,429],
[437,446,423,452,453,446,440,444,0,438],
[444,472,428,460,439,452,467,462,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,448,444,459,438,417,462,443,428],
[470,0,479,457,469,438,477,472,464,473],
[443,412,0,422,446,420,445,450,395,438],
[447,434,469,0,434,429,449,470,434,449],
[432,422,445,457,0,440,448,472,429,450],
[453,453,471,462,451,0,468,480,445,454],
[474,414,446,442,443,423,0,434,428,442],
[429,419,441,421,419,411,457,0,437,447],
[448,427,496,457,462,446,463,454,0,458],
[463,418,453,442,441,437,449,444,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,440,422,401,432,413,430,439,405],
[467,0,445,470,423,455,460,440,473,419],
[451,446,0,437,441,458,447,460,434,424],
[469,421,454,0,421,429,449,448,438,436],
[490,468,450,470,0,468,456,453,443,447],
[459,436,433,462,423,0,438,438,449,425],
[478,431,444,442,435,453,0,449,413,424],
[461,451,431,443,438,453,442,0,435,427],
[452,418,457,453,448,442,478,456,0,427],
[486,472,467,455,444,466,467,464,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,445,446,442,437,444,455,462,458],
[433,0,460,438,428,478,469,448,475,449],
[446,431,0,454,451,454,445,455,452,448],
[445,453,437,0,438,446,433,424,468,426],
[449,463,440,453,0,459,469,464,478,452],
[454,413,437,445,432,0,434,446,458,429],
[447,422,446,458,422,457,0,448,442,439],
[436,443,436,467,427,445,443,0,452,436],
[429,416,439,423,413,433,449,439,0,421],
[433,442,443,465,439,462,452,455,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,624,534,534,269,180,447,359,357,447],
[267,0,266,444,269,180,447,269,268,267],
[357,625,0,445,358,447,446,537,359,358],
[357,447,446,0,359,180,270,449,270,535],
[622,622,533,532,0,535,446,622,357,355],
[711,711,444,711,356,0,534,712,533,444],
[444,444,445,621,445,357,0,444,268,354],
[532,622,354,442,269,179,447,0,267,354],
[534,623,532,621,534,358,623,624,0,533],
[444,624,533,356,536,447,537,537,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,495,455,448,451,467,445,442,430],
[446,0,485,470,473,457,472,452,458,431],
[396,406,0,425,417,402,447,432,406,401],
[436,421,466,0,449,439,441,409,436,410],
[443,418,474,442,0,424,446,430,432,443],
[440,434,489,452,467,0,455,407,433,444],
[424,419,444,450,445,436,0,430,414,445],
[446,439,459,482,461,484,461,0,438,446],
[449,433,485,455,459,458,477,453,0,457],
[461,460,490,481,448,447,446,445,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,451,444,477,454,458,470,461,453],
[427,0,430,425,446,420,458,434,449,433],
[440,461,0,439,465,450,451,470,461,456],
[447,466,452,0,459,459,459,439,465,450],
[414,445,426,432,0,431,455,444,449,436],
[437,471,441,432,460,0,472,457,440,464],
[433,433,440,432,436,419,0,423,452,430],
[421,457,421,452,447,434,468,0,483,449],
[430,442,430,426,442,451,439,408,0,437],
[438,458,435,441,455,427,461,442,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,451,464,436,456,459,457,447,474],
[415,0,439,441,419,432,438,433,438,439],
[440,452,0,478,437,417,424,454,447,449],
[427,450,413,0,433,451,432,452,435,433],
[455,472,454,458,0,464,443,444,454,449],
[435,459,474,440,427,0,448,443,456,459],
[432,453,467,459,448,443,0,456,449,452],
[434,458,437,439,447,448,435,0,455,435],
[444,453,444,456,437,435,442,436,0,465],
[417,452,442,458,442,432,439,456,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,428,345,406,415,522,473,344,428],
[504,0,461,420,388,391,482,375,405,460],
[463,430,0,478,452,480,512,476,407,432],
[546,471,413,0,474,509,595,515,463,499],
[485,503,439,417,0,430,580,489,446,424],
[476,500,411,382,461,0,521,489,450,430],
[369,409,379,296,311,370,0,409,333,293],
[418,516,415,376,402,402,482,0,406,388],
[547,486,484,428,445,441,558,485,0,456],
[463,431,459,392,467,461,598,503,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,469,473,460,544,434,520,567,488],
[445,0,453,454,501,489,543,496,518,465],
[422,438,0,416,425,508,461,467,506,466],
[418,437,475,0,430,466,508,462,537,493],
[431,390,466,461,0,567,474,447,539,443],
[347,402,383,425,324,0,430,421,488,365],
[457,348,430,383,417,461,0,422,488,458],
[371,395,424,429,444,470,469,0,536,427],
[324,373,385,354,352,403,403,355,0,405],
[403,426,425,398,448,526,433,464,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,440,374,477,406,477,434,388,406],
[432,0,412,425,455,448,458,437,411,419],
[451,479,0,421,495,455,489,485,459,450],
[517,466,470,0,450,493,470,459,419,451],
[414,436,396,441,0,461,462,446,419,455],
[485,443,436,398,430,0,459,427,402,386],
[414,433,402,421,429,432,0,427,381,412],
[457,454,406,432,445,464,464,0,406,429],
[503,480,432,472,472,489,510,485,0,455],
[485,472,441,440,436,505,479,462,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,422,456,428,438,456,439,432,434],
[427,0,444,442,436,467,457,435,419,456],
[469,447,0,454,441,464,449,421,447,441],
[435,449,437,0,436,435,456,438,438,461],
[463,455,450,455,0,436,456,442,423,452],
[453,424,427,456,455,0,462,423,425,438],
[435,434,442,435,435,429,0,414,428,449],
[452,456,470,453,449,468,477,0,442,448],
[459,472,444,453,468,466,463,449,0,465],
[457,435,450,430,439,453,442,443,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,461,471,463,485,438,439,451,451],
[393,0,420,422,412,441,422,384,433,397],
[430,471,0,431,436,445,429,439,457,451],
[420,469,460,0,439,461,418,431,471,444],
[428,479,455,452,0,452,454,437,455,438],
[406,450,446,430,439,0,430,452,444,454],
[453,469,462,473,437,461,0,423,471,434],
[452,507,452,460,454,439,468,0,485,464],
[440,458,434,420,436,447,420,406,0,428],
[440,494,440,447,453,437,457,427,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,443,435,430,432,403,412,431,442],
[483,0,465,443,450,481,446,457,481,453],
[448,426,0,463,440,445,427,450,452,441],
[456,448,428,0,442,417,422,439,449,435],
[461,441,451,449,0,460,420,429,472,439],
[459,410,446,474,431,0,445,481,453,451],
[488,445,464,469,471,446,0,445,472,469],
[479,434,441,452,462,410,446,0,451,468],
[460,410,439,442,419,438,419,440,0,455],
[449,438,450,456,452,440,422,423,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,417,439,433,426,458,437,422,427],
[461,0,449,438,453,422,454,427,437,460],
[474,442,0,433,440,469,432,459,466,447],
[452,453,458,0,452,444,460,451,445,450],
[458,438,451,439,0,439,456,459,456,447],
[465,469,422,447,452,0,466,439,465,452],
[433,437,459,431,435,425,0,444,417,421],
[454,464,432,440,432,452,447,0,461,450],
[469,454,425,446,435,426,474,430,0,443],
[464,431,444,441,444,439,470,441,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,445,465,460,438,459,445,440,439],
[443,0,412,454,468,462,454,457,475,430],
[446,479,0,482,489,442,459,450,450,447],
[426,437,409,0,457,437,439,411,433,418],
[431,423,402,434,0,416,415,420,446,421],
[453,429,449,454,475,0,440,443,462,435],
[432,437,432,452,476,451,0,433,469,441],
[446,434,441,480,471,448,458,0,463,446],
[451,416,441,458,445,429,422,428,0,432],
[452,461,444,473,470,456,450,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,568,484,406,488,485,487,568,648,485],
[323,0,483,403,485,243,325,486,566,403],
[407,408,0,406,408,324,488,490,649,488],
[485,488,485,0,485,405,325,567,485,405],
[403,406,483,406,0,322,325,570,483,405],
[406,648,567,486,569,0,407,568,568,485],
[404,566,403,566,566,484,0,648,486,646],
[323,405,401,324,321,323,243,0,484,406],
[243,325,242,406,408,323,405,407,0,405],
[406,488,403,486,486,406,245,485,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,436,448,425,459,404,420,419,465],
[466,0,415,458,426,430,407,433,421,448],
[455,476,0,468,466,468,455,488,444,467],
[443,433,423,0,459,437,423,441,415,444],
[466,465,425,432,0,459,413,425,425,440],
[432,461,423,454,432,0,406,469,457,454],
[487,484,436,468,478,485,0,430,465,477],
[471,458,403,450,466,422,461,0,418,479],
[472,470,447,476,466,434,426,473,0,476],
[426,443,424,447,451,437,414,412,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,464,479,473,450,445,504,464,499],
[423,0,433,463,457,429,470,455,457,418],
[427,458,0,464,459,417,452,455,480,482],
[412,428,427,0,457,414,444,468,421,459],
[418,434,432,434,0,407,477,458,450,450],
[441,462,474,477,484,0,471,476,454,479],
[446,421,439,447,414,420,0,449,449,434],
[387,436,436,423,433,415,442,0,422,443],
[427,434,411,470,441,437,442,469,0,464],
[392,473,409,432,441,412,457,448,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,445,412,441,346,422,437,426,396],
[455,0,415,415,457,421,473,469,413,497],
[446,476,0,456,508,415,547,545,401,475],
[479,476,435,0,441,449,466,502,493,408],
[450,434,383,450,0,369,447,443,422,416],
[545,470,476,442,522,0,521,416,501,466],
[469,418,344,425,444,370,0,471,395,448],
[454,422,346,389,448,475,420,0,404,470],
[465,478,490,398,469,390,496,487,0,507],
[495,394,416,483,475,425,443,421,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,420,451,435,436,438,434,410,463],
[495,0,469,465,484,477,456,443,474,519],
[471,422,0,473,464,472,433,444,450,484],
[440,426,418,0,431,443,434,421,427,462],
[456,407,427,460,0,437,438,426,447,450],
[455,414,419,448,454,0,417,408,421,454],
[453,435,458,457,453,474,0,434,453,485],
[457,448,447,470,465,483,457,0,441,470],
[481,417,441,464,444,470,438,450,0,461],
[428,372,407,429,441,437,406,421,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,398,459,434,457,429,437,446,428],
[466,0,427,419,437,413,406,446,443,401],
[493,464,0,462,461,485,423,449,473,452],
[432,472,429,0,431,450,442,460,420,445],
[457,454,430,460,0,431,423,394,467,453],
[434,478,406,441,460,0,443,453,429,468],
[462,485,468,449,468,448,0,443,454,456],
[454,445,442,431,497,438,448,0,465,459],
[445,448,418,471,424,462,437,426,0,433],
[463,490,439,446,438,423,435,432,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,465,480,457,464,462,481,457,442],
[453,0,443,475,439,495,429,466,474,449],
[426,448,0,484,459,459,464,463,438,431],
[411,416,407,0,424,423,416,422,409,369],
[434,452,432,467,0,453,449,461,440,406],
[427,396,432,468,438,0,413,454,456,429],
[429,462,427,475,442,478,0,458,431,428],
[410,425,428,469,430,437,433,0,438,393],
[434,417,453,482,451,435,460,453,0,458],
[449,442,460,522,485,462,463,498,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,390,443,421,445,415,429,421,481],
[484,0,443,469,467,436,471,467,465,460],
[501,448,0,466,444,478,445,427,474,491],
[448,422,425,0,412,449,472,427,443,454],
[470,424,447,479,0,448,459,421,446,457],
[446,455,413,442,443,0,457,459,440,479],
[476,420,446,419,432,434,0,440,427,466],
[462,424,464,464,470,432,451,0,425,456],
[470,426,417,448,445,451,464,466,0,468],
[410,431,400,437,434,412,425,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,430,412,411,401,455,430,391,424],
[499,0,438,441,482,457,478,487,459,469],
[461,453,0,435,448,446,493,467,456,460],
[479,450,456,0,449,431,474,473,431,444],
[480,409,443,442,0,426,468,445,450,440],
[490,434,445,460,465,0,489,447,432,471],
[436,413,398,417,423,402,0,423,410,413],
[461,404,424,418,446,444,468,0,427,437],
[500,432,435,460,441,459,481,464,0,475],
[467,422,431,447,451,420,478,454,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,437,458,423,470,439,472,459,476],
[406,0,407,374,503,355,455,390,360,438],
[454,484,0,489,441,385,485,452,503,484],
[433,517,402,0,487,450,550,438,485,615],
[468,388,450,404,0,416,405,386,404,470],
[421,536,506,441,475,0,493,485,508,507],
[452,436,406,341,486,398,0,337,438,486],
[419,501,439,453,505,406,554,0,441,471],
[432,531,388,406,487,383,453,450,0,418],
[415,453,407,276,421,384,405,420,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,464,462,440,423,476,422,418,431],
[439,0,471,434,421,452,481,439,454,433],
[427,420,0,399,436,434,453,442,435,409],
[429,457,492,0,438,428,505,441,401,428],
[451,470,455,453,0,418,470,451,449,427],
[468,439,457,463,473,0,479,472,473,456],
[415,410,438,386,421,412,0,417,415,368],
[469,452,449,450,440,419,474,0,428,452],
[473,437,456,490,442,418,476,463,0,418],
[460,458,482,463,464,435,523,439,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,453,398,403,402,446,405,397,373],
[505,0,498,436,454,416,460,476,461,455],
[438,393,0,392,448,430,423,415,438,432],
[493,455,499,0,464,432,464,429,489,440],
[488,437,443,427,0,398,487,442,444,431],
[489,475,461,459,493,0,464,457,432,480],
[445,431,468,427,404,427,0,426,448,435],
[486,415,476,462,449,434,465,0,400,468],
[494,430,453,402,447,459,443,491,0,448],
[518,436,459,451,460,411,456,423,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,446,424,383,550,426,486,465,510],
[316,0,402,380,402,356,380,401,504,424],
[445,489,0,340,384,487,466,470,425,530],
[467,511,551,0,485,425,491,448,510,509],
[508,489,507,406,0,443,470,555,466,531],
[341,535,404,466,448,0,363,468,509,575],
[465,511,425,400,421,528,0,485,486,463],
[405,490,421,443,336,423,406,0,444,508],
[426,387,466,381,425,382,405,447,0,530],
[381,467,361,382,360,316,428,383,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,461,461,458,436,446,453,441,427],
[437,0,450,439,453,439,434,425,428,433],
[430,441,0,430,429,428,438,437,416,430],
[430,452,461,0,453,446,452,437,425,421],
[433,438,462,438,0,451,428,430,406,418],
[455,452,463,445,440,0,441,453,439,432],
[445,457,453,439,463,450,0,438,448,449],
[438,466,454,454,461,438,453,0,437,428],
[450,463,475,466,485,452,443,454,0,454],
[464,458,461,470,473,459,442,463,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,462,513,433,487,340,434,447,469],
[497,0,474,468,420,467,388,458,449,491],
[429,417,0,490,433,403,413,420,427,515],
[378,423,401,0,390,413,407,368,364,471],
[458,471,458,501,0,453,442,477,476,530],
[404,424,488,478,438,0,446,495,476,476],
[551,503,478,484,449,445,0,485,487,489],
[457,433,471,523,414,396,406,0,445,475],
[444,442,464,527,415,415,404,446,0,507],
[422,400,376,420,361,415,402,416,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,438,443,428,455,457,407,452,431],
[433,0,474,450,434,477,449,451,433,394],
[453,417,0,432,462,499,463,421,420,434],
[448,441,459,0,453,460,434,420,482,430],
[463,457,429,438,0,465,415,460,450,468],
[436,414,392,431,426,0,426,392,445,437],
[434,442,428,457,476,465,0,434,476,413],
[484,440,470,471,431,499,457,0,458,458],
[439,458,471,409,441,446,415,433,0,463],
[460,497,457,461,423,454,478,433,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,490,452,458,471,432,443,487,483],
[401,0,431,404,435,448,409,387,425,395],
[401,460,0,430,431,438,412,402,437,445],
[439,487,461,0,460,466,468,438,482,449],
[433,456,460,431,0,483,418,428,446,442],
[420,443,453,425,408,0,408,446,453,423],
[459,482,479,423,473,483,0,439,462,455],
[448,504,489,453,463,445,452,0,488,433],
[404,466,454,409,445,438,429,403,0,436],
[408,496,446,442,449,468,436,458,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,500,481,489,443,453,469,454,453],
[403,0,453,452,444,427,438,428,432,448],
[391,438,0,418,445,424,417,444,421,426],
[410,439,473,0,464,446,455,457,421,446],
[402,447,446,427,0,435,390,446,426,439],
[448,464,467,445,456,0,424,453,425,473],
[438,453,474,436,501,467,0,483,450,455],
[422,463,447,434,445,438,408,0,432,419],
[437,459,470,470,465,466,441,459,0,445],
[438,443,465,445,452,418,436,472,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,442,440,464,450,494,476,464,453],
[419,0,417,432,459,487,459,460,446,443],
[449,474,0,473,478,488,505,481,443,488],
[451,459,418,0,451,480,504,437,456,447],
[427,432,413,440,0,434,466,450,440,446],
[441,404,403,411,457,0,460,464,419,424],
[397,432,386,387,425,431,0,428,402,428],
[415,431,410,454,441,427,463,0,406,444],
[427,445,448,435,451,472,489,485,0,455],
[438,448,403,444,445,467,463,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,440,455,433,440,450,435,413,447],
[460,0,420,449,430,444,436,439,422,433],
[451,471,0,434,431,445,466,437,433,439],
[436,442,457,0,442,439,446,448,454,435],
[458,461,460,449,0,452,466,447,441,444],
[451,447,446,452,439,0,463,448,454,436],
[441,455,425,445,425,428,0,440,427,439],
[456,452,454,443,444,443,451,0,440,417],
[478,469,458,437,450,437,464,451,0,461],
[444,458,452,456,447,455,452,474,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,404,443,452,435,446,438,403,517],
[474,0,411,457,463,430,426,449,399,531],
[487,480,0,468,456,463,430,439,440,474],
[448,434,423,0,444,409,415,467,405,512],
[439,428,435,447,0,407,447,452,398,496],
[456,461,428,482,484,0,466,469,455,516],
[445,465,461,476,444,425,0,462,411,528],
[453,442,452,424,439,422,429,0,404,534],
[488,492,451,486,493,436,480,487,0,544],
[374,360,417,379,395,375,363,357,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,453,434,429,443,442,439,422,435],
[457,0,446,435,420,429,451,426,432,425],
[438,445,0,455,419,449,431,429,407,435],
[457,456,436,0,438,443,471,459,420,452],
[462,471,472,453,0,456,483,445,443,464],
[448,462,442,448,435,0,445,419,415,444],
[449,440,460,420,408,446,0,434,414,436],
[452,465,462,432,446,472,457,0,440,456],
[469,459,484,471,448,476,477,451,0,444],
[456,466,456,439,427,447,455,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,369,494,469,443,481,460,472,401],
[438,0,381,437,423,444,462,478,427,420],
[522,510,0,439,513,480,509,510,550,450],
[397,454,452,0,451,451,503,456,497,487],
[422,468,378,440,0,438,460,417,472,425],
[448,447,411,440,453,0,472,442,469,430],
[410,429,382,388,431,419,0,412,442,392],
[431,413,381,435,474,449,479,0,457,422],
[419,464,341,394,419,422,449,434,0,416],
[490,471,441,404,466,461,499,469,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,464,398,437,429,450,446,473,446],
[440,0,465,413,455,422,432,419,478,472],
[427,426,0,387,400,424,405,415,476,426],
[493,478,504,0,451,437,478,452,488,440],
[454,436,491,440,0,446,417,465,467,457],
[462,469,467,454,445,0,436,464,491,447],
[441,459,486,413,474,455,0,469,467,428],
[445,472,476,439,426,427,422,0,456,451],
[418,413,415,403,424,400,424,435,0,426],
[445,419,465,451,434,444,463,440,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,436,437,431,435,412,411,426,405],
[455,0,455,444,450,453,487,431,419,399],
[455,436,0,442,436,415,461,455,431,415],
[454,447,449,0,428,443,463,416,417,396],
[460,441,455,463,0,450,469,478,415,448],
[456,438,476,448,441,0,471,460,416,415],
[479,404,430,428,422,420,0,411,401,403],
[480,460,436,475,413,431,480,0,447,389],
[465,472,460,474,476,475,490,444,0,439],
[486,492,476,495,443,476,488,502,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,387,416,413,440,389,417,380,396],
[417,0,382,443,403,414,404,445,382,444],
[504,509,0,472,446,474,413,489,436,457],
[475,448,419,0,409,473,469,451,436,451],
[478,488,445,482,0,473,445,479,454,481],
[451,477,417,418,418,0,425,472,426,435],
[502,487,478,422,446,466,0,464,424,429],
[474,446,402,440,412,419,427,0,378,462],
[511,509,455,455,437,465,467,513,0,497],
[495,447,434,440,410,456,462,429,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,515,420,470,470,375,375,326,376],
[467,0,373,465,469,424,421,467,466,371],
[376,518,0,327,467,376,377,374,418,424],
[471,426,564,0,516,519,376,329,514,471],
[421,422,424,375,0,375,374,328,421,327],
[421,467,515,372,516,0,421,374,373,420],
[516,470,514,515,517,470,0,374,373,467],
[516,424,517,562,563,517,517,0,468,517],
[565,425,473,377,470,518,518,423,0,470],
[515,520,467,420,564,471,424,374,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,448,446,429,457,441,433,434,427],
[439,0,452,453,432,463,425,450,444,428],
[443,439,0,473,436,469,460,448,430,445],
[445,438,418,0,408,465,442,408,448,442],
[462,459,455,483,0,455,474,475,450,439],
[434,428,422,426,436,0,452,416,421,437],
[450,466,431,449,417,439,0,432,426,430],
[458,441,443,483,416,475,459,0,458,459],
[457,447,461,443,441,470,465,433,0,441],
[464,463,446,449,452,454,461,432,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,424,469,425,450,460,438,459,432],
[443,0,417,473,447,451,420,460,478,463],
[467,474,0,508,456,461,436,471,482,456],
[422,418,383,0,408,417,406,427,424,420],
[466,444,435,483,0,450,428,440,482,426],
[441,440,430,474,441,0,443,466,459,435],
[431,471,455,485,463,448,0,454,479,442],
[453,431,420,464,451,425,437,0,440,436],
[432,413,409,467,409,432,412,451,0,428],
[459,428,435,471,465,456,449,455,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,461,454,462,438,451,435,442,433],
[458,0,439,426,456,469,459,433,456,431],
[430,452,0,421,461,451,452,445,445,455],
[437,465,470,0,483,492,471,455,467,484],
[429,435,430,408,0,424,425,408,425,440],
[453,422,440,399,467,0,433,432,432,439],
[440,432,439,420,466,458,0,428,439,453],
[456,458,446,436,483,459,463,0,444,457],
[449,435,446,424,466,459,452,447,0,440],
[458,460,436,407,451,452,438,434,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,449,429,400,424,434,425,419,446],
[468,0,463,436,441,449,466,439,425,465],
[442,428,0,407,415,421,432,419,431,444],
[462,455,484,0,438,443,444,435,422,473],
[491,450,476,453,0,445,442,459,444,443],
[467,442,470,448,446,0,431,426,462,486],
[457,425,459,447,449,460,0,448,451,457],
[466,452,472,456,432,465,443,0,453,461],
[472,466,460,469,447,429,440,438,0,462],
[445,426,447,418,448,405,434,430,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,433,437,443,429,428,465,425,446],
[437,0,402,437,439,441,426,449,432,431],
[458,489,0,452,447,450,473,441,451,448],
[454,454,439,0,430,435,436,479,428,458],
[448,452,444,461,0,433,455,446,434,432],
[462,450,441,456,458,0,451,451,427,471],
[463,465,418,455,436,440,0,448,446,451],
[426,442,450,412,445,440,443,0,447,438],
[466,459,440,463,457,464,445,444,0,455],
[445,460,443,433,459,420,440,453,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,480,474,459,424,448,461,458,449],
[430,0,451,461,418,433,454,453,436,468],
[411,440,0,462,430,447,460,455,447,451],
[417,430,429,0,438,434,408,443,447,411],
[432,473,461,453,0,433,457,453,436,446],
[467,458,444,457,458,0,476,481,464,467],
[443,437,431,483,434,415,0,434,455,459],
[430,438,436,448,438,410,457,0,465,435],
[433,455,444,444,455,427,436,426,0,438],
[442,423,440,480,445,424,432,456,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,425,465,434,439,488,450,445,439],
[454,0,450,467,451,474,504,439,460,452],
[466,441,0,464,435,459,496,453,473,450],
[426,424,427,0,429,445,455,403,450,438],
[457,440,456,462,0,462,474,438,473,482],
[452,417,432,446,429,0,454,428,461,440],
[403,387,395,436,417,437,0,429,430,417],
[441,452,438,488,453,463,462,0,441,451],
[446,431,418,441,418,430,461,450,0,443],
[452,439,441,453,409,451,474,440,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,469,445,457,459,459,484,470,464],
[428,0,450,413,422,431,425,469,448,437],
[422,441,0,423,433,424,426,452,431,436],
[446,478,468,0,438,432,433,445,447,445],
[434,469,458,453,0,432,455,457,475,448],
[432,460,467,459,459,0,462,460,462,458],
[432,466,465,458,436,429,0,462,466,440],
[407,422,439,446,434,431,429,0,419,438],
[421,443,460,444,416,429,425,472,0,434],
[427,454,455,446,443,433,451,453,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,420,468,465,458,489,402,442,432],
[427,0,423,413,474,428,465,437,429,462],
[471,468,0,437,446,457,465,457,464,483],
[423,478,454,0,447,450,474,469,443,466],
[426,417,445,444,0,417,482,431,442,487],
[433,463,434,441,474,0,480,416,441,438],
[402,426,426,417,409,411,0,401,420,420],
[489,454,434,422,460,475,490,0,438,486],
[449,462,427,448,449,450,471,453,0,468],
[459,429,408,425,404,453,471,405,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,453,450,434,463,468,460,466,459],
[435,0,467,415,445,459,450,474,465,463],
[438,424,0,376,411,420,425,404,445,452],
[441,476,515,0,449,464,464,455,481,461],
[457,446,480,442,0,444,448,471,475,513],
[428,432,471,427,447,0,458,426,432,448],
[423,441,466,427,443,433,0,437,452,446],
[431,417,487,436,420,465,454,0,431,456],
[425,426,446,410,416,459,439,460,0,462],
[432,428,439,430,378,443,445,435,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,391,429,536,497,675,531,431,572],
[392,0,354,286,394,393,463,388,360,355],
[500,537,0,537,432,431,604,533,397,572],
[462,605,354,0,533,570,531,602,428,427],
[355,497,459,358,0,392,604,565,464,570],
[394,498,460,321,499,0,531,495,500,498],
[216,428,287,360,287,360,0,358,326,392],
[360,503,358,289,326,396,533,0,327,393],
[460,531,494,463,427,391,565,564,0,497],
[319,536,319,464,321,393,499,498,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,487,434,452,472,487,435,449,455],
[431,0,464,438,468,441,503,442,472,449],
[404,427,0,452,441,423,485,408,445,476],
[457,453,439,0,468,455,498,451,473,501],
[439,423,450,423,0,431,485,440,442,442],
[419,450,468,436,460,0,512,439,446,450],
[404,388,406,393,406,379,0,406,401,388],
[456,449,483,440,451,452,485,0,461,460],
[442,419,446,418,449,445,490,430,0,416],
[436,442,415,390,449,441,503,431,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,484,490,461,450,464,442,456,446],
[404,0,432,444,420,406,427,414,431,413],
[407,459,0,438,425,426,434,422,417,432],
[401,447,453,0,417,438,402,445,448,415],
[430,471,466,474,0,454,449,463,444,445],
[441,485,465,453,437,0,454,450,453,459],
[427,464,457,489,442,437,0,454,453,462],
[449,477,469,446,428,441,437,0,465,452],
[435,460,474,443,447,438,438,426,0,454],
[445,478,459,476,446,432,429,439,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,438,453,441,435,438,459,448,449],
[466,0,436,454,430,468,471,467,450,458],
[453,455,0,452,434,454,446,446,450,450],
[438,437,439,0,424,418,426,426,448,441],
[450,461,457,467,0,447,450,433,443,469],
[456,423,437,473,444,0,424,453,456,442],
[453,420,445,465,441,467,0,446,459,459],
[432,424,445,465,458,438,445,0,446,437],
[443,441,441,443,448,435,432,445,0,439],
[442,433,441,450,422,449,432,454,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,450,470,412,471,426,440,438,448],
[400,0,457,411,419,481,440,423,399,425],
[441,434,0,396,411,431,459,431,375,425],
[421,480,495,0,414,486,447,419,438,426],
[479,472,480,477,0,509,442,450,479,491],
[420,410,460,405,382,0,404,414,410,427],
[465,451,432,444,449,487,0,469,425,441],
[451,468,460,472,441,477,422,0,427,465],
[453,492,516,453,412,481,466,464,0,475],
[443,466,466,465,400,464,450,426,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,456,447,424,430,430,456,464,441],
[455,0,457,457,470,457,443,463,455,444],
[435,434,0,450,436,434,426,446,442,436],
[444,434,441,0,440,446,439,457,445,440],
[467,421,455,451,0,438,443,435,456,434],
[461,434,457,445,453,0,453,424,454,443],
[461,448,465,452,448,438,0,446,450,454],
[435,428,445,434,456,467,445,0,456,441],
[427,436,449,446,435,437,441,435,0,446],
[450,447,455,451,457,448,437,450,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,441,431,449,465,433,449,421,442],
[469,0,471,444,437,484,459,448,417,463],
[450,420,0,442,428,458,435,439,417,455],
[460,447,449,0,422,467,443,449,418,459],
[442,454,463,469,0,482,436,461,444,465],
[426,407,433,424,409,0,413,450,413,464],
[458,432,456,448,455,478,0,453,448,462],
[442,443,452,442,430,441,438,0,423,454],
[470,474,474,473,447,478,443,468,0,471],
[449,428,436,432,426,427,429,437,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,385,434,444,403,445,428,442,423],
[474,0,431,423,455,405,453,419,446,461],
[506,460,0,477,465,427,490,479,481,474],
[457,468,414,0,432,436,458,458,449,474],
[447,436,426,459,0,448,464,457,427,461],
[488,486,464,455,443,0,474,462,471,484],
[446,438,401,433,427,417,0,427,436,436],
[463,472,412,433,434,429,464,0,473,444],
[449,445,410,442,464,420,455,418,0,438],
[468,430,417,417,430,407,455,447,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,422,412,412,413,409,420,401,409],
[450,0,439,443,405,433,432,435,429,432],
[469,452,0,444,422,437,453,452,452,429],
[479,448,447,0,446,447,424,444,455,440],
[479,486,469,445,0,464,449,440,463,465],
[478,458,454,444,427,0,431,433,423,430],
[482,459,438,467,442,460,0,458,455,451],
[471,456,439,447,451,458,433,0,432,434],
[490,462,439,436,428,468,436,459,0,450],
[482,459,462,451,426,461,440,457,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,419,387,421,444,477,373,420,404],
[486,0,520,459,483,479,533,423,443,429],
[472,371,0,400,436,427,485,366,394,419],
[504,432,491,0,501,517,507,463,452,445],
[470,408,455,390,0,487,468,403,401,475],
[447,412,464,374,404,0,492,399,415,401],
[414,358,406,384,423,399,0,373,374,371],
[518,468,525,428,488,492,518,0,443,478],
[471,448,497,439,490,476,517,448,0,460],
[487,462,472,446,416,490,520,413,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,377,290,511,324,375,461,407,432],
[509,0,432,482,535,512,457,435,539,458],
[514,459,0,483,539,487,461,381,598,485],
[601,409,408,0,517,357,433,465,491,516],
[380,356,352,374,0,331,433,329,440,414],
[567,379,404,534,560,0,406,437,652,482],
[516,434,430,458,458,485,0,436,574,457],
[430,456,510,426,562,454,455,0,489,456],
[484,352,293,400,451,239,317,402,0,290],
[459,433,406,375,477,409,434,435,601,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,456,441,433,466,454,472,428,452],
[420,0,446,433,408,440,433,428,424,424],
[435,445,0,436,432,432,456,442,427,433],
[450,458,455,0,441,438,431,443,415,429],
[458,483,459,450,0,443,455,454,444,463],
[425,451,459,453,448,0,454,471,424,436],
[437,458,435,460,436,437,0,442,437,444],
[419,463,449,448,437,420,449,0,428,416],
[463,467,464,476,447,467,454,463,0,438],
[439,467,458,462,428,455,447,475,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,452,476,476,448,435,454,454,423],
[436,0,473,470,462,442,433,478,479,424],
[439,418,0,445,427,418,448,441,470,441],
[415,421,446,0,433,446,438,417,466,450],
[415,429,464,458,0,448,449,436,434,423],
[443,449,473,445,443,0,449,444,468,435],
[456,458,443,453,442,442,0,473,439,468],
[437,413,450,474,455,447,418,0,461,439],
[437,412,421,425,457,423,452,430,0,436],
[468,467,450,441,468,456,423,452,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,480,430,429,437,467,429,436,430],
[434,0,495,484,448,448,473,433,459,450],
[411,396,0,459,383,439,419,403,431,411],
[461,407,432,0,419,449,466,402,398,470],
[462,443,508,472,0,395,503,463,460,443],
[454,443,452,442,496,0,458,419,405,444],
[424,418,472,425,388,433,0,394,405,398],
[462,458,488,489,428,472,497,0,425,480],
[455,432,460,493,431,486,486,466,0,468],
[461,441,480,421,448,447,493,411,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,456,426,435,425,453,473,460,427],
[448,0,437,447,411,440,443,489,433,440],
[435,454,0,460,479,441,451,480,448,450],
[465,444,431,0,420,432,454,480,430,437],
[456,480,412,471,0,432,453,472,442,432],
[466,451,450,459,459,0,467,521,423,460],
[438,448,440,437,438,424,0,489,437,411],
[418,402,411,411,419,370,402,0,387,398],
[431,458,443,461,449,468,454,504,0,422],
[464,451,441,454,459,431,480,493,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,429,422,423,423,454,433,437,433],
[461,0,445,449,485,471,466,449,471,436],
[462,446,0,458,479,464,499,486,443,455],
[469,442,433,0,448,443,443,451,448,468],
[468,406,412,443,0,456,470,424,458,432],
[468,420,427,448,435,0,455,440,435,420],
[437,425,392,448,421,436,0,454,452,420],
[458,442,405,440,467,451,437,0,452,440],
[454,420,448,443,433,456,439,439,0,428],
[458,455,436,423,459,471,471,451,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,445,457,449,439,424,446,432,451],
[444,0,444,444,427,430,413,410,447,436],
[446,447,0,456,435,431,447,449,453,454],
[434,447,435,0,428,421,424,457,427,446],
[442,464,456,463,0,438,438,430,424,464],
[452,461,460,470,453,0,444,439,442,446],
[467,478,444,467,453,447,0,435,458,450],
[445,481,442,434,461,452,456,0,468,477],
[459,444,438,464,467,449,433,423,0,469],
[440,455,437,445,427,445,441,414,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,387,399,406,454,467,402,419,423],
[505,0,439,453,407,471,498,396,462,458],
[504,452,0,423,471,443,456,447,453,460],
[492,438,468,0,443,452,477,446,475,482],
[485,484,420,448,0,494,466,431,436,467],
[437,420,448,439,397,0,465,410,439,445],
[424,393,435,414,425,426,0,383,439,442],
[489,495,444,445,460,481,508,0,483,497],
[472,429,438,416,455,452,452,408,0,406],
[468,433,431,409,424,446,449,394,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,469,454,432,447,429,436,442,445],
[468,0,490,432,466,444,434,451,447,428],
[422,401,0,446,438,426,411,402,439,388],
[437,459,445,0,435,420,431,437,458,439],
[459,425,453,456,0,448,445,435,428,429],
[444,447,465,471,443,0,465,478,443,430],
[462,457,480,460,446,426,0,450,455,442],
[455,440,489,454,456,413,441,0,421,406],
[449,444,452,433,463,448,436,470,0,457],
[446,463,503,452,462,461,449,485,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,536,358,355,355,181,358,713,181],
[537,0,359,358,714,537,537,536,713,359],
[355,532,0,355,532,355,355,536,535,536],
[533,533,536,0,533,533,356,537,536,537],
[536,177,359,358,0,359,536,358,536,536],
[536,354,536,358,532,0,536,358,713,536],
[710,354,536,535,355,355,0,358,713,359],
[533,355,355,354,533,533,533,0,355,178],
[178,178,356,355,355,178,178,536,0,359],
[710,532,355,354,355,355,532,713,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,438,450,431,416,457,404,441,424],
[444,0,435,450,432,429,430,438,438,452],
[453,456,0,454,455,420,450,421,448,454],
[441,441,437,0,467,414,417,428,464,438],
[460,459,436,424,0,429,453,433,435,425],
[475,462,471,477,462,0,436,427,448,468],
[434,461,441,474,438,455,0,455,446,475],
[487,453,470,463,458,464,436,0,455,487],
[450,453,443,427,456,443,445,436,0,453],
[467,439,437,453,466,423,416,404,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,439,443,439,453,426,428,432,456],
[453,0,435,445,438,450,448,419,437,444],
[452,456,0,435,468,457,455,442,438,460],
[448,446,456,0,435,444,460,434,433,451],
[452,453,423,456,0,447,470,447,449,469],
[438,441,434,447,444,0,442,412,419,459],
[465,443,436,431,421,449,0,440,419,447],
[463,472,449,457,444,479,451,0,447,479],
[459,454,453,458,442,472,472,444,0,462],
[435,447,431,440,422,432,444,412,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,464,488,461,471,449,447,465,441],
[439,0,472,470,453,476,457,453,465,444],
[427,419,0,452,445,440,435,444,458,437],
[403,421,439,0,418,424,409,420,429,412],
[430,438,446,473,0,448,447,438,453,441],
[420,415,451,467,443,0,433,430,451,445],
[442,434,456,482,444,458,0,447,466,447],
[444,438,447,471,453,461,444,0,455,446],
[426,426,433,462,438,440,425,436,0,445],
[450,447,454,479,450,446,444,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,392,440,441,433,446,446,449],
[460,0,440,438,467,472,448,427,443,470],
[448,451,0,447,471,513,428,449,442,445],
[499,453,444,0,473,514,458,454,474,475],
[451,424,420,418,0,494,424,447,428,441],
[450,419,378,377,397,0,444,406,405,403],
[458,443,463,433,467,447,0,439,450,475],
[445,464,442,437,444,485,452,0,435,460],
[445,448,449,417,463,486,441,456,0,443],
[442,421,446,416,450,488,416,431,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 891, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_891.csv", index=False, header=False)
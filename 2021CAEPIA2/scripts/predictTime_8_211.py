
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,101,97,96,95,105,101,107],
[110,0,116,108,101,111,108,104],
[114,95,0,103,90,108,114,105],
[115,103,108,0,104,116,110,112],
[116,110,121,107,0,112,113,102],
[106,100,103,95,99,0,117,110],
[110,103,97,101,98,94,0,108],
[104,107,106,99,109,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,113,113,102,117,100],
[93,0,80,95,107,97,103,99],
[109,131,0,104,126,113,116,115],
[98,116,107,0,123,116,101,100],
[98,104,85,88,0,99,93,91],
[109,114,98,95,112,0,97,101],
[94,108,95,110,118,114,0,108],
[111,112,96,111,120,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,98,100,104,129,128],
[106,0,95,121,112,114,131,115],
[91,116,0,112,109,102,104,123],
[113,90,99,0,110,96,93,126],
[111,99,102,101,0,94,94,116],
[107,97,109,115,117,0,112,123],
[82,80,107,118,117,99,0,102],
[83,96,88,85,95,88,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,103,103,109,100,103],
[100,0,103,102,99,99,103,92],
[84,108,0,95,109,101,105,98],
[108,109,116,0,111,108,103,114],
[108,112,102,100,0,100,112,107],
[102,112,110,103,111,0,95,104],
[111,108,106,108,99,116,0,102],
[108,119,113,97,104,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,112,123,125,113,125],
[109,0,123,87,111,113,109,114],
[103,88,0,88,109,106,85,106],
[99,124,123,0,113,116,122,113],
[88,100,102,98,0,116,112,103],
[86,98,105,95,95,0,105,101],
[98,102,126,89,99,106,0,96],
[86,97,105,98,108,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,100,94,99,89,104],
[114,0,109,113,98,101,108,117],
[110,102,0,115,98,98,100,108],
[111,98,96,0,99,93,93,99],
[117,113,113,112,0,101,92,114],
[112,110,113,118,110,0,104,108],
[122,103,111,118,119,107,0,108],
[107,94,103,112,97,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,105,103,96,106,112],
[94,0,113,105,106,105,103,99],
[92,98,0,89,94,90,94,100],
[106,106,122,0,101,105,106,109],
[108,105,117,110,0,102,106,107],
[115,106,121,106,109,0,116,101],
[105,108,117,105,105,95,0,110],
[99,112,111,102,104,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,66,65,109,113,90,119],
[89,0,88,91,110,138,125,104],
[145,123,0,128,172,106,102,138],
[146,120,83,0,115,122,109,113],
[102,101,39,96,0,113,91,119],
[98,73,105,89,98,0,77,109],
[121,86,109,102,120,134,0,120],
[92,107,73,98,92,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,105,112,123,112,113],
[103,0,107,110,108,126,97,118],
[94,104,0,113,112,111,97,118],
[106,101,98,0,111,122,95,110],
[99,103,99,100,0,96,97,91],
[88,85,100,89,115,0,97,100],
[99,114,114,116,114,114,0,103],
[98,93,93,101,120,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,96,144,109,111,100],
[99,0,84,103,123,109,90,128],
[99,127,0,97,112,109,97,129],
[115,108,114,0,109,100,114,135],
[67,88,99,102,0,87,84,114],
[102,102,102,111,124,0,115,159],
[100,121,114,97,127,96,0,140],
[111,83,82,76,97,52,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,103,107,112,113,117],
[97,0,117,86,96,107,117,117],
[88,94,0,95,96,99,92,122],
[108,125,116,0,106,109,104,117],
[104,115,115,105,0,105,99,103],
[99,104,112,102,106,0,94,129],
[98,94,119,107,112,117,0,98],
[94,94,89,94,108,82,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,145,145,144,115,82],
[107,0,59,107,126,59,107,122],
[107,152,0,107,126,59,67,112],
[66,104,104,0,56,85,37,82],
[66,85,85,155,0,125,85,82],
[67,152,152,126,86,0,67,112],
[96,104,144,174,126,144,0,122],
[129,89,99,129,129,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,99,100,119,98,93],
[101,0,104,88,90,97,77,87],
[121,107,0,108,98,118,91,105],
[112,123,103,0,115,130,82,99],
[111,121,113,96,0,138,121,109],
[92,114,93,81,73,0,80,91],
[113,134,120,129,90,131,0,109],
[118,124,106,112,102,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,95,114,90,92,103],
[114,0,135,119,106,107,108,99],
[116,76,0,103,110,87,84,100],
[116,92,108,0,109,92,104,96],
[97,105,101,102,0,105,97,111],
[121,104,124,119,106,0,110,117],
[119,103,127,107,114,101,0,110],
[108,112,111,115,100,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,105,98,100,105,107],
[108,0,103,113,107,106,104,110],
[106,108,0,112,106,104,105,112],
[106,98,99,0,95,93,99,112],
[113,104,105,116,0,100,99,111],
[111,105,107,118,111,0,112,116],
[106,107,106,112,112,99,0,115],
[104,101,99,99,100,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,90,99,115,108,131,90],
[123,0,108,88,119,104,124,101],
[121,103,0,116,121,94,127,114],
[112,123,95,0,132,105,125,111],
[96,92,90,79,0,71,94,80],
[103,107,117,106,140,0,137,103],
[80,87,84,86,117,74,0,85],
[121,110,97,100,131,108,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,108,102,95,83,85,86],
[124,0,103,125,116,106,104,111],
[103,108,0,140,99,109,86,107],
[109,86,71,0,90,69,59,87],
[116,95,112,121,0,88,69,90],
[128,105,102,142,123,0,125,116],
[126,107,125,152,142,86,0,122],
[125,100,104,124,121,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,91,114,94,106,96],
[94,0,102,97,115,92,97,104],
[116,109,0,110,119,101,97,96],
[120,114,101,0,127,111,103,94],
[97,96,92,84,0,80,98,77],
[117,119,110,100,131,0,121,109],
[105,114,114,108,113,90,0,99],
[115,107,115,117,134,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,141,149,111,96,111],
[90,0,73,84,90,121,89,74],
[112,138,0,121,148,118,140,104],
[70,127,90,0,104,109,103,103],
[62,121,63,107,0,89,101,86],
[100,90,93,102,122,0,114,68],
[115,122,71,108,110,97,0,51],
[100,137,107,108,125,143,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,101,120,122,126,120],
[105,0,70,111,104,123,104,98],
[102,141,0,134,146,154,150,138],
[110,100,77,0,129,116,136,120],
[91,107,65,82,0,108,111,91],
[89,88,57,95,103,0,99,115],
[85,107,61,75,100,112,0,100],
[91,113,73,91,120,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,113,107,101,105,99],
[115,0,108,103,127,105,110,110],
[112,103,0,107,112,111,113,106],
[98,108,104,0,102,95,93,105],
[104,84,99,109,0,92,102,101],
[110,106,100,116,119,0,104,109],
[106,101,98,118,109,107,0,104],
[112,101,105,106,110,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,100,103,69,114,90,102],
[127,0,99,113,129,139,134,101],
[111,112,0,104,84,69,95,125],
[108,98,107,0,107,139,93,111],
[142,82,127,104,0,135,58,103],
[97,72,142,72,76,0,79,93],
[121,77,116,118,153,132,0,60],
[109,110,86,100,108,118,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,115,97,104,107,124],
[109,0,111,146,107,114,98,126],
[116,100,0,128,103,96,88,102],
[96,65,83,0,92,81,79,116],
[114,104,108,119,0,117,103,127],
[107,97,115,130,94,0,108,140],
[104,113,123,132,108,103,0,118],
[87,85,109,95,84,71,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,103,117,116,110,120],
[101,0,98,101,116,114,111,118],
[101,113,0,109,121,108,108,112],
[108,110,102,0,125,109,116,116],
[94,95,90,86,0,112,101,100],
[95,97,103,102,99,0,99,103],
[101,100,103,95,110,112,0,109],
[91,93,99,95,111,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,114,92,108,109,108],
[111,0,107,106,97,111,106,110],
[100,104,0,101,104,113,109,92],
[97,105,110,0,97,111,102,102],
[119,114,107,114,0,109,107,103],
[103,100,98,100,102,0,106,100],
[102,105,102,109,104,105,0,94],
[103,101,119,109,108,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,115,115,98,108,119],
[96,0,110,99,111,95,94,104],
[105,101,0,97,102,92,104,107],
[96,112,114,0,116,110,114,112],
[96,100,109,95,0,80,109,99],
[113,116,119,101,131,0,115,114],
[103,117,107,97,102,96,0,109],
[92,107,104,99,112,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,76,83,18,38,43,38],
[172,0,76,84,38,38,146,102],
[135,135,0,135,135,69,107,114],
[128,127,76,0,38,38,86,128],
[193,173,76,173,0,129,167,172],
[173,173,142,173,82,0,169,108],
[168,65,104,125,44,42,0,44],
[173,109,97,83,39,103,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,117,104,109,114,110,105],
[86,0,110,101,106,96,97,89],
[94,101,0,95,100,92,94,99],
[107,110,116,0,102,103,98,102],
[102,105,111,109,0,100,104,91],
[97,115,119,108,111,0,113,105],
[101,114,117,113,107,98,0,108],
[106,122,112,109,120,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,142,113,100,119,129,135],
[82,0,108,88,91,82,107,129],
[69,103,0,79,108,88,80,111],
[98,123,132,0,110,129,99,121],
[111,120,103,101,0,95,128,128],
[92,129,123,82,116,0,105,114],
[82,104,131,112,83,106,0,137],
[76,82,100,90,83,97,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,101,92,96,83,87],
[110,0,112,115,108,120,109,94],
[97,99,0,103,93,103,94,85],
[110,96,108,0,102,110,84,97],
[119,103,118,109,0,109,108,98],
[115,91,108,101,102,0,96,87],
[128,102,117,127,103,115,0,111],
[124,117,126,114,113,124,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,100,96,95,109,96],
[104,0,122,101,91,98,99,112],
[103,89,0,100,101,93,105,115],
[111,110,111,0,113,104,97,106],
[115,120,110,98,0,111,103,111],
[116,113,118,107,100,0,107,110],
[102,112,106,114,108,104,0,116],
[115,99,96,105,100,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,56,56,136,59,117,86],
[44,0,44,54,126,61,47,74],
[155,167,0,106,92,107,167,42],
[155,157,105,0,99,97,155,49],
[75,85,119,112,0,17,85,129],
[152,150,104,114,194,0,117,144],
[94,164,44,56,126,94,0,46],
[125,137,169,162,82,67,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,84,87,102,96,96],
[116,0,125,115,111,120,113,100],
[104,86,0,101,101,105,98,92],
[127,96,110,0,111,111,108,103],
[124,100,110,100,0,114,103,95],
[109,91,106,100,97,0,95,94],
[115,98,113,103,108,116,0,116],
[115,111,119,108,116,117,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,100,95,99,101,100],
[113,0,108,106,98,100,109,106],
[112,103,0,107,94,100,103,107],
[111,105,104,0,107,101,113,112],
[116,113,117,104,0,104,107,111],
[112,111,111,110,107,0,106,104],
[110,102,108,98,104,105,0,106],
[111,105,104,99,100,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,113,109,116,112,111],
[105,0,94,103,113,97,109,119],
[119,117,0,111,110,103,116,116],
[98,108,100,0,111,108,108,102],
[102,98,101,100,0,95,99,92],
[95,114,108,103,116,0,98,99],
[99,102,95,103,112,113,0,112],
[100,92,95,109,119,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,137,126,134,110,127,100],
[76,0,95,143,100,96,67,97],
[74,116,0,163,113,106,69,120],
[85,68,48,0,94,94,65,95],
[77,111,98,117,0,74,97,65],
[101,115,105,117,137,0,95,74],
[84,144,142,146,114,116,0,101],
[111,114,91,116,146,137,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,119,102,96,114,98],
[110,0,97,113,85,104,122,95],
[122,114,0,125,104,128,117,106],
[92,98,86,0,101,108,112,110],
[109,126,107,110,0,110,120,105],
[115,107,83,103,101,0,118,105],
[97,89,94,99,91,93,0,105],
[113,116,105,101,106,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,121,101,112,119,112,106],
[110,0,98,118,118,125,101,105],
[90,113,0,92,106,103,109,104],
[110,93,119,0,114,122,113,112],
[99,93,105,97,0,110,87,101],
[92,86,108,89,101,0,82,91],
[99,110,102,98,124,129,0,99],
[105,106,107,99,110,120,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,110,105,120,92,99],
[119,0,113,118,116,122,105,117],
[117,98,0,113,113,124,113,117],
[101,93,98,0,112,102,96,104],
[106,95,98,99,0,111,107,109],
[91,89,87,109,100,0,84,100],
[119,106,98,115,104,127,0,104],
[112,94,94,107,102,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,115,98,104,110,96],
[95,0,94,113,93,103,99,99],
[100,117,0,112,109,101,100,101],
[96,98,99,0,86,99,95,100],
[113,118,102,125,0,119,112,123],
[107,108,110,112,92,0,104,102],
[101,112,111,116,99,107,0,101],
[115,112,110,111,88,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,121,98,114,114,108],
[99,0,102,95,91,96,103,102],
[93,109,0,110,99,105,104,106],
[90,116,101,0,88,100,99,98],
[113,120,112,123,0,99,117,98],
[97,115,106,111,112,0,122,112],
[97,108,107,112,94,89,0,91],
[103,109,105,113,113,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,113,116,103,111,110],
[96,0,109,91,100,89,109,107],
[99,102,0,101,94,95,106,104],
[98,120,110,0,120,106,112,109],
[95,111,117,91,0,97,95,110],
[108,122,116,105,114,0,105,106],
[100,102,105,99,116,106,0,107],
[101,104,107,102,101,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,128,102,111,111,110],
[117,0,116,121,116,105,109,111],
[96,95,0,103,111,105,96,118],
[83,90,108,0,101,98,98,114],
[109,95,100,110,0,115,113,119],
[100,106,106,113,96,0,113,120],
[100,102,115,113,98,98,0,111],
[101,100,93,97,92,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,89,103,93,91,82],
[108,0,104,113,109,107,108,104],
[106,107,0,59,101,95,95,98],
[122,98,152,0,115,129,115,125],
[108,102,110,96,0,91,117,81],
[118,104,116,82,120,0,119,111],
[120,103,116,96,94,92,0,95],
[129,107,113,86,130,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,103,79,98,110,78],
[107,0,119,109,90,98,117,89],
[101,92,0,102,71,97,122,112],
[108,102,109,0,91,102,108,100],
[132,121,140,120,0,122,117,105],
[113,113,114,109,89,0,109,88],
[101,94,89,103,94,102,0,89],
[133,122,99,111,106,123,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,98,123,111,111,93],
[106,0,93,97,132,100,103,99],
[103,118,0,103,126,115,113,110],
[113,114,108,0,129,112,100,103],
[88,79,85,82,0,102,96,90],
[100,111,96,99,109,0,107,103],
[100,108,98,111,115,104,0,96],
[118,112,101,108,121,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,121,119,97,118,109,100],
[87,0,88,94,81,73,66,69],
[90,123,0,113,90,118,95,92],
[92,117,98,0,93,115,87,105],
[114,130,121,118,0,102,101,109],
[93,138,93,96,109,0,92,80],
[102,145,116,124,110,119,0,117],
[111,142,119,106,102,131,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,97,119,142,99,144,142],
[92,0,189,166,97,144,189,144],
[114,22,0,74,97,47,144,97],
[92,45,137,0,90,47,92,137],
[69,114,114,121,0,47,92,137],
[112,67,164,164,164,0,97,164],
[67,22,67,119,119,114,0,119],
[69,67,114,74,74,47,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,84,104,92,109,114,91],
[101,0,78,92,94,102,94,99],
[127,133,0,115,90,106,116,114],
[107,119,96,0,108,106,113,95],
[119,117,121,103,0,120,110,103],
[102,109,105,105,91,0,104,86],
[97,117,95,98,101,107,0,98],
[120,112,97,116,108,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,104,98,108,109,97],
[98,0,99,96,82,92,94,98],
[97,112,0,105,107,92,99,84],
[107,115,106,0,98,104,107,88],
[113,129,104,113,0,113,103,112],
[103,119,119,107,98,0,105,95],
[102,117,112,104,108,106,0,99],
[114,113,127,123,99,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,104,109,98,104,106],
[108,0,96,102,103,94,109,100],
[110,115,0,106,107,96,109,101],
[107,109,105,0,108,107,121,96],
[102,108,104,103,0,107,109,104],
[113,117,115,104,104,0,112,116],
[107,102,102,90,102,99,0,91],
[105,111,110,115,107,95,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,104,97,118,103,121],
[96,0,128,134,100,123,122,108],
[104,83,0,113,95,103,112,107],
[107,77,98,0,94,105,109,106],
[114,111,116,117,0,113,105,120],
[93,88,108,106,98,0,104,100],
[108,89,99,102,106,107,0,100],
[90,103,104,105,91,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,117,108,107,111,100],
[110,0,82,105,95,107,90,109],
[98,129,0,110,93,118,99,117],
[94,106,101,0,102,122,94,120],
[103,116,118,109,0,120,108,117],
[104,104,93,89,91,0,111,107],
[100,121,112,117,103,100,0,125],
[111,102,94,91,94,104,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,107,98,113,102,114],
[103,0,100,118,114,113,95,114],
[102,111,0,104,106,108,105,112],
[104,93,107,0,104,101,97,111],
[113,97,105,107,0,120,117,120],
[98,98,103,110,91,0,104,114],
[109,116,106,114,94,107,0,110],
[97,97,99,100,91,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,124,106,109,105,112],
[99,0,102,106,98,97,105,96],
[96,109,0,107,112,98,97,103],
[87,105,104,0,113,97,100,108],
[105,113,99,98,0,101,109,104],
[102,114,113,114,110,0,107,100],
[106,106,114,111,102,104,0,99],
[99,115,108,103,107,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,92,99,116,106,104,103],
[84,0,92,113,100,93,90,108],
[119,119,0,119,127,95,110,113],
[112,98,92,0,112,88,105,96],
[95,111,84,99,0,88,100,90],
[105,118,116,123,123,0,116,117],
[107,121,101,106,111,95,0,113],
[108,103,98,115,121,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,107,116,122,108,105],
[98,0,111,112,114,113,115,105],
[103,100,0,112,104,108,103,106],
[104,99,99,0,104,103,101,98],
[95,97,107,107,0,109,100,99],
[89,98,103,108,102,0,92,99],
[103,96,108,110,111,119,0,114],
[106,106,105,113,112,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,109,94,107,104,107],
[112,0,100,95,105,115,107,101],
[111,111,0,106,102,116,109,115],
[102,116,105,0,108,122,109,104],
[117,106,109,103,0,126,114,121],
[104,96,95,89,85,0,88,108],
[107,104,102,102,97,123,0,122],
[104,110,96,107,90,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,113,108,105,106,100,105],
[122,0,114,100,106,121,105,118],
[98,97,0,91,99,104,95,100],
[103,111,120,0,111,109,107,126],
[106,105,112,100,0,107,98,120],
[105,90,107,102,104,0,100,113],
[111,106,116,104,113,111,0,112],
[106,93,111,85,91,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,112,97,113,124,114],
[104,0,114,104,81,111,124,86],
[85,97,0,109,89,111,96,115],
[99,107,102,0,85,102,94,84],
[114,130,122,126,0,128,128,104],
[98,100,100,109,83,0,92,82],
[87,87,115,117,83,119,0,120],
[97,125,96,127,107,129,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,107,129,120,96,111],
[101,0,108,87,106,102,89,95],
[103,103,0,93,117,95,97,103],
[104,124,118,0,134,116,107,119],
[82,105,94,77,0,93,82,91],
[91,109,116,95,118,0,101,103],
[115,122,114,104,129,110,0,119],
[100,116,108,92,120,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,126,108,115,124,105,107],
[87,0,110,106,99,119,92,107],
[85,101,0,100,106,123,75,94],
[103,105,111,0,121,113,113,111],
[96,112,105,90,0,102,94,105],
[87,92,88,98,109,0,102,92],
[106,119,136,98,117,109,0,125],
[104,104,117,100,106,119,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,114,87,111,92,112],
[121,0,104,123,117,123,106,118],
[115,107,0,130,129,133,99,105],
[97,88,81,0,90,101,102,97],
[124,94,82,121,0,121,105,91],
[100,88,78,110,90,0,95,87],
[119,105,112,109,106,116,0,124],
[99,93,106,114,120,124,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,99,119,122,97,119,124],
[81,0,90,95,111,99,89,104],
[112,121,0,98,126,123,101,124],
[92,116,113,0,122,113,114,120],
[89,100,85,89,0,90,98,108],
[114,112,88,98,121,0,107,116],
[92,122,110,97,113,104,0,116],
[87,107,87,91,103,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,113,98,110,108,111],
[102,0,106,97,107,100,96,107],
[104,105,0,97,98,107,95,104],
[98,114,114,0,101,102,105,113],
[113,104,113,110,0,115,104,124],
[101,111,104,109,96,0,109,119],
[103,115,116,106,107,102,0,118],
[100,104,107,98,87,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,130,103,116,107,105,95],
[102,0,114,81,88,93,115,89],
[81,97,0,91,109,90,97,77],
[108,130,120,0,109,103,106,109],
[95,123,102,102,0,94,94,91],
[104,118,121,108,117,0,92,106],
[106,96,114,105,117,119,0,106],
[116,122,134,102,120,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,63,68,46,80,65,116],
[134,0,115,124,91,124,105,153],
[148,96,0,85,55,106,102,129],
[143,87,126,0,114,159,135,168],
[165,120,156,97,0,148,151,159],
[131,87,105,52,63,0,110,118],
[146,106,109,76,60,101,0,150],
[95,58,82,43,52,93,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,99,104,95,118,100],
[106,0,96,101,101,102,114,99],
[113,115,0,110,105,112,123,117],
[112,110,101,0,116,109,119,116],
[107,110,106,95,0,105,120,110],
[116,109,99,102,106,0,119,103],
[93,97,88,92,91,92,0,96],
[111,112,94,95,101,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,111,102,94,117,104],
[108,0,106,114,103,93,114,104],
[115,105,0,113,111,101,120,106],
[100,97,98,0,83,97,95,95],
[109,108,100,128,0,92,116,93],
[117,118,110,114,119,0,123,105],
[94,97,91,116,95,88,0,90],
[107,107,105,116,118,106,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,103,115,116,109,116],
[96,0,104,106,104,107,106,110],
[102,107,0,97,100,109,108,114],
[108,105,114,0,101,112,115,118],
[96,107,111,110,0,105,111,116],
[95,104,102,99,106,0,96,111],
[102,105,103,96,100,115,0,106],
[95,101,97,93,95,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,123,109,107,123,101,101],
[86,0,105,94,101,115,89,97],
[88,106,0,103,90,108,101,85],
[102,117,108,0,101,121,111,96],
[104,110,121,110,0,128,111,88],
[88,96,103,90,83,0,86,83],
[110,122,110,100,100,125,0,107],
[110,114,126,115,123,128,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,79,101,53,108,70,90],
[110,0,78,77,62,99,79,82],
[132,133,0,138,135,91,107,104],
[110,134,73,0,120,104,87,96],
[158,149,76,91,0,120,104,111],
[103,112,120,107,91,0,82,97],
[141,132,104,124,107,129,0,142],
[121,129,107,115,100,114,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,86,110,125,116,138,121],
[104,0,116,110,105,95,130,107],
[125,95,0,105,109,116,121,91],
[101,101,106,0,96,92,124,105],
[86,106,102,115,0,118,127,93],
[95,116,95,119,93,0,138,120],
[73,81,90,87,84,73,0,75],
[90,104,120,106,118,91,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,92,94,92,110,96,119],
[84,0,77,60,94,103,66,94],
[119,134,0,107,111,113,93,107],
[117,151,104,0,111,115,115,125],
[119,117,100,100,0,126,103,109],
[101,108,98,96,85,0,99,107],
[115,145,118,96,108,112,0,117],
[92,117,104,86,102,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,115,123,103,106,109],
[108,0,104,122,125,108,108,103],
[118,107,0,113,135,103,103,113],
[96,89,98,0,113,105,98,101],
[88,86,76,98,0,90,100,103],
[108,103,108,106,121,0,101,109],
[105,103,108,113,111,110,0,99],
[102,108,98,110,108,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,87,140,95,98,80,128],
[83,0,106,103,74,109,111,100],
[124,105,0,99,100,74,76,131],
[71,108,112,0,68,134,69,145],
[116,137,111,143,0,112,93,138],
[113,102,137,77,99,0,97,144],
[131,100,135,142,118,114,0,132],
[83,111,80,66,73,67,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,99,104,102,104,107],
[108,0,95,97,101,96,104,92],
[109,116,0,109,106,102,116,113],
[112,114,102,0,111,108,113,107],
[107,110,105,100,0,109,103,104],
[109,115,109,103,102,0,109,107],
[107,107,95,98,108,102,0,99],
[104,119,98,104,107,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,101,103,107,105,99],
[109,0,102,100,111,99,102,102],
[105,109,0,96,96,104,106,101],
[110,111,115,0,104,115,109,94],
[108,100,115,107,0,108,108,109],
[104,112,107,96,103,0,106,97],
[106,109,105,102,103,105,0,96],
[112,109,110,117,102,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,121,100,112,119,140,161],
[91,0,103,98,100,77,118,116],
[90,108,0,88,89,113,133,127],
[111,113,123,0,100,99,116,107],
[99,111,122,111,0,92,116,133],
[92,134,98,112,119,0,130,152],
[71,93,78,95,95,81,0,99],
[50,95,84,104,78,59,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,104,97,96,102,100],
[103,0,99,102,107,103,101,97],
[111,112,0,113,107,109,110,97],
[107,109,98,0,101,105,105,104],
[114,104,104,110,0,111,107,104],
[115,108,102,106,100,0,107,113],
[109,110,101,106,104,104,0,96],
[111,114,114,107,107,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,122,116,103,96,108,111],
[109,0,117,107,105,120,90,119],
[89,94,0,110,115,94,78,130],
[95,104,101,0,113,103,94,108],
[108,106,96,98,0,104,99,113],
[115,91,117,108,107,0,119,123],
[103,121,133,117,112,92,0,123],
[100,92,81,103,98,88,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,119,135,149,76,160,153],
[68,0,58,103,88,86,120,97],
[92,153,0,106,121,116,168,103],
[76,108,105,0,101,82,127,94],
[62,123,90,110,0,81,143,90],
[135,125,95,129,130,0,131,129],
[51,91,43,84,68,80,0,66],
[58,114,108,117,121,82,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,82,96,98,110,93],
[107,0,101,108,120,98,98,96],
[117,110,0,105,103,111,108,94],
[129,103,106,0,107,113,105,100],
[115,91,108,104,0,115,101,102],
[113,113,100,98,96,0,121,111],
[101,113,103,106,110,90,0,98],
[118,115,117,111,109,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,105,104,95,96,97],
[116,0,107,103,112,101,103,107],
[121,104,0,96,107,103,110,116],
[106,108,115,0,124,107,100,111],
[107,99,104,87,0,106,109,101],
[116,110,108,104,105,0,124,113],
[115,108,101,111,102,87,0,116],
[114,104,95,100,110,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,62,88,109,82,132,86],
[110,0,74,91,117,108,148,122],
[149,137,0,83,141,127,135,126],
[123,120,128,0,111,110,125,97],
[102,94,70,100,0,92,122,111],
[129,103,84,101,119,0,145,126],
[79,63,76,86,89,66,0,101],
[125,89,85,114,100,85,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,104,127,130,101,106,100],
[83,0,99,122,103,77,93,90],
[107,112,0,116,129,105,106,100],
[84,89,95,0,104,80,82,64],
[81,108,82,107,0,94,108,67],
[110,134,106,131,117,0,102,108],
[105,118,105,129,103,109,0,82],
[111,121,111,147,144,103,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,98,109,104,105,104],
[106,0,108,104,100,110,104,109],
[106,103,0,96,97,99,86,97],
[113,107,115,0,105,110,111,117],
[102,111,114,106,0,102,106,108],
[107,101,112,101,109,0,103,100],
[106,107,125,100,105,108,0,101],
[107,102,114,94,103,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,85,107,126,96,96,105],
[112,0,114,116,119,117,107,100],
[126,97,0,116,138,110,110,117],
[104,95,95,0,127,119,111,93],
[85,92,73,84,0,92,75,77],
[115,94,101,92,119,0,103,99],
[115,104,101,100,136,108,0,94],
[106,111,94,118,134,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,108,146,119,96,100,107],
[122,0,100,131,133,107,107,123],
[103,111,0,149,138,126,99,119],
[65,80,62,0,109,106,119,94],
[92,78,73,102,0,66,82,73],
[115,104,85,105,145,0,94,106],
[111,104,112,92,129,117,0,98],
[104,88,92,117,138,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,123,105,98,110,136,121],
[85,0,107,107,79,99,108,130],
[88,104,0,96,78,94,104,102],
[106,104,115,0,93,99,104,141],
[113,132,133,118,0,103,106,121],
[101,112,117,112,108,0,115,117],
[75,103,107,107,105,96,0,94],
[90,81,109,70,90,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,111,89,102,104,93],
[100,0,99,117,105,97,108,103],
[102,112,0,112,108,101,105,106],
[100,94,99,0,94,95,92,91],
[122,106,103,117,0,94,108,95],
[109,114,110,116,117,0,109,105],
[107,103,106,119,103,102,0,99],
[118,108,105,120,116,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,137,119,116,111,108],
[108,0,89,132,83,88,87,100],
[119,122,0,150,106,99,122,131],
[74,79,61,0,82,104,108,105],
[92,128,105,129,0,103,88,115],
[95,123,112,107,108,0,117,110],
[100,124,89,103,123,94,0,112],
[103,111,80,106,96,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,98,103,101,95,89],
[117,0,110,106,106,100,112,97],
[109,101,0,99,99,103,94,102],
[113,105,112,0,115,120,108,112],
[108,105,112,96,0,113,100,108],
[110,111,108,91,98,0,96,101],
[116,99,117,103,111,115,0,103],
[122,114,109,99,103,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,113,105,93,101,102],
[107,0,100,118,122,123,131,137],
[114,111,0,118,109,107,96,122],
[98,93,93,0,113,99,86,112],
[106,89,102,98,0,113,104,108],
[118,88,104,112,98,0,85,137],
[110,80,115,125,107,126,0,121],
[109,74,89,99,103,74,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,94,99,105,106,89],
[116,0,117,104,111,116,124,104],
[107,94,0,93,89,114,108,83],
[117,107,118,0,99,111,114,97],
[112,100,122,112,0,125,122,117],
[106,95,97,100,86,0,102,104],
[105,87,103,97,89,109,0,90],
[122,107,128,114,94,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,114,110,112,108,98],
[109,0,113,107,117,103,98,110],
[101,98,0,91,102,108,102,99],
[97,104,120,0,104,116,97,101],
[101,94,109,107,0,102,85,96],
[99,108,103,95,109,0,109,103],
[103,113,109,114,126,102,0,106],
[113,101,112,110,115,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,107,99,80,103,100],
[119,0,96,115,105,89,109,116],
[119,115,0,120,104,117,112,123],
[104,96,91,0,94,88,84,97],
[112,106,107,117,0,94,103,129],
[131,122,94,123,117,0,101,125],
[108,102,99,127,108,110,0,122],
[111,95,88,114,82,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,119,116,118,102,113],
[112,0,105,120,127,115,134,108],
[96,106,0,104,111,117,109,121],
[92,91,107,0,107,119,112,103],
[95,84,100,104,0,93,120,123],
[93,96,94,92,118,0,115,113],
[109,77,102,99,91,96,0,106],
[98,103,90,108,88,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,121,74,115,103,81,126],
[134,0,61,105,109,134,128,111],
[90,150,0,73,106,97,86,108],
[137,106,138,0,103,126,118,154],
[96,102,105,108,0,122,113,120],
[108,77,114,85,89,0,103,112],
[130,83,125,93,98,108,0,84],
[85,100,103,57,91,99,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,117,80,146,156,99],
[113,0,147,143,64,134,165,112],
[112,64,0,39,34,74,78,51],
[94,68,172,0,63,130,165,137],
[131,147,177,148,0,152,126,95],
[65,77,137,81,59,0,77,24],
[55,46,133,46,85,134,0,80],
[112,99,160,74,116,187,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,115,107,116,123,104],
[103,0,104,112,104,98,114,99],
[95,107,0,110,106,102,112,105],
[96,99,101,0,97,97,107,98],
[104,107,105,114,0,106,121,101],
[95,113,109,114,105,0,130,114],
[88,97,99,104,90,81,0,93],
[107,112,106,113,110,97,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,97,102,95,101,105],
[110,0,113,103,102,104,115,104],
[97,98,0,104,96,95,100,91],
[114,108,107,0,110,107,111,104],
[109,109,115,101,0,115,107,104],
[116,107,116,104,96,0,119,112],
[110,96,111,100,104,92,0,93],
[106,107,120,107,107,99,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,101,104,107,105,119],
[111,0,110,99,107,100,110,107],
[102,101,0,99,103,95,106,98],
[110,112,112,0,111,102,110,112],
[107,104,108,100,0,102,107,105],
[104,111,116,109,109,0,114,117],
[106,101,105,101,104,97,0,113],
[92,104,113,99,106,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,38,0,19,67,19,14],
[211,0,133,95,211,133,114,95],
[173,78,0,107,107,114,34,107],
[211,116,104,0,196,152,85,196],
[192,0,104,15,0,133,66,80],
[144,78,97,59,78,0,78,59],
[192,97,177,126,145,133,0,177],
[197,116,104,15,131,152,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,74,101,107,101,97,125],
[116,0,100,113,121,102,91,121],
[137,111,0,137,113,99,123,134],
[110,98,74,0,103,110,87,89],
[104,90,98,108,0,103,116,138],
[110,109,112,101,108,0,94,125],
[114,120,88,124,95,117,0,121],
[86,90,77,122,73,86,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,106,99,105,116,106],
[115,0,99,117,101,110,115,110],
[103,112,0,107,106,97,106,99],
[105,94,104,0,108,100,102,105],
[112,110,105,103,0,103,114,104],
[106,101,114,111,108,0,112,102],
[95,96,105,109,97,99,0,103],
[105,101,112,106,107,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,108,117,105,99,109],
[114,0,118,111,137,103,101,104],
[99,93,0,105,116,104,101,109],
[103,100,106,0,118,98,106,112],
[94,74,95,93,0,88,90,102],
[106,108,107,113,123,0,105,109],
[112,110,110,105,121,106,0,113],
[102,107,102,99,109,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,100,121,138,95,113,85],
[132,0,102,148,138,100,107,105],
[111,109,0,120,149,82,108,112],
[90,63,91,0,110,80,61,82],
[73,73,62,101,0,63,76,55],
[116,111,129,131,148,0,103,111],
[98,104,103,150,135,108,0,89],
[126,106,99,129,156,100,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,117,126,124,104,113],
[100,0,99,117,94,106,93,117],
[90,112,0,119,101,121,108,110],
[94,94,92,0,94,111,99,110],
[85,117,110,117,0,116,96,109],
[87,105,90,100,95,0,93,119],
[107,118,103,112,115,118,0,111],
[98,94,101,101,102,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,102,101,127,103,108,119],
[124,0,114,103,155,111,101,128],
[109,97,0,102,114,101,95,108],
[110,108,109,0,137,83,90,131],
[84,56,97,74,0,66,74,90],
[108,100,110,128,145,0,107,116],
[103,110,116,121,137,104,0,124],
[92,83,103,80,121,95,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,101,113,120,110,120],
[102,0,110,92,100,106,101,103],
[93,101,0,100,95,111,107,109],
[110,119,111,0,100,121,110,119],
[98,111,116,111,0,113,107,105],
[91,105,100,90,98,0,103,110],
[101,110,104,101,104,108,0,116],
[91,108,102,92,106,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,93,90,85,91,106],
[119,0,104,109,89,87,111,111],
[121,107,0,115,94,98,96,128],
[118,102,96,0,92,86,111,112],
[121,122,117,119,0,115,104,122],
[126,124,113,125,96,0,117,129],
[120,100,115,100,107,94,0,120],
[105,100,83,99,89,82,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,98,100,103,121,134],
[107,0,97,94,97,86,95,127],
[88,114,0,115,122,108,99,124],
[113,117,96,0,117,97,112,115],
[111,114,89,94,0,111,98,132],
[108,125,103,114,100,0,89,117],
[90,116,112,99,113,122,0,122],
[77,84,87,96,79,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,105,96,112,100,96],
[102,0,104,110,109,108,104,101],
[111,107,0,107,104,111,111,102],
[106,101,104,0,106,126,116,104],
[115,102,107,105,0,117,111,118],
[99,103,100,85,94,0,112,102],
[111,107,100,95,100,99,0,97],
[115,110,109,107,93,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,91,107,96,104,96],
[111,0,104,109,99,110,97,100],
[102,107,0,92,101,103,115,91],
[120,102,119,0,96,110,121,109],
[104,112,110,115,0,113,123,100],
[115,101,108,101,98,0,105,104],
[107,114,96,90,88,106,0,88],
[115,111,120,102,111,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,106,84,92,91,99],
[107,0,99,107,104,107,99,105],
[118,112,0,108,100,105,104,110],
[105,104,103,0,107,108,95,109],
[127,107,111,104,0,104,113,115],
[119,104,106,103,107,0,112,113],
[120,112,107,116,98,99,0,115],
[112,106,101,102,96,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,88,109,96,71,100],
[93,0,98,133,124,103,109,94],
[103,113,0,108,134,142,114,113],
[123,78,103,0,117,88,93,93],
[102,87,77,94,0,74,78,96],
[115,108,69,123,137,0,100,139],
[140,102,97,118,133,111,0,116],
[111,117,98,118,115,72,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,88,95,105,108,101,105],
[121,0,107,102,116,113,119,114],
[123,104,0,107,121,110,111,111],
[116,109,104,0,119,107,108,108],
[106,95,90,92,0,101,102,99],
[103,98,101,104,110,0,106,99],
[110,92,100,103,109,105,0,107],
[106,97,100,103,112,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,103,119,106,106,122],
[95,0,104,95,90,98,98,110],
[90,107,0,100,101,107,96,106],
[108,116,111,0,108,111,104,127],
[92,121,110,103,0,96,102,120],
[105,113,104,100,115,0,103,113],
[105,113,115,107,109,108,0,113],
[89,101,105,84,91,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,104,108,114,125,115],
[112,0,100,113,110,105,111,116],
[113,111,0,104,104,113,124,113],
[107,98,107,0,108,107,125,112],
[103,101,107,103,0,98,118,110],
[97,106,98,104,113,0,113,115],
[86,100,87,86,93,98,0,98],
[96,95,98,99,101,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,110,110,112,108,117],
[115,0,117,113,116,102,122,131],
[113,94,0,92,116,109,107,108],
[101,98,119,0,116,105,106,116],
[101,95,95,95,0,98,112,117],
[99,109,102,106,113,0,117,116],
[103,89,104,105,99,94,0,114],
[94,80,103,95,94,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,148,76,104,95,137],
[113,0,91,165,62,74,98,148],
[116,120,0,150,107,95,157,164],
[63,46,61,0,49,102,86,124],
[135,149,104,162,0,129,132,167],
[107,137,116,109,82,0,115,126],
[116,113,54,125,79,96,0,165],
[74,63,47,87,44,85,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,32,64,55,95,153,162],
[125,0,58,81,113,112,170,211],
[179,153,0,135,99,144,170,211],
[147,130,76,0,99,86,170,162],
[156,98,112,112,0,112,147,156],
[116,99,67,125,99,0,116,157],
[58,41,41,41,64,95,0,162],
[49,0,0,49,55,54,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,94,106,102,106,115,110],
[94,0,91,100,91,99,101,99],
[117,120,0,123,103,110,116,119],
[105,111,88,0,106,92,100,107],
[109,120,108,105,0,103,113,106],
[105,112,101,119,108,0,116,120],
[96,110,95,111,98,95,0,97],
[101,112,92,104,105,91,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,96,94,106,102,114],
[103,0,99,101,100,107,110,98],
[102,112,0,98,102,111,99,106],
[115,110,113,0,105,115,114,109],
[117,111,109,106,0,112,116,100],
[105,104,100,96,99,0,97,97],
[109,101,112,97,95,114,0,99],
[97,113,105,102,111,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,114,100,108,120,119],
[111,0,107,111,95,93,116,123],
[108,104,0,108,93,100,112,121],
[97,100,103,0,104,99,115,116],
[111,116,118,107,0,105,120,141],
[103,118,111,112,106,0,123,129],
[91,95,99,96,91,88,0,98],
[92,88,90,95,70,82,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,96,110,98,111,93],
[106,0,104,95,108,104,109,112],
[112,107,0,104,111,112,113,97],
[115,116,107,0,108,107,118,93],
[101,103,100,103,0,106,119,110],
[113,107,99,104,105,0,104,115],
[100,102,98,93,92,107,0,92],
[118,99,114,118,101,96,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,109,113,124,104,109,118],
[91,0,104,91,105,97,103,112],
[102,107,0,95,99,91,115,91],
[98,120,116,0,111,105,118,90],
[87,106,112,100,0,113,123,100],
[107,114,120,106,98,0,122,87],
[102,108,96,93,88,89,0,82],
[93,99,120,121,111,124,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,114,109,122,113,123,110],
[142,0,102,132,121,142,138,124],
[97,109,0,116,156,107,146,119],
[102,79,95,0,103,115,104,99],
[89,90,55,108,0,101,107,115],
[98,69,104,96,110,0,92,112],
[88,73,65,107,104,119,0,124],
[101,87,92,112,96,99,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,144,114,105,137,113,141],
[65,0,112,93,79,104,102,100],
[67,99,0,116,59,99,98,95],
[97,118,95,0,94,140,99,112],
[106,132,152,117,0,141,93,117],
[74,107,112,71,70,0,61,100],
[98,109,113,112,118,150,0,117],
[70,111,116,99,94,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,103,106,106,106,85],
[100,0,95,81,103,119,97,84],
[107,116,0,102,98,100,101,89],
[108,130,109,0,107,121,108,93],
[105,108,113,104,0,108,102,109],
[105,92,111,90,103,0,96,104],
[105,114,110,103,109,115,0,107],
[126,127,122,118,102,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,123,106,119,107,102],
[90,0,98,103,107,99,102,102],
[98,113,0,110,109,106,110,105],
[88,108,101,0,95,97,94,96],
[105,104,102,116,0,98,91,101],
[92,112,105,114,113,0,105,99],
[104,109,101,117,120,106,0,113],
[109,109,106,115,110,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,92,99,95,94,104],
[118,0,105,99,108,109,99,120],
[112,106,0,109,105,107,110,103],
[119,112,102,0,114,106,110,120],
[112,103,106,97,0,105,109,112],
[116,102,104,105,106,0,109,114],
[117,112,101,101,102,102,0,109],
[107,91,108,91,99,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,116,104,112,107,113],
[97,0,107,97,92,104,96,107],
[104,104,0,119,101,117,108,100],
[95,114,92,0,112,111,112,119],
[107,119,110,99,0,118,111,118],
[99,107,94,100,93,0,96,108],
[104,115,103,99,100,115,0,107],
[98,104,111,92,93,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,118,130,108,93,106],
[100,0,103,100,115,106,103,104],
[98,108,0,98,109,96,96,103],
[93,111,113,0,111,111,102,100],
[81,96,102,100,0,101,108,99],
[103,105,115,100,110,0,105,105],
[118,108,115,109,103,106,0,105],
[105,107,108,111,112,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,119,103,100,112,115],
[102,0,122,138,110,103,133,145],
[98,89,0,116,78,119,114,139],
[92,73,95,0,80,95,105,105],
[108,101,133,131,0,108,121,131],
[111,108,92,116,103,0,123,136],
[99,78,97,106,90,88,0,111],
[96,66,72,106,80,75,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,116,127,117,121,104],
[96,0,117,128,131,107,116,102],
[101,94,0,105,103,110,115,92],
[95,83,106,0,109,104,105,96],
[84,80,108,102,0,107,104,84],
[94,104,101,107,104,0,115,108],
[90,95,96,106,107,96,0,86],
[107,109,119,115,127,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,141,121,105,124,82,102],
[123,0,134,143,120,140,112,101],
[70,77,0,93,118,89,79,97],
[90,68,118,0,121,98,88,87],
[106,91,93,90,0,106,97,106],
[87,71,122,113,105,0,78,91],
[129,99,132,123,114,133,0,109],
[109,110,114,124,105,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,128,144,127,98,118],
[101,0,117,124,119,109,107,92],
[90,94,0,110,108,119,113,107],
[83,87,101,0,95,104,99,94],
[67,92,103,116,0,102,107,92],
[84,102,92,107,109,0,92,76],
[113,104,98,112,104,119,0,109],
[93,119,104,117,119,135,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,108,123,126,102,118,121],
[85,0,89,108,98,105,95,93],
[103,122,0,119,106,106,106,120],
[88,103,92,0,82,97,98,97],
[85,113,105,129,0,99,113,107],
[109,106,105,114,112,0,114,115],
[93,116,105,113,98,97,0,109],
[90,118,91,114,104,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,118,101,118,103,112],
[94,0,102,111,103,88,102,111],
[104,109,0,112,101,116,106,105],
[93,100,99,0,91,92,89,98],
[110,108,110,120,0,106,105,117],
[93,123,95,119,105,0,96,118],
[108,109,105,122,106,115,0,105],
[99,100,106,113,94,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,106,104,100,103,101],
[105,0,102,120,108,112,102,101],
[118,109,0,120,102,118,109,115],
[105,91,91,0,100,93,85,88],
[107,103,109,111,0,99,99,102],
[111,99,93,118,112,0,104,111],
[108,109,102,126,112,107,0,110],
[110,110,96,123,109,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,5,174,173,174,173,173],
[123,0,123,86,169,169,206,86],
[206,88,0,169,169,174,168,168],
[37,125,42,0,88,173,120,88],
[38,42,42,123,0,211,205,127],
[37,42,37,38,0,0,120,0],
[38,5,43,91,6,91,0,5],
[38,125,43,123,84,211,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,102,103,99,101,105],
[100,0,103,96,102,104,94,94],
[105,108,0,98,99,99,103,110],
[109,115,113,0,108,100,108,103],
[108,109,112,103,0,102,100,107],
[112,107,112,111,109,0,104,105],
[110,117,108,103,111,107,0,115],
[106,117,101,108,104,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,114,110,108,105,103],
[101,0,116,115,109,112,111,108],
[98,95,0,97,104,104,102,82],
[97,96,114,0,111,106,101,97],
[101,102,107,100,0,117,110,93],
[103,99,107,105,94,0,103,94],
[106,100,109,110,101,108,0,97],
[108,103,129,114,118,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,89,106,99,114,103],
[109,0,126,110,99,103,118,107],
[92,85,0,95,93,100,102,104],
[122,101,116,0,105,120,111,122],
[105,112,118,106,0,122,109,118],
[112,108,111,91,89,0,95,117],
[97,93,109,100,102,116,0,104],
[108,104,107,89,93,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,104,95,106,100,100],
[119,0,100,88,111,106,105,104],
[115,111,0,90,106,109,120,109],
[107,123,121,0,105,114,120,127],
[116,100,105,106,0,120,102,106],
[105,105,102,97,91,0,116,95],
[111,106,91,91,109,95,0,99],
[111,107,102,84,105,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,119,102,125,111,95],
[107,0,102,110,103,111,116,107],
[109,109,0,117,103,113,109,107],
[92,101,94,0,94,115,104,91],
[109,108,108,117,0,129,119,104],
[86,100,98,96,82,0,102,87],
[100,95,102,107,92,109,0,94],
[116,104,104,120,107,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,81,81,81,93,92,133],
[159,0,138,112,121,110,89,92],
[130,73,0,73,84,73,113,124],
[130,99,138,0,52,99,130,150],
[130,90,127,159,0,58,130,139],
[118,101,138,112,153,0,89,141],
[119,122,98,81,81,122,0,133],
[78,119,87,61,72,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,110,103,113,130,105],
[94,0,108,108,110,100,138,115],
[97,103,0,99,88,91,116,109],
[101,103,112,0,93,98,127,106],
[108,101,123,118,0,102,141,102],
[98,111,120,113,109,0,122,113],
[81,73,95,84,70,89,0,87],
[106,96,102,105,109,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,101,98,98,99,116],
[102,0,78,116,106,104,113,104],
[121,133,0,128,110,130,137,103],
[110,95,83,0,117,97,118,117],
[113,105,101,94,0,106,117,128],
[113,107,81,114,105,0,118,120],
[112,98,74,93,94,93,0,107],
[95,107,108,94,83,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,102,107,135,104,127],
[102,0,110,86,87,121,109,116],
[95,101,0,116,101,114,81,84],
[109,125,95,0,124,138,108,140],
[104,124,110,87,0,124,88,128],
[76,90,97,73,87,0,77,107],
[107,102,130,103,123,134,0,99],
[84,95,127,71,83,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,113,89,98,97,86],
[121,0,107,118,114,114,117,102],
[112,104,0,112,91,109,100,92],
[98,93,99,0,102,100,94,93],
[122,97,120,109,0,104,100,102],
[113,97,102,111,107,0,105,109],
[114,94,111,117,111,106,0,104],
[125,109,119,118,109,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,119,93,107,110,107],
[91,0,106,107,103,95,104,101],
[95,105,0,106,95,107,111,105],
[92,104,105,0,96,103,98,102],
[118,108,116,115,0,114,106,105],
[104,116,104,108,97,0,105,110],
[101,107,100,113,105,106,0,105],
[104,110,106,109,106,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,109,102,105,116,113],
[102,0,104,102,104,110,116,108],
[112,107,0,108,107,98,108,115],
[102,109,103,0,111,98,123,110],
[109,107,104,100,0,103,126,117],
[106,101,113,113,108,0,116,115],
[95,95,103,88,85,95,0,108],
[98,103,96,101,94,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,118,116,109,104,112],
[104,0,112,115,121,108,101,114],
[105,99,0,108,120,97,96,112],
[93,96,103,0,116,96,97,104],
[95,90,91,95,0,100,84,97],
[102,103,114,115,111,0,110,109],
[107,110,115,114,127,101,0,118],
[99,97,99,107,114,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,106,114,105,101,107],
[103,0,112,106,96,116,111,99],
[105,99,0,109,94,111,118,99],
[105,105,102,0,103,113,106,128],
[97,115,117,108,0,97,105,120],
[106,95,100,98,114,0,120,111],
[110,100,93,105,106,91,0,108],
[104,112,112,83,91,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,90,104,113,110,111],
[111,0,110,107,98,120,117,110],
[103,101,0,100,98,117,105,109],
[121,104,111,0,108,112,118,100],
[107,113,113,103,0,111,123,107],
[98,91,94,99,100,0,105,104],
[101,94,106,93,88,106,0,91],
[100,101,102,111,104,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,107,99,95,105,103],
[114,0,90,99,109,97,93,99],
[103,121,0,120,114,98,107,106],
[104,112,91,0,111,109,112,105],
[112,102,97,100,0,109,106,95],
[116,114,113,102,102,0,113,113],
[106,118,104,99,105,98,0,111],
[108,112,105,106,116,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,127,117,104,108,130,108],
[91,0,120,103,100,98,106,110],
[84,91,0,100,85,80,92,81],
[94,108,111,0,94,100,97,110],
[107,111,126,117,0,97,116,114],
[103,113,131,111,114,0,109,109],
[81,105,119,114,95,102,0,95],
[103,101,130,101,97,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,86,96,114,101,98,95],
[112,0,113,98,104,120,121,108],
[125,98,0,109,120,129,115,109],
[115,113,102,0,117,110,121,100],
[97,107,91,94,0,90,103,96],
[110,91,82,101,121,0,112,99],
[113,90,96,90,108,99,0,94],
[116,103,102,111,115,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,127,97,123,101,119],
[89,0,75,74,79,73,94,77],
[102,136,0,106,97,98,109,102],
[84,137,105,0,96,70,92,95],
[114,132,114,115,0,118,98,90],
[88,138,113,141,93,0,106,125],
[110,117,102,119,113,105,0,94],
[92,134,109,116,121,86,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,120,106,96,106,109],
[107,0,110,127,107,101,96,116],
[105,101,0,116,105,107,101,107],
[91,84,95,0,93,102,96,105],
[105,104,106,118,0,112,97,113],
[115,110,104,109,99,0,101,97],
[105,115,110,115,114,110,0,112],
[102,95,104,106,98,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,95,105,103,105,104],
[115,0,110,112,110,113,105,116],
[117,101,0,112,106,109,101,113],
[116,99,99,0,112,111,108,114],
[106,101,105,99,0,102,98,104],
[108,98,102,100,109,0,102,115],
[106,106,110,103,113,109,0,107],
[107,95,98,97,107,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,80,150,166,61,76,75],
[81,0,88,143,104,81,43,83],
[131,123,0,105,154,88,46,52],
[61,68,106,0,111,18,69,63],
[45,107,57,100,0,32,53,65],
[150,130,123,193,179,0,96,131],
[135,168,165,142,158,115,0,75],
[136,128,159,148,146,80,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,83,90,104,95,91,101],
[98,0,97,86,85,85,81,95],
[128,114,0,95,100,99,95,114],
[121,125,116,0,100,106,103,106],
[107,126,111,111,0,101,101,106],
[116,126,112,105,110,0,106,107],
[120,130,116,108,110,105,0,114],
[110,116,97,105,105,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,151,126,75,88,110,94],
[131,0,120,108,80,77,70,98],
[60,91,0,55,92,54,32,74],
[85,103,156,0,98,45,75,103],
[136,131,119,113,0,87,93,121],
[123,134,157,166,124,0,95,163],
[101,141,179,136,118,116,0,150],
[117,113,137,108,90,48,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,106,140,135,154,139],
[105,0,120,124,141,132,139,116],
[108,91,0,97,118,128,121,131],
[105,87,114,0,150,121,129,138],
[71,70,93,61,0,62,88,76],
[76,79,83,90,149,0,119,83],
[57,72,90,82,123,92,0,110],
[72,95,80,73,135,128,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,105,107,111,120,102],
[115,0,132,113,103,134,108,133],
[101,79,0,67,81,91,67,122],
[106,98,144,0,110,120,82,142],
[104,108,130,101,0,113,114,146],
[100,77,120,91,98,0,83,139],
[91,103,144,129,97,128,0,142],
[109,78,89,69,65,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,97,111,108,105,116],
[107,0,116,102,113,109,104,115],
[108,95,0,106,110,101,103,114],
[114,109,105,0,117,101,109,112],
[100,98,101,94,0,102,92,101],
[103,102,110,110,109,0,110,107],
[106,107,108,102,119,101,0,111],
[95,96,97,99,110,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,107,109,70,95,54,92],
[133,0,109,84,92,70,98,113],
[104,102,0,77,63,91,80,89],
[102,127,134,0,108,116,38,59],
[141,119,148,103,0,111,58,120],
[116,141,120,95,100,0,36,115],
[157,113,131,173,153,175,0,104],
[119,98,122,152,91,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,102,107,109,116,116,118],
[86,0,88,88,89,101,101,100],
[109,123,0,94,111,108,106,106],
[104,123,117,0,104,110,120,112],
[102,122,100,107,0,125,117,99],
[95,110,103,101,86,0,102,108],
[95,110,105,91,94,109,0,104],
[93,111,105,99,112,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,127,140,116,103,110,129],
[86,0,108,107,105,108,114,99],
[84,103,0,103,117,95,92,108],
[71,104,108,0,109,86,101,111],
[95,106,94,102,0,89,105,105],
[108,103,116,125,122,0,111,128],
[101,97,119,110,106,100,0,116],
[82,112,103,100,106,83,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,120,96,117,123,106],
[92,0,114,109,95,120,120,103],
[103,97,0,110,97,106,113,102],
[91,102,101,0,91,118,114,97],
[115,116,114,120,0,115,131,104],
[94,91,105,93,96,0,112,86],
[88,91,98,97,80,99,0,88],
[105,108,109,114,107,125,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,115,107,111,112,99],
[113,0,121,119,95,139,119,122],
[106,90,0,112,102,128,108,110],
[96,92,99,0,101,99,96,83],
[104,116,109,110,0,116,87,101],
[100,72,83,112,95,0,96,90],
[99,92,103,115,124,115,0,107],
[112,89,101,128,110,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,94,104,105,103,104],
[107,0,94,101,110,110,109,99],
[119,117,0,94,110,116,116,108],
[117,110,117,0,107,105,114,110],
[107,101,101,104,0,108,111,109],
[106,101,95,106,103,0,102,103],
[108,102,95,97,100,109,0,99],
[107,112,103,101,102,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,96,129,162,106,132,155],
[148,0,76,105,161,72,112,143],
[115,135,0,128,164,136,102,161],
[82,106,83,0,171,136,119,101],
[49,50,47,40,0,48,34,71],
[105,139,75,75,163,0,107,94],
[79,99,109,92,177,104,0,92],
[56,68,50,110,140,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,111,100,95,110,103],
[106,0,108,115,104,106,111,111],
[102,103,0,91,101,96,112,104],
[100,96,120,0,101,94,90,106],
[111,107,110,110,0,98,119,115],
[116,105,115,117,113,0,113,107],
[101,100,99,121,92,98,0,104],
[108,100,107,105,96,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,116,100,83,79,80],
[120,0,82,136,134,114,117,116],
[111,129,0,133,116,112,117,105],
[95,75,78,0,116,81,76,99],
[111,77,95,95,0,88,113,93],
[128,97,99,130,123,0,112,98],
[132,94,94,135,98,99,0,88],
[131,95,106,112,118,113,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,108,98,108,95,96],
[105,0,106,109,96,100,94,84],
[108,105,0,107,97,108,107,105],
[103,102,104,0,95,105,107,95],
[113,115,114,116,0,122,108,103],
[103,111,103,106,89,0,104,106],
[116,117,104,104,103,107,0,92],
[115,127,106,116,108,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,98,113,119,115,134],
[98,0,101,96,121,110,105,108],
[95,110,0,104,121,109,105,122],
[113,115,107,0,117,104,106,114],
[98,90,90,94,0,99,81,102],
[92,101,102,107,112,0,89,112],
[96,106,106,105,130,122,0,119],
[77,103,89,97,109,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,100,107,113,106,109],
[106,0,117,103,106,114,98,112],
[106,94,0,98,100,102,102,101],
[111,108,113,0,112,117,96,107],
[104,105,111,99,0,110,95,108],
[98,97,109,94,101,0,92,95],
[105,113,109,115,116,119,0,117],
[102,99,110,104,103,116,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,108,101,114,107,109],
[107,0,113,103,101,113,107,107],
[112,98,0,115,115,115,119,117],
[103,108,96,0,106,106,109,97],
[110,110,96,105,0,113,111,100],
[97,98,96,105,98,0,108,97],
[104,104,92,102,100,103,0,109],
[102,104,94,114,111,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,98,95,106,102,98],
[114,0,109,99,102,113,101,101],
[111,102,0,101,101,111,98,99],
[113,112,110,0,110,113,116,104],
[116,109,110,101,0,119,111,104],
[105,98,100,98,92,0,106,97],
[109,110,113,95,100,105,0,106],
[113,110,112,107,107,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,112,107,113,120,134],
[107,0,107,103,79,119,121,128],
[104,104,0,103,77,92,113,108],
[99,108,108,0,92,101,117,133],
[104,132,134,119,0,104,136,148],
[98,92,119,110,107,0,114,111],
[91,90,98,94,75,97,0,124],
[77,83,103,78,63,100,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,114,124,97,91,118],
[97,0,97,134,126,102,95,103],
[103,114,0,121,107,76,104,107],
[97,77,90,0,95,74,78,86],
[87,85,104,116,0,84,87,91],
[114,109,135,137,127,0,95,105],
[120,116,107,133,124,116,0,103],
[93,108,104,125,120,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,108,140,124,108,102],
[102,0,102,98,148,132,132,107],
[106,109,0,104,134,93,111,87],
[103,113,107,0,119,129,127,104],
[71,63,77,92,0,98,81,88],
[87,79,118,82,113,0,100,107],
[103,79,100,84,130,111,0,110],
[109,104,124,107,123,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,129,113,116,137,126,110],
[114,0,123,119,127,122,133,96],
[82,88,0,110,102,85,105,68],
[98,92,101,0,129,117,99,96],
[95,84,109,82,0,101,109,84],
[74,89,126,94,110,0,107,85],
[85,78,106,112,102,104,0,109],
[101,115,143,115,127,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,106,104,109,102,94],
[101,0,96,124,109,109,104,97],
[109,115,0,117,99,108,115,104],
[105,87,94,0,97,111,98,97],
[107,102,112,114,0,110,107,111],
[102,102,103,100,101,0,102,94],
[109,107,96,113,104,109,0,107],
[117,114,107,114,100,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,122,103,109,114,106],
[103,0,107,114,108,105,107,113],
[108,104,0,113,118,110,116,125],
[89,97,98,0,101,103,107,99],
[108,103,93,110,0,98,116,102],
[102,106,101,108,113,0,118,100],
[97,104,95,104,95,93,0,94],
[105,98,86,112,109,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,144,144,176,135,98,172],
[60,0,140,173,181,143,125,111],
[67,71,0,81,183,137,131,111],
[67,38,130,0,157,151,102,117],
[35,30,28,54,0,76,56,36],
[76,68,74,60,135,0,104,126],
[113,86,80,109,155,107,0,126],
[39,100,100,94,175,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,89,98,100,103,96,99],
[105,0,90,97,111,109,100,108],
[122,121,0,104,121,108,109,121],
[113,114,107,0,119,103,108,106],
[111,100,90,92,0,102,108,98],
[108,102,103,108,109,0,105,95],
[115,111,102,103,103,106,0,102],
[112,103,90,105,113,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,110,113,109,112,109],
[99,0,114,104,124,98,106,119],
[108,97,0,96,126,97,101,113],
[101,107,115,0,112,105,109,99],
[98,87,85,99,0,92,103,93],
[102,113,114,106,119,0,116,108],
[99,105,110,102,108,95,0,111],
[102,92,98,112,118,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,94,86,102,89,97],
[111,0,109,102,123,89,87,106],
[99,102,0,106,88,80,92,105],
[117,109,105,0,100,111,98,120],
[125,88,123,111,0,97,96,87],
[109,122,131,100,114,0,107,113],
[122,124,119,113,115,104,0,108],
[114,105,106,91,124,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,100,104,109,106,104],
[116,0,103,115,103,107,105,120],
[108,108,0,103,100,110,100,111],
[111,96,108,0,103,110,106,105],
[107,108,111,108,0,112,99,108],
[102,104,101,101,99,0,93,106],
[105,106,111,105,112,118,0,111],
[107,91,100,106,103,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,109,94,102,96,96],
[108,0,103,103,95,97,100,99],
[117,108,0,108,106,106,103,97],
[102,108,103,0,101,104,110,109],
[117,116,105,110,0,103,103,117],
[109,114,105,107,108,0,110,117],
[115,111,108,101,108,101,0,114],
[115,112,114,102,94,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,98,103,100,112,105],
[100,0,106,92,103,97,109,116],
[102,105,0,97,96,97,100,86],
[113,119,114,0,100,110,106,108],
[108,108,115,111,0,104,113,110],
[111,114,114,101,107,0,113,104],
[99,102,111,105,98,98,0,100],
[106,95,125,103,101,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,126,110,96,112,113],
[97,0,100,114,109,89,111,111],
[101,111,0,119,113,98,109,99],
[85,97,92,0,105,90,115,105],
[101,102,98,106,0,99,113,96],
[115,122,113,121,112,0,110,98],
[99,100,102,96,98,101,0,111],
[98,100,112,106,115,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,119,107,107,109,109,108],
[107,0,104,105,113,104,97,98],
[92,107,0,96,107,103,110,103],
[104,106,115,0,106,103,108,114],
[104,98,104,105,0,98,106,103],
[102,107,108,108,113,0,116,112],
[102,114,101,103,105,95,0,103],
[103,113,108,97,108,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,101,106,103,113,109],
[96,0,97,95,100,107,106,101],
[105,114,0,106,104,106,116,110],
[110,116,105,0,94,102,104,103],
[105,111,107,117,0,106,112,98],
[108,104,105,109,105,0,100,104],
[98,105,95,107,99,111,0,104],
[102,110,101,108,113,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,106,116,105,115,128],
[92,0,102,113,117,107,107,113],
[95,109,0,112,121,115,116,112],
[105,98,99,0,129,113,130,108],
[95,94,90,82,0,123,80,96],
[106,104,96,98,88,0,120,119],
[96,104,95,81,131,91,0,104],
[83,98,99,103,115,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,85,106,119,103,106],
[111,0,108,106,110,100,127,125],
[96,103,0,93,99,92,101,98],
[126,105,118,0,109,105,104,109],
[105,101,112,102,0,107,108,114],
[92,111,119,106,104,0,110,112],
[108,84,110,107,103,101,0,106],
[105,86,113,102,97,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,187,187,89,48,161,137],
[0,0,137,187,0,0,89,89],
[24,74,0,187,24,24,113,24],
[24,24,24,0,24,24,113,24],
[122,211,187,187,0,98,161,137],
[163,211,187,187,113,0,113,89],
[50,122,98,98,50,98,0,48],
[74,122,187,187,74,122,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,100,95,100,91,94],
[103,0,118,104,102,102,103,117],
[103,93,0,93,89,100,94,89],
[111,107,118,0,96,112,110,102],
[116,109,122,115,0,106,114,100],
[111,109,111,99,105,0,113,115],
[120,108,117,101,97,98,0,95],
[117,94,122,109,111,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,114,119,94,114,115],
[107,0,115,107,103,111,109,126],
[100,96,0,107,104,104,117,99],
[97,104,104,0,104,102,83,100],
[92,108,107,107,0,105,96,99],
[117,100,107,109,106,0,108,107],
[97,102,94,128,115,103,0,106],
[96,85,112,111,112,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,96,114,108,108,110],
[92,0,101,97,112,83,101,101],
[116,110,0,121,132,119,101,112],
[115,114,90,0,114,102,105,107],
[97,99,79,97,0,86,94,100],
[103,128,92,109,125,0,103,121],
[103,110,110,106,117,108,0,114],
[101,110,99,104,111,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,118,105,112,107,118],
[100,0,110,92,112,108,97,114],
[106,101,0,104,95,111,97,112],
[93,119,107,0,112,110,103,112],
[106,99,116,99,0,96,113,108],
[99,103,100,101,115,0,103,115],
[104,114,114,108,98,108,0,111],
[93,97,99,99,103,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,114,103,111,121,108],
[94,0,100,101,91,98,110,106],
[101,111,0,105,92,107,115,101],
[97,110,106,0,97,99,111,106],
[108,120,119,114,0,109,122,105],
[100,113,104,112,102,0,117,107],
[90,101,96,100,89,94,0,98],
[103,105,110,105,106,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,109,112,119,106,112],
[108,0,102,101,99,117,105,113],
[115,109,0,106,102,115,111,102],
[102,110,105,0,103,111,116,109],
[99,112,109,108,0,117,113,113],
[92,94,96,100,94,0,111,102],
[105,106,100,95,98,100,0,110],
[99,98,109,102,98,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,104,123,105,114,109],
[110,0,112,114,123,95,102,118],
[99,99,0,117,113,107,115,116],
[107,97,94,0,93,76,108,109],
[88,88,98,118,0,104,97,123],
[106,116,104,135,107,0,101,134],
[97,109,96,103,114,110,0,103],
[102,93,95,102,88,77,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,84,88,121,120,125,101],
[109,0,124,137,123,89,164,112],
[127,87,0,94,90,114,122,114],
[123,74,117,0,101,91,136,108],
[90,88,121,110,0,149,141,130],
[91,122,97,120,62,0,149,133],
[86,47,89,75,70,62,0,112],
[110,99,97,103,81,78,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,110,114,115,105,111],
[94,0,107,107,101,111,105,107],
[102,104,0,112,108,112,112,102],
[101,104,99,0,93,99,95,97],
[97,110,103,118,0,103,92,100],
[96,100,99,112,108,0,108,105],
[106,106,99,116,119,103,0,115],
[100,104,109,114,111,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,131,116,99,115,143,134],
[90,0,103,97,84,94,115,114],
[80,108,0,94,93,95,105,104],
[95,114,117,0,100,100,129,112],
[112,127,118,111,0,100,131,124],
[96,117,116,111,111,0,132,118],
[68,96,106,82,80,79,0,114],
[77,97,107,99,87,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,115,104,105,108,106],
[112,0,101,118,95,98,105,90],
[101,110,0,126,113,107,115,111],
[96,93,85,0,93,109,95,106],
[107,116,98,118,0,105,113,103],
[106,113,104,102,106,0,105,95],
[103,106,96,116,98,106,0,107],
[105,121,100,105,108,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,66,71,89,99,93,149],
[100,0,62,43,71,60,76,81],
[145,149,0,137,117,151,89,146],
[140,168,74,0,100,152,125,152],
[122,140,94,111,0,101,143,170],
[112,151,60,59,110,0,111,161],
[118,135,122,86,68,100,0,156],
[62,130,65,59,41,50,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,130,116,103,122,111],
[103,0,121,106,109,109,115,117],
[97,90,0,115,100,100,120,101],
[81,105,96,0,80,83,88,96],
[95,102,111,131,0,97,115,92],
[108,102,111,128,114,0,121,120],
[89,96,91,123,96,90,0,89],
[100,94,110,115,119,91,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,82,98,97,99,100,91],
[112,0,108,108,112,106,118,101],
[129,103,0,113,118,109,126,112],
[113,103,98,0,111,106,120,115],
[114,99,93,100,0,93,103,107],
[112,105,102,105,118,0,125,111],
[111,93,85,91,108,86,0,105],
[120,110,99,96,104,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,79,89,113,116,107],
[133,0,124,90,117,125,131,120],
[139,87,0,106,132,123,125,158],
[132,121,105,0,169,96,151,145],
[122,94,79,42,0,63,136,130],
[98,86,88,115,148,0,122,161],
[95,80,86,60,75,89,0,122],
[104,91,53,66,81,50,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,124,113,98,104,112],
[112,0,114,115,118,124,126,102],
[95,97,0,107,108,101,120,98],
[87,96,104,0,94,104,92,86],
[98,93,103,117,0,98,100,90],
[113,87,110,107,113,0,107,93],
[107,85,91,119,111,104,0,80],
[99,109,113,125,121,118,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,139,152,51,115,115,128],
[47,0,75,105,51,81,80,81],
[72,136,0,64,51,65,140,59],
[59,106,147,0,17,81,157,123],
[160,160,160,194,0,94,170,136],
[96,130,146,130,117,0,181,159],
[96,131,71,54,41,30,0,30],
[83,130,152,88,75,52,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,103,104,90,111,117],
[120,0,102,134,100,109,106,124],
[114,109,0,132,112,120,99,105],
[108,77,79,0,93,94,75,81],
[107,111,99,118,0,114,103,101],
[121,102,91,117,97,0,107,122],
[100,105,112,136,108,104,0,105],
[94,87,106,130,110,89,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,101,100,118,102,114],
[92,0,98,102,96,113,101,114],
[110,113,0,107,98,123,112,119],
[110,109,104,0,110,117,106,121],
[111,115,113,101,0,107,118,122],
[93,98,88,94,104,0,95,113],
[109,110,99,105,93,116,0,121],
[97,97,92,90,89,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,92,66,79,77,87,91],
[84,0,86,84,76,87,79,117],
[119,125,0,38,66,114,73,138],
[145,127,173,0,90,137,125,183],
[132,135,145,121,0,125,88,155],
[134,124,97,74,86,0,47,143],
[124,132,138,86,123,164,0,161],
[120,94,73,28,56,68,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,112,106,110,116,99],
[99,0,112,118,113,114,113,113],
[102,99,0,112,100,104,107,93],
[99,93,99,0,98,106,105,94],
[105,98,111,113,0,111,108,98],
[101,97,107,105,100,0,119,101],
[95,98,104,106,103,92,0,91],
[112,98,118,117,113,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,110,104,118,115,110],
[104,0,101,104,105,107,115,115],
[100,110,0,106,107,116,110,107],
[101,107,105,0,109,110,107,123],
[107,106,104,102,0,120,104,113],
[93,104,95,101,91,0,101,109],
[96,96,101,104,107,110,0,112],
[101,96,104,88,98,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,120,103,111,113,107],
[110,0,109,113,103,115,112,106],
[100,102,0,101,100,94,87,95],
[91,98,110,0,109,100,100,118],
[108,108,111,102,0,101,103,113],
[100,96,117,111,110,0,95,109],
[98,99,124,111,108,116,0,105],
[104,105,116,93,98,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,100,90,101,103,100],
[120,0,126,104,108,106,119,113],
[104,85,0,93,95,94,103,107],
[111,107,118,0,93,108,104,111],
[121,103,116,118,0,116,122,119],
[110,105,117,103,95,0,112,111],
[108,92,108,107,89,99,0,102],
[111,98,104,100,92,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,128,60,130,91,137,88],
[57,0,89,95,52,73,108,87],
[83,122,0,56,125,90,115,73],
[151,116,155,0,139,100,181,125],
[81,159,86,72,0,136,164,101],
[120,138,121,111,75,0,105,66],
[74,103,96,30,47,106,0,69],
[123,124,138,86,110,145,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,129,107,112,101,103],
[105,0,106,117,108,115,100,102],
[97,105,0,120,102,108,108,93],
[82,94,91,0,87,116,101,99],
[104,103,109,124,0,111,94,101],
[99,96,103,95,100,0,96,95],
[110,111,103,110,117,115,0,112],
[108,109,118,112,110,116,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,105,97,103,100,104],
[115,0,100,102,95,96,105,100],
[109,111,0,111,103,105,111,94],
[106,109,100,0,98,108,109,101],
[114,116,108,113,0,102,122,97],
[108,115,106,103,109,0,108,111],
[111,106,100,102,89,103,0,100],
[107,111,117,110,114,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,101,108,107,109,112],
[104,0,108,103,109,112,106,108],
[100,103,0,109,95,106,113,108],
[110,108,102,0,104,113,115,107],
[103,102,116,107,0,108,114,108],
[104,99,105,98,103,0,105,105],
[102,105,98,96,97,106,0,99],
[99,103,103,104,103,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,103,113,108,124,112],
[95,0,84,110,104,112,98,113],
[113,127,0,116,114,113,114,105],
[108,101,95,0,122,106,119,103],
[98,107,97,89,0,102,102,93],
[103,99,98,105,109,0,112,113],
[87,113,97,92,109,99,0,105],
[99,98,106,108,118,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,84,92,84,106,95,118],
[110,0,82,80,114,68,84,93],
[127,129,0,110,102,104,78,93],
[119,131,101,0,91,104,104,106],
[127,97,109,120,0,92,115,136],
[105,143,107,107,119,0,91,137],
[116,127,133,107,96,120,0,100],
[93,118,118,105,75,74,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,146,132,118,99,107,123],
[99,0,144,113,113,110,111,121],
[65,67,0,87,96,78,74,94],
[79,98,124,0,117,111,99,126],
[93,98,115,94,0,102,100,93],
[112,101,133,100,109,0,121,104],
[104,100,137,112,111,90,0,107],
[88,90,117,85,118,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,125,103,117,122,115,119],
[88,0,105,97,116,103,101,98],
[86,106,0,108,104,109,91,116],
[108,114,103,0,113,117,103,108],
[94,95,107,98,0,113,99,111],
[89,108,102,94,98,0,99,110],
[96,110,120,108,112,112,0,114],
[92,113,95,103,100,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,114,92,103,107,116],
[111,0,107,111,104,109,106,116],
[104,104,0,121,111,100,106,111],
[97,100,90,0,100,103,97,121],
[119,107,100,111,0,102,107,121],
[108,102,111,108,109,0,107,111],
[104,105,105,114,104,104,0,106],
[95,95,100,90,90,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,113,112,111,109,109],
[108,0,112,115,105,106,109,108],
[124,99,0,118,108,102,104,110],
[98,96,93,0,97,105,92,100],
[99,106,103,114,0,104,111,107],
[100,105,109,106,107,0,104,101],
[102,102,107,119,100,107,0,112],
[102,103,101,111,104,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,87,118,91,72,115],
[137,0,89,124,145,129,114,147],
[144,122,0,154,153,132,100,141],
[124,87,57,0,105,135,99,116],
[93,66,58,106,0,96,76,98],
[120,82,79,76,115,0,106,125],
[139,97,111,112,135,105,0,118],
[96,64,70,95,113,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,124,104,114,117,109],
[100,0,106,113,101,107,95,99],
[102,105,0,109,103,106,99,106],
[87,98,102,0,90,108,101,99],
[107,110,108,121,0,107,113,104],
[97,104,105,103,104,0,118,102],
[94,116,112,110,98,93,0,107],
[102,112,105,112,107,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,108,126,101,89,109],
[102,0,109,116,113,98,107,105],
[105,102,0,100,108,109,102,100],
[103,95,111,0,111,100,91,99],
[85,98,103,100,0,96,99,96],
[110,113,102,111,115,0,96,117],
[122,104,109,120,112,115,0,110],
[102,106,111,112,115,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,98,107,113,91,106],
[110,0,108,101,108,105,102,102],
[99,103,0,100,111,111,99,108],
[113,110,111,0,111,108,103,105],
[104,103,100,100,0,110,109,107],
[98,106,100,103,101,0,96,107],
[120,109,112,108,102,115,0,109],
[105,109,103,106,104,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,114,95,99,112,99,94],
[125,0,127,110,101,122,108,111],
[97,84,0,95,113,106,101,103],
[116,101,116,0,115,114,105,101],
[112,110,98,96,0,107,100,114],
[99,89,105,97,104,0,93,99],
[112,103,110,106,111,118,0,104],
[117,100,108,110,97,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,100,109,104,113,107],
[107,0,108,92,104,98,105,95],
[91,103,0,89,99,94,97,94],
[111,119,122,0,108,108,117,104],
[102,107,112,103,0,106,110,106],
[107,113,117,103,105,0,114,104],
[98,106,114,94,101,97,0,96],
[104,116,117,107,105,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,98,103,125,111,111],
[106,0,111,98,104,110,101,119],
[90,100,0,92,97,104,93,99],
[113,113,119,0,106,127,100,118],
[108,107,114,105,0,119,106,119],
[86,101,107,84,92,0,102,104],
[100,110,118,111,105,109,0,116],
[100,92,112,93,92,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,113,99,98,103,110],
[113,0,92,115,102,95,116,118],
[122,119,0,88,112,101,130,137],
[98,96,123,0,102,107,107,126],
[112,109,99,109,0,96,137,125],
[113,116,110,104,115,0,127,132],
[108,95,81,104,74,84,0,115],
[101,93,74,85,86,79,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,98,104,99,109,92],
[101,0,106,98,103,101,116,118],
[110,105,0,109,116,103,118,98],
[113,113,102,0,114,106,118,108],
[107,108,95,97,0,102,117,97],
[112,110,108,105,109,0,125,101],
[102,95,93,93,94,86,0,101],
[119,93,113,103,114,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,130,122,119,90,109,144],
[100,0,131,120,123,102,103,134],
[81,80,0,67,89,111,103,105],
[89,91,144,0,92,108,70,108],
[92,88,122,119,0,108,99,121],
[121,109,100,103,103,0,89,137],
[102,108,108,141,112,122,0,145],
[67,77,106,103,90,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,107,103,100,113,105],
[101,0,98,111,117,107,123,101],
[97,113,0,107,129,115,116,113],
[104,100,104,0,115,95,115,99],
[108,94,82,96,0,108,111,104],
[111,104,96,116,103,0,105,100],
[98,88,95,96,100,106,0,97],
[106,110,98,112,107,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,128,98,109,141,55,111],
[98,0,124,55,91,83,45,102],
[83,87,0,81,66,102,65,97],
[113,156,130,0,116,83,89,131],
[102,120,145,95,0,143,70,102],
[70,128,109,128,68,0,60,78],
[156,166,146,122,141,151,0,105],
[100,109,114,80,109,133,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,88,83,98,72,91,99],
[118,0,72,93,99,96,97,86],
[123,139,0,101,115,102,106,110],
[128,118,110,0,111,113,99,103],
[113,112,96,100,0,86,108,79],
[139,115,109,98,125,0,118,124],
[120,114,105,112,103,93,0,112],
[112,125,101,108,132,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,104,115,115,113,127,123],
[80,0,103,88,106,110,102,116],
[107,108,0,109,104,100,116,131],
[96,123,102,0,98,113,100,100],
[96,105,107,113,0,105,114,116],
[98,101,111,98,106,0,107,100],
[84,109,95,111,97,104,0,116],
[88,95,80,111,95,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,70,78,90,62,65,69],
[127,0,105,101,84,97,98,111],
[141,106,0,108,94,81,106,134],
[133,110,103,0,110,86,108,120],
[121,127,117,101,0,85,89,113],
[149,114,130,125,126,0,101,119],
[146,113,105,103,122,110,0,102],
[142,100,77,91,98,92,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,113,115,99,117,96,99],
[88,0,106,105,98,110,88,98],
[98,105,0,104,96,116,102,98],
[96,106,107,0,92,118,94,107],
[112,113,115,119,0,118,113,96],
[94,101,95,93,93,0,88,87],
[115,123,109,117,98,123,0,109],
[112,113,113,104,115,124,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,102,101,105,109,121],
[111,0,106,116,107,101,111,118],
[100,105,0,104,98,114,101,103],
[109,95,107,0,96,104,95,102],
[110,104,113,115,0,113,109,114],
[106,110,97,107,98,0,102,108],
[102,100,110,116,102,109,0,103],
[90,93,108,109,97,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,103,113,117,97,110],
[101,0,98,88,85,104,97,84],
[92,113,0,108,102,99,95,102],
[108,123,103,0,116,110,111,123],
[98,126,109,95,0,106,89,127],
[94,107,112,101,105,0,112,107],
[114,114,116,100,122,99,0,130],
[101,127,109,88,84,104,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,85,92,108,90,73,125],
[117,0,73,79,118,94,74,102],
[126,138,0,126,155,111,104,158],
[119,132,85,0,112,85,92,117],
[103,93,56,99,0,85,89,125],
[121,117,100,126,126,0,115,124],
[138,137,107,119,122,96,0,136],
[86,109,53,94,86,87,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,132,95,103,106,130,127],
[87,0,115,108,103,93,105,116],
[79,96,0,85,94,82,100,91],
[116,103,126,0,108,119,133,117],
[108,108,117,103,0,100,120,119],
[105,118,129,92,111,0,114,121],
[81,106,111,78,91,97,0,102],
[84,95,120,94,92,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,95,78,63,69,131,142],
[86,0,97,99,89,89,138,146],
[116,114,0,90,89,120,131,165],
[133,112,121,0,88,119,133,163],
[148,122,122,123,0,94,144,154],
[142,122,91,92,117,0,111,143],
[80,73,80,78,67,100,0,166],
[69,65,46,48,57,68,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,114,113,113,117,114],
[102,0,96,120,118,107,109,122],
[112,115,0,107,113,104,108,118],
[97,91,104,0,98,96,94,107],
[98,93,98,113,0,102,103,108],
[98,104,107,115,109,0,98,117],
[94,102,103,117,108,113,0,122],
[97,89,93,104,103,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,115,117,118,107,114],
[110,0,104,110,109,118,106,106],
[113,107,0,112,124,117,105,121],
[96,101,99,0,110,107,95,109],
[94,102,87,101,0,114,106,103],
[93,93,94,104,97,0,100,107],
[104,105,106,116,105,111,0,106],
[97,105,90,102,108,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,91,105,98,94,107],
[104,0,102,95,101,107,102,114],
[118,109,0,107,101,111,102,122],
[120,116,104,0,106,117,111,115],
[106,110,110,105,0,111,113,109],
[113,104,100,94,100,0,104,104],
[117,109,109,100,98,107,0,122],
[104,97,89,96,102,107,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,115,107,129,94,83],
[120,0,108,97,127,123,100,100],
[112,103,0,101,101,110,91,106],
[96,114,110,0,95,120,105,93],
[104,84,110,116,0,111,91,89],
[82,88,101,91,100,0,86,84],
[117,111,120,106,120,125,0,90],
[128,111,105,118,122,127,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,124,92,111,112,115],
[105,0,105,113,101,98,104,103],
[95,106,0,87,102,101,100,88],
[87,98,124,0,96,99,104,103],
[119,110,109,115,0,108,108,91],
[100,113,110,112,103,0,121,103],
[99,107,111,107,103,90,0,90],
[96,108,123,108,120,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,106,99,105,99,106],
[101,0,128,110,111,120,104,98],
[100,83,0,99,90,90,94,88],
[105,101,112,0,102,107,96,98],
[112,100,121,109,0,105,107,109],
[106,91,121,104,106,0,100,100],
[112,107,117,115,104,111,0,104],
[105,113,123,113,102,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,89,94,94,100,96],
[113,0,104,101,101,108,99,95],
[104,107,0,93,96,95,106,103],
[122,110,118,0,111,107,104,118],
[117,110,115,100,0,101,109,106],
[117,103,116,104,110,0,107,108],
[111,112,105,107,102,104,0,101],
[115,116,108,93,105,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,110,124,117,117,121],
[110,0,101,96,124,120,110,119],
[99,110,0,113,114,103,105,115],
[101,115,98,0,111,108,109,102],
[87,87,97,100,0,99,100,111],
[94,91,108,103,112,0,103,106],
[94,101,106,102,111,108,0,110],
[90,92,96,109,100,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,115,105,101,106,111],
[112,0,123,111,109,102,99,117],
[103,88,0,96,102,104,94,95],
[96,100,115,0,92,98,105,103],
[106,102,109,119,0,103,101,115],
[110,109,107,113,108,0,92,103],
[105,112,117,106,110,119,0,110],
[100,94,116,108,96,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,103,109,112,106,106],
[101,0,113,113,112,106,113,112],
[104,98,0,92,108,113,107,109],
[108,98,119,0,121,114,118,114],
[102,99,103,90,0,97,106,98],
[99,105,98,97,114,0,99,98],
[105,98,104,93,105,112,0,107],
[105,99,102,97,113,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,100,104,109,103,102],
[106,0,98,112,121,110,111,106],
[109,113,0,110,117,116,108,103],
[111,99,101,0,99,107,102,107],
[107,90,94,112,0,103,103,103],
[102,101,95,104,108,0,104,98],
[108,100,103,109,108,107,0,103],
[109,105,108,104,108,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,71,90,89,59,69,61],
[152,0,106,101,115,77,98,95],
[140,105,0,94,129,94,103,123],
[121,110,117,0,100,96,73,92],
[122,96,82,111,0,86,84,84],
[152,134,117,115,125,0,96,107],
[142,113,108,138,127,115,0,102],
[150,116,88,119,127,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,131,109,116,109,98],
[120,0,118,137,91,137,112,83],
[105,93,0,126,90,122,90,124],
[80,74,85,0,61,64,80,80],
[102,120,121,150,0,147,124,129],
[95,74,89,147,64,0,113,63],
[102,99,121,131,87,98,0,88],
[113,128,87,131,82,148,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,97,120,130,176,165,79],
[46,0,65,9,116,73,46,92],
[114,146,0,95,165,141,114,60],
[91,202,116,0,116,202,72,92],
[81,95,46,95,0,141,81,60],
[35,138,70,9,70,0,54,19],
[46,165,97,139,130,157,0,106],
[132,119,151,119,151,192,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,108,93,99,104,111],
[109,0,118,116,107,112,105,110],
[100,93,0,108,94,91,96,108],
[103,95,103,0,88,86,101,104],
[118,104,117,123,0,107,125,122],
[112,99,120,125,104,0,112,117],
[107,106,115,110,86,99,0,112],
[100,101,103,107,89,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,104,110,107,101,109],
[99,0,91,88,88,96,100,103],
[115,120,0,110,118,115,103,107],
[107,123,101,0,114,106,110,111],
[101,123,93,97,0,107,102,105],
[104,115,96,105,104,0,102,103],
[110,111,108,101,109,109,0,96],
[102,108,104,100,106,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,118,102,107,116,102],
[104,0,107,113,106,113,113,106],
[96,104,0,109,109,110,101,99],
[93,98,102,0,81,98,102,104],
[109,105,102,130,0,113,114,98],
[104,98,101,113,98,0,104,100],
[95,98,110,109,97,107,0,97],
[109,105,112,107,113,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,110,104,146,125,113,108],
[82,0,74,106,107,115,107,100],
[101,137,0,115,124,125,136,125],
[107,105,96,0,138,114,116,90],
[65,104,87,73,0,103,114,100],
[86,96,86,97,108,0,124,92],
[98,104,75,95,97,87,0,91],
[103,111,86,121,111,119,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,91,77,113,90,82],
[121,0,80,94,104,112,83,104],
[109,131,0,94,97,115,105,97],
[120,117,117,0,115,131,113,104],
[134,107,114,96,0,133,123,127],
[98,99,96,80,78,0,88,77],
[121,128,106,98,88,123,0,106],
[129,107,114,107,84,134,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,107,100,90,93,97],
[107,0,75,94,84,90,74,85],
[102,136,0,118,128,113,120,116],
[104,117,93,0,106,112,107,94],
[111,127,83,105,0,118,89,103],
[121,121,98,99,93,0,101,119],
[118,137,91,104,122,110,0,95],
[114,126,95,117,108,92,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,211,100,115,58,58,127],
[63,0,84,163,84,121,90,63],
[0,127,0,100,115,58,58,58],
[111,48,111,0,111,58,27,48],
[96,127,96,100,0,127,96,96],
[153,90,153,153,84,0,180,153],
[153,121,153,184,115,31,0,121],
[84,148,153,163,115,58,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,95,102,98,109,89],
[111,0,110,99,104,101,104,91],
[105,101,0,89,105,103,101,95],
[116,112,122,0,106,106,108,103],
[109,107,106,105,0,95,105,99],
[113,110,108,105,116,0,106,110],
[102,107,110,103,106,105,0,109],
[122,120,116,108,112,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,110,97,93,111,107],
[119,0,106,113,118,103,131,106],
[116,105,0,118,107,107,108,113],
[101,98,93,0,109,93,100,101],
[114,93,104,102,0,98,123,103],
[118,108,104,118,113,0,114,103],
[100,80,103,111,88,97,0,87],
[104,105,98,110,108,108,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,127,105,107,109,99],
[105,0,107,109,110,91,110,114],
[105,104,0,114,95,104,108,103],
[84,102,97,0,109,104,98,112],
[106,101,116,102,0,103,109,103],
[104,120,107,107,108,0,111,100],
[102,101,103,113,102,100,0,112],
[112,97,108,99,108,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,129,98,105,112,108],
[104,0,111,112,99,100,106,108],
[101,100,0,113,89,123,115,113],
[82,99,98,0,103,118,115,119],
[113,112,122,108,0,120,132,104],
[106,111,88,93,91,0,103,94],
[99,105,96,96,79,108,0,99],
[103,103,98,92,107,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,93,102,106,102,77],
[117,0,87,120,72,117,85,66],
[115,124,0,98,119,137,108,106],
[118,91,113,0,77,124,109,71],
[109,139,92,134,0,121,97,107],
[105,94,74,87,90,0,81,66],
[109,126,103,102,114,130,0,99],
[134,145,105,140,104,145,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,111,100,128,101,96],
[101,0,113,102,100,127,95,107],
[97,98,0,99,104,111,102,104],
[100,109,112,0,93,127,102,107],
[111,111,107,118,0,129,113,88],
[83,84,100,84,82,0,73,79],
[110,116,109,109,98,138,0,107],
[115,104,107,104,123,132,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,97,110,125,128,102,113],
[90,0,108,108,121,95,116,104],
[114,103,0,106,94,107,96,101],
[101,103,105,0,101,124,96,128],
[86,90,117,110,0,108,93,115],
[83,116,104,87,103,0,95,95],
[109,95,115,115,118,116,0,128],
[98,107,110,83,96,116,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,97,124,109,118,109,104],
[86,0,101,97,90,118,105,85],
[114,110,0,118,98,115,112,107],
[87,114,93,0,85,125,113,98],
[102,121,113,126,0,112,116,113],
[93,93,96,86,99,0,106,99],
[102,106,99,98,95,105,0,94],
[107,126,104,113,98,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,99,107,99,113,112,102],
[86,0,106,116,88,103,96,92],
[112,105,0,124,95,100,123,113],
[104,95,87,0,107,97,102,95],
[112,123,116,104,0,109,102,104],
[98,108,111,114,102,0,127,110],
[99,115,88,109,109,84,0,98],
[109,119,98,116,107,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,115,112,120,119,102,115],
[116,0,122,110,117,101,111,110],
[96,89,0,101,118,122,98,105],
[99,101,110,0,99,125,103,95],
[91,94,93,112,0,96,84,113],
[92,110,89,86,115,0,83,88],
[109,100,113,108,127,128,0,103],
[96,101,106,116,98,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,106,109,108,106,101],
[107,0,100,107,99,112,101,101],
[105,111,0,104,105,111,108,110],
[105,104,107,0,97,102,106,99],
[102,112,106,114,0,104,94,110],
[103,99,100,109,107,0,97,115],
[105,110,103,105,117,114,0,112],
[110,110,101,112,101,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,97,121,107,125,120],
[103,0,132,109,129,110,129,121],
[97,79,0,86,96,89,113,108],
[114,102,125,0,119,104,121,118],
[90,82,115,92,0,100,105,105],
[104,101,122,107,111,0,121,118],
[86,82,98,90,106,90,0,97],
[91,90,103,93,106,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,98,85,75,102,80],
[114,0,106,102,87,88,129,93],
[120,105,0,118,105,108,116,96],
[113,109,93,0,94,97,114,97],
[126,124,106,117,0,96,111,117],
[136,123,103,114,115,0,129,95],
[109,82,95,97,100,82,0,96],
[131,118,115,114,94,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,111,110,92,105,106],
[105,0,106,106,117,110,110,107],
[102,105,0,109,107,104,102,112],
[100,105,102,0,106,102,103,102],
[101,94,104,105,0,98,101,103],
[119,101,107,109,113,0,110,119],
[106,101,109,108,110,101,0,99],
[105,104,99,109,108,92,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,95,99,100,104,90],
[113,0,110,110,119,123,117,104],
[111,101,0,104,119,106,114,110],
[116,101,107,0,111,116,108,116],
[112,92,92,100,0,101,101,107],
[111,88,105,95,110,0,102,97],
[107,94,97,103,110,109,0,99],
[121,107,101,95,104,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,102,99,100,103,105,106],
[122,0,115,108,111,103,110,117],
[109,96,0,91,100,108,101,110],
[112,103,120,0,111,109,114,119],
[111,100,111,100,0,103,110,104],
[108,108,103,102,108,0,107,108],
[106,101,110,97,101,104,0,103],
[105,94,101,92,107,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,155,108,111,116,100],
[97,0,71,104,107,92,93,109],
[94,140,0,143,133,108,139,124],
[56,107,68,0,90,83,99,80],
[103,104,78,121,0,91,99,94],
[100,119,103,128,120,0,127,104],
[95,118,72,112,112,84,0,95],
[111,102,87,131,117,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,90,105,103,102,99,101],
[85,0,93,103,97,92,84,103],
[121,118,0,116,90,100,111,102],
[106,108,95,0,103,89,105,103],
[108,114,121,108,0,114,104,113],
[109,119,111,122,97,0,113,114],
[112,127,100,106,107,98,0,104],
[110,108,109,108,98,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,110,115,103,100,106],
[112,0,100,98,112,104,91,105],
[106,111,0,105,109,105,109,101],
[101,113,106,0,104,99,99,96],
[96,99,102,107,0,100,104,108],
[108,107,106,112,111,0,109,103],
[111,120,102,112,107,102,0,113],
[105,106,110,115,103,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,106,110,116,110,104],
[108,0,96,101,106,108,109,108],
[101,115,0,108,120,117,123,115],
[105,110,103,0,91,105,103,97],
[101,105,91,120,0,104,106,94],
[95,103,94,106,107,0,95,99],
[101,102,88,108,105,116,0,95],
[107,103,96,114,117,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,124,114,120,114,105],
[104,0,125,124,88,115,131,107],
[102,86,0,105,103,82,118,94],
[87,87,106,0,74,101,103,82],
[97,123,108,137,0,128,124,84],
[91,96,129,110,83,0,131,92],
[97,80,93,108,87,80,0,85],
[106,104,117,129,127,119,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,113,105,103,98,124],
[111,0,98,96,111,103,98,120],
[109,113,0,110,89,105,86,120],
[98,115,101,0,108,108,101,138],
[106,100,122,103,0,113,95,131],
[108,108,106,103,98,0,112,116],
[113,113,125,110,116,99,0,147],
[87,91,91,73,80,95,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,112,118,117,103,124],
[90,0,98,95,118,94,87,111],
[98,113,0,100,127,95,89,118],
[99,116,111,0,117,96,101,119],
[93,93,84,94,0,91,85,108],
[94,117,116,115,120,0,106,126],
[108,124,122,110,126,105,0,128],
[87,100,93,92,103,85,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,94,104,100,94,95,112],
[120,0,99,113,103,110,110,122],
[117,112,0,118,110,101,106,127],
[107,98,93,0,96,95,101,109],
[111,108,101,115,0,106,106,115],
[117,101,110,116,105,0,107,118],
[116,101,105,110,105,104,0,119],
[99,89,84,102,96,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,131,122,123,94,110],
[105,0,101,116,106,118,102,109],
[106,110,0,122,103,113,107,115],
[80,95,89,0,95,104,97,102],
[89,105,108,116,0,108,105,109],
[88,93,98,107,103,0,95,106],
[117,109,104,114,106,116,0,107],
[101,102,96,109,102,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,112,109,102,109,102],
[117,0,120,114,119,112,98,108],
[93,91,0,105,94,106,89,89],
[99,97,106,0,98,108,91,96],
[102,92,117,113,0,108,108,98],
[109,99,105,103,103,0,91,96],
[102,113,122,120,103,120,0,106],
[109,103,122,115,113,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,108,108,111,117,103],
[97,0,105,106,96,94,111,116],
[106,106,0,95,98,105,114,102],
[103,105,116,0,105,104,119,105],
[103,115,113,106,0,115,118,121],
[100,117,106,107,96,0,113,105],
[94,100,97,92,93,98,0,99],
[108,95,109,106,90,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,103,107,116,125,117],
[98,0,102,101,88,108,109,103],
[100,109,0,103,97,112,110,94],
[108,110,108,0,111,105,124,107],
[104,123,114,100,0,115,114,115],
[95,103,99,106,96,0,115,107],
[86,102,101,87,97,96,0,99],
[94,108,117,104,96,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,104,119,109,98,124],
[108,0,71,94,124,103,124,116],
[108,140,0,125,139,118,116,105],
[107,117,86,0,119,86,102,82],
[92,87,72,92,0,103,92,92],
[102,108,93,125,108,0,103,108],
[113,87,95,109,119,108,0,82],
[87,95,106,129,119,103,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,106,100,97,115,99],
[97,0,98,99,88,106,109,118],
[103,113,0,97,107,130,107,118],
[105,112,114,0,93,113,106,120],
[111,123,104,118,0,113,103,124],
[114,105,81,98,98,0,101,108],
[96,102,104,105,108,110,0,111],
[112,93,93,91,87,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,97,94,87,101,104,99],
[91,0,90,101,95,105,122,97],
[114,121,0,103,102,99,124,98],
[117,110,108,0,98,96,126,113],
[124,116,109,113,0,106,128,97],
[110,106,112,115,105,0,123,96],
[107,89,87,85,83,88,0,84],
[112,114,113,98,114,115,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,115,132,123,123,110],
[111,0,88,102,115,116,135,106],
[104,123,0,94,128,112,115,110],
[96,109,117,0,120,108,128,114],
[79,96,83,91,0,100,113,103],
[88,95,99,103,111,0,105,108],
[88,76,96,83,98,106,0,91],
[101,105,101,97,108,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,109,106,106,118,110],
[106,0,95,122,111,106,109,117],
[98,116,0,122,115,105,106,105],
[102,89,89,0,108,105,106,109],
[105,100,96,103,0,101,99,109],
[105,105,106,106,110,0,97,106],
[93,102,105,105,112,114,0,117],
[101,94,106,102,102,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,116,120,122,105,117],
[105,0,111,108,125,113,122,105],
[96,100,0,106,106,112,109,120],
[95,103,105,0,112,113,104,107],
[91,86,105,99,0,109,100,118],
[89,98,99,98,102,0,100,107],
[106,89,102,107,111,111,0,100],
[94,106,91,104,93,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,104,107,93,100,107],
[105,0,113,113,114,105,103,105],
[106,98,0,113,104,111,110,106],
[107,98,98,0,116,105,105,101],
[104,97,107,95,0,108,112,96],
[118,106,100,106,103,0,101,105],
[111,108,101,106,99,110,0,104],
[104,106,105,110,115,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,93,99,119,106,109],
[110,0,118,114,100,104,110,99],
[106,93,0,102,89,99,108,112],
[118,97,109,0,105,119,105,110],
[112,111,122,106,0,123,100,100],
[92,107,112,92,88,0,93,115],
[105,101,103,106,111,118,0,110],
[102,112,99,101,111,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,100,103,111,108,107],
[104,0,104,86,100,106,108,93],
[103,107,0,91,97,100,93,101],
[111,125,120,0,110,98,113,104],
[108,111,114,101,0,95,118,101],
[100,105,111,113,116,0,114,109],
[103,103,118,98,93,97,0,104],
[104,118,110,107,110,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,77,99,93,109,94],
[102,0,80,106,107,104,114,92],
[108,131,0,89,121,88,131,103],
[134,105,122,0,137,117,130,123],
[112,104,90,74,0,102,108,102],
[118,107,123,94,109,0,120,108],
[102,97,80,81,103,91,0,86],
[117,119,108,88,109,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,86,110,97,94,104,89],
[102,0,89,107,102,71,101,96],
[125,122,0,109,103,111,109,117],
[101,104,102,0,110,92,99,102],
[114,109,108,101,0,99,101,114],
[117,140,100,119,112,0,113,107],
[107,110,102,112,110,98,0,101],
[122,115,94,109,97,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,102,98,127,118,122,130],
[76,0,60,84,108,100,92,99],
[109,151,0,102,108,115,124,104],
[113,127,109,0,120,113,105,110],
[84,103,103,91,0,91,94,81],
[93,111,96,98,120,0,113,121],
[89,119,87,106,117,98,0,116],
[81,112,107,101,130,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,105,97,93,114,106],
[98,0,87,108,101,93,105,118],
[112,124,0,104,117,112,114,128],
[106,103,107,0,109,93,102,110],
[114,110,94,102,0,106,95,110],
[118,118,99,118,105,0,114,115],
[97,106,97,109,116,97,0,108],
[105,93,83,101,101,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,126,111,101,120,100,110],
[102,0,109,101,106,97,102,131],
[85,102,0,94,83,119,97,114],
[100,110,117,0,96,105,108,106],
[110,105,128,115,0,112,112,131],
[91,114,92,106,99,0,91,105],
[111,109,114,103,99,120,0,123],
[101,80,97,105,80,106,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,112,97,85,81,115],
[114,0,79,95,108,80,116,88],
[118,132,0,133,128,109,139,103],
[99,116,78,0,143,123,82,101],
[114,103,83,68,0,68,75,79],
[126,131,102,88,143,0,113,89],
[130,95,72,129,136,98,0,107],
[96,123,108,110,132,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,108,103,112,112,108],
[100,0,116,93,88,101,117,106],
[93,95,0,107,86,111,101,97],
[103,118,104,0,125,112,110,103],
[108,123,125,86,0,107,106,106],
[99,110,100,99,104,0,119,105],
[99,94,110,101,105,92,0,115],
[103,105,114,108,105,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,97,126,97,88,91],
[97,0,89,102,119,102,74,101],
[92,122,0,105,107,102,95,95],
[114,109,106,0,122,111,99,112],
[85,92,104,89,0,91,66,97],
[114,109,109,100,120,0,112,97],
[123,137,116,112,145,99,0,106],
[120,110,116,99,114,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,110,99,102,95,86],
[94,0,86,97,91,94,81,92],
[101,125,0,120,103,97,101,113],
[101,114,91,0,109,91,105,87],
[112,120,108,102,0,88,100,82],
[109,117,114,120,123,0,102,99],
[116,130,110,106,111,109,0,105],
[125,119,98,124,129,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,116,108,117,115,105],
[93,0,113,104,106,115,101,91],
[101,98,0,116,113,103,104,104],
[95,107,95,0,100,109,101,107],
[103,105,98,111,0,110,109,87],
[94,96,108,102,101,0,107,100],
[96,110,107,110,102,104,0,105],
[106,120,107,104,124,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,105,113,112,103,110],
[114,0,103,114,113,101,102,105],
[116,108,0,105,109,106,100,107],
[106,97,106,0,109,90,99,112],
[98,98,102,102,0,94,106,98],
[99,110,105,121,117,0,114,102],
[108,109,111,112,105,97,0,108],
[101,106,104,99,113,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,56,67,123,129,112],
[95,0,144,88,55,135,151,92],
[92,67,0,84,106,86,114,112],
[155,123,127,0,90,151,157,150],
[144,156,105,121,0,133,139,103],
[88,76,125,60,78,0,107,65],
[82,60,97,54,72,104,0,110],
[99,119,99,61,108,146,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,109,99,96,93,102],
[112,0,98,105,109,114,108,101],
[109,113,0,92,109,107,109,97],
[102,106,119,0,105,109,107,101],
[112,102,102,106,0,102,95,102],
[115,97,104,102,109,0,103,106],
[118,103,102,104,116,108,0,98],
[109,110,114,110,109,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,95,112,120,100,127],
[104,0,103,104,117,119,112,109],
[102,108,0,102,112,112,105,121],
[116,107,109,0,131,126,101,111],
[99,94,99,80,0,99,98,90],
[91,92,99,85,112,0,105,101],
[111,99,106,110,113,106,0,119],
[84,102,90,100,121,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,88,121,75,120,93],
[100,0,99,90,93,97,118,87],
[113,112,0,112,105,109,117,97],
[123,121,99,0,116,120,132,119],
[90,118,106,95,0,103,109,101],
[136,114,102,91,108,0,125,95],
[91,93,94,79,102,86,0,80],
[118,124,114,92,110,116,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,89,87,106,94,98,85],
[121,0,106,105,116,115,116,122],
[122,105,0,99,117,103,118,115],
[124,106,112,0,104,121,115,110],
[105,95,94,107,0,98,114,108],
[117,96,108,90,113,0,98,91],
[113,95,93,96,97,113,0,105],
[126,89,96,101,103,120,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,103,158,155,211,174,134],
[56,0,111,111,148,122,111,122],
[108,100,0,147,105,119,108,119],
[53,100,64,0,116,156,156,116],
[56,63,106,95,0,122,119,119],
[0,89,92,55,89,0,108,79],
[37,100,103,55,92,103,0,27],
[77,89,92,95,92,132,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,101,92,85,97,90],
[117,0,113,107,103,95,110,115],
[111,98,0,106,112,99,98,106],
[110,104,105,0,128,105,92,121],
[119,108,99,83,0,96,95,115],
[126,116,112,106,115,0,103,105],
[114,101,113,119,116,108,0,96],
[121,96,105,90,96,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,117,98,111,129,109],
[100,0,93,94,109,113,96,103],
[110,118,0,101,82,110,90,97],
[94,117,110,0,105,103,110,122],
[113,102,129,106,0,119,112,90],
[100,98,101,108,92,0,87,90],
[82,115,121,101,99,124,0,117],
[102,108,114,89,121,121,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,104,102,108,102,112],
[111,0,96,99,94,95,94,112],
[106,115,0,113,109,100,103,113],
[107,112,98,0,108,108,97,106],
[109,117,102,103,0,115,97,95],
[103,116,111,103,96,0,88,121],
[109,117,108,114,114,123,0,104],
[99,99,98,105,116,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,88,103,71,58,58],
[136,0,96,101,98,105,144,89],
[133,115,0,94,118,118,105,77],
[123,110,117,0,110,97,109,90],
[108,113,93,101,0,86,105,76],
[140,106,93,114,125,0,120,114],
[153,67,106,102,106,91,0,94],
[153,122,134,121,135,97,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,86,128,120,111,109],
[93,0,80,89,100,97,103,94],
[89,131,0,91,110,116,115,86],
[125,122,120,0,123,107,124,91],
[83,111,101,88,0,111,111,105],
[91,114,95,104,100,0,116,96],
[100,108,96,87,100,95,0,103],
[102,117,125,120,106,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,107,106,112,105,112],
[108,0,115,107,99,111,109,109],
[94,96,0,106,99,109,94,104],
[104,104,105,0,103,111,101,113],
[105,112,112,108,0,109,101,106],
[99,100,102,100,102,0,96,106],
[106,102,117,110,110,115,0,107],
[99,102,107,98,105,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,121,105,133,93,120,119],
[107,0,129,113,114,96,102,105],
[90,82,0,79,112,81,89,106],
[106,98,132,0,132,107,101,122],
[78,97,99,79,0,71,95,108],
[118,115,130,104,140,0,108,132],
[91,109,122,110,116,103,0,114],
[92,106,105,89,103,79,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,152,172,100,143,106,123],
[48,0,93,93,79,122,151,131],
[59,118,0,131,98,74,80,141],
[39,118,80,0,56,115,99,138],
[111,132,113,155,0,60,171,150],
[68,89,137,96,151,0,128,107],
[105,60,131,112,40,83,0,166],
[88,80,70,73,61,104,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,80,126,100,88,114,87],
[84,0,117,129,102,124,150,128],
[131,94,0,128,136,170,121,84],
[85,82,83,0,86,105,137,102],
[111,109,75,125,0,146,137,114],
[123,87,41,106,65,0,121,81],
[97,61,90,74,74,90,0,83],
[124,83,127,109,97,130,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,94,108,108,88,107,98],
[125,0,116,152,134,100,103,115],
[117,95,0,111,113,98,127,95],
[103,59,100,0,108,91,84,79],
[103,77,98,103,0,83,111,84],
[123,111,113,120,128,0,96,134],
[104,108,84,127,100,115,0,104],
[113,96,116,132,127,77,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,131,142,81,124,124,112],
[97,0,97,118,100,78,63,130],
[80,114,0,121,92,96,89,113],
[69,93,90,0,88,86,71,116],
[130,111,119,123,0,102,92,123],
[87,133,115,125,109,0,94,114],
[87,148,122,140,119,117,0,158],
[99,81,98,95,88,97,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,103,94,95,103,106],
[116,0,109,117,105,96,111,107],
[108,102,0,103,101,107,108,103],
[108,94,108,0,107,92,101,113],
[117,106,110,104,0,104,106,100],
[116,115,104,119,107,0,117,113],
[108,100,103,110,105,94,0,93],
[105,104,108,98,111,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,108,114,67,114,101],
[94,0,73,91,108,80,95,93],
[106,138,0,102,120,101,101,104],
[103,120,109,0,115,90,125,105],
[97,103,91,96,0,69,103,104],
[144,131,110,121,142,0,104,110],
[97,116,110,86,108,107,0,90],
[110,118,107,106,107,101,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,86,166,128,89,84,106],
[128,0,87,134,88,101,100,107],
[125,124,0,124,126,91,84,64],
[45,77,87,0,89,72,62,104],
[83,123,85,122,0,84,54,94],
[122,110,120,139,127,0,107,74],
[127,111,127,149,157,104,0,117],
[105,104,147,107,117,137,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,104,105,122,111,110],
[109,0,118,105,109,104,106,109],
[109,93,0,95,115,111,106,102],
[107,106,116,0,111,121,110,103],
[106,102,96,100,0,116,112,94],
[89,107,100,90,95,0,109,93],
[100,105,105,101,99,102,0,113],
[101,102,109,108,117,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,80,96,124,94,117],
[113,0,105,92,71,90,97,96],
[97,106,0,89,75,115,92,72],
[131,119,122,0,114,148,143,82],
[115,140,136,97,0,169,127,131],
[87,121,96,63,42,0,88,84],
[117,114,119,68,84,123,0,101],
[94,115,139,129,80,127,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,107,119,103,104,102],
[110,0,84,95,90,101,107,88],
[120,127,0,106,110,107,110,103],
[104,116,105,0,106,103,108,125],
[92,121,101,105,0,97,96,102],
[108,110,104,108,114,0,125,101],
[107,104,101,103,115,86,0,106],
[109,123,108,86,109,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,118,128,116,103,119],
[104,0,109,115,120,102,103,111],
[90,102,0,113,104,100,103,106],
[93,96,98,0,115,97,90,109],
[83,91,107,96,0,98,93,102],
[95,109,111,114,113,0,109,102],
[108,108,108,121,118,102,0,111],
[92,100,105,102,109,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,98,101,92,112,90,114],
[90,0,109,91,88,99,88,110],
[113,102,0,104,119,126,108,124],
[110,120,107,0,95,106,82,119],
[119,123,92,116,0,122,108,121],
[99,112,85,105,89,0,78,107],
[121,123,103,129,103,133,0,106],
[97,101,87,92,90,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,107,103,101,91,95],
[101,0,98,97,89,93,84,96],
[111,113,0,111,105,107,106,113],
[104,114,100,0,103,94,98,101],
[108,122,106,108,0,100,102,101],
[110,118,104,117,111,0,99,110],
[120,127,105,113,109,112,0,108],
[116,115,98,110,110,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,78,74,112,109,128],
[102,0,81,65,78,68,72,86],
[105,130,0,132,111,87,122,140],
[133,146,79,0,91,89,105,115],
[137,133,100,120,0,119,124,98],
[99,143,124,122,92,0,105,110],
[102,139,89,106,87,106,0,158],
[83,125,71,96,113,101,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,110,117,108,118,103],
[105,0,102,109,112,113,114,111],
[95,109,0,91,109,98,105,93],
[101,102,120,0,104,106,113,94],
[94,99,102,107,0,96,113,101],
[103,98,113,105,115,0,119,109],
[93,97,106,98,98,92,0,90],
[108,100,118,117,110,102,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,112,115,112,88,112,129],
[67,0,82,82,82,82,89,89],
[99,129,0,113,108,107,114,106],
[96,129,98,0,115,95,127,122],
[99,129,103,96,0,97,105,111],
[123,129,104,116,114,0,126,105],
[99,122,97,84,106,85,0,117],
[82,122,105,89,100,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,110,116,109,115,107],
[110,0,108,112,109,101,108,106],
[107,103,0,110,105,97,94,102],
[101,99,101,0,104,83,106,100],
[95,102,106,107,0,106,114,104],
[102,110,114,128,105,0,116,112],
[96,103,117,105,97,95,0,106],
[104,105,109,111,107,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,93,101,120,105,84],
[115,0,103,102,130,98,99,120],
[110,108,0,111,114,102,112,72],
[118,109,100,0,105,112,123,113],
[110,81,97,106,0,121,68,56],
[91,113,109,99,90,0,79,97],
[106,112,99,88,143,132,0,106],
[127,91,139,98,155,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,114,106,109,113,117],
[101,0,96,114,109,98,113,113],
[115,115,0,118,109,95,109,117],
[97,97,93,0,94,96,108,109],
[105,102,102,117,0,99,108,116],
[102,113,116,115,112,0,121,126],
[98,98,102,103,103,90,0,104],
[94,98,94,102,95,85,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,112,114,107,113,107],
[102,0,105,104,99,99,107,106],
[108,106,0,90,117,110,97,96],
[99,107,121,0,121,111,102,107],
[97,112,94,90,0,108,96,99],
[104,112,101,100,103,0,95,112],
[98,104,114,109,115,116,0,104],
[104,105,115,104,112,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,121,97,116,120,125],
[100,0,101,115,104,101,113,111],
[111,110,0,123,103,98,115,124],
[90,96,88,0,98,97,108,100],
[114,107,108,113,0,93,105,107],
[95,110,113,114,118,0,113,115],
[91,98,96,103,106,98,0,100],
[86,100,87,111,104,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,111,104,124,106,105],
[109,0,111,99,102,96,99,110],
[95,100,0,97,99,111,91,103],
[100,112,114,0,103,109,100,96],
[107,109,112,108,0,122,101,110],
[87,115,100,102,89,0,110,103],
[105,112,120,111,110,101,0,106],
[106,101,108,115,101,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,109,82,83,66,109,113],
[66,0,87,120,135,107,96,103],
[102,124,0,75,117,108,101,115],
[129,91,136,0,105,91,109,115],
[128,76,94,106,0,109,75,119],
[145,104,103,120,102,0,91,93],
[102,115,110,102,136,120,0,99],
[98,108,96,96,92,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,129,106,100,121,125,111],
[104,0,116,109,112,100,109,103],
[82,95,0,89,91,100,108,107],
[105,102,122,0,91,111,119,100],
[111,99,120,120,0,120,113,113],
[90,111,111,100,91,0,106,104],
[86,102,103,92,98,105,0,100],
[100,108,104,111,98,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,105,123,108,108,115],
[108,0,120,109,101,111,131,104],
[106,91,0,112,108,100,98,96],
[106,102,99,0,113,111,112,110],
[88,110,103,98,0,102,102,92],
[103,100,111,100,109,0,98,112],
[103,80,113,99,109,113,0,103],
[96,107,115,101,119,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,107,120,120,126,102],
[109,0,120,113,118,119,116,103],
[104,91,0,98,95,95,102,89],
[104,98,113,0,106,102,121,110],
[91,93,116,105,0,119,121,101],
[91,92,116,109,92,0,123,95],
[85,95,109,90,90,88,0,82],
[109,108,122,101,110,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,104,123,113,111,116],
[94,0,101,101,118,104,104,103],
[104,110,0,100,109,111,116,109],
[107,110,111,0,113,105,103,107],
[88,93,102,98,0,97,101,98],
[98,107,100,106,114,0,124,100],
[100,107,95,108,110,87,0,104],
[95,108,102,104,113,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,74,107,139,69,146,81],
[120,0,136,142,120,75,160,104],
[137,75,0,143,129,116,158,121],
[104,69,68,0,147,85,146,75],
[72,91,82,64,0,90,106,94],
[142,136,95,126,121,0,102,108],
[65,51,53,65,105,109,0,92],
[130,107,90,136,117,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,88,95,92,91,98,94],
[119,0,118,105,102,106,96,108],
[123,93,0,108,93,104,107,92],
[116,106,103,0,100,107,110,88],
[119,109,118,111,0,103,111,106],
[120,105,107,104,108,0,104,110],
[113,115,104,101,100,107,0,105],
[117,103,119,123,105,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,133,125,121,102,120,112],
[91,0,117,103,115,98,101,108],
[78,94,0,99,85,94,94,85],
[86,108,112,0,120,113,110,114],
[90,96,126,91,0,99,102,110],
[109,113,117,98,112,0,115,112],
[91,110,117,101,109,96,0,94],
[99,103,126,97,101,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,131,149,104,133,80,138],
[79,0,88,132,79,84,69,83],
[80,123,0,153,47,103,89,82],
[62,79,58,0,43,116,39,72],
[107,132,164,168,0,122,75,138],
[78,127,108,95,89,0,109,72],
[131,142,122,172,136,102,0,121],
[73,128,129,139,73,139,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,127,105,110,119,114],
[92,0,93,109,103,92,100,100],
[95,118,0,128,111,119,100,118],
[84,102,83,0,93,97,80,106],
[106,108,100,118,0,105,100,105],
[101,119,92,114,106,0,112,98],
[92,111,111,131,111,99,0,114],
[97,111,93,105,106,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,96,97,103,121,113,108],
[84,0,114,104,76,115,122,89],
[115,97,0,89,83,103,132,81],
[114,107,122,0,92,113,144,87],
[108,135,128,119,0,139,150,92],
[90,96,108,98,72,0,109,76],
[98,89,79,67,61,102,0,85],
[103,122,130,124,119,135,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,143,98,112,124,109,118],
[88,0,112,90,102,99,96,103],
[68,99,0,98,96,98,91,79],
[113,121,113,0,106,113,103,105],
[99,109,115,105,0,110,111,108],
[87,112,113,98,101,0,107,99],
[102,115,120,108,100,104,0,104],
[93,108,132,106,103,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,101,153,117,67,141],
[116,0,93,134,133,113,67,91],
[107,118,0,97,120,80,104,104],
[110,77,114,0,110,163,111,107],
[58,78,91,101,0,84,91,108],
[94,98,131,48,127,0,128,95],
[144,144,107,100,120,83,0,171],
[70,120,107,104,103,116,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,82,104,100,95,101,96],
[104,0,84,93,106,100,98,104],
[129,127,0,103,120,102,99,128],
[107,118,108,0,104,101,106,118],
[111,105,91,107,0,117,113,105],
[116,111,109,110,94,0,110,98],
[110,113,112,105,98,101,0,104],
[115,107,83,93,106,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,91,143,122,130,104,118],
[78,0,99,95,117,101,87,88],
[120,112,0,113,136,142,113,99],
[68,116,98,0,118,118,104,76],
[89,94,75,93,0,93,94,106],
[81,110,69,93,118,0,90,87],
[107,124,98,107,117,121,0,107],
[93,123,112,135,105,124,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,112,112,110,116,110],
[90,0,100,102,103,103,106,101],
[106,111,0,103,119,114,109,117],
[99,109,108,0,117,105,114,107],
[99,108,92,94,0,94,104,96],
[101,108,97,106,117,0,114,109],
[95,105,102,97,107,97,0,109],
[101,110,94,104,115,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,105,101,108,110,115],
[117,0,114,118,113,101,118,133],
[96,97,0,109,92,109,86,116],
[106,93,102,0,103,97,90,103],
[110,98,119,108,0,119,115,128],
[103,110,102,114,92,0,97,123],
[101,93,125,121,96,114,0,124],
[96,78,95,108,83,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,124,98,115,128,115,97],
[127,0,133,102,111,126,138,109],
[87,78,0,107,99,108,104,63],
[113,109,104,0,111,114,108,86],
[96,100,112,100,0,112,122,84],
[83,85,103,97,99,0,93,71],
[96,73,107,103,89,118,0,68],
[114,102,148,125,127,140,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,143,116,103,128,126,118],
[113,0,105,118,115,129,115,128],
[68,106,0,87,103,109,102,129],
[95,93,124,0,90,125,133,125],
[108,96,108,121,0,119,125,131],
[83,82,102,86,92,0,115,123],
[85,96,109,78,86,96,0,111],
[93,83,82,86,80,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,94,110,89,77,113],
[116,0,103,101,99,100,98,102],
[110,108,0,104,100,94,106,106],
[117,110,107,0,120,98,104,118],
[101,112,111,91,0,92,114,122],
[122,111,117,113,119,0,96,113],
[134,113,105,107,97,115,0,104],
[98,109,105,93,89,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,86,93,101,108,104,124],
[104,0,104,95,110,117,110,113],
[125,107,0,108,99,118,131,143],
[118,116,103,0,122,112,127,123],
[110,101,112,89,0,77,137,110],
[103,94,93,99,134,0,108,152],
[107,101,80,84,74,103,0,105],
[87,98,68,88,101,59,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,80,112,104,95,102,86],
[117,0,89,105,119,105,99,101],
[131,122,0,129,130,117,119,105],
[99,106,82,0,110,88,93,96],
[107,92,81,101,0,101,88,94],
[116,106,94,123,110,0,105,113],
[109,112,92,118,123,106,0,100],
[125,110,106,115,117,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,93,133,77,127,117,83],
[97,0,104,121,110,134,102,84],
[118,107,0,122,106,128,101,86],
[78,90,89,0,70,104,86,87],
[134,101,105,141,0,112,85,100],
[84,77,83,107,99,0,57,69],
[94,109,110,125,126,154,0,117],
[128,127,125,124,111,142,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,113,96,116,105,104],
[97,0,97,110,89,106,103,99],
[113,114,0,124,103,121,117,112],
[98,101,87,0,94,100,90,99],
[115,122,108,117,0,113,99,112],
[95,105,90,111,98,0,104,99],
[106,108,94,121,112,107,0,114],
[107,112,99,112,99,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,110,104,121,85,120],
[91,0,136,92,83,110,95,110],
[100,75,0,80,111,92,72,95],
[101,119,131,0,117,108,92,117],
[107,128,100,94,0,104,113,112],
[90,101,119,103,107,0,80,98],
[126,116,139,119,98,131,0,123],
[91,101,116,94,99,113,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,112,122,116,117,132],
[102,0,114,108,107,110,100,110],
[107,97,0,113,94,106,117,109],
[99,103,98,0,114,105,110,114],
[89,104,117,97,0,102,95,103],
[95,101,105,106,109,0,98,107],
[94,111,94,101,116,113,0,110],
[79,101,102,97,108,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,117,114,109,101,107,117],
[87,0,94,85,99,86,95,116],
[94,117,0,102,114,109,112,104],
[97,126,109,0,101,88,100,104],
[102,112,97,110,0,93,98,116],
[110,125,102,123,118,0,116,116],
[104,116,99,111,113,95,0,106],
[94,95,107,107,95,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,87,111,99,92,105],
[106,0,105,104,108,104,104,99],
[98,106,0,94,106,105,95,98],
[124,107,117,0,107,97,111,106],
[100,103,105,104,0,88,83,94],
[112,107,106,114,123,0,96,97],
[119,107,116,100,128,115,0,116],
[106,112,113,105,117,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,91,114,102,77,91],
[112,0,109,127,117,117,103,94],
[120,102,0,118,121,112,112,100],
[120,84,93,0,120,105,103,94],
[97,94,90,91,0,93,88,94],
[109,94,99,106,118,0,97,85],
[134,108,99,108,123,114,0,111],
[120,117,111,117,117,126,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,141,91,80,84,123,92],
[161,0,114,108,86,108,111,94],
[70,97,0,129,112,96,79,97],
[120,103,82,0,72,83,62,103],
[131,125,99,139,0,133,87,116],
[127,103,115,128,78,0,104,67],
[88,100,132,149,124,107,0,125],
[119,117,114,108,95,144,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,111,101,100,97,97],
[116,0,111,109,104,101,105,106],
[107,100,0,121,105,103,103,104],
[100,102,90,0,97,96,97,90],
[110,107,106,114,0,94,99,105],
[111,110,108,115,117,0,108,105],
[114,106,108,114,112,103,0,109],
[114,105,107,121,106,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,121,130,87,108,84],
[95,0,75,133,111,94,125,102],
[106,136,0,96,121,127,108,107],
[90,78,115,0,114,79,110,104],
[81,100,90,97,0,78,77,74],
[124,117,84,132,133,0,80,80],
[103,86,103,101,134,131,0,63],
[127,109,104,107,137,131,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,134,119,120,111,110,126],
[108,0,115,103,108,111,96,124],
[77,96,0,95,99,103,105,94],
[92,108,116,0,109,93,115,124],
[91,103,112,102,0,105,114,111],
[100,100,108,118,106,0,103,124],
[101,115,106,96,97,108,0,117],
[85,87,117,87,100,87,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,106,110,111,109,118],
[103,0,124,104,116,106,118,114],
[107,87,0,98,105,105,112,108],
[105,107,113,0,113,104,112,113],
[101,95,106,98,0,113,106,109],
[100,105,106,107,98,0,112,115],
[102,93,99,99,105,99,0,107],
[93,97,103,98,102,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,99,116,119,100,103],
[102,0,106,111,112,112,104,113],
[92,105,0,97,105,101,101,100],
[112,100,114,0,112,111,116,108],
[95,99,106,99,0,100,101,99],
[92,99,110,100,111,0,89,93],
[111,107,110,95,110,122,0,112],
[108,98,111,103,112,118,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,107,116,114,110,115],
[108,0,105,110,122,116,117,123],
[100,106,0,101,111,103,116,112],
[104,101,110,0,107,110,110,109],
[95,89,100,104,0,104,101,102],
[97,95,108,101,107,0,107,117],
[101,94,95,101,110,104,0,102],
[96,88,99,102,109,94,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,95,103,110,100,111],
[110,0,112,95,115,110,100,105],
[103,99,0,96,102,95,102,104],
[116,116,115,0,119,101,108,112],
[108,96,109,92,0,98,101,109],
[101,101,116,110,113,0,108,108],
[111,111,109,103,110,103,0,109],
[100,106,107,99,102,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,126,110,104,112,103],
[120,0,90,131,107,116,121,118],
[112,121,0,135,117,105,136,114],
[85,80,76,0,80,81,89,88],
[101,104,94,131,0,108,108,109],
[107,95,106,130,103,0,124,111],
[99,90,75,122,103,87,0,95],
[108,93,97,123,102,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,103,93,84,93,108],
[118,0,96,95,94,106,90,105],
[112,115,0,100,100,99,109,99],
[108,116,111,0,107,114,101,123],
[118,117,111,104,0,126,110,110],
[127,105,112,97,85,0,108,111],
[118,121,102,110,101,103,0,112],
[103,106,112,88,101,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,88,92,96,94,83,88],
[123,0,102,108,114,95,110,106],
[123,109,0,109,102,102,100,101],
[119,103,102,0,120,82,109,116],
[115,97,109,91,0,89,107,102],
[117,116,109,129,122,0,94,116],
[128,101,111,102,104,117,0,103],
[123,105,110,95,109,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,120,107,109,90,121],
[98,0,102,102,98,92,102,109],
[100,109,0,115,103,110,99,112],
[91,109,96,0,93,88,90,107],
[104,113,108,118,0,103,101,109],
[102,119,101,123,108,0,109,109],
[121,109,112,121,110,102,0,131],
[90,102,99,104,102,102,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,114,115,107,108,105],
[95,0,110,125,111,126,112,123],
[94,101,0,116,100,114,99,105],
[97,86,95,0,101,118,101,103],
[96,100,111,110,0,115,105,114],
[104,85,97,93,96,0,90,99],
[103,99,112,110,106,121,0,110],
[106,88,106,108,97,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,109,103,126,101,124],
[110,0,112,110,104,117,97,117],
[112,99,0,108,110,116,109,108],
[102,101,103,0,118,117,116,111],
[108,107,101,93,0,112,104,118],
[85,94,95,94,99,0,104,110],
[110,114,102,95,107,107,0,108],
[87,94,103,100,93,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,119,105,109,116,118],
[98,0,110,107,107,111,108,117],
[98,101,0,99,111,107,104,109],
[92,104,112,0,100,111,115,100],
[106,104,100,111,0,118,113,116],
[102,100,104,100,93,0,101,111],
[95,103,107,96,98,110,0,99],
[93,94,102,111,95,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,112,105,108,124,115],
[108,0,114,126,102,103,130,114],
[105,97,0,111,88,104,106,83],
[99,85,100,0,107,104,113,91],
[106,109,123,104,0,100,126,112],
[103,108,107,107,111,0,115,98],
[87,81,105,98,85,96,0,103],
[96,97,128,120,99,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,105,102,115,91,121],
[101,0,89,109,94,100,94,120],
[108,122,0,110,108,120,104,121],
[106,102,101,0,84,100,108,99],
[109,117,103,127,0,118,103,131],
[96,111,91,111,93,0,108,110],
[120,117,107,103,108,103,0,127],
[90,91,90,112,80,101,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,109,105,105,109,102],
[102,0,98,108,113,101,113,98],
[93,113,0,92,94,98,99,103],
[102,103,119,0,106,104,98,104],
[106,98,117,105,0,103,100,89],
[106,110,113,107,108,0,104,102],
[102,98,112,113,111,107,0,109],
[109,113,108,107,122,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,103,95,93,100,102],
[113,0,95,105,100,99,99,98],
[121,116,0,108,115,113,100,109],
[108,106,103,0,101,100,108,104],
[116,111,96,110,0,111,111,110],
[118,112,98,111,100,0,117,107],
[111,112,111,103,100,94,0,110],
[109,113,102,107,101,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,130,113,113,111,94,90],
[92,0,122,74,96,104,95,86],
[81,89,0,59,76,94,78,61],
[98,137,152,0,126,134,123,111],
[98,115,135,85,0,115,105,91],
[100,107,117,77,96,0,100,87],
[117,116,133,88,106,111,0,85],
[121,125,150,100,120,124,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,98,83,73,112,90,77],
[93,0,99,56,80,83,97,104],
[113,112,0,115,98,96,106,114],
[128,155,96,0,120,127,113,150],
[138,131,113,91,0,127,100,111],
[99,128,115,84,84,0,75,62],
[121,114,105,98,111,136,0,120],
[134,107,97,61,100,149,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,156,157,100,58,93],
[112,0,76,150,116,59,70,60],
[94,135,0,128,93,59,94,94],
[55,61,83,0,157,7,7,55],
[54,95,118,54,0,54,54,54],
[111,152,152,204,157,0,98,111],
[153,141,117,204,157,113,0,100],
[118,151,117,156,157,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,111,111,75,92,90,176],
[35,0,146,75,75,56,16,172],
[100,65,0,30,121,30,81,100],
[100,136,181,0,156,192,152,192],
[136,136,90,55,0,101,87,136],
[119,155,181,19,110,0,54,175],
[121,195,130,59,124,157,0,192],
[35,39,111,19,75,36,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,108,109,108,107,88,118],
[84,0,102,107,117,85,86,108],
[103,109,0,110,104,92,103,120],
[102,104,101,0,104,102,102,87],
[103,94,107,107,0,86,94,105],
[104,126,119,109,125,0,84,127],
[123,125,108,109,117,127,0,104],
[93,103,91,124,106,84,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,99,97,101,97,112],
[116,0,112,110,97,123,92,108],
[120,99,0,105,91,109,95,107],
[112,101,106,0,91,107,107,111],
[114,114,120,120,0,112,104,133],
[110,88,102,104,99,0,92,106],
[114,119,116,104,107,119,0,123],
[99,103,104,100,78,105,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,108,101,116,94,100],
[97,0,112,95,109,120,101,94],
[111,99,0,93,119,117,92,94],
[103,116,118,0,126,121,103,92],
[110,102,92,85,0,104,109,79],
[95,91,94,90,107,0,90,109],
[117,110,119,108,102,121,0,92],
[111,117,117,119,132,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,104,86,99,96,96,95],
[123,0,99,108,111,96,100,94],
[107,112,0,100,110,100,96,100],
[125,103,111,0,111,112,105,96],
[112,100,101,100,0,113,99,84],
[115,115,111,99,98,0,118,96],
[115,111,115,106,112,93,0,109],
[116,117,111,115,127,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,105,102,102,111,114],
[110,0,98,114,117,103,109,119],
[110,113,0,109,109,108,106,105],
[106,97,102,0,112,115,114,108],
[109,94,102,99,0,101,100,108],
[109,108,103,96,110,0,111,109],
[100,102,105,97,111,100,0,105],
[97,92,106,103,103,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,96,96,113,95,127],
[103,0,127,93,92,132,104,114],
[100,84,0,80,83,83,75,110],
[115,118,131,0,109,123,101,124],
[115,119,128,102,0,108,109,130],
[98,79,128,88,103,0,100,114],
[116,107,136,110,102,111,0,133],
[84,97,101,87,81,97,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,107,141,116,113,114],
[120,0,130,109,128,128,108,96],
[112,81,0,94,113,100,103,95],
[104,102,117,0,113,112,108,100],
[70,83,98,98,0,91,79,82],
[95,83,111,99,120,0,78,102],
[98,103,108,103,132,133,0,100],
[97,115,116,111,129,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,108,101,110,109,117],
[113,0,110,105,98,101,96,104],
[101,101,0,107,95,87,106,94],
[103,106,104,0,96,97,93,92],
[110,113,116,115,0,98,114,101],
[101,110,124,114,113,0,115,103],
[102,115,105,118,97,96,0,97],
[94,107,117,119,110,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,119,101,105,126,96],
[101,0,106,110,107,111,125,107],
[115,105,0,98,97,107,126,104],
[92,101,113,0,88,80,114,100],
[110,104,114,123,0,117,124,93],
[106,100,104,131,94,0,123,97],
[85,86,85,97,87,88,0,99],
[115,104,107,111,118,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,97,109,110,102,115],
[105,0,101,99,103,95,112,105],
[116,110,0,86,104,91,116,94],
[114,112,125,0,117,90,117,96],
[102,108,107,94,0,91,104,92],
[101,116,120,121,120,0,112,115],
[109,99,95,94,107,99,0,90],
[96,106,117,115,119,96,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,108,96,104,100,102],
[123,0,118,105,118,116,117,114],
[105,93,0,109,106,114,105,102],
[103,106,102,0,111,107,106,115],
[115,93,105,100,0,114,112,109],
[107,95,97,104,97,0,99,112],
[111,94,106,105,99,112,0,108],
[109,97,109,96,102,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,96,106,109,97,107],
[103,0,105,83,91,96,86,95],
[102,106,0,90,99,99,92,96],
[115,128,121,0,107,108,103,99],
[105,120,112,104,0,108,99,104],
[102,115,112,103,103,0,94,104],
[114,125,119,108,112,117,0,105],
[104,116,115,112,107,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,104,89,93,119,115],
[105,0,109,107,107,101,121,106],
[93,102,0,108,91,89,111,107],
[107,104,103,0,100,106,111,100],
[122,104,120,111,0,101,117,116],
[118,110,122,105,110,0,118,108],
[92,90,100,100,94,93,0,109],
[96,105,104,111,95,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,100,122,98,105,99],
[113,0,97,98,110,86,80,84],
[105,114,0,104,122,95,102,117],
[111,113,107,0,113,93,129,91],
[89,101,89,98,0,84,100,84],
[113,125,116,118,127,0,99,98],
[106,131,109,82,111,112,0,105],
[112,127,94,120,127,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,88,109,102,102,99,98],
[111,0,109,111,111,105,108,96],
[123,102,0,117,123,124,110,109],
[102,100,94,0,105,108,101,108],
[109,100,88,106,0,114,104,101],
[109,106,87,103,97,0,99,107],
[112,103,101,110,107,112,0,107],
[113,115,102,103,110,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,114,113,102,107,100],
[100,0,97,123,111,97,105,94],
[89,114,0,102,98,102,93,93],
[97,88,109,0,109,102,88,100],
[98,100,113,102,0,91,92,89],
[109,114,109,109,120,0,104,107],
[104,106,118,123,119,107,0,108],
[111,117,118,111,122,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,95,105,104,109,106],
[110,0,99,101,110,106,114,114],
[120,112,0,107,113,103,119,117],
[116,110,104,0,125,108,110,122],
[106,101,98,86,0,100,102,107],
[107,105,108,103,111,0,116,109],
[102,97,92,101,109,95,0,116],
[105,97,94,89,104,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,99,116,109,106,112],
[114,0,107,107,106,101,95,109],
[103,104,0,109,115,105,108,113],
[112,104,102,0,111,111,121,113],
[95,105,96,100,0,111,111,100],
[102,110,106,100,100,0,108,118],
[105,116,103,90,100,103,0,111],
[99,102,98,98,111,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,111,82,92,79,82],
[115,0,105,94,83,62,84,85],
[106,106,0,100,92,98,92,96],
[100,117,111,0,92,95,89,90],
[129,128,119,119,0,99,106,93],
[119,149,113,116,112,0,91,117],
[132,127,119,122,105,120,0,103],
[129,126,115,121,118,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,104,107,98,104,105,97],
[125,0,104,124,110,103,115,105],
[107,107,0,120,102,105,105,101],
[104,87,91,0,89,109,96,99],
[113,101,109,122,0,114,105,100],
[107,108,106,102,97,0,104,102],
[106,96,106,115,106,107,0,107],
[114,106,110,112,111,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,93,100,113,101,104],
[119,0,117,112,107,113,101,109],
[103,94,0,89,95,111,93,99],
[118,99,122,0,98,122,104,107],
[111,104,116,113,0,118,105,101],
[98,98,100,89,93,0,93,96],
[110,110,118,107,106,118,0,104],
[107,102,112,104,110,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,97,113,146,124,127],
[87,0,92,87,91,117,96,78],
[106,119,0,103,80,131,147,103],
[114,124,108,0,130,148,120,105],
[98,120,131,81,0,139,139,109],
[65,94,80,63,72,0,86,77],
[87,115,64,91,72,125,0,99],
[84,133,108,106,102,134,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,106,105,103,112,109],
[113,0,124,110,107,107,104,113],
[96,87,0,102,95,96,84,106],
[105,101,109,0,102,98,103,95],
[106,104,116,109,0,118,106,113],
[108,104,115,113,93,0,95,107],
[99,107,127,108,105,116,0,104],
[102,98,105,116,98,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,101,103,104,102,106],
[117,0,115,110,112,116,113,103],
[110,96,0,103,106,104,109,112],
[110,101,108,0,100,101,114,101],
[108,99,105,111,0,105,102,113],
[107,95,107,110,106,0,110,96],
[109,98,102,97,109,101,0,98],
[105,108,99,110,98,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,82,114,102,113,103,109],
[110,0,89,119,126,107,110,125],
[129,122,0,142,114,112,102,120],
[97,92,69,0,111,77,90,111],
[109,85,97,100,0,79,79,98],
[98,104,99,134,132,0,100,106],
[108,101,109,121,132,111,0,110],
[102,86,91,100,113,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,124,118,118,105,114,118],
[96,0,119,113,122,100,107,110],
[87,92,0,102,107,96,93,102],
[93,98,109,0,114,95,96,104],
[93,89,104,97,0,86,89,93],
[106,111,115,116,125,0,105,106],
[97,104,118,115,122,106,0,106],
[93,101,109,107,118,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,108,113,105,107,113,96],
[78,0,76,95,100,91,101,98],
[103,135,0,139,117,123,124,114],
[98,116,72,0,74,116,100,103],
[106,111,94,137,0,89,95,121],
[104,120,88,95,122,0,120,100],
[98,110,87,111,116,91,0,96],
[115,113,97,108,90,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,108,97,107,113,111],
[95,0,110,121,95,108,112,107],
[102,101,0,108,107,96,105,104],
[103,90,103,0,104,93,104,100],
[114,116,104,107,0,99,113,113],
[104,103,115,118,112,0,116,115],
[98,99,106,107,98,95,0,101],
[100,104,107,111,98,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,93,108,98,101,96],
[110,0,99,101,120,108,111,98],
[119,112,0,108,118,107,98,107],
[118,110,103,0,119,115,103,97],
[103,91,93,92,0,92,99,95],
[113,103,104,96,119,0,106,103],
[110,100,113,108,112,105,0,102],
[115,113,104,114,116,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,121,85,78,87,104,93],
[117,0,121,99,104,97,109,118],
[90,90,0,73,87,82,97,92],
[126,112,138,0,106,101,113,100],
[133,107,124,105,0,118,111,112],
[124,114,129,110,93,0,109,96],
[107,102,114,98,100,102,0,93],
[118,93,119,111,99,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,89,101,131,85,108],
[95,0,93,112,117,119,84,92],
[111,118,0,106,81,100,108,98],
[122,99,105,0,85,123,112,83],
[110,94,130,126,0,127,114,90],
[80,92,111,88,84,0,92,95],
[126,127,103,99,97,119,0,98],
[103,119,113,128,121,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,113,102,116,106,115],
[101,0,118,106,102,94,104,113],
[95,93,0,101,96,102,107,105],
[98,105,110,0,106,103,102,104],
[109,109,115,105,0,108,115,121],
[95,117,109,108,103,0,103,108],
[105,107,104,109,96,108,0,104],
[96,98,106,107,90,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,103,115,107,121,105],
[98,0,89,70,123,94,88,102],
[99,122,0,107,121,94,96,109],
[108,141,104,0,120,101,114,109],
[96,88,90,91,0,84,94,83],
[104,117,117,110,127,0,112,116],
[90,123,115,97,117,99,0,111],
[106,109,102,102,128,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,99,98,105,87,111],
[107,0,98,106,113,111,97,114],
[100,113,0,102,98,96,99,112],
[112,105,109,0,94,107,98,119],
[113,98,113,117,0,99,100,118],
[106,100,115,104,112,0,113,105],
[124,114,112,113,111,98,0,111],
[100,97,99,92,93,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,112,120,102,100,112],
[107,0,123,130,130,108,101,112],
[100,88,0,108,106,104,98,101],
[99,81,103,0,117,109,103,97],
[91,81,105,94,0,93,95,98],
[109,103,107,102,118,0,104,91],
[111,110,113,108,116,107,0,100],
[99,99,110,114,113,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,113,103,100,98,105],
[97,0,102,105,104,107,99,106],
[102,109,0,111,106,109,107,115],
[98,106,100,0,106,102,110,106],
[108,107,105,105,0,99,111,106],
[111,104,102,109,112,0,105,109],
[113,112,104,101,100,106,0,109],
[106,105,96,105,105,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,87,99,104,109,115,90],
[100,0,90,94,98,76,108,104],
[124,121,0,102,111,118,129,114],
[112,117,109,0,110,93,116,91],
[107,113,100,101,0,91,130,102],
[102,135,93,118,120,0,128,97],
[96,103,82,95,81,83,0,85],
[121,107,97,120,109,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,106,102,101,88,95],
[104,0,97,100,104,107,92,108],
[102,114,0,97,101,101,95,99],
[105,111,114,0,102,110,105,103],
[109,107,110,109,0,103,106,112],
[110,104,110,101,108,0,97,111],
[123,119,116,106,105,114,0,121],
[116,103,112,108,99,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,115,131,104,96,108,117],
[121,0,119,138,113,88,123,108],
[96,92,0,106,87,84,90,101],
[80,73,105,0,82,69,97,86],
[107,98,124,129,0,114,117,131],
[115,123,127,142,97,0,108,129],
[103,88,121,114,94,103,0,129],
[94,103,110,125,80,82,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,91,104,102,114,103],
[105,0,120,113,98,117,114,112],
[100,91,0,94,98,100,114,105],
[120,98,117,0,99,104,119,106],
[107,113,113,112,0,103,116,108],
[109,94,111,107,108,0,114,104],
[97,97,97,92,95,97,0,90],
[108,99,106,105,103,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,115,118,125,102,126,132],
[82,0,84,97,122,94,111,86],
[96,127,0,81,123,93,106,99],
[93,114,130,0,91,93,124,102],
[86,89,88,120,0,121,114,85],
[109,117,118,118,90,0,133,84],
[85,100,105,87,97,78,0,94],
[79,125,112,109,126,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,110,109,106,107,122],
[110,0,113,115,117,109,101,111],
[105,98,0,113,102,103,103,109],
[101,96,98,0,108,112,104,107],
[102,94,109,103,0,107,102,103],
[105,102,108,99,104,0,89,104],
[104,110,108,107,109,122,0,114],
[89,100,102,104,108,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,103,108,124,110,125],
[96,0,94,98,97,117,105,102],
[99,117,0,110,109,114,111,112],
[108,113,101,0,98,117,102,123],
[103,114,102,113,0,115,102,111],
[87,94,97,94,96,0,95,94],
[101,106,100,109,109,116,0,110],
[86,109,99,88,100,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,77,94,107,80,73,73],
[122,0,113,126,115,114,106,85],
[134,98,0,102,111,130,103,102],
[117,85,109,0,134,108,110,115],
[104,96,100,77,0,91,73,84],
[131,97,81,103,120,0,90,97],
[138,105,108,101,138,121,0,122],
[138,126,109,96,127,114,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,101,110,103,102,104],
[107,0,94,101,101,105,100,97],
[115,117,0,102,108,104,108,113],
[110,110,109,0,111,104,111,109],
[101,110,103,100,0,97,109,95],
[108,106,107,107,114,0,106,104],
[109,111,103,100,102,105,0,102],
[107,114,98,102,116,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,105,92,103,135,81,110],
[69,0,95,67,56,116,77,69],
[106,116,0,97,93,146,106,96],
[119,144,114,0,122,143,106,98],
[108,155,118,89,0,143,95,93],
[76,95,65,68,68,0,46,69],
[130,134,105,105,116,165,0,122],
[101,142,115,113,118,142,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,95,96,91,116,129,100],
[90,0,114,108,111,123,122,109],
[116,97,0,85,84,130,118,100],
[115,103,126,0,109,120,134,122],
[120,100,127,102,0,128,137,133],
[95,88,81,91,83,0,117,93],
[82,89,93,77,74,94,0,99],
[111,102,111,89,78,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,111,106,114,113,112],
[108,0,105,112,110,116,103,115],
[95,106,0,104,96,110,104,96],
[100,99,107,0,107,109,111,107],
[105,101,115,104,0,103,116,114],
[97,95,101,102,108,0,101,107],
[98,108,107,100,95,110,0,107],
[99,96,115,104,97,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,122,106,111,100,115],
[104,0,108,109,109,106,99,113],
[95,103,0,112,95,117,99,100],
[89,102,99,0,99,100,98,98],
[105,102,116,112,0,118,100,109],
[100,105,94,111,93,0,104,104],
[111,112,112,113,111,107,0,105],
[96,98,111,113,102,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,88,94,100,101,96],
[106,0,110,111,85,67,102,93],
[104,101,0,112,92,79,110,91],
[123,100,99,0,97,112,99,108],
[117,126,119,114,0,100,110,104],
[111,144,132,99,111,0,119,122],
[110,109,101,112,101,92,0,91],
[115,118,120,103,107,89,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,106,111,94,100,109],
[113,0,110,102,116,108,104,116],
[100,101,0,106,104,100,103,111],
[105,109,105,0,112,101,109,117],
[100,95,107,99,0,91,106,113],
[117,103,111,110,120,0,108,119],
[111,107,108,102,105,103,0,116],
[102,95,100,94,98,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,84,92,116,79,103,109],
[127,0,105,105,103,82,78,98],
[127,106,0,115,131,111,109,104],
[119,106,96,0,117,93,101,121],
[95,108,80,94,0,71,77,88],
[132,129,100,118,140,0,117,114],
[108,133,102,110,134,94,0,118],
[102,113,107,90,123,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,93,97,104,116,106,83],
[93,0,112,112,100,121,111,97],
[118,99,0,102,121,121,121,93],
[114,99,109,0,115,126,138,110],
[107,111,90,96,0,92,114,90],
[95,90,90,85,119,0,103,90],
[105,100,90,73,97,108,0,93],
[128,114,118,101,121,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,118,102,98,104,119],
[104,0,114,108,109,113,111,118],
[91,97,0,112,116,101,124,104],
[93,103,99,0,101,92,107,104],
[109,102,95,110,0,109,112,112],
[113,98,110,119,102,0,111,107],
[107,100,87,104,99,100,0,110],
[92,93,107,107,99,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,86,86,63,86,136,127],
[82,0,33,61,84,88,73,98],
[125,178,0,118,128,145,50,148],
[125,150,93,0,100,165,89,114],
[148,127,83,111,0,138,107,148],
[125,123,66,46,73,0,73,114],
[75,138,161,122,104,138,0,98],
[84,113,63,97,63,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,105,118,109,111,108],
[99,0,112,106,115,92,103,108],
[112,99,0,98,116,107,94,110],
[106,105,113,0,116,96,120,112],
[93,96,95,95,0,92,97,112],
[102,119,104,115,119,0,100,113],
[100,108,117,91,114,111,0,102],
[103,103,101,99,99,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,125,112,100,90,129,150],
[102,0,104,78,89,61,99,148],
[86,107,0,101,133,100,151,141],
[99,133,110,0,110,142,149,142],
[111,122,78,101,0,95,96,138],
[121,150,111,69,116,0,114,155],
[82,112,60,62,115,97,0,110],
[61,63,70,69,73,56,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,98,109,122,98,116,108],
[82,0,78,88,110,93,85,106],
[113,133,0,125,95,126,139,121],
[102,123,86,0,106,100,104,111],
[89,101,116,105,0,93,115,129],
[113,118,85,111,118,0,119,131],
[95,126,72,107,96,92,0,103],
[103,105,90,100,82,80,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,103,106,111,113,121],
[99,0,100,91,93,93,90,105],
[104,111,0,95,113,107,109,110],
[108,120,116,0,99,109,106,115],
[105,118,98,112,0,105,107,121],
[100,118,104,102,106,0,99,121],
[98,121,102,105,104,112,0,126],
[90,106,101,96,90,90,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,109,101,108,118,106],
[109,0,95,92,91,113,109,104],
[106,116,0,122,106,112,120,101],
[102,119,89,0,107,113,109,106],
[110,120,105,104,0,113,119,107],
[103,98,99,98,98,0,101,100],
[93,102,91,102,92,110,0,94],
[105,107,110,105,104,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,112,103,82,111,112],
[112,0,98,102,105,101,108,99],
[100,113,0,106,109,102,91,98],
[99,109,105,0,111,97,119,106],
[108,106,102,100,0,105,112,108],
[129,110,109,114,106,0,101,103],
[100,103,120,92,99,110,0,105],
[99,112,113,105,103,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,114,117,116,116,108],
[92,0,99,123,112,94,116,91],
[106,112,0,119,109,104,125,120],
[97,88,92,0,96,84,103,100],
[94,99,102,115,0,109,108,104],
[95,117,107,127,102,0,123,109],
[95,95,86,108,103,88,0,103],
[103,120,91,111,107,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,89,118,127,107,167,150],
[128,0,116,155,112,90,141,128],
[122,95,0,111,117,102,148,143],
[93,56,100,0,94,91,138,111],
[84,99,94,117,0,75,116,148],
[104,121,109,120,136,0,127,153],
[44,70,63,73,95,84,0,97],
[61,83,68,100,63,58,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,105,104,102,109,98],
[101,0,112,94,109,110,99,99],
[111,99,0,109,95,103,101,93],
[106,117,102,0,89,106,102,93],
[107,102,116,122,0,115,121,104],
[109,101,108,105,96,0,99,98],
[102,112,110,109,90,112,0,108],
[113,112,118,118,107,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,106,100,104,100,100],
[115,0,115,106,101,111,110,112],
[99,96,0,85,94,91,99,97],
[105,105,126,0,107,109,108,100],
[111,110,117,104,0,109,110,107],
[107,100,120,102,102,0,110,100],
[111,101,112,103,101,101,0,97],
[111,99,114,111,104,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,138,176,49,131,109,198],
[73,0,13,73,62,95,73,95],
[73,198,0,140,49,144,73,131],
[35,138,71,0,49,71,0,71],
[162,149,162,162,0,162,73,162],
[80,116,67,140,49,0,60,127],
[102,138,138,211,138,151,0,138],
[13,116,80,140,49,84,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,134,99,93,114,89],
[99,0,119,120,111,99,116,107],
[94,92,0,113,94,91,117,90],
[77,91,98,0,87,71,93,75],
[112,100,117,124,0,111,109,104],
[118,112,120,140,100,0,108,105],
[97,95,94,118,102,103,0,84],
[122,104,121,136,107,106,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,103,103,105,111,84],
[109,0,106,97,105,114,105,98],
[108,105,0,106,103,122,107,94],
[108,114,105,0,111,108,117,106],
[108,106,108,100,0,115,116,102],
[106,97,89,103,96,0,112,85],
[100,106,104,94,95,99,0,92],
[127,113,117,105,109,126,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,94,91,108,102,98],
[115,0,104,102,114,118,106,118],
[105,107,0,107,97,111,114,100],
[117,109,104,0,116,109,120,121],
[120,97,114,95,0,123,103,110],
[103,93,100,102,88,0,105,103],
[109,105,97,91,108,106,0,105],
[113,93,111,90,101,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,131,120,135,108,97,148],
[123,0,149,113,96,126,154,126],
[80,62,0,101,55,85,75,107],
[91,98,110,0,112,108,127,127],
[76,115,156,99,0,123,130,136],
[103,85,126,103,88,0,111,109],
[114,57,136,84,81,100,0,118],
[63,85,104,84,75,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,104,121,110,111,102,108],
[85,0,82,106,110,103,85,103],
[107,129,0,129,101,106,100,101],
[90,105,82,0,112,106,98,102],
[101,101,110,99,0,104,104,115],
[100,108,105,105,107,0,108,111],
[109,126,111,113,107,103,0,108],
[103,108,110,109,96,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,106,113,100,114,103],
[104,0,102,106,121,106,119,101],
[104,109,0,101,112,99,112,94],
[105,105,110,0,121,112,114,109],
[98,90,99,90,0,93,102,97],
[111,105,112,99,118,0,110,115],
[97,92,99,97,109,101,0,95],
[108,110,117,102,114,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,78,99,101,91,82,118],
[122,0,132,107,93,123,122,114],
[133,79,0,86,83,93,85,116],
[112,104,125,0,115,102,97,92],
[110,118,128,96,0,123,92,107],
[120,88,118,109,88,0,83,96],
[129,89,126,114,119,128,0,133],
[93,97,95,119,104,115,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,121,118,116,109,105,104],
[86,0,104,96,103,102,103,85],
[90,107,0,106,113,100,99,90],
[93,115,105,0,110,95,96,95],
[95,108,98,101,0,97,104,100],
[102,109,111,116,114,0,104,108],
[106,108,112,115,107,107,0,96],
[107,126,121,116,111,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,106,109,119,96,104],
[102,0,110,97,109,113,99,118],
[103,101,0,110,110,114,107,107],
[105,114,101,0,115,109,116,119],
[102,102,101,96,0,98,90,110],
[92,98,97,102,113,0,92,113],
[115,112,104,95,121,119,0,126],
[107,93,104,92,101,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,100,94,95,94,91],
[120,0,110,119,117,106,99,107],
[113,101,0,106,112,100,91,102],
[111,92,105,0,97,98,103,106],
[117,94,99,114,0,107,93,94],
[116,105,111,113,104,0,107,104],
[117,112,120,108,118,104,0,110],
[120,104,109,105,117,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,104,110,108,113,106],
[100,0,105,101,112,104,100,109],
[102,106,0,100,102,107,105,95],
[107,110,111,0,98,97,106,105],
[101,99,109,113,0,107,113,102],
[103,107,104,114,104,0,105,114],
[98,111,106,105,98,106,0,106],
[105,102,116,106,109,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,115,89,102,110,95,96],
[120,0,115,96,99,112,106,112],
[96,96,0,85,97,95,87,88],
[122,115,126,0,107,113,103,110],
[109,112,114,104,0,110,110,118],
[101,99,116,98,101,0,106,117],
[116,105,124,108,101,105,0,109],
[115,99,123,101,93,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,109,102,100,91,75],
[106,0,89,81,88,96,94,85],
[109,122,0,102,96,106,99,95],
[102,130,109,0,110,114,111,102],
[109,123,115,101,0,95,103,110],
[111,115,105,97,116,0,93,102],
[120,117,112,100,108,118,0,99],
[136,126,116,109,101,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,118,93,105,118,110],
[113,0,113,119,113,103,136,118],
[109,98,0,117,98,85,113,96],
[93,92,94,0,83,93,116,90],
[118,98,113,128,0,109,115,122],
[106,108,126,118,102,0,126,106],
[93,75,98,95,96,85,0,101],
[101,93,115,121,89,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,113,101,124,113,100],
[98,0,116,102,93,111,94,96],
[111,95,0,133,108,117,112,111],
[98,109,78,0,98,106,90,112],
[110,118,103,113,0,130,106,125],
[87,100,94,105,81,0,89,95],
[98,117,99,121,105,122,0,97],
[111,115,100,99,86,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,96,115,105,101,102],
[108,0,114,113,115,119,104,107],
[105,97,0,107,99,113,98,98],
[115,98,104,0,113,107,108,103],
[96,96,112,98,0,101,89,99],
[106,92,98,104,110,0,107,101],
[110,107,113,103,122,104,0,103],
[109,104,113,108,112,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,60,110,133,123,55,93],
[100,0,51,127,117,86,50,109],
[151,160,0,134,117,104,109,97],
[101,84,77,0,165,134,58,88],
[78,94,94,46,0,76,89,84],
[88,125,107,77,135,0,88,97],
[156,161,102,153,122,123,0,130],
[118,102,114,123,127,114,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,167,97,148,93,138,126],
[72,0,168,68,97,101,92,71],
[44,43,0,62,96,53,38,55],
[114,143,149,0,131,104,101,87],
[63,114,115,80,0,85,118,123],
[118,110,158,107,126,0,130,76],
[73,119,173,110,93,81,0,58],
[85,140,156,124,88,135,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,115,125,86,124,103],
[104,0,105,114,104,100,107,94],
[118,106,0,124,118,91,109,106],
[96,97,87,0,102,105,120,114],
[86,107,93,109,0,95,111,108],
[125,111,120,106,116,0,107,97],
[87,104,102,91,100,104,0,102],
[108,117,105,97,103,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,101,103,113,98,111],
[113,0,94,114,92,104,103,105],
[103,117,0,110,106,107,103,109],
[110,97,101,0,102,97,100,105],
[108,119,105,109,0,100,99,115],
[98,107,104,114,111,0,106,110],
[113,108,108,111,112,105,0,114],
[100,106,102,106,96,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,109,97,99,105,101],
[110,0,120,132,101,108,102,102],
[105,91,0,119,106,105,107,93],
[102,79,92,0,93,100,86,89],
[114,110,105,118,0,116,106,109],
[112,103,106,111,95,0,93,95],
[106,109,104,125,105,118,0,103],
[110,109,118,122,102,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,129,82,106,91,84,85],
[124,0,119,99,107,94,106,112],
[82,92,0,63,101,87,89,83],
[129,112,148,0,98,110,111,106],
[105,104,110,113,0,126,117,112],
[120,117,124,101,85,0,90,121],
[127,105,122,100,94,121,0,104],
[126,99,128,105,99,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,107,99,90,73,110,91],
[124,0,89,139,147,138,114,109],
[104,122,0,83,102,91,94,62],
[112,72,128,0,89,82,100,56],
[121,64,109,122,0,86,110,46],
[138,73,120,129,125,0,104,95],
[101,97,117,111,101,107,0,76],
[120,102,149,155,165,116,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,112,106,96,111,96],
[111,0,100,108,115,111,121,115],
[101,111,0,107,105,102,114,108],
[99,103,104,0,120,104,110,100],
[105,96,106,91,0,102,111,103],
[115,100,109,107,109,0,119,108],
[100,90,97,101,100,92,0,99],
[115,96,103,111,108,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,116,102,102,111,112],
[103,0,112,129,102,80,106,106],
[100,99,0,110,87,91,107,107],
[95,82,101,0,101,103,107,103],
[109,109,124,110,0,112,105,118],
[109,131,120,108,99,0,104,119],
[100,105,104,104,106,107,0,117],
[99,105,104,108,93,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,98,103,89,95,99],
[115,0,109,109,103,94,86,106],
[116,102,0,88,114,100,97,91],
[113,102,123,0,108,106,110,107],
[108,108,97,103,0,90,101,89],
[122,117,111,105,121,0,110,112],
[116,125,114,101,110,101,0,116],
[112,105,120,104,122,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,108,112,107,105,110],
[98,0,93,87,83,78,100,91],
[99,118,0,106,99,93,103,95],
[103,124,105,0,97,100,110,96],
[99,128,112,114,0,98,108,112],
[104,133,118,111,113,0,108,113],
[106,111,108,101,103,103,0,95],
[101,120,116,115,99,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,127,132,175,107,85,127],
[98,0,92,107,163,114,88,94],
[84,119,0,113,160,113,99,95],
[79,104,98,0,154,113,94,54],
[36,48,51,57,0,73,72,77],
[104,97,98,98,138,0,98,97],
[126,123,112,117,139,113,0,103],
[84,117,116,157,134,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,100,100,112,111,108],
[105,0,111,106,102,101,112,98],
[107,100,0,101,94,100,114,102],
[111,105,110,0,116,115,111,110],
[111,109,117,95,0,109,114,101],
[99,110,111,96,102,0,108,105],
[100,99,97,100,97,103,0,108],
[103,113,109,101,110,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,100,99,116,181,132,128],
[128,0,96,62,137,149,133,117],
[111,115,0,85,119,156,91,62],
[112,149,126,0,125,133,92,117],
[95,74,92,86,0,124,76,109],
[30,62,55,78,87,0,67,82],
[79,78,120,119,135,144,0,162],
[83,94,149,94,102,129,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,102,110,117,111,108],
[95,0,82,86,105,101,91,91],
[103,129,0,107,111,117,110,109],
[109,125,104,0,119,110,102,103],
[101,106,100,92,0,107,105,93],
[94,110,94,101,104,0,106,105],
[100,120,101,109,106,105,0,97],
[103,120,102,108,118,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,123,99,107,106,112,109],
[95,0,115,103,109,120,114,102],
[88,96,0,113,104,106,101,86],
[112,108,98,0,102,102,106,94],
[104,102,107,109,0,113,118,94],
[105,91,105,109,98,0,105,95],
[99,97,110,105,93,106,0,100],
[102,109,125,117,117,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,129,87,95,113,113,104],
[96,0,105,99,91,103,97,84],
[82,106,0,94,94,108,103,104],
[124,112,117,0,94,104,102,113],
[116,120,117,117,0,85,114,101],
[98,108,103,107,126,0,115,101],
[98,114,108,109,97,96,0,93],
[107,127,107,98,110,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,94,112,99,116,101],
[108,0,97,107,103,110,127,106],
[109,114,0,99,102,118,117,111],
[117,104,112,0,113,119,132,107],
[99,108,109,98,0,116,115,109],
[112,101,93,92,95,0,123,108],
[95,84,94,79,96,88,0,96],
[110,105,100,104,102,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,113,126,106,111,105,104],
[119,0,112,115,100,107,98,105],
[98,99,0,113,107,102,102,98],
[85,96,98,0,104,92,96,95],
[105,111,104,107,0,114,107,110],
[100,104,109,119,97,0,103,100],
[106,113,109,115,104,108,0,106],
[107,106,113,116,101,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,92,98,93,101,99],
[110,0,98,103,104,100,105,107],
[101,113,0,88,100,98,110,91],
[119,108,123,0,105,119,103,97],
[113,107,111,106,0,92,102,107],
[118,111,113,92,119,0,116,98],
[110,106,101,108,109,95,0,109],
[112,104,120,114,104,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,146,112,91,129,113],
[108,0,103,121,127,82,122,92],
[101,108,0,114,89,98,104,83],
[65,90,97,0,90,76,133,81],
[99,84,122,121,0,100,131,86],
[120,129,113,135,111,0,119,97],
[82,89,107,78,80,92,0,66],
[98,119,128,130,125,114,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,121,116,117,128,120,117],
[110,0,100,123,102,140,128,110],
[90,111,0,114,115,119,103,102],
[95,88,97,0,102,104,107,103],
[94,109,96,109,0,90,119,98],
[83,71,92,107,121,0,102,77],
[91,83,108,104,92,109,0,86],
[94,101,109,108,113,134,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,74,73,105,65,83],
[134,0,120,94,96,143,99,92],
[142,91,0,101,93,122,110,118],
[137,117,110,0,103,122,85,131],
[138,115,118,108,0,101,96,127],
[106,68,89,89,110,0,93,87],
[146,112,101,126,115,118,0,101],
[128,119,93,80,84,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,89,109,96,110,115,104],
[101,0,110,107,111,109,104,117],
[122,101,0,107,109,123,111,111],
[102,104,104,0,91,107,98,107],
[115,100,102,120,0,111,111,103],
[101,102,88,104,100,0,98,102],
[96,107,100,113,100,113,0,112],
[107,94,100,104,108,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,86,90,112,122,100],
[106,0,89,76,78,126,89,104],
[103,122,0,103,113,126,133,114],
[125,135,108,0,87,114,102,132],
[121,133,98,124,0,141,132,123],
[99,85,85,97,70,0,97,80],
[89,122,78,109,79,114,0,100],
[111,107,97,79,88,131,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,104,93,115,109,104],
[107,0,105,108,103,106,97,101],
[111,106,0,111,107,115,111,105],
[107,103,100,0,102,110,111,109],
[118,108,104,109,0,119,107,114],
[96,105,96,101,92,0,107,102],
[102,114,100,100,104,104,0,114],
[107,110,106,102,97,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,104,104,99,108,95],
[111,0,107,102,112,109,103,104],
[104,104,0,116,111,107,105,108],
[107,109,95,0,109,105,111,109],
[107,99,100,102,0,105,99,93],
[112,102,104,106,106,0,111,112],
[103,108,106,100,112,100,0,106],
[116,107,103,102,118,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,106,106,104,102,111],
[94,0,107,106,106,101,103,104],
[103,104,0,105,107,96,106,112],
[105,105,106,0,91,93,102,106],
[105,105,104,120,0,109,106,109],
[107,110,115,118,102,0,113,110],
[109,108,105,109,105,98,0,111],
[100,107,99,105,102,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,113,121,119,119,119],
[98,0,111,109,120,119,108,114],
[108,100,0,118,100,117,114,110],
[98,102,93,0,108,117,108,101],
[90,91,111,103,0,129,102,97],
[92,92,94,94,82,0,107,95],
[92,103,97,103,109,104,0,112],
[92,97,101,110,114,116,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,132,116,132,119,120,119],
[114,0,96,124,103,110,111,98],
[79,115,0,113,105,124,114,117],
[95,87,98,0,98,103,116,118],
[79,108,106,113,0,124,126,120],
[92,101,87,108,87,0,119,90],
[91,100,97,95,85,92,0,90],
[92,113,94,93,91,121,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,101,110,117,112,106,117],
[88,0,94,97,87,104,93,108],
[110,117,0,105,104,113,96,107],
[101,114,106,0,102,105,99,109],
[94,124,107,109,0,113,106,113],
[99,107,98,106,98,0,92,118],
[105,118,115,112,105,119,0,106],
[94,103,104,102,98,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,117,106,99,103,125],
[108,0,106,105,99,107,99,105],
[105,105,0,104,102,102,106,108],
[94,106,107,0,92,106,103,112],
[105,112,109,119,0,109,108,101],
[112,104,109,105,102,0,96,120],
[108,112,105,108,103,115,0,113],
[86,106,103,99,110,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,113,103,96,110,104,103],
[75,0,94,97,102,84,86,78],
[98,117,0,113,102,110,109,104],
[108,114,98,0,89,97,115,113],
[115,109,109,122,0,103,115,96],
[101,127,101,114,108,0,107,107],
[107,125,102,96,96,104,0,94],
[108,133,107,98,115,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,108,98,87,66,107,103],
[142,0,117,98,108,113,122,123],
[103,94,0,91,104,81,103,113],
[113,113,120,0,112,92,126,112],
[124,103,107,99,0,89,115,100],
[145,98,130,119,122,0,126,137],
[104,89,108,85,96,85,0,133],
[108,88,98,99,111,74,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,158,110,109,101,99,152],
[99,0,115,97,125,101,88,112],
[53,96,0,101,62,63,105,88],
[101,114,110,0,100,71,111,116],
[102,86,149,111,0,61,90,83],
[110,110,148,140,150,0,103,100],
[112,123,106,100,121,108,0,98],
[59,99,123,95,128,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,97,103,107,100,96],
[107,0,113,99,107,111,109,91],
[114,98,0,108,114,111,100,107],
[114,112,103,0,104,108,108,104],
[108,104,97,107,0,100,99,103],
[104,100,100,103,111,0,108,102],
[111,102,111,103,112,103,0,99],
[115,120,104,107,108,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,100,94,102,97,104],
[102,0,105,111,100,112,94,111],
[115,106,0,103,102,104,89,106],
[111,100,108,0,108,123,98,106],
[117,111,109,103,0,121,103,117],
[109,99,107,88,90,0,94,106],
[114,117,122,113,108,117,0,103],
[107,100,105,105,94,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,103,164,117,126,130,137],
[76,0,84,108,112,90,116,130],
[108,127,0,145,111,96,129,166],
[47,103,66,0,73,90,61,77],
[94,99,100,138,0,124,83,129],
[85,121,115,121,87,0,83,116],
[81,95,82,150,128,128,0,119],
[74,81,45,134,82,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,93,102,99,80,90,88],
[135,0,110,111,116,103,114,107],
[118,101,0,112,109,101,102,94],
[109,100,99,0,122,103,113,104],
[112,95,102,89,0,89,103,80],
[131,108,110,108,122,0,106,100],
[121,97,109,98,108,105,0,93],
[123,104,117,107,131,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,120,108,105,115,112],
[102,0,96,111,119,85,99,118],
[119,115,0,106,99,119,126,111],
[91,100,105,0,110,88,98,115],
[103,92,112,101,0,93,108,104],
[106,126,92,123,118,0,135,117],
[96,112,85,113,103,76,0,112],
[99,93,100,96,107,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,118,111,104,110,119],
[107,0,106,111,101,106,116,113],
[89,105,0,105,104,84,108,109],
[93,100,106,0,110,100,103,112],
[100,110,107,101,0,94,116,101],
[107,105,127,111,117,0,115,117],
[101,95,103,108,95,96,0,108],
[92,98,102,99,110,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,97,97,99,102,101],
[106,0,98,103,117,127,105,115],
[113,113,0,113,108,97,108,110],
[114,108,98,0,90,68,108,106],
[114,94,103,121,0,91,115,100],
[112,84,114,143,120,0,107,127],
[109,106,103,103,96,104,0,99],
[110,96,101,105,111,84,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,87,107,88,100,81],
[139,0,104,104,107,116,108,102],
[134,107,0,101,104,111,109,114],
[124,107,110,0,103,91,107,84],
[104,104,107,108,0,75,93,88],
[123,95,100,120,136,0,93,112],
[111,103,102,104,118,118,0,94],
[130,109,97,127,123,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,143,88,106,97,123,96],
[111,0,104,101,94,87,92,53],
[68,107,0,102,84,73,63,90],
[123,110,109,0,115,85,112,78],
[105,117,127,96,0,127,119,107],
[114,124,138,126,84,0,84,92],
[88,119,148,99,92,127,0,125],
[115,158,121,133,104,119,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,111,100,115,111,107],
[102,0,93,112,106,115,109,113],
[106,118,0,109,102,104,99,111],
[100,99,102,0,105,103,93,102],
[111,105,109,106,0,111,102,104],
[96,96,107,108,100,0,94,104],
[100,102,112,118,109,117,0,112],
[104,98,100,109,107,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,117,102,99,118,127],
[102,0,85,127,110,75,118,112],
[91,126,0,129,119,112,105,126],
[94,84,82,0,86,98,106,98],
[109,101,92,125,0,87,107,116],
[112,136,99,113,124,0,137,129],
[93,93,106,105,104,74,0,95],
[84,99,85,113,95,82,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,97,109,88,93,98,103],
[127,0,97,99,116,115,110,101],
[114,114,0,106,103,118,104,112],
[102,112,105,0,99,106,114,109],
[123,95,108,112,0,107,109,117],
[118,96,93,105,104,0,97,111],
[113,101,107,97,102,114,0,104],
[108,110,99,102,94,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,107,93,102,105,106],
[113,0,96,110,99,105,104,101],
[109,115,0,119,103,109,110,105],
[104,101,92,0,98,85,112,109],
[118,112,108,113,0,108,118,101],
[109,106,102,126,103,0,116,108],
[106,107,101,99,93,95,0,93],
[105,110,106,102,110,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,127,81,60,113,89,178],
[141,0,127,100,117,108,100,151],
[84,84,0,47,103,103,19,70],
[130,111,164,0,130,103,126,164],
[151,94,108,81,0,137,127,132],
[98,103,108,108,74,0,127,159],
[122,111,192,85,84,84,0,132],
[33,60,141,47,79,52,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,102,112,106,113,117],
[97,0,107,99,100,91,103,104],
[101,104,0,105,96,95,102,103],
[109,112,106,0,108,102,113,105],
[99,111,115,103,0,89,113,112],
[105,120,116,109,122,0,106,112],
[98,108,109,98,98,105,0,102],
[94,107,108,106,99,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,108,101,112,114,99],
[107,0,109,106,110,105,108,99],
[106,102,0,113,114,100,111,116],
[103,105,98,0,105,104,112,111],
[110,101,97,106,0,109,106,107],
[99,106,111,107,102,0,115,101],
[97,103,100,99,105,96,0,106],
[112,112,95,100,104,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,111,127,88,117,102],
[111,0,99,100,101,92,93,90],
[98,112,0,116,89,92,109,95],
[100,111,95,0,100,90,104,93],
[84,110,122,111,0,81,111,104],
[123,119,119,121,130,0,98,117],
[94,118,102,107,100,113,0,88],
[109,121,116,118,107,94,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,130,112,105,109,106],
[95,0,101,103,109,103,101,95],
[101,110,0,114,107,108,102,103],
[81,108,97,0,94,92,94,93],
[99,102,104,117,0,111,103,104],
[106,108,103,119,100,0,102,112],
[102,110,109,117,108,109,0,112],
[105,116,108,118,107,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,106,100,108,101,100],
[107,0,104,108,99,113,102,106],
[109,107,0,105,102,112,104,105],
[105,103,106,0,98,108,106,99],
[111,112,109,113,0,114,101,99],
[103,98,99,103,97,0,86,95],
[110,109,107,105,110,125,0,106],
[111,105,106,112,112,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,103,116,109,96,98],
[102,0,118,109,96,108,101,101],
[104,93,0,91,90,91,88,88],
[108,102,120,0,101,103,87,100],
[95,115,121,110,0,99,105,101],
[102,103,120,108,112,0,107,119],
[115,110,123,124,106,104,0,112],
[113,110,123,111,110,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,109,112,108,114,102],
[107,0,99,95,91,106,110,101],
[111,112,0,94,110,114,124,98],
[102,116,117,0,109,106,105,104],
[99,120,101,102,0,105,125,107],
[103,105,97,105,106,0,126,106],
[97,101,87,106,86,85,0,101],
[109,110,113,107,104,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,101,135,131,118,134,90],
[132,0,65,155,129,153,139,131],
[110,146,0,154,140,145,159,104],
[76,56,57,0,69,143,99,85],
[80,82,71,142,0,127,116,60],
[93,58,66,68,84,0,87,93],
[77,72,52,112,95,124,0,99],
[121,80,107,126,151,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,108,98,112,95,109],
[113,0,107,112,98,114,94,107],
[107,104,0,118,114,114,107,117],
[103,99,93,0,103,110,106,102],
[113,113,97,108,0,116,104,107],
[99,97,97,101,95,0,89,105],
[116,117,104,105,107,122,0,108],
[102,104,94,109,104,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,102,106,110,106,106],
[92,0,116,111,104,114,102,109],
[96,95,0,104,100,106,100,95],
[109,100,107,0,107,113,105,110],
[105,107,111,104,0,110,109,109],
[101,97,105,98,101,0,104,107],
[105,109,111,106,102,107,0,109],
[105,102,116,101,102,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,112,98,97,101,94],
[101,0,108,112,107,109,114,113],
[103,103,0,112,100,105,102,116],
[99,99,99,0,99,97,94,101],
[113,104,111,112,0,99,111,114],
[114,102,106,114,112,0,114,98],
[110,97,109,117,100,97,0,107],
[117,98,95,110,97,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,96,108,118,102,138],
[95,0,97,80,107,104,117,144],
[101,114,0,112,102,135,101,130],
[115,131,99,0,90,120,112,128],
[103,104,109,121,0,131,137,131],
[93,107,76,91,80,0,113,123],
[109,94,110,99,74,98,0,92],
[73,67,81,83,80,88,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,134,90,108,78,86,83],
[69,0,139,75,139,58,123,69],
[77,72,0,39,87,17,80,35],
[121,136,172,0,133,146,99,132],
[103,72,124,78,0,61,71,64],
[133,153,194,65,150,0,137,84],
[125,88,131,112,140,74,0,95],
[128,142,176,79,147,127,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,96,103,97,93,104],
[123,0,111,119,106,107,116,104],
[111,100,0,113,107,102,111,102],
[115,92,98,0,111,109,103,99],
[108,105,104,100,0,96,89,101],
[114,104,109,102,115,0,98,99],
[118,95,100,108,122,113,0,112],
[107,107,109,112,110,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,139,97,90,127,105,92],
[117,0,99,109,101,134,113,108],
[72,112,0,86,74,109,97,92],
[114,102,125,0,89,120,102,79],
[121,110,137,122,0,129,111,99],
[84,77,102,91,82,0,85,69],
[106,98,114,109,100,126,0,98],
[119,103,119,132,112,142,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,181,132,126,176,148,151],
[113,0,102,84,126,128,135,134],
[30,109,0,53,97,126,109,51],
[79,127,158,0,105,182,156,145],
[85,85,114,106,0,111,104,85],
[35,83,85,29,100,0,77,57],
[63,76,102,55,107,134,0,103],
[60,77,160,66,126,154,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,85,93,70,91,78,80],
[136,0,101,118,91,117,96,125],
[126,110,0,105,103,109,115,113],
[118,93,106,0,88,120,94,93],
[141,120,108,123,0,128,121,104],
[120,94,102,91,83,0,84,80],
[133,115,96,117,90,127,0,116],
[131,86,98,118,107,131,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,145,71,121,125,110,65],
[126,0,159,119,172,101,113,126],
[66,52,0,58,72,54,59,99],
[140,92,153,0,177,96,152,123],
[90,39,139,34,0,79,83,41],
[86,110,157,115,132,0,157,85],
[101,98,152,59,128,54,0,122],
[146,85,112,88,170,126,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,92,131,108,108,108],
[94,0,89,95,107,103,90,79],
[104,122,0,121,123,119,123,100],
[119,116,90,0,122,102,133,98],
[80,104,88,89,0,108,99,103],
[103,108,92,109,103,0,113,104],
[103,121,88,78,112,98,0,100],
[103,132,111,113,108,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,67,78,85,101,81],
[117,0,75,116,73,132,120,109],
[120,136,0,113,104,114,120,96],
[144,95,98,0,107,125,103,124],
[133,138,107,104,0,141,136,109],
[126,79,97,86,70,0,101,103],
[110,91,91,108,75,110,0,98],
[130,102,115,87,102,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,103,118,104,99,111],
[107,0,103,107,112,98,102,106],
[103,108,0,98,99,96,97,101],
[108,104,113,0,114,106,113,113],
[93,99,112,97,0,95,98,96],
[107,113,115,105,116,0,113,118],
[112,109,114,98,113,98,0,117],
[100,105,110,98,115,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,98,113,109,96,100],
[107,0,112,112,124,117,100,117],
[105,99,0,118,109,99,106,114],
[113,99,93,0,106,111,98,102],
[98,87,102,105,0,106,99,114],
[102,94,112,100,105,0,108,105],
[115,111,105,113,112,103,0,111],
[111,94,97,109,97,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,101,105,110,101,100],
[109,0,111,99,94,106,107,102],
[110,100,0,95,111,103,97,100],
[110,112,116,0,89,102,103,96],
[106,117,100,122,0,106,107,103],
[101,105,108,109,105,0,98,116],
[110,104,114,108,104,113,0,112],
[111,109,111,115,108,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,134,133,102,101,152,108],
[96,0,98,70,77,112,125,92],
[77,113,0,72,96,109,108,95],
[78,141,139,0,131,137,141,99],
[109,134,115,80,0,82,102,75],
[110,99,102,74,129,0,123,66],
[59,86,103,70,109,88,0,78],
[103,119,116,112,136,145,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,108,102,101,102,103],
[114,0,110,106,105,111,112,104],
[103,101,0,103,99,95,99,92],
[103,105,108,0,98,98,105,107],
[109,106,112,113,0,103,108,103],
[110,100,116,113,108,0,117,107],
[109,99,112,106,103,94,0,110],
[108,107,119,104,108,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,106,96,104,90,92],
[117,0,116,117,115,105,99,111],
[104,95,0,114,94,114,103,96],
[105,94,97,0,111,98,103,86],
[115,96,117,100,0,103,97,96],
[107,106,97,113,108,0,104,91],
[121,112,108,108,114,107,0,103],
[119,100,115,125,115,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,98,98,100,99,94],
[99,0,108,93,95,98,106,94],
[107,103,0,96,96,102,106,96],
[113,118,115,0,114,107,120,104],
[113,116,115,97,0,110,107,112],
[111,113,109,104,101,0,110,102],
[112,105,105,91,104,101,0,101],
[117,117,115,107,99,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,104,124,108,110,104],
[103,0,102,106,113,110,95,106],
[104,109,0,119,114,115,113,104],
[107,105,92,0,109,111,91,99],
[87,98,97,102,0,97,96,107],
[103,101,96,100,114,0,107,100],
[101,116,98,120,115,104,0,111],
[107,105,107,112,104,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,125,100,107,99,105],
[94,0,101,114,96,93,86,96],
[100,110,0,116,97,102,104,99],
[86,97,95,0,86,85,88,96],
[111,115,114,125,0,101,107,116],
[104,118,109,126,110,0,105,110],
[112,125,107,123,104,106,0,117],
[106,115,112,115,95,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,100,91,94,96,84],
[110,0,107,103,107,102,102,102],
[120,104,0,111,111,104,106,99],
[111,108,100,0,104,97,108,91],
[120,104,100,107,0,100,102,104],
[117,109,107,114,111,0,104,97],
[115,109,105,103,109,107,0,108],
[127,109,112,120,107,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,112,111,104,95,114],
[103,0,115,115,108,105,106,104],
[99,96,0,110,106,90,93,97],
[99,96,101,0,105,92,94,100],
[100,103,105,106,0,100,100,107],
[107,106,121,119,111,0,105,115],
[116,105,118,117,111,106,0,121],
[97,107,114,111,104,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,121,102,109,106,110,115],
[90,0,92,88,93,103,97,96],
[90,119,0,106,95,100,106,95],
[109,123,105,0,102,97,96,93],
[102,118,116,109,0,104,95,97],
[105,108,111,114,107,0,113,108],
[101,114,105,115,116,98,0,95],
[96,115,116,118,114,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,111,115,130,111,103,109],
[118,0,125,118,122,120,91,109],
[100,86,0,91,115,116,90,96],
[96,93,120,0,119,120,100,90],
[81,89,96,92,0,97,93,83],
[100,91,95,91,114,0,95,80],
[108,120,121,111,118,116,0,102],
[102,102,115,121,128,131,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,11,14,53,14,22,72],
[200,0,102,55,95,99,55,156],
[200,109,0,55,150,71,67,116],
[197,156,156,0,140,98,167,101],
[158,116,61,71,0,116,116,104],
[197,112,140,113,95,0,80,153],
[189,156,144,44,95,131,0,144],
[139,55,95,110,107,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,66,66,88,48,54,105],
[125,0,91,113,114,88,54,57],
[145,120,0,102,144,78,107,116],
[145,98,109,0,149,122,127,153],
[123,97,67,62,0,72,40,88],
[163,123,133,89,139,0,103,125],
[157,157,104,84,171,108,0,121],
[106,154,95,58,123,86,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,109,104,108,105,116],
[104,0,101,110,115,110,101,110],
[103,110,0,117,113,119,112,118],
[102,101,94,0,107,110,106,104],
[107,96,98,104,0,107,102,107],
[103,101,92,101,104,0,109,111],
[106,110,99,105,109,102,0,114],
[95,101,93,107,104,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,125,103,110,120,111],
[110,0,113,115,120,112,111,94],
[98,98,0,107,89,86,105,105],
[86,96,104,0,101,90,94,93],
[108,91,122,110,0,96,107,89],
[101,99,125,121,115,0,115,116],
[91,100,106,117,104,96,0,97],
[100,117,106,118,122,95,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,87,99,89,105,92],
[111,0,98,99,103,103,107,102],
[107,113,0,102,105,99,116,97],
[124,112,109,0,111,100,126,108],
[112,108,106,100,0,90,115,97],
[122,108,112,111,121,0,116,105],
[106,104,95,85,96,95,0,98],
[119,109,114,103,114,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,121,108,98,106,114],
[95,0,117,115,114,97,102,114],
[97,94,0,88,90,102,86,88],
[90,96,123,0,93,90,86,102],
[103,97,121,118,0,96,103,116],
[113,114,109,121,115,0,104,116],
[105,109,125,125,108,107,0,106],
[97,97,123,109,95,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,110,113,109,112,106],
[95,0,108,108,137,114,120,112],
[109,103,0,97,144,108,92,98],
[101,103,114,0,107,105,97,106],
[98,74,67,104,0,102,87,103],
[102,97,103,106,109,0,111,127],
[99,91,119,114,124,100,0,129],
[105,99,113,105,108,84,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,105,117,112,114,120],
[98,0,115,101,107,105,115,99],
[96,96,0,95,98,110,110,106],
[106,110,116,0,110,108,112,99],
[94,104,113,101,0,113,105,112],
[99,106,101,103,98,0,104,97],
[97,96,101,99,106,107,0,94],
[91,112,105,112,99,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,99,110,109,99,109],
[97,0,98,88,103,93,91,95],
[103,113,0,103,101,107,92,101],
[112,123,108,0,119,104,107,111],
[101,108,110,92,0,104,96,101],
[102,118,104,107,107,0,91,108],
[112,120,119,104,115,120,0,103],
[102,116,110,100,110,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,102,100,108,103,97],
[110,0,108,100,112,107,105,108],
[107,103,0,90,98,101,106,99],
[109,111,121,0,111,110,106,103],
[111,99,113,100,0,110,104,103],
[103,104,110,101,101,0,102,96],
[108,106,105,105,107,109,0,102],
[114,103,112,108,108,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,116,123,119,103,106],
[101,0,104,96,108,105,100,91],
[96,107,0,114,120,110,107,116],
[95,115,97,0,95,107,101,101],
[88,103,91,116,0,109,97,99],
[92,106,101,104,102,0,102,101],
[108,111,104,110,114,109,0,111],
[105,120,95,110,112,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,105,97,107,104,110],
[104,0,104,102,110,101,104,109],
[111,107,0,101,112,114,106,122],
[106,109,110,0,105,115,101,119],
[114,101,99,106,0,100,104,112],
[104,110,97,96,111,0,108,110],
[107,107,105,110,107,103,0,108],
[101,102,89,92,99,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,64,84,90,86,101,104],
[96,0,78,99,82,108,103,77],
[147,133,0,125,117,116,105,128],
[127,112,86,0,92,118,127,96],
[121,129,94,119,0,92,100,115],
[125,103,95,93,119,0,98,110],
[110,108,106,84,111,113,0,86],
[107,134,83,115,96,101,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,92,108,118,102,102,98],
[126,0,114,115,123,129,102,128],
[119,97,0,136,113,110,96,125],
[103,96,75,0,98,103,89,81],
[93,88,98,113,0,97,88,90],
[109,82,101,108,114,0,89,85],
[109,109,115,122,123,122,0,97],
[113,83,86,130,121,126,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,108,106,91,122,103],
[100,0,106,106,98,99,116,101],
[98,105,0,96,108,100,118,93],
[103,105,115,0,107,115,117,101],
[105,113,103,104,0,97,115,106],
[120,112,111,96,114,0,126,102],
[89,95,93,94,96,85,0,94],
[108,110,118,110,105,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,119,127,114,110,98,113],
[116,0,107,108,117,114,113,101],
[92,104,0,105,109,99,91,90],
[84,103,106,0,93,81,107,91],
[97,94,102,118,0,105,107,90],
[101,97,112,130,106,0,101,107],
[113,98,120,104,104,110,0,96],
[98,110,121,120,121,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,125,78,115,142,109],
[94,0,106,105,88,115,150,114],
[89,105,0,113,87,98,135,113],
[86,106,98,0,100,82,134,103],
[133,123,124,111,0,109,153,102],
[96,96,113,129,102,0,148,98],
[69,61,76,77,58,63,0,42],
[102,97,98,108,109,113,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,80,77,98,105,90,96],
[121,0,106,94,113,110,110,103],
[131,105,0,91,115,120,110,101],
[134,117,120,0,132,119,99,116],
[113,98,96,79,0,101,92,94],
[106,101,91,92,110,0,89,97],
[121,101,101,112,119,122,0,115],
[115,108,110,95,117,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,123,108,111,117,115],
[111,0,115,119,99,111,98,103],
[104,96,0,104,93,116,95,99],
[88,92,107,0,92,103,94,94],
[103,112,118,119,0,110,95,96],
[100,100,95,108,101,0,105,95],
[94,113,116,117,116,106,0,115],
[96,108,112,117,115,116,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,104,107,115,124,105],
[94,0,114,111,106,109,122,89],
[105,97,0,108,88,105,103,95],
[107,100,103,0,90,107,119,89],
[104,105,123,121,0,113,122,114],
[96,102,106,104,98,0,127,87],
[87,89,108,92,89,84,0,74],
[106,122,116,122,97,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,102,100,100,102,123],
[91,0,99,110,96,84,111,109],
[101,112,0,103,106,100,114,120],
[109,101,108,0,95,102,112,110],
[111,115,105,116,0,109,116,116],
[111,127,111,109,102,0,109,110],
[109,100,97,99,95,102,0,106],
[88,102,91,101,95,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,103,99,108,101,102],
[101,0,110,105,99,127,94,104],
[96,101,0,101,124,120,101,96],
[108,106,110,0,95,118,100,105],
[112,112,87,116,0,115,98,108],
[103,84,91,93,96,0,91,94],
[110,117,110,111,113,120,0,101],
[109,107,115,106,103,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,79,109,124,85,130,69],
[65,0,41,46,65,87,92,31],
[132,170,0,107,126,150,155,94],
[102,165,104,0,165,110,171,110],
[87,146,85,46,0,85,146,85],
[126,124,61,101,126,0,130,25],
[81,119,56,40,65,81,0,81],
[142,180,117,101,126,186,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,95,92,109,109,86,100],
[134,0,125,99,143,123,114,124],
[116,86,0,112,124,122,115,112],
[119,112,99,0,136,143,109,103],
[102,68,87,75,0,61,74,83],
[102,88,89,68,150,0,128,112],
[125,97,96,102,137,83,0,88],
[111,87,99,108,128,99,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,97,101,101,101,112],
[108,0,86,98,96,90,93,105],
[115,125,0,117,98,114,115,125],
[114,113,94,0,99,111,121,107],
[110,115,113,112,0,105,110,123],
[110,121,97,100,106,0,99,122],
[110,118,96,90,101,112,0,111],
[99,106,86,104,88,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,97,103,126,134,88],
[99,0,73,81,82,96,99,83],
[96,138,0,106,94,134,112,98],
[114,130,105,0,107,147,137,115],
[108,129,117,104,0,118,130,109],
[85,115,77,64,93,0,117,89],
[77,112,99,74,81,94,0,81],
[123,128,113,96,102,122,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,106,95,109,99,112],
[109,0,110,95,97,99,83,105],
[96,101,0,102,88,84,75,109],
[105,116,109,0,101,100,98,114],
[116,114,123,110,0,97,98,125],
[102,112,127,111,114,0,107,108],
[112,128,136,113,113,104,0,113],
[99,106,102,97,86,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,102,108,109,116,113],
[116,0,115,108,112,104,114,113],
[102,96,0,99,99,96,109,108],
[109,103,112,0,110,111,112,117],
[103,99,112,101,0,101,104,106],
[102,107,115,100,110,0,110,117],
[95,97,102,99,107,101,0,99],
[98,98,103,94,105,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,125,142,130,125,105],
[92,0,135,144,99,91,95,103],
[102,76,0,76,132,104,93,110],
[86,67,135,0,106,86,45,92],
[69,112,79,105,0,96,88,96],
[81,120,107,125,115,0,116,152],
[86,116,118,166,123,95,0,96],
[106,108,101,119,115,59,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,97,123,113,106,131,130],
[133,0,107,127,130,108,124,96],
[114,104,0,95,137,92,100,115],
[88,84,116,0,111,78,108,114],
[98,81,74,100,0,95,79,81],
[105,103,119,133,116,0,94,127],
[80,87,111,103,132,117,0,122],
[81,115,96,97,130,84,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,115,103,103,105,115],
[95,0,108,118,98,94,105,118],
[111,103,0,109,109,108,89,105],
[96,93,102,0,101,102,100,113],
[108,113,102,110,0,92,108,108],
[108,117,103,109,119,0,100,96],
[106,106,122,111,103,111,0,113],
[96,93,106,98,103,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,135,160,97,130,129,160],
[107,0,112,68,125,89,61,104],
[76,99,0,109,99,46,67,99],
[51,143,102,0,123,82,104,127],
[114,86,112,88,0,120,111,117],
[81,122,165,129,91,0,115,122],
[82,150,144,107,100,96,0,111],
[51,107,112,84,94,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,100,97,88,89,97],
[106,0,110,98,94,92,93,85],
[99,101,0,92,94,91,92,93],
[111,113,119,0,108,100,103,98],
[114,117,117,103,0,97,104,92],
[123,119,120,111,114,0,106,104],
[122,118,119,108,107,105,0,106],
[114,126,118,113,119,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,102,104,107,119,113],
[115,0,109,116,122,102,124,125],
[112,102,0,120,113,103,113,122],
[109,95,91,0,98,89,113,105],
[107,89,98,113,0,99,99,109],
[104,109,108,122,112,0,118,128],
[92,87,98,98,112,93,0,100],
[98,86,89,106,102,83,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,114,115,96,109,106],
[87,0,94,105,101,85,83,103],
[101,117,0,123,111,107,114,126],
[97,106,88,0,106,81,83,107],
[96,110,100,105,0,82,93,112],
[115,126,104,130,129,0,112,115],
[102,128,97,128,118,99,0,109],
[105,108,85,104,99,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,141,92,113,102,106],
[113,0,124,126,114,102,121,134],
[115,87,0,129,76,102,103,112],
[70,85,82,0,79,109,107,132],
[119,97,135,132,0,108,140,134],
[98,109,109,102,103,0,113,99],
[109,90,108,104,71,98,0,100],
[105,77,99,79,77,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,99,123,106,109,106,100],
[95,0,101,108,111,94,95,93],
[112,110,0,106,109,99,100,84],
[88,103,105,0,91,88,92,97],
[105,100,102,120,0,116,94,103],
[102,117,112,123,95,0,114,104],
[105,116,111,119,117,97,0,111],
[111,118,127,114,108,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,13,43,43,118,43,211],
[93,0,93,93,123,123,123,168],
[198,118,0,30,30,105,123,198],
[168,118,181,0,30,105,123,168],
[168,88,181,181,0,118,136,181],
[93,88,106,106,93,0,93,168],
[168,88,88,88,75,118,0,181],
[0,43,13,43,30,43,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,105,103,115,82,115],
[101,0,75,98,105,124,93,90],
[121,136,0,119,127,103,108,117],
[106,113,92,0,103,101,96,108],
[108,106,84,108,0,95,73,98],
[96,87,108,110,116,0,85,97],
[129,118,103,115,138,126,0,112],
[96,121,94,103,113,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,100,94,97,89,100],
[108,0,115,105,113,108,112,114],
[108,96,0,104,105,102,94,100],
[111,106,107,0,109,104,97,111],
[117,98,106,102,0,107,100,107],
[114,103,109,107,104,0,103,105],
[122,99,117,114,111,108,0,111],
[111,97,111,100,104,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,97,104,108,108,119],
[106,0,114,102,111,101,105,107],
[110,97,0,100,113,106,117,108],
[114,109,111,0,104,102,105,107],
[107,100,98,107,0,102,104,109],
[103,110,105,109,109,0,109,117],
[103,106,94,106,107,102,0,116],
[92,104,103,104,102,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,84,102,104,111,121],
[116,0,95,117,119,99,99,127],
[121,116,0,119,104,106,121,121],
[127,94,92,0,126,111,132,121],
[109,92,107,85,0,105,120,132],
[107,112,105,100,106,0,109,112],
[100,112,90,79,91,102,0,117],
[90,84,90,90,79,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,130,110,110,106,106],
[110,0,116,123,107,101,102,105],
[92,95,0,112,103,78,109,105],
[81,88,99,0,100,80,86,96],
[101,104,108,111,0,96,107,96],
[101,110,133,131,115,0,117,118],
[105,109,102,125,104,94,0,94],
[105,106,106,115,115,93,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,106,109,102,110,121],
[106,0,96,102,107,102,109,108],
[113,115,0,111,105,108,108,107],
[105,109,100,0,107,109,114,107],
[102,104,106,104,0,112,105,104],
[109,109,103,102,99,0,102,107],
[101,102,103,97,106,109,0,108],
[90,103,104,104,107,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,118,119,104,119,72,84],
[83,0,122,100,101,83,78,67],
[93,89,0,93,105,107,76,85],
[92,111,118,0,117,118,106,100],
[107,110,106,94,0,108,85,98],
[92,128,104,93,103,0,82,86],
[139,133,135,105,126,129,0,118],
[127,144,126,111,113,125,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,119,108,102,108,123],
[95,0,106,111,88,95,110,107],
[105,105,0,106,93,103,109,110],
[92,100,105,0,95,92,102,104],
[103,123,118,116,0,111,107,106],
[109,116,108,119,100,0,95,101],
[103,101,102,109,104,116,0,107],
[88,104,101,107,105,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,95,102,96,93,128],
[104,0,112,105,94,110,104,135],
[104,99,0,101,93,94,96,115],
[116,106,110,0,105,87,101,133],
[109,117,118,106,0,95,89,126],
[115,101,117,124,116,0,125,126],
[118,107,115,110,122,86,0,129],
[83,76,96,78,85,85,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,105,99,101,95,96,99],
[130,0,116,107,110,113,97,108],
[106,95,0,92,100,101,86,92],
[112,104,119,0,111,111,123,99],
[110,101,111,100,0,110,90,103],
[116,98,110,100,101,0,111,102],
[115,114,125,88,121,100,0,105],
[112,103,119,112,108,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,105,104,113,95,114],
[108,0,115,116,113,99,106,117],
[102,96,0,99,106,93,107,100],
[106,95,112,0,106,95,104,95],
[107,98,105,105,0,104,89,102],
[98,112,118,116,107,0,101,107],
[116,105,104,107,122,110,0,112],
[97,94,111,116,109,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,112,113,116,120,118,98],
[86,0,95,98,102,112,118,88],
[99,116,0,95,97,110,107,108],
[98,113,116,0,100,146,118,101],
[95,109,114,111,0,131,140,101],
[91,99,101,65,80,0,100,87],
[93,93,104,93,71,111,0,93],
[113,123,103,110,110,124,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,105,118,104,103,104],
[119,0,109,120,116,108,108,102],
[121,102,0,113,113,115,100,102],
[106,91,98,0,100,105,95,106],
[93,95,98,111,0,104,73,96],
[107,103,96,106,107,0,106,100],
[108,103,111,116,138,105,0,112],
[107,109,109,105,115,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,109,105,102,95,98],
[112,0,113,105,115,113,112,113],
[92,98,0,103,111,94,91,97],
[102,106,108,0,116,104,100,96],
[106,96,100,95,0,103,104,87],
[109,98,117,107,108,0,97,99],
[116,99,120,111,107,114,0,97],
[113,98,114,115,124,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,106,103,111,108,101],
[103,0,108,102,106,119,108,101],
[103,103,0,97,99,97,104,92],
[105,109,114,0,107,109,111,97],
[108,105,112,104,0,117,112,107],
[100,92,114,102,94,0,102,94],
[103,103,107,100,99,109,0,96],
[110,110,119,114,104,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,90,88,98,96,88,91],
[109,0,85,84,98,96,87,91],
[121,126,0,101,95,104,94,99],
[123,127,110,0,107,101,93,100],
[113,113,116,104,0,121,112,109],
[115,115,107,110,90,0,109,97],
[123,124,117,118,99,102,0,100],
[120,120,112,111,102,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,105,95,106,114,110],
[95,0,102,97,116,102,114,105],
[96,109,0,106,97,110,104,102],
[106,114,105,0,105,114,111,98],
[116,95,114,106,0,111,119,102],
[105,109,101,97,100,0,105,96],
[97,97,107,100,92,106,0,100],
[101,106,109,113,109,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,94,106,98,101,103],
[108,0,108,105,111,105,110,97],
[110,103,0,117,119,104,117,110],
[117,106,94,0,110,101,118,110],
[105,100,92,101,0,98,102,95],
[113,106,107,110,113,0,117,100],
[110,101,94,93,109,94,0,100],
[108,114,101,101,116,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,107,99,114,110,97],
[102,0,112,106,87,99,116,98],
[94,99,0,100,100,99,106,96],
[104,105,111,0,104,101,116,107],
[112,124,111,107,0,101,117,107],
[97,112,112,110,110,0,106,92],
[101,95,105,95,94,105,0,88],
[114,113,115,104,104,119,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,84,109,105,94,95],
[102,0,99,97,100,95,87,93],
[119,112,0,108,103,120,114,114],
[127,114,103,0,118,112,110,115],
[102,111,108,93,0,100,93,100],
[106,116,91,99,111,0,109,107],
[117,124,97,101,118,102,0,101],
[116,118,97,96,111,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,110,103,137,87,119],
[88,0,94,85,105,130,111,106],
[106,117,0,100,111,118,100,121],
[101,126,111,0,119,129,88,117],
[108,106,100,92,0,123,79,116],
[74,81,93,82,88,0,93,102],
[124,100,111,123,132,118,0,126],
[92,105,90,94,95,109,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,134,87,90,111,83],
[111,0,94,92,103,104,91,90],
[114,117,0,112,103,124,83,96],
[77,119,99,0,96,100,78,108],
[124,108,108,115,0,98,101,84],
[121,107,87,111,113,0,102,82],
[100,120,128,133,110,109,0,122],
[128,121,115,103,127,129,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,129,99,120,158,154,104],
[83,0,106,98,96,121,123,98],
[82,105,0,115,124,135,129,120],
[112,113,96,0,104,120,141,124],
[91,115,87,107,0,134,135,107],
[53,90,76,91,77,0,109,97],
[57,88,82,70,76,102,0,80],
[107,113,91,87,104,114,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,99,95,88,90,95],
[110,0,106,102,110,101,113,104],
[119,105,0,109,110,103,112,90],
[112,109,102,0,103,110,107,108],
[116,101,101,108,0,104,111,100],
[123,110,108,101,107,0,98,105],
[121,98,99,104,100,113,0,93],
[116,107,121,103,111,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,90,104,100,94,97],
[108,0,111,109,111,102,103,109],
[111,100,0,111,106,97,99,99],
[121,102,100,0,108,100,111,104],
[107,100,105,103,0,97,105,96],
[111,109,114,111,114,0,102,91],
[117,108,112,100,106,109,0,108],
[114,102,112,107,115,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,114,108,103,110,118],
[104,0,94,113,97,101,126,114],
[99,117,0,125,105,94,103,133],
[97,98,86,0,80,92,106,115],
[103,114,106,131,0,113,107,119],
[108,110,117,119,98,0,106,122],
[101,85,108,105,104,105,0,122],
[93,97,78,96,92,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,101,105,103,100,111],
[108,0,101,111,101,118,101,104],
[106,110,0,101,100,114,94,112],
[110,100,110,0,108,120,112,119],
[106,110,111,103,0,108,110,108],
[108,93,97,91,103,0,93,114],
[111,110,117,99,101,118,0,106],
[100,107,99,92,103,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,99,103,98,95,84],
[102,0,103,99,108,116,108,100],
[102,108,0,107,109,118,115,114],
[112,112,104,0,109,114,120,116],
[108,103,102,102,0,89,110,110],
[113,95,93,97,122,0,107,101],
[116,103,96,91,101,104,0,97],
[127,111,97,95,101,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,93,98,125,108,100,93],
[96,0,97,107,99,84,94,85],
[118,114,0,129,120,100,106,100],
[113,104,82,0,111,89,111,96],
[86,112,91,100,0,91,107,84],
[103,127,111,122,120,0,112,113],
[111,117,105,100,104,99,0,87],
[118,126,111,115,127,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,80,108,78,111,85],
[100,0,93,92,111,84,105,106],
[99,118,0,97,99,99,129,124],
[131,119,114,0,103,100,104,114],
[103,100,112,108,0,106,126,106],
[133,127,112,111,105,0,110,109],
[100,106,82,107,85,101,0,120],
[126,105,87,97,105,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,123,128,111,92,111,112],
[105,0,135,134,121,115,98,117],
[88,76,0,100,87,65,76,74],
[83,77,111,0,102,81,81,84],
[100,90,124,109,0,92,92,98],
[119,96,146,130,119,0,107,131],
[100,113,135,130,119,104,0,105],
[99,94,137,127,113,80,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,148,136,151,162,105],
[95,0,69,81,67,100,137,72],
[101,142,0,170,146,126,131,111],
[63,130,41,0,125,120,86,119],
[75,144,65,86,0,119,94,119],
[60,111,85,91,92,0,123,84],
[49,74,80,125,117,88,0,64],
[106,139,100,92,92,127,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,87,98,79,97,97],
[123,0,116,106,107,110,105,118],
[108,95,0,84,95,99,101,86],
[124,105,127,0,112,106,107,114],
[113,104,116,99,0,93,111,107],
[132,101,112,105,118,0,111,108],
[114,106,110,104,100,100,0,99],
[114,93,125,97,104,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,106,105,109,97,104],
[111,0,105,126,111,113,107,104],
[114,106,0,107,114,117,101,115],
[105,85,104,0,108,97,98,108],
[106,100,97,103,0,89,94,101],
[102,98,94,114,122,0,93,99],
[114,104,110,113,117,118,0,112],
[107,107,96,103,110,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,114,105,115,116,107],
[97,0,108,112,107,109,105,105],
[103,103,0,110,97,105,109,103],
[97,99,101,0,107,106,101,104],
[106,104,114,104,0,111,106,121],
[96,102,106,105,100,0,96,99],
[95,106,102,110,105,115,0,107],
[104,106,108,107,90,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,95,94,111,119,99],
[108,0,106,104,102,106,111,115],
[106,105,0,94,101,105,94,100],
[116,107,117,0,105,108,114,102],
[117,109,110,106,0,109,112,97],
[100,105,106,103,102,0,115,104],
[92,100,117,97,99,96,0,105],
[112,96,111,109,114,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,102,92,107,105,96],
[115,0,116,106,95,102,113,104],
[113,95,0,106,107,103,111,102],
[109,105,105,0,98,103,107,104],
[119,116,104,113,0,94,113,112],
[104,109,108,108,117,0,112,112],
[106,98,100,104,98,99,0,108],
[115,107,109,107,99,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,92,104,101,112,89],
[94,0,127,102,103,94,97,92],
[91,84,0,87,95,87,105,98],
[119,109,124,0,107,93,124,103],
[107,108,116,104,0,112,106,113],
[110,117,124,118,99,0,122,99],
[99,114,106,87,105,89,0,98],
[122,119,113,108,98,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,126,85,211,211,211,144],
[67,0,126,152,67,67,211,59],
[85,85,0,85,152,152,85,85],
[126,59,126,0,126,126,211,59],
[0,144,59,85,0,59,144,59],
[0,144,59,85,152,0,144,59],
[0,0,126,0,67,67,0,59],
[67,152,126,152,152,152,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,98,124,99,107,91,89],
[122,0,112,134,123,125,112,90],
[113,99,0,119,108,95,122,111],
[87,77,92,0,86,102,101,73],
[112,88,103,125,0,117,108,102],
[104,86,116,109,94,0,92,95],
[120,99,89,110,103,119,0,98],
[122,121,100,138,109,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,106,105,109,99,114],
[114,0,109,115,99,109,124,116],
[107,102,0,112,106,115,106,102],
[105,96,99,0,106,108,110,97],
[106,112,105,105,0,103,102,98],
[102,102,96,103,108,0,98,96],
[112,87,105,101,109,113,0,101],
[97,95,109,114,113,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,68,98,115,135,96],
[93,0,128,88,108,92,113,102],
[103,83,0,79,79,117,119,110],
[143,123,132,0,96,119,144,124],
[113,103,132,115,0,143,134,122],
[96,119,94,92,68,0,118,101],
[76,98,92,67,77,93,0,88],
[115,109,101,87,89,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,87,79,95,82,94,88],
[110,0,104,106,90,112,108,95],
[124,107,0,79,109,115,111,100],
[132,105,132,0,138,119,137,125],
[116,121,102,73,0,102,101,100],
[129,99,96,92,109,0,103,102],
[117,103,100,74,110,108,0,95],
[123,116,111,86,111,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,120,93,121,97,91,110],
[117,0,111,77,125,105,82,99],
[91,100,0,93,131,83,70,89],
[118,134,118,0,138,107,87,90],
[90,86,80,73,0,102,62,74],
[114,106,128,104,109,0,84,85],
[120,129,141,124,149,127,0,104],
[101,112,122,121,137,126,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,87,103,111,82,103,84],
[128,0,106,123,126,130,121,101],
[124,105,0,123,128,106,115,107],
[108,88,88,0,110,106,112,91],
[100,85,83,101,0,75,95,70],
[129,81,105,105,136,0,109,95],
[108,90,96,99,116,102,0,101],
[127,110,104,120,141,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,112,116,108,101,126],
[97,0,112,91,119,105,73,110],
[92,99,0,101,111,103,81,91],
[99,120,110,0,104,100,69,116],
[95,92,100,107,0,101,80,96],
[103,106,108,111,110,0,107,123],
[110,138,130,142,131,104,0,130],
[85,101,120,95,115,88,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,95,96,115,99,99],
[101,0,109,100,94,110,109,100],
[101,102,0,95,103,107,108,87],
[116,111,116,0,106,110,104,107],
[115,117,108,105,0,111,109,108],
[96,101,104,101,100,0,100,99],
[112,102,103,107,102,111,0,101],
[112,111,124,104,103,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,108,98,105,111,96],
[105,0,97,97,95,101,102,107],
[105,114,0,104,108,110,109,109],
[103,114,107,0,98,98,102,103],
[113,116,103,113,0,109,117,112],
[106,110,101,113,102,0,107,110],
[100,109,102,109,94,104,0,98],
[115,104,102,108,99,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,107,110,108,99,99],
[114,0,101,112,119,114,113,108],
[101,110,0,110,110,104,91,107],
[104,99,101,0,109,101,99,103],
[101,92,101,102,0,107,102,94],
[103,97,107,110,104,0,106,103],
[112,98,120,112,109,105,0,111],
[112,103,104,108,117,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,113,110,102,104,124],
[122,0,102,122,111,141,139,151],
[117,109,0,107,97,121,107,121],
[98,89,104,0,110,113,107,110],
[101,100,114,101,0,115,119,104],
[109,70,90,98,96,0,111,123],
[107,72,104,104,92,100,0,121],
[87,60,90,101,107,88,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,129,132,116,113,116],
[109,0,110,99,128,135,112,104],
[107,101,0,93,107,113,97,112],
[82,112,118,0,131,117,107,112],
[79,83,104,80,0,114,104,109],
[95,76,98,94,97,0,90,95],
[98,99,114,104,107,121,0,105],
[95,107,99,99,102,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,117,109,102,110,96],
[105,0,102,111,92,99,97,104],
[105,109,0,116,115,106,120,114],
[94,100,95,0,93,89,102,104],
[102,119,96,118,0,99,118,111],
[109,112,105,122,112,0,106,108],
[101,114,91,109,93,105,0,97],
[115,107,97,107,100,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,116,132,111,112,128],
[93,0,90,109,119,119,92,110],
[109,121,0,120,104,115,103,129],
[95,102,91,0,121,120,97,114],
[79,92,107,90,0,112,98,101],
[100,92,96,91,99,0,104,102],
[99,119,108,114,113,107,0,126],
[83,101,82,97,110,109,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,112,113,121,116,101],
[98,0,93,89,107,109,106,99],
[113,118,0,112,118,120,112,105],
[99,122,99,0,112,116,111,118],
[98,104,93,99,0,111,99,103],
[90,102,91,95,100,0,92,98],
[95,105,99,100,112,119,0,96],
[110,112,106,93,108,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,110,106,98,108,107],
[105,0,96,105,100,108,99,90],
[109,115,0,116,111,111,101,100],
[101,106,95,0,100,97,98,90],
[105,111,100,111,0,108,105,104],
[113,103,100,114,103,0,103,95],
[103,112,110,113,106,108,0,95],
[104,121,111,121,107,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,91,94,106,108,96],
[117,0,92,120,114,103,122,109],
[111,119,0,125,112,100,122,112],
[120,91,86,0,117,109,112,108],
[117,97,99,94,0,111,103,98],
[105,108,111,102,100,0,104,95],
[103,89,89,99,108,107,0,104],
[115,102,99,103,113,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,108,103,99,98,101],
[104,0,109,111,97,108,94,109],
[108,102,0,111,104,100,99,92],
[103,100,100,0,104,102,99,97],
[108,114,107,107,0,101,105,102],
[112,103,111,109,110,0,105,103],
[113,117,112,112,106,106,0,98],
[110,102,119,114,109,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,108,103,90,100,100],
[114,0,116,114,106,109,105,109],
[97,95,0,103,93,89,93,101],
[103,97,108,0,99,105,104,105],
[108,105,118,112,0,96,99,102],
[121,102,122,106,115,0,113,102],
[111,106,118,107,112,98,0,104],
[111,102,110,106,109,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,113,111,137,99,100,107],
[131,0,114,123,123,99,98,97],
[98,97,0,101,103,86,84,87],
[100,88,110,0,110,88,105,97],
[74,88,108,101,0,107,99,79],
[112,112,125,123,104,0,137,103],
[111,113,127,106,112,74,0,93],
[104,114,124,114,132,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,95,96,88,102,107],
[116,0,113,114,105,112,108,116],
[114,98,0,98,100,96,102,103],
[116,97,113,0,101,99,103,108],
[115,106,111,110,0,99,92,115],
[123,99,115,112,112,0,103,116],
[109,103,109,108,119,108,0,120],
[104,95,108,103,96,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,134,108,99,80,97],
[98,0,104,103,82,101,90,91],
[96,107,0,121,93,107,86,104],
[77,108,90,0,78,80,70,94],
[103,129,118,133,0,120,103,110],
[112,110,104,131,91,0,88,107],
[131,121,125,141,108,123,0,104],
[114,120,107,117,101,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,105,125,125,102,114],
[103,0,101,106,113,108,97,122],
[109,110,0,101,112,116,111,118],
[106,105,110,0,111,106,108,115],
[86,98,99,100,0,109,101,119],
[86,103,95,105,102,0,110,120],
[109,114,100,103,110,101,0,119],
[97,89,93,96,92,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,95,121,102,94,91],
[91,0,89,83,104,110,107,107],
[111,122,0,108,125,120,89,98],
[116,128,103,0,132,143,114,128],
[90,107,86,79,0,115,74,94],
[109,101,91,68,96,0,95,101],
[117,104,122,97,137,116,0,110],
[120,104,113,83,117,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,103,109,97,100,96],
[115,0,99,109,103,100,96,97],
[108,112,0,111,105,102,101,110],
[108,102,100,0,113,94,103,99],
[102,108,106,98,0,106,107,99],
[114,111,109,117,105,0,114,99],
[111,115,110,108,104,97,0,103],
[115,114,101,112,112,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,106,95,91,96,119],
[117,0,97,122,107,111,131,126],
[117,114,0,109,111,105,112,114],
[105,89,102,0,112,73,109,113],
[116,104,100,99,0,101,103,76],
[120,100,106,138,110,0,109,119],
[115,80,99,102,108,102,0,125],
[92,85,97,98,135,92,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,117,98,92,112,102],
[96,0,84,91,94,91,107,97],
[106,127,0,104,91,96,117,115],
[94,120,107,0,96,106,111,107],
[113,117,120,115,0,102,110,122],
[119,120,115,105,109,0,109,122],
[99,104,94,100,101,102,0,95],
[109,114,96,104,89,89,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,117,107,110,125,125],
[127,0,124,98,119,155,115,111],
[116,87,0,50,74,92,115,100],
[94,113,161,0,129,150,137,164],
[104,92,137,82,0,136,132,140],
[101,56,119,61,75,0,122,119],
[86,96,96,74,79,89,0,86],
[86,100,111,47,71,92,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,106,97,105,107,94],
[109,0,100,101,94,103,105,110],
[97,111,0,101,101,105,115,109],
[105,110,110,0,103,119,102,109],
[114,117,110,108,0,116,115,103],
[106,108,106,92,95,0,95,99],
[104,106,96,109,96,116,0,97],
[117,101,102,102,108,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,134,118,113,76,109,103],
[51,0,84,73,46,79,108,72],
[77,127,0,117,68,120,137,90],
[93,138,94,0,68,67,98,66],
[98,165,143,143,0,139,104,106],
[135,132,91,144,72,0,124,124],
[102,103,74,113,107,87,0,67],
[108,139,121,145,105,87,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,112,113,105,104,110],
[105,0,123,111,106,106,98,103],
[103,88,0,107,92,97,102,102],
[99,100,104,0,101,103,104,96],
[98,105,119,110,0,106,117,112],
[106,105,114,108,105,0,108,111],
[107,113,109,107,94,103,0,107],
[101,108,109,115,99,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,123,112,121,119,105,108],
[116,0,157,81,112,127,137,121],
[88,54,0,71,123,81,89,107],
[99,130,140,0,125,111,137,114],
[90,99,88,86,0,94,105,111],
[92,84,130,100,117,0,97,88],
[106,74,122,74,106,114,0,108],
[103,90,104,97,100,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,88,103,110,86,160,109],
[96,0,59,81,98,107,147,115],
[123,152,0,154,101,118,171,135],
[108,130,57,0,96,90,167,125],
[101,113,110,115,0,118,147,98],
[125,104,93,121,93,0,173,121],
[51,64,40,44,64,38,0,50],
[102,96,76,86,113,90,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,123,86,90,91,93,107],
[120,0,139,102,117,136,125,108],
[88,72,0,99,91,108,96,74],
[125,109,112,0,109,113,98,116],
[121,94,120,102,0,120,110,96],
[120,75,103,98,91,0,87,100],
[118,86,115,113,101,124,0,90],
[104,103,137,95,115,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,121,115,62,76,76,71],
[68,0,98,68,68,54,68,68],
[90,113,0,61,80,109,22,71],
[96,143,150,0,121,87,88,121],
[149,143,131,90,0,54,105,108],
[135,157,102,124,157,0,91,124],
[135,143,189,123,106,120,0,97],
[140,143,140,90,103,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,101,100,95,103,98],
[107,0,119,102,84,97,94,95],
[99,92,0,106,92,91,95,97],
[110,109,105,0,94,107,96,105],
[111,127,119,117,0,108,109,100],
[116,114,120,104,103,0,108,116],
[108,117,116,115,102,103,0,111],
[113,116,114,106,111,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,81,72,91,121,135,98],
[115,0,102,118,107,135,158,100],
[130,109,0,112,95,137,151,97],
[139,93,99,0,111,116,156,113],
[120,104,116,100,0,147,123,106],
[90,76,74,95,64,0,114,100],
[76,53,60,55,88,97,0,109],
[113,111,114,98,105,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,89,90,101,106,108,100],
[104,0,92,109,107,126,108,105],
[122,119,0,104,113,135,125,106],
[121,102,107,0,114,130,118,112],
[110,104,98,97,0,111,115,101],
[105,85,76,81,100,0,105,91],
[103,103,86,93,96,106,0,101],
[111,106,105,99,110,120,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,106,127,118,107,105],
[97,0,120,116,113,108,111,114],
[94,91,0,85,98,99,92,98],
[105,95,126,0,126,128,108,121],
[84,98,113,85,0,102,98,115],
[93,103,112,83,109,0,97,97],
[104,100,119,103,113,114,0,120],
[106,97,113,90,96,114,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,108,116,122,105,107],
[104,0,105,107,105,111,111,113],
[100,106,0,115,108,116,101,119],
[103,104,96,0,108,116,102,110],
[95,106,103,103,0,111,109,104],
[89,100,95,95,100,0,103,107],
[106,100,110,109,102,108,0,109],
[104,98,92,101,107,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,103,104,101,116,110],
[103,0,126,96,105,107,115,103],
[100,85,0,101,105,108,102,98],
[108,115,110,0,108,105,119,122],
[107,106,106,103,0,107,111,96],
[110,104,103,106,104,0,114,108],
[95,96,109,92,100,97,0,98],
[101,108,113,89,115,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,112,106,100,122,92],
[105,0,111,116,114,103,111,110],
[104,100,0,110,100,93,101,94],
[99,95,101,0,117,96,110,92],
[105,97,111,94,0,94,107,85],
[111,108,118,115,117,0,121,103],
[89,100,110,101,104,90,0,95],
[119,101,117,119,126,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,92,100,98,112,109],
[89,0,85,79,89,94,100,111],
[104,126,0,109,108,125,94,119],
[119,132,102,0,106,101,103,107],
[111,122,103,105,0,118,113,105],
[113,117,86,110,93,0,91,112],
[99,111,117,108,98,120,0,119],
[102,100,92,104,106,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,113,121,100,117,103],
[101,0,122,106,118,106,123,110],
[94,89,0,103,92,94,115,101],
[98,105,108,0,110,109,118,111],
[90,93,119,101,0,86,110,103],
[111,105,117,102,125,0,132,107],
[94,88,96,93,101,79,0,98],
[108,101,110,100,108,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,80,68,81,64,71,77],
[138,0,111,135,93,83,107,100],
[131,100,0,139,116,102,92,136],
[143,76,72,0,78,99,124,112],
[130,118,95,133,0,112,112,135],
[147,128,109,112,99,0,129,124],
[140,104,119,87,99,82,0,143],
[134,111,75,99,76,87,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,115,122,112,108,110,100],
[91,0,97,107,105,85,85,94],
[96,114,0,131,127,103,95,113],
[89,104,80,0,99,84,97,99],
[99,106,84,112,0,90,84,98],
[103,126,108,127,121,0,99,115],
[101,126,116,114,127,112,0,112],
[111,117,98,112,113,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,92,117,100,92,105],
[119,0,104,98,121,98,97,100],
[104,107,0,103,104,114,102,97],
[119,113,108,0,105,108,98,99],
[94,90,107,106,0,98,93,96],
[111,113,97,103,113,0,106,87],
[119,114,109,113,118,105,0,108],
[106,111,114,112,115,124,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,101,109,118,143,113,77],
[131,0,147,90,102,136,122,94],
[110,64,0,103,78,79,65,29],
[102,121,108,0,105,111,75,69],
[93,109,133,106,0,134,98,34],
[68,75,132,100,77,0,44,65],
[98,89,146,136,113,167,0,129],
[134,117,182,142,177,146,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,96,102,103,102,102,116],
[109,0,95,95,97,92,91,97],
[115,116,0,93,111,119,106,113],
[109,116,118,0,117,104,115,126],
[108,114,100,94,0,103,105,128],
[109,119,92,107,108,0,110,122],
[109,120,105,96,106,101,0,106],
[95,114,98,85,83,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,60,64,80,86,102,94],
[155,0,97,94,100,127,103,112],
[151,114,0,92,107,118,121,110],
[147,117,119,0,112,105,127,108],
[131,111,104,99,0,127,117,91],
[125,84,93,106,84,0,124,100],
[109,108,90,84,94,87,0,99],
[117,99,101,103,120,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,70,114,94,100,77],
[115,0,91,127,123,116,105,88],
[118,120,0,99,120,106,144,111],
[141,84,112,0,118,88,139,110],
[97,88,91,93,0,91,110,53],
[117,95,105,123,120,0,120,98],
[111,106,67,72,101,91,0,90],
[134,123,100,101,158,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,110,105,106,106,103],
[100,0,109,104,110,103,106,102],
[100,102,0,102,110,106,109,100],
[101,107,109,0,93,108,104,91],
[106,101,101,118,0,108,105,108],
[105,108,105,103,103,0,107,105],
[105,105,102,107,106,104,0,103],
[108,109,111,120,103,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,123,101,111,128,108,102],
[105,0,117,108,105,113,120,111],
[88,94,0,94,93,109,108,89],
[110,103,117,0,109,117,97,102],
[100,106,118,102,0,108,108,97],
[83,98,102,94,103,0,92,86],
[103,91,103,114,103,119,0,101],
[109,100,122,109,114,125,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,90,156,121,135,105,106],
[109,0,110,153,103,110,109,100],
[121,101,0,143,134,121,105,122],
[55,58,68,0,68,78,67,89],
[90,108,77,143,0,124,105,108],
[76,101,90,133,87,0,94,104],
[106,102,106,144,106,117,0,109],
[105,111,89,122,103,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,109,102,124,89,82,96],
[91,0,108,111,119,97,82,95],
[102,103,0,103,101,74,78,91],
[109,100,108,0,120,74,87,93],
[87,92,110,91,0,79,85,84],
[122,114,137,137,132,0,95,133],
[129,129,133,124,126,116,0,103],
[115,116,120,118,127,78,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,107,109,126,100,109],
[97,0,96,100,99,117,98,99],
[105,115,0,104,100,117,112,113],
[104,111,107,0,102,122,102,110],
[102,112,111,109,0,134,110,98],
[85,94,94,89,77,0,93,88],
[111,113,99,109,101,118,0,112],
[102,112,98,101,113,123,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,90,99,99,98,105,113],
[98,0,95,109,101,98,122,112],
[121,116,0,96,105,126,128,119],
[112,102,115,0,113,108,113,117],
[112,110,106,98,0,113,112,114],
[113,113,85,103,98,0,113,110],
[106,89,83,98,99,98,0,109],
[98,99,92,94,97,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,114,115,100,109,107],
[108,0,114,103,109,103,116,92],
[102,97,0,99,120,106,115,102],
[97,108,112,0,111,110,112,104],
[96,102,91,100,0,96,104,100],
[111,108,105,101,115,0,115,103],
[102,95,96,99,107,96,0,99],
[104,119,109,107,111,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,120,113,92,108,103],
[113,0,100,117,117,113,110,102],
[108,111,0,129,118,108,113,95],
[91,94,82,0,102,77,84,86],
[98,94,93,109,0,98,89,90],
[119,98,103,134,113,0,99,106],
[103,101,98,127,122,112,0,94],
[108,109,116,125,121,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,77,77,126,78,98,103],
[122,0,91,84,97,87,96,91],
[134,120,0,114,123,113,110,96],
[134,127,97,0,134,113,125,112],
[85,114,88,77,0,76,91,77],
[133,124,98,98,135,0,131,123],
[113,115,101,86,120,80,0,92],
[108,120,115,99,134,88,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,96,98,100,111,115],
[109,0,99,101,103,107,106,108],
[111,112,0,107,108,116,105,116],
[115,110,104,0,109,117,112,111],
[113,108,103,102,0,110,112,115],
[111,104,95,94,101,0,110,110],
[100,105,106,99,99,101,0,113],
[96,103,95,100,96,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,88,100,99,104,104,99],
[122,0,117,108,114,118,104,117],
[123,94,0,108,107,113,117,112],
[111,103,103,0,104,121,100,105],
[112,97,104,107,0,119,113,101],
[107,93,98,90,92,0,103,103],
[107,107,94,111,98,108,0,112],
[112,94,99,106,110,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,108,92,101,97,96],
[95,0,93,89,87,87,93,91],
[111,118,0,101,105,95,103,90],
[103,122,110,0,101,98,103,97],
[119,124,106,110,0,112,105,119],
[110,124,116,113,99,0,95,101],
[114,118,108,108,106,116,0,102],
[115,120,121,114,92,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,109,107,118,104,99],
[94,0,101,104,109,105,101,97],
[111,110,0,108,115,115,123,105],
[102,107,103,0,119,118,104,102],
[104,102,96,92,0,101,98,89],
[93,106,96,93,110,0,99,106],
[107,110,88,107,113,112,0,98],
[112,114,106,109,122,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,120,117,95,118,106],
[85,0,108,105,119,77,115,107],
[99,103,0,110,119,104,122,111],
[91,106,101,0,117,109,134,113],
[94,92,92,94,0,95,116,97],
[116,134,107,102,116,0,128,118],
[93,96,89,77,95,83,0,91],
[105,104,100,98,114,93,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,117,106,116,123,131],
[106,0,111,111,105,117,127,118],
[106,100,0,109,105,102,112,118],
[94,100,102,0,96,104,112,115],
[105,106,106,115,0,107,124,117],
[95,94,109,107,104,0,119,111],
[88,84,99,99,87,92,0,99],
[80,93,93,96,94,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,88,108,57,32,56,98],
[189,0,156,139,136,147,104,123],
[123,55,0,89,45,42,47,83],
[103,72,122,0,85,68,71,97],
[154,75,166,126,0,84,120,131],
[179,64,169,143,127,0,107,130],
[155,107,164,140,91,104,0,109],
[113,88,128,114,80,81,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,127,84,106,91,81,104],
[91,0,65,104,81,111,80,103],
[84,146,0,101,77,100,104,112],
[127,107,110,0,98,102,86,126],
[105,130,134,113,0,107,114,100],
[120,100,111,109,104,0,73,95],
[130,131,107,125,97,138,0,132],
[107,108,99,85,111,116,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,103,99,98,100,99],
[113,0,100,108,109,114,111,108],
[105,111,0,106,103,108,96,101],
[108,103,105,0,105,104,104,101],
[112,102,108,106,0,113,108,105],
[113,97,103,107,98,0,108,111],
[111,100,115,107,103,103,0,106],
[112,103,110,110,106,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,84,71,102,74,99,131],
[143,0,91,107,90,98,145,156],
[127,120,0,106,102,109,122,145],
[140,104,105,0,91,120,133,145],
[109,121,109,120,0,96,139,132],
[137,113,102,91,115,0,122,141],
[112,66,89,78,72,89,0,134],
[80,55,66,66,79,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,115,83,124,146,90,135],
[62,0,55,83,107,81,83,94],
[96,156,0,89,131,103,110,98],
[128,128,122,0,122,138,103,138],
[87,104,80,89,0,115,92,69],
[65,130,108,73,96,0,86,89],
[121,128,101,108,119,125,0,100],
[76,117,113,73,142,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,131,120,88,102,104,125],
[109,0,127,125,115,111,104,128],
[80,84,0,87,85,89,86,102],
[91,86,124,0,95,114,94,119],
[123,96,126,116,0,129,120,117],
[109,100,122,97,82,0,108,105],
[107,107,125,117,91,103,0,125],
[86,83,109,92,94,106,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,86,65,98,86,75,60],
[130,0,130,102,111,109,78,94],
[125,81,0,115,110,130,78,94],
[146,109,96,0,116,107,110,104],
[113,100,101,95,0,108,110,97],
[125,102,81,104,103,0,60,81],
[136,133,133,101,101,151,0,114],
[151,117,117,107,114,130,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,114,102,117,104,103],
[108,0,113,103,108,107,97,113],
[107,98,0,121,100,107,113,97],
[97,108,90,0,93,113,96,103],
[109,103,111,118,0,114,97,108],
[94,104,104,98,97,0,93,109],
[107,114,98,115,114,118,0,112],
[108,98,114,108,103,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,103,99,102,100,102],
[100,0,108,110,88,111,120,94],
[102,103,0,101,96,104,112,92],
[108,101,110,0,101,115,103,110],
[112,123,115,110,0,115,117,99],
[109,100,107,96,96,0,105,99],
[111,91,99,108,94,106,0,86],
[109,117,119,101,112,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,104,107,99,97,100,93],
[126,0,125,135,106,100,117,101],
[107,86,0,104,99,94,113,93],
[104,76,107,0,96,107,104,87],
[112,105,112,115,0,116,107,85],
[114,111,117,104,95,0,93,73],
[111,94,98,107,104,118,0,108],
[118,110,118,124,126,138,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,75,31,80,101,152,75],
[126,0,175,82,131,201,201,126],
[136,36,0,82,80,118,108,82],
[180,129,129,0,93,160,201,126],
[131,80,131,118,0,162,152,136],
[110,10,93,51,49,0,175,82],
[59,10,103,10,59,36,0,10],
[136,85,129,85,75,129,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,112,110,106,104,113],
[103,0,112,116,102,110,105,110],
[99,99,0,114,108,100,107,109],
[99,95,97,0,88,100,103,111],
[101,109,103,123,0,118,110,120],
[105,101,111,111,93,0,97,103],
[107,106,104,108,101,114,0,110],
[98,101,102,100,91,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,100,91,99,101,85],
[119,0,104,90,113,105,120,103],
[103,107,0,93,99,96,127,97],
[111,121,118,0,87,115,111,95],
[120,98,112,124,0,101,131,124],
[112,106,115,96,110,0,119,108],
[110,91,84,100,80,92,0,98],
[126,108,114,116,87,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,91,86,113,115,87],
[104,0,84,138,130,97,105,105],
[94,127,0,129,100,97,98,102],
[120,73,82,0,83,88,77,79],
[125,81,111,128,0,106,99,59],
[98,114,114,123,105,0,111,120],
[96,106,113,134,112,100,0,95],
[124,106,109,132,152,91,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,89,98,91,91,93,91],
[102,0,117,93,71,103,96,113],
[122,94,0,89,94,100,95,106],
[113,118,122,0,107,122,83,111],
[120,140,117,104,0,125,108,112],
[120,108,111,89,86,0,110,113],
[118,115,116,128,103,101,0,114],
[120,98,105,100,99,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,123,117,81,118,90,110],
[100,0,104,149,81,81,119,127],
[88,107,0,101,89,108,63,127],
[94,62,110,0,93,74,104,122],
[130,130,122,118,0,101,134,138],
[93,130,103,137,110,0,66,162],
[121,92,148,107,77,145,0,146],
[101,84,84,89,73,49,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,111,118,107,91,103],
[110,0,123,114,123,101,113,89],
[102,88,0,115,102,89,88,97],
[100,97,96,0,106,105,81,101],
[93,88,109,105,0,106,87,85],
[104,110,122,106,105,0,91,97],
[120,98,123,130,124,120,0,114],
[108,122,114,110,126,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,107,103,114,114,109],
[101,0,102,101,114,108,110,118],
[106,109,0,106,100,113,100,103],
[104,110,105,0,100,108,105,119],
[108,97,111,111,0,119,113,120],
[97,103,98,103,92,0,93,108],
[97,101,111,106,98,118,0,114],
[102,93,108,92,91,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,119,113,119,113,99],
[90,0,118,97,92,130,111,110],
[111,93,0,102,119,102,103,90],
[92,114,109,0,121,116,89,99],
[98,119,92,90,0,113,85,105],
[92,81,109,95,98,0,90,100],
[98,100,108,122,126,121,0,104],
[112,101,121,112,106,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,78,117,100,93,121],
[113,0,114,124,100,118,116,139],
[118,97,0,88,98,103,100,108],
[133,87,123,0,109,131,119,143],
[94,111,113,102,0,124,98,119],
[111,93,108,80,87,0,84,103],
[118,95,111,92,113,127,0,149],
[90,72,103,68,92,108,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,104,98,115,109,110],
[99,0,110,97,110,115,107,103],
[103,101,0,96,102,95,106,110],
[107,114,115,0,106,113,111,102],
[113,101,109,105,0,117,101,102],
[96,96,116,98,94,0,107,89],
[102,104,105,100,110,104,0,109],
[101,108,101,109,109,122,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,127,103,119,133,118],
[92,0,91,99,87,109,110,101],
[95,120,0,112,86,111,106,103],
[84,112,99,0,86,98,102,95],
[108,124,125,125,0,109,122,102],
[92,102,100,113,102,0,128,93],
[78,101,105,109,89,83,0,103],
[93,110,108,116,109,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,116,112,108,111,105],
[93,0,113,113,98,100,111,94],
[97,98,0,114,101,101,104,102],
[95,98,97,0,99,105,102,111],
[99,113,110,112,0,113,109,104],
[103,111,110,106,98,0,109,97],
[100,100,107,109,102,102,0,104],
[106,117,109,100,107,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,99,86,108,86,107],
[115,0,91,117,90,132,112,116],
[117,120,0,120,93,123,100,108],
[112,94,91,0,89,103,79,82],
[125,121,118,122,0,125,102,121],
[103,79,88,108,86,0,95,113],
[125,99,111,132,109,116,0,110],
[104,95,103,129,90,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,83,94,94,103,86,91],
[127,0,107,108,108,101,98,113],
[128,104,0,108,117,124,108,107],
[117,103,103,0,106,123,113,109],
[117,103,94,105,0,116,88,111],
[108,110,87,88,95,0,92,113],
[125,113,103,98,123,119,0,109],
[120,98,104,102,100,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,92,94,75,87,91],
[111,0,108,89,99,79,97,85],
[102,103,0,107,110,78,92,87],
[119,122,104,0,113,109,106,134],
[117,112,101,98,0,108,133,101],
[136,132,133,102,103,0,121,121],
[124,114,119,105,78,90,0,101],
[120,126,124,77,110,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,93,103,90,102,97],
[113,0,105,112,121,107,119,112],
[106,106,0,105,106,103,116,109],
[118,99,106,0,116,104,111,92],
[108,90,105,95,0,92,112,112],
[121,104,108,107,119,0,113,114],
[109,92,95,100,99,98,0,91],
[114,99,102,119,99,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,129,125,117,102,123,133],
[84,0,108,109,105,94,102,119],
[82,103,0,102,95,102,114,117],
[86,102,109,0,94,106,108,97],
[94,106,116,117,0,109,101,115],
[109,117,109,105,102,0,106,128],
[88,109,97,103,110,105,0,119],
[78,92,94,114,96,83,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,105,90,118,107,105,106],
[122,0,108,114,101,113,102,103],
[106,103,0,100,108,99,106,99],
[121,97,111,0,117,113,111,114],
[93,110,103,94,0,111,109,125],
[104,98,112,98,100,0,106,115],
[106,109,105,100,102,105,0,117],
[105,108,112,97,86,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,124,99,107,121,114],
[97,0,120,123,106,119,116,106],
[100,91,0,111,106,90,97,88],
[87,88,100,0,83,99,110,99],
[112,105,105,128,0,94,123,110],
[104,92,121,112,117,0,122,95],
[90,95,114,101,88,89,0,94],
[97,105,123,112,101,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,90,104,103,94,97,92],
[126,0,128,131,115,128,111,105],
[121,83,0,119,106,101,102,91],
[107,80,92,0,93,92,102,96],
[108,96,105,118,0,100,114,106],
[117,83,110,119,111,0,110,99],
[114,100,109,109,97,101,0,102],
[119,106,120,115,105,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,125,126,102,119,114],
[95,0,108,106,101,96,100,107],
[96,103,0,99,108,98,103,102],
[86,105,112,0,112,102,106,108],
[85,110,103,99,0,103,100,95],
[109,115,113,109,108,0,102,111],
[92,111,108,105,111,109,0,116],
[97,104,109,103,116,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,116,106,102,107,103],
[95,0,107,125,110,97,114,106],
[104,104,0,107,102,103,91,97],
[95,86,104,0,97,95,95,89],
[105,101,109,114,0,111,105,113],
[109,114,108,116,100,0,109,102],
[104,97,120,116,106,102,0,108],
[108,105,114,122,98,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,112,108,104,107,107],
[98,0,122,104,95,96,88,90],
[89,89,0,107,95,91,100,92],
[99,107,104,0,106,107,107,112],
[103,116,116,105,0,104,101,109],
[107,115,120,104,107,0,91,113],
[104,123,111,104,110,120,0,114],
[104,121,119,99,102,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,131,134,107,98,114],
[102,0,113,110,119,85,114,110],
[102,98,0,116,125,103,91,123],
[80,101,95,0,99,75,97,94],
[77,92,86,112,0,101,80,114],
[104,126,108,136,110,0,111,128],
[113,97,120,114,131,100,0,108],
[97,101,88,117,97,83,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,93,101,106,102,88],
[110,0,113,109,110,101,106,109],
[111,98,0,107,97,98,89,97],
[118,102,104,0,109,109,102,89],
[110,101,114,102,0,108,104,104],
[105,110,113,102,103,0,106,93],
[109,105,122,109,107,105,0,100],
[123,102,114,122,107,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,98,116,85,92,98],
[99,0,107,112,123,110,104,110],
[110,104,0,124,141,102,124,106],
[113,99,87,0,105,100,86,106],
[95,88,70,106,0,75,84,86],
[126,101,109,111,136,0,114,107],
[119,107,87,125,127,97,0,109],
[113,101,105,105,125,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,94,93,125,86,94],
[87,0,84,85,85,90,104,83],
[102,127,0,89,100,125,111,135],
[117,126,122,0,99,129,118,120],
[118,126,111,112,0,122,121,90],
[86,121,86,82,89,0,79,94],
[125,107,100,93,90,132,0,102],
[117,128,76,91,121,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,124,140,134,104,109],
[102,0,85,113,91,122,93,97],
[100,126,0,118,136,129,122,114],
[87,98,93,0,110,105,83,79],
[71,120,75,101,0,93,85,91],
[77,89,82,106,118,0,104,98],
[107,118,89,128,126,107,0,100],
[102,114,97,132,120,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,133,109,94,86,106],
[108,0,97,135,100,112,101,96],
[115,114,0,123,115,126,98,96],
[78,76,88,0,109,107,77,87],
[102,111,96,102,0,108,90,98],
[117,99,85,104,103,0,100,89],
[125,110,113,134,121,111,0,98],
[105,115,115,124,113,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,95,72,102,86,104,88],
[122,0,110,106,120,117,100,99],
[116,101,0,104,105,102,109,100],
[139,105,107,0,126,123,105,115],
[109,91,106,85,0,110,93,96],
[125,94,109,88,101,0,85,102],
[107,111,102,106,118,126,0,116],
[123,112,111,96,115,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,112,107,110,111,107],
[108,0,105,117,105,108,109,117],
[101,106,0,112,99,107,104,111],
[99,94,99,0,95,93,87,108],
[104,106,112,116,0,113,117,114],
[101,103,104,118,98,0,108,114],
[100,102,107,124,94,103,0,127],
[104,94,100,103,97,97,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,93,117,101,101,93],
[111,0,78,70,83,66,86,83],
[97,133,0,97,110,122,85,87],
[118,141,114,0,140,108,93,113],
[94,128,101,71,0,93,90,105],
[110,145,89,103,118,0,105,99],
[110,125,126,118,121,106,0,101],
[118,128,124,98,106,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,103,99,93,95,81],
[116,0,113,114,122,110,94,116],
[108,98,0,99,102,101,82,90],
[108,97,112,0,108,108,94,85],
[112,89,109,103,0,105,78,78],
[118,101,110,103,106,0,107,104],
[116,117,129,117,133,104,0,105],
[130,95,121,126,133,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,88,120,113,102,89],
[98,0,101,85,106,116,106,98],
[114,110,0,110,112,108,101,110],
[123,126,101,0,118,136,123,98],
[91,105,99,93,0,108,86,82],
[98,95,103,75,103,0,93,84],
[109,105,110,88,125,118,0,100],
[122,113,101,113,129,127,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,82,116,100,84,121],
[99,0,86,90,112,91,66,136],
[91,125,0,113,133,144,107,126],
[129,121,98,0,116,163,100,103],
[95,99,78,95,0,116,64,129],
[111,120,67,48,95,0,54,134],
[127,145,104,111,147,157,0,152],
[90,75,85,108,82,77,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,136,97,121,118,116,104],
[104,0,134,106,128,126,144,105],
[75,77,0,87,103,105,103,84],
[114,105,124,0,111,120,136,112],
[90,83,108,100,0,110,137,105],
[93,85,106,91,101,0,115,89],
[95,67,108,75,74,96,0,65],
[107,106,127,99,106,122,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,119,113,121,130,117],
[106,0,115,108,110,101,112,113],
[94,96,0,98,88,97,112,107],
[92,103,113,0,90,100,106,104],
[98,101,123,121,0,119,125,129],
[90,110,114,111,92,0,121,111],
[81,99,99,105,86,90,0,113],
[94,98,104,107,82,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,105,103,108,102,103],
[110,0,96,115,100,100,96,108],
[113,115,0,110,108,108,109,105],
[106,96,101,0,116,107,100,116],
[108,111,103,95,0,92,93,105],
[103,111,103,104,119,0,109,106],
[109,115,102,111,118,102,0,104],
[108,103,106,95,106,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,84,88,135,122,104,98],
[92,0,103,110,124,108,127,121],
[127,108,0,89,111,106,98,122],
[123,101,122,0,145,129,100,140],
[76,87,100,66,0,113,72,90],
[89,103,105,82,98,0,99,99],
[107,84,113,111,139,112,0,130],
[113,90,89,71,121,112,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,120,95,113,122,104],
[106,0,103,119,112,113,123,108],
[113,108,0,110,107,113,114,104],
[91,92,101,0,85,108,110,85],
[116,99,104,126,0,108,118,109],
[98,98,98,103,103,0,113,93],
[89,88,97,101,93,98,0,82],
[107,103,107,126,102,118,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,71,99,68,143,168,122],
[90,0,94,57,106,139,131,122],
[140,117,0,146,114,140,126,88],
[112,154,65,0,77,112,140,102],
[143,105,97,134,0,143,152,105],
[68,72,71,99,68,0,131,122],
[43,80,85,71,59,80,0,85],
[89,89,123,109,106,89,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,105,118,109,121,108],
[103,0,103,96,101,88,113,104],
[97,108,0,94,127,111,116,106],
[106,115,117,0,119,107,109,104],
[93,110,84,92,0,74,107,91],
[102,123,100,104,137,0,123,112],
[90,98,95,102,104,88,0,98],
[103,107,105,107,120,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,114,103,115,102,106],
[103,0,103,111,106,106,109,102],
[117,108,0,114,107,109,108,91],
[97,100,97,0,100,108,113,103],
[108,105,104,111,0,103,116,99],
[96,105,102,103,108,0,111,104],
[109,102,103,98,95,100,0,94],
[105,109,120,108,112,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,92,84,89,105,90,99],
[136,0,119,97,101,117,101,85],
[119,92,0,90,82,101,95,104],
[127,114,121,0,105,99,114,118],
[122,110,129,106,0,116,98,116],
[106,94,110,112,95,0,99,104],
[121,110,116,97,113,112,0,103],
[112,126,107,93,95,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,97,105,99,86,95],
[98,0,99,105,102,101,97,99],
[109,112,0,110,110,113,103,108],
[114,106,101,0,108,98,99,97],
[106,109,101,103,0,101,97,105],
[112,110,98,113,110,0,107,107],
[125,114,108,112,114,104,0,106],
[116,112,103,114,106,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,130,127,109,110,97,102],
[99,0,121,103,97,106,110,103],
[81,90,0,84,91,95,88,102],
[84,108,127,0,89,96,90,115],
[102,114,120,122,0,102,105,111],
[101,105,116,115,109,0,91,96],
[114,101,123,121,106,120,0,107],
[109,108,109,96,100,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,100,114,116,115,105],
[110,0,111,104,109,114,113,100],
[94,100,0,96,116,114,107,87],
[111,107,115,0,112,109,105,121],
[97,102,95,99,0,105,114,104],
[95,97,97,102,106,0,102,97],
[96,98,104,106,97,109,0,104],
[106,111,124,90,107,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,117,112,114,106,120],
[101,0,112,100,104,103,90,98],
[107,99,0,120,110,96,90,110],
[94,111,91,0,124,111,96,106],
[99,107,101,87,0,105,86,104],
[97,108,115,100,106,0,87,111],
[105,121,121,115,125,124,0,121],
[91,113,101,105,107,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,120,109,95,121,124],
[114,0,109,104,105,107,110,113],
[97,102,0,116,113,95,111,108],
[91,107,95,0,110,102,96,127],
[102,106,98,101,0,102,104,112],
[116,104,116,109,109,0,115,116],
[90,101,100,115,107,96,0,108],
[87,98,103,84,99,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,82,98,93,82,101,93],
[115,0,111,94,99,95,108,110],
[129,100,0,106,96,103,115,104],
[113,117,105,0,107,108,111,111],
[118,112,115,104,0,115,127,117],
[129,116,108,103,96,0,112,119],
[110,103,96,100,84,99,0,102],
[118,101,107,100,94,92,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,90,113,89,106,106,114],
[90,0,62,98,77,93,118,118],
[121,149,0,137,106,133,100,143],
[98,113,74,0,122,117,106,110],
[122,134,105,89,0,122,119,128],
[105,118,78,94,89,0,113,102],
[105,93,111,105,92,98,0,119],
[97,93,68,101,83,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,118,102,107,118,85,103],
[121,0,121,106,121,129,112,104],
[93,90,0,86,101,106,88,103],
[109,105,125,0,94,100,80,117],
[104,90,110,117,0,133,98,118],
[93,82,105,111,78,0,70,104],
[126,99,123,131,113,141,0,124],
[108,107,108,94,93,107,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,110,105,113,91,111],
[113,0,102,97,108,110,101,115],
[114,109,0,117,102,95,91,95],
[101,114,94,0,92,89,78,103],
[106,103,109,119,0,116,108,108],
[98,101,116,122,95,0,104,89],
[120,110,120,133,103,107,0,101],
[100,96,116,108,103,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,90,86,85,73,85],
[117,0,134,111,103,119,112,101],
[93,77,0,79,90,63,74,59],
[121,100,132,0,122,109,114,89],
[125,108,121,89,0,107,107,114],
[126,92,148,102,104,0,117,87],
[138,99,137,97,104,94,0,102],
[126,110,152,122,97,124,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,101,110,105,110,89],
[107,0,103,102,105,97,97,88],
[111,108,0,108,111,103,111,89],
[110,109,103,0,118,106,117,106],
[101,106,100,93,0,99,107,95],
[106,114,108,105,112,0,109,104],
[101,114,100,94,104,102,0,88],
[122,123,122,105,116,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,86,117,74,98,96,109],
[113,0,96,108,103,96,89,110],
[125,115,0,118,101,131,96,130],
[94,103,93,0,81,84,82,97],
[137,108,110,130,0,103,120,132],
[113,115,80,127,108,0,99,122],
[115,122,115,129,91,112,0,117],
[102,101,81,114,79,89,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,103,112,105,101,106],
[110,0,115,118,121,111,105,113],
[103,96,0,116,107,104,111,110],
[108,93,95,0,111,96,104,110],
[99,90,104,100,0,95,95,107],
[106,100,107,115,116,0,108,115],
[110,106,100,107,116,103,0,124],
[105,98,101,101,104,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,138,107,111,122,102,107],
[90,0,113,97,101,85,136,122],
[73,98,0,78,88,110,94,126],
[104,114,133,0,112,125,93,130],
[100,110,123,99,0,119,106,119],
[89,126,101,86,92,0,90,126],
[109,75,117,118,105,121,0,124],
[104,89,85,81,92,85,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,93,104,105,102,122,103],
[88,0,70,86,75,91,99,86],
[118,141,0,96,113,120,90,102],
[107,125,115,0,107,109,105,93],
[106,136,98,104,0,108,106,105],
[109,120,91,102,103,0,97,95],
[89,112,121,106,105,114,0,107],
[108,125,109,118,106,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,77,105,104,76,50,99],
[111,0,105,82,132,100,35,108],
[134,106,0,97,134,121,106,106],
[106,129,114,0,74,100,53,108],
[107,79,77,137,0,126,55,134],
[135,111,90,111,85,0,35,90],
[161,176,105,158,156,176,0,133],
[112,103,105,103,77,121,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,109,83,97,108,98],
[114,0,94,108,94,116,110,98],
[109,117,0,126,77,100,103,83],
[102,103,85,0,81,96,100,93],
[128,117,134,130,0,111,125,104],
[114,95,111,115,100,0,115,116],
[103,101,108,111,86,96,0,106],
[113,113,128,118,107,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,79,117,108,77,99,110],
[121,0,104,112,123,108,104,125],
[132,107,0,115,113,116,98,126],
[94,99,96,0,103,67,90,111],
[103,88,98,108,0,93,98,119],
[134,103,95,144,118,0,116,131],
[112,107,113,121,113,95,0,135],
[101,86,85,100,92,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,102,88,102,110,105],
[103,0,106,112,105,115,116,108],
[111,105,0,107,106,105,94,101],
[109,99,104,0,100,101,94,116],
[123,106,105,111,0,103,99,105],
[109,96,106,110,108,0,100,102],
[101,95,117,117,112,111,0,109],
[106,103,110,95,106,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,71,138,132,58,80,106],
[118,0,121,180,158,133,124,100],
[140,90,0,178,156,98,87,98],
[73,31,33,0,69,66,32,54],
[79,53,55,142,0,86,98,106],
[153,78,113,145,125,0,109,113],
[131,87,124,179,113,102,0,91],
[105,111,113,157,105,98,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,105,101,90,104,96],
[112,0,104,108,97,108,112,103],
[110,107,0,101,96,102,105,105],
[106,103,110,0,94,103,101,104],
[110,114,115,117,0,108,101,120],
[121,103,109,108,103,0,98,106],
[107,99,106,110,110,113,0,105],
[115,108,106,107,91,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,104,108,102,115,140],
[102,0,98,94,96,94,118,111],
[109,113,0,111,122,102,124,130],
[107,117,100,0,106,107,116,124],
[103,115,89,105,0,92,121,121],
[109,117,109,104,119,0,122,122],
[96,93,87,95,90,89,0,110],
[71,100,81,87,90,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,103,108,116,112,109],
[111,0,118,95,127,113,109,106],
[103,93,0,100,99,96,115,114],
[108,116,111,0,120,113,108,103],
[103,84,112,91,0,84,111,102],
[95,98,115,98,127,0,105,103],
[99,102,96,103,100,106,0,101],
[102,105,97,108,109,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,116,95,109,116,106],
[104,0,117,120,101,111,120,113],
[108,94,0,108,101,100,104,103],
[95,91,103,0,93,101,97,100],
[116,110,110,118,0,105,111,111],
[102,100,111,110,106,0,100,113],
[95,91,107,114,100,111,0,109],
[105,98,108,111,100,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,71,89,72,92,70],
[141,0,83,93,87,97,101,80],
[140,128,0,100,100,112,126,118],
[140,118,111,0,86,125,129,108],
[122,124,111,125,0,119,97,90],
[139,114,99,86,92,0,110,116],
[119,110,85,82,114,101,0,86],
[141,131,93,103,121,95,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,102,115,109,126,109],
[95,0,103,94,100,110,112,98],
[96,108,0,107,104,112,115,94],
[109,117,104,0,98,93,113,102],
[96,111,107,113,0,111,128,110],
[102,101,99,118,100,0,105,97],
[85,99,96,98,83,106,0,94],
[102,113,117,109,101,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,119,113,129,104,109],
[97,0,102,92,104,118,104,114],
[102,109,0,95,108,114,105,105],
[92,119,116,0,98,117,103,112],
[98,107,103,113,0,121,118,121],
[82,93,97,94,90,0,87,101],
[107,107,106,108,93,124,0,113],
[102,97,106,99,90,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,139,79,111,112,118],
[100,0,105,116,87,98,108,108],
[95,106,0,126,107,96,135,141],
[72,95,85,0,69,87,112,103],
[132,124,104,142,0,111,125,136],
[100,113,115,124,100,0,133,131],
[99,103,76,99,86,78,0,124],
[93,103,70,108,75,80,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,110,108,122,111,103],
[107,0,115,100,101,114,99,98],
[98,96,0,101,93,103,95,99],
[101,111,110,0,100,113,103,106],
[103,110,118,111,0,113,109,104],
[89,97,108,98,98,0,91,100],
[100,112,116,108,102,120,0,116],
[108,113,112,105,107,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,107,104,111,119,112],
[96,0,113,107,95,112,105,113],
[101,98,0,105,104,105,109,105],
[104,104,106,0,97,117,121,107],
[107,116,107,114,0,105,121,124],
[100,99,106,94,106,0,101,108],
[92,106,102,90,90,110,0,107],
[99,98,106,104,87,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,121,125,108,99,120],
[103,0,107,111,109,119,103,113],
[108,104,0,107,119,111,104,112],
[90,100,104,0,106,111,109,111],
[86,102,92,105,0,97,106,93],
[103,92,100,100,114,0,98,90],
[112,108,107,102,105,113,0,104],
[91,98,99,100,118,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,99,110,104,105,102],
[100,0,94,103,110,106,112,94],
[105,117,0,107,107,102,103,97],
[112,108,104,0,119,96,116,110],
[101,101,104,92,0,98,114,96],
[107,105,109,115,113,0,112,115],
[106,99,108,95,97,99,0,101],
[109,117,114,101,115,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,114,95,133,114,135],
[104,0,115,101,111,116,129,110],
[92,96,0,103,112,104,109,102],
[97,110,108,0,94,109,124,113],
[116,100,99,117,0,113,116,110],
[78,95,107,102,98,0,98,82],
[97,82,102,87,95,113,0,101],
[76,101,109,98,101,129,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,108,108,92,101,110],
[109,0,91,113,100,107,108,121],
[124,120,0,101,105,120,119,129],
[103,98,110,0,88,104,106,109],
[103,111,106,123,0,107,110,119],
[119,104,91,107,104,0,108,107],
[110,103,92,105,101,103,0,98],
[101,90,82,102,92,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,93,95,119,109,102],
[103,0,126,109,119,105,99,122],
[98,85,0,86,96,109,96,84],
[118,102,125,0,111,123,96,117],
[116,92,115,100,0,105,93,104],
[92,106,102,88,106,0,96,98],
[102,112,115,115,118,115,0,111],
[109,89,127,94,107,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,127,113,99,114,96],
[107,0,101,122,122,98,104,87],
[117,110,0,136,117,100,139,128],
[84,89,75,0,110,96,91,87],
[98,89,94,101,0,85,96,92],
[112,113,111,115,126,0,98,98],
[97,107,72,120,115,113,0,94],
[115,124,83,124,119,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,112,118,101,109,106],
[105,0,109,106,115,107,110,107],
[102,102,0,111,108,103,105,106],
[99,105,100,0,116,98,101,100],
[93,96,103,95,0,94,94,95],
[110,104,108,113,117,0,112,102],
[102,101,106,110,117,99,0,104],
[105,104,105,111,116,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,122,108,111,97,96,125],
[113,0,109,110,95,104,97,114],
[89,102,0,96,98,95,90,104],
[103,101,115,0,97,103,96,107],
[100,116,113,114,0,98,105,116],
[114,107,116,108,113,0,102,116],
[115,114,121,115,106,109,0,98],
[86,97,107,104,95,95,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,109,88,90,97,102,111],
[119,0,108,97,88,107,122,121],
[102,103,0,91,106,99,124,110],
[123,114,120,0,99,138,141,127],
[121,123,105,112,0,102,124,98],
[114,104,112,73,109,0,126,106],
[109,89,87,70,87,85,0,87],
[100,90,101,84,113,105,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,111,112,109,110,104],
[98,0,97,106,92,111,90,104],
[93,114,0,104,103,112,97,108],
[100,105,107,0,102,113,93,102],
[99,119,108,109,0,115,106,96],
[102,100,99,98,96,0,87,91],
[101,121,114,118,105,124,0,96],
[107,107,103,109,115,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,121,130,112,102,106],
[113,0,97,129,135,105,113,114],
[114,114,0,118,117,104,108,112],
[90,82,93,0,107,104,84,91],
[81,76,94,104,0,76,87,92],
[99,106,107,107,135,0,111,101],
[109,98,103,127,124,100,0,106],
[105,97,99,120,119,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,103,102,104,106,101],
[113,0,105,111,96,107,90,97],
[105,106,0,102,102,110,95,102],
[108,100,109,0,96,105,102,97],
[109,115,109,115,0,110,94,97],
[107,104,101,106,101,0,104,101],
[105,121,116,109,117,107,0,106],
[110,114,109,114,114,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,125,63,141,113,142,123],
[88,0,101,43,114,115,131,91],
[86,110,0,110,113,168,138,151],
[148,168,101,0,142,167,146,147],
[70,97,98,69,0,116,112,146],
[98,96,43,44,95,0,158,112],
[69,80,73,65,99,53,0,90],
[88,120,60,64,65,99,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,119,116,93,171,142,157],
[74,0,62,61,89,119,82,79],
[92,149,0,116,84,146,108,149],
[95,150,95,0,104,145,133,110],
[118,122,127,107,0,186,102,128],
[40,92,65,66,25,0,70,85],
[69,129,103,78,109,141,0,108],
[54,132,62,101,83,126,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,83,151,77,112,105,48],
[82,0,118,88,70,85,105,89],
[128,93,0,74,128,76,124,89],
[60,123,137,0,82,65,124,69],
[134,141,83,129,0,90,158,35],
[99,126,135,146,121,0,149,127],
[106,106,87,87,53,62,0,21],
[163,122,122,142,176,84,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,102,101,102,118,106],
[97,0,95,97,106,88,117,107],
[102,116,0,104,106,101,105,107],
[109,114,107,0,105,109,122,106],
[110,105,105,106,0,94,116,110],
[109,123,110,102,117,0,112,114],
[93,94,106,89,95,99,0,99],
[105,104,104,105,101,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,103,100,94,85,94],
[110,0,103,103,111,107,99,105],
[113,108,0,123,108,109,93,106],
[108,108,88,0,92,98,102,82],
[111,100,103,119,0,117,108,110],
[117,104,102,113,94,0,101,101],
[126,112,118,109,103,110,0,100],
[117,106,105,129,101,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,90,80,75,88,73,77],
[117,0,94,91,87,80,107,100],
[121,117,0,93,95,100,106,104],
[131,120,118,0,107,106,91,109],
[136,124,116,104,0,97,105,122],
[123,131,111,105,114,0,122,122],
[138,104,105,120,106,89,0,109],
[134,111,107,102,89,89,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,101,102,94,109,106],
[113,0,110,111,102,109,109,107],
[114,101,0,112,104,106,113,104],
[110,100,99,0,104,111,109,102],
[109,109,107,107,0,103,110,98],
[117,102,105,100,108,0,112,116],
[102,102,98,102,101,99,0,101],
[105,104,107,109,113,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,108,116,96,104,101],
[94,0,102,104,113,96,99,107],
[95,109,0,100,108,91,97,93],
[103,107,111,0,110,90,101,101],
[95,98,103,101,0,83,93,89],
[115,115,120,121,128,0,121,103],
[107,112,114,110,118,90,0,101],
[110,104,118,110,122,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,104,105,105,113,105],
[95,0,117,110,86,105,98,103],
[92,94,0,106,102,88,100,89],
[107,101,105,0,101,103,104,98],
[106,125,109,110,0,105,110,111],
[106,106,123,108,106,0,114,99],
[98,113,111,107,101,97,0,91],
[106,108,122,113,100,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,107,108,118,103,115],
[95,0,109,104,109,91,116,102],
[104,102,0,102,111,113,111,111],
[104,107,109,0,115,109,94,121],
[103,102,100,96,0,116,107,103],
[93,120,98,102,95,0,122,105],
[108,95,100,117,104,89,0,96],
[96,109,100,90,108,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,122,114,109,103,116],
[103,0,102,108,101,101,94,108],
[99,109,0,103,105,103,109,107],
[89,103,108,0,91,96,93,104],
[97,110,106,120,0,108,100,109],
[102,110,108,115,103,0,103,116],
[108,117,102,118,111,108,0,112],
[95,103,104,107,102,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,79,87,86,83,90],
[122,0,100,102,105,105,107,106],
[126,111,0,95,92,100,88,100],
[132,109,116,0,118,110,105,114],
[124,106,119,93,0,105,108,112],
[125,106,111,101,106,0,112,118],
[128,104,123,106,103,99,0,127],
[121,105,111,97,99,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,92,87,102,117,98,113],
[76,0,87,94,86,93,78,83],
[119,124,0,98,120,118,93,116],
[124,117,113,0,108,127,104,103],
[109,125,91,103,0,104,107,113],
[94,118,93,84,107,0,81,98],
[113,133,118,107,104,130,0,123],
[98,128,95,108,98,113,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,119,101,112,122,106],
[103,0,113,107,103,104,111,106],
[102,98,0,110,103,108,112,110],
[92,104,101,0,96,103,111,102],
[110,108,108,115,0,101,122,114],
[99,107,103,108,110,0,116,101],
[89,100,99,100,89,95,0,106],
[105,105,101,109,97,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,116,124,127,93,122],
[108,0,109,108,111,105,100,113],
[110,102,0,129,112,121,111,113],
[95,103,82,0,90,111,81,104],
[87,100,99,121,0,117,98,96],
[84,106,90,100,94,0,102,89],
[118,111,100,130,113,109,0,110],
[89,98,98,107,115,122,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,104,114,110,104,101],
[113,0,110,112,114,107,103,107],
[101,101,0,100,107,89,100,110],
[107,99,111,0,111,97,104,100],
[97,97,104,100,0,109,102,97],
[101,104,122,114,102,0,108,99],
[107,108,111,107,109,103,0,105],
[110,104,101,111,114,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,111,120,105,113,119],
[98,0,109,125,105,99,115,105],
[109,102,0,121,107,108,105,117],
[100,86,90,0,101,92,118,107],
[91,106,104,110,0,91,110,102],
[106,112,103,119,120,0,130,116],
[98,96,106,93,101,81,0,98],
[92,106,94,104,109,95,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,114,105,111,125,123],
[97,0,138,98,121,112,113,115],
[87,73,0,83,92,89,104,100],
[97,113,128,0,99,108,110,119],
[106,90,119,112,0,114,120,112],
[100,99,122,103,97,0,125,116],
[86,98,107,101,91,86,0,102],
[88,96,111,92,99,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,97,107,103,102,111],
[111,0,112,101,115,96,123,106],
[111,99,0,100,110,100,111,105],
[114,110,111,0,100,109,118,104],
[104,96,101,111,0,96,117,106],
[108,115,111,102,115,0,107,108],
[109,88,100,93,94,104,0,100],
[100,105,106,107,105,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,111,109,97,108,110],
[115,0,106,121,105,98,112,102],
[119,105,0,105,106,99,98,102],
[100,90,106,0,105,106,99,103],
[102,106,105,106,0,98,91,109],
[114,113,112,105,113,0,97,115],
[103,99,113,112,120,114,0,116],
[101,109,109,108,102,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,93,101,113,112,109],
[113,0,113,101,110,113,101,99],
[111,98,0,99,109,105,96,101],
[118,110,112,0,105,110,113,101],
[110,101,102,106,0,104,104,107],
[98,98,106,101,107,0,103,104],
[99,110,115,98,107,108,0,99],
[102,112,110,110,104,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,101,107,108,109,101],
[101,0,103,103,105,99,105,101],
[111,108,0,104,100,102,105,99],
[110,108,107,0,99,110,105,99],
[104,106,111,112,0,109,109,109],
[103,112,109,101,102,0,103,104],
[102,106,106,106,102,108,0,99],
[110,110,112,112,102,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,97,93,104,98,101],
[109,0,92,110,111,109,99,112],
[111,119,0,108,110,101,105,116],
[114,101,103,0,97,109,102,102],
[118,100,101,114,0,112,111,115],
[107,102,110,102,99,0,83,93],
[113,112,106,109,100,128,0,97],
[110,99,95,109,96,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,117,115,111,116,114],
[108,0,110,108,103,114,122,107],
[90,101,0,106,86,107,106,87],
[94,103,105,0,100,88,102,99],
[96,108,125,111,0,118,116,105],
[100,97,104,123,93,0,124,103],
[95,89,105,109,95,87,0,110],
[97,104,124,112,106,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,97,111,106,93,111],
[101,0,114,109,104,107,105,106],
[110,97,0,117,96,100,101,114],
[114,102,94,0,94,108,103,109],
[100,107,115,117,0,103,106,109],
[105,104,111,103,108,0,113,106],
[118,106,110,108,105,98,0,119],
[100,105,97,102,102,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,99,110,108,106,115],
[98,0,115,86,102,103,103,110],
[94,96,0,94,93,107,98,107],
[112,125,117,0,109,107,99,118],
[101,109,118,102,0,104,104,114],
[103,108,104,104,107,0,109,114],
[105,108,113,112,107,102,0,109],
[96,101,104,93,97,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,93,101,98,104,110,100],
[127,0,107,107,117,102,107,108],
[118,104,0,108,110,115,110,107],
[110,104,103,0,104,102,116,105],
[113,94,101,107,0,95,110,113],
[107,109,96,109,116,0,129,117],
[101,104,101,95,101,82,0,88],
[111,103,104,106,98,94,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,102,101,99,105,103],
[109,0,95,108,103,107,122,100],
[118,116,0,110,100,112,132,108],
[109,103,101,0,106,121,103,120],
[110,108,111,105,0,117,116,118],
[112,104,99,90,94,0,110,97],
[106,89,79,108,95,101,0,98],
[108,111,103,91,93,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,99,119,97,101,123],
[109,0,115,109,116,102,87,115],
[91,96,0,103,104,97,100,98],
[112,102,108,0,109,96,97,107],
[92,95,107,102,0,106,83,101],
[114,109,114,115,105,0,108,115],
[110,124,111,114,128,103,0,121],
[88,96,113,104,110,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,94,107,97,100,88],
[105,0,107,86,127,95,104,89],
[113,104,0,119,128,89,105,106],
[117,125,92,0,139,118,128,117],
[104,84,83,72,0,91,98,74],
[114,116,122,93,120,0,106,114],
[111,107,106,83,113,105,0,101],
[123,122,105,94,137,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,106,106,97,92,101],
[103,0,120,108,107,104,104,110],
[114,91,0,110,103,92,95,100],
[105,103,101,0,117,105,106,103],
[105,104,108,94,0,95,96,94],
[114,107,119,106,116,0,105,103],
[119,107,116,105,115,106,0,99],
[110,101,111,108,117,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,140,93,91,78,106,129],
[81,0,111,85,73,62,107,121],
[71,100,0,100,66,75,102,131],
[118,126,111,0,86,118,142,151],
[120,138,145,125,0,80,150,163],
[133,149,136,93,131,0,125,142],
[105,104,109,69,61,86,0,114],
[82,90,80,60,48,69,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,99,121,110,108,107],
[111,0,103,114,126,117,116,103],
[103,108,0,107,114,103,101,115],
[112,97,104,0,109,106,105,105],
[90,85,97,102,0,104,93,104],
[101,94,108,105,107,0,105,105],
[103,95,110,106,118,106,0,110],
[104,108,96,106,107,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,121,126,103,109,116],
[110,0,116,107,121,107,100,108],
[96,95,0,103,109,98,101,103],
[90,104,108,0,105,96,97,109],
[85,90,102,106,0,93,100,101],
[108,104,113,115,118,0,111,122],
[102,111,110,114,111,100,0,112],
[95,103,108,102,110,89,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,47,61,64,90,83,71],
[50,0,59,47,74,83,24,46],
[164,152,0,112,119,106,98,119],
[150,164,99,0,103,121,102,86],
[147,137,92,108,0,102,99,86],
[121,128,105,90,109,0,95,82],
[128,187,113,109,112,116,0,78],
[140,165,92,125,125,129,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,115,103,120,115,111],
[98,0,113,114,99,110,101,104],
[99,98,0,113,101,112,97,94],
[96,97,98,0,100,108,99,84],
[108,112,110,111,0,111,97,101],
[91,101,99,103,100,0,98,102],
[96,110,114,112,114,113,0,104],
[100,107,117,127,110,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,106,108,127,106,103],
[108,0,117,114,114,127,100,113],
[100,94,0,108,95,108,96,103],
[105,97,103,0,113,125,97,114],
[103,97,116,98,0,114,102,101],
[84,84,103,86,97,0,95,98],
[105,111,115,114,109,116,0,112],
[108,98,108,97,110,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,116,108,111,108,101,103],
[115,0,116,99,108,110,112,113],
[95,95,0,103,101,97,97,103],
[103,112,108,0,110,111,99,112],
[100,103,110,101,0,111,103,110],
[103,101,114,100,100,0,101,112],
[110,99,114,112,108,110,0,112],
[108,98,108,99,101,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,89,99,102,100,100],
[118,0,115,124,101,121,126,105],
[114,96,0,102,101,110,101,113],
[122,87,109,0,104,110,113,113],
[112,110,110,107,0,117,109,105],
[109,90,101,101,94,0,105,103],
[111,85,110,98,102,106,0,108],
[111,106,98,98,106,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,98,109,102,111,104],
[104,0,100,99,110,111,109,107],
[104,111,0,103,101,101,113,94],
[113,112,108,0,113,116,118,103],
[102,101,110,98,0,108,113,104],
[109,100,110,95,103,0,106,100],
[100,102,98,93,98,105,0,100],
[107,104,117,108,107,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,98,107,109,110,92],
[91,0,97,99,105,105,106,89],
[105,114,0,117,115,120,122,97],
[113,112,94,0,124,124,122,112],
[104,106,96,87,0,104,96,89],
[102,106,91,87,107,0,98,87],
[101,105,89,89,115,113,0,93],
[119,122,114,99,122,124,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,98,98,87,96,117],
[115,0,103,86,105,107,123,95],
[107,108,0,115,97,94,102,116],
[113,125,96,0,99,98,108,90],
[113,106,114,112,0,91,117,97],
[124,104,117,113,120,0,116,118],
[115,88,109,103,94,95,0,97],
[94,116,95,121,114,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,87,93,102,98,102],
[115,0,107,108,104,102,112,99],
[117,104,0,107,106,115,106,105],
[124,103,104,0,101,110,117,109],
[118,107,105,110,0,118,116,111],
[109,109,96,101,93,0,114,103],
[113,99,105,94,95,97,0,104],
[109,112,106,102,100,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,104,118,125,126,141,125],
[88,0,109,105,104,106,136,115],
[107,102,0,115,116,103,124,103],
[93,106,96,0,120,100,127,104],
[86,107,95,91,0,95,115,104],
[85,105,108,111,116,0,107,106],
[70,75,87,84,96,104,0,94],
[86,96,108,107,107,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,121,104,116,117,109],
[95,0,97,105,93,107,103,98],
[101,114,0,119,99,108,114,90],
[90,106,92,0,93,101,96,82],
[107,118,112,118,0,117,110,97],
[95,104,103,110,94,0,104,92],
[94,108,97,115,101,107,0,104],
[102,113,121,129,114,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,127,130,136,111,119,124],
[120,0,102,117,114,129,101,122],
[84,109,0,90,105,84,100,84],
[81,94,121,0,97,111,90,97],
[75,97,106,114,0,109,115,108],
[100,82,127,100,102,0,86,108],
[92,110,111,121,96,125,0,115],
[87,89,127,114,103,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,115,107,124,108,102],
[98,0,104,117,109,115,109,109],
[105,107,0,104,111,124,101,100],
[96,94,107,0,90,104,88,97],
[104,102,100,121,0,111,103,104],
[87,96,87,107,100,0,90,89],
[103,102,110,123,108,121,0,108],
[109,102,111,114,107,122,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,109,107,96,107,108],
[111,0,100,109,106,100,122,98],
[115,111,0,110,114,111,113,99],
[102,102,101,0,113,99,113,96],
[104,105,97,98,0,97,114,97],
[115,111,100,112,114,0,118,100],
[104,89,98,98,97,93,0,93],
[103,113,112,115,114,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,107,110,107,117,114],
[109,0,109,105,101,118,119,116],
[98,102,0,85,107,115,111,104],
[104,106,126,0,113,117,113,118],
[101,110,104,98,0,110,105,113],
[104,93,96,94,101,0,103,104],
[94,92,100,98,106,108,0,102],
[97,95,107,93,98,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,106,110,113,94,107],
[115,0,110,103,106,111,105,106],
[104,101,0,106,108,119,103,107],
[105,108,105,0,112,109,107,113],
[101,105,103,99,0,115,101,120],
[98,100,92,102,96,0,94,100],
[117,106,108,104,110,117,0,116],
[104,105,104,98,91,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,121,91,112,97,83,110],
[119,0,139,107,146,94,122,96],
[90,72,0,110,116,85,62,92],
[120,104,101,0,104,100,84,93],
[99,65,95,107,0,70,57,86],
[114,117,126,111,141,0,99,110],
[128,89,149,127,154,112,0,129],
[101,115,119,118,125,101,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,102,93,101,109,106],
[109,0,94,91,94,87,106,98],
[100,117,0,102,101,93,105,109],
[109,120,109,0,102,109,113,106],
[118,117,110,109,0,96,103,104],
[110,124,118,102,115,0,123,113],
[102,105,106,98,108,88,0,96],
[105,113,102,105,107,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,101,111,101,104,110],
[101,0,97,99,98,86,106,106],
[99,114,0,109,104,113,108,96],
[110,112,102,0,115,113,113,124],
[100,113,107,96,0,98,111,106],
[110,125,98,98,113,0,103,121],
[107,105,103,98,100,108,0,105],
[101,105,115,87,105,90,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,114,140,87,106,125],
[97,0,128,117,120,111,97,115],
[100,83,0,79,115,78,97,80],
[97,94,132,0,129,115,105,99],
[71,91,96,82,0,92,86,102],
[124,100,133,96,119,0,98,112],
[105,114,114,106,125,113,0,97],
[86,96,131,112,109,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,87,86,74,85,90,90],
[119,0,109,97,109,105,115,119],
[124,102,0,93,95,115,112,126],
[125,114,118,0,83,115,109,125],
[137,102,116,128,0,119,92,116],
[126,106,96,96,92,0,101,107],
[121,96,99,102,119,110,0,115],
[121,92,85,86,95,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,106,97,107,119,117],
[105,0,102,98,98,113,106,103],
[108,109,0,113,104,112,117,102],
[105,113,98,0,114,112,105,113],
[114,113,107,97,0,125,114,105],
[104,98,99,99,86,0,108,108],
[92,105,94,106,97,103,0,105],
[94,108,109,98,106,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,107,94,102,98,96],
[111,0,113,117,106,107,103,101],
[99,98,0,111,97,92,99,113],
[104,94,100,0,83,102,91,90],
[117,105,114,128,0,102,109,111],
[109,104,119,109,109,0,102,97],
[113,108,112,120,102,109,0,91],
[115,110,98,121,100,114,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,91,98,100,86,109],
[110,0,86,98,99,95,96,103],
[110,125,0,102,83,102,90,102],
[120,113,109,0,110,107,99,118],
[113,112,128,101,0,120,108,109],
[111,116,109,104,91,0,105,115],
[125,115,121,112,103,106,0,125],
[102,108,109,93,102,96,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,115,117,102,114,134],
[92,0,112,101,102,97,99,95],
[89,99,0,112,118,106,118,104],
[96,110,99,0,104,108,102,117],
[94,109,93,107,0,96,92,117],
[109,114,105,103,115,0,98,120],
[97,112,93,109,119,113,0,98],
[77,116,107,94,94,91,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,91,88,98,82,105],
[98,0,124,96,117,118,92,110],
[109,87,0,79,84,95,80,93],
[120,115,132,0,123,133,104,136],
[123,94,127,88,0,119,109,131],
[113,93,116,78,92,0,71,109],
[129,119,131,107,102,140,0,123],
[106,101,118,75,80,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,121,99,109,94,102],
[111,0,110,100,84,106,107,105],
[104,101,0,99,114,111,99,115],
[90,111,112,0,108,112,104,102],
[112,127,97,103,0,117,117,116],
[102,105,100,99,94,0,110,122],
[117,104,112,107,94,101,0,96],
[109,106,96,109,95,89,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,108,108,99,104,104],
[112,0,108,122,104,107,116,114],
[112,103,0,112,105,93,103,114],
[103,89,99,0,86,80,99,95],
[103,107,106,125,0,94,102,107],
[112,104,118,131,117,0,111,113],
[107,95,108,112,109,100,0,101],
[107,97,97,116,104,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,102,89,89,124,96],
[99,0,112,107,105,104,107,101],
[110,99,0,107,116,104,111,113],
[109,104,104,0,104,105,119,98],
[122,106,95,107,0,110,118,101],
[122,107,107,106,101,0,124,102],
[87,104,100,92,93,87,0,99],
[115,110,98,113,110,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,119,91,90,89,87,106],
[116,0,118,107,90,105,111,109],
[92,93,0,96,81,68,87,92],
[120,104,115,0,85,110,109,102],
[121,121,130,126,0,104,113,125],
[122,106,143,101,107,0,94,120],
[124,100,124,102,98,117,0,95],
[105,102,119,109,86,91,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,131,142,137,125,102,130],
[104,0,124,112,97,99,89,106],
[80,87,0,105,93,88,92,82],
[69,99,106,0,90,59,79,85],
[74,114,118,121,0,94,85,105],
[86,112,123,152,117,0,113,124],
[109,122,119,132,126,98,0,111],
[81,105,129,126,106,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,104,97,102,106,104],
[97,0,87,97,112,98,106,92],
[103,124,0,106,112,122,113,108],
[107,114,105,0,94,103,99,107],
[114,99,99,117,0,111,105,104],
[109,113,89,108,100,0,109,100],
[105,105,98,112,106,102,0,102],
[107,119,103,104,107,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,100,76,116,69,97,113],
[124,0,103,98,150,116,102,125],
[111,108,0,101,155,117,110,124],
[135,113,110,0,141,120,89,126],
[95,61,56,70,0,61,98,108],
[142,95,94,91,150,0,123,119],
[114,109,101,122,113,88,0,127],
[98,86,87,85,103,92,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,108,118,96,102,102],
[106,0,99,118,119,108,110,106],
[107,112,0,115,116,121,112,94],
[103,93,96,0,105,87,100,94],
[93,92,95,106,0,106,109,84],
[115,103,90,124,105,0,99,99],
[109,101,99,111,102,112,0,99],
[109,105,117,117,127,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,106,119,107,119,107],
[107,0,105,108,125,108,125,122],
[109,106,0,105,114,101,98,111],
[105,103,106,0,117,102,104,100],
[92,86,97,94,0,105,106,97],
[104,103,110,109,106,0,101,118],
[92,86,113,107,105,110,0,108],
[104,89,100,111,114,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,105,109,96,111,105],
[103,0,121,110,109,97,107,106],
[92,90,0,98,114,95,105,100],
[106,101,113,0,109,97,98,108],
[102,102,97,102,0,92,100,101],
[115,114,116,114,119,0,105,111],
[100,104,106,113,111,106,0,110],
[106,105,111,103,110,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,103,112,125,107,96],
[100,0,93,91,92,103,93,86],
[101,118,0,99,97,114,99,113],
[108,120,112,0,104,113,89,85],
[99,119,114,107,0,110,107,96],
[86,108,97,98,101,0,93,98],
[104,118,112,122,104,118,0,102],
[115,125,98,126,115,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,104,120,112,114,113],
[95,0,101,105,109,104,107,105],
[104,110,0,103,100,110,103,104],
[107,106,108,0,101,115,113,106],
[91,102,111,110,0,108,116,109],
[99,107,101,96,103,0,105,105],
[97,104,108,98,95,106,0,98],
[98,106,107,105,102,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,95,109,99,109,112],
[117,0,110,107,122,120,96,112],
[107,101,0,102,117,115,104,103],
[116,104,109,0,125,95,98,117],
[102,89,94,86,0,105,92,94],
[112,91,96,116,106,0,100,114],
[102,115,107,113,119,111,0,104],
[99,99,108,94,117,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,87,101,98,89,89,96],
[128,0,112,114,130,116,100,125],
[124,99,0,136,120,113,108,123],
[110,97,75,0,110,115,108,97],
[113,81,91,101,0,102,88,100],
[122,95,98,96,109,0,100,113],
[122,111,103,103,123,111,0,102],
[115,86,88,114,111,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,116,108,103,96,119],
[100,0,118,104,110,128,79,109],
[90,93,0,85,91,104,68,101],
[95,107,126,0,99,111,95,109],
[103,101,120,112,0,104,110,114],
[108,83,107,100,107,0,82,102],
[115,132,143,116,101,129,0,116],
[92,102,110,102,97,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,122,119,108,93,102],
[116,0,106,126,117,97,96,117],
[102,105,0,116,111,111,107,94],
[89,85,95,0,110,87,82,92],
[92,94,100,101,0,100,95,100],
[103,114,100,124,111,0,105,102],
[118,115,104,129,116,106,0,112],
[109,94,117,119,111,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,88,102,98,103,94],
[105,0,106,107,109,93,122,106],
[114,105,0,101,122,107,106,100],
[123,104,110,0,120,104,109,113],
[109,102,89,91,0,94,99,98],
[113,118,104,107,117,0,109,109],
[108,89,105,102,112,102,0,108],
[117,105,111,98,113,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,107,104,113,112,108],
[99,0,106,105,122,120,126,109],
[91,105,0,99,113,112,101,108],
[104,106,112,0,121,111,120,103],
[107,89,98,90,0,93,112,84],
[98,91,99,100,118,0,108,89],
[99,85,110,91,99,103,0,79],
[103,102,103,108,127,122,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,91,116,104,109,111],
[111,0,132,106,106,112,104,94],
[102,79,0,102,99,95,102,100],
[120,105,109,0,117,102,108,102],
[95,105,112,94,0,96,93,92],
[107,99,116,109,115,0,109,105],
[102,107,109,103,118,102,0,92],
[100,117,111,109,119,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,115,98,125,104,99],
[109,0,119,114,116,121,101,103],
[99,92,0,98,90,120,101,97],
[96,97,113,0,98,117,98,88],
[113,95,121,113,0,122,107,106],
[86,90,91,94,89,0,97,93],
[107,110,110,113,104,114,0,103],
[112,108,114,123,105,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,114,126,142,104,106,116],
[82,0,103,104,109,89,99,101],
[97,108,0,114,138,104,122,120],
[85,107,97,0,111,96,85,109],
[69,102,73,100,0,91,79,94],
[107,122,107,115,120,0,90,110],
[105,112,89,126,132,121,0,110],
[95,110,91,102,117,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,97,94,109,101,92],
[104,0,115,105,98,101,106,100],
[108,96,0,94,90,111,93,88],
[114,106,117,0,108,114,104,104],
[117,113,121,103,0,105,112,93],
[102,110,100,97,106,0,95,95],
[110,105,118,107,99,116,0,114],
[119,111,123,107,118,116,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,123,104,114,119,106],
[104,0,111,109,109,105,104,95],
[94,100,0,93,85,104,97,90],
[88,102,118,0,94,101,99,92],
[107,102,126,117,0,110,115,107],
[97,106,107,110,101,0,111,109],
[92,107,114,112,96,100,0,102],
[105,116,121,119,104,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,95,109,101,99,99],
[104,0,107,92,112,95,100,96],
[106,104,0,92,121,94,99,88],
[116,119,119,0,120,103,122,115],
[102,99,90,91,0,99,96,82],
[110,116,117,108,112,0,106,99],
[112,111,112,89,115,105,0,108],
[112,115,123,96,129,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,128,105,109,111,126,117],
[91,0,111,82,88,97,102,89],
[83,100,0,101,84,112,98,110],
[106,129,110,0,94,98,115,102],
[102,123,127,117,0,116,119,109],
[100,114,99,113,95,0,96,99],
[85,109,113,96,92,115,0,85],
[94,122,101,109,102,112,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,121,112,128,117,125],
[91,0,98,95,110,93,118,111],
[106,113,0,100,133,99,116,117],
[90,116,111,0,134,110,117,109],
[99,101,78,77,0,102,121,105],
[83,118,112,101,109,0,120,127],
[94,93,95,94,90,91,0,98],
[86,100,94,102,106,84,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,108,92,101,81,119],
[94,0,87,135,89,117,96,124],
[113,124,0,115,92,115,114,138],
[103,76,96,0,96,89,88,119],
[119,122,119,115,0,118,101,150],
[110,94,96,122,93,0,85,123],
[130,115,97,123,110,126,0,126],
[92,87,73,92,61,88,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,100,100,98,106,95],
[111,0,102,107,109,94,107,106],
[120,109,0,110,102,104,111,101],
[111,104,101,0,110,97,106,99],
[111,102,109,101,0,95,112,104],
[113,117,107,114,116,0,117,99],
[105,104,100,105,99,94,0,94],
[116,105,110,112,107,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,99,112,111,114,115],
[122,0,119,99,114,113,124,113],
[100,92,0,108,108,111,118,94],
[112,112,103,0,98,122,117,113],
[99,97,103,113,0,100,120,119],
[100,98,100,89,111,0,106,112],
[97,87,93,94,91,105,0,106],
[96,98,117,98,92,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,102,113,108,112,113],
[97,0,114,108,119,107,105,106],
[96,97,0,88,97,105,97,108],
[109,103,123,0,118,120,107,112],
[98,92,114,93,0,96,100,97],
[103,104,106,91,115,0,97,99],
[99,106,114,104,111,114,0,104],
[98,105,103,99,114,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,115,98,112,112,115],
[104,0,104,106,100,98,110,103],
[97,107,0,109,99,98,112,106],
[96,105,102,0,92,98,103,101],
[113,111,112,119,0,101,108,121],
[99,113,113,113,110,0,116,111],
[99,101,99,108,103,95,0,109],
[96,108,105,110,90,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,118,103,102,106,106,111],
[97,0,99,99,105,96,97,98],
[93,112,0,115,103,101,123,102],
[108,112,96,0,108,98,113,94],
[109,106,108,103,0,97,115,102],
[105,115,110,113,114,0,116,101],
[105,114,88,98,96,95,0,96],
[100,113,109,117,109,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,113,122,115,137,105],
[100,0,101,105,119,127,125,109],
[95,110,0,101,113,116,117,99],
[98,106,110,0,129,119,123,91],
[89,92,98,82,0,109,114,99],
[96,84,95,92,102,0,114,97],
[74,86,94,88,97,97,0,95],
[106,102,112,120,112,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,55,17,112,83,50,60],
[127,0,136,139,160,124,172,103],
[156,75,0,75,158,101,46,60],
[194,72,136,0,127,134,129,88],
[99,51,53,84,0,89,89,65],
[128,87,110,77,122,0,48,94],
[161,39,165,82,122,163,0,137],
[151,108,151,123,146,117,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,121,104,116,112,109],
[99,0,98,104,101,117,94,101],
[104,113,0,113,118,117,114,104],
[90,107,98,0,101,107,97,100],
[107,110,93,110,0,108,101,112],
[95,94,94,104,103,0,84,102],
[99,117,97,114,110,127,0,98],
[102,110,107,111,99,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,93,109,109,109,113],
[103,0,113,107,106,96,110,104],
[93,98,0,85,91,90,111,106],
[118,104,126,0,103,98,120,117],
[102,105,120,108,0,95,113,110],
[102,115,121,113,116,0,122,116],
[102,101,100,91,98,89,0,106],
[98,107,105,94,101,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,95,106,101,111,106],
[107,0,104,99,99,90,107,105],
[117,107,0,96,100,104,107,111],
[116,112,115,0,115,102,117,105],
[105,112,111,96,0,92,116,101],
[110,121,107,109,119,0,112,105],
[100,104,104,94,95,99,0,108],
[105,106,100,106,110,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,100,123,109,111,93],
[96,0,89,120,109,104,108,99],
[104,122,0,116,115,111,104,108],
[111,91,95,0,104,97,105,93],
[88,102,96,107,0,114,99,95],
[102,107,100,114,97,0,96,89],
[100,103,107,106,112,115,0,94],
[118,112,103,118,116,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,98,106,101,107,103],
[108,0,92,94,96,103,107,104],
[118,119,0,112,105,102,111,106],
[113,117,99,0,110,108,115,108],
[105,115,106,101,0,102,114,117],
[110,108,109,103,109,0,104,108],
[104,104,100,96,97,107,0,105],
[108,107,105,103,94,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,117,105,109,116,109],
[90,0,95,112,123,105,102,125],
[94,116,0,100,113,115,108,110],
[94,99,111,0,98,124,98,105],
[106,88,98,113,0,119,98,109],
[102,106,96,87,92,0,104,108],
[95,109,103,113,113,107,0,109],
[102,86,101,106,102,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,99,107,108,108,84],
[111,0,111,103,96,116,115,96],
[102,100,0,109,95,101,104,89],
[112,108,102,0,90,110,101,100],
[104,115,116,121,0,106,107,111],
[103,95,110,101,105,0,109,90],
[103,96,107,110,104,102,0,101],
[127,115,122,111,100,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,91,104,91,108,102],
[105,0,98,89,105,101,95,102],
[95,113,0,97,113,93,105,99],
[120,122,114,0,106,116,93,115],
[107,106,98,105,0,105,102,106],
[120,110,118,95,106,0,103,113],
[103,116,106,118,109,108,0,102],
[109,109,112,96,105,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,103,101,93,101,88],
[116,0,80,108,117,91,114,106],
[113,131,0,116,116,109,121,104],
[108,103,95,0,109,94,106,106],
[110,94,95,102,0,94,117,117],
[118,120,102,117,117,0,125,112],
[110,97,90,105,94,86,0,107],
[123,105,107,105,94,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,109,108,106,106,107],
[110,0,106,117,111,107,101,113],
[102,105,0,101,99,106,93,103],
[102,94,110,0,115,107,109,100],
[103,100,112,96,0,107,104,111],
[105,104,105,104,104,0,105,108],
[105,110,118,102,107,106,0,116],
[104,98,108,111,100,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,101,115,110,123,103],
[114,0,108,113,107,106,115,101],
[106,103,0,102,109,110,116,115],
[110,98,109,0,104,107,116,97],
[96,104,102,107,0,104,111,102],
[101,105,101,104,107,0,116,108],
[88,96,95,95,100,95,0,91],
[108,110,96,114,109,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,107,111,99,100,85],
[88,0,78,95,104,88,86,81],
[106,133,0,100,107,110,111,108],
[104,116,111,0,117,101,107,95],
[100,107,104,94,0,90,71,92],
[112,123,101,110,121,0,102,103],
[111,125,100,104,140,109,0,105],
[126,130,103,116,119,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,100,117,114,109,116],
[100,0,103,95,104,115,97,110],
[102,108,0,101,106,106,99,112],
[111,116,110,0,103,107,114,128],
[94,107,105,108,0,105,99,109],
[97,96,105,104,106,0,96,98],
[102,114,112,97,112,115,0,122],
[95,101,99,83,102,113,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,100,106,96,106,112],
[93,0,98,100,100,99,105,95],
[102,113,0,90,112,95,105,103],
[111,111,121,0,114,102,115,116],
[105,111,99,97,0,109,101,109],
[115,112,116,109,102,0,117,104],
[105,106,106,96,110,94,0,107],
[99,116,108,95,102,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,124,127,116,114,122,98],
[69,0,96,103,127,102,104,97],
[87,115,0,124,108,111,124,98],
[84,108,87,0,120,106,123,96],
[95,84,103,91,0,97,86,106],
[97,109,100,105,114,0,98,107],
[89,107,87,88,125,113,0,85],
[113,114,113,115,105,104,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,112,110,83,91,122],
[96,0,108,116,111,90,97,102],
[111,103,0,97,103,99,86,118],
[99,95,114,0,112,102,107,105],
[101,100,108,99,0,94,95,107],
[128,121,112,109,117,0,94,120],
[120,114,125,104,116,117,0,125],
[89,109,93,106,104,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,110,107,97,97,99],
[111,0,99,92,105,97,105,104],
[103,112,0,97,110,98,105,110],
[101,119,114,0,112,110,117,107],
[104,106,101,99,0,93,108,96],
[114,114,113,101,118,0,126,112],
[114,106,106,94,103,85,0,113],
[112,107,101,104,115,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,129,103,126,94,107],
[109,0,123,117,113,102,100,105],
[102,88,0,120,92,107,93,88],
[82,94,91,0,95,98,58,66],
[108,98,119,116,0,101,90,108],
[85,109,104,113,110,0,78,86],
[117,111,118,153,121,133,0,85],
[104,106,123,145,103,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,90,107,110,97,88],
[115,0,104,89,97,114,86,97],
[106,107,0,90,117,107,116,100],
[121,122,121,0,127,119,90,106],
[104,114,94,84,0,105,96,85],
[101,97,104,92,106,0,85,96],
[114,125,95,121,115,126,0,96],
[123,114,111,105,126,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,91,107,110,102,107],
[103,0,108,105,103,109,103,108],
[111,103,0,89,105,115,112,88],
[120,106,122,0,105,129,121,109],
[104,108,106,106,0,117,106,83],
[101,102,96,82,94,0,109,100],
[109,108,99,90,105,102,0,93],
[104,103,123,102,128,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,95,98,96,108,90],
[111,0,86,94,107,102,105,84],
[113,125,0,108,105,104,110,109],
[116,117,103,0,101,108,117,105],
[113,104,106,110,0,117,118,94],
[115,109,107,103,94,0,97,84],
[103,106,101,94,93,114,0,93],
[121,127,102,106,117,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,95,118,95,85,106],
[97,0,92,86,106,96,92,104],
[107,119,0,96,116,103,83,119],
[116,125,115,0,125,107,101,120],
[93,105,95,86,0,87,89,116],
[116,115,108,104,124,0,109,116],
[126,119,128,110,122,102,0,130],
[105,107,92,91,95,95,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,96,109,100,85,107,107],
[82,0,77,89,94,56,75,95],
[115,134,0,121,124,82,104,93],
[102,122,90,0,110,95,108,122],
[111,117,87,101,0,92,119,115],
[126,155,129,116,119,0,98,127],
[104,136,107,103,92,113,0,127],
[104,116,118,89,96,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,89,73,97,89,90,105],
[127,0,102,86,105,90,108,97],
[122,109,0,99,112,113,108,96],
[138,125,112,0,102,128,143,100],
[114,106,99,109,0,80,117,97],
[122,121,98,83,131,0,116,118],
[121,103,103,68,94,95,0,90],
[106,114,115,111,114,93,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,89,95,95,85,87],
[106,0,83,81,95,94,100,91],
[116,128,0,111,97,128,109,116],
[122,130,100,0,93,111,110,84],
[116,116,114,118,0,121,105,108],
[116,117,83,100,90,0,89,85],
[126,111,102,101,106,122,0,97],
[124,120,95,127,103,126,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,79,91,104,90,109,119],
[93,0,96,112,89,87,101,107],
[132,115,0,115,121,89,113,131],
[120,99,96,0,75,95,104,99],
[107,122,90,136,0,107,112,98],
[121,124,122,116,104,0,123,132],
[102,110,98,107,99,88,0,112],
[92,104,80,112,113,79,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,104,99,94,93,104],
[114,0,105,103,110,103,115,96],
[110,106,0,103,117,114,107,112],
[107,108,108,0,115,110,104,114],
[112,101,94,96,0,106,96,111],
[117,108,97,101,105,0,110,113],
[118,96,104,107,115,101,0,106],
[107,115,99,97,100,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,113,96,116,114,117],
[110,0,102,113,96,105,98,100],
[94,109,0,99,101,107,97,103],
[98,98,112,0,109,108,117,98],
[115,115,110,102,0,106,111,102],
[95,106,104,103,105,0,107,111],
[97,113,114,94,100,104,0,90],
[94,111,108,113,109,100,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,97,92,97,91,107],
[103,0,101,102,96,103,88,94],
[110,110,0,104,106,109,109,106],
[114,109,107,0,99,104,106,105],
[119,115,105,112,0,107,110,111],
[114,108,102,107,104,0,99,122],
[120,123,102,105,101,112,0,121],
[104,117,105,106,100,89,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,106,102,94,122,99],
[102,0,130,103,115,104,115,110],
[98,81,0,98,107,81,111,95],
[105,108,113,0,98,84,116,91],
[109,96,104,113,0,87,110,117],
[117,107,130,127,124,0,104,108],
[89,96,100,95,101,107,0,96],
[112,101,116,120,94,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,106,96,99,99,118],
[116,0,94,99,101,106,108,115],
[115,117,0,116,103,109,103,118],
[105,112,95,0,104,107,100,121],
[115,110,108,107,0,102,111,117],
[112,105,102,104,109,0,103,115],
[112,103,108,111,100,108,0,119],
[93,96,93,90,94,96,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,91,82,81,66,104,120],
[139,0,118,102,128,93,126,125],
[120,93,0,116,118,106,113,139],
[129,109,95,0,122,70,127,108],
[130,83,93,89,0,84,98,108],
[145,118,105,141,127,0,140,147],
[107,85,98,84,113,71,0,122],
[91,86,72,103,103,64,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,104,109,96,111,112],
[116,0,109,104,104,103,121,100],
[113,102,0,104,98,99,126,108],
[107,107,107,0,103,106,106,106],
[102,107,113,108,0,98,118,111],
[115,108,112,105,113,0,124,123],
[100,90,85,105,93,87,0,101],
[99,111,103,105,100,88,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,101,106,105,105,112],
[102,0,110,96,120,96,104,104],
[103,101,0,105,105,99,120,105],
[110,115,106,0,116,102,111,120],
[105,91,106,95,0,102,101,103],
[106,115,112,109,109,0,119,104],
[106,107,91,100,110,92,0,113],
[99,107,106,91,108,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,93,103,121,117,114],
[112,0,112,96,125,144,122,130],
[93,99,0,107,99,119,109,134],
[118,115,104,0,103,120,117,107],
[108,86,112,108,0,113,118,123],
[90,67,92,91,98,0,121,128],
[94,89,102,94,93,90,0,118],
[97,81,77,104,88,83,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,105,105,107,115,101],
[102,0,97,109,107,113,107,105],
[113,114,0,122,109,117,107,101],
[106,102,89,0,106,110,110,111],
[106,104,102,105,0,104,97,94],
[104,98,94,101,107,0,103,96],
[96,104,104,101,114,108,0,104],
[110,106,110,100,117,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,92,105,99,107,96,103],
[106,0,89,103,83,93,76,88],
[119,122,0,103,98,131,93,107],
[106,108,108,0,124,126,87,114],
[112,128,113,87,0,112,108,112],
[104,118,80,85,99,0,89,101],
[115,135,118,124,103,122,0,111],
[108,123,104,97,99,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,81,123,91,101,94,119],
[132,0,53,141,97,101,86,94],
[130,158,0,176,124,168,99,53],
[88,70,35,0,51,107,75,78],
[120,114,87,160,0,116,141,98],
[110,110,43,104,95,0,81,78],
[117,125,112,136,70,130,0,147],
[92,117,158,133,113,133,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,95,109,102,110,107],
[104,0,106,106,106,105,115,111],
[109,105,0,93,113,102,117,113],
[116,105,118,0,117,109,118,109],
[102,105,98,94,0,98,110,99],
[109,106,109,102,113,0,116,107],
[101,96,94,93,101,95,0,101],
[104,100,98,102,112,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,95,91,105,102,111],
[107,0,108,101,91,96,109,101],
[110,103,0,102,90,100,102,101],
[116,110,109,0,100,96,100,114],
[120,120,121,111,0,119,105,129],
[106,115,111,115,92,0,115,115],
[109,102,109,111,106,96,0,120],
[100,110,110,97,82,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,113,105,80,127,99,102],
[129,0,97,120,81,139,115,127],
[98,114,0,133,116,142,110,124],
[106,91,78,0,85,124,91,84],
[131,130,95,126,0,143,107,113],
[84,72,69,87,68,0,100,93],
[112,96,101,120,104,111,0,79],
[109,84,87,127,98,118,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,112,92,89,98,103],
[110,0,112,115,117,103,115,110],
[109,99,0,99,107,107,102,89],
[99,96,112,0,100,98,103,110],
[119,94,104,111,0,100,101,113],
[122,108,104,113,111,0,111,108],
[113,96,109,108,110,100,0,111],
[108,101,122,101,98,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,117,112,118,103,108],
[102,0,113,125,100,109,100,111],
[100,98,0,111,108,108,108,104],
[94,86,100,0,88,97,90,96],
[99,111,103,123,0,115,102,104],
[93,102,103,114,96,0,89,97],
[108,111,103,121,109,122,0,108],
[103,100,107,115,107,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,136,118,122,108,143],
[107,0,90,125,102,93,107,107],
[99,121,0,124,105,119,91,143],
[75,86,87,0,85,102,109,121],
[93,109,106,126,0,107,101,116],
[89,118,92,109,104,0,88,125],
[103,104,120,102,110,123,0,111],
[68,104,68,90,95,86,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,105,102,102,103,114,99],
[126,0,112,101,114,102,115,111],
[106,99,0,105,107,99,108,100],
[109,110,106,0,117,104,116,111],
[109,97,104,94,0,96,113,99],
[108,109,112,107,115,0,118,103],
[97,96,103,95,98,93,0,102],
[112,100,111,100,112,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,12,51,51,60,51,80],
[118,0,71,55,86,71,74,94],
[199,140,0,80,66,57,51,142],
[160,156,131,0,66,153,147,157],
[160,125,145,145,0,113,84,136],
[151,140,154,58,98,0,125,157],
[160,137,160,64,127,86,0,109],
[131,117,69,54,75,54,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,97,105,103,121,114,123],
[93,0,106,105,111,117,115,111],
[114,105,0,111,111,113,113,114],
[106,106,100,0,103,117,116,107],
[108,100,100,108,0,105,113,117],
[90,94,98,94,106,0,101,91],
[97,96,98,95,98,110,0,97],
[88,100,97,104,94,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,114,108,103,108,102],
[113,0,90,111,102,99,108,92],
[101,121,0,117,106,112,109,111],
[97,100,94,0,94,104,98,98],
[103,109,105,117,0,101,103,101],
[108,112,99,107,110,0,110,107],
[103,103,102,113,108,101,0,98],
[109,119,100,113,110,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,111,108,103,102,115],
[104,0,105,108,94,102,106,107],
[102,106,0,109,99,109,105,108],
[100,103,102,0,91,98,107,106],
[103,117,112,120,0,116,115,114],
[108,109,102,113,95,0,109,113],
[109,105,106,104,96,102,0,114],
[96,104,103,105,97,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,116,95,100,107,118],
[103,0,91,95,100,93,96,106],
[120,120,0,107,104,116,117,137],
[95,116,104,0,107,98,97,114],
[116,111,107,104,0,105,99,114],
[111,118,95,113,106,0,110,124],
[104,115,94,114,112,101,0,128],
[93,105,74,97,97,87,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,118,104,110,122,119],
[96,0,105,103,104,116,99,108],
[110,106,0,112,114,103,106,124],
[93,108,99,0,101,106,108,106],
[107,107,97,110,0,110,113,111],
[101,95,108,105,101,0,114,119],
[89,112,105,103,98,97,0,115],
[92,103,87,105,100,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,100,105,103,106,109],
[105,0,115,111,109,101,99,107],
[102,96,0,103,104,98,105,106],
[111,100,108,0,112,101,97,112],
[106,102,107,99,0,97,98,97],
[108,110,113,110,114,0,101,112],
[105,112,106,114,113,110,0,108],
[102,104,105,99,114,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,105,100,93,98,103],
[106,0,110,101,101,111,97,107],
[106,101,0,106,104,97,92,106],
[106,110,105,0,104,102,98,115],
[111,110,107,107,0,106,102,112],
[118,100,114,109,105,0,109,107],
[113,114,119,113,109,102,0,113],
[108,104,105,96,99,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,119,106,101,100,110,116],
[98,0,109,96,98,96,100,113],
[92,102,0,102,90,96,91,106],
[105,115,109,0,105,105,96,117],
[110,113,121,106,0,103,97,110],
[111,115,115,106,108,0,105,118],
[101,111,120,115,114,106,0,127],
[95,98,105,94,101,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,111,106,103,96,112],
[114,0,111,111,105,101,109,112],
[111,100,0,106,95,100,105,116],
[100,100,105,0,95,96,103,108],
[105,106,116,116,0,99,106,117],
[108,110,111,115,112,0,104,117],
[115,102,106,108,105,107,0,106],
[99,99,95,103,94,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,113,106,104,105,108],
[100,0,118,108,103,100,97,101],
[91,93,0,95,100,89,90,88],
[98,103,116,0,101,102,105,93],
[105,108,111,110,0,104,106,95],
[107,111,122,109,107,0,97,102],
[106,114,121,106,105,114,0,107],
[103,110,123,118,116,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,93,99,106,103,98],
[112,0,107,103,106,118,109,117],
[109,104,0,110,100,107,107,107],
[118,108,101,0,109,106,110,102],
[112,105,111,102,0,97,101,105],
[105,93,104,105,114,0,115,110],
[108,102,104,101,110,96,0,104],
[113,94,104,109,106,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,90,101,89,96,85],
[98,0,107,96,81,96,114,93],
[115,104,0,118,112,123,123,93],
[121,115,93,0,121,119,125,86],
[110,130,99,90,0,80,92,83],
[122,115,88,92,131,0,100,104],
[115,97,88,86,119,111,0,115],
[126,118,118,125,128,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,107,106,111,105,108],
[104,0,106,117,99,115,114,115],
[98,105,0,104,114,110,103,94],
[104,94,107,0,103,108,103,108],
[105,112,97,108,0,102,113,113],
[100,96,101,103,109,0,95,101],
[106,97,108,108,98,116,0,109],
[103,96,117,103,98,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,123,137,103,103,85],
[101,0,96,104,116,128,109,105],
[103,115,0,105,133,110,127,118],
[88,107,106,0,129,102,113,84],
[74,95,78,82,0,95,91,86],
[108,83,101,109,116,0,106,96],
[108,102,84,98,120,105,0,101],
[126,106,93,127,125,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,116,107,108,96,101],
[94,0,112,113,108,90,101,93],
[104,99,0,115,102,89,99,81],
[95,98,96,0,95,95,97,104],
[104,103,109,116,0,102,103,101],
[103,121,122,116,109,0,120,108],
[115,110,112,114,108,91,0,103],
[110,118,130,107,110,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,105,94,114,96,106],
[112,0,103,110,102,103,110,99],
[107,108,0,114,108,103,116,106],
[106,101,97,0,92,95,102,89],
[117,109,103,119,0,109,113,115],
[97,108,108,116,102,0,109,107],
[115,101,95,109,98,102,0,101],
[105,112,105,122,96,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,100,114,87,113,94],
[114,0,106,109,118,108,122,102],
[100,105,0,101,112,103,106,97],
[111,102,110,0,128,118,107,107],
[97,93,99,83,0,110,109,85],
[124,103,108,93,101,0,112,99],
[98,89,105,104,102,99,0,99],
[117,109,114,104,126,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,107,104,101,123,134],
[104,0,114,115,103,108,107,116],
[95,97,0,112,98,96,112,120],
[104,96,99,0,128,91,103,106],
[107,108,113,83,0,101,87,112],
[110,103,115,120,110,0,111,114],
[88,104,99,108,124,100,0,104],
[77,95,91,105,99,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,116,117,103,111,119],
[101,0,118,107,114,90,101,111],
[89,93,0,97,109,92,88,94],
[95,104,114,0,119,103,113,106],
[94,97,102,92,0,96,97,100],
[108,121,119,108,115,0,100,110],
[100,110,123,98,114,111,0,111],
[92,100,117,105,111,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,86,111,83,92,96,101],
[116,0,96,116,84,110,122,109],
[125,115,0,120,111,112,109,104],
[100,95,91,0,94,92,109,95],
[128,127,100,117,0,108,118,121],
[119,101,99,119,103,0,123,112],
[115,89,102,102,93,88,0,93],
[110,102,107,116,90,99,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,115,121,94,107,116],
[109,0,109,119,110,91,95,118],
[108,102,0,99,117,95,112,127],
[96,92,112,0,108,70,98,109],
[90,101,94,103,0,105,100,106],
[117,120,116,141,106,0,94,141],
[104,116,99,113,111,117,0,120],
[95,93,84,102,105,70,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,92,106,108,95,92],
[110,0,114,100,119,119,99,109],
[114,97,0,95,106,119,107,99],
[119,111,116,0,121,122,100,106],
[105,92,105,90,0,114,94,96],
[103,92,92,89,97,0,96,92],
[116,112,104,111,117,115,0,113],
[119,102,112,105,115,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,107,108,108,114,108],
[104,0,105,101,105,114,110,107],
[107,106,0,114,106,109,113,103],
[104,110,97,0,107,96,110,110],
[103,106,105,104,0,114,112,103],
[103,97,102,115,97,0,103,115],
[97,101,98,101,99,108,0,103],
[103,104,108,101,108,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,112,116,103,106,101],
[105,0,101,111,105,113,103,96],
[105,110,0,109,119,106,97,94],
[99,100,102,0,119,108,106,99],
[95,106,92,92,0,97,99,105],
[108,98,105,103,114,0,101,107],
[105,108,114,105,112,110,0,105],
[110,115,117,112,106,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,76,108,94,97,83,105],
[99,0,85,91,100,90,94,95],
[135,126,0,125,118,108,103,106],
[103,120,86,0,108,95,101,93],
[117,111,93,103,0,89,96,96],
[114,121,103,116,122,0,103,111],
[128,117,108,110,115,108,0,101],
[106,116,105,118,115,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,95,111,106,107,107],
[107,0,113,92,115,96,108,95],
[101,98,0,90,97,87,96,82],
[116,119,121,0,111,108,97,99],
[100,96,114,100,0,108,107,103],
[105,115,124,103,103,0,109,100],
[104,103,115,114,104,102,0,94],
[104,116,129,112,108,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,117,110,104,112,116],
[108,0,100,120,112,111,112,105],
[107,111,0,108,112,108,112,104],
[94,91,103,0,111,94,108,99],
[101,99,99,100,0,109,108,109],
[107,100,103,117,102,0,103,108],
[99,99,99,103,103,108,0,94],
[95,106,107,112,102,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,97,121,105,90,107],
[106,0,104,99,113,107,94,98],
[101,107,0,95,111,77,91,94],
[114,112,116,0,119,105,96,100],
[90,98,100,92,0,91,93,99],
[106,104,134,106,120,0,107,95],
[121,117,120,115,118,104,0,102],
[104,113,117,111,112,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,103,110,120,109,118],
[102,0,104,108,104,118,104,109],
[99,107,0,116,106,114,119,128],
[108,103,95,0,111,92,98,88],
[101,107,105,100,0,105,98,104],
[91,93,97,119,106,0,111,108],
[102,107,92,113,113,100,0,103],
[93,102,83,123,107,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,129,107,104,114,95,106],
[95,0,116,128,103,108,110,109],
[82,95,0,92,89,93,89,101],
[104,83,119,0,101,104,94,105],
[107,108,122,110,0,103,87,115],
[97,103,118,107,108,0,93,119],
[116,101,122,117,124,118,0,126],
[105,102,110,106,96,92,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,101,98,120,112,115],
[99,0,102,106,114,105,103,108],
[96,109,0,111,119,114,93,117],
[110,105,100,0,105,120,101,127],
[113,97,92,106,0,107,101,127],
[91,106,97,91,104,0,96,110],
[99,108,118,110,110,115,0,116],
[96,103,94,84,84,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,89,94,93,98,106],
[112,0,105,102,103,108,102,105],
[112,106,0,100,102,102,101,100],
[122,109,111,0,101,107,104,105],
[117,108,109,110,0,103,103,109],
[118,103,109,104,108,0,110,100],
[113,109,110,107,108,101,0,112],
[105,106,111,106,102,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,94,92,90,100,107],
[117,0,108,115,105,102,115,116],
[112,103,0,118,106,96,110,110],
[117,96,93,0,99,90,100,104],
[119,106,105,112,0,111,109,107],
[121,109,115,121,100,0,117,115],
[111,96,101,111,102,94,0,99],
[104,95,101,107,104,96,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,105,114,96,93,95],
[105,0,101,117,115,103,94,93],
[118,110,0,112,106,121,107,94],
[106,94,99,0,105,85,98,115],
[97,96,105,106,0,95,82,96],
[115,108,90,126,116,0,96,107],
[118,117,104,113,129,115,0,109],
[116,118,117,96,115,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,93,93,100,109,104,98],
[92,0,100,108,115,110,104,103],
[118,111,0,101,111,112,97,114],
[118,103,110,0,111,120,127,124],
[111,96,100,100,0,100,96,99],
[102,101,99,91,111,0,99,104],
[107,107,114,84,115,112,0,110],
[113,108,97,87,112,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,120,84,114,127,92,143],
[128,0,120,116,116,93,109,128],
[91,91,0,108,103,70,79,105],
[127,95,103,0,126,86,81,133],
[97,95,108,85,0,74,79,108],
[84,118,141,125,137,0,112,128],
[119,102,132,130,132,99,0,121],
[68,83,106,78,103,83,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,132,80,92,90,159,80],
[115,0,112,99,128,149,169,94],
[79,99,0,94,74,112,139,90],
[131,112,117,0,72,135,159,53],
[119,83,137,139,0,101,142,153],
[121,62,99,76,110,0,88,76],
[52,42,72,52,69,123,0,66],
[131,117,121,158,58,135,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,99,119,111,103,111,110],
[92,0,92,97,95,100,100,106],
[112,119,0,112,105,111,106,124],
[92,114,99,0,103,113,101,106],
[100,116,106,108,0,115,106,116],
[108,111,100,98,96,0,93,115],
[100,111,105,110,105,118,0,112],
[101,105,87,105,95,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,82,94,82,116,97],
[112,0,112,102,101,109,103,108],
[105,99,0,93,111,94,107,97],
[129,109,118,0,100,98,110,88],
[117,110,100,111,0,102,122,105],
[129,102,117,113,109,0,124,118],
[95,108,104,101,89,87,0,117],
[114,103,114,123,106,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,110,104,103,126,128],
[92,0,95,93,91,92,99,106],
[106,116,0,115,110,102,122,124],
[101,118,96,0,96,114,123,119],
[107,120,101,115,0,110,126,111],
[108,119,109,97,101,0,124,107],
[85,112,89,88,85,87,0,85],
[83,105,87,92,100,104,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,111,99,112,105,114],
[116,0,121,114,110,104,116,111],
[105,90,0,102,105,92,91,105],
[100,97,109,0,100,102,101,109],
[112,101,106,111,0,105,111,112],
[99,107,119,109,106,0,106,114],
[106,95,120,110,100,105,0,116],
[97,100,106,102,99,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,132,104,91,124,115,113],
[123,0,103,111,111,119,108,102],
[79,108,0,95,87,108,98,94],
[107,100,116,0,103,98,105,108],
[120,100,124,108,0,127,121,114],
[87,92,103,113,84,0,95,99],
[96,103,113,106,90,116,0,102],
[98,109,117,103,97,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,79,81,82,99,93,116],
[127,0,102,90,108,114,113,132],
[132,109,0,111,106,108,98,123],
[130,121,100,0,102,101,100,129],
[129,103,105,109,0,105,125,123],
[112,97,103,110,106,0,98,121],
[118,98,113,111,86,113,0,116],
[95,79,88,82,88,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,80,103,87,83,117],
[87,0,94,76,88,86,83,117],
[102,117,0,75,94,96,68,104],
[131,135,136,0,116,103,108,139],
[108,123,117,95,0,87,74,118],
[124,125,115,108,124,0,92,125],
[128,128,143,103,137,119,0,166],
[94,94,107,72,93,86,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,96,112,124,110,113],
[108,0,97,100,94,120,103,97],
[102,114,0,109,110,109,112,111],
[115,111,102,0,113,123,102,114],
[99,117,101,98,0,110,113,101],
[87,91,102,88,101,0,102,101],
[101,108,99,109,98,109,0,101],
[98,114,100,97,110,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,116,100,118,113,107,116],
[125,0,116,106,124,109,105,110],
[95,95,0,100,108,100,89,99],
[111,105,111,0,114,111,102,106],
[93,87,103,97,0,106,98,104],
[98,102,111,100,105,0,101,94],
[104,106,122,109,113,110,0,105],
[95,101,112,105,107,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,109,110,121,102,110],
[92,0,98,97,71,80,78,100],
[94,113,0,117,85,115,121,110],
[102,114,94,0,87,107,91,106],
[101,140,126,124,0,100,122,125],
[90,131,96,104,111,0,86,106],
[109,133,90,120,89,125,0,118],
[101,111,101,105,86,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,100,120,99,106,105],
[112,0,104,105,112,112,108,94],
[115,107,0,115,119,104,119,108],
[111,106,96,0,108,96,111,109],
[91,99,92,103,0,93,100,99],
[112,99,107,115,118,0,114,114],
[105,103,92,100,111,97,0,103],
[106,117,103,102,112,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,105,107,101,107,98],
[109,0,99,106,108,97,106,101],
[106,112,0,106,116,104,109,116],
[106,105,105,0,118,103,102,96],
[104,103,95,93,0,99,96,95],
[110,114,107,108,112,0,117,104],
[104,105,102,109,115,94,0,105],
[113,110,95,115,116,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,102,104,120,102,106],
[100,0,97,110,99,118,102,118],
[114,114,0,101,111,113,97,106],
[109,101,110,0,107,107,93,132],
[107,112,100,104,0,125,114,118],
[91,93,98,104,86,0,105,114],
[109,109,114,118,97,106,0,120],
[105,93,105,79,93,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,105,130,118,107,101],
[106,0,106,109,117,107,100,97],
[99,105,0,110,129,111,101,107],
[106,102,101,0,112,102,109,108],
[81,94,82,99,0,102,103,91],
[93,104,100,109,109,0,92,96],
[104,111,110,102,108,119,0,95],
[110,114,104,103,120,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,114,114,115,111,117],
[103,0,106,110,102,111,104,100],
[108,105,0,104,103,101,104,108],
[97,101,107,0,106,121,96,102],
[97,109,108,105,0,120,93,98],
[96,100,110,90,91,0,96,102],
[100,107,107,115,118,115,0,120],
[94,111,103,109,113,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,100,107,102,116,107],
[104,0,112,106,114,111,116,117],
[104,99,0,111,114,94,113,99],
[111,105,100,0,119,97,107,106],
[104,97,97,92,0,73,91,96],
[109,100,117,114,138,0,116,109],
[95,95,98,104,120,95,0,113],
[104,94,112,105,115,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,92,93,104,75,104,91],
[123,0,110,93,109,100,109,120],
[119,101,0,110,109,95,122,94],
[118,118,101,0,108,105,99,112],
[107,102,102,103,0,109,104,94],
[136,111,116,106,102,0,101,93],
[107,102,89,112,107,110,0,99],
[120,91,117,99,117,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,93,121,110,108,87],
[101,0,101,96,99,104,109,106],
[111,110,0,101,112,120,116,100],
[118,115,110,0,119,121,111,102],
[90,112,99,92,0,127,111,95],
[101,107,91,90,84,0,95,85],
[103,102,95,100,100,116,0,99],
[124,105,111,109,116,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,103,104,97,105,98],
[103,0,93,87,87,84,104,83],
[103,118,0,102,97,114,121,113],
[108,124,109,0,105,93,114,99],
[107,124,114,106,0,101,119,112],
[114,127,97,118,110,0,105,94],
[106,107,90,97,92,106,0,105],
[113,128,98,112,99,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,179,119,118,58,119,90],
[121,0,121,91,91,120,91,91],
[32,90,0,63,30,58,122,62],
[92,120,148,0,89,88,121,62],
[93,120,181,122,0,120,181,122],
[153,91,153,123,91,0,122,93],
[92,120,89,90,30,89,0,89],
[121,120,149,149,89,118,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,111,103,110,105,102],
[114,0,104,90,110,107,98,107],
[103,107,0,86,113,107,93,97],
[100,121,125,0,119,120,106,108],
[108,101,98,92,0,99,108,101],
[101,104,104,91,112,0,93,92],
[106,113,118,105,103,118,0,96],
[109,104,114,103,110,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,118,107,107,114,105],
[98,0,108,103,90,102,108,96],
[95,103,0,99,96,98,99,97],
[93,108,112,0,105,101,93,99],
[104,121,115,106,0,115,110,108],
[104,109,113,110,96,0,102,102],
[97,103,112,118,101,109,0,99],
[106,115,114,112,103,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,114,112,111,115,113],
[104,0,104,120,107,109,123,133],
[110,107,0,125,95,111,109,126],
[97,91,86,0,95,101,101,108],
[99,104,116,116,0,108,110,117],
[100,102,100,110,103,0,107,107],
[96,88,102,110,101,104,0,108],
[98,78,85,103,94,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,80,102,95,110,107,100],
[110,0,107,120,114,110,112,103],
[131,104,0,117,117,100,113,112],
[109,91,94,0,92,98,101,92],
[116,97,94,119,0,106,104,112],
[101,101,111,113,105,0,104,109],
[104,99,98,110,107,107,0,119],
[111,108,99,119,99,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,95,114,83,88,82],
[119,0,116,115,110,100,107,127],
[116,95,0,102,101,104,104,104],
[116,96,109,0,132,96,99,116],
[97,101,110,79,0,91,84,98],
[128,111,107,115,120,0,101,106],
[123,104,107,112,127,110,0,120],
[129,84,107,95,113,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,127,106,108,111,113],
[109,0,112,127,112,102,130,130],
[95,99,0,117,111,119,122,126],
[84,84,94,0,107,84,105,102],
[105,99,100,104,0,100,103,112],
[103,109,92,127,111,0,128,122],
[100,81,89,106,108,83,0,108],
[98,81,85,109,99,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,107,98,108,96,98],
[105,0,110,101,115,85,92,101],
[101,101,0,110,112,102,108,109],
[104,110,101,0,100,97,86,98],
[113,96,99,111,0,102,95,105],
[103,126,109,114,109,0,95,110],
[115,119,103,125,116,116,0,111],
[113,110,102,113,106,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,104,98,115,110,105],
[104,0,108,98,98,114,112,99],
[108,103,0,99,96,109,106,95],
[107,113,112,0,105,121,118,106],
[113,113,115,106,0,111,121,103],
[96,97,102,90,100,0,108,93],
[101,99,105,93,90,103,0,100],
[106,112,116,105,108,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,95,112,100,98,103],
[107,0,101,107,103,103,101,100],
[110,110,0,102,99,101,104,99],
[116,104,109,0,112,118,109,102],
[99,108,112,99,0,94,108,106],
[111,108,110,93,117,0,105,99],
[113,110,107,102,103,106,0,110],
[108,111,112,109,105,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,95,123,106,111,122],
[108,0,109,96,123,111,108,115],
[90,102,0,101,124,105,109,106],
[116,115,110,0,118,105,117,122],
[88,88,87,93,0,92,93,95],
[105,100,106,106,119,0,94,117],
[100,103,102,94,118,117,0,117],
[89,96,105,89,116,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,109,111,101,109,109],
[107,0,115,97,116,104,100,98],
[111,96,0,110,111,109,106,99],
[102,114,101,0,99,114,95,99],
[100,95,100,112,0,96,93,94],
[110,107,102,97,115,0,106,99],
[102,111,105,116,118,105,0,101],
[102,113,112,112,117,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,132,160,77,133,158],
[105,0,158,132,158,131,158,158],
[104,53,0,105,107,77,81,77],
[79,79,106,0,106,50,106,103],
[51,53,104,105,0,77,131,131],
[134,80,134,161,134,0,134,185],
[78,53,130,105,80,77,0,77],
[53,53,134,108,80,26,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,104,104,102,121,126],
[107,0,102,107,100,101,114,111],
[112,109,0,97,108,102,101,110],
[107,104,114,0,123,112,108,117],
[107,111,103,88,0,90,109,108],
[109,110,109,99,121,0,124,119],
[90,97,110,103,102,87,0,106],
[85,100,101,94,103,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,122,116,123,102,114,111],
[65,0,94,106,67,77,64,44],
[89,117,0,104,72,75,72,71],
[95,105,107,0,99,85,87,78],
[88,144,139,112,0,91,83,89],
[109,134,136,126,120,0,102,101],
[97,147,139,124,128,109,0,99],
[100,167,140,133,122,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,133,110,115,97,121],
[77,0,106,93,113,89,94,118],
[96,105,0,117,124,115,109,123],
[78,118,94,0,108,96,81,121],
[101,98,87,103,0,88,96,118],
[96,122,96,115,123,0,96,115],
[114,117,102,130,115,115,0,115],
[90,93,88,90,93,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,104,95,102,94,97],
[110,0,93,100,97,100,108,108],
[122,118,0,111,106,98,116,114],
[107,111,100,0,103,100,107,109],
[116,114,105,108,0,111,121,112],
[109,111,113,111,100,0,121,113],
[117,103,95,104,90,90,0,101],
[114,103,97,102,99,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,112,102,122,98,106],
[100,0,96,112,103,122,102,102],
[107,115,0,116,105,118,107,115],
[99,99,95,0,97,114,102,111],
[109,108,106,114,0,126,103,117],
[89,89,93,97,85,0,91,102],
[113,109,104,109,108,120,0,114],
[105,109,96,100,94,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,128,114,97,98,117],
[95,0,103,120,95,112,90,103],
[108,108,0,121,101,93,80,96],
[83,91,90,0,80,67,69,66],
[97,116,110,131,0,97,110,103],
[114,99,118,144,114,0,105,119],
[113,121,131,142,101,106,0,111],
[94,108,115,145,108,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,76,76,95,97,91],
[109,0,102,88,78,93,107,105],
[123,109,0,101,93,101,114,104],
[135,123,110,0,92,96,114,117],
[135,133,118,119,0,103,129,124],
[116,118,110,115,108,0,113,99],
[114,104,97,97,82,98,0,107],
[120,106,107,94,87,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,119,112,126,118,104],
[98,0,102,111,114,102,119,120],
[90,109,0,104,100,110,94,96],
[92,100,107,0,98,101,94,88],
[99,97,111,113,0,103,95,92],
[85,109,101,110,108,0,106,94],
[93,92,117,117,116,105,0,98],
[107,91,115,123,119,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,88,97,83,112,99],
[124,0,100,111,132,107,117,112],
[106,111,0,115,110,100,108,132],
[123,100,96,0,116,104,109,105],
[114,79,101,95,0,103,98,125],
[128,104,111,107,108,0,112,131],
[99,94,103,102,113,99,0,113],
[112,99,79,106,86,80,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,98,86,96,98,93],
[102,0,104,108,93,98,103,88],
[110,107,0,91,94,116,104,94],
[113,103,120,0,115,120,118,99],
[125,118,117,96,0,110,109,106],
[115,113,95,91,101,0,108,84],
[113,108,107,93,102,103,0,83],
[118,123,117,112,105,127,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,103,99,116,106,105],
[115,0,112,105,111,118,112,106],
[108,99,0,105,102,117,103,103],
[108,106,106,0,101,109,106,100],
[112,100,109,110,0,113,111,108],
[95,93,94,102,98,0,96,93],
[105,99,108,105,100,115,0,101],
[106,105,108,111,103,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,103,93,100,87,69,93],
[145,0,107,94,117,103,102,103],
[108,104,0,87,114,100,81,76],
[118,117,124,0,121,119,101,123],
[111,94,97,90,0,94,74,80],
[124,108,111,92,117,0,95,102],
[142,109,130,110,137,116,0,103],
[118,108,135,88,131,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,124,123,95,133,147,124],
[87,0,122,135,110,146,134,134],
[87,89,0,135,71,83,135,85],
[88,76,76,0,48,86,123,98],
[116,101,140,163,0,150,148,135],
[78,65,128,125,61,0,149,99],
[64,77,76,88,63,62,0,73],
[87,77,126,113,76,112,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,126,115,103,125,115],
[105,0,105,116,105,120,115,107],
[117,106,0,121,105,106,105,106],
[85,95,90,0,97,97,104,99],
[96,106,106,114,0,106,117,98],
[108,91,105,114,105,0,110,105],
[86,96,106,107,94,101,0,108],
[96,104,105,112,113,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,122,111,95,114,102],
[98,0,110,102,119,107,111,100],
[108,101,0,102,115,123,124,115],
[89,109,109,0,100,97,117,102],
[100,92,96,111,0,105,130,101],
[116,104,88,114,106,0,131,97],
[97,100,87,94,81,80,0,89],
[109,111,96,109,110,114,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,104,113,96,97,99],
[100,0,100,104,105,89,96,97],
[113,111,0,114,110,87,99,108],
[107,107,97,0,103,93,102,90],
[98,106,101,108,0,102,94,106],
[115,122,124,118,109,0,103,111],
[114,115,112,109,117,108,0,101],
[112,114,103,121,105,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,103,119,109,96,120],
[103,0,119,104,123,92,106,119],
[105,92,0,102,112,91,96,107],
[108,107,109,0,118,105,100,120],
[92,88,99,93,0,99,97,96],
[102,119,120,106,112,0,105,127],
[115,105,115,111,114,106,0,112],
[91,92,104,91,115,84,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,98,104,84,95,97],
[119,0,117,94,128,137,127,119],
[107,94,0,94,97,127,97,94],
[113,117,117,0,115,123,96,121],
[107,83,114,96,0,113,120,111],
[127,74,84,88,98,0,74,101],
[116,84,114,115,91,137,0,122],
[114,92,117,90,100,110,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,124,117,102,109,114],
[104,0,104,96,106,93,102,104],
[105,107,0,108,108,110,109,122],
[87,115,103,0,92,95,101,102],
[94,105,103,119,0,110,100,112],
[109,118,101,116,101,0,112,120],
[102,109,102,110,111,99,0,120],
[97,107,89,109,99,91,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,113,99,104,118,105],
[113,0,115,114,118,113,133,104],
[110,96,0,115,102,97,116,96],
[98,97,96,0,99,107,112,96],
[112,93,109,112,0,115,124,106],
[107,98,114,104,96,0,120,109],
[93,78,95,99,87,91,0,91],
[106,107,115,115,105,102,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,93,86,94,86,83],
[108,0,126,101,86,101,104,102],
[90,85,0,82,91,82,88,83],
[118,110,129,0,109,108,88,106],
[125,125,120,102,0,92,99,114],
[117,110,129,103,119,0,109,109],
[125,107,123,123,112,102,0,120],
[128,109,128,105,97,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,131,53,77,52,79,50],
[133,0,156,105,132,108,133,107],
[80,55,0,52,80,81,80,80],
[158,106,159,0,185,81,106,78],
[134,79,131,26,0,52,107,28],
[159,103,130,130,159,0,159,132],
[132,78,131,105,104,52,0,77],
[161,104,131,133,183,79,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,96,124,103,140,121,156],
[89,0,100,120,97,111,106,123],
[115,111,0,123,105,129,98,121],
[87,91,88,0,107,116,103,116],
[108,114,106,104,0,120,90,117],
[71,100,82,95,91,0,99,91],
[90,105,113,108,121,112,0,103],
[55,88,90,95,94,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,102,115,103,94,102],
[115,0,106,118,105,111,105,105],
[105,105,0,103,112,107,107,104],
[109,93,108,0,112,100,112,103],
[96,106,99,99,0,96,97,85],
[108,100,104,111,115,0,114,107],
[117,106,104,99,114,97,0,95],
[109,106,107,108,126,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,100,100,116,97,91],
[108,0,106,104,105,113,107,110],
[101,105,0,103,102,113,96,94],
[111,107,108,0,115,105,93,108],
[111,106,109,96,0,103,93,112],
[95,98,98,106,108,0,96,102],
[114,104,115,118,118,115,0,110],
[120,101,117,103,99,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,117,114,103,101,111],
[106,0,103,109,97,104,101,97],
[102,108,0,115,108,118,112,115],
[94,102,96,0,103,97,104,94],
[97,114,103,108,0,102,111,103],
[108,107,93,114,109,0,106,111],
[110,110,99,107,100,105,0,98],
[100,114,96,117,108,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,119,104,93,107,93,105],
[120,0,125,104,98,122,115,119],
[92,86,0,100,88,119,91,97],
[107,107,111,0,93,121,104,101],
[118,113,123,118,0,115,105,110],
[104,89,92,90,96,0,95,99],
[118,96,120,107,106,116,0,109],
[106,92,114,110,101,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,124,136,145,124,153,97],
[85,0,94,105,108,123,125,124],
[87,117,0,116,147,126,136,98],
[75,106,95,0,124,105,136,115],
[66,103,64,87,0,93,118,59],
[87,88,85,106,118,0,135,116],
[58,86,75,75,93,76,0,66],
[114,87,113,96,152,95,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,104,116,95,105,105],
[115,0,112,104,107,101,103,108],
[110,99,0,105,108,100,102,105],
[107,107,106,0,105,105,107,102],
[95,104,103,106,0,108,100,106],
[116,110,111,106,103,0,117,111],
[106,108,109,104,111,94,0,101],
[106,103,106,109,105,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,90,93,94,98,77,98],
[115,0,96,111,120,93,97,110],
[121,115,0,107,109,102,85,119],
[118,100,104,0,109,100,85,110],
[117,91,102,102,0,89,91,109],
[113,118,109,111,122,0,108,103],
[134,114,126,126,120,103,0,119],
[113,101,92,101,102,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,118,109,108,107,118],
[104,0,103,124,107,115,117,120],
[115,108,0,108,101,115,115,110],
[93,87,103,0,101,115,115,113],
[102,104,110,110,0,124,115,119],
[103,96,96,96,87,0,95,112],
[104,94,96,96,96,116,0,104],
[93,91,101,98,92,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,105,107,122,109,98],
[96,0,102,95,96,90,96,100],
[97,109,0,99,116,108,104,121],
[106,116,112,0,114,102,98,99],
[104,115,95,97,0,105,100,100],
[89,121,103,109,106,0,100,101],
[102,115,107,113,111,111,0,97],
[113,111,90,112,111,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,93,93,105,94,94],
[99,0,101,103,101,106,101,107],
[116,110,0,108,105,115,98,87],
[118,108,103,0,109,109,111,111],
[118,110,106,102,0,110,104,102],
[106,105,96,102,101,0,111,102],
[117,110,113,100,107,100,0,110],
[117,104,124,100,109,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,104,113,131,89,97],
[94,0,113,95,93,116,87,86],
[98,98,0,116,105,107,89,101],
[107,116,95,0,113,108,92,102],
[98,118,106,98,0,109,96,109],
[80,95,104,103,102,0,86,88],
[122,124,122,119,115,125,0,102],
[114,125,110,109,102,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,101,106,100,113,92,97],
[78,0,83,81,92,86,86,94],
[110,128,0,101,112,121,114,113],
[105,130,110,0,120,109,116,109],
[111,119,99,91,0,104,105,109],
[98,125,90,102,107,0,111,103],
[119,125,97,95,106,100,0,110],
[114,117,98,102,102,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,109,104,106,102,110],
[99,0,105,105,108,109,91,110],
[104,106,0,96,107,105,107,102],
[102,106,115,0,105,112,101,94],
[107,103,104,106,0,105,91,103],
[105,102,106,99,106,0,99,94],
[109,120,104,110,120,112,0,111],
[101,101,109,117,108,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,108,114,107,113,119,100],
[87,0,81,111,102,112,121,113],
[103,130,0,119,113,121,104,100],
[97,100,92,0,101,113,121,97],
[104,109,98,110,0,109,110,100],
[98,99,90,98,102,0,108,89],
[92,90,107,90,101,103,0,100],
[111,98,111,114,111,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,94,111,114,130,117],
[92,0,118,106,112,114,120,100],
[96,93,0,88,101,109,108,90],
[117,105,123,0,106,123,120,110],
[100,99,110,105,0,119,101,106],
[97,97,102,88,92,0,102,104],
[81,91,103,91,110,109,0,90],
[94,111,121,101,105,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,109,110,100,100,114],
[92,0,117,98,108,98,98,113],
[96,94,0,87,98,102,106,101],
[102,113,124,0,114,112,107,121],
[101,103,113,97,0,97,90,94],
[111,113,109,99,114,0,95,112],
[111,113,105,104,121,116,0,106],
[97,98,110,90,117,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,98,101,114,109,107],
[110,0,116,107,98,122,106,110],
[102,95,0,92,89,102,91,91],
[113,104,119,0,102,121,111,105],
[110,113,122,109,0,128,100,103],
[97,89,109,90,83,0,99,96],
[102,105,120,100,111,112,0,115],
[104,101,120,106,108,115,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,102,119,86,115,95,101],
[90,0,96,110,75,102,103,78],
[109,115,0,125,105,117,129,106],
[92,101,86,0,86,116,93,92],
[125,136,106,125,0,139,126,99],
[96,109,94,95,72,0,90,90],
[116,108,82,118,85,121,0,105],
[110,133,105,119,112,121,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,85,99,89,118,90,94],
[111,0,103,101,98,103,106,97],
[126,108,0,104,98,107,109,109],
[112,110,107,0,99,110,96,106],
[122,113,113,112,0,114,95,113],
[93,108,104,101,97,0,96,86],
[121,105,102,115,116,115,0,104],
[117,114,102,105,98,125,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,108,96,108,105,109,107],
[124,0,101,114,115,112,120,128],
[103,110,0,109,112,111,103,100],
[115,97,102,0,113,102,99,113],
[103,96,99,98,0,105,119,103],
[106,99,100,109,106,0,105,115],
[102,91,108,112,92,106,0,116],
[104,83,111,98,108,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,116,102,104,108,124],
[90,0,88,106,99,98,100,102],
[108,123,0,128,107,118,104,121],
[95,105,83,0,98,94,96,113],
[109,112,104,113,0,111,103,125],
[107,113,93,117,100,0,110,116],
[103,111,107,115,108,101,0,111],
[87,109,90,98,86,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,108,108,105,97,108],
[102,0,101,92,99,96,92,104],
[106,110,0,95,99,95,94,99],
[103,119,116,0,110,116,107,117],
[103,112,112,101,0,109,97,106],
[106,115,116,95,102,0,99,111],
[114,119,117,104,114,112,0,114],
[103,107,112,94,105,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,109,113,112,111,114],
[110,0,121,99,115,114,113,105],
[102,90,0,103,100,103,105,86],
[102,112,108,0,106,114,110,106],
[98,96,111,105,0,119,104,103],
[99,97,108,97,92,0,98,99],
[100,98,106,101,107,113,0,106],
[97,106,125,105,108,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,123,111,107,102,111],
[109,0,112,144,115,129,96,121],
[111,99,0,133,106,120,94,126],
[88,67,78,0,72,104,90,75],
[100,96,105,139,0,120,120,114],
[104,82,91,107,91,0,92,93],
[109,115,117,121,91,119,0,103],
[100,90,85,136,97,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,93,99,84,99,101,105],
[84,0,109,106,80,86,69,101],
[118,102,0,100,85,88,109,105],
[112,105,111,0,95,118,116,110],
[127,131,126,116,0,94,117,120],
[112,125,123,93,117,0,124,119],
[110,142,102,95,94,87,0,125],
[106,110,106,101,91,92,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,98,103,91,104,95],
[116,0,103,114,112,115,117,117],
[117,108,0,111,111,97,113,112],
[113,97,100,0,112,90,112,112],
[108,99,100,99,0,104,106,112],
[120,96,114,121,107,0,123,107],
[107,94,98,99,105,88,0,99],
[116,94,99,99,99,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,108,98,104,115,114],
[119,0,104,119,117,103,122,117],
[104,107,0,104,111,106,113,120],
[103,92,107,0,105,107,105,111],
[113,94,100,106,0,97,97,111],
[107,108,105,104,114,0,115,113],
[96,89,98,106,114,96,0,110],
[97,94,91,100,100,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,114,113,111,92,90],
[103,0,105,107,93,109,94,90],
[103,106,0,119,94,114,112,85],
[97,104,92,0,94,102,99,86],
[98,118,117,117,0,116,97,110],
[100,102,97,109,95,0,97,79],
[119,117,99,112,114,114,0,110],
[121,121,126,125,101,132,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,69,108,87,88,80,104],
[112,0,113,119,129,126,104,129],
[142,98,0,118,133,140,108,135],
[103,92,93,0,89,113,91,114],
[124,82,78,122,0,115,93,109],
[123,85,71,98,96,0,97,105],
[131,107,103,120,118,114,0,100],
[107,82,76,97,102,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,105,132,105,107,132],
[106,0,79,79,133,52,81,133],
[104,132,0,131,131,157,161,158],
[106,132,80,0,105,130,134,107],
[79,78,80,106,0,105,107,133],
[106,159,54,81,106,0,135,81],
[104,130,50,77,104,76,0,104],
[79,78,53,104,78,130,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,86,87,69,84,113,133],
[71,0,90,79,71,84,100,102],
[125,121,0,95,79,77,94,114],
[124,132,116,0,125,121,123,104],
[142,140,132,86,0,104,131,125],
[127,127,134,90,107,0,129,109],
[98,111,117,88,80,82,0,110],
[78,109,97,107,86,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,76,114,101,87,74,102],
[111,0,78,150,105,78,63,105],
[135,133,0,150,137,86,107,140],
[97,61,61,0,87,62,85,116],
[110,106,74,124,0,71,69,138],
[124,133,125,149,140,0,108,102],
[137,148,104,126,142,103,0,129],
[109,106,71,95,73,109,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,84,71,98,86,80,89],
[108,0,87,88,78,107,79,87],
[127,124,0,103,106,138,123,123],
[140,123,108,0,128,148,105,126],
[113,133,105,83,0,108,116,127],
[125,104,73,63,103,0,75,87],
[131,132,88,106,95,136,0,117],
[122,124,88,85,84,124,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,119,124,105,95,119],
[107,0,115,116,97,100,97,122],
[105,96,0,100,107,102,99,107],
[92,95,111,0,113,115,101,101],
[87,114,104,98,0,98,101,100],
[106,111,109,96,113,0,114,104],
[116,114,112,110,110,97,0,111],
[92,89,104,110,111,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,80,100,69,119,109,119],
[113,0,140,110,70,122,160,90],
[131,71,0,78,58,119,119,79],
[111,101,133,0,108,120,130,108],
[142,141,153,103,0,137,152,109],
[92,89,92,91,74,0,109,96],
[102,51,92,81,59,102,0,80],
[92,121,132,103,102,115,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,114,108,101,97,114],
[108,0,102,99,102,100,98,104],
[112,109,0,110,101,97,103,105],
[97,112,101,0,98,93,102,96],
[103,109,110,113,0,103,103,105],
[110,111,114,118,108,0,101,106],
[114,113,108,109,108,110,0,101],
[97,107,106,115,106,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,107,122,106,115,116],
[109,0,127,110,115,110,101,102],
[101,84,0,103,103,90,91,97],
[104,101,108,0,103,113,101,108],
[89,96,108,108,0,100,94,108],
[105,101,121,98,111,0,109,105],
[96,110,120,110,117,102,0,103],
[95,109,114,103,103,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,138,131,104,103,102,97],
[91,0,104,98,83,87,113,109],
[73,107,0,99,82,90,72,80],
[80,113,112,0,81,109,76,69],
[107,128,129,130,0,118,103,87],
[108,124,121,102,93,0,124,117],
[109,98,139,135,108,87,0,116],
[114,102,131,142,124,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,127,104,103,103,119],
[110,0,102,108,121,120,111,112],
[108,109,0,124,124,93,110,114],
[84,103,87,0,101,97,84,95],
[107,90,87,110,0,101,90,95],
[108,91,118,114,110,0,107,105],
[108,100,101,127,121,104,0,88],
[92,99,97,116,116,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,98,96,89,107,99],
[107,0,100,100,114,104,106,113],
[124,111,0,111,109,91,101,113],
[113,111,100,0,119,118,109,111],
[115,97,102,92,0,92,95,112],
[122,107,120,93,119,0,112,108],
[104,105,110,102,116,99,0,115],
[112,98,98,100,99,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,99,100,89,106,105],
[104,0,90,104,116,100,98,97],
[115,121,0,116,108,103,111,123],
[112,107,95,0,95,104,108,99],
[111,95,103,116,0,99,108,109],
[122,111,108,107,112,0,103,115],
[105,113,100,103,103,108,0,117],
[106,114,88,112,102,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,106,105,105,110,101],
[107,0,100,108,108,99,112,105],
[99,111,0,116,104,106,113,116],
[105,103,95,0,112,106,124,99],
[106,103,107,99,0,100,109,105],
[106,112,105,105,111,0,113,107],
[101,99,98,87,102,98,0,99],
[110,106,95,112,106,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,110,113,73,91,122],
[106,0,101,96,93,95,113,126],
[117,110,0,110,126,83,135,124],
[101,115,101,0,107,108,111,107],
[98,118,85,104,0,95,124,137],
[138,116,128,103,116,0,133,131],
[120,98,76,100,87,78,0,119],
[89,85,87,104,74,80,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,93,91,91,93,95],
[96,0,99,85,96,99,99,95],
[107,112,0,80,99,105,112,99],
[118,126,131,0,110,103,117,107],
[120,115,112,101,0,112,105,102],
[120,112,106,108,99,0,96,101],
[118,112,99,94,106,115,0,94],
[116,116,112,104,109,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,96,96,105,99,115,87],
[128,0,100,104,119,122,103,93],
[115,111,0,108,127,121,116,97],
[115,107,103,0,111,97,108,108],
[106,92,84,100,0,93,102,84],
[112,89,90,114,118,0,104,84],
[96,108,95,103,109,107,0,105],
[124,118,114,103,127,127,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,118,118,116,111,102,107],
[96,0,105,105,106,107,104,113],
[93,106,0,100,88,96,94,91],
[93,106,111,0,102,101,114,107],
[95,105,123,109,0,101,102,84],
[100,104,115,110,110,0,106,105],
[109,107,117,97,109,105,0,116],
[104,98,120,104,127,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,104,100,108,108,105,118],
[82,0,105,100,98,96,85,100],
[107,106,0,100,107,103,92,113],
[111,111,111,0,117,116,105,119],
[103,113,104,94,0,99,111,106],
[103,115,108,95,112,0,104,115],
[106,126,119,106,100,107,0,108],
[93,111,98,92,105,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,93,94,99,87,111],
[113,0,104,109,112,112,97,114],
[110,107,0,107,106,93,104,112],
[118,102,104,0,115,115,111,117],
[117,99,105,96,0,104,104,119],
[112,99,118,96,107,0,102,111],
[124,114,107,100,107,109,0,117],
[100,97,99,94,92,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,104,109,102,110,98],
[101,0,111,108,106,97,108,104],
[100,100,0,100,94,92,99,97],
[107,103,111,0,114,112,103,101],
[102,105,117,97,0,97,109,97],
[109,114,119,99,114,0,110,103],
[101,103,112,108,102,101,0,109],
[113,107,114,110,114,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,97,76,61,66,65,84],
[138,0,137,110,117,107,104,123],
[114,74,0,90,83,85,82,88],
[135,101,121,0,114,100,125,109],
[150,94,128,97,0,111,129,107],
[145,104,126,111,100,0,110,86],
[146,107,129,86,82,101,0,100],
[127,88,123,102,104,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,103,106,105,148,64,146],
[149,0,108,85,130,129,66,126],
[108,103,0,106,150,170,106,146],
[105,126,105,0,128,148,107,167],
[106,81,61,83,0,102,43,123],
[63,82,41,63,109,0,66,126],
[147,145,105,104,168,145,0,167],
[65,85,65,44,88,85,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,90,94,99,96,94],
[117,0,102,95,107,116,102,104],
[124,109,0,111,97,112,107,102],
[121,116,100,0,106,120,109,101],
[117,104,114,105,0,114,104,116],
[112,95,99,91,97,0,101,84],
[115,109,104,102,107,110,0,115],
[117,107,109,110,95,127,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,108,98,112,108,109],
[109,0,116,105,111,108,113,115],
[110,95,0,103,109,114,109,113],
[103,106,108,0,115,117,107,112],
[113,100,102,96,0,104,109,109],
[99,103,97,94,107,0,103,97],
[103,98,102,104,102,108,0,96],
[102,96,98,99,102,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,129,99,148,114,150],
[89,0,76,112,73,98,100,113],
[100,135,0,112,125,112,125,137],
[82,99,99,0,84,105,86,151],
[112,138,86,127,0,132,128,149],
[63,113,99,106,79,0,91,154],
[97,111,86,125,83,120,0,124],
[61,98,74,60,62,57,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,127,93,92,113,101],
[104,0,109,134,115,132,116,114],
[108,102,0,129,110,103,102,124],
[84,77,82,0,101,90,98,91],
[118,96,101,110,0,105,105,108],
[119,79,108,121,106,0,123,111],
[98,95,109,113,106,88,0,104],
[110,97,87,120,103,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,85,85,86,85,87,85],
[84,0,85,85,127,85,87,85],
[126,126,0,127,127,85,129,127],
[126,126,84,0,83,125,85,126],
[125,84,84,128,0,128,128,128],
[126,126,126,86,83,0,129,170],
[124,124,82,126,83,82,0,168],
[126,126,84,85,83,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,117,110,97,87,107],
[101,0,91,109,106,105,86,99],
[116,120,0,111,99,103,106,98],
[94,102,100,0,108,98,87,97],
[101,105,112,103,0,95,92,93],
[114,106,108,113,116,0,97,95],
[124,125,105,124,119,114,0,104],
[104,112,113,114,118,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,125,105,114,113,113,134],
[100,0,112,124,97,122,112,129],
[86,99,0,99,109,131,121,125],
[106,87,112,0,90,125,127,127],
[97,114,102,121,0,124,125,144],
[98,89,80,86,87,0,98,136],
[98,99,90,84,86,113,0,122],
[77,82,86,84,67,75,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,79,110,131,101,115,93],
[86,0,97,117,97,96,120,108],
[132,114,0,91,121,93,83,84],
[101,94,120,0,88,72,75,86],
[80,114,90,123,0,100,91,96],
[110,115,118,139,111,0,82,146],
[96,91,128,136,120,129,0,119],
[118,103,127,125,115,65,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,108,125,112,114,102],
[97,0,96,90,109,91,105,94],
[98,115,0,101,108,114,111,104],
[103,121,110,0,111,104,104,102],
[86,102,103,100,0,96,107,97],
[99,120,97,107,115,0,97,108],
[97,106,100,107,104,114,0,100],
[109,117,107,109,114,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,95,98,89,90,88],
[111,0,108,91,101,101,91,114],
[113,103,0,93,96,101,92,106],
[116,120,118,0,94,97,107,102],
[113,110,115,117,0,110,104,119],
[122,110,110,114,101,0,105,109],
[121,120,119,104,107,106,0,114],
[123,97,105,109,92,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,101,140,100,60,91,81],
[150,0,110,132,121,62,141,119],
[110,101,0,110,140,101,102,123],
[71,79,101,0,128,60,90,131],
[111,90,71,83,0,79,101,80],
[151,149,110,151,132,0,143,100],
[120,70,109,121,110,68,0,121],
[130,92,88,80,131,111,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,101,106,100,96,93],
[100,0,100,99,112,105,101,97],
[109,111,0,97,116,102,110,98],
[110,112,114,0,114,109,106,98],
[105,99,95,97,0,108,106,97],
[111,106,109,102,103,0,105,106],
[115,110,101,105,105,106,0,107],
[118,114,113,113,114,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,111,94,85,104,113],
[102,0,97,109,101,98,97,110],
[116,114,0,107,102,96,109,95],
[100,102,104,0,95,99,108,95],
[117,110,109,116,0,101,113,130],
[126,113,115,112,110,0,112,102],
[107,114,102,103,98,99,0,108],
[98,101,116,116,81,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,101,95,114,118,94],
[100,0,109,98,95,106,119,92],
[102,102,0,96,81,89,102,85],
[110,113,115,0,108,108,131,105],
[116,116,130,103,0,124,137,120],
[97,105,122,103,87,0,119,98],
[93,92,109,80,74,92,0,79],
[117,119,126,106,91,113,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,118,120,109,103,116],
[100,0,106,123,96,109,104,113],
[105,105,0,98,86,97,90,93],
[93,88,113,0,95,103,90,96],
[91,115,125,116,0,107,107,109],
[102,102,114,108,104,0,95,97],
[108,107,121,121,104,116,0,114],
[95,98,118,115,102,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,95,92,115,81,113],
[107,0,110,101,101,115,88,100],
[93,101,0,90,100,75,102,107],
[116,110,121,0,96,120,100,105],
[119,110,111,115,0,101,121,105],
[96,96,136,91,110,0,109,93],
[130,123,109,111,90,102,0,105],
[98,111,104,106,106,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,124,112,101,111,109,121],
[105,0,110,102,105,97,105,121],
[87,101,0,91,85,96,90,99],
[99,109,120,0,111,105,99,116],
[110,106,126,100,0,111,108,118],
[100,114,115,106,100,0,101,120],
[102,106,121,112,103,110,0,116],
[90,90,112,95,93,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,88,96,83,96,85,73],
[131,0,114,111,95,98,99,112],
[123,97,0,106,95,108,85,88],
[115,100,105,0,105,93,98,110],
[128,116,116,106,0,110,136,103],
[115,113,103,118,101,0,96,99],
[126,112,126,113,75,115,0,103],
[138,99,123,101,108,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,109,109,110,108,108],
[115,0,105,116,123,118,115,115],
[102,106,0,121,113,120,110,107],
[102,95,90,0,109,109,111,102],
[102,88,98,102,0,99,104,96],
[101,93,91,102,112,0,103,106],
[103,96,101,100,107,108,0,101],
[103,96,104,109,115,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,114,105,114,117,107],
[97,0,107,104,116,105,119,100],
[88,104,0,105,100,105,112,85],
[97,107,106,0,111,115,119,98],
[106,95,111,100,0,109,118,93],
[97,106,106,96,102,0,110,96],
[94,92,99,92,93,101,0,89],
[104,111,126,113,118,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,104,112,108,113,118],
[101,0,100,106,99,109,104,105],
[96,111,0,107,98,103,117,106],
[107,105,104,0,112,101,116,106],
[99,112,113,99,0,104,108,97],
[103,102,108,110,107,0,115,107],
[98,107,94,95,103,96,0,95],
[93,106,105,105,114,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,107,120,122,84,136],
[100,0,108,125,114,109,94,112],
[105,103,0,117,126,125,110,136],
[104,86,94,0,102,106,93,109],
[91,97,85,109,0,103,75,121],
[89,102,86,105,108,0,111,120],
[127,117,101,118,136,100,0,124],
[75,99,75,102,90,91,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,106,101,104,91,105],
[103,0,101,96,104,104,89,89],
[112,110,0,98,105,104,98,99],
[105,115,113,0,111,97,104,104],
[110,107,106,100,0,119,100,114],
[107,107,107,114,92,0,106,106],
[120,122,113,107,111,105,0,116],
[106,122,112,107,97,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,110,100,104,84,103,82],
[122,0,126,128,112,105,121,114],
[101,85,0,116,102,90,101,109],
[111,83,95,0,96,106,108,101],
[107,99,109,115,0,96,104,97],
[127,106,121,105,115,0,114,89],
[108,90,110,103,107,97,0,91],
[129,97,102,110,114,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,117,117,99,95,115],
[106,0,114,110,105,102,78,89],
[90,97,0,121,121,98,88,98],
[94,101,90,0,99,97,84,100],
[94,106,90,112,0,86,83,79],
[112,109,113,114,125,0,99,110],
[116,133,123,127,128,112,0,83],
[96,122,113,111,132,101,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,78,96,101,94,105],
[114,0,104,90,92,98,100,101],
[97,107,0,97,108,106,94,96],
[133,121,114,0,114,114,111,104],
[115,119,103,97,0,118,111,108],
[110,113,105,97,93,0,108,118],
[117,111,117,100,100,103,0,104],
[106,110,115,107,103,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,88,60,88,100,93],
[112,0,131,106,99,93,125,128],
[114,80,0,74,74,97,83,87],
[123,105,137,0,118,86,97,98],
[151,112,137,93,0,105,112,107],
[123,118,114,125,106,0,102,108],
[111,86,128,114,99,109,0,101],
[118,83,124,113,104,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,118,105,109,111,114],
[99,0,101,110,99,106,91,106],
[99,110,0,105,95,97,105,112],
[93,101,106,0,108,92,99,113],
[106,112,116,103,0,96,110,114],
[102,105,114,119,115,0,108,129],
[100,120,106,112,101,103,0,101],
[97,105,99,98,97,82,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,108,105,107,114,93],
[116,0,103,102,112,112,114,106],
[113,108,0,108,109,116,122,94],
[103,109,103,0,107,124,106,111],
[106,99,102,104,0,108,110,92],
[104,99,95,87,103,0,85,90],
[97,97,89,105,101,126,0,93],
[118,105,117,100,119,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,109,109,108,97,101],
[107,0,114,114,119,134,117,100],
[105,97,0,110,112,124,112,102],
[102,97,101,0,119,119,102,99],
[102,92,99,92,0,121,110,109],
[103,77,87,92,90,0,108,113],
[114,94,99,109,101,103,0,108],
[110,111,109,112,102,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,69,72,107,54,88,71],
[122,0,102,69,105,85,88,53],
[142,109,0,91,91,89,125,90],
[139,142,120,0,158,140,105,105],
[104,106,120,53,0,68,88,17],
[157,126,122,71,143,0,141,106],
[123,123,86,106,123,70,0,88],
[140,158,121,106,194,105,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,112,108,101,107,97],
[93,0,91,100,87,92,96,86],
[101,120,0,114,109,94,101,111],
[99,111,97,0,95,85,89,96],
[103,124,102,116,0,107,106,111],
[110,119,117,126,104,0,109,110],
[104,115,110,122,105,102,0,109],
[114,125,100,115,100,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,124,116,111,135,101],
[95,0,95,105,88,87,94,94],
[102,116,0,118,107,109,127,123],
[87,106,93,0,87,95,101,101],
[95,123,104,124,0,107,108,106],
[100,124,102,116,104,0,117,120],
[76,117,84,110,103,94,0,105],
[110,117,88,110,105,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,90,95,98,105,98],
[115,0,111,98,106,110,105,114],
[110,100,0,101,100,108,110,110],
[121,113,110,0,102,100,108,112],
[116,105,111,109,0,118,115,111],
[113,101,103,111,93,0,105,115],
[106,106,101,103,96,106,0,105],
[113,97,101,99,100,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,94,94,103,96,108],
[122,0,111,105,106,108,108,120],
[107,100,0,95,97,110,102,117],
[117,106,116,0,104,113,102,121],
[117,105,114,107,0,114,106,117],
[108,103,101,98,97,0,84,114],
[115,103,109,109,105,127,0,116],
[103,91,94,90,94,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,123,103,96,81,110],
[124,0,138,120,127,116,96,131],
[106,73,0,112,89,65,69,102],
[88,91,99,0,85,92,99,102],
[108,84,122,126,0,92,92,109],
[115,95,146,119,119,0,113,125],
[130,115,142,112,119,98,0,118],
[101,80,109,109,102,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,97,133,105,102,110],
[99,0,104,105,114,115,105,107],
[107,107,0,105,126,112,116,112],
[114,106,106,0,122,113,101,107],
[78,97,85,89,0,104,73,92],
[106,96,99,98,107,0,102,101],
[109,106,95,110,138,109,0,112],
[101,104,99,104,119,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,95,104,99,95,107,108],
[120,0,104,98,103,117,127,118],
[116,107,0,106,102,106,118,114],
[107,113,105,0,105,99,110,117],
[112,108,109,106,0,97,114,126],
[116,94,105,112,114,0,116,122],
[104,84,93,101,97,95,0,106],
[103,93,97,94,85,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,97,106,108,112,97],
[102,0,100,106,95,107,114,101],
[110,111,0,95,101,114,110,94],
[114,105,116,0,103,115,110,98],
[105,116,110,108,0,117,111,106],
[103,104,97,96,94,0,107,94],
[99,97,101,101,100,104,0,98],
[114,110,117,113,105,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,79,109,94,94,89,78],
[118,0,110,107,64,96,90,88],
[132,101,0,131,100,113,120,111],
[102,104,80,0,83,84,90,90],
[117,147,111,128,0,99,120,119],
[117,115,98,127,112,0,115,108],
[122,121,91,121,91,96,0,100],
[133,123,100,121,92,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,91,94,102,92,95],
[104,0,110,92,109,97,95,100],
[114,101,0,97,103,107,101,112],
[120,119,114,0,111,120,109,104],
[117,102,108,100,0,113,106,103],
[109,114,104,91,98,0,103,92],
[119,116,110,102,105,108,0,113],
[116,111,99,107,108,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,107,107,107,107,105,54],
[157,0,158,107,157,104,104,158],
[104,53,0,53,157,53,104,107],
[104,104,158,0,104,51,104,158],
[104,54,54,107,0,54,51,54],
[104,107,158,160,157,0,104,158],
[106,107,107,107,160,107,0,54],
[157,53,104,53,157,53,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,101,106,102,109,94],
[100,0,113,101,107,104,119,104],
[107,98,0,108,107,112,108,109],
[110,110,103,0,113,101,110,109],
[105,104,104,98,0,99,110,97],
[109,107,99,110,112,0,105,100],
[102,92,103,101,101,106,0,108],
[117,107,102,102,114,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,90,127,115,105,90,124],
[100,0,80,103,99,118,92,119],
[121,131,0,122,122,99,115,134],
[84,108,89,0,98,97,105,100],
[96,112,89,113,0,105,116,117],
[106,93,112,114,106,0,114,100],
[121,119,96,106,95,97,0,127],
[87,92,77,111,94,111,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,116,104,112,102,108],
[103,0,115,111,100,108,103,110],
[102,96,0,112,106,107,112,108],
[95,100,99,0,93,96,97,99],
[107,111,105,118,0,106,109,109],
[99,103,104,115,105,0,101,108],
[109,108,99,114,102,110,0,102],
[103,101,103,112,102,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,101,110,100,112,112],
[99,0,105,94,101,110,91,97],
[96,106,0,93,121,95,103,96],
[110,117,118,0,100,114,105,111],
[101,110,90,111,0,85,105,116],
[111,101,116,97,126,0,99,102],
[99,120,108,106,106,112,0,101],
[99,114,115,100,95,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,87,130,109,129,113],
[95,0,123,113,117,120,110,121],
[83,88,0,70,110,90,108,110],
[124,98,141,0,116,107,141,120],
[81,94,101,95,0,102,87,83],
[102,91,121,104,109,0,92,114],
[82,101,103,70,124,119,0,102],
[98,90,101,91,128,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,102,113,105,103,102],
[117,0,103,96,114,103,105,94],
[113,108,0,114,110,114,103,112],
[109,115,97,0,122,102,106,107],
[98,97,101,89,0,110,92,105],
[106,108,97,109,101,0,100,97],
[108,106,108,105,119,111,0,112],
[109,117,99,104,106,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,111,125,94,81,88],
[115,0,106,101,130,107,98,103],
[101,105,0,93,101,90,92,86],
[100,110,118,0,120,85,108,107],
[86,81,110,91,0,96,89,78],
[117,104,121,126,115,0,92,114],
[130,113,119,103,122,119,0,121],
[123,108,125,104,133,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,146,109,122,125,104,116],
[98,0,119,105,116,118,106,106],
[65,92,0,86,106,112,102,95],
[102,106,125,0,121,120,127,118],
[89,95,105,90,0,106,93,101],
[86,93,99,91,105,0,91,96],
[107,105,109,84,118,120,0,115],
[95,105,116,93,110,115,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,100,99,106,101,95],
[109,0,99,111,114,109,110,107],
[118,112,0,103,118,104,112,110],
[111,100,108,0,108,96,104,112],
[112,97,93,103,0,109,101,103],
[105,102,107,115,102,0,110,97],
[110,101,99,107,110,101,0,103],
[116,104,101,99,108,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,97,112,103,116,85],
[108,0,116,99,104,92,104,91],
[107,95,0,85,95,98,102,79],
[114,112,126,0,118,104,114,106],
[99,107,116,93,0,102,117,93],
[108,119,113,107,109,0,108,86],
[95,107,109,97,94,103,0,85],
[126,120,132,105,118,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,103,86,110,92,107],
[112,0,105,109,107,114,102,98],
[110,106,0,111,105,121,100,105],
[108,102,100,0,111,123,111,93],
[125,104,106,100,0,109,102,108],
[101,97,90,88,102,0,95,90],
[119,109,111,100,109,116,0,96],
[104,113,106,118,103,121,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,101,106,94,114,118],
[108,0,116,100,98,98,105,109],
[106,95,0,91,98,95,119,106],
[110,111,120,0,105,115,128,121],
[105,113,113,106,0,105,121,114],
[117,113,116,96,106,0,123,110],
[97,106,92,83,90,88,0,108],
[93,102,105,90,97,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,129,139,129,130,104,108],
[66,0,89,87,95,78,81,78],
[82,122,0,101,102,89,77,98],
[72,124,110,0,103,89,94,106],
[82,116,109,108,0,83,81,93],
[81,133,122,122,128,0,105,123],
[107,130,134,117,130,106,0,104],
[103,133,113,105,118,88,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,101,115,120,111,107],
[89,0,95,85,79,108,89,115],
[96,116,0,100,107,112,118,97],
[110,126,111,0,105,124,115,130],
[96,132,104,106,0,108,124,129],
[91,103,99,87,103,0,111,101],
[100,122,93,96,87,100,0,120],
[104,96,114,81,82,110,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,115,107,104,112,111],
[107,0,108,119,105,111,112,114],
[100,103,0,108,99,104,114,104],
[96,92,103,0,103,99,109,98],
[104,106,112,108,0,108,110,104],
[107,100,107,112,103,0,118,114],
[99,99,97,102,101,93,0,110],
[100,97,107,113,107,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,94,99,108,116,107],
[113,0,102,98,122,119,116,112],
[93,109,0,111,115,105,122,104],
[117,113,100,0,116,125,128,103],
[112,89,96,95,0,107,114,92],
[103,92,106,86,104,0,115,102],
[95,95,89,83,97,96,0,80],
[104,99,107,108,119,109,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,85,90,104,91,89,98],
[107,0,99,87,108,85,100,86],
[126,112,0,100,117,117,102,109],
[121,124,111,0,116,116,102,111],
[107,103,94,95,0,80,104,96],
[120,126,94,95,131,0,108,98],
[122,111,109,109,107,103,0,108],
[113,125,102,100,115,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,73,81,104,105,82,84],
[120,0,85,88,113,101,98,83],
[138,126,0,100,124,113,112,101],
[130,123,111,0,114,114,104,107],
[107,98,87,97,0,106,72,86],
[106,110,98,97,105,0,101,93],
[129,113,99,107,139,110,0,94],
[127,128,110,104,125,118,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,107,90,89,97,96,106],
[125,0,116,112,96,124,129,116],
[104,95,0,81,83,99,100,106],
[121,99,130,0,108,116,125,112],
[122,115,128,103,0,117,128,113],
[114,87,112,95,94,0,109,100],
[115,82,111,86,83,102,0,98],
[105,95,105,99,98,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,120,84,102,124,87,89],
[114,0,110,123,99,128,97,91],
[91,101,0,114,93,109,105,108],
[127,88,97,0,129,112,96,102],
[109,112,118,82,0,99,107,89],
[87,83,102,99,112,0,74,90],
[124,114,106,115,104,137,0,97],
[122,120,103,109,122,121,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,87,100,98,88,92,95],
[119,0,99,108,94,100,97,92],
[124,112,0,121,108,117,82,102],
[111,103,90,0,86,91,77,90],
[113,117,103,125,0,108,116,112],
[123,111,94,120,103,0,102,102],
[119,114,129,134,95,109,0,110],
[116,119,109,121,99,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,103,105,118,93,115],
[106,0,121,126,119,109,103,129],
[108,90,0,103,106,102,109,117],
[108,85,108,0,102,107,76,103],
[106,92,105,109,0,94,97,115],
[93,102,109,104,117,0,101,114],
[118,108,102,135,114,110,0,129],
[96,82,94,108,96,97,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,111,97,116,106,107],
[99,0,98,100,89,98,93,100],
[114,113,0,108,102,102,113,101],
[100,111,103,0,108,102,105,111],
[114,122,109,103,0,110,114,99],
[95,113,109,109,101,0,113,104],
[105,118,98,106,97,98,0,99],
[104,111,110,100,112,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,106,120,105,109,114,126],
[83,0,107,95,97,96,88,121],
[105,104,0,107,90,116,98,112],
[91,116,104,0,94,113,110,112],
[106,114,121,117,0,108,104,120],
[102,115,95,98,103,0,102,107],
[97,123,113,101,107,109,0,120],
[85,90,99,99,91,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,107,96,111,96,108,102],
[77,0,104,81,76,65,86,77],
[104,107,0,93,90,73,84,81],
[115,130,118,0,116,98,109,119],
[100,135,121,95,0,90,128,117],
[115,146,138,113,121,0,133,98],
[103,125,127,102,83,78,0,106],
[109,134,130,92,94,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,95,114,120,113,103],
[108,0,109,99,121,127,108,105],
[103,102,0,100,95,107,104,108],
[116,112,111,0,104,133,118,112],
[97,90,116,107,0,105,103,107],
[91,84,104,78,106,0,89,85],
[98,103,107,93,108,122,0,95],
[108,106,103,99,104,126,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,71,95,94,72,97],
[138,0,69,70,70,91,72,72],
[142,142,0,119,165,95,70,119],
[140,141,92,0,116,116,118,140],
[116,141,46,95,0,92,71,97],
[117,120,116,95,119,0,73,119],
[139,139,141,93,140,138,0,95],
[114,139,92,71,114,92,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,106,99,89,80,86],
[116,0,133,120,128,104,124,118],
[112,78,0,105,98,85,88,103],
[105,91,106,0,99,74,93,102],
[112,83,113,112,0,111,84,89],
[122,107,126,137,100,0,102,117],
[131,87,123,118,127,109,0,116],
[125,93,108,109,122,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,102,111,89,92,108],
[107,0,103,103,105,97,105,112],
[113,108,0,107,101,110,105,102],
[109,108,104,0,104,98,106,95],
[100,106,110,107,0,107,112,117],
[122,114,101,113,104,0,111,109],
[119,106,106,105,99,100,0,110],
[103,99,109,116,94,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,100,123,101,121,111],
[102,0,115,111,119,100,118,101],
[99,96,0,95,107,86,98,100],
[111,100,116,0,130,118,117,119],
[88,92,104,81,0,94,87,87],
[110,111,125,93,117,0,111,111],
[90,93,113,94,124,100,0,100],
[100,110,111,92,124,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,95,107,87,88,85,98],
[117,0,122,132,106,112,103,120],
[116,89,0,124,107,95,80,93],
[104,79,87,0,91,72,89,81],
[124,105,104,120,0,91,105,117],
[123,99,116,139,120,0,115,125],
[126,108,131,122,106,96,0,110],
[113,91,118,130,94,86,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,108,111,89,103,110],
[111,0,103,112,100,116,106,110],
[121,108,0,118,115,105,102,118],
[103,99,93,0,99,91,96,107],
[100,111,96,112,0,96,105,108],
[122,95,106,120,115,0,113,116],
[108,105,109,115,106,98,0,113],
[101,101,93,104,103,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,80,79,86,102,87,95],
[102,0,92,110,137,105,102,103],
[131,119,0,118,123,111,111,105],
[132,101,93,0,115,104,102,96],
[125,74,88,96,0,87,82,99],
[109,106,100,107,124,0,97,108],
[124,109,100,109,129,114,0,106],
[116,108,106,115,112,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,76,98,113,92,62],
[155,0,108,112,99,119,110,107],
[146,103,0,115,108,134,111,92],
[135,99,96,0,122,109,107,104],
[113,112,103,89,0,119,113,99],
[98,92,77,102,92,0,101,108],
[119,101,100,104,98,110,0,100],
[149,104,119,107,112,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,104,100,102,89,107],
[106,0,116,93,123,105,101,107],
[92,95,0,92,98,96,84,89],
[107,118,119,0,111,109,104,117],
[111,88,113,100,0,111,99,107],
[109,106,115,102,100,0,83,104],
[122,110,127,107,112,128,0,104],
[104,104,122,94,104,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,102,113,113,102,104],
[106,0,103,116,116,116,109,107],
[110,108,0,103,111,110,102,94],
[109,95,108,0,102,109,105,94],
[98,95,100,109,0,110,97,97],
[98,95,101,102,101,0,104,93],
[109,102,109,106,114,107,0,101],
[107,104,117,117,114,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,112,90,101,98,95],
[117,0,105,104,108,105,115,109],
[109,106,0,120,103,116,98,118],
[99,107,91,0,98,108,113,106],
[121,103,108,113,0,116,123,120],
[110,106,95,103,95,0,90,100],
[113,96,113,98,88,121,0,88],
[116,102,93,105,91,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,93,98,102,113,103],
[125,0,121,115,124,118,100,125],
[110,90,0,91,108,105,101,91],
[118,96,120,0,120,126,123,121],
[113,87,103,91,0,120,102,98],
[109,93,106,85,91,0,100,89],
[98,111,110,88,109,111,0,109],
[108,86,120,90,113,122,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,90,82,105,101,113,77],
[99,0,85,87,119,82,120,79],
[121,126,0,106,134,112,135,92],
[129,124,105,0,148,122,145,114],
[106,92,77,63,0,78,99,58],
[110,129,99,89,133,0,128,87],
[98,91,76,66,112,83,0,86],
[134,132,119,97,153,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,105,100,117,102,111],
[104,0,100,99,89,103,102,100],
[107,111,0,97,92,106,86,101],
[106,112,114,0,109,115,102,116],
[111,122,119,102,0,100,90,100],
[94,108,105,96,111,0,95,108],
[109,109,125,109,121,116,0,105],
[100,111,110,95,111,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,111,103,109,99,109],
[100,0,112,107,110,114,96,95],
[97,99,0,87,110,102,101,86],
[100,104,124,0,101,105,97,98],
[108,101,101,110,0,105,112,100],
[102,97,109,106,106,0,107,97],
[112,115,110,114,99,104,0,106],
[102,116,125,113,111,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,120,124,109,113,103],
[101,0,112,122,124,109,95,99],
[103,99,0,104,118,93,93,88],
[91,89,107,0,121,104,97,87],
[87,87,93,90,0,96,83,87],
[102,102,118,107,115,0,103,91],
[98,116,118,114,128,108,0,108],
[108,112,123,124,124,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,117,110,113,118,114,124],
[114,0,119,114,85,116,118,97],
[94,92,0,97,93,114,93,102],
[101,97,114,0,90,133,128,107],
[98,126,118,121,0,130,107,118],
[93,95,97,78,81,0,76,85],
[97,93,118,83,104,135,0,103],
[87,114,109,104,93,126,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,111,108,100,100,114],
[92,0,88,101,84,68,101,97],
[94,123,0,119,71,100,101,97],
[100,110,92,0,93,107,84,92],
[103,127,140,118,0,105,114,93],
[111,143,111,104,106,0,121,101],
[111,110,110,127,97,90,0,108],
[97,114,114,119,118,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,127,99,93,129,108,125],
[80,0,102,67,74,90,80,99],
[84,109,0,77,111,101,92,104],
[112,144,134,0,112,128,104,125],
[118,137,100,99,0,106,102,116],
[82,121,110,83,105,0,88,98],
[103,131,119,107,109,123,0,118],
[86,112,107,86,95,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,124,105,102,125,83,96],
[78,0,96,58,125,106,83,68],
[87,115,0,107,124,142,104,115],
[106,153,104,0,114,113,94,95],
[109,86,87,97,0,126,78,88],
[86,105,69,98,85,0,88,77],
[128,128,107,117,133,123,0,78],
[115,143,96,116,123,134,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,104,106,89,105,93],
[109,0,121,115,105,110,106,116],
[116,90,0,118,103,98,94,102],
[107,96,93,0,90,90,104,93],
[105,106,108,121,0,117,118,117],
[122,101,113,121,94,0,119,123],
[106,105,117,107,93,92,0,120],
[118,95,109,118,94,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,93,134,143,96,112,109],
[92,0,102,118,136,94,93,97],
[118,109,0,125,128,114,101,103],
[77,93,86,0,113,69,98,80],
[68,75,83,98,0,75,92,89],
[115,117,97,142,136,0,97,103],
[99,118,110,113,119,114,0,98],
[102,114,108,131,122,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,116,94,119,108,111,103],
[123,0,118,99,126,121,127,117],
[95,93,0,103,117,110,110,93],
[117,112,108,0,102,96,98,86],
[92,85,94,109,0,102,85,88],
[103,90,101,115,109,0,108,101],
[100,84,101,113,126,103,0,97],
[108,94,118,125,123,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,119,150,150,152,90,181],
[90,0,90,119,151,122,90,150],
[92,121,0,90,181,122,90,181],
[61,92,121,0,150,91,151,150],
[61,60,30,61,0,123,59,121],
[59,89,89,120,88,0,89,149],
[121,121,121,60,152,122,0,121],
[30,61,30,61,90,62,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,81,92,117,86,104],
[106,0,110,111,100,102,104,106],
[112,101,0,99,99,102,110,106],
[130,100,112,0,105,110,111,113],
[119,111,112,106,0,108,105,125],
[94,109,109,101,103,0,93,104],
[125,107,101,100,106,118,0,126],
[107,105,105,98,86,107,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,110,118,124,118,88],
[102,0,109,100,124,134,103,98],
[111,102,0,121,100,129,99,85],
[101,111,90,0,110,115,103,103],
[93,87,111,101,0,111,97,86],
[87,77,82,96,100,0,92,96],
[93,108,112,108,114,119,0,107],
[123,113,126,108,125,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,111,110,104,131,121,92],
[86,0,96,94,102,107,109,96],
[100,115,0,96,116,109,117,91],
[101,117,115,0,111,118,114,78],
[107,109,95,100,0,124,123,107],
[80,104,102,93,87,0,109,87],
[90,102,94,97,88,102,0,86],
[119,115,120,133,104,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,110,105,102,107,98],
[109,0,109,101,107,111,106,115],
[106,102,0,110,106,100,110,112],
[101,110,101,0,96,108,111,107],
[106,104,105,115,0,95,105,109],
[109,100,111,103,116,0,112,112],
[104,105,101,100,106,99,0,108],
[113,96,99,104,102,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,106,103,106,103,108],
[110,0,110,120,104,112,108,116],
[107,101,0,98,111,105,95,113],
[105,91,113,0,103,99,101,108],
[108,107,100,108,0,106,105,112],
[105,99,106,112,105,0,96,105],
[108,103,116,110,106,115,0,109],
[103,95,98,103,99,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,101,109,111,116,112],
[101,0,96,92,106,98,106,105],
[115,115,0,108,126,104,120,116],
[110,119,103,0,109,107,122,107],
[102,105,85,102,0,91,96,97],
[100,113,107,104,120,0,115,102],
[95,105,91,89,115,96,0,105],
[99,106,95,104,114,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,98,106,95,104,93],
[104,0,111,123,102,109,116,109],
[90,100,0,101,92,89,107,88],
[113,88,110,0,113,102,105,92],
[105,109,119,98,0,102,122,115],
[116,102,122,109,109,0,114,111],
[107,95,104,106,89,97,0,111],
[118,102,123,119,96,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,102,93,101,107,102],
[116,0,116,95,112,111,113,116],
[112,95,0,101,112,104,105,102],
[109,116,110,0,115,107,112,101],
[118,99,99,96,0,102,111,103],
[110,100,107,104,109,0,109,109],
[104,98,106,99,100,102,0,99],
[109,95,109,110,108,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,99,98,100,112,116,107],
[88,0,94,87,96,107,87,98],
[112,117,0,97,114,104,103,121],
[113,124,114,0,94,133,107,116],
[111,115,97,117,0,117,119,124],
[99,104,107,78,94,0,104,110],
[95,124,108,104,92,107,0,117],
[104,113,90,95,87,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,87,99,84,80,74,92],
[130,0,106,102,108,108,91,111],
[124,105,0,99,109,113,97,109],
[112,109,112,0,104,105,89,104],
[127,103,102,107,0,95,80,108],
[131,103,98,106,116,0,99,106],
[137,120,114,122,131,112,0,103],
[119,100,102,107,103,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,114,107,107,98,104],
[105,0,97,92,116,103,76,103],
[113,114,0,99,120,91,109,115],
[97,119,112,0,109,108,102,94],
[104,95,91,102,0,104,86,100],
[104,108,120,103,107,0,101,105],
[113,135,102,109,125,110,0,110],
[107,108,96,117,111,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,117,105,92,101,91],
[109,0,111,123,122,106,110,101],
[111,100,0,126,113,100,104,103],
[94,88,85,0,93,88,88,95],
[106,89,98,118,0,97,104,94],
[119,105,111,123,114,0,105,115],
[110,101,107,123,107,106,0,99],
[120,110,108,116,117,96,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,118,98,124,104,113],
[101,0,66,110,79,100,104,112],
[105,145,0,129,108,124,120,119],
[93,101,82,0,81,97,95,101],
[113,132,103,130,0,130,113,125],
[87,111,87,114,81,0,104,113],
[107,107,91,116,98,107,0,114],
[98,99,92,110,86,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,98,100,105,99,93],
[103,0,103,91,100,109,104,95],
[112,108,0,93,106,117,101,89],
[113,120,118,0,114,120,108,97],
[111,111,105,97,0,115,103,104],
[106,102,94,91,96,0,91,87],
[112,107,110,103,108,120,0,107],
[118,116,122,114,107,124,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,102,92,98,103,109],
[109,0,111,121,98,116,129,109],
[111,100,0,117,78,95,116,90],
[109,90,94,0,98,76,108,74],
[119,113,133,113,0,113,121,105],
[113,95,116,135,98,0,133,99],
[108,82,95,103,90,78,0,88],
[102,102,121,137,106,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,130,109,119,96,129,119],
[79,0,102,106,115,92,128,97],
[81,109,0,78,115,71,97,98],
[102,105,133,0,129,83,110,112],
[92,96,96,82,0,71,117,110],
[115,119,140,128,140,0,122,96],
[82,83,114,101,94,89,0,76],
[92,114,113,99,101,115,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,121,105,107,122,95],
[106,0,115,108,117,119,105,90],
[96,96,0,109,99,99,121,86],
[90,103,102,0,95,95,100,81],
[106,94,112,116,0,100,132,104],
[104,92,112,116,111,0,121,111],
[89,106,90,111,79,90,0,94],
[116,121,125,130,107,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,89,96,85,112,85,82],
[126,0,111,111,113,119,92,105],
[122,100,0,101,120,119,123,101],
[115,100,110,0,113,111,103,112],
[126,98,91,98,0,106,114,90],
[99,92,92,100,105,0,88,78],
[126,119,88,108,97,123,0,94],
[129,106,110,99,121,133,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,103,110,125,115,110],
[110,0,115,108,102,114,115,116],
[110,96,0,101,103,108,115,105],
[108,103,110,0,109,132,112,117],
[101,109,108,102,0,109,123,102],
[86,97,103,79,102,0,101,79],
[96,96,96,99,88,110,0,88],
[101,95,106,94,109,132,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,100,102,110,95,101],
[107,0,111,107,105,116,112,107],
[103,100,0,107,114,116,112,116],
[111,104,104,0,121,117,110,98],
[109,106,97,90,0,108,99,88],
[101,95,95,94,103,0,103,100],
[116,99,99,101,112,108,0,105],
[110,104,95,113,123,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,82,95,95,81,107],
[132,0,90,92,79,106,91,80],
[145,121,0,117,134,130,91,105],
[129,119,94,0,104,106,95,79],
[116,132,77,107,0,65,106,78],
[116,105,81,105,146,0,92,75],
[130,120,120,116,105,119,0,90],
[104,131,106,132,133,136,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,115,99,113,115,97],
[108,0,117,124,101,128,117,126],
[100,94,0,102,109,118,95,111],
[96,87,109,0,91,115,102,107],
[112,110,102,120,0,127,114,114],
[98,83,93,96,84,0,92,103],
[96,94,116,109,97,119,0,108],
[114,85,100,104,97,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,80,82,85,95,74,72],
[136,0,133,116,102,106,89,112],
[131,78,0,102,70,119,67,95],
[129,95,109,0,94,109,92,101],
[126,109,141,117,0,144,101,104],
[116,105,92,102,67,0,89,93],
[137,122,144,119,110,122,0,104],
[139,99,116,110,107,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,117,85,110,109,98,93],
[120,0,117,90,115,97,117,124],
[94,94,0,107,117,109,91,94],
[126,121,104,0,126,120,112,127],
[101,96,94,85,0,100,102,88],
[102,114,102,91,111,0,120,103],
[113,94,120,99,109,91,0,112],
[118,87,117,84,123,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,132,129,116,97,147,163],
[100,0,100,129,100,66,67,147],
[79,111,0,112,100,97,83,163],
[82,82,99,0,116,116,66,132],
[95,111,111,95,0,95,63,178],
[114,145,114,95,116,0,98,195],
[64,144,128,145,148,113,0,146],
[48,64,48,79,33,16,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,102,108,106,99,104],
[102,0,100,93,118,92,109,101],
[105,111,0,105,124,113,94,112],
[109,118,106,0,131,114,104,126],
[103,93,87,80,0,99,88,92],
[105,119,98,97,112,0,115,107],
[112,102,117,107,123,96,0,106],
[107,110,99,85,119,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,110,106,98,98,107],
[89,0,95,106,90,93,100,101],
[100,116,0,107,101,101,112,110],
[101,105,104,0,97,97,103,100],
[105,121,110,114,0,107,113,110],
[113,118,110,114,104,0,109,109],
[113,111,99,108,98,102,0,103],
[104,110,101,111,101,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,121,102,106,118,111],
[94,0,113,106,110,111,111,96],
[100,98,0,112,103,113,109,97],
[90,105,99,0,110,102,85,103],
[109,101,108,101,0,100,102,92],
[105,100,98,109,111,0,109,97],
[93,100,102,126,109,102,0,96],
[100,115,114,108,119,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,99,106,104,106,102],
[107,0,120,101,117,114,120,103],
[98,91,0,101,104,105,119,100],
[112,110,110,0,112,105,115,124],
[105,94,107,99,0,107,118,121],
[107,97,106,106,104,0,118,118],
[105,91,92,96,93,93,0,102],
[109,108,111,87,90,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,106,108,90,89,98],
[106,0,113,115,109,98,113,94],
[96,98,0,105,99,97,106,103],
[105,96,106,0,107,92,108,97],
[103,102,112,104,0,96,100,103],
[121,113,114,119,115,0,104,114],
[122,98,105,103,111,107,0,109],
[113,117,108,114,108,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,120,91,121,122,152],
[29,0,90,29,61,59,0,122],
[30,121,0,88,91,89,60,121],
[91,182,123,0,93,120,91,122],
[120,150,120,118,0,89,60,90],
[90,152,122,91,122,0,60,152],
[89,211,151,120,151,151,0,181],
[59,89,90,89,121,59,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,85,103,104,121,122,102],
[160,0,122,159,88,106,121,158],
[126,89,0,141,122,106,86,88],
[108,52,70,0,88,72,86,90],
[107,123,89,123,0,105,88,87],
[90,105,105,139,106,0,105,107],
[89,90,125,125,123,106,0,107],
[109,53,123,121,124,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,110,114,121,109,111],
[110,0,103,119,125,126,117,107],
[99,108,0,107,122,132,117,117],
[101,92,104,0,114,119,114,110],
[97,86,89,97,0,107,109,101],
[90,85,79,92,104,0,105,100],
[102,94,94,97,102,106,0,107],
[100,104,94,101,110,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,116,113,113,105,101],
[111,0,109,124,113,106,115,105],
[94,102,0,121,116,111,115,101],
[95,87,90,0,103,107,99,88],
[98,98,95,108,0,100,103,104],
[98,105,100,104,111,0,105,107],
[106,96,96,112,108,106,0,94],
[110,106,110,123,107,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,90,96,98,97,92,87],
[125,0,124,107,104,121,110,112],
[121,87,0,103,92,104,113,105],
[115,104,108,0,104,104,112,104],
[113,107,119,107,0,108,104,102],
[114,90,107,107,103,0,98,94],
[119,101,98,99,107,113,0,107],
[124,99,106,107,109,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,99,94,96,115,110],
[106,0,114,110,98,105,114,109],
[101,97,0,105,106,109,114,114],
[112,101,106,0,105,109,119,118],
[117,113,105,106,0,107,115,116],
[115,106,102,102,104,0,113,117],
[96,97,97,92,96,98,0,108],
[101,102,97,93,95,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,87,112,93,108,102],
[113,0,105,108,98,96,111,92],
[110,106,0,82,91,91,109,106],
[124,103,129,0,111,108,121,110],
[99,113,120,100,0,92,106,91],
[118,115,120,103,119,0,126,97],
[103,100,102,90,105,85,0,96],
[109,119,105,101,120,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,109,102,112,87,104],
[108,0,91,105,104,115,133,93],
[104,120,0,100,88,116,117,116],
[102,106,111,0,79,107,115,75],
[109,107,123,132,0,117,100,91],
[99,96,95,104,94,0,109,111],
[124,78,94,96,111,102,0,124],
[107,118,95,136,120,100,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,94,96,110,102,139],
[107,0,98,82,103,109,113,126],
[110,113,0,111,110,115,102,137],
[117,129,100,0,120,105,129,144],
[115,108,101,91,0,110,102,126],
[101,102,96,106,101,0,112,126],
[109,98,109,82,109,99,0,119],
[72,85,74,67,85,85,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,98,96,83,93,89],
[118,0,104,110,101,112,113,108],
[119,107,0,109,93,101,105,104],
[113,101,102,0,107,108,105,102],
[115,110,118,104,0,113,119,109],
[128,99,110,103,98,0,104,100],
[118,98,106,106,92,107,0,106],
[122,103,107,109,102,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,91,107,110,130,91],
[94,0,107,109,116,123,116,85],
[102,104,0,84,101,118,92,88],
[120,102,127,0,85,143,87,95],
[104,95,110,126,0,143,118,126],
[101,88,93,68,68,0,99,87],
[81,95,119,124,93,112,0,94],
[120,126,123,116,85,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,105,108,96,96,104],
[110,0,118,106,104,102,101,110],
[97,93,0,95,103,96,96,95],
[106,105,116,0,105,110,103,105],
[103,107,108,106,0,94,107,102],
[115,109,115,101,117,0,102,105],
[115,110,115,108,104,109,0,118],
[107,101,116,106,109,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,94,118,104,99,98],
[111,0,112,112,117,117,104,110],
[113,99,0,111,112,115,102,101],
[117,99,100,0,115,118,104,106],
[93,94,99,96,0,94,89,88],
[107,94,96,93,117,0,99,101],
[112,107,109,107,122,112,0,104],
[113,101,110,105,123,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,90,95,102,104,104],
[118,0,117,102,112,104,106,105],
[101,94,0,89,94,104,92,100],
[121,109,122,0,102,109,112,114],
[116,99,117,109,0,105,112,110],
[109,107,107,102,106,0,102,108],
[107,105,119,99,99,109,0,100],
[107,106,111,97,101,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,101,106,117,103,113,116],
[84,0,104,92,87,94,92,108],
[110,107,0,95,91,114,104,96],
[105,119,116,0,111,108,103,101],
[94,124,120,100,0,119,112,117],
[108,117,97,103,92,0,111,113],
[98,119,107,108,99,100,0,111],
[95,103,115,110,94,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,107,83,95,117,108],
[98,0,91,77,98,91,98,87],
[116,120,0,105,91,101,106,106],
[104,134,106,0,119,112,121,117],
[128,113,120,92,0,112,118,119],
[116,120,110,99,99,0,123,111],
[94,113,105,90,93,88,0,95],
[103,124,105,94,92,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,116,105,115,127,95],
[98,0,111,119,113,110,118,111],
[107,100,0,133,116,112,130,99],
[95,92,78,0,92,95,105,80],
[106,98,95,119,0,109,114,100],
[96,101,99,116,102,0,111,107],
[84,93,81,106,97,100,0,87],
[116,100,112,131,111,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,131,90,90,102,111,124],
[128,0,104,149,119,119,112,126],
[80,107,0,129,87,107,91,100],
[121,62,82,0,71,90,83,108],
[121,92,124,140,0,126,103,106],
[109,92,104,121,85,0,100,94],
[100,99,120,128,108,111,0,117],
[87,85,111,103,105,117,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,83,97,113,101,121],
[108,0,97,92,103,114,120,122],
[106,114,0,90,112,105,121,128],
[128,119,121,0,104,112,137,131],
[114,108,99,107,0,131,127,115],
[98,97,106,99,80,0,115,126],
[110,91,90,74,84,96,0,121],
[90,89,83,80,96,85,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,126,116,108,113,105],
[110,0,113,109,115,102,99,97],
[98,98,0,119,119,105,95,96],
[85,102,92,0,102,112,93,93],
[95,96,92,109,0,115,111,89],
[103,109,106,99,96,0,118,107],
[98,112,116,118,100,93,0,103],
[106,114,115,118,122,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,99,104,100,106,104],
[108,0,105,114,105,102,109,109],
[107,106,0,121,103,109,110,119],
[112,97,90,0,91,98,109,107],
[107,106,108,120,0,109,100,110],
[111,109,102,113,102,0,110,109],
[105,102,101,102,111,101,0,107],
[107,102,92,104,101,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,99,93,107,92,93],
[118,0,112,113,110,108,105,103],
[120,99,0,108,103,116,117,106],
[112,98,103,0,114,112,105,110],
[118,101,108,97,0,116,112,101],
[104,103,95,99,95,0,95,102],
[119,106,94,106,99,116,0,106],
[118,108,105,101,110,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,107,103,102,102,107],
[109,0,97,96,102,106,103,101],
[108,114,0,107,94,108,109,102],
[104,115,104,0,106,104,112,111],
[108,109,117,105,0,104,101,112],
[109,105,103,107,107,0,113,109],
[109,108,102,99,110,98,0,119],
[104,110,109,100,99,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,97,111,113,106,115],
[90,0,106,96,95,110,102,97],
[102,105,0,96,100,105,116,112],
[114,115,115,0,101,114,113,117],
[100,116,111,110,0,107,119,118],
[98,101,106,97,104,0,114,120],
[105,109,95,98,92,97,0,112],
[96,114,99,94,93,91,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,126,114,124,121,105],
[104,0,94,104,108,112,107,109],
[110,117,0,118,117,129,107,101],
[85,107,93,0,100,123,101,83],
[97,103,94,111,0,115,108,95],
[87,99,82,88,96,0,89,80],
[90,104,104,110,103,122,0,80],
[106,102,110,128,116,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,111,114,115,126,124],
[106,0,107,90,107,100,117,107],
[88,104,0,95,107,99,106,111],
[100,121,116,0,108,101,135,146],
[97,104,104,103,0,95,119,117],
[96,111,112,110,116,0,128,118],
[85,94,105,76,92,83,0,110],
[87,104,100,65,94,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,109,101,100,105,106],
[108,0,100,122,104,107,111,114],
[106,111,0,117,109,95,110,114],
[102,89,94,0,96,86,107,107],
[110,107,102,115,0,100,109,102],
[111,104,116,125,111,0,116,120],
[106,100,101,104,102,95,0,109],
[105,97,97,104,109,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,109,110,118,98,108],
[93,0,98,103,101,91,95,114],
[108,113,0,95,105,109,111,109],
[102,108,116,0,113,115,113,114],
[101,110,106,98,0,105,109,109],
[93,120,102,96,106,0,100,116],
[113,116,100,98,102,111,0,116],
[103,97,102,97,102,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,86,100,97,107,88,115],
[94,0,72,71,117,100,88,104],
[125,139,0,96,120,111,109,118],
[111,140,115,0,123,133,96,151],
[114,94,91,88,0,86,80,99],
[104,111,100,78,125,0,89,120],
[123,123,102,115,131,122,0,131],
[96,107,93,60,112,91,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,101,121,90,111,111],
[96,0,128,90,101,86,101,90],
[92,83,0,82,98,76,88,97],
[110,121,129,0,109,94,103,97],
[90,110,113,102,0,75,89,87],
[121,125,135,117,136,0,102,109],
[100,110,123,108,122,109,0,104],
[100,121,114,114,124,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,114,109,103,109,100],
[110,0,108,107,101,106,106,111],
[106,103,0,95,105,90,87,116],
[97,104,116,0,113,99,116,106],
[102,110,106,98,0,96,89,111],
[108,105,121,112,115,0,98,114],
[102,105,124,95,122,113,0,104],
[111,100,95,105,100,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,106,97,104,88,90],
[107,0,81,109,103,113,112,98],
[124,130,0,124,99,140,115,118],
[105,102,87,0,90,98,108,104],
[114,108,112,121,0,120,117,98],
[107,98,71,113,91,0,101,88],
[123,99,96,103,94,110,0,110],
[121,113,93,107,113,123,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,116,110,122,109,103],
[98,0,104,93,94,114,104,103],
[99,107,0,108,107,113,112,114],
[95,118,103,0,97,133,114,85],
[101,117,104,114,0,107,127,121],
[89,97,98,78,104,0,92,105],
[102,107,99,97,84,119,0,84],
[108,108,97,126,90,106,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,111,96,119,108,117],
[101,0,114,115,107,110,105,108],
[98,97,0,103,110,118,105,106],
[100,96,108,0,92,109,93,104],
[115,104,101,119,0,108,114,106],
[92,101,93,102,103,0,94,107],
[103,106,106,118,97,117,0,118],
[94,103,105,107,105,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,110,109,100,117,132,124],
[85,0,101,120,94,105,118,111],
[101,110,0,107,106,107,118,110],
[102,91,104,0,103,114,119,98],
[111,117,105,108,0,119,114,108],
[94,106,104,97,92,0,113,104],
[79,93,93,92,97,98,0,91],
[87,100,101,113,103,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,74,86,107,113,101],
[121,0,92,92,112,120,137,98],
[113,119,0,95,119,141,149,125],
[137,119,116,0,101,121,147,107],
[125,99,92,110,0,116,130,104],
[104,91,70,90,95,0,125,77],
[98,74,62,64,81,86,0,80],
[110,113,86,104,107,134,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,93,94,97,101,114],
[114,0,104,98,97,106,107,111],
[118,107,0,111,127,105,117,110],
[118,113,100,0,110,108,94,105],
[117,114,84,101,0,107,101,110],
[114,105,106,103,104,0,109,111],
[110,104,94,117,110,102,0,110],
[97,100,101,106,101,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,112,124,100,103,106],
[102,0,105,87,102,93,96,99],
[106,106,0,103,112,105,111,110],
[99,124,108,0,117,109,110,107],
[87,109,99,94,0,94,92,96],
[111,118,106,102,117,0,100,117],
[108,115,100,101,119,111,0,109],
[105,112,101,104,115,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,126,130,131,128,129,146],
[148,0,94,115,131,147,131,148],
[85,117,0,117,133,133,101,148],
[81,96,94,0,82,99,84,113],
[80,80,78,129,0,115,131,96],
[83,64,78,112,96,0,129,98],
[82,80,110,127,80,82,0,130],
[65,63,63,98,115,113,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,114,97,109,82,102],
[114,0,109,116,109,120,102,102],
[114,102,0,118,113,108,87,126],
[97,95,93,0,88,106,92,107],
[114,102,98,123,0,107,106,120],
[102,91,103,105,104,0,98,116],
[129,109,124,119,105,113,0,123],
[109,109,85,104,91,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,93,89,90,94,84],
[118,0,106,106,101,97,101,100],
[115,105,0,107,102,99,111,102],
[118,105,104,0,107,93,100,101],
[122,110,109,104,0,111,101,105],
[121,114,112,118,100,0,112,99],
[117,110,100,111,110,99,0,106],
[127,111,109,110,106,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,84,63,91,102,70],
[102,0,112,106,107,97,131,119],
[88,99,0,92,83,94,93,85],
[127,105,119,0,111,109,113,112],
[148,104,128,100,0,106,125,105],
[120,114,117,102,105,0,112,93],
[109,80,118,98,86,99,0,91],
[141,92,126,99,106,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,105,96,108,91,101],
[109,0,100,104,99,100,93,105],
[118,111,0,114,109,105,106,118],
[106,107,97,0,105,115,100,104],
[115,112,102,106,0,109,101,114],
[103,111,106,96,102,0,103,105],
[120,118,105,111,110,108,0,114],
[110,106,93,107,97,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,99,106,112,113,108],
[101,0,104,109,100,103,102,100],
[96,107,0,100,97,115,104,100],
[112,102,111,0,107,123,109,105],
[105,111,114,104,0,107,105,105],
[99,108,96,88,104,0,108,102],
[98,109,107,102,106,103,0,96],
[103,111,111,106,106,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,131,101,142,124,134,123],
[87,0,140,106,160,126,134,107],
[80,71,0,122,115,116,104,87],
[110,105,89,0,130,123,123,102],
[69,51,96,81,0,120,125,95],
[87,85,95,88,91,0,121,92],
[77,77,107,88,86,90,0,87],
[88,104,124,109,116,119,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,112,112,111,130,111],
[109,0,107,103,121,119,110,120],
[94,104,0,90,104,99,107,105],
[99,108,121,0,114,109,117,120],
[99,90,107,97,0,112,103,106],
[100,92,112,102,99,0,104,117],
[81,101,104,94,108,107,0,107],
[100,91,106,91,105,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,104,101,107,118,105],
[99,0,99,96,95,85,106,95],
[106,112,0,88,114,88,105,100],
[107,115,123,0,122,97,114,124],
[110,116,97,89,0,92,108,106],
[104,126,123,114,119,0,121,112],
[93,105,106,97,103,90,0,93],
[106,116,111,87,105,99,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,104,99,111,108,86],
[113,0,103,106,109,108,110,114],
[118,108,0,101,109,102,108,109],
[107,105,110,0,102,101,103,111],
[112,102,102,109,0,105,99,112],
[100,103,109,110,106,0,95,101],
[103,101,103,108,112,116,0,114],
[125,97,102,100,99,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,113,106,100,109,122,103],
[77,0,100,98,93,98,89,107],
[98,111,0,96,89,109,114,115],
[105,113,115,0,104,95,100,107],
[111,118,122,107,0,102,104,122],
[102,113,102,116,109,0,97,114],
[89,122,97,111,107,114,0,120],
[108,104,96,104,89,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,97,101,101,108,100],
[103,0,104,103,107,110,107,105],
[104,107,0,108,104,98,108,109],
[114,108,103,0,101,99,109,105],
[110,104,107,110,0,110,103,104],
[110,101,113,112,101,0,106,104],
[103,104,103,102,108,105,0,100],
[111,106,102,106,107,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,106,105,132,116,96],
[95,0,133,111,107,107,114,108],
[110,78,0,90,108,106,100,92],
[105,100,121,0,126,116,120,120],
[106,104,103,85,0,107,106,95],
[79,104,105,95,104,0,103,107],
[95,97,111,91,105,108,0,90],
[115,103,119,91,116,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,117,105,116,105,104],
[101,0,100,106,114,111,100,110],
[102,111,0,117,105,119,95,102],
[94,105,94,0,102,111,87,103],
[106,97,106,109,0,104,97,106],
[95,100,92,100,107,0,93,101],
[106,111,116,124,114,118,0,103],
[107,101,109,108,105,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,110,106,117,112,118],
[94,0,93,100,103,90,106,87],
[111,118,0,111,112,105,127,107],
[101,111,100,0,100,105,107,102],
[105,108,99,111,0,106,124,109],
[94,121,106,106,105,0,112,110],
[99,105,84,104,87,99,0,108],
[93,124,104,109,102,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,108,103,124,106,99],
[101,0,102,96,107,116,104,101],
[118,109,0,104,104,123,120,108],
[103,115,107,0,112,121,116,99],
[108,104,107,99,0,116,108,97],
[87,95,88,90,95,0,101,89],
[105,107,91,95,103,110,0,96],
[112,110,103,112,114,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,119,98,101,100,94],
[107,0,113,105,101,101,93,102],
[96,98,0,104,96,99,104,100],
[92,106,107,0,93,102,97,107],
[113,110,115,118,0,105,104,115],
[110,110,112,109,106,0,114,103],
[111,118,107,114,107,97,0,106],
[117,109,111,104,96,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,139,70,105,106,105,103],
[142,0,106,106,72,106,106,106],
[72,105,0,0,72,36,69,67],
[141,105,211,0,141,175,141,175],
[106,139,139,70,0,70,103,103],
[105,105,175,36,141,0,105,175],
[106,105,142,70,108,106,0,139],
[108,105,144,36,108,36,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,101,117,120,139,107],
[99,0,103,115,115,127,146,121],
[101,108,0,126,131,135,115,97],
[110,96,85,0,124,118,131,111],
[94,96,80,87,0,117,102,87],
[91,84,76,93,94,0,108,87],
[72,65,96,80,109,103,0,74],
[104,90,114,100,124,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,98,144,122,155,110,110],
[55,0,75,65,120,152,76,67],
[113,136,0,113,157,178,91,111],
[67,146,98,0,133,142,109,100],
[89,91,54,78,0,112,87,67],
[56,59,33,69,99,0,57,79],
[101,135,120,102,124,154,0,99],
[101,144,100,111,144,132,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,121,111,120,102,110],
[97,0,96,108,112,101,109,104],
[100,115,0,107,110,112,109,101],
[90,103,104,0,109,103,98,102],
[100,99,101,102,0,100,108,110],
[91,110,99,108,111,0,109,112],
[109,102,102,113,103,102,0,112],
[101,107,110,109,101,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,113,94,101,111,84,86],
[125,0,114,91,113,119,116,106],
[98,97,0,98,99,118,96,106],
[117,120,113,0,109,118,102,113],
[110,98,112,102,0,132,92,111],
[100,92,93,93,79,0,85,81],
[127,95,115,109,119,126,0,117],
[125,105,105,98,100,130,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,109,135,118,117,135],
[105,0,108,97,122,98,107,104],
[117,103,0,98,145,102,108,131],
[102,114,113,0,131,103,108,125],
[76,89,66,80,0,80,86,95],
[93,113,109,108,131,0,111,123],
[94,104,103,103,125,100,0,111],
[76,107,80,86,116,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,121,112,97,124,108,110],
[109,0,118,113,105,111,100,105],
[90,93,0,87,95,81,91,90],
[99,98,124,0,109,103,100,109],
[114,106,116,102,0,115,95,112],
[87,100,130,108,96,0,111,101],
[103,111,120,111,116,100,0,122],
[101,106,121,102,99,110,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,91,89,105,104,88],
[107,0,108,104,95,109,104,99],
[107,103,0,100,77,97,103,104],
[120,107,111,0,97,100,104,106],
[122,116,134,114,0,102,112,98],
[106,102,114,111,109,0,101,117],
[107,107,108,107,99,110,0,91],
[123,112,107,105,113,94,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,105,115,102,103,97],
[109,0,118,107,110,108,103,110],
[101,93,0,105,100,101,108,100],
[106,104,106,0,117,98,109,116],
[96,101,111,94,0,100,95,93],
[109,103,110,113,111,0,108,111],
[108,108,103,102,116,103,0,105],
[114,101,111,95,118,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,114,102,118,106,106],
[105,0,99,97,88,106,98,99],
[115,112,0,112,96,111,98,100],
[97,114,99,0,100,107,103,102],
[109,123,115,111,0,118,105,115],
[93,105,100,104,93,0,101,91],
[105,113,113,108,106,110,0,96],
[105,112,111,109,96,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,211,127,170,84,211,211],
[0,0,42,84,84,42,85,127],
[0,169,0,42,42,84,127,168],
[84,127,169,0,168,126,169,211],
[41,127,169,43,0,83,126,168],
[127,169,127,85,128,0,169,211],
[0,126,84,42,85,42,0,83],
[0,84,43,0,43,0,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,109,123,111,101,106],
[100,0,103,101,124,106,107,114],
[91,108,0,101,110,99,110,113],
[102,110,110,0,105,100,94,101],
[88,87,101,106,0,95,93,97],
[100,105,112,111,116,0,116,103],
[110,104,101,117,118,95,0,115],
[105,97,98,110,114,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,97,89,126,111,106],
[123,0,116,119,106,139,99,129],
[106,95,0,103,96,138,105,111],
[114,92,108,0,87,141,109,110],
[122,105,115,124,0,132,112,117],
[85,72,73,70,79,0,97,97],
[100,112,106,102,99,114,0,99],
[105,82,100,101,94,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,119,67,119,87,82],
[94,0,122,110,87,129,101,110],
[105,89,0,116,111,106,89,94],
[92,101,95,0,119,108,74,120],
[144,124,100,92,0,147,113,111],
[92,82,105,103,64,0,76,81],
[124,110,122,137,98,135,0,107],
[129,101,117,91,100,130,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,112,108,112,106,110],
[104,0,93,107,113,104,106,114],
[106,118,0,103,112,104,107,109],
[99,104,108,0,102,110,98,104],
[103,98,99,109,0,90,105,102],
[99,107,107,101,121,0,97,109],
[105,105,104,113,106,114,0,114],
[101,97,102,107,109,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,88,90,123,94,108,104],
[104,0,89,90,106,86,104,108],
[123,122,0,115,100,111,133,118],
[121,121,96,0,116,106,115,113],
[88,105,111,95,0,87,107,106],
[117,125,100,105,124,0,117,114],
[103,107,78,96,104,94,0,98],
[107,103,93,98,105,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,108,124,144,106,100],
[99,0,107,99,96,121,73,97],
[103,104,0,110,118,140,105,102],
[103,112,101,0,109,128,106,119],
[87,115,93,102,0,135,93,111],
[67,90,71,83,76,0,69,72],
[105,138,106,105,118,142,0,107],
[111,114,109,92,100,139,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,98,108,110,98,115],
[104,0,114,102,103,108,104,111],
[85,97,0,99,96,100,98,112],
[113,109,112,0,100,97,100,108],
[103,108,115,111,0,106,107,104],
[101,103,111,114,105,0,113,110],
[113,107,113,111,104,98,0,113],
[96,100,99,103,107,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,105,100,93,104,113],
[114,0,101,118,104,108,110,113],
[111,110,0,108,99,107,107,115],
[106,93,103,0,100,95,103,105],
[111,107,112,111,0,104,105,109],
[118,103,104,116,107,0,107,114],
[107,101,104,108,106,104,0,117],
[98,98,96,106,102,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,86,89,93,112,122,108],
[114,0,96,114,107,114,124,106],
[125,115,0,97,124,118,128,127],
[122,97,114,0,113,127,119,116],
[118,104,87,98,0,115,111,119],
[99,97,93,84,96,0,128,121],
[89,87,83,92,100,83,0,122],
[103,105,84,95,92,90,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,105,107,118,108,108],
[107,0,112,123,124,123,90,112],
[93,99,0,101,100,106,84,88],
[106,88,110,0,123,108,100,102],
[104,87,111,88,0,118,86,95],
[93,88,105,103,93,0,86,88],
[103,121,127,111,125,125,0,124],
[103,99,123,109,116,123,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,98,106,95,103,99,105],
[80,0,100,98,86,109,101,87],
[113,111,0,114,114,105,83,105],
[105,113,97,0,94,108,84,94],
[116,125,97,117,0,101,107,107],
[108,102,106,103,110,0,75,113],
[112,110,128,127,104,136,0,105],
[106,124,106,117,104,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,93,89,101,94,86],
[115,0,117,115,111,119,111,105],
[116,94,0,113,98,115,113,97],
[118,96,98,0,101,112,117,110],
[122,100,113,110,0,112,110,108],
[110,92,96,99,99,0,89,80],
[117,100,98,94,101,122,0,96],
[125,106,114,101,103,131,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,96,144,113,104,112,117],
[90,0,97,120,95,110,106,115],
[115,114,0,118,105,108,89,94],
[67,91,93,0,94,95,89,91],
[98,116,106,117,0,111,103,113],
[107,101,103,116,100,0,106,98],
[99,105,122,122,108,105,0,101],
[94,96,117,120,98,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,82,112,96,91,105],
[116,0,111,83,122,100,104,98],
[105,100,0,95,128,106,110,114],
[129,128,116,0,134,110,111,103],
[99,89,83,77,0,88,84,88],
[115,111,105,101,123,0,101,114],
[120,107,101,100,127,110,0,89],
[106,113,97,108,123,97,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,126,140,111,115,127,101],
[68,0,77,92,96,78,83,103],
[85,134,0,129,96,73,122,93],
[71,119,82,0,79,73,97,60],
[100,115,115,132,0,98,117,113],
[96,133,138,138,113,0,130,113],
[84,128,89,114,94,81,0,94],
[110,108,118,151,98,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,104,112,111,106,116],
[96,0,109,104,99,105,101,98],
[101,102,0,102,102,112,115,108],
[107,107,109,0,107,109,99,111],
[99,112,109,104,0,104,114,106],
[100,106,99,102,107,0,109,113],
[105,110,96,112,97,102,0,102],
[95,113,103,100,105,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,109,106,85,126,124],
[105,0,129,115,98,90,106,122],
[98,82,0,118,96,93,93,103],
[102,96,93,0,92,83,105,96],
[105,113,115,119,0,112,104,110],
[126,121,118,128,99,0,123,121],
[85,105,118,106,107,88,0,101],
[87,89,108,115,101,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,132,130,105,184,77,130],
[78,0,78,105,80,132,52,78],
[79,133,0,79,132,186,106,79],
[81,106,132,0,80,157,104,79],
[106,131,79,131,0,157,104,106],
[27,79,25,54,54,0,77,27],
[134,159,105,107,107,134,0,80],
[81,133,132,132,105,184,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,109,117,94,111,85],
[107,0,119,105,121,107,119,110],
[108,92,0,110,108,100,109,103],
[102,106,101,0,119,91,112,92],
[94,90,103,92,0,75,100,85],
[117,104,111,120,136,0,105,91],
[100,92,102,99,111,106,0,92],
[126,101,108,119,126,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,94,108,101,105,102],
[109,0,109,102,102,97,102,99],
[99,102,0,88,104,103,107,104],
[117,109,123,0,105,101,117,105],
[103,109,107,106,0,107,110,98],
[110,114,108,110,104,0,106,109],
[106,109,104,94,101,105,0,110],
[109,112,107,106,113,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,108,102,103,103,107],
[99,0,105,105,99,104,97,102],
[117,106,0,115,105,110,112,117],
[103,106,96,0,111,99,102,107],
[109,112,106,100,0,107,104,104],
[108,107,101,112,104,0,105,111],
[108,114,99,109,107,106,0,106],
[104,109,94,104,107,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,103,108,109,102,114],
[100,0,114,94,106,106,111,107],
[104,97,0,96,107,102,98,103],
[108,117,115,0,119,109,101,132],
[103,105,104,92,0,107,100,106],
[102,105,109,102,104,0,97,116],
[109,100,113,110,111,114,0,105],
[97,104,108,79,105,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,113,112,110,104,104],
[109,0,108,108,114,111,103,110],
[96,103,0,106,111,99,94,83],
[98,103,105,0,98,105,75,94],
[99,97,100,113,0,109,104,90],
[101,100,112,106,102,0,95,86],
[107,108,117,136,107,116,0,97],
[107,101,128,117,121,125,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,111,150,102,124,121,132],
[78,0,104,98,100,92,93,89],
[100,107,0,109,99,92,81,99],
[61,113,102,0,112,108,96,93],
[109,111,112,99,0,87,107,123],
[87,119,119,103,124,0,90,86],
[90,118,130,115,104,121,0,92],
[79,122,112,118,88,125,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,78,88,115,89,118,80],
[114,0,85,93,111,109,100,109],
[133,126,0,121,109,95,120,133],
[123,118,90,0,103,119,115,120],
[96,100,102,108,0,100,120,122],
[122,102,116,92,111,0,118,130],
[93,111,91,96,91,93,0,94],
[131,102,78,91,89,81,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,114,131,128,136,135],
[100,0,120,116,105,99,96,118],
[111,91,0,100,109,111,119,130],
[97,95,111,0,97,117,118,110],
[80,106,102,114,0,101,120,103],
[83,112,100,94,110,0,104,103],
[75,115,92,93,91,107,0,95],
[76,93,81,101,108,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,106,119,114,107,101],
[107,0,120,108,115,115,110,105],
[108,91,0,103,122,106,95,89],
[105,103,108,0,121,102,97,104],
[92,96,89,90,0,100,95,80],
[97,96,105,109,111,0,104,108],
[104,101,116,114,116,107,0,97],
[110,106,122,107,131,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,84,98,81,83,101,81],
[115,0,98,90,98,89,97,86],
[127,113,0,112,119,115,103,120],
[113,121,99,0,112,84,117,108],
[130,113,92,99,0,92,120,85],
[128,122,96,127,119,0,122,111],
[110,114,108,94,91,89,0,96],
[130,125,91,103,126,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,101,117,96,96,102],
[114,0,106,106,121,103,104,108],
[110,105,0,108,107,104,103,106],
[110,105,103,0,113,101,110,110],
[94,90,104,98,0,107,96,99],
[115,108,107,110,104,0,104,98],
[115,107,108,101,115,107,0,111],
[109,103,105,101,112,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,80,107,135,77,120],
[86,0,110,92,115,113,86,85],
[92,101,0,86,102,116,89,99],
[131,119,125,0,122,147,118,98],
[104,96,109,89,0,128,86,114],
[76,98,95,64,83,0,66,95],
[134,125,122,93,125,145,0,104],
[91,126,112,113,97,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,78,103,51,77,114,76],
[134,0,100,140,75,98,127,97],
[133,111,0,162,89,161,126,136],
[108,71,49,0,62,96,112,72],
[160,136,122,149,0,149,124,87],
[134,113,50,115,62,0,115,113],
[97,84,85,99,87,96,0,59],
[135,114,75,139,124,98,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,101,108,107,104,126],
[90,0,115,120,108,113,108,101],
[97,96,0,79,113,70,99,107],
[110,91,132,0,95,116,109,112],
[103,103,98,116,0,91,68,93],
[104,98,141,95,120,0,106,97],
[107,103,112,102,143,105,0,111],
[85,110,104,99,118,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,87,106,121,107,97,110],
[98,0,103,98,95,113,94,101],
[124,108,0,102,98,116,89,104],
[105,113,109,0,98,121,102,106],
[90,116,113,113,0,112,108,110],
[104,98,95,90,99,0,90,82],
[114,117,122,109,103,121,0,126],
[101,110,107,105,101,129,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,110,102,92,109,101],
[108,0,92,107,97,89,89,98],
[99,119,0,119,110,109,108,118],
[101,104,92,0,90,91,102,96],
[109,114,101,121,0,95,109,104],
[119,122,102,120,116,0,112,113],
[102,122,103,109,102,99,0,108],
[110,113,93,115,107,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,102,118,101,110,108],
[111,0,117,101,122,95,103,114],
[105,94,0,98,106,114,108,115],
[109,110,113,0,119,94,109,133],
[93,89,105,92,0,92,89,104],
[110,116,97,117,119,0,112,110],
[101,108,103,102,122,99,0,115],
[103,97,96,78,107,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,119,104,106,106,102,90],
[87,0,87,80,83,97,100,92],
[92,124,0,88,96,101,93,109],
[107,131,123,0,113,105,111,110],
[105,128,115,98,0,105,102,98],
[105,114,110,106,106,0,103,125],
[109,111,118,100,109,108,0,104],
[121,119,102,101,113,86,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,128,114,129,92,94,141],
[109,0,143,92,108,108,117,108],
[83,68,0,78,92,60,82,93],
[97,119,133,0,116,120,124,132],
[82,103,119,95,0,85,95,109],
[119,103,151,91,126,0,119,104],
[117,94,129,87,116,92,0,118],
[70,103,118,79,102,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,84,108,103,96,97,115],
[96,0,91,98,88,98,87,104],
[127,120,0,107,108,113,100,126],
[103,113,104,0,112,105,96,121],
[108,123,103,99,0,107,110,122],
[115,113,98,106,104,0,104,119],
[114,124,111,115,101,107,0,125],
[96,107,85,90,89,92,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,139,105,75,101,100,102],
[88,0,126,82,81,101,109,76],
[72,85,0,75,89,89,98,76],
[106,129,136,0,99,105,131,107],
[136,130,122,112,0,101,126,99],
[110,110,122,106,110,0,111,94],
[111,102,113,80,85,100,0,73],
[109,135,135,104,112,117,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,97,102,102,98,95],
[115,0,93,106,103,110,103,109],
[107,118,0,99,103,111,112,104],
[114,105,112,0,106,98,119,106],
[109,108,108,105,0,111,115,109],
[109,101,100,113,100,0,116,99],
[113,108,99,92,96,95,0,106],
[116,102,107,105,102,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,104,111,108,110,113],
[112,0,113,113,104,105,103,103],
[94,98,0,102,106,95,92,98],
[107,98,109,0,104,102,99,103],
[100,107,105,107,0,115,108,108],
[103,106,116,109,96,0,99,109],
[101,108,119,112,103,112,0,120],
[98,108,113,108,103,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,101,95,91,100,99,116],
[83,0,86,88,72,94,104,100],
[110,125,0,95,98,97,112,125],
[116,123,116,0,106,95,105,121],
[120,139,113,105,0,105,121,111],
[111,117,114,116,106,0,96,96],
[112,107,99,106,90,115,0,89],
[95,111,86,90,100,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,115,105,113,122,100],
[103,0,102,115,117,111,110,113],
[107,109,0,113,113,109,118,100],
[96,96,98,0,104,102,112,92],
[106,94,98,107,0,106,120,104],
[98,100,102,109,105,0,122,96],
[89,101,93,99,91,89,0,91],
[111,98,111,119,107,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,116,113,113,113,98,125],
[88,0,107,91,90,106,87,98],
[95,104,0,101,86,98,92,88],
[98,120,110,0,109,111,120,115],
[98,121,125,102,0,104,100,122],
[98,105,113,100,107,0,98,109],
[113,124,119,91,111,113,0,117],
[86,113,123,96,89,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,99,90,107,110,104],
[98,0,126,99,109,104,112,101],
[95,85,0,92,103,99,104,87],
[112,112,119,0,110,105,115,107],
[121,102,108,101,0,105,118,102],
[104,107,112,106,106,0,106,88],
[101,99,107,96,93,105,0,108],
[107,110,124,104,109,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,117,104,100,106,88],
[105,0,94,92,100,98,106,86],
[113,117,0,112,110,118,125,98],
[94,119,99,0,98,110,111,88],
[107,111,101,113,0,116,110,118],
[111,113,93,101,95,0,107,102],
[105,105,86,100,101,104,0,93],
[123,125,113,123,93,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,95,104,108,110,106],
[107,0,87,90,92,118,124,114],
[119,124,0,107,105,121,125,119],
[116,121,104,0,111,126,131,121],
[107,119,106,100,0,111,118,101],
[103,93,90,85,100,0,117,100],
[101,87,86,80,93,94,0,99],
[105,97,92,90,110,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,127,85,115,161,127],
[88,0,97,108,106,97,121,119],
[96,114,0,136,136,104,126,114],
[84,103,75,0,114,83,125,104],
[126,105,75,97,0,95,106,95],
[96,114,107,128,116,0,116,118],
[50,90,85,86,105,95,0,93],
[84,92,97,107,116,93,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,95,102,98,94,107],
[112,0,115,111,128,93,117,109],
[116,96,0,114,116,107,112,109],
[116,100,97,0,116,103,100,100],
[109,83,95,95,0,101,95,109],
[113,118,104,108,110,0,97,105],
[117,94,99,111,116,114,0,114],
[104,102,102,111,102,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,113,105,109,123,112],
[103,0,99,104,105,104,117,113],
[99,112,0,114,107,107,113,114],
[98,107,97,0,106,103,106,102],
[106,106,104,105,0,113,125,111],
[102,107,104,108,98,0,113,113],
[88,94,98,105,86,98,0,103],
[99,98,97,109,100,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,109,102,99,85,103,96],
[121,0,109,95,97,89,106,90],
[102,102,0,106,90,83,89,96],
[109,116,105,0,102,107,99,94],
[112,114,121,109,0,102,117,108],
[126,122,128,104,109,0,126,113],
[108,105,122,112,94,85,0,90],
[115,121,115,117,103,98,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,125,112,111,107,103,109],
[101,0,124,106,104,114,115,107],
[86,87,0,88,104,105,98,91],
[99,105,123,0,109,103,99,89],
[100,107,107,102,0,100,102,115],
[104,97,106,108,111,0,108,98],
[108,96,113,112,109,103,0,107],
[102,104,120,122,96,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,109,116,94,98,107],
[107,0,111,112,109,118,101,111],
[104,100,0,115,110,99,94,112],
[102,99,96,0,110,99,107,100],
[95,102,101,101,0,102,101,101],
[117,93,112,112,109,0,102,109],
[113,110,117,104,110,109,0,105],
[104,100,99,111,110,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,90,111,106,128,133],
[95,0,119,108,97,75,105,126],
[84,92,0,83,84,92,101,127],
[121,103,128,0,104,113,107,135],
[100,114,127,107,0,106,102,134],
[105,136,119,98,105,0,108,124],
[83,106,110,104,109,103,0,134],
[78,85,84,76,77,87,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,101,78,92,71,89],
[118,0,110,130,101,104,98,100],
[120,101,0,112,100,110,91,116],
[110,81,99,0,89,95,88,97],
[133,110,111,122,0,102,107,110],
[119,107,101,116,109,0,87,99],
[140,113,120,123,104,124,0,118],
[122,111,95,114,101,112,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,114,105,117,112,106],
[98,0,106,108,109,106,107,98],
[113,105,0,113,107,121,111,110],
[97,103,98,0,104,109,106,98],
[106,102,104,107,0,103,97,98],
[94,105,90,102,108,0,106,96],
[99,104,100,105,114,105,0,97],
[105,113,101,113,113,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,112,121,103,107,109],
[102,0,121,104,122,101,99,111],
[96,90,0,106,104,96,92,101],
[99,107,105,0,114,102,96,105],
[90,89,107,97,0,94,90,112],
[108,110,115,109,117,0,100,118],
[104,112,119,115,121,111,0,116],
[102,100,110,106,99,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,115,124,105,110,123],
[84,0,99,113,110,95,100,107],
[95,112,0,102,100,89,92,98],
[96,98,109,0,102,95,89,99],
[87,101,111,109,0,91,99,98],
[106,116,122,116,120,0,101,116],
[101,111,119,122,112,110,0,117],
[88,104,113,112,113,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,121,125,125,107,119],
[102,0,87,105,109,130,98,83],
[112,124,0,113,128,111,83,110],
[90,106,98,0,103,101,98,102],
[86,102,83,108,0,114,91,91],
[86,81,100,110,97,0,87,103],
[104,113,128,113,120,124,0,110],
[92,128,101,109,120,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,93,91,113,103,103],
[113,0,91,105,99,118,112,104],
[112,120,0,109,102,116,121,105],
[118,106,102,0,109,128,116,111],
[120,112,109,102,0,104,118,114],
[98,93,95,83,107,0,105,93],
[108,99,90,95,93,106,0,108],
[108,107,106,100,97,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,108,99,127,94,118],
[104,0,93,101,108,115,105,119],
[104,118,0,93,114,117,105,107],
[103,110,118,0,116,137,136,132],
[112,103,97,95,0,104,101,120],
[84,96,94,74,107,0,104,103],
[117,106,106,75,110,107,0,121],
[93,92,104,79,91,108,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,107,115,99,106,106],
[97,0,106,113,107,103,105,98],
[105,105,0,109,110,108,114,101],
[104,98,102,0,109,104,108,101],
[96,104,101,102,0,106,93,100],
[112,108,103,107,105,0,111,93],
[105,106,97,103,118,100,0,97],
[105,113,110,110,111,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,94,95,93,91,88],
[120,0,112,102,104,105,102,109],
[115,99,0,106,100,102,93,98],
[117,109,105,0,107,110,101,101],
[116,107,111,104,0,103,98,106],
[118,106,109,101,108,0,102,97],
[120,109,118,110,113,109,0,100],
[123,102,113,110,105,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,121,108,113,107,115,108],
[115,0,127,127,109,120,117,103],
[90,84,0,108,92,95,98,90],
[103,84,103,0,108,104,102,98],
[98,102,119,103,0,97,104,95],
[104,91,116,107,114,0,114,105],
[96,94,113,109,107,97,0,101],
[103,108,121,113,116,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,85,93,103,89,91,91],
[110,0,103,97,118,103,115,113],
[126,108,0,101,116,116,108,100],
[118,114,110,0,108,123,102,100],
[108,93,95,103,0,121,103,99],
[122,108,95,88,90,0,92,84],
[120,96,103,109,108,119,0,96],
[120,98,111,111,112,127,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,90,91,103,93,94,105],
[110,0,100,97,116,103,112,108],
[121,111,0,106,129,101,112,118],
[120,114,105,0,115,103,110,108],
[108,95,82,96,0,93,90,98],
[118,108,110,108,118,0,102,124],
[117,99,99,101,121,109,0,120],
[106,103,93,103,113,87,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,105,102,117,149,74],
[106,0,90,103,89,120,120,88],
[106,121,0,121,89,121,151,106],
[106,108,90,0,74,105,151,46],
[109,122,122,137,0,124,123,60],
[94,91,90,106,87,0,135,74],
[62,91,60,60,88,76,0,44],
[137,123,105,165,151,137,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,99,129,114,110,113,96],
[94,0,97,126,110,125,126,106],
[112,114,0,112,93,130,122,115],
[82,85,99,0,85,85,112,93],
[97,101,118,126,0,118,123,122],
[101,86,81,126,93,0,106,111],
[98,85,89,99,88,105,0,93],
[115,105,96,118,89,100,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,102,94,107,103,110],
[97,0,107,94,90,93,91,97],
[111,104,0,94,102,103,104,102],
[109,117,117,0,104,116,103,103],
[117,121,109,107,0,113,115,104],
[104,118,108,95,98,0,103,100],
[108,120,107,108,96,108,0,107],
[101,114,109,108,107,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,93,109,93,116,110],
[107,0,104,106,109,96,106,100],
[101,107,0,91,107,102,115,101],
[118,105,120,0,115,104,111,104],
[102,102,104,96,0,104,110,103],
[118,115,109,107,107,0,121,104],
[95,105,96,100,101,90,0,107],
[101,111,110,107,108,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,99,101,112,96,113],
[117,0,111,100,108,115,108,111],
[101,100,0,99,105,118,102,101],
[112,111,112,0,121,115,108,105],
[110,103,106,90,0,103,106,103],
[99,96,93,96,108,0,101,104],
[115,103,109,103,105,110,0,110],
[98,100,110,106,108,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,123,83,113,108,104,98],
[125,0,107,109,105,91,108,111],
[88,104,0,76,94,106,105,106],
[128,102,135,0,122,108,133,101],
[98,106,117,89,0,113,107,93],
[103,120,105,103,98,0,106,112],
[107,103,106,78,104,105,0,82],
[113,100,105,110,118,99,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,90,83,69,71,86,81],
[136,0,127,89,104,114,91,97],
[121,84,0,103,81,101,98,105],
[128,122,108,0,103,110,112,122],
[142,107,130,108,0,107,110,105],
[140,97,110,101,104,0,110,102],
[125,120,113,99,101,101,0,108],
[130,114,106,89,106,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,101,114,101,116,111],
[96,0,97,102,108,103,101,103],
[99,114,0,106,122,105,121,116],
[110,109,105,0,109,107,115,102],
[97,103,89,102,0,101,105,102],
[110,108,106,104,110,0,112,105],
[95,110,90,96,106,99,0,106],
[100,108,95,109,109,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,120,112,113,94,93,111],
[91,0,93,82,84,83,81,86],
[91,118,0,99,109,90,99,101],
[99,129,112,0,117,111,102,109],
[98,127,102,94,0,103,96,106],
[117,128,121,100,108,0,112,115],
[118,130,112,109,115,99,0,102],
[100,125,110,102,105,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,110,87,94,108,107],
[101,0,90,110,93,92,98,107],
[106,121,0,107,108,104,120,124],
[101,101,104,0,95,109,95,96],
[124,118,103,116,0,115,111,119],
[117,119,107,102,96,0,96,114],
[103,113,91,116,100,115,0,112],
[104,104,87,115,92,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,124,118,113,109,112,115],
[113,0,121,120,117,113,102,122],
[87,90,0,98,95,114,97,112],
[93,91,113,0,98,89,101,109],
[98,94,116,113,0,119,112,122],
[102,98,97,122,92,0,101,97],
[99,109,114,110,99,110,0,113],
[96,89,99,102,89,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,97,107,106,89,97,97],
[123,0,105,103,112,92,114,103],
[114,106,0,119,102,102,113,99],
[104,108,92,0,104,95,108,93],
[105,99,109,107,0,98,97,108],
[122,119,109,116,113,0,116,93],
[114,97,98,103,114,95,0,101],
[114,108,112,118,103,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,114,144,100,99,86],
[105,0,91,80,121,95,101,115],
[100,120,0,128,143,97,121,115],
[97,131,83,0,109,106,109,122],
[67,90,68,102,0,81,94,103],
[111,116,114,105,130,0,117,115],
[112,110,90,102,117,94,0,117],
[125,96,96,89,108,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,118,118,101,105,113],
[113,0,104,118,102,106,101,116],
[95,107,0,107,100,97,99,102],
[93,93,104,0,106,86,90,109],
[93,109,111,105,0,102,104,104],
[110,105,114,125,109,0,107,124],
[106,110,112,121,107,104,0,112],
[98,95,109,102,107,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,91,106,98,96,107],
[99,0,111,105,97,90,97,104],
[101,100,0,103,106,97,97,108],
[120,106,108,0,105,92,99,107],
[105,114,105,106,0,106,107,117],
[113,121,114,119,105,0,99,122],
[115,114,114,112,104,112,0,120],
[104,107,103,104,94,89,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,141,97,105,121,124,122],
[109,0,108,98,90,123,105,106],
[70,103,0,69,89,104,78,98],
[114,113,142,0,99,141,98,133],
[106,121,122,112,0,130,84,156],
[90,88,107,70,81,0,68,115],
[87,106,133,113,127,143,0,135],
[89,105,113,78,55,96,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,115,46,69,92,94,142],
[119,0,119,96,94,71,71,119],
[96,92,0,94,69,92,71,142],
[165,115,117,0,115,92,117,165],
[142,117,142,96,0,94,71,119],
[119,140,119,119,117,0,94,165],
[117,140,140,94,140,117,0,165],
[69,92,69,46,92,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,101,107,94,107,108],
[96,0,110,108,105,94,112,102],
[101,101,0,106,110,106,112,112],
[110,103,105,0,96,113,109,113],
[104,106,101,115,0,109,131,130],
[117,117,105,98,102,0,125,114],
[104,99,99,102,80,86,0,106],
[103,109,99,98,81,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,117,100,113,105,113],
[100,0,106,98,102,99,107,105],
[87,105,0,95,106,93,109,112],
[94,113,116,0,107,112,104,107],
[111,109,105,104,0,98,101,109],
[98,112,118,99,113,0,113,98],
[106,104,102,107,110,98,0,114],
[98,106,99,104,102,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,110,112,105,110,111],
[98,0,116,83,114,101,90,114],
[104,95,0,94,95,99,88,87],
[101,128,117,0,108,107,100,105],
[99,97,116,103,0,96,100,106],
[106,110,112,104,115,0,98,112],
[101,121,123,111,111,113,0,105],
[100,97,124,106,105,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,99,125,112,93,105],
[117,0,105,99,114,121,104,97],
[101,106,0,107,116,109,115,99],
[112,112,104,0,112,114,107,107],
[86,97,95,99,0,97,92,90],
[99,90,102,97,114,0,95,104],
[118,107,96,104,119,116,0,100],
[106,114,112,104,121,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,146,118,118,123,105,137],
[61,0,105,73,123,101,102,115],
[65,106,0,85,91,87,89,112],
[93,138,126,0,105,98,93,114],
[93,88,120,106,0,88,99,101],
[88,110,124,113,123,0,89,108],
[106,109,122,118,112,122,0,99],
[74,96,99,97,110,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,121,109,105,106,119],
[98,0,111,105,97,96,101,108],
[93,100,0,95,106,97,98,96],
[90,106,116,0,104,98,108,114],
[102,114,105,107,0,106,97,108],
[106,115,114,113,105,0,106,112],
[105,110,113,103,114,105,0,114],
[92,103,115,97,103,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,103,109,102,102,108],
[114,0,115,105,114,112,108,115],
[105,96,0,104,101,102,112,110],
[108,106,107,0,116,105,102,102],
[102,97,110,95,0,105,107,97],
[109,99,109,106,106,0,101,107],
[109,103,99,109,104,110,0,98],
[103,96,101,109,114,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,84,170,85,128,128,128],
[83,0,167,83,124,83,86,83],
[127,44,0,127,85,85,86,85],
[41,128,84,0,85,44,44,85],
[126,87,126,126,0,170,129,126],
[83,128,126,167,41,0,127,124],
[83,125,125,167,82,84,0,84],
[83,128,126,126,85,87,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,100,111,92,105,100],
[107,0,115,106,107,109,110,103],
[109,96,0,90,99,111,109,109],
[111,105,121,0,116,113,107,102],
[100,104,112,95,0,108,108,95],
[119,102,100,98,103,0,93,103],
[106,101,102,104,103,118,0,106],
[111,108,102,109,116,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,102,96,116,95,90],
[118,0,105,117,107,115,107,109],
[112,106,0,115,103,118,120,102],
[109,94,96,0,102,103,106,98],
[115,104,108,109,0,120,104,106],
[95,96,93,108,91,0,93,97],
[116,104,91,105,107,118,0,104],
[121,102,109,113,105,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,110,132,97,105,123],
[103,0,113,107,142,113,115,134],
[96,98,0,111,109,93,93,122],
[101,104,100,0,106,93,87,104],
[79,69,102,105,0,69,95,117],
[114,98,118,118,142,0,82,109],
[106,96,118,124,116,129,0,149],
[88,77,89,107,94,102,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,104,98,116,107,104],
[93,0,96,92,88,94,110,90],
[101,115,0,116,102,108,107,109],
[107,119,95,0,88,109,106,104],
[113,123,109,123,0,123,105,114],
[95,117,103,102,88,0,112,102],
[104,101,104,105,106,99,0,106],
[107,121,102,107,97,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,86,97,137,124,107],
[103,0,115,123,114,146,150,144],
[102,96,0,91,104,153,123,108],
[125,88,120,0,126,110,116,134],
[114,97,107,85,0,115,114,118],
[74,65,58,101,96,0,123,104],
[87,61,88,95,97,88,0,108],
[104,67,103,77,93,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,110,109,109,111,106],
[96,0,115,106,114,108,105,104],
[106,96,0,77,101,98,81,91],
[101,105,134,0,115,111,104,110],
[102,97,110,96,0,96,92,89],
[102,103,113,100,115,0,101,105],
[100,106,130,107,119,110,0,105],
[105,107,120,101,122,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,108,118,117,108,121],
[111,0,96,101,107,111,100,117],
[101,115,0,96,113,114,108,115],
[103,110,115,0,105,120,107,120],
[93,104,98,106,0,110,98,107],
[94,100,97,91,101,0,80,103],
[103,111,103,104,113,131,0,114],
[90,94,96,91,104,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,107,99,104,103,103],
[106,0,104,105,109,101,106,109],
[113,107,0,112,108,114,103,110],
[104,106,99,0,104,107,109,99],
[112,102,103,107,0,106,113,107],
[107,110,97,104,105,0,109,102],
[108,105,108,102,98,102,0,105],
[108,102,101,112,104,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,92,99,87,101,98,94],
[112,0,106,108,107,112,99,114],
[119,105,0,116,108,100,112,109],
[112,103,95,0,94,104,105,103],
[124,104,103,117,0,103,110,118],
[110,99,111,107,108,0,107,103],
[113,112,99,106,101,104,0,113],
[117,97,102,108,93,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,99,111,126,113,101],
[91,0,108,99,108,129,103,110],
[95,103,0,115,111,130,130,128],
[112,112,96,0,121,121,103,111],
[100,103,100,90,0,114,111,98],
[85,82,81,90,97,0,96,82],
[98,108,81,108,100,115,0,105],
[110,101,83,100,113,129,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,107,100,100,117,117],
[95,0,93,105,93,87,102,100],
[109,118,0,106,111,100,104,103],
[104,106,105,0,108,106,118,115],
[111,118,100,103,0,98,117,112],
[111,124,111,105,113,0,121,113],
[94,109,107,93,94,90,0,87],
[94,111,108,96,99,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,160,28,81,53,108,81],
[158,0,158,107,105,106,132,132],
[51,53,0,28,53,53,54,27],
[183,104,183,0,157,104,157,157],
[130,106,158,54,0,53,81,107],
[158,105,158,107,158,0,160,107],
[103,79,157,54,130,51,0,133],
[130,79,184,54,104,104,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,85,85,169,126,211,168],
[42,0,42,42,84,41,168,84],
[126,169,0,42,168,126,126,168],
[126,169,169,0,126,84,168,211],
[42,127,43,85,0,41,169,127],
[85,170,85,127,170,0,170,127],
[0,43,85,43,42,41,0,127],
[43,127,43,0,84,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,94,91,110,106,97],
[113,0,112,115,97,107,113,105],
[102,99,0,89,94,108,96,94],
[117,96,122,0,99,97,115,105],
[120,114,117,112,0,100,117,106],
[101,104,103,114,111,0,124,96],
[105,98,115,96,94,87,0,89],
[114,106,117,106,105,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,100,95,100,104,103],
[104,0,110,107,107,98,111,97],
[92,101,0,100,104,87,102,102],
[111,104,111,0,104,94,99,97],
[116,104,107,107,0,109,108,113],
[111,113,124,117,102,0,103,106],
[107,100,109,112,103,108,0,115],
[108,114,109,114,98,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,105,112,124,121,112],
[103,0,106,105,108,122,117,120],
[98,105,0,109,109,108,111,106],
[106,106,102,0,99,104,99,110],
[99,103,102,112,0,114,112,119],
[87,89,103,107,97,0,113,109],
[90,94,100,112,99,98,0,109],
[99,91,105,101,92,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,105,105,93,95,115],
[104,0,100,106,112,97,94,104],
[96,111,0,99,99,93,85,102],
[106,105,112,0,111,93,107,105],
[106,99,112,100,0,82,103,108],
[118,114,118,118,129,0,104,116],
[116,117,126,104,108,107,0,94],
[96,107,109,106,103,95,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,98,92,94,101,94],
[119,0,112,101,106,85,106,99],
[109,99,0,96,99,102,116,92],
[113,110,115,0,93,105,101,90],
[119,105,112,118,0,108,114,112],
[117,126,109,106,103,0,119,118],
[110,105,95,110,97,92,0,102],
[117,112,119,121,99,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,101,105,110,98,107],
[113,0,110,94,104,118,108,116],
[108,101,0,90,114,117,107,106],
[110,117,121,0,122,105,122,114],
[106,107,97,89,0,94,106,103],
[101,93,94,106,117,0,99,110],
[113,103,104,89,105,112,0,102],
[104,95,105,97,108,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,112,108,92,100,105],
[99,0,95,88,89,93,88,94],
[109,116,0,89,114,89,84,86],
[99,123,122,0,111,106,115,106],
[103,122,97,100,0,89,95,99],
[119,118,122,105,122,0,123,118],
[111,123,127,96,116,88,0,118],
[106,117,125,105,112,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,99,102,92,96,114],
[100,0,139,103,99,101,137,100],
[93,72,0,96,80,94,105,101],
[112,108,115,0,114,102,108,108],
[109,112,131,97,0,108,115,136],
[119,110,117,109,103,0,105,141],
[115,74,106,103,96,106,0,90],
[97,111,110,103,75,70,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,102,107,122,115,85],
[98,0,106,108,93,109,111,105],
[103,105,0,112,100,104,115,109],
[109,103,99,0,74,106,119,88],
[104,118,111,137,0,134,138,129],
[89,102,107,105,77,0,110,96],
[96,100,96,92,73,101,0,87],
[126,106,102,123,82,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,92,120,118,115,112],
[106,0,107,102,114,95,119,95],
[97,104,0,91,110,99,132,103],
[119,109,120,0,105,97,127,92],
[91,97,101,106,0,108,104,93],
[93,116,112,114,103,0,119,106],
[96,92,79,84,107,92,0,87],
[99,116,108,119,118,105,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,97,97,87,107,98],
[115,0,105,96,102,102,128,112],
[110,106,0,105,107,103,110,113],
[114,115,106,0,103,107,112,107],
[114,109,104,108,0,96,127,118],
[124,109,108,104,115,0,115,120],
[104,83,101,99,84,96,0,117],
[113,99,98,104,93,91,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,107,103,102,108,114],
[117,0,115,111,101,109,106,119],
[103,96,0,99,94,109,106,107],
[104,100,112,0,97,103,96,110],
[108,110,117,114,0,108,100,118],
[109,102,102,108,103,0,104,108],
[103,105,105,115,111,107,0,116],
[97,92,104,101,93,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,108,96,100,101,101],
[108,0,107,100,95,109,104,113],
[113,104,0,103,96,106,94,100],
[103,111,108,0,97,107,104,108],
[115,116,115,114,0,105,109,104],
[111,102,105,104,106,0,104,105],
[110,107,117,107,102,107,0,107],
[110,98,111,103,107,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,120,117,117,103,110,115],
[96,0,121,111,107,110,118,118],
[91,90,0,103,92,103,94,102],
[94,100,108,0,110,88,103,106],
[94,104,119,101,0,95,102,123],
[108,101,108,123,116,0,105,119],
[101,93,117,108,109,106,0,109],
[96,93,109,105,88,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,105,118,111,110,122],
[94,0,111,102,107,103,103,103],
[93,100,0,93,114,99,99,103],
[106,109,118,0,111,106,106,103],
[93,104,97,100,0,100,98,101],
[100,108,112,105,111,0,106,105],
[101,108,112,105,113,105,0,99],
[89,108,108,108,110,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,102,98,104,108,110],
[103,0,109,100,106,106,110,106],
[102,102,0,101,106,104,113,97],
[109,111,110,0,98,104,105,103],
[113,105,105,113,0,98,99,98],
[107,105,107,107,113,0,108,108],
[103,101,98,106,112,103,0,105],
[101,105,114,108,113,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,146,146,112,113,162],
[114,0,131,130,113,96,63,81],
[112,80,0,112,128,79,96,80],
[65,81,99,0,114,65,94,64],
[65,98,83,97,0,97,95,64],
[99,115,132,146,114,0,128,83],
[98,148,115,117,116,83,0,116],
[49,130,131,147,147,128,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,90,105,101,114,98],
[110,0,113,109,120,103,105,116],
[103,98,0,93,118,106,103,103],
[121,102,118,0,131,123,124,120],
[106,91,93,80,0,95,94,101],
[110,108,105,88,116,0,108,119],
[97,106,108,87,117,103,0,114],
[113,95,108,91,110,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,119,119,129,103,102,118],
[80,0,95,91,109,104,99,115],
[92,116,0,108,107,109,107,116],
[92,120,103,0,119,103,95,106],
[82,102,104,92,0,94,100,107],
[108,107,102,108,117,0,99,102],
[109,112,104,116,111,112,0,104],
[93,96,95,105,104,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,105,113,97,103,109],
[108,0,105,111,106,104,110,115],
[110,106,0,100,111,105,106,125],
[106,100,111,0,120,103,107,125],
[98,105,100,91,0,108,108,115],
[114,107,106,108,103,0,105,111],
[108,101,105,104,103,106,0,119],
[102,96,86,86,96,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,104,100,101,119,126],
[105,0,122,100,107,111,112,111],
[106,89,0,98,112,105,102,115],
[107,111,113,0,96,110,111,102],
[111,104,99,115,0,98,108,106],
[110,100,106,101,113,0,111,98],
[92,99,109,100,103,100,0,106],
[85,100,96,109,105,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,114,85,96,91,98],
[111,0,105,98,90,76,106,103],
[96,106,0,102,114,115,107,97],
[97,113,109,0,83,106,102,103],
[126,121,97,128,0,143,127,104],
[115,135,96,105,68,0,114,99],
[120,105,104,109,84,97,0,121],
[113,108,114,108,107,112,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,109,99,108,117,100],
[98,0,108,110,106,115,95,100],
[95,103,0,105,99,96,96,111],
[102,101,106,0,99,81,96,106],
[112,105,112,112,0,110,106,113],
[103,96,115,130,101,0,106,111],
[94,116,115,115,105,105,0,87],
[111,111,100,105,98,100,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,105,108,105,100,105],
[100,0,105,106,107,107,116,113],
[99,106,0,113,106,98,109,103],
[106,105,98,0,105,103,95,99],
[103,104,105,106,0,100,107,97],
[106,104,113,108,111,0,114,105],
[111,95,102,116,104,97,0,102],
[106,98,108,112,114,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,104,123,109,118,100],
[100,0,109,103,122,100,111,88],
[96,102,0,106,117,101,113,95],
[107,108,105,0,128,114,116,112],
[88,89,94,83,0,96,94,94],
[102,111,110,97,115,0,118,97],
[93,100,98,95,117,93,0,98],
[111,123,116,99,117,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,83,93,94,88,121,93],
[105,0,87,84,98,82,96,86],
[128,124,0,101,99,100,115,109],
[118,127,110,0,104,86,112,97],
[117,113,112,107,0,104,111,98],
[123,129,111,125,107,0,133,104],
[90,115,96,99,100,78,0,93],
[118,125,102,114,113,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,101,86,102,98,97],
[102,0,103,102,95,104,99,91],
[100,108,0,102,109,111,111,116],
[110,109,109,0,102,114,117,95],
[125,116,102,109,0,120,114,111],
[109,107,100,97,91,0,105,101],
[113,112,100,94,97,106,0,105],
[114,120,95,116,100,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,70,118,116,117,139,92],
[117,0,117,117,117,93,92,91],
[141,94,0,97,93,92,117,44],
[93,94,114,0,68,69,69,90],
[95,94,118,143,0,117,71,116],
[94,118,119,142,94,0,94,92],
[72,119,94,142,140,117,0,70],
[119,120,167,121,95,119,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,115,118,112,107,101],
[103,0,89,109,105,94,100,102],
[92,122,0,120,110,108,110,107],
[96,102,91,0,105,95,104,104],
[93,106,101,106,0,97,107,95],
[99,117,103,116,114,0,102,101],
[104,111,101,107,104,109,0,100],
[110,109,104,107,116,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,99,101,96,115,96],
[108,0,116,105,75,92,94,89],
[111,95,0,105,97,97,113,103],
[112,106,106,0,97,102,93,99],
[110,136,114,114,0,99,117,109],
[115,119,114,109,112,0,109,105],
[96,117,98,118,94,102,0,96],
[115,122,108,112,102,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,120,114,82,73,130],
[108,0,102,131,96,116,93,132],
[87,109,0,93,78,97,107,113],
[91,80,118,0,97,94,91,104],
[97,115,133,114,0,115,98,122],
[129,95,114,117,96,0,78,119],
[138,118,104,120,113,133,0,129],
[81,79,98,107,89,92,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,103,113,100,107,101],
[97,0,100,104,113,96,113,110],
[105,111,0,112,102,111,111,118],
[108,107,99,0,105,99,103,111],
[98,98,109,106,0,106,104,99],
[111,115,100,112,105,0,111,101],
[104,98,100,108,107,100,0,101],
[110,101,93,100,112,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,115,107,112,99,118],
[97,0,108,94,94,105,95,104],
[99,103,0,112,107,114,105,125],
[96,117,99,0,106,98,90,112],
[104,117,104,105,0,119,99,112],
[99,106,97,113,92,0,110,104],
[112,116,106,121,112,101,0,112],
[93,107,86,99,99,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,97,96,114,107,110],
[101,0,109,110,106,112,114,111],
[114,102,0,112,96,106,115,117],
[114,101,99,0,101,101,115,98],
[115,105,115,110,0,121,108,101],
[97,99,105,110,90,0,109,99],
[104,97,96,96,103,102,0,100],
[101,100,94,113,110,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,100,106,108,96,98],
[100,0,100,86,105,90,110,90],
[103,111,0,96,108,106,96,100],
[111,125,115,0,117,105,117,110],
[105,106,103,94,0,104,106,93],
[103,121,105,106,107,0,100,99],
[115,101,115,94,105,111,0,99],
[113,121,111,101,118,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,108,94,113,91,108],
[118,0,107,123,107,119,105,112],
[103,104,0,105,103,97,74,100],
[103,88,106,0,91,109,85,94],
[117,104,108,120,0,132,113,119],
[98,92,114,102,79,0,79,103],
[120,106,137,126,98,132,0,119],
[103,99,111,117,92,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,98,117,108,132,100],
[91,0,91,105,107,101,123,93],
[99,120,0,110,116,119,113,98],
[113,106,101,0,110,94,130,108],
[94,104,95,101,0,112,108,118],
[103,110,92,117,99,0,119,92],
[79,88,98,81,103,92,0,97],
[111,118,113,103,93,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,120,108,106,98,95],
[99,0,102,135,101,113,106,106],
[106,109,0,127,106,120,95,104],
[91,76,84,0,79,85,86,80],
[103,110,105,132,0,113,98,97],
[105,98,91,126,98,0,119,88],
[113,105,116,125,113,92,0,102],
[116,105,107,131,114,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,105,104,96,113,113],
[110,0,104,118,106,112,114,102],
[111,107,0,118,109,104,100,109],
[106,93,93,0,101,116,105,104],
[107,105,102,110,0,112,123,113],
[115,99,107,95,99,0,118,117],
[98,97,111,106,88,93,0,109],
[98,109,102,107,98,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,138,111,133,103,100,114],
[99,0,132,97,104,112,94,116],
[73,79,0,89,87,93,75,90],
[100,114,122,0,106,119,124,106],
[78,107,124,105,0,112,93,100],
[108,99,118,92,99,0,89,108],
[111,117,136,87,118,122,0,108],
[97,95,121,105,111,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,101,114,97,103,103,110],
[74,0,91,83,77,75,83,105],
[110,120,0,105,109,96,107,103],
[97,128,106,0,95,95,97,103],
[114,134,102,116,0,95,115,111],
[108,136,115,116,116,0,95,102],
[108,128,104,114,96,116,0,113],
[101,106,108,108,100,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,89,101,102,75,104],
[107,0,102,124,111,116,110,104],
[130,109,0,114,114,103,104,123],
[122,87,97,0,100,104,96,109],
[110,100,97,111,0,111,99,105],
[109,95,108,107,100,0,99,95],
[136,101,107,115,112,112,0,109],
[107,107,88,102,106,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,139,116,119,111,108,102],
[90,0,144,81,111,107,113,84],
[72,67,0,83,73,62,78,81],
[95,130,128,0,117,112,122,142],
[92,100,138,94,0,103,102,99],
[100,104,149,99,108,0,105,97],
[103,98,133,89,109,106,0,97],
[109,127,130,69,112,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,123,106,114,106,119],
[107,0,114,116,108,110,101,101],
[96,97,0,98,109,114,93,95],
[88,95,113,0,109,107,95,96],
[105,103,102,102,0,103,87,97],
[97,101,97,104,108,0,91,103],
[105,110,118,116,124,120,0,109],
[92,110,116,115,114,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,127,115,111,110,112,95],
[104,0,121,123,115,117,110,122],
[84,90,0,108,94,99,111,99],
[96,88,103,0,100,105,100,95],
[100,96,117,111,0,113,114,105],
[101,94,112,106,98,0,94,97],
[99,101,100,111,97,117,0,104],
[116,89,112,116,106,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,119,116,106,111,110],
[91,0,80,100,90,82,91,96],
[107,131,0,116,110,103,130,105],
[92,111,95,0,100,91,123,105],
[95,121,101,111,0,108,120,104],
[105,129,108,120,103,0,130,123],
[100,120,81,88,91,81,0,99],
[101,115,106,106,107,88,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,108,108,109,108,114],
[95,0,94,97,96,96,96,101],
[107,117,0,115,104,112,112,116],
[103,114,96,0,104,107,105,105],
[103,115,107,107,0,103,104,106],
[102,115,99,104,108,0,114,105],
[103,115,99,106,107,97,0,109],
[97,110,95,106,105,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,136,121,133,137,89,111],
[100,0,102,101,101,112,42,77],
[75,109,0,100,112,134,77,90],
[90,110,111,0,87,122,98,67],
[78,110,99,124,0,124,89,90],
[74,99,77,89,87,0,43,30],
[122,169,134,113,122,168,0,78],
[100,134,121,144,121,181,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,97,98,103,88,91],
[120,0,110,120,114,100,102,101],
[104,101,0,101,96,103,97,100],
[114,91,110,0,100,96,81,89],
[113,97,115,111,0,104,104,97],
[108,111,108,115,107,0,114,100],
[123,109,114,130,107,97,0,107],
[120,110,111,122,114,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,100,101,102,103,103],
[105,0,116,115,94,91,93,103],
[108,95,0,108,105,99,97,106],
[111,96,103,0,98,95,105,113],
[110,117,106,113,0,115,111,99],
[109,120,112,116,96,0,101,105],
[108,118,114,106,100,110,0,92],
[108,108,105,98,112,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,125,100,113,121,99,113],
[100,0,123,114,113,114,108,86],
[86,88,0,96,106,111,82,82],
[111,97,115,0,113,110,90,94],
[98,98,105,98,0,102,76,74],
[90,97,100,101,109,0,83,84],
[112,103,129,121,135,128,0,110],
[98,125,129,117,137,127,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,92,100,90,100,98],
[100,0,92,86,99,99,90,89],
[111,119,0,99,115,105,108,104],
[119,125,112,0,108,108,102,113],
[111,112,96,103,0,107,103,105],
[121,112,106,103,104,0,98,96],
[111,121,103,109,108,113,0,107],
[113,122,107,98,106,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,100,84,113,98,92,102],
[135,0,129,115,116,102,143,135],
[111,82,0,83,114,107,96,117],
[127,96,128,0,107,106,106,102],
[98,95,97,104,0,85,81,94],
[113,109,104,105,126,0,113,109],
[119,68,115,105,130,98,0,95],
[109,76,94,109,117,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,108,101,112,111,106,96],
[91,0,86,87,87,95,93,79],
[103,125,0,107,96,112,99,99],
[110,124,104,0,105,98,105,92],
[99,124,115,106,0,113,108,103],
[100,116,99,113,98,0,111,111],
[105,118,112,106,103,100,0,106],
[115,132,112,119,108,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,114,105,108,113,111],
[105,0,102,111,107,102,110,92],
[98,109,0,118,101,113,102,90],
[97,100,93,0,94,100,96,98],
[106,104,110,117,0,93,119,86],
[103,109,98,111,118,0,116,95],
[98,101,109,115,92,95,0,108],
[100,119,121,113,125,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,112,112,102,106,96],
[123,0,111,108,117,118,117,103],
[109,100,0,98,97,113,104,110],
[99,103,113,0,109,111,98,104],
[99,94,114,102,0,107,115,119],
[109,93,98,100,104,0,107,114],
[105,94,107,113,96,104,0,110],
[115,108,101,107,92,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,85,116,96,80,107,98],
[103,0,76,118,99,108,115,108],
[126,135,0,138,98,103,127,132],
[95,93,73,0,79,83,101,88],
[115,112,113,132,0,100,115,122],
[131,103,108,128,111,0,113,115],
[104,96,84,110,96,98,0,96],
[113,103,79,123,89,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,112,100,114,117,107],
[104,0,98,98,101,113,98,107],
[103,113,0,94,111,86,109,108],
[99,113,117,0,114,96,102,109],
[111,110,100,97,0,88,105,103],
[97,98,125,115,123,0,110,119],
[94,113,102,109,106,101,0,120],
[104,104,103,102,108,92,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,111,103,110,120,108],
[102,0,96,97,98,101,110,119],
[98,115,0,106,107,113,106,111],
[100,114,105,0,103,117,119,107],
[108,113,104,108,0,117,108,110],
[101,110,98,94,94,0,119,95],
[91,101,105,92,103,92,0,111],
[103,92,100,104,101,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,89,103,109,102,112,110],
[107,0,96,112,103,115,117,121],
[122,115,0,105,107,107,124,113],
[108,99,106,0,102,112,111,103],
[102,108,104,109,0,112,115,114],
[109,96,104,99,99,0,105,107],
[99,94,87,100,96,106,0,97],
[101,90,98,108,97,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,100,103,91,99,97],
[118,0,111,94,103,106,108,109],
[121,100,0,107,115,107,110,116],
[111,117,104,0,115,110,114,102],
[108,108,96,96,0,89,102,103],
[120,105,104,101,122,0,114,114],
[112,103,101,97,109,97,0,103],
[114,102,95,109,108,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,137,105,109,117,105,124],
[113,0,139,112,114,98,96,108],
[74,72,0,81,88,83,73,99],
[106,99,130,0,116,119,96,107],
[102,97,123,95,0,88,80,115],
[94,113,128,92,123,0,109,109],
[106,115,138,115,131,102,0,124],
[87,103,112,104,96,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,114,98,95,97,104,102],
[91,0,108,101,103,95,102,95],
[97,103,0,105,95,116,105,95],
[113,110,106,0,107,115,89,99],
[116,108,116,104,0,117,118,112],
[114,116,95,96,94,0,109,90],
[107,109,106,122,93,102,0,113],
[109,116,116,112,99,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,106,84,106,91,108],
[101,0,120,118,99,127,108,101],
[95,91,0,99,104,118,100,105],
[105,93,112,0,112,123,101,111],
[127,112,107,99,0,92,111,109],
[105,84,93,88,119,0,94,101],
[120,103,111,110,100,117,0,104],
[103,110,106,100,102,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,114,104,109,98,110],
[104,0,92,108,99,95,85,106],
[106,119,0,113,105,106,107,116],
[97,103,98,0,97,107,96,99],
[107,112,106,114,0,103,109,119],
[102,116,105,104,108,0,97,117],
[113,126,104,115,102,114,0,118],
[101,105,95,112,92,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,102,103,102,112,99],
[120,0,99,110,114,124,112,107],
[114,112,0,122,111,130,127,105],
[109,101,89,0,104,114,97,88],
[108,97,100,107,0,101,107,94],
[109,87,81,97,110,0,109,90],
[99,99,84,114,104,102,0,88],
[112,104,106,123,117,121,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,116,107,100,99,108],
[95,0,91,103,102,93,96,107],
[109,120,0,109,104,98,103,99],
[95,108,102,0,103,109,110,96],
[104,109,107,108,0,88,110,103],
[111,118,113,102,123,0,116,106],
[112,115,108,101,101,95,0,106],
[103,104,112,115,108,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,106,133,119,119,92],
[111,0,109,101,117,103,85,86],
[105,102,0,84,112,90,86,73],
[105,110,127,0,132,112,114,83],
[78,94,99,79,0,84,92,87],
[92,108,121,99,127,0,106,103],
[92,126,125,97,119,105,0,108],
[119,125,138,128,124,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,116,105,114,112,140],
[83,0,86,67,108,115,94,109],
[90,125,0,114,108,126,110,127],
[95,144,97,0,117,120,93,128],
[106,103,103,94,0,111,89,121],
[97,96,85,91,100,0,90,127],
[99,117,101,118,122,121,0,136],
[71,102,84,83,90,84,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,99,92,96,100,106],
[110,0,102,91,82,109,90,93],
[120,109,0,99,94,109,90,104],
[112,120,112,0,107,94,102,116],
[119,129,117,104,0,107,107,123],
[115,102,102,117,104,0,100,113],
[111,121,121,109,104,111,0,119],
[105,118,107,95,88,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,211,139,211,70,211,211],
[69,0,69,69,139,0,69,69],
[0,142,0,69,139,0,141,69],
[72,142,142,0,211,142,141,211],
[0,72,72,0,0,0,141,0],
[141,211,211,69,211,0,141,211],
[0,142,70,70,70,70,0,70],
[0,142,142,0,211,0,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,127,126,127,127,85,169],
[84,0,130,129,128,171,169,169],
[84,81,0,86,85,129,126,169],
[85,82,125,0,125,85,82,166],
[84,83,126,86,0,126,81,84],
[84,40,82,126,85,0,126,169],
[126,42,85,129,130,85,0,129],
[42,42,42,45,127,42,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,95,100,109,104,99],
[117,0,109,107,110,116,105,91],
[111,102,0,104,99,114,104,100],
[116,104,107,0,102,108,114,99],
[111,101,112,109,0,104,119,111],
[102,95,97,103,107,0,112,101],
[107,106,107,97,92,99,0,101],
[112,120,111,112,100,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,118,112,100,122,127],
[102,0,115,136,112,109,115,133],
[109,96,0,127,110,81,115,121],
[93,75,84,0,112,90,128,103],
[99,99,101,99,0,95,126,109],
[111,102,130,121,116,0,120,120],
[89,96,96,83,85,91,0,80],
[84,78,90,108,102,91,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,114,97,103,100,117],
[91,0,95,102,96,96,96,106],
[106,116,0,108,97,108,110,120],
[97,109,103,0,99,101,107,114],
[114,115,114,112,0,108,103,109],
[108,115,103,110,103,0,131,117],
[111,115,101,104,108,80,0,98],
[94,105,91,97,102,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,97,101,102,102,100],
[103,0,110,107,94,97,113,99],
[100,101,0,97,91,99,101,92],
[114,104,114,0,106,107,116,105],
[110,117,120,105,0,118,119,120],
[109,114,112,104,93,0,104,105],
[109,98,110,95,92,107,0,106],
[111,112,119,106,91,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,76,136,134,116,97,156],
[96,0,56,134,77,59,98,98],
[135,155,0,135,115,135,174,99],
[75,77,76,0,95,76,81,118],
[77,134,96,116,0,115,96,116],
[95,152,76,135,96,0,118,119],
[114,113,37,130,115,93,0,96],
[55,113,112,93,95,92,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,97,92,99,92,97],
[104,0,101,102,101,115,62,112],
[115,110,0,115,111,83,118,117],
[114,109,96,0,81,106,91,106],
[119,110,100,130,0,111,96,102],
[112,96,128,105,100,0,89,103],
[119,149,93,120,115,122,0,111],
[114,99,94,105,109,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,96,106,114,98,110,103],
[95,0,87,98,82,96,87,91],
[115,124,0,112,115,112,100,100],
[105,113,99,0,103,109,100,99],
[97,129,96,108,0,111,96,108],
[113,115,99,102,100,0,95,92],
[101,124,111,111,115,116,0,94],
[108,120,111,112,103,119,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,110,105,109,116,103],
[102,0,113,103,110,102,107,107],
[107,98,0,113,113,101,107,109],
[101,108,98,0,115,105,104,104],
[106,101,98,96,0,98,106,94],
[102,109,110,106,113,0,112,110],
[95,104,104,107,105,99,0,94],
[108,104,102,107,117,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,99,94,96,99,99],
[110,0,103,97,102,92,109,94],
[119,108,0,107,109,110,107,102],
[112,114,104,0,105,96,100,100],
[117,109,102,106,0,101,117,106],
[115,119,101,115,110,0,119,105],
[112,102,104,111,94,92,0,112],
[112,117,109,111,105,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,93,131,100,110,103],
[106,0,101,93,117,110,111,99],
[95,110,0,102,111,99,104,91],
[118,118,109,0,121,122,127,104],
[80,94,100,90,0,87,89,109],
[111,101,112,89,124,0,123,105],
[101,100,107,84,122,88,0,93],
[108,112,120,107,102,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,98,108,113,110,119],
[95,0,104,112,105,91,121,117],
[95,107,0,114,101,97,125,122],
[113,99,97,0,100,90,118,104],
[103,106,110,111,0,96,114,102],
[98,120,114,121,115,0,122,111],
[101,90,86,93,97,89,0,102],
[92,94,89,107,109,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,111,107,107,104,129],
[102,0,108,107,102,109,111,126],
[93,103,0,102,91,98,87,113],
[100,104,109,0,102,102,98,115],
[104,109,120,109,0,110,100,118],
[104,102,113,109,101,0,97,124],
[107,100,124,113,111,114,0,121],
[82,85,98,96,93,87,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,61,126,104,126,148,83],
[85,0,63,85,106,106,107,84],
[150,148,0,85,170,191,190,86],
[85,126,126,0,148,149,148,128],
[107,105,41,63,0,106,84,41],
[85,105,20,62,105,0,84,40],
[63,104,21,63,127,127,0,63],
[128,127,125,83,170,171,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,97,103,98,119,105],
[117,0,114,104,109,117,127,118],
[103,97,0,96,96,106,118,106],
[114,107,115,0,100,109,111,114],
[108,102,115,111,0,106,110,112],
[113,94,105,102,105,0,107,111],
[92,84,93,100,101,104,0,93],
[106,93,105,97,99,100,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,113,99,107,105,103],
[100,0,108,106,106,116,103,108],
[95,103,0,101,98,106,101,95],
[98,105,110,0,106,112,103,100],
[112,105,113,105,0,111,107,106],
[104,95,105,99,100,0,102,105],
[106,108,110,108,104,109,0,106],
[108,103,116,111,105,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,106,97,105,89,102],
[107,0,111,89,108,100,108,129],
[97,100,0,94,101,95,93,111],
[105,122,117,0,103,95,110,123],
[114,103,110,108,0,85,100,121],
[106,111,116,116,126,0,104,111],
[122,103,118,101,111,107,0,126],
[109,82,100,88,90,100,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,108,107,102,107,114],
[101,0,115,111,111,112,110,115],
[101,96,0,103,100,101,102,108],
[103,100,108,0,105,105,106,109],
[104,100,111,106,0,100,101,109],
[109,99,110,106,111,0,105,120],
[104,101,109,105,110,106,0,110],
[97,96,103,102,102,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,108,111,128,123,105],
[90,0,109,92,99,109,111,95],
[94,102,0,93,100,97,117,92],
[103,119,118,0,120,119,124,120],
[100,112,111,91,0,109,114,112],
[83,102,114,92,102,0,104,99],
[88,100,94,87,97,107,0,91],
[106,116,119,91,99,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,108,87,96,104,92],
[112,0,96,101,100,114,106,105],
[114,115,0,104,106,121,120,119],
[103,110,107,0,97,109,112,104],
[124,111,105,114,0,115,125,112],
[115,97,90,102,96,0,115,101],
[107,105,91,99,86,96,0,88],
[119,106,92,107,99,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,106,91,82,90,103],
[104,0,93,88,101,94,112,107],
[118,118,0,115,118,101,119,152],
[105,123,96,0,111,115,107,134],
[120,110,93,100,0,108,91,134],
[129,117,110,96,103,0,117,133],
[121,99,92,104,120,94,0,123],
[108,104,59,77,77,78,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,97,92,93,97,81,70],
[131,0,123,118,105,117,112,114],
[114,88,0,110,103,119,99,105],
[119,93,101,0,98,112,116,101],
[118,106,108,113,0,120,97,101],
[114,94,92,99,91,0,93,91],
[130,99,112,95,114,118,0,119],
[141,97,106,110,110,120,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,105,97,95,101,112],
[96,0,102,94,98,92,93,89],
[109,109,0,92,102,100,102,107],
[106,117,119,0,97,107,97,110],
[114,113,109,114,0,112,110,99],
[116,119,111,104,99,0,115,115],
[110,118,109,114,101,96,0,116],
[99,122,104,101,112,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,92,117,108,98,111],
[105,0,89,105,109,99,102,114],
[103,122,0,100,99,102,114,111],
[119,106,111,0,110,111,103,113],
[94,102,112,101,0,86,97,97],
[103,112,109,100,125,0,109,114],
[113,109,97,108,114,102,0,97],
[100,97,100,98,114,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,116,98,100,102,112],
[102,0,102,104,104,106,97,106],
[96,109,0,103,94,81,93,96],
[95,107,108,0,101,103,107,98],
[113,107,117,110,0,102,116,112],
[111,105,130,108,109,0,118,107],
[109,114,118,104,95,93,0,98],
[99,105,115,113,99,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,103,109,102,103],
[107,0,103,113,109,123,103,107],
[107,108,0,101,103,121,102,108],
[110,98,110,0,109,119,106,113],
[108,102,108,102,0,114,102,109],
[102,88,90,92,97,0,83,102],
[109,108,109,105,109,128,0,115],
[108,104,103,98,102,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,110,98,111,110,107],
[99,0,112,107,113,118,114,107],
[100,99,0,103,107,112,109,105],
[101,104,108,0,105,112,113,100],
[113,98,104,106,0,115,109,96],
[100,93,99,99,96,0,101,97],
[101,97,102,98,102,110,0,104],
[104,104,106,111,115,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,92,113,102,99,102],
[107,0,111,104,128,109,111,110],
[113,100,0,107,115,105,106,113],
[119,107,104,0,120,103,105,102],
[98,83,96,91,0,98,91,98],
[109,102,106,108,113,0,98,105],
[112,100,105,106,120,113,0,107],
[109,101,98,109,113,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,105,110,104,108,104],
[114,0,104,122,102,105,94,122],
[108,107,0,99,101,102,101,109],
[106,89,112,0,92,102,103,113],
[101,109,110,119,0,106,105,116],
[107,106,109,109,105,0,96,114],
[103,117,110,108,106,115,0,109],
[107,89,102,98,95,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,115,98,129,111,103],
[97,0,107,120,94,125,117,94],
[105,104,0,119,104,115,112,92],
[96,91,92,0,82,101,90,97],
[113,117,107,129,0,106,96,106],
[82,86,96,110,105,0,96,90],
[100,94,99,121,115,115,0,100],
[108,117,119,114,105,121,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,112,114,122,89,88],
[97,0,108,113,95,88,88,53],
[96,103,0,119,119,93,95,78],
[99,98,92,0,106,96,108,97],
[97,116,92,105,0,115,71,80],
[89,123,118,115,96,0,96,89],
[122,123,116,103,140,115,0,112],
[123,158,133,114,131,122,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,87,93,111,108,100,100],
[96,0,84,97,90,95,95,88],
[124,127,0,106,100,114,114,109],
[118,114,105,0,105,97,97,101],
[100,121,111,106,0,121,115,105],
[103,116,97,114,90,0,109,106],
[111,116,97,114,96,102,0,104],
[111,123,102,110,106,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,126,119,115,101,109],
[111,0,128,118,104,118,114,110],
[105,83,0,112,93,102,87,93],
[85,93,99,0,98,95,75,85],
[92,107,118,113,0,108,90,110],
[96,93,109,116,103,0,82,90],
[110,97,124,136,121,129,0,112],
[102,101,118,126,101,121,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,99,108,89,88,98],
[115,0,122,108,111,116,99,110],
[116,89,0,107,109,114,110,114],
[112,103,104,0,104,106,95,116],
[103,100,102,107,0,103,90,112],
[122,95,97,105,108,0,89,113],
[123,112,101,116,121,122,0,116],
[113,101,97,95,99,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,108,98,108,108,95],
[110,0,120,117,107,115,114,95],
[94,91,0,101,89,99,98,94],
[103,94,110,0,85,96,93,89],
[113,104,122,126,0,105,118,106],
[103,96,112,115,106,0,111,105],
[103,97,113,118,93,100,0,94],
[116,116,117,122,105,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,119,104,104,114,116],
[100,0,88,89,130,95,119,87],
[103,123,0,136,130,102,133,119],
[92,122,75,0,118,105,100,102],
[107,81,81,93,0,93,103,92],
[107,116,109,106,118,0,120,105],
[97,92,78,111,108,91,0,102],
[95,124,92,109,119,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,101,103,105,110,88],
[116,0,117,109,112,97,120,95],
[100,94,0,122,119,100,82,89],
[110,102,89,0,128,106,96,109],
[108,99,92,83,0,110,74,73],
[106,114,111,105,101,0,120,97],
[101,91,129,115,137,91,0,95],
[123,116,122,102,138,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,106,112,96,136,108],
[100,0,114,92,96,102,109,113],
[101,97,0,94,84,94,89,71],
[105,119,117,0,85,91,108,93],
[99,115,127,126,0,94,115,114],
[115,109,117,120,117,0,103,106],
[75,102,122,103,96,108,0,81],
[103,98,140,118,97,105,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,111,105,105,112,87],
[118,0,120,117,116,101,111,112],
[105,91,0,95,95,110,100,105],
[100,94,116,0,112,90,113,108],
[106,95,116,99,0,105,114,113],
[106,110,101,121,106,0,118,103],
[99,100,111,98,97,93,0,93],
[124,99,106,103,98,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,98,103,114,92,113,112],
[93,0,113,113,105,107,108,104],
[113,98,0,109,127,107,113,104],
[108,98,102,0,104,107,110,108],
[97,106,84,107,0,94,110,104],
[119,104,104,104,117,0,111,106],
[98,103,98,101,101,100,0,110],
[99,107,107,103,107,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,118,102,100,96,104],
[109,0,91,110,88,95,91,98],
[118,120,0,117,96,112,112,114],
[93,101,94,0,82,90,107,102],
[109,123,115,129,0,100,126,110],
[111,116,99,121,111,0,111,110],
[115,120,99,104,85,100,0,112],
[107,113,97,109,101,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,108,93,106,110,83],
[116,0,119,104,109,100,117,105],
[102,92,0,100,102,97,114,95],
[103,107,111,0,96,92,106,85],
[118,102,109,115,0,101,111,104],
[105,111,114,119,110,0,124,106],
[101,94,97,105,100,87,0,91],
[128,106,116,126,107,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,105,100,103,108,116],
[116,0,102,114,117,103,113,115],
[112,109,0,100,103,106,106,119],
[106,97,111,0,107,97,105,113],
[111,94,108,104,0,97,92,98],
[108,108,105,114,114,0,99,124],
[103,98,105,106,119,112,0,108],
[95,96,92,98,113,87,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,89,134,112,94,99],
[112,0,107,115,134,101,91,99],
[94,104,0,93,121,127,96,83],
[122,96,118,0,131,106,97,108],
[77,77,90,80,0,101,92,79],
[99,110,84,105,110,0,99,80],
[117,120,115,114,119,112,0,99],
[112,112,128,103,132,131,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,106,101,120,99,104],
[93,0,113,102,96,113,81,115],
[102,98,0,119,119,137,110,108],
[105,109,92,0,105,129,115,103],
[110,115,92,106,0,105,101,98],
[91,98,74,82,106,0,86,98],
[112,130,101,96,110,125,0,112],
[107,96,103,108,113,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,116,100,96,100,119],
[91,0,99,90,89,94,89,79],
[100,112,0,105,74,96,92,105],
[95,121,106,0,78,98,116,96],
[111,122,137,133,0,116,110,93],
[115,117,115,113,95,0,108,95],
[111,122,119,95,101,103,0,88],
[92,132,106,115,118,116,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,120,103,116,115,122],
[102,0,119,117,134,100,119,116],
[99,92,0,96,97,117,112,97],
[91,94,115,0,119,117,101,112],
[108,77,114,92,0,103,117,89],
[95,111,94,94,108,0,109,92],
[96,92,99,110,94,102,0,90],
[89,95,114,99,122,119,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,125,100,121,93,93,100],
[84,0,119,92,113,75,111,83],
[86,92,0,85,103,94,121,82],
[111,119,126,0,103,76,118,109],
[90,98,108,108,0,97,109,98],
[118,136,117,135,114,0,149,100],
[118,100,90,93,102,62,0,88],
[111,128,129,102,113,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,127,87,112,99,112,113],
[99,0,99,85,99,141,98,112],
[84,112,0,114,140,84,124,113],
[124,126,97,0,124,97,96,126],
[99,112,71,87,0,84,111,113],
[112,70,127,114,127,0,111,112],
[99,113,87,115,100,100,0,113],
[98,99,98,85,98,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,100,111,98,101,106],
[111,0,110,110,117,97,103,101],
[99,101,0,98,111,91,94,96],
[111,101,113,0,110,101,102,96],
[100,94,100,101,0,92,96,94],
[113,114,120,110,119,0,111,104],
[110,108,117,109,115,100,0,107],
[105,110,115,115,117,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,109,117,99,92,97,103],
[126,0,112,119,98,109,122,120],
[102,99,0,107,97,95,110,113],
[94,92,104,0,89,90,104,99],
[112,113,114,122,0,98,112,114],
[119,102,116,121,113,0,119,101],
[114,89,101,107,99,92,0,104],
[108,91,98,112,97,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,83,72,86,118,94,77],
[118,0,85,90,79,126,106,88],
[128,126,0,124,127,152,157,95],
[139,121,87,0,96,142,99,99],
[125,132,84,115,0,149,125,104],
[93,85,59,69,62,0,70,60],
[117,105,54,112,86,141,0,106],
[134,123,116,112,107,151,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,106,98,108,119,112],
[102,0,86,93,85,92,100,109],
[109,125,0,104,112,117,99,117],
[105,118,107,0,104,101,99,134],
[113,126,99,107,0,111,121,125],
[103,119,94,110,100,0,110,106],
[92,111,112,112,90,101,0,121],
[99,102,94,77,86,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,111,91,95,104,85],
[113,0,97,107,97,100,104,103],
[113,114,0,115,113,109,107,102],
[100,104,96,0,95,97,102,104],
[120,114,98,116,0,110,102,108],
[116,111,102,114,101,0,110,103],
[107,107,104,109,109,101,0,116],
[126,108,109,107,103,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,97,78,77,95,93],
[122,0,107,114,109,92,120,102],
[115,104,0,113,103,90,111,97],
[114,97,98,0,91,93,108,106],
[133,102,108,120,0,108,120,117],
[134,119,121,118,103,0,131,111],
[116,91,100,103,91,80,0,83],
[118,109,114,105,94,100,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,95,97,106,112,107],
[118,0,114,122,116,105,119,117],
[113,97,0,90,107,101,103,95],
[116,89,121,0,109,104,106,118],
[114,95,104,102,0,116,106,115],
[105,106,110,107,95,0,117,107],
[99,92,108,105,105,94,0,105],
[104,94,116,93,96,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,80,133,27,105,53,80],
[79,0,53,106,54,105,80,132],
[131,158,0,159,53,106,54,79],
[78,105,52,0,52,79,79,52],
[184,157,158,159,0,159,106,78],
[106,106,105,132,52,0,53,53],
[158,131,157,132,105,158,0,78],
[131,79,132,159,133,158,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,99,97,104,108,114],
[110,0,115,103,108,104,108,109],
[99,96,0,95,94,101,96,104],
[112,108,116,0,112,109,100,108],
[114,103,117,99,0,108,107,107],
[107,107,110,102,103,0,101,107],
[103,103,115,111,104,110,0,105],
[97,102,107,103,104,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,117,98,115,102,104],
[100,0,96,119,100,108,109,116],
[101,115,0,108,101,108,107,102],
[94,92,103,0,88,95,99,91],
[113,111,110,123,0,111,103,103],
[96,103,103,116,100,0,97,111],
[109,102,104,112,108,114,0,106],
[107,95,109,120,108,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,99,93,74,105,97],
[118,0,122,117,97,111,126,105],
[95,89,0,116,109,72,117,84],
[112,94,95,0,112,84,116,94],
[118,114,102,99,0,93,109,106],
[137,100,139,127,118,0,133,109],
[106,85,94,95,102,78,0,101],
[114,106,127,117,105,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,122,106,114,104,108,116],
[78,0,111,98,107,87,93,96],
[89,100,0,96,88,94,86,102],
[105,113,115,0,107,107,104,110],
[97,104,123,104,0,110,108,115],
[107,124,117,104,101,0,115,119],
[103,118,125,107,103,96,0,113],
[95,115,109,101,96,92,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,76,157,78,79,130,104],
[81,0,27,78,27,51,80,54],
[135,184,0,186,105,132,130,105],
[54,133,25,0,0,26,79,27],
[133,184,106,211,0,132,105,157],
[132,160,79,185,79,0,106,105],
[81,131,81,132,106,105,0,106],
[107,157,106,184,54,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,108,121,117,124,117],
[109,0,97,84,100,105,117,93],
[96,114,0,100,103,108,109,97],
[103,127,111,0,110,128,136,112],
[90,111,108,101,0,106,124,103],
[94,106,103,83,105,0,111,98],
[87,94,102,75,87,100,0,96],
[94,118,114,99,108,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,108,106,106,98,110],
[108,0,108,119,119,108,96,118],
[115,103,0,96,102,112,90,96],
[103,92,115,0,107,101,92,103],
[105,92,109,104,0,107,109,113],
[105,103,99,110,104,0,87,100],
[113,115,121,119,102,124,0,118],
[101,93,115,108,98,111,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,93,109,101,102,108],
[107,0,100,88,86,96,100,99],
[99,111,0,92,94,97,90,106],
[118,123,119,0,98,104,116,114],
[102,125,117,113,0,114,112,129],
[110,115,114,107,97,0,99,122],
[109,111,121,95,99,112,0,111],
[103,112,105,97,82,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,105,107,109,109,108],
[98,0,115,108,108,100,113,100],
[94,96,0,92,103,94,96,100],
[106,103,119,0,97,93,123,107],
[104,103,108,114,0,108,109,107],
[102,111,117,118,103,0,129,109],
[102,98,115,88,102,82,0,100],
[103,111,111,104,104,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,102,88,102,110,109],
[99,0,109,100,89,97,91,118],
[118,102,0,102,97,87,107,111],
[109,111,109,0,101,95,93,108],
[123,122,114,110,0,101,102,121],
[109,114,124,116,110,0,105,121],
[101,120,104,118,109,106,0,125],
[102,93,100,103,90,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,111,113,100,102,113],
[110,0,110,107,110,108,103,110],
[101,101,0,94,90,114,109,105],
[100,104,117,0,101,109,90,108],
[98,101,121,110,0,113,113,111],
[111,103,97,102,98,0,91,114],
[109,108,102,121,98,120,0,111],
[98,101,106,103,100,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,98,90,98,103,83],
[113,0,95,96,91,102,101,88],
[116,116,0,109,105,124,115,101],
[113,115,102,0,104,104,114,107],
[121,120,106,107,0,108,102,94],
[113,109,87,107,103,0,93,99],
[108,110,96,97,109,118,0,101],
[128,123,110,104,117,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,105,121,115,106,115],
[105,0,113,98,107,109,98,104],
[102,98,0,111,99,104,102,104],
[106,113,100,0,114,104,95,108],
[90,104,112,97,0,102,104,98],
[96,102,107,107,109,0,93,110],
[105,113,109,116,107,118,0,105],
[96,107,107,103,113,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,126,122,100,113,114,115],
[98,0,116,109,95,106,103,104],
[85,95,0,97,108,102,94,103],
[89,102,114,0,92,108,91,114],
[111,116,103,119,0,115,100,115],
[98,105,109,103,96,0,92,99],
[97,108,117,120,111,119,0,113],
[96,107,108,97,96,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,109,116,104,97,93],
[104,0,87,96,105,106,94,130],
[120,124,0,134,137,121,97,103],
[102,115,77,0,131,82,105,103],
[95,106,74,80,0,91,83,95],
[107,105,90,129,120,0,98,87],
[114,117,114,106,128,113,0,94],
[118,81,108,108,116,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,119,118,108,105,97],
[94,0,88,102,114,94,87,88],
[92,123,0,104,106,110,101,106],
[92,109,107,0,106,90,97,103],
[93,97,105,105,0,76,91,94],
[103,117,101,121,135,0,108,100],
[106,124,110,114,120,103,0,100],
[114,123,105,108,117,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,108,123,100,122,109],
[95,0,105,106,94,91,102,99],
[109,106,0,118,110,105,129,109],
[103,105,93,0,100,110,120,106],
[88,117,101,111,0,105,125,111],
[111,120,106,101,106,0,112,96],
[89,109,82,91,86,99,0,111],
[102,112,102,105,100,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,108,104,104,106,102],
[104,0,103,109,97,101,98,101],
[98,108,0,109,97,106,95,96],
[103,102,102,0,102,99,102,96],
[107,114,114,109,0,101,106,103],
[107,110,105,112,110,0,99,108],
[105,113,116,109,105,112,0,101],
[109,110,115,115,108,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,112,121,110,106,97],
[102,0,121,113,100,101,93,96],
[96,90,0,100,108,83,92,85],
[99,98,111,0,102,94,94,103],
[90,111,103,109,0,84,74,93],
[101,110,128,117,127,0,107,111],
[105,118,119,117,137,104,0,111],
[114,115,126,108,118,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,83,129,115,82,130,112],
[99,0,84,79,81,79,112,61],
[128,127,0,143,94,147,110,110],
[82,132,68,0,83,96,129,113],
[96,130,117,128,0,113,112,115],
[129,132,64,115,98,0,130,79],
[81,99,101,82,99,81,0,96],
[99,150,101,98,96,132,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,101,100,113,104,107],
[113,0,122,104,110,114,107,105],
[109,89,0,104,100,115,102,116],
[110,107,107,0,106,118,105,123],
[111,101,111,105,0,120,120,109],
[98,97,96,93,91,0,99,99],
[107,104,109,106,91,112,0,109],
[104,106,95,88,102,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,133,92,132,112,122,109],
[93,0,89,94,117,101,93,83],
[78,122,0,99,122,86,91,60],
[119,117,112,0,157,108,94,97],
[79,94,89,54,0,57,67,48],
[99,110,125,103,154,0,105,104],
[89,118,120,117,144,106,0,81],
[102,128,151,114,163,107,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,115,118,97,95,114],
[96,0,121,120,106,111,106,112],
[92,90,0,99,85,87,86,94],
[96,91,112,0,98,106,103,100],
[93,105,126,113,0,105,102,102],
[114,100,124,105,106,0,106,118],
[116,105,125,108,109,105,0,115],
[97,99,117,111,109,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,115,116,99,85,82],
[96,0,113,111,98,90,85,107],
[107,98,0,85,105,110,128,95],
[96,100,126,0,111,102,90,94],
[95,113,106,100,0,91,78,93],
[112,121,101,109,120,0,118,93],
[126,126,83,121,133,93,0,119],
[129,104,116,117,118,118,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,89,102,103,105,97],
[118,0,109,107,108,110,119,98],
[110,102,0,108,105,106,116,103],
[122,104,103,0,105,114,115,106],
[109,103,106,106,0,124,115,105],
[108,101,105,97,87,0,104,96],
[106,92,95,96,96,107,0,100],
[114,113,108,105,106,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,115,103,123,112,113],
[106,0,116,104,103,120,105,99],
[99,95,0,101,97,108,98,94],
[96,107,110,0,110,117,99,109],
[108,108,114,101,0,107,114,109],
[88,91,103,94,104,0,90,89],
[99,106,113,112,97,121,0,101],
[98,112,117,102,102,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,82,107,104,101,101],
[120,0,113,106,100,121,114,121],
[119,98,0,99,109,102,111,118],
[129,105,112,0,121,125,117,117],
[104,111,102,90,0,99,99,112],
[107,90,109,86,112,0,98,103],
[110,97,100,94,112,113,0,121],
[110,90,93,94,99,108,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,109,103,108,107,108],
[108,0,96,103,115,111,107,130],
[109,115,0,107,108,100,107,127],
[102,108,104,0,112,112,104,112],
[108,96,103,99,0,104,101,114],
[103,100,111,99,107,0,109,105],
[104,104,104,107,110,102,0,111],
[103,81,84,99,97,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,111,117,103,101,109,113],
[88,0,97,99,92,103,108,99],
[100,114,0,108,99,107,103,94],
[94,112,103,0,87,97,105,104],
[108,119,112,124,0,106,101,103],
[110,108,104,114,105,0,113,105],
[102,103,108,106,110,98,0,110],
[98,112,117,107,108,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,115,111,111,99,117],
[108,0,109,119,110,104,96,121],
[104,102,0,118,123,100,116,109],
[96,92,93,0,96,87,90,92],
[100,101,88,115,0,96,91,117],
[100,107,111,124,115,0,100,118],
[112,115,95,121,120,111,0,104],
[94,90,102,119,94,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,126,92,91,102,106,103],
[107,0,113,107,89,86,100,105],
[85,98,0,104,70,84,99,82],
[119,104,107,0,95,113,99,101],
[120,122,141,116,0,118,101,122],
[109,125,127,98,93,0,116,124],
[105,111,112,112,110,95,0,113],
[108,106,129,110,89,87,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,104,107,122,117,122],
[109,0,101,104,112,132,121,114],
[101,110,0,104,104,121,115,109],
[107,107,107,0,91,116,114,113],
[104,99,107,120,0,128,113,113],
[89,79,90,95,83,0,103,95],
[94,90,96,97,98,108,0,103],
[89,97,102,98,98,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,95,107,110,109,99],
[107,0,125,103,109,110,111,108],
[93,86,0,88,94,94,102,93],
[116,108,123,0,112,125,112,101],
[104,102,117,99,0,109,114,112],
[101,101,117,86,102,0,108,96],
[102,100,109,99,97,103,0,104],
[112,103,118,110,99,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,106,96,129,97,74],
[113,0,94,95,107,124,115,71],
[106,117,0,114,85,126,151,93],
[105,116,97,0,96,137,126,94],
[115,104,126,115,0,125,129,126],
[82,87,85,74,86,0,96,84],
[114,96,60,85,82,115,0,82],
[137,140,118,117,85,127,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,123,119,115,110,105],
[115,0,110,124,131,115,103,106],
[106,101,0,127,128,110,105,107],
[88,87,84,0,112,74,96,89],
[92,80,83,99,0,61,80,84],
[96,96,101,137,150,0,99,100],
[101,108,106,115,131,112,0,103],
[106,105,104,122,127,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,150,94,135,145,94,110],
[82,0,107,92,92,108,85,81],
[61,104,0,61,95,112,78,101],
[117,119,150,0,127,128,93,125],
[76,119,116,84,0,127,110,109],
[66,103,99,83,84,0,101,81],
[117,126,133,118,101,110,0,108],
[101,130,110,86,102,130,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,104,92,92,81,85],
[110,0,94,109,94,97,100,103],
[106,117,0,97,92,102,91,92],
[107,102,114,0,109,102,103,96],
[119,117,119,102,0,106,100,110],
[119,114,109,109,105,0,108,98],
[130,111,120,108,111,103,0,98],
[126,108,119,115,101,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,98,115,93,100,97],
[110,0,128,101,116,107,96,109],
[98,83,0,96,94,98,91,110],
[113,110,115,0,118,111,98,111],
[96,95,117,93,0,98,97,103],
[118,104,113,100,113,0,110,115],
[111,115,120,113,114,101,0,111],
[114,102,101,100,108,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,128,119,105,94,99],
[107,0,109,125,104,94,107,117],
[105,102,0,120,122,104,112,122],
[83,86,91,0,97,96,92,107],
[92,107,89,114,0,91,101,97],
[106,117,107,115,120,0,98,116],
[117,104,99,119,110,113,0,125],
[112,94,89,104,114,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,99,103,92,94,104,95],
[124,0,106,115,122,113,103,113],
[112,105,0,108,118,115,126,127],
[108,96,103,0,103,116,115,103],
[119,89,93,108,0,95,100,98],
[117,98,96,95,116,0,102,104],
[107,108,85,96,111,109,0,106],
[116,98,84,108,113,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,103,134,113,92,142],
[102,0,98,92,144,112,92,123],
[104,113,0,73,123,120,133,152],
[108,119,138,0,154,97,118,141],
[77,67,88,57,0,86,98,110],
[98,99,91,114,125,0,112,131],
[119,119,78,93,113,99,0,149],
[69,88,59,70,101,80,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,94,101,100,86,95],
[120,0,109,103,105,106,103,107],
[112,102,0,112,98,117,100,100],
[117,108,99,0,107,119,107,111],
[110,106,113,104,0,118,91,113],
[111,105,94,92,93,0,86,102],
[125,108,111,104,120,125,0,113],
[116,104,111,100,98,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,101,105,112,104,123],
[116,0,150,109,123,98,108,129],
[100,61,0,98,98,71,86,107],
[110,102,113,0,112,90,96,108],
[106,88,113,99,0,107,101,121],
[99,113,140,121,104,0,105,149],
[107,103,125,115,110,106,0,159],
[88,82,104,103,90,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,103,100,105,97,95],
[116,0,96,113,102,107,104,96],
[112,115,0,120,106,113,118,105],
[108,98,91,0,100,94,103,99],
[111,109,105,111,0,100,112,108],
[106,104,98,117,111,0,111,111],
[114,107,93,108,99,100,0,95],
[116,115,106,112,103,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,108,99,113,103,101],
[107,0,106,103,105,117,104,96],
[107,105,0,108,111,122,110,111],
[103,108,103,0,99,125,108,105],
[112,106,100,112,0,115,105,105],
[98,94,89,86,96,0,92,91],
[108,107,101,103,106,119,0,103],
[110,115,100,106,106,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,84,99,108,107,104,100],
[100,0,85,85,98,93,82,103],
[127,126,0,126,114,140,97,110],
[112,126,85,0,92,120,104,108],
[103,113,97,119,0,128,83,122],
[104,118,71,91,83,0,106,101],
[107,129,114,107,128,105,0,103],
[111,108,101,103,89,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,100,100,97,100,100],
[113,0,106,104,98,111,102,107],
[111,105,0,94,102,94,104,91],
[111,107,117,0,98,113,103,97],
[111,113,109,113,0,104,107,97],
[114,100,117,98,107,0,104,104],
[111,109,107,108,104,107,0,100],
[111,104,120,114,114,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,84,83,64,124,86],
[106,0,125,126,105,64,83,148],
[108,86,0,106,107,109,107,129],
[127,85,105,0,106,87,104,127],
[128,106,104,105,0,65,129,64],
[147,147,102,124,146,0,104,125],
[87,128,104,107,82,107,0,106],
[125,63,82,84,147,86,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,79,127,73,87,80],
[140,0,113,99,147,113,107,102],
[139,98,0,119,129,146,105,125],
[132,112,92,0,128,124,101,81],
[84,64,82,83,0,83,71,93],
[138,98,65,87,128,0,116,90],
[124,104,106,110,140,95,0,103],
[131,109,86,130,118,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,114,108,121,106,107],
[105,0,110,108,106,114,102,111],
[114,101,0,122,108,124,112,115],
[97,103,89,0,92,106,91,117],
[103,105,103,119,0,118,98,113],
[90,97,87,105,93,0,101,99],
[105,109,99,120,113,110,0,116],
[104,100,96,94,98,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,97,103,110,118,99,116],
[93,0,83,95,83,116,78,75],
[114,128,0,103,120,114,112,97],
[108,116,108,0,105,126,106,107],
[101,128,91,106,0,132,97,106],
[93,95,97,85,79,0,107,104],
[112,133,99,105,114,104,0,102],
[95,136,114,104,105,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,116,112,114,116,111],
[109,0,105,115,104,111,107,109],
[113,106,0,118,113,121,119,105],
[95,96,93,0,98,105,100,99],
[99,107,98,113,0,104,110,115],
[97,100,90,106,107,0,102,109],
[95,104,92,111,101,109,0,106],
[100,102,106,112,96,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,101,121,84,124,121,91],
[90,0,102,89,93,120,105,105],
[110,109,0,98,95,116,130,106],
[90,122,113,0,116,103,118,90],
[127,118,116,95,0,123,122,119],
[87,91,95,108,88,0,99,92],
[90,106,81,93,89,112,0,98],
[120,106,105,121,92,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,97,106,98,108,100],
[115,0,109,117,117,105,108,112],
[116,102,0,112,105,105,116,117],
[114,94,99,0,101,91,102,113],
[105,94,106,110,0,107,108,107],
[113,106,106,120,104,0,103,116],
[103,103,95,109,103,108,0,110],
[111,99,94,98,104,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,114,103,98,109,99],
[99,0,104,119,108,112,92,102],
[96,107,0,94,77,93,94,93],
[97,92,117,0,89,94,112,85],
[108,103,134,122,0,117,112,112],
[113,99,118,117,94,0,113,109],
[102,119,117,99,99,98,0,94],
[112,109,118,126,99,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,113,111,100,100,112],
[101,0,100,101,108,101,108,102],
[104,111,0,102,107,110,110,111],
[98,110,109,0,109,105,110,108],
[100,103,104,102,0,99,107,103],
[111,110,101,106,112,0,111,105],
[111,103,101,101,104,100,0,113],
[99,109,100,103,108,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,115,94,96,119,89],
[115,0,111,110,112,102,115,120],
[103,100,0,92,90,103,108,110],
[96,101,119,0,96,112,119,103],
[117,99,121,115,0,107,117,122],
[115,109,108,99,104,0,99,115],
[92,96,103,92,94,112,0,94],
[122,91,101,108,89,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,112,116,108,95,96],
[102,0,100,120,97,112,94,111],
[109,111,0,107,110,105,106,104],
[99,91,104,0,107,100,98,84],
[95,114,101,104,0,111,102,92],
[103,99,106,111,100,0,106,109],
[116,117,105,113,109,105,0,86],
[115,100,107,127,119,102,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,104,103,108,88,102],
[109,0,107,122,113,102,98,104],
[112,104,0,109,107,97,100,107],
[107,89,102,0,99,93,92,105],
[108,98,104,112,0,103,102,104],
[103,109,114,118,108,0,112,99],
[123,113,111,119,109,99,0,107],
[109,107,104,106,107,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,95,94,123,111,101],
[115,0,105,89,118,111,101,108],
[114,106,0,101,109,117,109,110],
[116,122,110,0,98,118,107,102],
[117,93,102,113,0,132,115,101],
[88,100,94,93,79,0,88,82],
[100,110,102,104,96,123,0,88],
[110,103,101,109,110,129,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,100,109,86,106,110],
[97,0,98,102,103,83,107,98],
[106,113,0,113,122,82,109,103],
[111,109,98,0,110,78,103,103],
[102,108,89,101,0,77,100,99],
[125,128,129,133,134,0,125,105],
[105,104,102,108,111,86,0,104],
[101,113,108,108,112,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,96,114,111,99,108],
[104,0,94,81,99,90,97,102],
[97,117,0,110,102,100,102,104],
[115,130,101,0,112,116,102,116],
[97,112,109,99,0,101,107,102],
[100,121,111,95,110,0,116,109],
[112,114,109,109,104,95,0,107],
[103,109,107,95,109,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,114,103,119,99,115],
[95,0,89,105,89,108,84,94],
[111,122,0,122,112,121,119,101],
[97,106,89,0,89,109,102,108],
[108,122,99,122,0,113,102,116],
[92,103,90,102,98,0,92,96],
[112,127,92,109,109,119,0,109],
[96,117,110,103,95,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,93,103,105,97,111],
[113,0,103,95,108,99,89,89],
[110,108,0,106,95,101,110,99],
[118,116,105,0,109,103,108,107],
[108,103,116,102,0,108,103,98],
[106,112,110,108,103,0,111,120],
[114,122,101,103,108,100,0,114],
[100,122,112,104,113,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,114,105,98,112,112],
[97,0,97,115,112,97,107,105],
[110,114,0,107,105,102,111,98],
[97,96,104,0,95,91,108,104],
[106,99,106,116,0,103,113,115],
[113,114,109,120,108,0,121,100],
[99,104,100,103,98,90,0,103],
[99,106,113,107,96,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,104,105,108,97,93],
[107,0,100,114,97,103,98,110],
[112,111,0,119,118,112,103,106],
[107,97,92,0,103,109,108,102],
[106,114,93,108,0,114,104,107],
[103,108,99,102,97,0,88,101],
[114,113,108,103,107,123,0,100],
[118,101,105,109,104,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,114,113,102,105,112],
[116,0,107,123,100,118,111,122],
[120,104,0,121,105,103,117,126],
[97,88,90,0,117,103,102,95],
[98,111,106,94,0,106,97,114],
[109,93,108,108,105,0,109,124],
[106,100,94,109,114,102,0,100],
[99,89,85,116,97,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,124,105,106,110,108,112],
[103,0,109,101,101,101,106,106],
[87,102,0,95,94,99,102,94],
[106,110,116,0,124,111,108,100],
[105,110,117,87,0,108,103,95],
[101,110,112,100,103,0,104,104],
[103,105,109,103,108,107,0,110],
[99,105,117,111,116,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,130,133,119,124,100,108],
[103,0,129,104,94,110,119,103],
[81,82,0,98,106,113,98,87],
[78,107,113,0,105,88,102,84],
[92,117,105,106,0,102,96,88],
[87,101,98,123,109,0,103,101],
[111,92,113,109,115,108,0,101],
[103,108,124,127,123,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,113,126,113,103,125,125],
[86,0,113,86,110,102,88,115],
[98,98,0,110,110,87,84,98],
[85,125,101,0,122,103,77,101],
[98,101,101,89,0,115,87,113],
[108,109,124,108,96,0,96,109],
[86,123,127,134,124,115,0,109],
[86,96,113,110,98,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,107,112,109,102,119],
[90,0,123,101,118,101,101,109],
[84,88,0,84,96,91,88,97],
[104,110,127,0,105,110,114,120],
[99,93,115,106,0,94,101,109],
[102,110,120,101,117,0,103,120],
[109,110,123,97,110,108,0,121],
[92,102,114,91,102,91,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,113,113,126,110,112],
[113,0,125,111,112,103,115,118],
[94,86,0,96,108,113,92,94],
[98,100,115,0,122,114,124,97],
[98,99,103,89,0,103,97,96],
[85,108,98,97,108,0,103,98],
[101,96,119,87,114,108,0,97],
[99,93,117,114,115,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,104,107,127,111,110],
[108,0,126,95,90,100,138,114],
[96,85,0,81,94,101,116,96],
[107,116,130,0,103,95,110,123],
[104,121,117,108,0,111,108,122],
[84,111,110,116,100,0,111,114],
[100,73,95,101,103,100,0,108],
[101,97,115,88,89,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,119,119,117,114,105],
[94,0,105,104,121,110,109,109],
[105,106,0,111,116,121,108,108],
[92,107,100,0,102,110,107,99],
[92,90,95,109,0,107,89,105],
[94,101,90,101,104,0,91,101],
[97,102,103,104,122,120,0,113],
[106,102,103,112,106,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,94,92,113,110,109],
[104,0,108,103,106,107,109,109],
[105,103,0,102,106,96,108,93],
[117,108,109,0,106,107,102,102],
[119,105,105,105,0,106,100,105],
[98,104,115,104,105,0,100,98],
[101,102,103,109,111,111,0,100],
[102,102,118,109,106,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,105,113,106,98,109],
[91,0,103,103,94,97,97,106],
[98,108,0,107,116,105,97,113],
[106,108,104,0,111,91,102,104],
[98,117,95,100,0,90,104,98],
[105,114,106,120,121,0,113,125],
[113,114,114,109,107,98,0,100],
[102,105,98,107,113,86,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,104,105,100,100,114],
[87,0,95,101,89,91,92,102],
[107,116,0,104,98,112,98,115],
[107,110,107,0,107,112,104,113],
[106,122,113,104,0,120,106,120],
[111,120,99,99,91,0,107,101],
[111,119,113,107,105,104,0,115],
[97,109,96,98,91,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,119,74,108,78,100,83],
[127,0,125,102,95,74,121,113],
[92,86,0,111,108,68,87,92],
[137,109,100,0,106,114,128,103],
[103,116,103,105,0,64,97,101],
[133,137,143,97,147,0,112,138],
[111,90,124,83,114,99,0,112],
[128,98,119,108,110,73,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,104,102,107,99,111],
[92,0,96,92,89,89,89,98],
[104,115,0,111,108,124,108,117],
[107,119,100,0,112,121,115,106],
[109,122,103,99,0,101,110,108],
[104,122,87,90,110,0,111,105],
[112,122,103,96,101,100,0,107],
[100,113,94,105,103,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,102,106,119,107,96],
[99,0,105,103,105,100,102,98],
[109,106,0,108,109,104,101,94],
[109,108,103,0,100,102,106,90],
[105,106,102,111,0,107,101,94],
[92,111,107,109,104,0,106,109],
[104,109,110,105,110,105,0,106],
[115,113,117,121,117,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,126,143,116,123,96],
[115,0,129,123,114,111,103,129],
[101,82,0,91,107,112,116,114],
[85,88,120,0,128,92,131,116],
[68,97,104,83,0,71,109,111],
[95,100,99,119,140,0,121,109],
[88,108,95,80,102,90,0,103],
[115,82,97,95,100,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,113,104,105,99,112],
[97,0,107,101,107,102,100,107],
[96,104,0,101,101,107,98,97],
[98,110,110,0,111,100,101,105],
[107,104,110,100,0,100,108,99],
[106,109,104,111,111,0,116,108],
[112,111,113,110,103,95,0,100],
[99,104,114,106,112,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,114,107,104,105,112],
[104,0,100,120,101,108,112,102],
[104,111,0,111,106,114,112,112],
[97,91,100,0,102,104,98,110],
[104,110,105,109,0,101,107,108],
[107,103,97,107,110,0,103,108],
[106,99,99,113,104,108,0,105],
[99,109,99,101,103,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,103,107,88,99,106],
[103,0,116,107,108,92,96,108],
[104,95,0,106,105,96,102,99],
[108,104,105,0,103,110,101,103],
[104,103,106,108,0,99,107,117],
[123,119,115,101,112,0,106,117],
[112,115,109,110,104,105,0,108],
[105,103,112,108,94,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,114,99,107,107,121],
[108,0,94,99,95,102,98,111],
[106,117,0,113,114,97,89,118],
[97,112,98,0,104,99,95,104],
[112,116,97,107,0,99,90,122],
[104,109,114,112,112,0,95,115],
[104,113,122,116,121,116,0,130],
[90,100,93,107,89,96,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,138,91,106,136,167,136],
[30,0,64,91,44,59,61,93],
[73,147,0,103,58,59,115,105],
[120,120,108,0,90,106,120,105],
[105,167,153,121,0,107,181,136],
[75,152,152,105,104,0,166,150],
[44,150,96,91,30,45,0,93],
[75,118,106,106,75,61,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,102,105,107,110,101],
[104,0,112,96,106,94,100,107],
[98,99,0,92,93,94,95,90],
[109,115,119,0,115,104,102,115],
[106,105,118,96,0,93,123,112],
[104,117,117,107,118,0,111,111],
[101,111,116,109,88,100,0,95],
[110,104,121,96,99,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,119,95,114,93,114,112],
[115,0,116,105,107,101,108,108],
[92,95,0,93,95,102,86,97],
[116,106,118,0,115,111,108,101],
[97,104,116,96,0,100,96,96],
[118,110,109,100,111,0,84,108],
[97,103,125,103,115,127,0,109],
[99,103,114,110,115,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,115,104,99,105,104],
[101,0,125,116,116,107,101,111],
[97,86,0,105,100,95,85,98],
[96,95,106,0,82,87,84,109],
[107,95,111,129,0,104,112,116],
[112,104,116,124,107,0,110,124],
[106,110,126,127,99,101,0,123],
[107,100,113,102,95,87,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,100,113,129,128,113],
[96,0,128,100,65,128,145,95],
[95,83,0,50,64,79,128,81],
[111,111,161,0,80,112,145,110],
[98,146,147,131,0,97,130,80],
[82,83,132,99,114,0,114,99],
[83,66,83,66,81,97,0,66],
[98,116,130,101,131,112,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,125,110,96,111,103,117],
[89,0,124,97,98,122,99,118],
[86,87,0,90,90,107,99,104],
[101,114,121,0,108,116,105,117],
[115,113,121,103,0,119,112,114],
[100,89,104,95,92,0,96,85],
[108,112,112,106,99,115,0,120],
[94,93,107,94,97,126,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,108,99,85,98,90],
[102,0,91,101,101,107,120,85],
[115,120,0,107,108,102,112,108],
[103,110,104,0,106,105,122,101],
[112,110,103,105,0,100,134,79],
[126,104,109,106,111,0,109,96],
[113,91,99,89,77,102,0,82],
[121,126,103,110,132,115,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,108,102,104,109,115,107],
[88,0,100,96,106,103,107,95],
[103,111,0,94,91,102,90,95],
[109,115,117,0,101,111,106,108],
[107,105,120,110,0,116,105,109],
[102,108,109,100,95,0,96,97],
[96,104,121,105,106,115,0,98],
[104,116,116,103,102,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,106,104,100,111,112],
[100,0,101,107,106,92,105,105],
[103,110,0,106,110,108,105,113],
[105,104,105,0,98,98,104,98],
[107,105,101,113,0,97,112,110],
[111,119,103,113,114,0,117,112],
[100,106,106,107,99,94,0,106],
[99,106,98,113,101,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,108,112,109,102,105],
[95,0,99,93,118,111,103,109],
[102,112,0,96,110,110,109,111],
[103,118,115,0,116,116,111,108],
[99,93,101,95,0,98,100,95],
[102,100,101,95,113,0,107,111],
[109,108,102,100,111,104,0,112],
[106,102,100,103,116,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,88,121,127,114,134],
[101,0,128,125,138,125,107,133],
[96,83,0,98,126,102,89,126],
[123,86,113,0,123,118,100,118],
[90,73,85,88,0,94,84,129],
[84,86,109,93,117,0,86,105],
[97,104,122,111,127,125,0,131],
[77,78,85,93,82,106,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,114,107,117,83,130],
[93,0,67,55,96,70,104,96],
[94,144,0,92,120,97,92,131],
[97,156,119,0,132,108,119,134],
[104,115,91,79,0,90,80,117],
[94,141,114,103,121,0,116,118],
[128,107,119,92,131,95,0,142],
[81,115,80,77,94,93,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,101,92,92,106,112],
[108,0,116,100,118,108,94,112],
[112,95,0,106,101,103,106,95],
[110,111,105,0,107,102,100,117],
[119,93,110,104,0,99,92,102],
[119,103,108,109,112,0,108,124],
[105,117,105,111,119,103,0,106],
[99,99,116,94,109,87,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,175,106,141,141,105,141],
[70,0,34,70,71,70,106,35],
[36,177,0,106,141,177,141,141],
[105,141,105,0,142,106,71,107],
[70,140,70,69,0,140,69,34],
[70,141,34,105,71,0,140,105],
[106,105,70,140,142,71,0,105],
[70,176,70,104,177,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,105,108,112,102,103],
[102,0,105,107,104,100,96,110],
[111,106,0,104,124,117,100,108],
[106,104,107,0,113,119,101,111],
[103,107,87,98,0,97,90,86],
[99,111,94,92,114,0,97,102],
[109,115,111,110,121,114,0,101],
[108,101,103,100,125,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,98,94,106,104,113,103],
[122,0,108,120,134,121,132,105],
[113,103,0,106,113,112,111,115],
[117,91,105,0,113,95,124,107],
[105,77,98,98,0,94,114,91],
[107,90,99,116,117,0,114,98],
[98,79,100,87,97,97,0,84],
[108,106,96,104,120,113,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,101,101,106,104,120],
[111,0,114,105,103,117,97,116],
[111,97,0,99,97,106,105,119],
[110,106,112,0,115,123,104,120],
[110,108,114,96,0,121,108,117],
[105,94,105,88,90,0,101,116],
[107,114,106,107,103,110,0,120],
[91,95,92,91,94,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,87,87,92,92,79,93],
[110,0,101,109,105,99,116,108],
[124,110,0,126,109,99,114,107],
[124,102,85,0,101,103,95,88],
[119,106,102,110,0,116,100,104],
[119,112,112,108,95,0,99,117],
[132,95,97,116,111,112,0,132],
[118,103,104,123,107,94,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,112,105,116,118,123],
[102,0,112,117,98,106,101,119],
[102,99,0,105,102,97,97,105],
[99,94,106,0,104,106,102,116],
[106,113,109,107,0,106,102,112],
[95,105,114,105,105,0,107,120],
[93,110,114,109,109,104,0,122],
[88,92,106,95,99,91,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,110,102,110,109,110],
[97,0,107,107,103,107,107,103],
[104,104,0,115,104,104,110,104],
[101,104,96,0,101,104,102,93],
[109,108,107,110,0,108,108,103],
[101,104,107,107,103,0,110,111],
[102,104,101,109,103,101,0,103],
[101,108,107,118,108,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,117,123,116,99,126,113],
[84,0,84,100,88,94,110,92],
[94,127,0,122,89,94,112,103],
[88,111,89,0,91,91,103,89],
[95,123,122,120,0,108,130,107],
[112,117,117,120,103,0,116,112],
[85,101,99,108,81,95,0,81],
[98,119,108,122,104,99,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,108,100,87,101,113],
[115,0,106,117,113,108,104,128],
[101,105,0,107,99,98,105,122],
[103,94,104,0,112,106,99,123],
[111,98,112,99,0,85,97,117],
[124,103,113,105,126,0,118,117],
[110,107,106,112,114,93,0,124],
[98,83,89,88,94,94,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,108,107,105,118,107],
[101,0,104,100,94,99,112,99],
[91,107,0,112,98,110,111,110],
[103,111,99,0,99,99,110,113],
[104,117,113,112,0,111,122,121],
[106,112,101,112,100,0,104,107],
[93,99,100,101,89,107,0,105],
[104,112,101,98,90,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,110,103,121,101,112,110],
[86,0,96,93,110,96,104,89],
[101,115,0,101,119,118,102,104],
[108,118,110,0,125,111,114,105],
[90,101,92,86,0,101,97,94],
[110,115,93,100,110,0,111,99],
[99,107,109,97,114,100,0,96],
[101,122,107,106,117,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,97,113,110,109,102],
[99,0,91,88,84,84,104,83],
[117,120,0,106,111,107,102,108],
[114,123,105,0,99,110,105,100],
[98,127,100,112,0,99,96,102],
[101,127,104,101,112,0,107,113],
[102,107,109,106,115,104,0,104],
[109,128,103,111,109,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,118,106,119,111,119,123],
[115,0,119,99,113,113,110,108],
[93,92,0,80,109,114,112,110],
[105,112,131,0,129,122,116,132],
[92,98,102,82,0,97,89,102],
[100,98,97,89,114,0,99,103],
[92,101,99,95,122,112,0,110],
[88,103,101,79,109,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,158,133,105,120,107,94],
[78,0,132,65,107,90,80,104],
[53,79,0,53,39,66,79,105],
[78,146,158,0,93,131,107,91],
[106,104,172,118,0,143,94,132],
[91,121,145,80,68,0,120,121],
[104,131,132,104,117,91,0,117],
[117,107,106,120,79,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,102,105,97,114,101],
[113,0,127,118,108,103,109,122],
[105,84,0,89,89,100,112,109],
[109,93,122,0,107,106,116,119],
[106,103,122,104,0,107,126,113],
[114,108,111,105,104,0,121,95],
[97,102,99,95,85,90,0,101],
[110,89,102,92,98,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,116,110,94,108,109],
[102,0,123,121,108,112,106,113],
[88,88,0,104,89,101,100,101],
[95,90,107,0,106,110,103,100],
[101,103,122,105,0,113,113,115],
[117,99,110,101,98,0,107,103],
[103,105,111,108,98,104,0,98],
[102,98,110,111,96,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,112,113,110,101,104],
[114,0,113,112,105,109,103,109],
[96,98,0,96,96,112,93,99],
[99,99,115,0,97,115,103,96],
[98,106,115,114,0,109,112,111],
[101,102,99,96,102,0,91,101],
[110,108,118,108,99,120,0,110],
[107,102,112,115,100,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,105,122,117,103,103],
[94,0,101,104,95,90,101,96],
[109,110,0,102,118,111,98,110],
[106,107,109,0,107,110,105,104],
[89,116,93,104,0,90,113,102],
[94,121,100,101,121,0,97,100],
[108,110,113,106,98,114,0,113],
[108,115,101,107,109,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,107,103,104,104,105],
[99,0,118,121,112,109,111,110],
[108,93,0,100,111,90,101,111],
[104,90,111,0,111,111,107,120],
[108,99,100,100,0,107,89,96],
[107,102,121,100,104,0,103,121],
[107,100,110,104,122,108,0,105],
[106,101,100,91,115,90,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,118,102,106,106,100],
[103,0,112,114,113,107,103,100],
[95,99,0,126,111,117,109,106],
[93,97,85,0,98,98,92,95],
[109,98,100,113,0,109,107,93],
[105,104,94,113,102,0,103,106],
[105,108,102,119,104,108,0,108],
[111,111,105,116,118,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,116,107,104,109,109,109],
[120,0,118,118,129,104,126,120],
[95,93,0,108,120,92,99,107],
[104,93,103,0,106,96,95,114],
[107,82,91,105,0,98,101,109],
[102,107,119,115,113,0,114,124],
[102,85,112,116,110,97,0,111],
[102,91,104,97,102,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,112,93,80,84,87],
[108,0,95,109,108,97,107,95],
[118,116,0,97,112,103,105,119],
[99,102,114,0,97,96,76,94],
[118,103,99,114,0,99,90,99],
[131,114,108,115,112,0,85,109],
[127,104,106,135,121,126,0,92],
[124,116,92,117,112,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,90,116,117,126,89],
[95,0,100,108,101,116,121,98],
[103,111,0,107,105,130,113,109],
[121,103,104,0,99,143,114,117],
[95,110,106,112,0,128,119,116],
[94,95,81,68,83,0,104,85],
[85,90,98,97,92,107,0,94],
[122,113,102,94,95,126,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,128,117,124,108,116,102],
[105,0,104,86,105,85,95,103],
[83,107,0,102,104,91,88,94],
[94,125,109,0,111,98,103,108],
[87,106,107,100,0,91,94,99],
[103,126,120,113,120,0,116,123],
[95,116,123,108,117,95,0,113],
[109,108,117,103,112,88,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,117,106,104,118,117],
[105,0,92,112,97,98,106,91],
[113,119,0,127,111,123,120,101],
[94,99,84,0,98,101,113,106],
[105,114,100,113,0,108,119,105],
[107,113,88,110,103,0,113,100],
[93,105,91,98,92,98,0,91],
[94,120,110,105,106,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,68,174,138,138,70,178],
[69,0,69,105,68,33,0,73],
[143,142,0,178,138,103,107,143],
[37,106,33,0,102,33,34,107],
[73,143,73,109,0,0,107,107],
[73,178,108,178,211,0,107,142],
[141,211,104,177,104,104,0,211],
[33,138,68,104,104,69,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,112,102,101,98,112],
[95,0,111,109,97,96,98,101],
[100,100,0,93,92,87,85,94],
[99,102,118,0,106,95,108,114],
[109,114,119,105,0,104,94,111],
[110,115,124,116,107,0,102,120],
[113,113,126,103,117,109,0,114],
[99,110,117,97,100,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,170,92,124,122,122,124],
[57,0,123,78,61,75,105,121],
[41,88,0,62,42,26,103,58],
[119,133,149,0,103,147,133,165],
[87,150,169,108,0,121,103,165],
[89,136,185,64,90,0,121,152],
[89,106,108,78,108,90,0,104],
[87,90,153,46,46,59,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,101,86,112,106,145,102],
[88,0,111,93,96,97,114,108],
[110,100,0,108,106,108,129,106],
[125,118,103,0,115,104,129,102],
[99,115,105,96,0,113,122,115],
[105,114,103,107,98,0,121,117],
[66,97,82,82,89,90,0,97],
[109,103,105,109,96,94,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,100,94,96,98,81],
[118,0,104,101,103,94,97,94],
[118,107,0,97,113,102,98,98],
[111,110,114,0,105,105,114,99],
[117,108,98,106,0,88,114,110],
[115,117,109,106,123,0,109,104],
[113,114,113,97,97,102,0,99],
[130,117,113,112,101,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,100,107,115,117,115],
[109,0,102,121,117,114,94,117],
[117,109,0,109,110,116,101,125],
[111,90,102,0,108,109,107,104],
[104,94,101,103,0,113,86,85],
[96,97,95,102,98,0,85,101],
[94,117,110,104,125,126,0,114],
[96,94,86,107,126,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,111,120,111,113,102],
[107,0,111,107,112,125,125,92],
[97,100,0,96,106,114,104,91],
[100,104,115,0,118,113,114,110],
[91,99,105,93,0,96,110,73],
[100,86,97,98,115,0,96,88],
[98,86,107,97,101,115,0,97],
[109,119,120,101,138,123,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,115,110,96,100,109],
[108,0,100,108,88,96,115,105],
[111,111,0,129,109,102,121,112],
[96,103,82,0,81,108,100,92],
[101,123,102,130,0,113,111,105],
[115,115,109,103,98,0,111,107],
[111,96,90,111,100,100,0,103],
[102,106,99,119,106,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,120,121,114,106,97],
[94,0,112,95,111,107,98,90],
[98,99,0,96,110,101,96,91],
[91,116,115,0,109,103,95,101],
[90,100,101,102,0,95,100,95],
[97,104,110,108,116,0,95,92],
[105,113,115,116,111,116,0,115],
[114,121,120,110,116,119,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,102,86,85,89,98],
[101,0,113,90,101,95,81,93],
[101,98,0,81,70,74,81,111],
[109,121,130,0,92,124,104,118],
[125,110,141,119,0,98,98,113],
[126,116,137,87,113,0,81,121],
[122,130,130,107,113,130,0,104],
[113,118,100,93,98,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,115,108,104,121,112],
[100,0,96,118,110,106,104,103],
[116,115,0,114,125,105,116,113],
[96,93,97,0,107,91,109,98],
[103,101,86,104,0,95,101,109],
[107,105,106,120,116,0,114,117],
[90,107,95,102,110,97,0,101],
[99,108,98,113,102,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,101,110,109,102,116],
[113,0,104,109,101,101,110,107],
[104,107,0,104,112,110,109,98],
[110,102,107,0,112,118,102,121],
[101,110,99,99,0,104,103,120],
[102,110,101,93,107,0,99,109],
[109,101,102,109,108,112,0,103],
[95,104,113,90,91,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,89,181,153,119,152,180],
[92,0,154,150,154,150,184,184],
[122,57,0,150,119,119,149,180],
[30,61,61,0,64,61,94,61],
[58,57,92,147,0,119,149,147],
[92,61,92,150,92,0,92,92],
[59,27,62,117,62,119,0,86],
[31,27,31,150,64,119,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,97,99,112,114,104],
[114,0,95,112,98,115,119,105],
[117,116,0,108,103,118,118,103],
[114,99,103,0,106,123,113,103],
[112,113,108,105,0,117,113,112],
[99,96,93,88,94,0,106,94],
[97,92,93,98,98,105,0,94],
[107,106,108,108,99,117,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,91,92,104,90,97,104],
[108,0,109,106,107,104,114,109],
[120,102,0,94,110,96,103,103],
[119,105,117,0,108,103,113,129],
[107,104,101,103,0,96,110,124],
[121,107,115,108,115,0,101,117],
[114,97,108,98,101,110,0,116],
[107,102,108,82,87,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,104,81,89,86,87,86],
[126,0,104,100,90,100,94,112],
[107,107,0,104,85,87,100,103],
[130,111,107,0,103,111,106,111],
[122,121,126,108,0,104,113,114],
[125,111,124,100,107,0,106,106],
[124,117,111,105,98,105,0,120],
[125,99,108,100,97,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,83,103,96,97,130,109],
[102,0,94,93,91,71,101,89],
[128,117,0,107,98,108,113,112],
[108,118,104,0,110,102,114,107],
[115,120,113,101,0,93,109,106],
[114,140,103,109,118,0,107,113],
[81,110,98,97,102,104,0,115],
[102,122,99,104,105,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,87,123,90,71,88,106],
[123,0,89,143,125,105,107,89],
[124,122,0,122,160,87,88,70],
[88,68,89,0,105,53,53,70],
[121,86,51,106,0,52,52,52],
[140,106,124,158,159,0,123,105],
[123,104,123,158,159,88,0,157],
[105,122,141,141,159,106,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,107,114,112,114,92],
[110,0,104,114,82,86,110,91],
[105,107,0,108,105,85,111,95],
[104,97,103,0,90,87,98,98],
[97,129,106,121,0,105,113,103],
[99,125,126,124,106,0,116,113],
[97,101,100,113,98,95,0,89],
[119,120,116,113,108,98,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,85,109,90,109,106,110],
[103,0,102,90,101,114,111,107],
[126,109,0,98,95,114,116,112],
[102,121,113,0,116,120,114,113],
[121,110,116,95,0,113,107,113],
[102,97,97,91,98,0,100,108],
[105,100,95,97,104,111,0,103],
[101,104,99,98,98,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,52,106,52,52,0,52],
[52,0,52,54,0,0,0,104],
[159,159,0,107,54,107,107,158],
[105,157,104,0,52,104,52,104],
[159,211,157,159,0,159,105,104],
[159,211,104,107,52,0,52,104],
[211,211,104,159,106,159,0,104],
[159,107,53,107,107,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,100,97,99,104,107],
[103,0,111,108,95,101,113,108],
[108,100,0,85,96,98,108,99],
[111,103,126,0,111,109,115,115],
[114,116,115,100,0,106,111,110],
[112,110,113,102,105,0,112,107],
[107,98,103,96,100,99,0,95],
[104,103,112,96,101,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,140,96,126,84,116,114],
[97,0,115,103,104,110,102,111],
[71,96,0,88,97,79,84,99],
[115,108,123,0,115,112,93,103],
[85,107,114,96,0,105,82,103],
[127,101,132,99,106,0,98,105],
[95,109,127,118,129,113,0,106],
[97,100,112,108,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,106,104,104,106,105],
[106,0,109,104,109,109,102,101],
[109,102,0,108,89,99,103,105],
[105,107,103,0,97,92,92,99],
[107,102,122,114,0,102,102,112],
[107,102,112,119,109,0,104,101],
[105,109,108,119,109,107,0,103],
[106,110,106,112,99,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,111,114,101,92,85],
[102,0,115,96,99,90,89,80],
[100,96,0,101,120,103,108,92],
[100,115,110,0,111,114,95,104],
[97,112,91,100,0,95,106,75],
[110,121,108,97,116,0,97,104],
[119,122,103,116,105,114,0,113],
[126,131,119,107,136,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,125,107,103,133,98],
[95,0,118,108,116,123,127,115],
[95,93,0,92,86,102,104,64],
[86,103,119,0,116,132,87,97],
[104,95,125,95,0,103,75,68],
[108,88,109,79,108,0,77,82],
[78,84,107,124,136,134,0,86],
[113,96,147,114,143,129,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,99,76,94,78,94,84],
[133,0,118,91,97,114,124,97],
[112,93,0,107,103,99,93,85],
[135,120,104,0,111,115,107,89],
[117,114,108,100,0,108,89,68],
[133,97,112,96,103,0,115,107],
[117,87,118,104,122,96,0,106],
[127,114,126,122,143,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,95,117,100,108,92],
[100,0,94,105,113,96,105,87],
[107,117,0,94,114,102,111,97],
[116,106,117,0,123,113,116,104],
[94,98,97,88,0,85,90,85],
[111,115,109,98,126,0,114,112],
[103,106,100,95,121,97,0,100],
[119,124,114,107,126,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,85,97,92,102,95,106],
[109,0,94,85,95,99,111,116],
[126,117,0,104,104,118,113,122],
[114,126,107,0,103,116,114,116],
[119,116,107,108,0,100,110,108],
[109,112,93,95,111,0,119,118],
[116,100,98,97,101,92,0,113],
[105,95,89,95,103,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,86,94,88,93,104],
[122,0,105,100,107,112,105,113],
[112,106,0,93,89,98,95,111],
[125,111,118,0,106,103,106,120],
[117,104,122,105,0,101,96,110],
[123,99,113,108,110,0,99,107],
[118,106,116,105,115,112,0,115],
[107,98,100,91,101,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,105,114,120,97,106],
[115,0,109,109,105,111,112,107],
[115,102,0,104,115,121,115,141],
[106,102,107,0,117,116,117,134],
[97,106,96,94,0,117,102,122],
[91,100,90,95,94,0,94,113],
[114,99,96,94,109,117,0,126],
[105,104,70,77,89,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,133,101,128,91,111,119],
[96,0,130,101,100,113,91,90],
[78,81,0,94,118,85,92,93],
[110,110,117,0,118,100,111,96],
[83,111,93,93,0,83,101,111],
[120,98,126,111,128,0,100,99],
[100,120,119,100,110,111,0,117],
[92,121,118,115,100,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,112,102,113,96,106],
[96,0,89,102,107,107,97,105],
[104,122,0,122,116,114,103,118],
[99,109,89,0,104,101,98,100],
[109,104,95,107,0,99,102,103],
[98,104,97,110,112,0,93,106],
[115,114,108,113,109,118,0,103],
[105,106,93,111,108,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,101,104,107,112,121],
[113,0,105,107,115,110,113,133],
[103,106,0,113,110,107,119,131],
[110,104,98,0,109,109,118,130],
[107,96,101,102,0,105,113,118],
[104,101,104,102,106,0,105,120],
[99,98,92,93,98,106,0,117],
[90,78,80,81,93,91,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,107,157,53,104,211,53],
[158,0,159,211,157,104,211,159],
[104,52,0,157,157,104,157,105],
[54,0,54,0,53,52,159,54],
[158,54,54,158,0,158,211,54],
[107,107,107,159,53,0,159,107],
[0,0,54,52,0,52,0,0],
[158,52,106,157,157,104,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,109,109,113,108,104,110],
[83,0,100,104,94,104,96,93],
[102,111,0,105,99,104,103,120],
[102,107,106,0,110,107,116,104],
[98,117,112,101,0,115,112,115],
[103,107,107,104,96,0,107,114],
[107,115,108,95,99,104,0,105],
[101,118,91,107,96,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,118,109,111,113,95],
[105,0,105,115,98,126,102,106],
[104,106,0,100,101,104,88,94],
[93,96,111,0,105,99,94,93],
[102,113,110,106,0,100,94,87],
[100,85,107,112,111,0,92,102],
[98,109,123,117,117,119,0,107],
[116,105,117,118,124,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,114,126,113,101,133],
[106,0,93,112,120,134,116,131],
[91,118,0,107,126,115,95,117],
[97,99,104,0,111,108,107,108],
[85,91,85,100,0,90,93,104],
[98,77,96,103,121,0,88,110],
[110,95,116,104,118,123,0,117],
[78,80,94,103,107,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,100,92,93,110,98,94],
[125,0,124,95,95,132,107,123],
[111,87,0,82,89,114,83,119],
[119,116,129,0,110,116,105,104],
[118,116,122,101,0,122,115,107],
[101,79,97,95,89,0,96,108],
[113,104,128,106,96,115,0,116],
[117,88,92,107,104,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,97,109,105,109,103],
[108,0,102,103,101,110,106,107],
[104,109,0,114,94,101,113,105],
[114,108,97,0,99,113,106,113],
[102,110,117,112,0,116,118,104],
[106,101,110,98,95,0,96,99],
[102,105,98,105,93,115,0,95],
[108,104,106,98,107,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,73,98,82,105,117,107],
[116,0,95,106,140,116,104,125],
[138,116,0,117,131,115,105,131],
[113,105,94,0,112,132,104,137],
[129,71,80,99,0,141,121,100],
[106,95,96,79,70,0,88,104],
[94,107,106,107,90,123,0,135],
[104,86,80,74,111,107,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,99,106,109,109,106],
[115,0,97,94,105,105,103,96],
[101,114,0,100,109,89,115,100],
[112,117,111,0,108,105,112,106],
[105,106,102,103,0,104,116,116],
[102,106,122,106,107,0,117,117],
[102,108,96,99,95,94,0,93],
[105,115,111,105,95,94,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,108,103,104,106,108],
[109,0,110,107,111,101,110,105],
[99,101,0,101,98,98,101,96],
[103,104,110,0,105,103,100,104],
[108,100,113,106,0,118,106,99],
[107,110,113,108,93,0,100,100],
[105,101,110,111,105,111,0,96],
[103,106,115,107,112,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,137,138,129,124,107,148],
[107,0,116,83,129,103,95,148],
[74,95,0,41,106,73,52,126],
[73,128,170,0,129,127,98,128],
[82,82,105,82,0,113,74,146],
[87,108,138,84,98,0,53,129],
[104,116,159,113,137,158,0,147],
[63,63,85,83,65,82,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,105,94,91,89,103],
[99,0,104,110,110,88,95,110],
[107,107,0,104,104,96,105,98],
[106,101,107,0,103,93,94,108],
[117,101,107,108,0,107,108,100],
[120,123,115,118,104,0,109,116],
[122,116,106,117,103,102,0,113],
[108,101,113,103,111,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,131,100,129,162,165,98],
[130,0,164,117,128,143,133,98],
[80,47,0,48,95,128,134,114],
[111,94,163,0,157,175,178,98],
[82,83,116,54,0,164,103,86],
[49,68,83,36,47,0,85,51],
[46,78,77,33,108,126,0,97],
[113,113,97,113,125,160,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,111,113,119,94,103],
[103,0,95,104,93,104,95,105],
[116,116,0,107,111,122,115,102],
[100,107,104,0,94,103,95,92],
[98,118,100,117,0,118,116,116],
[92,107,89,108,93,0,107,99],
[117,116,96,116,95,104,0,87],
[108,106,109,119,95,112,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,137,116,114,84,125,122],
[98,0,122,134,131,117,115,109],
[74,89,0,117,106,118,124,100],
[95,77,94,0,105,92,113,80],
[97,80,105,106,0,92,109,123],
[127,94,93,119,119,0,135,103],
[86,96,87,98,102,76,0,89],
[89,102,111,131,88,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,104,96,96,99,107],
[115,0,100,108,110,103,113,113],
[114,111,0,116,111,103,119,118],
[107,103,95,0,103,115,92,109],
[115,101,100,108,0,101,97,113],
[115,108,108,96,110,0,120,107],
[112,98,92,119,114,91,0,111],
[104,98,93,102,98,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,102,106,88,97,92],
[109,0,107,107,105,101,103,96],
[105,104,0,101,107,105,106,106],
[109,104,110,0,117,102,109,102],
[105,106,104,94,0,80,101,93],
[123,110,106,109,131,0,113,98],
[114,108,105,102,110,98,0,98],
[119,115,105,109,118,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,104,94,117,95,92],
[91,0,91,95,76,78,93,106],
[95,120,0,90,72,92,86,98],
[107,116,121,0,92,118,100,132],
[117,135,139,119,0,98,126,127],
[94,133,119,93,113,0,92,114],
[116,118,125,111,85,119,0,118],
[119,105,113,79,84,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,118,112,131,113,111],
[99,0,106,119,111,117,108,107],
[106,105,0,104,106,119,109,113],
[93,92,107,0,99,112,100,94],
[99,100,105,112,0,119,94,103],
[80,94,92,99,92,0,104,100],
[98,103,102,111,117,107,0,108],
[100,104,98,117,108,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,101,95,98,110,115],
[109,0,111,101,93,113,108,122],
[112,100,0,103,93,104,93,108],
[110,110,108,0,94,94,106,105],
[116,118,118,117,0,108,103,131],
[113,98,107,117,103,0,97,105],
[101,103,118,105,108,114,0,112],
[96,89,103,106,80,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,108,86,120,107,101],
[94,0,86,104,78,107,100,95],
[113,125,0,115,102,107,99,106],
[103,107,96,0,78,108,103,86],
[125,133,109,133,0,106,121,104],
[91,104,104,103,105,0,112,93],
[104,111,112,108,90,99,0,91],
[110,116,105,125,107,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,113,102,106,94,109],
[108,0,109,115,109,107,105,102],
[101,102,0,102,95,88,104,99],
[98,96,109,0,92,103,102,100],
[109,102,116,119,0,117,107,109],
[105,104,123,108,94,0,111,112],
[117,106,107,109,104,100,0,100],
[102,109,112,111,102,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,104,102,99,94,117],
[111,0,97,106,103,103,98,111],
[115,114,0,114,106,113,105,124],
[107,105,97,0,92,109,120,117],
[109,108,105,119,0,106,111,118],
[112,108,98,102,105,0,103,110],
[117,113,106,91,100,108,0,110],
[94,100,87,94,93,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,111,114,88,101,106],
[122,0,116,107,115,111,103,117],
[105,95,0,101,112,107,112,109],
[100,104,110,0,111,106,113,115],
[97,96,99,100,0,102,88,108],
[123,100,104,105,109,0,116,119],
[110,108,99,98,123,95,0,111],
[105,94,102,96,103,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,112,92,108,97,110],
[109,0,96,103,101,107,110,100],
[106,115,0,104,114,110,104,117],
[99,108,107,0,99,113,101,102],
[119,110,97,112,0,113,104,89],
[103,104,101,98,98,0,108,94],
[114,101,107,110,107,103,0,98],
[101,111,94,109,122,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,136,109,103,100,108],
[97,0,105,105,82,83,104,81],
[94,106,0,104,104,74,87,75],
[75,106,107,0,75,71,101,97],
[102,129,107,136,0,102,98,98],
[108,128,137,140,109,0,122,97],
[111,107,124,110,113,89,0,90],
[103,130,136,114,113,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,121,105,105,120,114],
[103,0,106,109,112,109,106,127],
[114,105,0,117,113,109,118,113],
[90,102,94,0,100,92,106,101],
[106,99,98,111,0,94,108,112],
[106,102,102,119,117,0,108,125],
[91,105,93,105,103,103,0,108],
[97,84,98,110,99,86,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,106,106,106,106,53],
[105,0,104,160,160,106,157,107],
[105,107,0,107,107,107,158,54],
[105,51,104,0,106,106,104,53],
[105,51,104,105,0,104,51,105],
[105,105,104,105,107,0,158,158],
[105,54,53,107,160,53,0,107],
[158,104,157,158,106,53,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,101,113,104,112,96],
[115,0,123,117,105,105,114,110],
[96,88,0,91,100,94,99,97],
[110,94,120,0,120,96,113,96],
[98,106,111,91,0,94,108,89],
[107,106,117,115,117,0,113,99],
[99,97,112,98,103,98,0,92],
[115,101,114,115,122,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,90,106,61,91,89,75],
[148,0,150,138,105,120,164,133],
[121,61,0,139,61,122,122,135],
[105,73,72,0,75,76,90,106],
[150,106,150,136,0,91,150,137],
[120,91,89,135,120,0,119,120],
[122,47,89,121,61,92,0,91],
[136,78,76,105,74,91,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,110,115,104,121,111],
[105,0,107,89,112,110,111,102],
[90,104,0,97,98,108,106,103],
[101,122,114,0,110,115,115,109],
[96,99,113,101,0,108,102,98],
[107,101,103,96,103,0,108,96],
[90,100,105,96,109,103,0,97],
[100,109,108,102,113,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,100,85,88,97,90],
[122,0,109,105,110,119,102,111],
[112,102,0,118,116,99,94,116],
[111,106,93,0,106,111,113,125],
[126,101,95,105,0,105,103,98],
[123,92,112,100,106,0,112,123],
[114,109,117,98,108,99,0,109],
[121,100,95,86,113,88,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,107,114,99,116,112],
[111,0,89,118,110,97,118,117],
[113,122,0,113,120,98,118,107],
[104,93,98,0,110,110,124,116],
[97,101,91,101,0,97,108,114],
[112,114,113,101,114,0,109,120],
[95,93,93,87,103,102,0,100],
[99,94,104,95,97,91,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,110,113,114,98,101],
[94,0,113,109,108,107,94,102],
[102,98,0,110,104,113,107,109],
[101,102,101,0,107,104,95,83],
[98,103,107,104,0,104,96,93],
[97,104,98,107,107,0,95,109],
[113,117,104,116,115,116,0,120],
[110,109,102,128,118,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,84,108,98,108,97],
[122,0,117,109,127,104,123,92],
[100,94,0,97,122,112,104,103],
[127,102,114,0,113,117,135,117],
[103,84,89,98,0,100,92,87],
[113,107,99,94,111,0,111,92],
[103,88,107,76,119,100,0,100],
[114,119,108,94,124,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,100,84,76,104,98,92],
[125,0,109,114,96,116,115,110],
[111,102,0,97,100,104,100,99],
[127,97,114,0,114,122,103,114],
[135,115,111,97,0,111,97,109],
[107,95,107,89,100,0,109,93],
[113,96,111,108,114,102,0,113],
[119,101,112,97,102,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,94,98,104,101,102],
[112,0,92,96,93,106,102,103],
[105,119,0,109,106,97,117,109],
[117,115,102,0,103,112,104,111],
[113,118,105,108,0,115,108,97],
[107,105,114,99,96,0,100,106],
[110,109,94,107,103,111,0,89],
[109,108,102,100,114,105,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,111,108,109,109,103],
[99,0,98,113,96,103,106,103],
[102,113,0,104,100,107,110,110],
[100,98,107,0,108,101,102,98],
[103,115,111,103,0,107,107,109],
[102,108,104,110,104,0,98,106],
[102,105,101,109,104,113,0,106],
[108,108,101,113,102,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,104,101,101,113,109],
[117,0,100,122,116,112,123,105],
[118,111,0,106,109,103,115,109],
[107,89,105,0,101,94,110,95],
[110,95,102,110,0,110,105,108],
[110,99,108,117,101,0,106,120],
[98,88,96,101,106,105,0,97],
[102,106,102,116,103,91,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,131,84,101,105,122,110],
[117,0,105,103,125,98,106,105],
[80,106,0,102,111,94,98,103],
[127,108,109,0,114,125,83,126],
[110,86,100,97,0,80,82,88],
[106,113,117,86,131,0,106,92],
[89,105,113,128,129,105,0,117],
[101,106,108,85,123,119,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,110,101,103,94,92],
[99,0,106,98,115,108,102,95],
[117,105,0,117,111,131,108,97],
[101,113,94,0,116,105,97,91],
[110,96,100,95,0,95,96,82],
[108,103,80,106,116,0,94,91],
[117,109,103,114,115,117,0,107],
[119,116,114,120,129,120,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,76,150,164,136,150,179],
[108,0,123,118,103,121,150,136],
[135,88,0,150,164,166,135,148],
[61,93,61,0,104,106,105,121],
[47,108,47,107,0,108,135,120],
[75,90,45,105,103,0,87,119],
[61,61,76,106,76,124,0,91],
[32,75,63,90,91,92,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,108,94,95,100,103],
[97,0,87,95,84,88,94,81],
[104,124,0,114,102,103,113,103],
[103,116,97,0,100,89,103,113],
[117,127,109,111,0,107,113,95],
[116,123,108,122,104,0,111,107],
[111,117,98,108,98,100,0,100],
[108,130,108,98,116,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,114,132,99,104,99,122],
[123,0,90,111,88,100,134,100],
[97,121,0,120,122,134,144,88],
[79,100,91,0,89,77,100,78],
[112,123,89,122,0,124,133,124],
[107,111,77,134,87,0,98,98],
[112,77,67,111,78,113,0,90],
[89,111,123,133,87,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,105,109,120,108,108],
[103,0,108,102,98,106,112,106],
[111,103,0,99,103,99,110,102],
[106,109,112,0,103,117,107,104],
[102,113,108,108,0,116,119,109],
[91,105,112,94,95,0,113,104],
[103,99,101,104,92,98,0,88],
[103,105,109,107,102,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,106,106,106,158,54],
[105,0,158,158,104,52,104,52],
[105,53,0,0,52,53,105,0],
[105,53,211,0,104,105,157,52],
[105,107,159,107,0,53,159,106],
[105,159,158,106,158,0,158,106],
[53,107,106,54,52,53,0,0],
[157,159,211,159,105,105,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,114,100,99,125,110],
[108,0,109,102,114,99,118,101],
[115,102,0,115,115,106,117,104],
[97,109,96,0,101,98,112,101],
[111,97,96,110,0,104,111,104],
[112,112,105,113,107,0,119,109],
[86,93,94,99,100,92,0,96],
[101,110,107,110,107,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,118,104,122,94,107,97],
[123,0,115,125,120,107,127,92],
[93,96,0,106,109,93,101,97],
[107,86,105,0,112,92,119,109],
[89,91,102,99,0,96,106,100],
[117,104,118,119,115,0,125,119],
[104,84,110,92,105,86,0,106],
[114,119,114,102,111,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,126,110,111,126,107],
[108,0,113,123,103,113,112,107],
[101,98,0,118,108,99,115,99],
[85,88,93,0,89,85,89,86],
[101,108,103,122,0,117,129,111],
[100,98,112,126,94,0,122,114],
[85,99,96,122,82,89,0,89],
[104,104,112,125,100,97,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,78,98,75,86,80],
[98,0,81,90,91,74,91,86],
[115,130,0,105,110,83,113,113],
[133,121,106,0,112,103,113,99],
[113,120,101,99,0,82,102,98],
[136,137,128,108,129,0,124,105],
[125,120,98,98,109,87,0,100],
[131,125,98,112,113,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,128,105,133,125,127,133],
[105,0,117,116,99,101,137,105],
[83,94,0,109,113,114,113,106],
[106,95,102,0,92,91,100,80],
[78,112,98,119,0,101,100,107],
[86,110,97,120,110,0,97,108],
[84,74,98,111,111,114,0,110],
[78,106,105,131,104,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,135,117,121,130,101,101],
[95,0,122,91,90,108,83,111],
[76,89,0,105,97,93,86,82],
[94,120,106,0,119,107,91,100],
[90,121,114,92,0,115,93,95],
[81,103,118,104,96,0,88,73],
[110,128,125,120,118,123,0,96],
[110,100,129,111,116,138,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,84,91,96,86,93],
[116,0,92,84,107,102,111,98],
[113,119,0,86,97,96,99,94],
[127,127,125,0,109,119,117,105],
[120,104,114,102,0,103,119,110],
[115,109,115,92,108,0,115,114],
[125,100,112,94,92,96,0,91],
[118,113,117,106,101,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,113,108,131,123,111],
[96,0,86,107,95,121,111,98],
[107,125,0,118,105,130,124,111],
[98,104,93,0,94,118,99,93],
[103,116,106,117,0,128,111,102],
[80,90,81,93,83,0,98,101],
[88,100,87,112,100,113,0,86],
[100,113,100,118,109,110,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,113,136,101,148,124,111],
[85,0,78,102,100,138,101,64],
[98,133,0,151,124,138,150,124],
[75,109,60,0,87,139,122,99],
[110,111,87,124,0,150,136,99],
[63,73,73,72,61,0,74,75],
[87,110,61,89,75,137,0,100],
[100,147,87,112,112,136,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,92,97,116,108,110],
[102,0,87,86,100,95,90,98],
[117,124,0,110,103,116,118,110],
[119,125,101,0,111,126,115,113],
[114,111,108,100,0,120,112,109],
[95,116,95,85,91,0,103,98],
[103,121,93,96,99,108,0,95],
[101,113,101,98,102,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,88,90,142,104,119,118],
[120,0,111,108,125,99,120,108],
[123,100,0,106,123,105,100,107],
[121,103,105,0,120,108,99,107],
[69,86,88,91,0,100,101,85],
[107,112,106,103,111,0,96,100],
[92,91,111,112,110,115,0,105],
[93,103,104,104,126,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,128,111,114,110,91],
[107,0,102,106,109,102,105,102],
[105,109,0,108,114,123,123,99],
[83,105,103,0,102,106,102,101],
[100,102,97,109,0,119,104,91],
[97,109,88,105,92,0,101,87],
[101,106,88,109,107,110,0,111],
[120,109,112,110,120,124,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,101,89,102,86,90],
[107,0,102,104,93,108,94,99],
[113,109,0,112,107,105,103,114],
[110,107,99,0,108,110,97,92],
[122,118,104,103,0,111,120,111],
[109,103,106,101,100,0,99,103],
[125,117,108,114,91,112,0,100],
[121,112,97,119,100,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,109,98,115,120,106],
[106,0,100,98,97,109,94,96],
[99,111,0,105,91,115,118,94],
[102,113,106,0,108,113,116,111],
[113,114,120,103,0,111,102,115],
[96,102,96,98,100,0,108,96],
[91,117,93,95,109,103,0,104],
[105,115,117,100,96,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,120,100,107,128,99],
[104,0,110,114,114,112,116,116],
[107,101,0,116,109,129,121,96],
[91,97,95,0,93,105,97,92],
[111,97,102,118,0,134,131,117],
[104,99,82,106,77,0,108,85],
[83,95,90,114,80,103,0,90],
[112,95,115,119,94,126,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,117,128,96,119,123],
[96,0,114,88,96,99,106,116],
[95,97,0,111,107,106,105,109],
[94,123,100,0,110,101,114,105],
[83,115,104,101,0,97,107,115],
[115,112,105,110,114,0,110,109],
[92,105,106,97,104,101,0,97],
[88,95,102,106,96,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,106,115,112,115,108],
[102,0,104,106,113,95,112,92],
[108,107,0,130,102,107,114,92],
[105,105,81,0,99,98,112,91],
[96,98,109,112,0,94,108,99],
[99,116,104,113,117,0,115,106],
[96,99,97,99,103,96,0,96],
[103,119,119,120,112,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,107,94,107,117,112],
[109,0,103,116,106,100,109,122],
[111,108,0,105,89,108,116,111],
[104,95,106,0,91,101,104,107],
[117,105,122,120,0,123,120,111],
[104,111,103,110,88,0,103,107],
[94,102,95,107,91,108,0,110],
[99,89,100,104,100,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,130,116,112,121,117],
[112,0,108,117,111,105,117,109],
[96,103,0,123,117,108,114,100],
[81,94,88,0,94,101,95,85],
[95,100,94,117,0,98,100,95],
[99,106,103,110,113,0,108,100],
[90,94,97,116,111,103,0,92],
[94,102,111,126,116,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,113,111,103,119,102],
[114,0,107,118,101,109,128,117],
[115,104,0,121,112,104,117,113],
[98,93,90,0,103,95,111,102],
[100,110,99,108,0,103,108,108],
[108,102,107,116,108,0,116,115],
[92,83,94,100,103,95,0,95],
[109,94,98,109,103,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,116,101,118,100,112],
[108,0,108,106,107,104,92,98],
[107,103,0,104,109,96,100,111],
[95,105,107,0,96,103,97,103],
[110,104,102,115,0,92,93,102],
[93,107,115,108,119,0,111,110],
[111,119,111,114,118,100,0,109],
[99,113,100,108,109,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,100,114,111,104,94],
[100,0,109,103,131,134,115,104],
[110,102,0,125,120,116,92,107],
[111,108,86,0,108,106,94,102],
[97,80,91,103,0,99,107,103],
[100,77,95,105,112,0,102,107],
[107,96,119,117,104,109,0,123],
[117,107,104,109,108,104,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,100,111,96,117,103],
[109,0,101,96,106,122,120,100],
[100,110,0,107,94,122,121,117],
[111,115,104,0,90,106,114,110],
[100,105,117,121,0,123,126,118],
[115,89,89,105,88,0,117,108],
[94,91,90,97,85,94,0,90],
[108,111,94,101,93,103,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,105,113,105,103,109],
[111,0,108,101,120,98,109,91],
[113,103,0,106,119,112,110,109],
[106,110,105,0,112,122,111,112],
[98,91,92,99,0,100,97,102],
[106,113,99,89,111,0,97,99],
[108,102,101,100,114,114,0,94],
[102,120,102,99,109,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,100,104,103,103,115],
[112,0,108,100,106,107,109,102],
[116,103,0,100,115,108,113,101],
[111,111,111,0,105,100,104,106],
[107,105,96,106,0,102,97,103],
[108,104,103,111,109,0,97,117],
[108,102,98,107,114,114,0,110],
[96,109,110,105,108,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,101,113,105,109,118],
[98,0,124,112,110,113,129,122],
[96,87,0,83,99,87,86,93],
[110,99,128,0,112,111,149,107],
[98,101,112,99,0,104,98,103],
[106,98,124,100,107,0,116,92],
[102,82,125,62,113,95,0,104],
[93,89,118,104,108,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,81,100,88,75,89,93],
[129,0,92,93,107,117,99,95],
[130,119,0,127,120,115,114,103],
[111,118,84,0,102,108,102,123],
[123,104,91,109,0,105,114,112],
[136,94,96,103,106,0,119,125],
[122,112,97,109,97,92,0,109],
[118,116,108,88,99,86,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,105,144,105,106,104],
[112,0,112,92,134,115,122,127],
[109,99,0,105,139,110,101,113],
[106,119,106,0,148,100,103,121],
[67,77,72,63,0,87,86,78],
[106,96,101,111,124,0,119,122],
[105,89,110,108,125,92,0,109],
[107,84,98,90,133,89,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,109,115,119,103,113],
[97,0,98,109,108,110,96,112],
[106,113,0,122,125,105,107,121],
[102,102,89,0,107,106,95,105],
[96,103,86,104,0,97,96,103],
[92,101,106,105,114,0,100,114],
[108,115,104,116,115,111,0,114],
[98,99,90,106,108,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,107,93,110,98,104],
[104,0,109,111,111,136,114,115],
[107,102,0,118,83,113,114,108],
[104,100,93,0,92,110,98,93],
[118,100,128,119,0,119,129,115],
[101,75,98,101,92,0,114,117],
[113,97,97,113,82,97,0,107],
[107,96,103,118,96,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,83,96,99,103,107,102],
[113,0,106,105,102,104,114,108],
[128,105,0,109,112,111,119,110],
[115,106,102,0,106,93,102,113],
[112,109,99,105,0,112,106,102],
[108,107,100,118,99,0,110,113],
[104,97,92,109,105,101,0,112],
[109,103,101,98,109,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,120,115,97,98,128,101],
[118,0,130,123,117,120,128,101],
[91,81,0,119,100,96,111,99],
[96,88,92,0,91,99,118,103],
[114,94,111,120,0,114,127,112],
[113,91,115,112,97,0,118,93],
[83,83,100,93,84,93,0,83],
[110,110,112,108,99,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,104,121,78,85,97,97],
[133,0,102,121,113,110,77,102],
[107,109,0,112,113,108,92,98],
[90,90,99,0,79,99,59,104],
[133,98,98,132,0,133,107,117],
[126,101,103,112,78,0,86,96],
[114,134,119,152,104,125,0,127],
[114,109,113,107,94,115,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,107,103,118,108,104],
[109,0,113,102,115,113,99,112],
[106,98,0,96,93,101,107,110],
[104,109,115,0,114,120,109,115],
[108,96,118,97,0,109,103,115],
[93,98,110,91,102,0,101,103],
[103,112,104,102,108,110,0,109],
[107,99,101,96,96,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,99,99,102,97,112],
[95,0,104,85,94,71,103,77],
[84,107,0,78,89,100,102,110],
[112,126,133,0,119,90,121,113],
[112,117,122,92,0,107,116,105],
[109,140,111,121,104,0,124,110],
[114,108,109,90,95,87,0,103],
[99,134,101,98,106,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,94,139,96,110,103,102],
[125,0,96,124,110,98,123,114],
[117,115,0,129,91,108,131,126],
[72,87,82,0,76,73,95,88],
[115,101,120,135,0,122,114,146],
[101,113,103,138,89,0,112,137],
[108,88,80,116,97,99,0,113],
[109,97,85,123,65,74,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,105,105,103,118,101],
[105,0,112,106,103,107,104,106],
[99,99,0,97,111,117,112,98],
[106,105,114,0,112,108,110,105],
[106,108,100,99,0,108,107,109],
[108,104,94,103,103,0,104,103],
[93,107,99,101,104,107,0,107],
[110,105,113,106,102,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,43,85,85,129,85,43],
[82,0,84,126,85,129,167,43],
[168,127,0,170,127,127,127,87],
[126,85,41,0,41,85,41,128],
[126,126,84,170,0,170,167,128],
[82,82,84,126,41,0,125,84],
[126,44,84,170,44,86,0,87],
[168,168,124,83,83,127,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,108,109,105,118,95],
[106,0,108,97,106,104,105,99],
[106,103,0,110,117,117,116,90],
[103,114,101,0,110,104,108,93],
[102,105,94,101,0,107,105,107],
[106,107,94,107,104,0,104,97],
[93,106,95,103,106,107,0,81],
[116,112,121,118,104,114,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,104,115,113,109,115],
[99,0,103,100,100,101,101,95],
[103,108,0,98,111,106,106,102],
[107,111,113,0,99,106,113,113],
[96,111,100,112,0,106,104,100],
[98,110,105,105,105,0,102,104],
[102,110,105,98,107,109,0,109],
[96,116,109,98,111,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,103,102,108,120,99],
[110,0,101,98,103,105,124,122],
[115,110,0,104,117,111,126,116],
[108,113,107,0,116,100,115,111],
[109,108,94,95,0,101,114,104],
[103,106,100,111,110,0,116,107],
[91,87,85,96,97,95,0,106],
[112,89,95,100,107,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,89,136,123,106,120],
[107,0,90,91,119,108,104,123],
[102,121,0,109,139,120,125,120],
[122,120,102,0,173,119,107,84],
[75,92,72,38,0,91,92,55],
[88,103,91,92,120,0,88,122],
[105,107,86,104,119,123,0,102],
[91,88,91,127,156,89,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,129,107,140,94,131,116],
[94,0,105,97,113,95,107,81],
[82,106,0,97,127,116,105,107],
[104,114,114,0,123,98,123,94],
[71,98,84,88,0,77,92,77],
[117,116,95,113,134,0,120,100],
[80,104,106,88,119,91,0,89],
[95,130,104,117,134,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,116,110,104,101,110],
[99,0,117,110,113,99,105,111],
[103,94,0,122,115,108,111,110],
[95,101,89,0,118,94,94,106],
[101,98,96,93,0,102,92,98],
[107,112,103,117,109,0,98,110],
[110,106,100,117,119,113,0,100],
[101,100,101,105,113,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,70,70,104,123,86],
[107,0,87,88,50,91,54,35],
[124,124,0,69,50,70,90,88],
[141,123,142,0,104,90,125,70],
[141,161,161,107,0,124,89,107],
[107,120,141,121,87,0,123,52],
[88,157,121,86,122,88,0,72],
[125,176,123,141,104,159,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,100,102,93,112,111],
[113,0,112,98,112,99,105,117],
[111,99,0,105,106,97,105,109],
[111,113,106,0,104,110,114,114],
[109,99,105,107,0,107,112,106],
[118,112,114,101,104,0,107,120],
[99,106,106,97,99,104,0,108],
[100,94,102,97,105,91,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,119,118,108,129,121,96],
[83,0,86,92,101,115,90,107],
[92,125,0,113,108,114,115,111],
[93,119,98,0,97,108,101,97],
[103,110,103,114,0,128,113,103],
[82,96,97,103,83,0,101,90],
[90,121,96,110,98,110,0,102],
[115,104,100,114,108,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,87,108,101,109,101],
[118,0,103,97,109,126,104,77],
[111,108,0,109,68,93,95,102],
[124,114,102,0,123,95,112,107],
[103,102,143,88,0,112,110,103],
[110,85,118,116,99,0,124,103],
[102,107,116,99,101,87,0,108],
[110,134,109,104,108,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,105,101,123,104,112],
[109,0,107,115,92,118,110,120],
[108,104,0,119,110,114,112,107],
[106,96,92,0,94,113,111,97],
[110,119,101,117,0,112,113,110],
[88,93,97,98,99,0,98,107],
[107,101,99,100,98,113,0,113],
[99,91,104,114,101,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,123,112,124,108,116,98],
[101,0,103,97,91,99,91,94],
[88,108,0,94,118,93,83,86],
[99,114,117,0,110,116,92,96],
[87,120,93,101,0,105,89,86],
[103,112,118,95,106,0,94,94],
[95,120,128,119,122,117,0,109],
[113,117,125,115,125,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,98,96,105,122,98],
[92,0,88,91,98,89,112,80],
[102,123,0,107,100,113,135,102],
[113,120,104,0,109,112,120,100],
[115,113,111,102,0,100,122,91],
[106,122,98,99,111,0,131,112],
[89,99,76,91,89,80,0,67],
[113,131,109,111,120,99,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,96,96,102,95,85],
[96,0,98,103,111,101,103,95],
[98,113,0,96,112,121,109,99],
[115,108,115,0,99,114,115,101],
[115,100,99,112,0,111,106,108],
[109,110,90,97,100,0,93,103],
[116,108,102,96,105,118,0,108],
[126,116,112,110,103,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,122,116,110,101,90],
[109,0,93,110,110,108,94,108],
[97,118,0,112,103,125,105,102],
[89,101,99,0,106,99,94,88],
[95,101,108,105,0,116,112,96],
[101,103,86,112,95,0,93,104],
[110,117,106,117,99,118,0,97],
[121,103,109,123,115,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,113,98,88,94,105],
[109,0,100,102,82,93,106,116],
[109,111,0,112,100,107,109,109],
[98,109,99,0,90,84,103,107],
[113,129,111,121,0,105,125,118],
[123,118,104,127,106,0,109,126],
[117,105,102,108,86,102,0,122],
[106,95,102,104,93,85,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,80,101,122,82,100],
[121,0,97,105,126,123,97,107],
[110,114,0,104,140,122,91,110],
[131,106,107,0,141,121,102,123],
[110,85,71,70,0,93,110,94],
[89,88,89,90,118,0,96,85],
[129,114,120,109,101,115,0,111],
[111,104,101,88,117,126,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,102,103,110,99,96,108],
[90,0,97,100,105,94,88,96],
[109,114,0,103,114,101,111,106],
[108,111,108,0,122,120,114,102],
[101,106,97,89,0,94,103,95],
[112,117,110,91,117,0,97,97],
[115,123,100,97,108,114,0,119],
[103,115,105,109,116,114,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,93,129,115,109,111,94],
[150,0,98,148,134,163,149,132],
[118,113,0,114,132,118,100,98],
[82,63,97,0,96,113,82,65],
[96,77,79,115,0,79,97,79],
[102,48,93,98,132,0,84,65],
[100,62,111,129,114,127,0,113],
[117,79,113,146,132,146,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,101,100,101,95,112],
[116,0,93,111,100,101,103,118],
[121,118,0,104,124,114,111,123],
[110,100,107,0,97,112,109,114],
[111,111,87,114,0,105,96,113],
[110,110,97,99,106,0,82,111],
[116,108,100,102,115,129,0,137],
[99,93,88,97,98,100,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,128,103,121,110,124,112],
[69,0,110,95,86,105,112,76],
[83,101,0,103,70,105,102,78],
[108,116,108,0,105,96,106,103],
[90,125,141,106,0,112,110,108],
[101,106,106,115,99,0,119,100],
[87,99,109,105,101,92,0,107],
[99,135,133,108,103,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,158,105,105,105,158],
[106,0,106,158,158,105,158,158],
[106,105,0,158,158,105,105,158],
[53,53,53,0,52,53,158,158],
[106,53,53,159,0,106,158,211],
[106,106,106,158,105,0,158,211],
[106,53,106,53,53,53,0,159],
[53,53,53,53,0,0,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,83,117,98,105,109,109],
[99,0,93,99,100,81,65,88],
[128,118,0,137,97,103,78,109],
[94,112,74,0,97,87,84,104],
[113,111,114,114,0,114,72,113],
[106,130,108,124,97,0,114,104],
[102,146,133,127,139,97,0,117],
[102,123,102,107,98,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,103,117,110,102,116,136],
[86,0,108,120,99,101,109,120],
[108,103,0,127,123,108,107,125],
[94,91,84,0,92,76,115,106],
[101,112,88,119,0,105,103,121],
[109,110,103,135,106,0,123,112],
[95,102,104,96,108,88,0,117],
[75,91,86,105,90,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,111,100,100,95,107],
[116,0,98,116,117,106,105,103],
[112,113,0,124,102,107,110,99],
[100,95,87,0,113,99,87,101],
[111,94,109,98,0,112,97,101],
[111,105,104,112,99,0,99,100],
[116,106,101,124,114,112,0,114],
[104,108,112,110,110,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,100,104,101,103,104],
[105,0,100,108,103,111,111,102],
[108,111,0,110,103,109,107,108],
[111,103,101,0,106,105,123,115],
[107,108,108,105,0,105,106,101],
[110,100,102,106,106,0,109,102],
[108,100,104,88,105,102,0,100],
[107,109,103,96,110,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,111,100,108,97,95,103],
[118,0,114,102,118,108,116,92],
[100,97,0,106,103,100,111,99],
[111,109,105,0,114,107,106,107],
[103,93,108,97,0,98,95,98],
[114,103,111,104,113,0,98,85],
[116,95,100,105,116,113,0,96],
[108,119,112,104,113,126,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,104,112,109,111,95],
[112,0,87,102,98,92,102,94],
[117,124,0,122,125,97,115,111],
[107,109,89,0,102,107,110,88],
[99,113,86,109,0,91,111,93],
[102,119,114,104,120,0,110,106],
[100,109,96,101,100,101,0,91],
[116,117,100,123,118,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,108,104,130,98,111],
[102,0,109,106,96,103,90,119],
[120,102,0,123,102,128,121,120],
[103,105,88,0,90,123,111,96],
[107,115,109,121,0,116,101,112],
[81,108,83,88,95,0,106,107],
[113,121,90,100,110,105,0,113],
[100,92,91,115,99,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,129,108,97,112,110],
[99,0,109,111,108,109,106,111],
[101,102,0,101,101,95,103,99],
[82,100,110,0,105,98,86,95],
[103,103,110,106,0,104,109,103],
[114,102,116,113,107,0,103,120],
[99,105,108,125,102,108,0,113],
[101,100,112,116,108,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,97,112,112,114,101],
[108,0,97,104,110,112,106,107],
[101,114,0,102,110,116,123,109],
[114,107,109,0,116,115,102,104],
[99,101,101,95,0,102,96,102],
[99,99,95,96,109,0,111,107],
[97,105,88,109,115,100,0,96],
[110,104,102,107,109,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,113,102,103,117,109],
[101,0,105,114,107,97,120,99],
[99,106,0,99,106,101,108,106],
[98,97,112,0,98,102,109,101],
[109,104,105,113,0,113,119,99],
[108,114,110,109,98,0,111,101],
[94,91,103,102,92,100,0,94],
[102,112,105,110,112,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,108,112,114,110,136],
[96,0,113,109,118,121,123,111],
[109,98,0,123,114,130,106,129],
[103,102,88,0,102,126,104,137],
[99,93,97,109,0,110,87,109],
[97,90,81,85,101,0,113,116],
[101,88,105,107,124,98,0,124],
[75,100,82,74,102,95,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,87,110,103,98,107,102],
[103,0,117,99,136,122,118,110],
[124,94,0,120,117,105,135,116],
[101,112,91,0,117,88,113,86],
[108,75,94,94,0,81,90,68],
[113,89,106,123,130,0,113,124],
[104,93,76,98,121,98,0,101],
[109,101,95,125,143,87,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,100,107,107,126,122],
[110,0,110,97,109,115,122,120],
[100,101,0,93,104,119,112,122],
[111,114,118,0,116,105,124,128],
[104,102,107,95,0,107,113,109],
[104,96,92,106,104,0,107,116],
[85,89,99,87,98,104,0,107],
[89,91,89,83,102,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,102,114,102,113,104],
[105,0,107,101,108,109,106,111],
[102,104,0,104,104,96,95,101],
[109,110,107,0,119,101,111,107],
[97,103,107,92,0,98,110,102],
[109,102,115,110,113,0,113,115],
[98,105,116,100,101,98,0,100],
[107,100,110,104,109,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,110,126,98,102,145],
[93,0,115,101,114,122,83,126],
[93,96,0,70,101,86,59,118],
[101,110,141,0,114,98,116,122],
[85,97,110,97,0,101,71,118],
[113,89,125,113,110,0,93,135],
[109,128,152,95,140,118,0,148],
[66,85,93,89,93,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,121,107,111,102,125,105],
[97,0,116,106,104,102,125,109],
[90,95,0,105,97,100,105,90],
[104,105,106,0,115,93,112,93],
[100,107,114,96,0,92,108,104],
[109,109,111,118,119,0,131,94],
[86,86,106,99,103,80,0,93],
[106,102,121,118,107,117,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,113,111,112,130,113,102],
[76,0,112,91,90,129,98,110],
[98,99,0,94,93,116,93,105],
[100,120,117,0,110,99,117,82],
[99,121,118,101,0,138,123,89],
[81,82,95,112,73,0,114,78],
[98,113,118,94,88,97,0,70],
[109,101,106,129,122,133,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,111,102,122,116,119],
[109,0,99,109,100,118,117,112],
[107,112,0,101,103,110,119,102],
[100,102,110,0,102,102,109,110],
[109,111,108,109,0,115,123,105],
[89,93,101,109,96,0,122,100],
[95,94,92,102,88,89,0,100],
[92,99,109,101,106,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,126,119,127,114,102],
[99,0,100,109,103,124,99,111],
[98,111,0,106,111,130,105,109],
[85,102,105,0,113,118,101,85],
[92,108,100,98,0,123,105,97],
[84,87,81,93,88,0,83,91],
[97,112,106,110,106,128,0,112],
[109,100,102,126,114,120,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,93,90,77,100,77,75],
[121,0,105,116,117,125,113,120],
[118,106,0,101,93,99,107,96],
[121,95,110,0,92,103,122,98],
[134,94,118,119,0,126,109,124],
[111,86,112,108,85,0,98,105],
[134,98,104,89,102,113,0,99],
[136,91,115,113,87,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,89,96,98,109,91,95],
[122,0,112,105,120,115,104,108],
[122,99,0,115,109,116,116,110],
[115,106,96,0,110,114,104,105],
[113,91,102,101,0,96,100,101],
[102,96,95,97,115,0,110,100],
[120,107,95,107,111,101,0,101],
[116,103,101,106,110,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,106,118,113,123,116],
[109,0,125,99,111,97,117,114],
[94,86,0,87,98,102,115,109],
[105,112,124,0,107,103,122,112],
[93,100,113,104,0,97,109,106],
[98,114,109,108,114,0,109,119],
[88,94,96,89,102,102,0,106],
[95,97,102,99,105,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,121,126,107,110,119],
[113,0,93,112,116,104,111,110],
[121,118,0,122,124,101,111,111],
[90,99,89,0,95,90,84,89],
[85,95,87,116,0,99,104,89],
[104,107,110,121,112,0,104,109],
[101,100,100,127,107,107,0,109],
[92,101,100,122,122,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,99,113,103,98,103],
[99,0,97,105,103,103,95,99],
[96,114,0,100,109,108,109,105],
[112,106,111,0,113,98,99,111],
[98,108,102,98,0,103,95,88],
[108,108,103,113,108,0,104,110],
[113,116,102,112,116,107,0,101],
[108,112,106,100,123,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,100,111,116,105,101],
[113,0,105,109,113,133,106,112],
[100,106,0,86,110,124,109,96],
[111,102,125,0,94,118,115,111],
[100,98,101,117,0,112,100,104],
[95,78,87,93,99,0,102,91],
[106,105,102,96,111,109,0,94],
[110,99,115,100,107,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,104,114,106,110,104],
[98,0,108,102,113,109,106,96],
[105,103,0,105,121,115,116,113],
[107,109,106,0,113,112,106,105],
[97,98,90,98,0,101,103,94],
[105,102,96,99,110,0,112,104],
[101,105,95,105,108,99,0,93],
[107,115,98,106,117,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,104,80,104,101,114,104],
[89,0,81,87,88,95,91,85],
[107,130,0,83,114,109,100,103],
[131,124,128,0,111,100,117,100],
[107,123,97,100,0,106,104,98],
[110,116,102,111,105,0,118,106],
[97,120,111,94,107,93,0,92],
[107,126,108,111,113,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,130,87,117,115,122,117],
[80,0,91,76,89,78,81,69],
[81,120,0,104,67,94,95,81],
[124,135,107,0,134,93,109,108],
[94,122,144,77,0,107,95,70],
[96,133,117,118,104,0,95,121],
[89,130,116,102,116,116,0,91],
[94,142,130,103,141,90,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,114,89,84,82,79],
[91,0,85,119,98,80,96,79],
[109,126,0,134,103,100,112,109],
[97,92,77,0,61,72,88,91],
[122,113,108,150,0,104,94,123],
[127,131,111,139,107,0,104,142],
[129,115,99,123,117,107,0,125],
[132,132,102,120,88,69,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,137,106,112,116,101],
[108,0,124,104,107,122,112,114],
[101,87,0,111,99,115,100,93],
[74,107,100,0,82,103,88,96],
[105,104,112,129,0,115,107,115],
[99,89,96,108,96,0,86,100],
[95,99,111,123,104,125,0,102],
[110,97,118,115,96,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,100,97,102,87,116,106],
[127,0,109,120,108,117,132,101],
[111,102,0,139,118,106,132,118],
[114,91,72,0,110,90,123,98],
[109,103,93,101,0,115,119,100],
[124,94,105,121,96,0,130,109],
[95,79,79,88,92,81,0,72],
[105,110,93,113,111,102,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,104,101,107,108,101],
[111,0,101,108,106,102,118,95],
[119,110,0,105,123,115,134,109],
[107,103,106,0,99,122,112,99],
[110,105,88,112,0,110,104,101],
[104,109,96,89,101,0,109,99],
[103,93,77,99,107,102,0,95],
[110,116,102,112,110,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,101,106,113,111,105],
[110,0,110,105,98,108,107,112],
[105,101,0,104,109,110,117,96],
[110,106,107,0,97,107,97,86],
[105,113,102,114,0,104,107,97],
[98,103,101,104,107,0,120,96],
[100,104,94,114,104,91,0,88],
[106,99,115,125,114,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,92,96,91,84,105],
[122,0,111,99,90,101,92,96],
[100,100,0,81,83,88,84,104],
[119,112,130,0,105,123,107,113],
[115,121,128,106,0,116,92,116],
[120,110,123,88,95,0,78,110],
[127,119,127,104,119,133,0,140],
[106,115,107,98,95,101,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,102,111,103,105,116],
[105,0,106,107,107,105,112,118],
[103,105,0,105,102,108,103,119],
[109,104,106,0,106,98,107,120],
[100,104,109,105,0,108,113,115],
[108,106,103,113,103,0,111,113],
[106,99,108,104,98,100,0,118],
[95,93,92,91,96,98,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,103,132,122,103,116],
[96,0,112,111,121,99,98,101],
[104,99,0,104,118,117,100,109],
[108,100,107,0,107,109,107,120],
[79,90,93,104,0,99,100,111],
[89,112,94,102,112,0,94,98],
[108,113,111,104,111,117,0,116],
[95,110,102,91,100,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,103,66,126,78,85,105],
[136,0,126,115,141,102,98,93],
[108,85,0,71,97,88,73,98],
[145,96,140,0,135,96,93,115],
[85,70,114,76,0,90,80,108],
[133,109,123,115,121,0,116,92],
[126,113,138,118,131,95,0,114],
[106,118,113,96,103,119,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,61,62,122,121,90,0],
[180,0,123,181,153,152,90,120],
[150,88,0,150,181,149,90,89],
[149,30,61,0,91,152,90,89],
[89,58,30,120,0,121,120,89],
[90,59,62,59,90,0,90,59],
[121,121,121,121,91,121,0,30],
[211,91,122,122,122,152,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,105,105,108,105,95],
[107,0,97,112,105,110,102,100],
[107,114,0,118,106,116,104,103],
[106,99,93,0,104,101,99,103],
[106,106,105,107,0,114,107,100],
[103,101,95,110,97,0,94,100],
[106,109,107,112,104,117,0,108],
[116,111,108,108,111,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,109,116,116,102,111],
[97,0,108,99,109,101,83,91],
[103,103,0,95,111,104,98,107],
[102,112,116,0,106,115,111,111],
[95,102,100,105,0,119,97,114],
[95,110,107,96,92,0,86,99],
[109,128,113,100,114,125,0,123],
[100,120,104,100,97,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,107,105,159,105,105,159],
[52,0,107,52,159,52,105,159],
[104,104,0,52,157,52,157,52],
[106,159,159,0,159,158,105,159],
[52,52,54,52,0,52,52,52],
[106,159,159,53,159,0,105,159],
[106,106,54,106,159,106,0,54],
[52,52,159,52,159,52,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,99,112,113,106,113],
[112,0,119,122,104,125,118,116],
[101,92,0,112,108,111,106,97],
[112,89,99,0,106,113,122,104],
[99,107,103,105,0,120,107,101],
[98,86,100,98,91,0,106,104],
[105,93,105,89,104,105,0,100],
[98,95,114,107,110,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,112,109,99,121,112],
[117,0,100,119,118,109,119,134],
[93,111,0,87,113,106,118,113],
[99,92,124,0,100,97,114,120],
[102,93,98,111,0,109,108,135],
[112,102,105,114,102,0,119,112],
[90,92,93,97,103,92,0,91],
[99,77,98,91,76,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,96,113,94,111,121],
[106,0,102,101,109,110,106,124],
[111,109,0,117,115,104,116,116],
[115,110,94,0,117,96,119,121],
[98,102,96,94,0,88,96,109],
[117,101,107,115,123,0,108,128],
[100,105,95,92,115,103,0,106],
[90,87,95,90,102,83,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,105,108,104,91,111],
[111,0,104,103,105,112,97,106],
[99,107,0,96,98,108,90,89],
[106,108,115,0,110,113,102,107],
[103,106,113,101,0,109,113,115],
[107,99,103,98,102,0,88,95],
[120,114,121,109,98,123,0,103],
[100,105,122,104,96,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,69,106,123,87,109,98],
[118,0,94,112,142,118,111,126],
[142,117,0,121,167,104,121,151],
[105,99,90,0,138,107,128,144],
[88,69,44,73,0,85,81,118],
[124,93,107,104,126,0,119,108],
[102,100,90,83,130,92,0,123],
[113,85,60,67,93,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,117,101,113,103,95],
[112,0,104,95,111,85,120,94],
[108,107,0,101,113,101,108,107],
[94,116,110,0,100,118,99,100],
[110,100,98,111,0,103,109,98],
[98,126,110,93,108,0,117,104],
[108,91,103,112,102,94,0,103],
[116,117,104,111,113,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,111,110,110,104,97],
[103,0,97,106,98,107,102,95],
[96,114,0,103,92,107,95,99],
[100,105,108,0,111,104,94,107],
[101,113,119,100,0,120,104,111],
[101,104,104,107,91,0,88,105],
[107,109,116,117,107,123,0,104],
[114,116,112,104,100,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,111,102,102,92,97],
[116,0,127,88,136,121,97,130],
[99,84,0,91,100,92,87,87],
[100,123,120,0,103,119,109,121],
[109,75,111,108,0,102,90,113],
[109,90,119,92,109,0,96,103],
[119,114,124,102,121,115,0,137],
[114,81,124,90,98,108,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,102,102,102,103,114,108],
[90,0,93,101,111,107,113,100],
[109,118,0,101,115,111,115,116],
[109,110,110,0,122,102,111,109],
[109,100,96,89,0,101,102,97],
[108,104,100,109,110,0,109,109],
[97,98,96,100,109,102,0,107],
[103,111,95,102,114,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,100,102,101,80,114],
[114,0,121,108,109,104,94,109],
[109,90,0,100,102,120,99,106],
[111,103,111,0,103,110,107,97],
[109,102,109,108,0,109,92,107],
[110,107,91,101,102,0,89,103],
[131,117,112,104,119,122,0,119],
[97,102,105,114,104,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,108,91,112,123,78],
[103,0,103,107,105,126,102,111],
[119,108,0,119,94,111,114,103],
[103,104,92,0,84,103,98,84],
[120,106,117,127,0,106,103,98],
[99,85,100,108,105,0,104,108],
[88,109,97,113,108,107,0,100],
[133,100,108,127,113,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,121,107,104,85,108,124],
[110,0,110,110,112,93,98,111],
[90,101,0,125,108,111,86,118],
[104,101,86,0,92,90,103,120],
[107,99,103,119,0,86,105,121],
[126,118,100,121,125,0,114,118],
[103,113,125,108,106,97,0,109],
[87,100,93,91,90,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,110,107,80,115,116,115],
[80,0,115,91,112,122,117,120],
[101,96,0,90,105,97,126,139],
[104,120,121,0,111,118,132,129],
[131,99,106,100,0,79,135,112],
[96,89,114,93,132,0,101,119],
[95,94,85,79,76,110,0,87],
[96,91,72,82,99,92,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,106,122,120,112,104],
[107,0,93,107,124,98,102,103],
[112,118,0,119,124,119,109,103],
[105,104,92,0,113,95,95,102],
[89,87,87,98,0,95,101,89],
[91,113,92,116,116,0,127,110],
[99,109,102,116,110,84,0,99],
[107,108,108,109,122,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,108,98,106,99,107],
[99,0,93,103,84,93,105,109],
[110,118,0,123,103,101,108,119],
[103,108,88,0,106,97,99,107],
[113,127,108,105,0,98,100,116],
[105,118,110,114,113,0,99,124],
[112,106,103,112,111,112,0,118],
[104,102,92,104,95,87,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,111,94,99,112,110],
[94,0,101,98,100,105,93,105],
[116,110,0,98,106,115,108,105],
[100,113,113,0,108,104,97,105],
[117,111,105,103,0,115,107,109],
[112,106,96,107,96,0,107,101],
[99,118,103,114,104,104,0,110],
[101,106,106,106,102,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,115,118,97,108,107],
[108,0,105,114,115,104,96,108],
[116,106,0,108,125,117,107,105],
[96,97,103,0,117,118,107,91],
[93,96,86,94,0,101,85,98],
[114,107,94,93,110,0,93,101],
[103,115,104,104,126,118,0,108],
[104,103,106,120,113,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,102,105,98,117,95],
[117,0,107,110,105,114,120,114],
[110,104,0,104,104,109,119,103],
[109,101,107,0,103,103,112,99],
[106,106,107,108,0,94,114,96],
[113,97,102,108,117,0,129,106],
[94,91,92,99,97,82,0,100],
[116,97,108,112,115,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,88,91,95,99,101],
[115,0,108,102,107,101,114,112],
[109,103,0,105,94,106,97,114],
[123,109,106,0,104,108,105,110],
[120,104,117,107,0,110,98,120],
[116,110,105,103,101,0,103,110],
[112,97,114,106,113,108,0,115],
[110,99,97,101,91,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,99,104,111,114,102],
[100,0,102,90,98,98,110,95],
[103,109,0,102,108,101,116,106],
[112,121,109,0,117,120,124,101],
[107,113,103,94,0,96,113,101],
[100,113,110,91,115,0,114,113],
[97,101,95,87,98,97,0,92],
[109,116,105,110,110,98,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,112,105,116,103,104],
[101,0,115,104,134,104,73,91],
[96,96,0,96,128,89,107,107],
[99,107,115,0,114,112,94,81],
[106,77,83,97,0,83,111,68],
[95,107,122,99,128,0,117,67],
[108,138,104,117,100,94,0,88],
[107,120,104,130,143,144,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,93,98,118,116,116,97],
[93,0,114,107,97,145,107,108],
[118,97,0,109,128,157,140,118],
[113,104,102,0,94,124,94,116],
[93,114,83,117,0,126,93,119],
[95,66,54,87,85,0,74,77],
[95,104,71,117,118,137,0,98],
[114,103,93,95,92,134,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,119,105,116,111,101],
[99,0,98,95,107,90,104,98],
[97,113,0,93,100,114,109,101],
[92,116,118,0,108,95,104,106],
[106,104,111,103,0,109,107,116],
[95,121,97,116,102,0,119,96],
[100,107,102,107,104,92,0,105],
[110,113,110,105,95,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,86,105,99,125,111],
[116,0,119,113,103,96,124,116],
[109,92,0,75,116,83,108,120],
[125,98,136,0,106,105,127,128],
[106,108,95,105,0,113,118,119],
[112,115,128,106,98,0,116,119],
[86,87,103,84,93,95,0,104],
[100,95,91,83,92,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,90,88,88,124,69],
[106,0,106,89,107,90,140,71],
[89,105,0,71,71,89,125,69],
[121,122,140,0,88,121,122,103],
[123,104,140,123,0,124,176,139],
[123,121,122,90,87,0,121,104],
[87,71,86,89,35,90,0,54],
[142,140,142,108,72,107,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,89,96,85,119,101,115],
[130,0,99,97,97,95,101,121],
[122,112,0,103,112,111,118,92],
[115,114,108,0,97,127,126,103],
[126,114,99,114,0,121,115,102],
[92,116,100,84,90,0,120,115],
[110,110,93,85,96,91,0,106],
[96,90,119,108,109,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,95,103,105,104,102],
[112,0,107,106,114,105,104,111],
[111,104,0,105,107,111,107,99],
[116,105,106,0,114,115,109,106],
[108,97,104,97,0,113,114,100],
[106,106,100,96,98,0,99,101],
[107,107,104,102,97,112,0,110],
[109,100,112,105,111,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,114,93,105,125,93],
[101,0,107,111,99,115,101,80],
[102,104,0,109,102,111,111,105],
[97,100,102,0,84,101,97,82],
[118,112,109,127,0,105,115,125],
[106,96,100,110,106,0,103,83],
[86,110,100,114,96,108,0,104],
[118,131,106,129,86,128,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,124,137,152,91,137],
[92,0,110,78,121,137,137,122],
[116,101,0,121,136,149,136,120],
[87,133,90,0,103,132,89,136],
[74,90,75,108,0,104,105,92],
[59,74,62,79,107,0,92,108],
[120,74,75,122,106,119,0,92],
[74,89,91,75,119,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,94,99,110,109,99],
[102,0,108,122,98,90,98,95],
[92,103,0,88,80,89,106,89],
[117,89,123,0,96,109,117,116],
[112,113,131,115,0,104,122,112],
[101,121,122,102,107,0,99,103],
[102,113,105,94,89,112,0,104],
[112,116,122,95,99,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,111,109,93,124,85],
[97,0,111,102,78,81,99,91],
[102,100,0,103,92,103,86,82],
[100,109,108,0,81,94,80,107],
[102,133,119,130,0,114,112,107],
[118,130,108,117,97,0,113,112],
[87,112,125,131,99,98,0,84],
[126,120,129,104,104,99,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,103,102,101,106,111],
[104,0,124,104,118,114,111,114],
[94,87,0,95,95,98,89,96],
[108,107,116,0,101,111,113,112],
[109,93,116,110,0,112,106,111],
[110,97,113,100,99,0,106,108],
[105,100,122,98,105,105,0,113],
[100,97,115,99,100,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,86,104,127,105,112],
[102,0,121,118,122,141,111,105],
[102,90,0,110,117,122,108,97],
[125,93,101,0,105,131,107,102],
[107,89,94,106,0,104,93,95],
[84,70,89,80,107,0,81,78],
[106,100,103,104,118,130,0,89],
[99,106,114,109,116,133,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,126,128,102,105,101],
[108,0,108,115,110,100,92,97],
[107,103,0,111,112,101,102,106],
[85,96,100,0,102,95,89,95],
[83,101,99,109,0,89,79,92],
[109,111,110,116,122,0,96,104],
[106,119,109,122,132,115,0,99],
[110,114,105,116,119,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,110,110,103,108,107],
[103,0,117,108,112,107,129,117],
[90,94,0,84,91,103,105,88],
[101,103,127,0,98,106,118,116],
[101,99,120,113,0,107,104,94],
[108,104,108,105,104,0,106,98],
[103,82,106,93,107,105,0,92],
[104,94,123,95,117,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,86,85,110,94,113],
[115,0,102,109,105,107,91,104],
[113,109,0,83,90,107,84,115],
[125,102,128,0,121,125,101,118],
[126,106,121,90,0,118,111,115],
[101,104,104,86,93,0,95,112],
[117,120,127,110,100,116,0,127],
[98,107,96,93,96,99,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,103,98,100,93,115],
[107,0,115,110,100,97,105,118],
[99,96,0,99,97,94,92,108],
[108,101,112,0,101,95,97,110],
[113,111,114,110,0,98,106,110],
[111,114,117,116,113,0,95,106],
[118,106,119,114,105,116,0,111],
[96,93,103,101,101,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,101,108,99,96,104,109],
[84,0,88,85,96,84,88,90],
[110,123,0,110,101,104,105,118],
[103,126,101,0,110,99,119,101],
[112,115,110,101,0,103,108,110],
[115,127,107,112,108,0,101,107],
[107,123,106,92,103,110,0,117],
[102,121,93,110,101,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,127,122,81,100,96],
[107,0,107,103,109,87,105,92],
[107,104,0,99,118,69,121,104],
[84,108,112,0,118,76,90,103],
[89,102,93,93,0,70,87,112],
[130,124,142,135,141,0,103,146],
[111,106,90,121,124,108,0,129],
[115,119,107,108,99,65,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,95,109,103,96,104],
[109,0,109,107,117,101,106,108],
[109,102,0,106,99,110,110,102],
[116,104,105,0,104,106,109,109],
[102,94,112,107,0,97,101,101],
[108,110,101,105,114,0,105,117],
[115,105,101,102,110,106,0,106],
[107,103,109,102,110,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,81,100,87,85,105,86],
[126,0,105,119,106,104,126,110],
[130,106,0,124,95,106,118,112],
[111,92,87,0,86,87,96,91],
[124,105,116,125,0,105,110,106],
[126,107,105,124,106,0,123,108],
[106,85,93,115,101,88,0,85],
[125,101,99,120,105,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,148,128,131,131,104,123],
[109,0,134,125,110,90,102,101],
[63,77,0,97,100,96,83,96],
[83,86,114,0,97,93,67,96],
[80,101,111,114,0,128,98,115],
[80,121,115,118,83,0,97,112],
[107,109,128,144,113,114,0,105],
[88,110,115,115,96,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,120,118,107,119,114],
[95,0,97,99,106,98,102,112],
[109,114,0,98,116,101,101,112],
[91,112,113,0,117,101,107,112],
[93,105,95,94,0,95,90,93],
[104,113,110,110,116,0,115,125],
[92,109,110,104,121,96,0,117],
[97,99,99,99,118,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,104,102,106,121,101],
[102,0,101,115,110,99,103,105],
[92,110,0,111,109,90,111,100],
[107,96,100,0,107,101,111,109],
[109,101,102,104,0,96,101,110],
[105,112,121,110,115,0,107,101],
[90,108,100,100,110,104,0,97],
[110,106,111,102,101,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,97,112,94,118,90],
[106,0,104,83,114,101,103,89],
[110,107,0,108,122,112,108,93],
[114,128,103,0,124,119,128,119],
[99,97,89,87,0,98,101,99],
[117,110,99,92,113,0,108,103],
[93,108,103,83,110,103,0,100],
[121,122,118,92,112,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,101,96,105,109,104],
[107,0,105,107,102,108,128,100],
[111,106,0,99,107,101,121,114],
[110,104,112,0,115,108,119,111],
[115,109,104,96,0,106,106,108],
[106,103,110,103,105,0,115,110],
[102,83,90,92,105,96,0,105],
[107,111,97,100,103,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,107,95,101,103,118],
[101,0,100,93,96,101,93,107],
[116,111,0,93,98,106,118,97],
[104,118,118,0,112,119,114,126],
[116,115,113,99,0,103,105,107],
[110,110,105,92,108,0,104,108],
[108,118,93,97,106,107,0,112],
[93,104,114,85,104,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,126,100,100,108,104],
[103,0,101,116,110,102,110,97],
[107,110,0,114,98,105,103,97],
[85,95,97,0,96,96,105,94],
[111,101,113,115,0,107,110,108],
[111,109,106,115,104,0,112,97],
[103,101,108,106,101,99,0,91],
[107,114,114,117,103,114,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,115,131,105,108,106],
[103,0,108,105,121,115,108,117],
[118,103,0,121,131,101,106,110],
[96,106,90,0,111,109,116,121],
[80,90,80,100,0,82,86,93],
[106,96,110,102,129,0,105,129],
[103,103,105,95,125,106,0,108],
[105,94,101,90,118,82,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,98,106,112,106,113],
[110,0,108,117,110,120,101,108],
[109,103,0,104,110,112,115,117],
[113,94,107,0,118,118,110,109],
[105,101,101,93,0,116,103,108],
[99,91,99,93,95,0,93,110],
[105,110,96,101,108,118,0,118],
[98,103,94,102,103,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,58,79,20,59,117],
[133,0,154,76,174,115,118,152],
[152,57,0,96,115,96,76,115],
[153,135,115,0,135,137,97,153],
[132,37,96,76,0,40,38,113],
[191,96,115,74,171,0,97,171],
[152,93,135,114,173,114,0,153],
[94,59,96,58,98,40,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,115,101,110,108,116],
[112,0,113,109,110,104,111,118],
[105,98,0,101,99,113,104,118],
[96,102,110,0,104,111,99,117],
[110,101,112,107,0,109,113,117],
[101,107,98,100,102,0,103,112],
[103,100,107,112,98,108,0,109],
[95,93,93,94,94,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,108,105,99,115,108],
[88,0,96,96,94,96,103,88],
[99,115,0,100,111,98,123,102],
[103,115,111,0,107,108,111,112],
[106,117,100,104,0,88,120,116],
[112,115,113,103,123,0,117,97],
[96,108,88,100,91,94,0,103],
[103,123,109,99,95,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,105,115,108,111,112],
[104,0,102,111,108,99,114,107],
[104,109,0,106,107,106,106,107],
[106,100,105,0,99,108,113,108],
[96,103,104,112,0,95,105,93],
[103,112,105,103,116,0,107,111],
[100,97,105,98,106,104,0,96],
[99,104,104,103,118,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,116,111,94,119,87],
[107,0,78,87,85,66,130,88],
[95,133,0,134,95,93,138,101],
[95,124,77,0,114,74,139,98],
[100,126,116,97,0,123,137,108],
[117,145,118,137,88,0,130,119],
[92,81,73,72,74,81,0,88],
[124,123,110,113,103,92,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,101,102,105,111,98],
[103,0,84,111,86,114,102,93],
[118,127,0,126,109,122,115,105],
[110,100,85,0,101,102,100,103],
[109,125,102,110,0,121,106,112],
[106,97,89,109,90,0,111,96],
[100,109,96,111,105,100,0,98],
[113,118,106,108,99,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,126,112,112,115,93],
[102,0,125,121,112,112,114,98],
[94,86,0,97,90,92,106,109],
[85,90,114,0,113,93,114,91],
[99,99,121,98,0,96,117,80],
[99,99,119,118,115,0,105,83],
[96,97,105,97,94,106,0,70],
[118,113,102,120,131,128,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,92,105,104,109,113],
[110,0,111,87,96,97,92,113],
[116,100,0,107,103,104,102,109],
[119,124,104,0,124,119,121,123],
[106,115,108,87,0,91,122,121],
[107,114,107,92,120,0,110,122],
[102,119,109,90,89,101,0,112],
[98,98,102,88,90,89,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,112,129,90,109,111],
[115,0,118,124,115,119,102,112],
[103,93,0,105,102,115,102,107],
[99,87,106,0,117,95,105,104],
[82,96,109,94,0,109,104,102],
[121,92,96,116,102,0,115,106],
[102,109,109,106,107,96,0,113],
[100,99,104,107,109,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,123,89,121,123,111,118],
[94,0,107,100,79,95,98,104],
[88,104,0,92,85,83,115,100],
[122,111,119,0,108,98,102,108],
[90,132,126,103,0,96,108,109],
[88,116,128,113,115,0,113,117],
[100,113,96,109,103,98,0,119],
[93,107,111,103,102,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,103,106,115,110,118],
[106,0,92,98,100,108,94,116],
[101,119,0,101,88,113,103,102],
[108,113,110,0,89,118,95,99],
[105,111,123,122,0,122,97,112],
[96,103,98,93,89,0,80,110],
[101,117,108,116,114,131,0,118],
[93,95,109,112,99,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,112,102,96,116,96,104],
[92,0,112,99,92,116,105,94],
[99,99,0,106,98,106,85,98],
[109,112,105,0,110,125,106,103],
[115,119,113,101,0,109,111,130],
[95,95,105,86,102,0,101,90],
[115,106,126,105,100,110,0,114],
[107,117,113,108,81,121,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,110,101,119,110,108],
[112,0,116,126,119,112,105,118],
[100,95,0,105,99,106,98,92],
[101,85,106,0,104,110,101,111],
[110,92,112,107,0,120,107,105],
[92,99,105,101,91,0,100,110],
[101,106,113,110,104,111,0,106],
[103,93,119,100,106,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,106,97,101,112,106],
[101,0,105,103,107,103,110,84],
[102,106,0,100,98,105,101,88],
[105,108,111,0,102,110,109,112],
[114,104,113,109,0,112,102,101],
[110,108,106,101,99,0,100,99],
[99,101,110,102,109,111,0,89],
[105,127,123,99,110,112,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,91,91,116,109,85],
[83,0,101,104,96,107,87,105],
[90,110,0,107,98,108,87,104],
[120,107,104,0,116,108,118,108],
[120,115,113,95,0,102,96,109],
[95,104,103,103,109,0,116,89],
[102,124,124,93,115,95,0,112],
[126,106,107,103,102,122,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,105,114,99,102,116],
[91,0,90,98,98,87,93,106],
[105,121,0,119,118,120,102,119],
[106,113,92,0,98,97,93,98],
[97,113,93,113,0,107,95,106],
[112,124,91,114,104,0,109,125],
[109,118,109,118,116,102,0,116],
[95,105,92,113,105,86,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,107,108,105,94,98],
[109,0,100,104,105,94,91,92],
[97,111,0,108,91,111,103,104],
[104,107,103,0,101,102,99,104],
[103,106,120,110,0,108,106,110],
[106,117,100,109,103,0,101,107],
[117,120,108,112,105,110,0,104],
[113,119,107,107,101,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,114,102,106,97,99],
[116,0,104,108,103,97,95,117],
[118,107,0,108,99,106,106,111],
[97,103,103,0,110,104,95,105],
[109,108,112,101,0,104,105,109],
[105,114,105,107,107,0,104,112],
[114,116,105,116,106,107,0,122],
[112,94,100,106,102,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,102,108,100,92,98],
[116,0,109,112,113,105,102,101],
[114,102,0,105,105,101,105,100],
[109,99,106,0,120,106,106,107],
[103,98,106,91,0,97,88,97],
[111,106,110,105,114,0,115,108],
[119,109,106,105,123,96,0,110],
[113,110,111,104,114,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,113,125,122,111,113],
[91,0,103,107,98,120,110,100],
[108,108,0,105,126,130,101,115],
[98,104,106,0,108,117,104,104],
[86,113,85,103,0,113,103,110],
[89,91,81,94,98,0,101,96],
[100,101,110,107,108,110,0,105],
[98,111,96,107,101,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,112,117,120,105,98,110],
[65,0,91,65,99,105,104,103],
[99,120,0,96,108,95,83,88],
[94,146,115,0,101,118,90,105],
[91,112,103,110,0,82,89,94],
[106,106,116,93,129,0,100,93],
[113,107,128,121,122,111,0,104],
[101,108,123,106,117,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,115,107,103,114,102,94],
[93,0,90,97,97,90,98,91],
[96,121,0,95,116,117,120,111],
[104,114,116,0,110,111,113,92],
[108,114,95,101,0,103,114,96],
[97,121,94,100,108,0,99,105],
[109,113,91,98,97,112,0,91],
[117,120,100,119,115,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,101,142,116,100,109],
[113,0,100,69,110,87,104,81],
[99,111,0,102,130,93,108,103],
[110,142,109,0,134,97,105,117],
[69,101,81,77,0,94,76,86],
[95,124,118,114,117,0,80,113],
[111,107,103,106,135,131,0,107],
[102,130,108,94,125,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,78,113,87,88,70],
[120,0,102,130,100,100,112,81],
[120,109,0,130,118,138,80,61],
[133,81,81,0,91,89,93,71],
[98,111,93,120,0,97,78,61],
[124,111,73,122,114,0,76,75],
[123,99,131,118,133,135,0,111],
[141,130,150,140,150,136,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,105,140,142,106,71,105],
[142,0,141,211,142,141,71,106],
[106,70,0,106,177,141,106,106],
[71,0,105,0,106,105,35,70],
[69,69,34,105,0,104,104,104],
[105,70,70,106,107,0,36,106],
[140,140,105,176,107,175,0,105],
[106,105,105,141,107,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,123,80,102,100,95],
[98,0,102,119,86,104,120,119],
[104,109,0,120,110,88,117,87],
[88,92,91,0,72,76,82,82],
[131,125,101,139,0,114,117,118],
[109,107,123,135,97,0,127,99],
[111,91,94,129,94,84,0,92],
[116,92,124,129,93,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,104,114,113,113,101],
[113,0,108,98,120,116,104,104],
[99,103,0,90,100,103,104,113],
[107,113,121,0,103,112,115,110],
[97,91,111,108,0,98,112,106],
[98,95,108,99,113,0,101,99],
[98,107,107,96,99,110,0,106],
[110,107,98,101,105,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,104,109,105,108,112],
[101,0,120,115,115,121,112,124],
[91,91,0,89,88,110,101,104],
[107,96,122,0,105,101,109,111],
[102,96,123,106,0,110,108,116],
[106,90,101,110,101,0,94,122],
[103,99,110,102,103,117,0,115],
[99,87,107,100,95,89,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,127,107,104,109,114],
[97,0,105,110,103,109,107,108],
[102,106,0,119,108,105,113,106],
[84,101,92,0,97,101,107,103],
[104,108,103,114,0,100,107,107],
[107,102,106,110,111,0,110,103],
[102,104,98,104,104,101,0,102],
[97,103,105,108,104,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,113,119,109,106,121],
[105,0,89,121,122,126,121,124],
[115,122,0,108,119,120,102,108],
[98,90,103,0,113,91,101,107],
[92,89,92,98,0,93,111,100],
[102,85,91,120,118,0,98,114],
[105,90,109,110,100,113,0,115],
[90,87,103,104,111,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,139,91,92,115,140,138],
[95,0,93,93,116,70,118,139],
[72,118,0,117,72,140,142,141],
[120,118,94,0,120,95,120,118],
[119,95,139,91,0,115,140,91],
[96,141,71,116,96,0,118,117],
[71,93,69,91,71,93,0,69],
[73,72,70,93,120,94,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,100,114,112,96,111],
[108,0,107,93,117,120,108,109],
[101,104,0,94,114,113,99,101],
[111,118,117,0,119,114,102,115],
[97,94,97,92,0,105,100,107],
[99,91,98,97,106,0,89,104],
[115,103,112,109,111,122,0,108],
[100,102,110,96,104,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,99,98,101,100,97],
[120,0,101,107,100,109,107,103],
[115,110,0,103,106,118,114,113],
[112,104,108,0,114,123,113,108],
[113,111,105,97,0,111,100,115],
[110,102,93,88,100,0,101,99],
[111,104,97,98,111,110,0,97],
[114,108,98,103,96,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,110,117,115,112,103],
[96,0,93,113,112,110,91,106],
[102,118,0,109,115,111,104,95],
[101,98,102,0,104,100,104,86],
[94,99,96,107,0,113,108,107],
[96,101,100,111,98,0,101,91],
[99,120,107,107,103,110,0,94],
[108,105,116,125,104,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,112,107,107,105,96],
[114,0,105,116,106,110,106,116],
[110,106,0,117,104,108,114,111],
[99,95,94,0,97,100,89,100],
[104,105,107,114,0,108,117,106],
[104,101,103,111,103,0,105,105],
[106,105,97,122,94,106,0,116],
[115,95,100,111,105,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,107,98,102,112,98],
[120,0,111,127,119,120,119,104],
[113,100,0,104,93,109,97,124],
[104,84,107,0,77,94,86,96],
[113,92,118,134,0,112,100,113],
[109,91,102,117,99,0,108,104],
[99,92,114,125,111,103,0,94],
[113,107,87,115,98,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,114,106,126,120,102,122],
[116,0,105,110,130,144,97,115],
[97,106,0,110,135,122,118,119],
[105,101,101,0,114,123,101,131],
[85,81,76,97,0,83,83,103],
[91,67,89,88,128,0,86,120],
[109,114,93,110,128,125,0,135],
[89,96,92,80,108,91,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,124,116,111,114,106],
[111,0,102,125,118,116,99,114],
[99,109,0,116,102,109,104,113],
[87,86,95,0,100,97,96,93],
[95,93,109,111,0,105,106,110],
[100,95,102,114,106,0,97,109],
[97,112,107,115,105,114,0,114],
[105,97,98,118,101,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,100,99,109,108,114],
[103,0,116,100,96,123,105,108],
[109,95,0,108,100,110,97,112],
[111,111,103,0,106,107,95,114],
[112,115,111,105,0,120,112,118],
[102,88,101,104,91,0,88,98],
[103,106,114,116,99,123,0,125],
[97,103,99,97,93,113,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,101,98,95,102,103],
[108,0,107,98,108,108,108,112],
[114,104,0,101,106,99,100,98],
[110,113,110,0,109,100,104,113],
[113,103,105,102,0,96,120,110],
[116,103,112,111,115,0,110,112],
[109,103,111,107,91,101,0,104],
[108,99,113,98,101,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,110,104,103,103,111],
[103,0,107,99,101,97,98,94],
[95,104,0,101,88,92,100,93],
[101,112,110,0,102,101,99,98],
[107,110,123,109,0,91,112,102],
[108,114,119,110,120,0,117,103],
[108,113,111,112,99,94,0,100],
[100,117,118,113,109,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,102,114,109,92,99,108],
[89,0,119,116,107,110,112,107],
[109,92,0,103,99,100,98,108],
[97,95,108,0,102,104,97,107],
[102,104,112,109,0,95,82,99],
[119,101,111,107,116,0,109,119],
[112,99,113,114,129,102,0,106],
[103,104,103,104,112,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,116,100,90,112,111,111],
[110,0,91,118,94,105,111,108],
[95,120,0,100,97,117,122,105],
[111,93,111,0,109,125,122,93],
[121,117,114,102,0,121,124,101],
[99,106,94,86,90,0,108,111],
[100,100,89,89,87,103,0,91],
[100,103,106,118,110,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,138,156,134,152,115,134],
[116,0,134,134,75,113,77,78],
[73,77,0,76,37,72,56,75],
[55,77,135,0,98,115,20,77],
[77,136,174,113,0,130,76,113],
[59,98,139,96,81,0,58,81],
[96,134,155,191,135,153,0,115],
[77,133,136,134,98,130,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,109,104,126,110,110],
[106,0,111,101,103,118,108,104],
[99,100,0,94,111,110,103,105],
[102,110,117,0,110,118,105,110],
[107,108,100,101,0,114,111,100],
[85,93,101,93,97,0,94,104],
[101,103,108,106,100,117,0,115],
[101,107,106,101,111,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,141,116,122,103,151,113],
[94,0,107,104,100,93,121,109],
[70,104,0,95,101,74,120,100],
[95,107,116,0,96,106,141,121],
[89,111,110,115,0,85,133,117],
[108,118,137,105,126,0,144,125],
[60,90,91,70,78,67,0,83],
[98,102,111,90,94,86,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,94,90,74,89,83,68],
[127,0,109,112,105,104,110,100],
[117,102,0,98,93,95,84,92],
[121,99,113,0,104,98,99,108],
[137,106,118,107,0,111,99,106],
[122,107,116,113,100,0,99,102],
[128,101,127,112,112,112,0,104],
[143,111,119,103,105,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,95,110,123,121,116,107],
[95,0,94,102,120,94,100,89],
[116,117,0,105,123,125,107,107],
[101,109,106,0,106,91,113,99],
[88,91,88,105,0,87,91,90],
[90,117,86,120,124,0,112,97],
[95,111,104,98,120,99,0,101],
[104,122,104,112,121,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,134,111,125,115,105,123],
[97,0,126,109,117,92,109,82],
[77,85,0,91,109,102,95,77],
[100,102,120,0,122,103,127,110],
[86,94,102,89,0,88,107,89],
[96,119,109,108,123,0,124,93],
[106,102,116,84,104,87,0,94],
[88,129,134,101,122,118,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,107,109,101,86,103],
[116,0,105,100,99,88,106,93],
[115,106,0,110,104,114,97,107],
[104,111,101,0,109,95,91,97],
[102,112,107,102,0,95,86,94],
[110,123,97,116,116,0,97,111],
[125,105,114,120,125,114,0,125],
[108,118,104,114,117,100,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,108,113,95,106,114],
[113,0,111,113,121,103,110,113],
[97,100,0,116,114,99,97,97],
[103,98,95,0,100,100,101,106],
[98,90,97,111,0,92,99,99],
[116,108,112,111,119,0,102,110],
[105,101,114,110,112,109,0,105],
[97,98,114,105,112,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,106,96,115,73,97],
[98,0,94,99,114,115,99,123],
[102,117,0,113,127,130,108,108],
[105,112,98,0,144,118,117,111],
[115,97,84,67,0,121,109,119],
[96,96,81,93,90,0,81,106],
[138,112,103,94,102,130,0,129],
[114,88,103,100,92,105,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,120,115,96,101,95],
[89,0,99,112,110,107,111,116],
[102,112,0,97,119,122,106,115],
[91,99,114,0,92,109,103,114],
[96,101,92,119,0,110,93,110],
[115,104,89,102,101,0,96,96],
[110,100,105,108,118,115,0,108],
[116,95,96,97,101,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,95,105,90,103,97],
[106,0,104,96,104,98,98,101],
[117,107,0,100,104,108,99,98],
[116,115,111,0,117,104,107,110],
[106,107,107,94,0,95,90,103],
[121,113,103,107,116,0,106,101],
[108,113,112,104,121,105,0,114],
[114,110,113,101,108,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,104,120,93,117,121],
[108,0,105,111,128,120,120,111],
[100,106,0,113,110,92,87,113],
[107,100,98,0,116,90,91,99],
[91,83,101,95,0,95,100,108],
[118,91,119,121,116,0,109,113],
[94,91,124,120,111,102,0,115],
[90,100,98,112,103,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,129,119,85,113,121,112],
[85,0,105,83,104,85,104,80],
[82,106,0,93,99,83,106,89],
[92,128,118,0,92,128,127,96],
[126,107,112,119,0,106,135,102],
[98,126,128,83,105,0,139,103],
[90,107,105,84,76,72,0,81],
[99,131,122,115,109,108,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,104,120,103,112,118],
[91,0,111,99,111,91,96,100],
[101,100,0,105,124,98,108,101],
[107,112,106,0,134,105,109,103],
[91,100,87,77,0,93,88,95],
[108,120,113,106,118,0,113,102],
[99,115,103,102,123,98,0,114],
[93,111,110,108,116,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,121,112,144,106,134,100],
[97,0,122,109,144,105,76,98],
[90,89,0,99,123,124,98,108],
[99,102,112,0,148,112,81,122],
[67,67,88,63,0,90,84,59],
[105,106,87,99,121,0,92,86],
[77,135,113,130,127,119,0,87],
[111,113,103,89,152,125,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,125,99,103,100,100],
[109,0,127,112,92,101,111,108],
[100,84,0,103,93,97,89,85],
[86,99,108,0,95,98,98,98],
[112,119,118,116,0,107,84,107],
[108,110,114,113,104,0,91,113],
[111,100,122,113,127,120,0,111],
[111,103,126,113,104,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,96,107,105,100,110],
[97,0,116,109,108,103,102,119],
[102,95,0,102,106,97,83,106],
[115,102,109,0,103,101,108,116],
[104,103,105,108,0,98,96,115],
[106,108,114,110,113,0,104,127],
[111,109,128,103,115,107,0,113],
[101,92,105,95,96,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,92,103,98,95,97],
[108,0,109,106,109,106,115,102],
[113,102,0,84,95,92,110,91],
[119,105,127,0,118,109,107,104],
[108,102,116,93,0,103,103,109],
[113,105,119,102,108,0,107,102],
[116,96,101,104,108,104,0,94],
[114,109,120,107,102,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,112,108,112,118,108],
[111,0,110,115,113,109,106,99],
[94,101,0,97,95,97,106,92],
[99,96,114,0,113,98,95,98],
[103,98,116,98,0,101,92,98],
[99,102,114,113,110,0,113,103],
[93,105,105,116,119,98,0,109],
[103,112,119,113,113,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,85,93,82,114,111,105],
[108,0,98,106,91,123,112,113],
[126,113,0,106,98,134,124,123],
[118,105,105,0,111,148,133,127],
[129,120,113,100,0,141,117,137],
[97,88,77,63,70,0,96,115],
[100,99,87,78,94,115,0,104],
[106,98,88,84,74,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,92,110,106,97,101],
[106,0,99,94,112,106,94,104],
[105,112,0,99,121,106,95,102],
[119,117,112,0,125,111,104,108],
[101,99,90,86,0,93,83,98],
[105,105,105,100,118,0,94,104],
[114,117,116,107,128,117,0,100],
[110,107,109,103,113,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,120,112,114,120,103],
[113,0,112,119,96,115,116,115],
[103,99,0,106,100,113,117,108],
[91,92,105,0,99,107,111,104],
[99,115,111,112,0,101,115,104],
[97,96,98,104,110,0,105,97],
[91,95,94,100,96,106,0,98],
[108,96,103,107,107,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,103,106,105,125,112],
[101,0,91,93,93,91,107,104],
[111,120,0,107,109,112,101,113],
[108,118,104,0,100,116,110,116],
[105,118,102,111,0,111,115,103],
[106,120,99,95,100,0,109,119],
[86,104,110,101,96,102,0,97],
[99,107,98,95,108,92,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,123,119,96,99,114,112],
[96,0,102,109,97,107,105,110],
[88,109,0,114,90,86,89,102],
[92,102,97,0,91,97,106,96],
[115,114,121,120,0,114,100,111],
[112,104,125,114,97,0,109,112],
[97,106,122,105,111,102,0,108],
[99,101,109,115,100,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,98,109,97,105,98,115],
[93,0,104,108,96,113,97,109],
[113,107,0,113,109,114,121,103],
[102,103,98,0,99,102,99,102],
[114,115,102,112,0,110,100,103],
[106,98,97,109,101,0,106,100],
[113,114,90,112,111,105,0,114],
[96,102,108,109,108,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,120,86,109,91,115,102],
[124,0,131,106,120,112,119,102],
[91,80,0,91,99,81,97,73],
[125,105,120,0,117,110,131,109],
[102,91,112,94,0,83,103,82],
[120,99,130,101,128,0,118,102],
[96,92,114,80,108,93,0,80],
[109,109,138,102,129,109,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,110,115,102,100,105],
[108,0,100,114,107,97,95,102],
[105,111,0,100,121,117,105,120],
[101,97,111,0,111,93,85,98],
[96,104,90,100,0,111,93,94],
[109,114,94,118,100,0,107,114],
[111,116,106,126,118,104,0,122],
[106,109,91,113,117,97,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,101,60,96,126,96,80],
[127,0,79,85,134,128,85,116],
[110,132,0,114,134,133,86,119],
[151,126,97,0,143,133,112,125],
[115,77,77,68,0,99,97,89],
[85,83,78,78,112,0,83,80],
[115,126,125,99,114,128,0,118],
[131,95,92,86,122,131,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,98,90,101,86,105,98],
[126,0,110,108,110,112,99,116],
[113,101,0,88,112,108,107,114],
[121,103,123,0,112,115,110,112],
[110,101,99,99,0,95,100,108],
[125,99,103,96,116,0,117,109],
[106,112,104,101,111,94,0,109],
[113,95,97,99,103,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,88,106,83,98,104],
[109,0,103,112,113,102,96,117],
[100,108,0,103,112,109,93,109],
[123,99,108,0,112,105,99,117],
[105,98,99,99,0,98,109,95],
[128,109,102,106,113,0,97,115],
[113,115,118,112,102,114,0,105],
[107,94,102,94,116,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,117,125,86,122,111],
[121,0,107,118,119,100,115,118],
[105,104,0,119,123,107,120,120],
[94,93,92,0,114,75,102,102],
[86,92,88,97,0,78,117,107],
[125,111,104,136,133,0,127,124],
[89,96,91,109,94,84,0,108],
[100,93,91,109,104,87,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,152,91,123,181,123,152],
[147,0,120,118,120,117,89,152],
[59,91,0,88,91,150,88,91],
[120,93,123,0,62,120,91,123],
[88,91,120,149,0,179,88,151],
[30,94,61,91,32,0,59,93],
[88,122,123,120,123,152,0,123],
[59,59,120,88,60,118,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,110,105,112,102,104],
[111,0,100,113,112,100,113,105],
[109,111,0,108,110,101,111,99],
[101,98,103,0,94,90,105,104],
[106,99,101,117,0,109,111,108],
[99,111,110,121,102,0,112,111],
[109,98,100,106,100,99,0,105],
[107,106,112,107,103,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,94,95,97,97,125],
[100,0,112,98,100,100,105,111],
[114,99,0,99,98,108,114,115],
[117,113,112,0,104,102,103,112],
[116,111,113,107,0,94,106,113],
[114,111,103,109,117,0,109,114],
[114,106,97,108,105,102,0,115],
[86,100,96,99,98,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,121,129,139,121,111,133],
[111,0,119,105,97,100,98,108],
[90,92,0,87,81,78,79,93],
[82,106,124,0,105,101,101,127],
[72,114,130,106,0,96,107,123],
[90,111,133,110,115,0,117,114],
[100,113,132,110,104,94,0,128],
[78,103,118,84,88,97,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,114,115,120,103,109],
[107,0,107,98,104,101,99,108],
[94,104,0,104,109,106,110,105],
[97,113,107,0,109,103,96,119],
[96,107,102,102,0,101,99,99],
[91,110,105,108,110,0,104,103],
[108,112,101,115,112,107,0,124],
[102,103,106,92,112,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,105,111,108,116,107],
[95,0,99,98,100,94,112,99],
[107,112,0,96,114,108,103,99],
[106,113,115,0,109,104,103,103],
[100,111,97,102,0,106,110,97],
[103,117,103,107,105,0,105,105],
[95,99,108,108,101,106,0,95],
[104,112,112,108,114,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,88,111,129,90,123,111],
[80,0,91,119,114,84,106,82],
[123,120,0,137,127,134,128,102],
[100,92,74,0,108,95,132,95],
[82,97,84,103,0,69,99,109],
[121,127,77,116,142,0,135,108],
[88,105,83,79,112,76,0,94],
[100,129,109,116,102,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,98,94,94,99,100],
[109,0,107,94,101,93,110,82],
[112,104,0,85,102,96,100,91],
[113,117,126,0,101,100,114,108],
[117,110,109,110,0,107,110,96],
[117,118,115,111,104,0,109,104],
[112,101,111,97,101,102,0,101],
[111,129,120,103,115,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,109,93,121,90,86,85],
[123,0,124,117,159,101,92,110],
[102,87,0,83,151,93,102,90],
[118,94,128,0,150,77,111,96],
[90,52,60,61,0,65,80,61],
[121,110,118,134,146,0,101,116],
[125,119,109,100,131,110,0,97],
[126,101,121,115,150,95,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,107,91,113,107,103],
[97,0,103,98,92,107,97,106],
[102,108,0,105,98,107,103,113],
[104,113,106,0,85,104,103,95],
[120,119,113,126,0,112,111,105],
[98,104,104,107,99,0,101,107],
[104,114,108,108,100,110,0,106],
[108,105,98,116,106,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,114,109,97,107,121],
[116,0,101,104,93,103,115,125],
[106,110,0,118,103,101,96,127],
[97,107,93,0,105,94,95,106],
[102,118,108,106,0,109,106,142],
[114,108,110,117,102,0,101,122],
[104,96,115,116,105,110,0,125],
[90,86,84,105,69,89,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,121,118,131,128,105],
[104,0,104,134,104,113,127,111],
[88,107,0,130,115,83,116,105],
[90,77,81,0,74,90,110,86],
[93,107,96,137,0,113,135,95],
[80,98,128,121,98,0,107,101],
[83,84,95,101,76,104,0,85],
[106,100,106,125,116,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,115,97,99,101,122,112],
[121,0,124,100,107,120,116,111],
[96,87,0,87,98,96,102,101],
[114,111,124,0,105,114,115,116],
[112,104,113,106,0,105,110,117],
[110,91,115,97,106,0,114,121],
[89,95,109,96,101,97,0,112],
[99,100,110,95,94,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,97,105,97,105,113],
[116,0,109,120,104,112,100,125],
[110,102,0,107,111,115,120,132],
[114,91,104,0,99,101,118,136],
[106,107,100,112,0,107,97,131],
[114,99,96,110,104,0,107,114],
[106,111,91,93,114,104,0,121],
[98,86,79,75,80,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,95,98,96,84,96],
[109,0,99,110,102,106,94,87],
[117,112,0,107,108,111,94,104],
[116,101,104,0,109,118,106,105],
[113,109,103,102,0,108,96,88],
[115,105,100,93,103,0,93,102],
[127,117,117,105,115,118,0,114],
[115,124,107,106,123,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,116,118,113,112,105],
[103,0,108,100,96,96,92,97],
[108,103,0,102,104,115,100,108],
[95,111,109,0,110,103,96,101],
[93,115,107,101,0,114,97,100],
[98,115,96,108,97,0,105,103],
[99,119,111,115,114,106,0,115],
[106,114,103,110,111,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,124,101,108,112,147,100],
[112,0,114,93,107,113,145,92],
[87,97,0,90,93,79,125,77],
[110,118,121,0,112,117,142,95],
[103,104,118,99,0,88,127,104],
[99,98,132,94,123,0,127,108],
[64,66,86,69,84,84,0,91],
[111,119,134,116,107,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,125,134,121,113,102,92],
[82,0,109,95,91,72,111,94],
[86,102,0,102,110,93,95,92],
[77,116,109,0,94,69,78,83],
[90,120,101,117,0,93,90,97],
[98,139,118,142,118,0,118,108],
[109,100,116,133,121,93,0,110],
[119,117,119,128,114,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,123,109,110,88,105],
[99,0,112,115,111,96,102,97],
[96,99,0,108,97,90,102,110],
[88,96,103,0,95,80,97,97],
[102,100,114,116,0,98,101,102],
[101,115,121,131,113,0,110,108],
[123,109,109,114,110,101,0,96],
[106,114,101,114,109,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,96,100,104,92,111],
[114,0,112,117,108,106,101,116],
[113,99,0,111,111,102,97,118],
[115,94,100,0,115,106,106,111],
[111,103,100,96,0,110,107,118],
[107,105,109,105,101,0,92,116],
[119,110,114,105,104,119,0,117],
[100,95,93,100,93,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,106,106,99,105,116],
[97,0,92,98,94,99,102,105],
[109,119,0,106,99,100,100,114],
[105,113,105,0,103,99,114,117],
[105,117,112,108,0,99,109,113],
[112,112,111,112,112,0,103,118],
[106,109,111,97,102,108,0,109],
[95,106,97,94,98,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,105,112,91,113,113],
[104,0,107,121,132,116,127,124],
[94,104,0,114,126,102,131,117],
[106,90,97,0,124,107,110,101],
[99,79,85,87,0,97,96,84],
[120,95,109,104,114,0,103,115],
[98,84,80,101,115,108,0,112],
[98,87,94,110,127,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,115,95,111,124,107],
[102,0,99,113,109,121,120,112],
[95,112,0,103,98,109,118,91],
[96,98,108,0,98,115,114,92],
[116,102,113,113,0,104,131,110],
[100,90,102,96,107,0,112,81],
[87,91,93,97,80,99,0,96],
[104,99,120,119,101,130,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,103,133,137,123,131],
[91,0,94,118,111,119,101,93],
[92,117,0,106,121,112,113,115],
[108,93,105,0,121,113,112,135],
[78,100,90,90,0,88,101,101],
[74,92,99,98,123,0,98,100],
[88,110,98,99,110,113,0,112],
[80,118,96,76,110,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,107,119,121,116,115],
[103,0,101,105,103,130,109,102],
[111,110,0,107,102,122,127,123],
[104,106,104,0,97,121,113,117],
[92,108,109,114,0,123,113,116],
[90,81,89,90,88,0,106,101],
[95,102,84,98,98,105,0,112],
[96,109,88,94,95,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,133,123,126,112,122,108],
[106,0,97,134,128,114,135,128],
[78,114,0,122,121,95,111,100],
[88,77,89,0,108,77,102,92],
[85,83,90,103,0,105,121,72],
[99,97,116,134,106,0,116,116],
[89,76,100,109,90,95,0,91],
[103,83,111,119,139,95,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,122,90,111,113,91],
[112,0,119,107,102,101,120,100],
[110,92,0,122,109,104,126,101],
[89,104,89,0,85,99,109,87],
[121,109,102,126,0,104,125,109],
[100,110,107,112,107,0,123,95],
[98,91,85,102,86,88,0,106],
[120,111,110,124,102,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,102,106,109,113,117],
[101,0,100,95,102,90,103,96],
[105,111,0,104,113,90,122,105],
[109,116,107,0,114,107,123,105],
[105,109,98,97,0,84,112,93],
[102,121,121,104,127,0,131,114],
[98,108,89,88,99,80,0,91],
[94,115,106,106,118,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,106,106,82,98,77,90],
[86,0,93,83,76,93,71,94],
[105,118,0,75,113,95,107,103],
[105,128,136,0,76,83,89,84],
[129,135,98,135,0,74,98,99],
[113,118,116,128,137,0,98,109],
[134,140,104,122,113,113,0,131],
[121,117,108,127,112,102,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,106,101,108,106,114],
[88,0,102,94,97,94,73,114],
[94,109,0,112,98,116,99,118],
[105,117,99,0,116,115,102,106],
[110,114,113,95,0,108,96,99],
[103,117,95,96,103,0,77,114],
[105,138,112,109,115,134,0,131],
[97,97,93,105,112,97,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,107,103,112,101,106],
[110,0,119,101,118,114,109,122],
[101,92,0,92,102,92,86,95],
[104,110,119,0,119,111,112,126],
[108,93,109,92,0,109,103,111],
[99,97,119,100,102,0,95,115],
[110,102,125,99,108,116,0,121],
[105,89,116,85,100,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,129,116,101,114,106],
[98,0,103,108,133,102,109,93],
[93,108,0,118,103,100,107,92],
[82,103,93,0,113,97,77,90],
[95,78,108,98,0,88,79,96],
[110,109,111,114,123,0,101,103],
[97,102,104,134,132,110,0,104],
[105,118,119,121,115,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,113,93,111,117,111],
[107,0,107,96,100,102,111,104],
[101,104,0,103,103,101,115,109],
[98,115,108,0,110,124,126,113],
[118,111,108,101,0,119,120,106],
[100,109,110,87,92,0,116,113],
[94,100,96,85,91,95,0,105],
[100,107,102,98,105,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,101,97,94,91,98],
[121,0,117,126,114,104,110,116],
[111,94,0,103,97,95,113,90],
[110,85,108,0,97,105,104,97],
[114,97,114,114,0,107,100,97],
[117,107,116,106,104,0,110,99],
[120,101,98,107,111,101,0,96],
[113,95,121,114,114,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,81,82,97,81,81,81],
[130,0,103,136,137,109,82,109],
[130,108,0,117,156,99,92,80],
[129,75,94,0,129,72,101,75],
[114,74,55,82,0,55,55,100],
[130,102,112,139,156,0,113,131],
[130,129,119,110,156,98,0,127],
[130,102,131,136,111,80,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,106,115,108,103,99],
[106,0,102,113,116,113,100,98],
[105,109,0,107,123,112,97,100],
[105,98,104,0,114,97,106,94],
[96,95,88,97,0,97,87,79],
[103,98,99,114,114,0,85,91],
[108,111,114,105,124,126,0,110],
[112,113,111,117,132,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,92,100,83,101,110],
[109,0,115,108,107,106,98,111],
[104,96,0,100,114,92,96,112],
[119,103,111,0,102,113,105,119],
[111,104,97,109,0,92,94,105],
[128,105,119,98,119,0,110,129],
[110,113,115,106,117,101,0,107],
[101,100,99,92,106,82,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,95,105,107,112,100],
[110,0,113,102,111,92,108,102],
[99,98,0,81,94,88,109,104],
[116,109,130,0,105,114,120,108],
[106,100,117,106,0,106,112,99],
[104,119,123,97,105,0,116,107],
[99,103,102,91,99,95,0,99],
[111,109,107,103,112,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,115,110,112,108,109],
[115,0,100,112,100,117,110,110],
[101,111,0,102,101,101,103,124],
[96,99,109,0,101,103,112,107],
[101,111,110,110,0,100,99,104],
[99,94,110,108,111,0,103,105],
[103,101,108,99,112,108,0,117],
[102,101,87,104,107,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,103,113,109,117,99,110],
[124,0,101,114,106,123,112,119],
[108,110,0,108,105,125,107,107],
[98,97,103,0,115,116,107,113],
[102,105,106,96,0,125,107,107],
[94,88,86,95,86,0,92,95],
[112,99,104,104,104,119,0,107],
[101,92,104,98,104,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,103,98,97,112,88],
[104,0,119,110,95,116,105,98],
[95,92,0,92,98,99,97,105],
[108,101,119,0,100,102,104,105],
[113,116,113,111,0,103,102,107],
[114,95,112,109,108,0,116,112],
[99,106,114,107,109,95,0,93],
[123,113,106,106,104,99,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,87,85,91,98,90],
[105,0,96,107,97,98,105,114],
[115,115,0,118,102,102,112,102],
[124,104,93,0,112,83,103,103],
[126,114,109,99,0,111,110,112],
[120,113,109,128,100,0,120,109],
[113,106,99,108,101,91,0,104],
[121,97,109,108,99,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,100,111,106,101,97],
[102,0,121,108,112,98,100,100],
[104,90,0,103,112,92,99,102],
[111,103,108,0,112,103,109,105],
[100,99,99,99,0,100,102,102],
[105,113,119,108,111,0,109,105],
[110,111,112,102,109,102,0,107],
[114,111,109,106,109,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,122,108,108,111,86],
[110,0,114,107,77,103,109,93],
[111,97,0,141,103,122,113,109],
[89,104,70,0,97,103,105,86],
[103,134,108,114,0,120,129,112],
[103,108,89,108,91,0,106,98],
[100,102,98,106,82,105,0,94],
[125,118,102,125,99,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,98,89,115,113,114],
[108,0,101,111,107,111,107,117],
[101,110,0,102,93,115,102,103],
[113,100,109,0,95,109,115,122],
[122,104,118,116,0,118,120,131],
[96,100,96,102,93,0,102,105],
[98,104,109,96,91,109,0,110],
[97,94,108,89,80,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,124,89,97,122,108,119],
[90,0,111,113,122,124,104,101],
[87,100,0,97,97,98,96,110],
[122,98,114,0,105,118,114,100],
[114,89,114,106,0,98,104,100],
[89,87,113,93,113,0,109,98],
[103,107,115,97,107,102,0,116],
[92,110,101,111,111,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,107,98,110,100,108],
[99,0,105,107,106,108,107,103],
[106,106,0,111,99,109,105,105],
[104,104,100,0,96,111,104,100],
[113,105,112,115,0,116,112,106],
[101,103,102,100,95,0,104,97],
[111,104,106,107,99,107,0,98],
[103,108,106,111,105,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,96,107,98,99,93,85],
[130,0,117,116,109,125,100,103],
[115,94,0,118,102,121,107,98],
[104,95,93,0,110,117,87,98],
[113,102,109,101,0,120,100,112],
[112,86,90,94,91,0,90,111],
[118,111,104,124,111,121,0,122],
[126,108,113,113,99,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,100,113,117,105,109],
[115,0,104,102,117,106,96,122],
[118,107,0,100,110,114,103,121],
[111,109,111,0,118,116,108,99],
[98,94,101,93,0,92,95,102],
[94,105,97,95,119,0,89,123],
[106,115,108,103,116,122,0,125],
[102,89,90,112,109,88,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,101,108,123,103,109],
[116,0,99,110,115,98,105,110],
[105,112,0,99,111,107,98,110],
[110,101,112,0,112,104,103,108],
[103,96,100,99,0,103,102,116],
[88,113,104,107,108,0,117,111],
[108,106,113,108,109,94,0,98],
[102,101,101,103,95,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,123,106,95,92,103,112],
[115,0,136,122,114,103,125,128],
[88,75,0,99,70,77,79,94],
[105,89,112,0,102,95,103,121],
[116,97,141,109,0,107,107,122],
[119,108,134,116,104,0,100,129],
[108,86,132,108,104,111,0,98],
[99,83,117,90,89,82,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,109,99,111,114,100],
[103,0,117,104,81,110,106,101],
[104,94,0,102,87,109,97,97],
[102,107,109,0,107,120,109,112],
[112,130,124,104,0,128,120,117],
[100,101,102,91,83,0,111,95],
[97,105,114,102,91,100,0,111],
[111,110,114,99,94,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_211.csv", index=False, header=False)
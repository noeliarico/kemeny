
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,533,460,486,486,439,500,466,454],
[357,0,408,451,402,378,405,419,400],
[430,482,0,498,476,450,474,478,439],
[404,439,392,0,398,432,391,446,419],
[404,488,414,492,0,415,438,400,463],
[451,512,440,458,475,0,439,458,441],
[390,485,416,499,452,451,0,438,490],
[424,471,412,444,490,432,452,0,436],
[436,490,451,471,427,449,400,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,452,469,479,449,453,426,429],
[470,0,446,480,451,454,423,450,445],
[438,444,0,462,438,415,428,425,412],
[421,410,428,0,438,436,422,421,410],
[411,439,452,452,0,468,428,434,420],
[441,436,475,454,422,0,403,444,418],
[437,467,462,468,462,487,0,435,451],
[464,440,465,469,456,446,455,0,434],
[461,445,478,480,470,472,439,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,508,405,411,397,460,442,400],
[443,0,428,406,442,385,421,435,407],
[382,462,0,402,385,404,434,422,399],
[485,484,488,0,480,451,447,442,431],
[479,448,505,410,0,402,461,457,400],
[493,505,486,439,488,0,480,466,475],
[430,469,456,443,429,410,0,479,460],
[448,455,468,448,433,424,411,0,413],
[490,483,491,459,490,415,430,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,436,461,474,452,448,456,432],
[414,0,424,454,442,412,435,420,439],
[454,466,0,460,438,472,450,466,442],
[429,436,430,0,445,440,434,443,423],
[416,448,452,445,0,442,427,444,421],
[438,478,418,450,448,0,433,438,428],
[442,455,440,456,463,457,0,451,445],
[434,470,424,447,446,452,439,0,432],
[458,451,448,467,469,462,445,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,432,422,433,420,477,429,435],
[459,0,392,421,430,451,449,443,413],
[458,498,0,414,484,451,481,503,453],
[468,469,476,0,444,463,497,473,421],
[457,460,406,446,0,403,425,431,418],
[470,439,439,427,487,0,465,452,449],
[413,441,409,393,465,425,0,431,430],
[461,447,387,417,459,438,459,0,398],
[455,477,437,469,472,441,460,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,456,451,450,448,457,439,467],
[424,0,416,433,428,429,451,436,447],
[434,474,0,467,438,459,443,455,463],
[439,457,423,0,430,440,446,448,463],
[440,462,452,460,0,449,454,450,452],
[442,461,431,450,441,0,432,448,435],
[433,439,447,444,436,458,0,465,454],
[451,454,435,442,440,442,425,0,468],
[423,443,427,427,438,455,436,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,417,426,425,422,402,368,440],
[479,0,442,474,452,476,475,480,462],
[473,448,0,489,438,450,425,451,481],
[464,416,401,0,446,415,448,364,441],
[465,438,452,444,0,433,467,429,520],
[468,414,440,475,457,0,461,433,457],
[488,415,465,442,423,429,0,418,455],
[522,410,439,526,461,457,472,0,501],
[450,428,409,449,370,433,435,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,472,462,487,455,480,444,476],
[429,0,430,446,452,439,443,455,424],
[418,460,0,462,463,427,460,471,461],
[428,444,428,0,448,396,436,460,441],
[403,438,427,442,0,355,395,414,437],
[435,451,463,494,535,0,460,475,448],
[410,447,430,454,495,430,0,448,440],
[446,435,419,430,476,415,442,0,449],
[414,466,429,449,453,442,450,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,400,410,434,395,406,373,387],
[438,0,427,419,441,413,409,427,454],
[490,463,0,383,459,421,416,443,411],
[480,471,507,0,448,443,472,446,476],
[456,449,431,442,0,421,474,421,432],
[495,477,469,447,469,0,504,425,439],
[484,481,474,418,416,386,0,405,424],
[517,463,447,444,469,465,485,0,446],
[503,436,479,414,458,451,466,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,479,411,397,417,467,448,470],
[487,0,450,456,404,423,502,466,422],
[411,440,0,456,450,388,475,460,434],
[479,434,434,0,437,465,468,459,426],
[493,486,440,453,0,450,514,493,418],
[473,467,502,425,440,0,502,495,449],
[423,388,415,422,376,388,0,441,365],
[442,424,430,431,397,395,449,0,428],
[420,468,456,464,472,441,525,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,462,416,431,466,447,453,474],
[463,0,493,454,435,482,489,450,472],
[428,397,0,399,366,446,416,418,425],
[474,436,491,0,455,460,449,448,442],
[459,455,524,435,0,478,443,497,460],
[424,408,444,430,412,0,432,419,427],
[443,401,474,441,447,458,0,450,451],
[437,440,472,442,393,471,440,0,429],
[416,418,465,448,430,463,439,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,430,428,444,422,445,431,430],
[451,0,446,444,449,441,452,454,434],
[460,444,0,438,460,432,451,426,466],
[462,446,452,0,454,430,456,444,442],
[446,441,430,436,0,432,429,424,430],
[468,449,458,460,458,0,448,436,454],
[445,438,439,434,461,442,0,424,421],
[459,436,464,446,466,454,466,0,458],
[460,456,424,448,460,436,469,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,452,433,464,438,444,437,441],
[454,0,461,463,462,477,434,464,451],
[438,429,0,424,419,448,446,430,425],
[457,427,466,0,459,470,444,471,454],
[426,428,471,431,0,450,435,454,454],
[452,413,442,420,440,0,431,472,421],
[446,456,444,446,455,459,0,442,451],
[453,426,460,419,436,418,448,0,440],
[449,439,465,436,436,469,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,427,418,423,472,421,472,406],
[466,0,405,448,423,469,430,424,416],
[463,485,0,447,437,455,445,437,424],
[472,442,443,0,463,477,440,470,415],
[467,467,453,427,0,484,429,448,451],
[418,421,435,413,406,0,421,439,424],
[469,460,445,450,461,469,0,445,448],
[418,466,453,420,442,451,445,0,412],
[484,474,466,475,439,466,442,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,472,463,451,461,463,442,457],
[435,0,445,463,437,447,471,437,448],
[418,445,0,451,435,441,442,437,446],
[427,427,439,0,432,441,447,448,442],
[439,453,455,458,0,442,442,448,453],
[429,443,449,449,448,0,469,445,429],
[427,419,448,443,448,421,0,434,445],
[448,453,453,442,442,445,456,0,438],
[433,442,444,448,437,461,445,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,482,463,466,458,472,449,441],
[446,0,451,444,478,452,435,435,445],
[408,439,0,450,470,440,449,454,449],
[427,446,440,0,482,444,461,438,440],
[424,412,420,408,0,431,423,422,425],
[432,438,450,446,459,0,456,443,441],
[418,455,441,429,467,434,0,437,423],
[441,455,436,452,468,447,453,0,445],
[449,445,441,450,465,449,467,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,469,453,476,445,431,471,470],
[431,0,452,472,474,444,449,444,454],
[421,438,0,436,435,431,439,432,501],
[437,418,454,0,429,436,417,439,487],
[414,416,455,461,0,434,436,435,454],
[445,446,459,454,456,0,432,435,491],
[459,441,451,473,454,458,0,451,450],
[419,446,458,451,455,455,439,0,444],
[420,436,389,403,436,399,440,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,463,422,430,485,411,450,447],
[471,0,462,434,496,427,432,455,439],
[427,428,0,429,464,394,427,430,434],
[468,456,461,0,492,473,467,428,461],
[460,394,426,398,0,429,393,446,426],
[405,463,496,417,461,0,414,450,470],
[479,458,463,423,497,476,0,501,465],
[440,435,460,462,444,440,389,0,458],
[443,451,456,429,464,420,425,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,451,493,499,473,413,450,494],
[429,0,444,470,463,441,463,500,476],
[439,446,0,476,481,464,430,532,483],
[397,420,414,0,439,381,414,447,423],
[391,427,409,451,0,399,416,495,473],
[417,449,426,509,491,0,459,447,419],
[477,427,460,476,474,431,0,471,433],
[440,390,358,443,395,443,419,0,450],
[396,414,407,467,417,471,457,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,462,446,438,448,435,442,424],
[434,0,470,451,454,431,442,425,449],
[428,420,0,435,416,439,423,431,416],
[444,439,455,0,445,432,434,438,461],
[452,436,474,445,0,457,453,439,446],
[442,459,451,458,433,0,461,447,450],
[455,448,467,456,437,429,0,449,444],
[448,465,459,452,451,443,441,0,444],
[466,441,474,429,444,440,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,451,467,441,455,483,462,459],
[409,0,448,462,458,442,450,463,436],
[439,442,0,469,414,438,464,415,437],
[423,428,421,0,418,429,466,428,458],
[449,432,476,472,0,438,504,461,474],
[435,448,452,461,452,0,509,436,491],
[407,440,426,424,386,381,0,423,436],
[428,427,475,462,429,454,467,0,426],
[431,454,453,432,416,399,454,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,397,397,427,433,427,390,371],
[456,0,465,430,478,451,462,447,472],
[493,425,0,425,478,423,441,444,429],
[493,460,465,0,447,473,435,401,471],
[463,412,412,443,0,442,456,443,444],
[457,439,467,417,448,0,444,433,440],
[463,428,449,455,434,446,0,407,466],
[500,443,446,489,447,457,483,0,435],
[519,418,461,419,446,450,424,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,432,431,422,445,449,427,433],
[439,0,431,426,434,423,433,439,423],
[458,459,0,444,439,441,455,432,458],
[459,464,446,0,441,444,474,428,446],
[468,456,451,449,0,443,448,435,435],
[445,467,449,446,447,0,468,452,445],
[441,457,435,416,442,422,0,435,441],
[463,451,458,462,455,438,455,0,445],
[457,467,432,444,455,445,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,452,470,421,441,435,438,453],
[430,0,406,452,409,446,420,433,442],
[438,484,0,466,428,431,425,453,450],
[420,438,424,0,405,416,413,414,441],
[469,481,462,485,0,446,442,441,450],
[449,444,459,474,444,0,460,471,451],
[455,470,465,477,448,430,0,439,464],
[452,457,437,476,449,419,451,0,455],
[437,448,440,449,440,439,426,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,418,430,431,446,458,416,447],
[458,0,434,424,430,447,435,414,444],
[472,456,0,465,453,449,451,434,469],
[460,466,425,0,451,462,457,445,453],
[459,460,437,439,0,443,445,461,471],
[444,443,441,428,447,0,461,433,432],
[432,455,439,433,445,429,0,423,449],
[474,476,456,445,429,457,467,0,461],
[443,446,421,437,419,458,441,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,480,460,456,487,437,473,449],
[445,0,459,451,446,491,438,464,445],
[410,431,0,444,441,468,434,436,436],
[430,439,446,0,431,455,408,424,436],
[434,444,449,459,0,479,454,455,440],
[403,399,422,435,411,0,403,427,398],
[453,452,456,482,436,487,0,450,474],
[417,426,454,466,435,463,440,0,436],
[441,445,454,454,450,492,416,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,444,415,443,411,405,444,448],
[453,0,454,444,460,433,432,437,461],
[446,436,0,415,433,465,427,438,437],
[475,446,475,0,454,454,445,441,438],
[447,430,457,436,0,431,421,448,457],
[479,457,425,436,459,0,421,441,467],
[485,458,463,445,469,469,0,456,450],
[446,453,452,449,442,449,434,0,446],
[442,429,453,452,433,423,440,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,438,432,439,426,456,438],
[448,0,430,448,440,434,452,447,446],
[456,460,0,440,438,441,430,440,444],
[452,442,450,0,441,446,439,448,437],
[458,450,452,449,0,441,460,467,442],
[451,456,449,444,449,0,462,462,453],
[464,438,460,451,430,428,0,457,444],
[434,443,450,442,423,428,433,0,433],
[452,444,446,453,448,437,446,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,441,480,492,465,489,504,465],
[425,0,445,476,435,426,434,461,461],
[449,445,0,502,466,463,452,489,413],
[410,414,388,0,411,407,420,450,413],
[398,455,424,479,0,433,486,466,432],
[425,464,427,483,457,0,450,496,460],
[401,456,438,470,404,440,0,468,444],
[386,429,401,440,424,394,422,0,428],
[425,429,477,477,458,430,446,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,428,449,455,429,438,454,417],
[459,0,442,465,418,439,437,454,461],
[462,448,0,459,462,486,438,462,447],
[441,425,431,0,421,432,437,461,435],
[435,472,428,469,0,465,456,464,438],
[461,451,404,458,425,0,445,457,434],
[452,453,452,453,434,445,0,454,451],
[436,436,428,429,426,433,436,0,437],
[473,429,443,455,452,456,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,453,443,498,525,498,478,429],
[384,0,359,437,465,512,398,470,416],
[437,531,0,455,513,498,394,456,481],
[447,453,435,0,532,528,418,500,466],
[392,425,377,358,0,393,347,410,392],
[365,378,392,362,497,0,448,460,377],
[392,492,496,472,543,442,0,469,424],
[412,420,434,390,480,430,421,0,415],
[461,474,409,424,498,513,466,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,419,435,454,455,483,435,454],
[446,0,447,430,480,516,446,430,488],
[471,443,0,483,507,497,498,484,475],
[455,460,407,0,445,503,486,500,473],
[436,410,383,445,0,471,434,470,489],
[435,374,393,387,419,0,465,438,432],
[407,444,392,404,456,425,0,432,466],
[455,460,406,390,420,452,458,0,478],
[436,402,415,417,401,458,424,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,456,450,436,439,433,435,421],
[437,0,460,461,439,455,403,437,423],
[434,430,0,454,446,443,435,438,428],
[440,429,436,0,445,438,441,444,423],
[454,451,444,445,0,455,411,399,433],
[451,435,447,452,435,0,452,432,443],
[457,487,455,449,479,438,0,452,463],
[455,453,452,446,491,458,438,0,435],
[469,467,462,467,457,447,427,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,427,450,423,461,415,435,428],
[459,0,431,449,429,454,429,431,443],
[463,459,0,457,436,450,428,447,443],
[440,441,433,0,452,444,438,432,425],
[467,461,454,438,0,465,426,434,459],
[429,436,440,446,425,0,411,423,426],
[475,461,462,452,464,479,0,445,450],
[455,459,443,458,456,467,445,0,469],
[462,447,447,465,431,464,440,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,434,433,454,429,422,433,442],
[482,0,436,450,469,451,436,452,459],
[456,454,0,465,482,465,434,460,443],
[457,440,425,0,476,442,438,432,429],
[436,421,408,414,0,425,407,433,436],
[461,439,425,448,465,0,419,417,446],
[468,454,456,452,483,471,0,443,449],
[457,438,430,458,457,473,447,0,461],
[448,431,447,461,454,444,441,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,581,402,509,496,453,469,475],
[378,0,490,444,369,437,318,462,337],
[309,400,0,326,357,342,318,452,423],
[488,446,564,0,499,439,341,524,429],
[381,521,533,391,0,508,526,547,461],
[394,453,548,451,382,0,247,486,389],
[437,572,572,549,364,643,0,555,437],
[421,428,438,366,343,404,335,0,419],
[415,553,467,461,429,501,453,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,431,454,446,470,465,455,443],
[420,0,436,430,418,438,443,420,423],
[459,454,0,439,444,452,447,434,426],
[436,460,451,0,424,462,462,450,450],
[444,472,446,466,0,453,457,455,465],
[420,452,438,428,437,0,457,411,435],
[425,447,443,428,433,433,0,425,446],
[435,470,456,440,435,479,465,0,429],
[447,467,464,440,425,455,444,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,428,434,435,417,424,464,409],
[478,0,448,436,458,464,438,470,433],
[462,442,0,455,484,445,418,479,444],
[456,454,435,0,470,470,446,468,436],
[455,432,406,420,0,456,412,449,408],
[473,426,445,420,434,0,436,484,442],
[466,452,472,444,478,454,0,482,454],
[426,420,411,422,441,406,408,0,404],
[481,457,446,454,482,448,436,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,469,440,459,480,481,458,443],
[425,0,445,432,453,445,454,457,426],
[421,445,0,453,432,455,448,440,445],
[450,458,437,0,447,478,466,450,442],
[431,437,458,443,0,496,476,453,442],
[410,445,435,412,394,0,428,432,398],
[409,436,442,424,414,462,0,444,431],
[432,433,450,440,437,458,446,0,430],
[447,464,445,448,448,492,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,732,420,524,560,420,551,678],
[385,0,582,403,333,493,489,508,549],
[158,308,0,321,237,231,440,535,456],
[470,487,569,0,348,403,598,714,657],
[366,557,653,542,0,627,439,612,890],
[330,397,659,487,263,0,415,629,558],
[470,401,450,292,451,475,0,622,774],
[339,382,355,176,278,261,268,0,648],
[212,341,434,233,0,332,116,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,435,463,452,426,450,431,427],
[427,0,414,408,420,409,430,452,408],
[455,476,0,457,450,458,461,461,434],
[427,482,433,0,426,425,439,460,438],
[438,470,440,464,0,431,453,473,449],
[464,481,432,465,459,0,479,463,428],
[440,460,429,451,437,411,0,442,417],
[459,438,429,430,417,427,448,0,435],
[463,482,456,452,441,462,473,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,449,439,436,449,439,430,438],
[454,0,460,460,466,438,433,443,455],
[441,430,0,442,448,419,442,441,458],
[451,430,448,0,455,445,437,449,447],
[454,424,442,435,0,409,428,438,423],
[441,452,471,445,481,0,451,430,463],
[451,457,448,453,462,439,0,436,465],
[460,447,449,441,452,460,454,0,446],
[452,435,432,443,467,427,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,445,448,448,456,445,466,445],
[446,0,440,479,469,468,463,462,450],
[445,450,0,458,441,452,457,451,436],
[442,411,432,0,450,459,435,435,430],
[442,421,449,440,0,440,459,472,451],
[434,422,438,431,450,0,442,435,413],
[445,427,433,455,431,448,0,451,423],
[424,428,439,455,418,455,439,0,422],
[445,440,454,460,439,477,467,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,462,444,409,445,451,442,436],
[447,0,414,449,414,437,437,432,388],
[428,476,0,436,423,424,451,404,375],
[446,441,454,0,386,420,444,444,393],
[481,476,467,504,0,479,489,422,447],
[445,453,466,470,411,0,487,438,411],
[439,453,439,446,401,403,0,377,406],
[448,458,486,446,468,452,513,0,445],
[454,502,515,497,443,479,484,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,441,433,437,421,414,402,412],
[476,0,461,430,429,434,417,451,407],
[449,429,0,422,427,429,358,426,398],
[457,460,468,0,445,441,405,444,395],
[453,461,463,445,0,410,430,423,439],
[469,456,461,449,480,0,435,453,444],
[476,473,532,485,460,455,0,443,446],
[488,439,464,446,467,437,447,0,404],
[478,483,492,495,451,446,444,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,421,420,436,424,452,469,436],
[459,0,365,422,435,393,465,415,432],
[469,525,0,453,476,432,461,442,483],
[470,468,437,0,468,451,496,483,448],
[454,455,414,422,0,438,469,479,470],
[466,497,458,439,452,0,455,494,474],
[438,425,429,394,421,435,0,436,417],
[421,475,448,407,411,396,454,0,418],
[454,458,407,442,420,416,473,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,432,460,444,443,420,455,454],
[461,0,467,428,428,463,417,427,467],
[458,423,0,446,429,452,459,452,452],
[430,462,444,0,425,448,427,446,477],
[446,462,461,465,0,468,425,454,469],
[447,427,438,442,422,0,422,455,456],
[470,473,431,463,465,468,0,485,481],
[435,463,438,444,436,435,405,0,453],
[436,423,438,413,421,434,409,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,446,451,442,437,467,448,413],
[431,0,429,453,406,424,417,415,413],
[444,461,0,456,447,450,432,433,427],
[439,437,434,0,408,426,427,430,432],
[448,484,443,482,0,463,453,449,465],
[453,466,440,464,427,0,442,441,431],
[423,473,458,463,437,448,0,446,431],
[442,475,457,460,441,449,444,0,415],
[477,477,463,458,425,459,459,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,596,708,275,708,596,410,410,596],
[294,0,408,0,543,186,457,347,571],
[182,482,0,275,596,596,482,482,668],
[615,890,615,0,615,433,592,482,778],
[182,347,294,275,0,275,347,347,347],
[294,704,294,457,615,0,592,592,592],
[480,433,408,298,543,298,0,433,408],
[480,543,408,408,543,298,457,0,571],
[294,319,222,112,543,298,482,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,462,463,462,469,464,441,461],
[425,0,433,471,445,456,434,440,447],
[428,457,0,456,460,439,436,443,428],
[427,419,434,0,434,415,455,432,446],
[428,445,430,456,0,441,443,436,451],
[421,434,451,475,449,0,455,433,445],
[426,456,454,435,447,435,0,452,438],
[449,450,447,458,454,457,438,0,444],
[429,443,462,444,439,445,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,352,380,359,355,359,344,375],
[595,0,491,502,552,490,501,572,432],
[538,399,0,488,539,535,528,539,497],
[510,388,402,0,539,488,481,430,460],
[531,338,351,351,0,441,447,398,389],
[535,400,355,402,449,0,446,486,461],
[531,389,362,409,443,444,0,418,458],
[546,318,351,460,492,404,472,0,382],
[515,458,393,430,501,429,432,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,463,453,472,438,442,451,423],
[417,0,436,440,449,417,430,425,425],
[427,454,0,463,445,434,448,458,413],
[437,450,427,0,422,441,435,433,432],
[418,441,445,468,0,453,445,433,439],
[452,473,456,449,437,0,456,458,432],
[448,460,442,455,445,434,0,427,445],
[439,465,432,457,457,432,463,0,414],
[467,465,477,458,451,458,445,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,410,438,413,420,461,418,429],
[454,0,410,437,394,395,446,427,390],
[480,480,0,447,470,433,498,469,448],
[452,453,443,0,415,444,488,435,468],
[477,496,420,475,0,471,489,427,420],
[470,495,457,446,419,0,482,413,458],
[429,444,392,402,401,408,0,385,390],
[472,463,421,455,463,477,505,0,469],
[461,500,442,422,470,432,500,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,443,473,429,451,499,447,464],
[413,0,398,419,431,430,427,490,455],
[447,492,0,463,462,462,447,401,477],
[417,471,427,0,425,426,439,483,458],
[461,459,428,465,0,448,447,490,484],
[439,460,428,464,442,0,453,464,486],
[391,463,443,451,443,437,0,449,465],
[443,400,489,407,400,426,441,0,491],
[426,435,413,432,406,404,425,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,442,525,540,543,485,518,469],
[398,0,481,508,458,481,393,574,470],
[448,409,0,364,488,606,488,574,592],
[365,382,526,0,466,510,408,509,494],
[350,432,402,424,0,580,438,450,436],
[347,409,284,380,310,0,367,342,356],
[405,497,402,482,452,523,0,484,466],
[372,316,316,381,440,548,406,0,548],
[421,420,298,396,454,534,424,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,414,459,443,442,484,553,425],
[403,0,401,444,464,433,498,449,467],
[476,489,0,483,539,525,582,571,444],
[431,446,407,0,448,468,541,499,370],
[447,426,351,442,0,404,550,491,446],
[448,457,365,422,486,0,606,502,455],
[406,392,308,349,340,284,0,398,388],
[337,441,319,391,399,388,492,0,361],
[465,423,446,520,444,435,502,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,487,429,446,453,456,464,467],
[427,0,486,436,424,475,448,411,446],
[403,404,0,408,398,424,451,431,443],
[461,454,482,0,439,448,444,455,455],
[444,466,492,451,0,465,432,459,445],
[437,415,466,442,425,0,447,452,422],
[434,442,439,446,458,443,0,433,446],
[426,479,459,435,431,438,457,0,455],
[423,444,447,435,445,468,444,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,441,436,455,466,429,459,453],
[440,0,455,460,455,449,466,449,448],
[449,435,0,464,443,449,437,441,446],
[454,430,426,0,430,445,428,436,437],
[435,435,447,460,0,441,440,450,453],
[424,441,441,445,449,0,431,442,457],
[461,424,453,462,450,459,0,451,439],
[431,441,449,454,440,448,439,0,466],
[437,442,444,453,437,433,451,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,437,448,430,398,449,434,443],
[461,0,422,467,465,427,475,465,421],
[453,468,0,471,461,476,488,455,443],
[442,423,419,0,430,411,450,443,423],
[460,425,429,460,0,404,434,426,433],
[492,463,414,479,486,0,485,464,450],
[441,415,402,440,456,405,0,430,415],
[456,425,435,447,464,426,460,0,420],
[447,469,447,467,457,440,475,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,453,434,478,447,440,482,452],
[444,0,469,408,493,413,441,452,430],
[437,421,0,419,467,433,418,415,432],
[456,482,471,0,483,453,433,507,427],
[412,397,423,407,0,387,389,416,410],
[443,477,457,437,503,0,433,461,455],
[450,449,472,457,501,457,0,421,465],
[408,438,475,383,474,429,469,0,413],
[438,460,458,463,480,435,425,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,389,405,429,452,382,448,447],
[427,0,450,379,440,448,468,427,482],
[501,440,0,434,444,461,458,439,433],
[485,511,456,0,444,460,444,472,446],
[461,450,446,446,0,506,437,428,439],
[438,442,429,430,384,0,405,465,427],
[508,422,432,446,453,485,0,475,465],
[442,463,451,418,462,425,415,0,454],
[443,408,457,444,451,463,425,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,462,459,433,504,448,456,472],
[440,0,458,463,452,481,448,452,468],
[428,432,0,476,434,462,421,459,431],
[431,427,414,0,431,428,418,429,476],
[457,438,456,459,0,496,437,457,464],
[386,409,428,462,394,0,432,430,439],
[442,442,469,472,453,458,0,437,453],
[434,438,431,461,433,460,453,0,488],
[418,422,459,414,426,451,437,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,494,450,493,451,522,440,521],
[367,0,340,340,418,362,451,371,354],
[396,550,0,442,503,391,542,424,463],
[440,550,448,0,494,476,498,438,454],
[397,472,387,396,0,346,554,395,414],
[439,528,499,414,544,0,596,487,483],
[368,439,348,392,336,294,0,375,362],
[450,519,466,452,495,403,515,0,514],
[369,536,427,436,476,407,528,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,406,377,395,393,402,386,430],
[466,0,409,402,463,415,416,400,489],
[484,481,0,462,479,437,486,465,482],
[513,488,428,0,503,443,469,446,491],
[495,427,411,387,0,398,448,410,423],
[497,475,453,447,492,0,434,428,483],
[488,474,404,421,442,456,0,419,453],
[504,490,425,444,480,462,471,0,494],
[460,401,408,399,467,407,437,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,459,462,456,442,464,470,443],
[434,0,442,469,453,441,432,468,453],
[431,448,0,428,453,442,431,429,444],
[428,421,462,0,454,439,455,452,451],
[434,437,437,436,0,450,428,440,447],
[448,449,448,451,440,0,445,458,459],
[426,458,459,435,462,445,0,461,444],
[420,422,461,438,450,432,429,0,436],
[447,437,446,439,443,431,446,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,474,456,466,473,480,478,451],
[453,0,483,444,500,487,494,450,479],
[416,407,0,415,442,451,444,445,413],
[434,446,475,0,496,484,488,479,450],
[424,390,448,394,0,425,434,433,420],
[417,403,439,406,465,0,441,451,439],
[410,396,446,402,456,449,0,407,413],
[412,440,445,411,457,439,483,0,420],
[439,411,477,440,470,451,477,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,434,436,441,457,436,448,450],
[455,0,447,460,461,438,451,454,426],
[456,443,0,457,475,471,433,472,452],
[454,430,433,0,458,463,439,442,427],
[449,429,415,432,0,440,447,444,427],
[433,452,419,427,450,0,437,463,435],
[454,439,457,451,443,453,0,464,452],
[442,436,418,448,446,427,426,0,412],
[440,464,438,463,463,455,438,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,457,450,465,448,447,455,434],
[456,0,455,440,457,444,454,467,452],
[433,435,0,423,450,448,433,455,449],
[440,450,467,0,469,454,458,469,448],
[425,433,440,421,0,436,448,458,438],
[442,446,442,436,454,0,467,449,463],
[443,436,457,432,442,423,0,445,439],
[435,423,435,421,432,441,445,0,444],
[456,438,441,442,452,427,451,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,452,411,445,446,438,432,447],
[443,0,436,433,451,446,451,450,449],
[438,454,0,432,442,441,429,436,455],
[479,457,458,0,446,432,453,453,471],
[445,439,448,444,0,443,435,437,452],
[444,444,449,458,447,0,443,415,455],
[452,439,461,437,455,447,0,414,411],
[458,440,454,437,453,475,476,0,461],
[443,441,435,419,438,435,479,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,436,434,449,422,408,399,415],
[455,0,415,447,448,447,438,434,455],
[454,475,0,446,466,447,441,435,430],
[456,443,444,0,477,448,448,434,451],
[441,442,424,413,0,421,424,399,424],
[468,443,443,442,469,0,442,452,444],
[482,452,449,442,466,448,0,433,455],
[491,456,455,456,491,438,457,0,467],
[475,435,460,439,466,446,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,360,172,389,394,227,217,58],
[615,0,581,423,638,533,393,578,505],
[530,309,0,309,309,419,366,137,312],
[718,467,581,0,611,636,366,603,391],
[501,252,581,279,0,362,366,242,391],
[496,357,471,254,528,0,366,381,391],
[663,497,524,524,524,524,0,464,414],
[673,312,753,287,648,509,426,0,563],
[832,385,578,499,499,499,476,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,475,449,566,421,448,427,485],
[426,0,470,352,465,461,451,450,426],
[415,420,0,380,501,425,406,433,459],
[441,538,510,0,551,464,464,440,526],
[324,425,389,339,0,386,347,372,405],
[469,429,465,426,504,0,427,457,452],
[442,439,484,426,543,463,0,404,470],
[463,440,457,450,518,433,486,0,495],
[405,464,431,364,485,438,420,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,422,448,444,435,426,421,426],
[510,0,478,457,436,469,439,422,464],
[468,412,0,442,422,454,435,446,433],
[442,433,448,0,434,429,427,415,454],
[446,454,468,456,0,453,455,442,453],
[455,421,436,461,437,0,451,447,425],
[464,451,455,463,435,439,0,420,457],
[469,468,444,475,448,443,470,0,482],
[464,426,457,436,437,465,433,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,444,445,508,422,437,489,489],
[438,0,472,441,490,438,442,447,459],
[446,418,0,420,473,443,425,426,457],
[445,449,470,0,505,497,381,478,472],
[382,400,417,385,0,378,421,403,445],
[468,452,447,393,512,0,449,512,501],
[453,448,465,509,469,441,0,482,470],
[401,443,464,412,487,378,408,0,430],
[401,431,433,418,445,389,420,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,445,449,433,465,432,423,461],
[450,0,457,468,447,477,449,440,453],
[445,433,0,458,441,464,423,435,467],
[441,422,432,0,437,448,428,440,455],
[457,443,449,453,0,468,437,439,469],
[425,413,426,442,422,0,425,427,433],
[458,441,467,462,453,465,0,449,467],
[467,450,455,450,451,463,441,0,460],
[429,437,423,435,421,457,423,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,463,477,436,471,482,460,464],
[428,0,443,462,457,447,446,460,464],
[427,447,0,460,425,416,452,435,447],
[413,428,430,0,443,420,441,436,426],
[454,433,465,447,0,445,463,457,459],
[419,443,474,470,445,0,450,446,441],
[408,444,438,449,427,440,0,446,441],
[430,430,455,454,433,444,444,0,455],
[426,426,443,464,431,449,449,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,451,433,427,426,446,462,449],
[437,0,452,448,451,441,431,456,447],
[439,438,0,425,438,430,426,455,465],
[457,442,465,0,462,445,444,466,493],
[463,439,452,428,0,452,448,466,472],
[464,449,460,445,438,0,446,467,480],
[444,459,464,446,442,444,0,454,465],
[428,434,435,424,424,423,436,0,450],
[441,443,425,397,418,410,425,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,447,439,444,428,480,480,477],
[437,0,450,453,443,457,471,472,443],
[443,440,0,419,446,438,471,443,425],
[451,437,471,0,449,448,474,433,424],
[446,447,444,441,0,437,456,465,461],
[462,433,452,442,453,0,452,448,432],
[410,419,419,416,434,438,0,441,441],
[410,418,447,457,425,442,449,0,402],
[413,447,465,466,429,458,449,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,433,432,439,462,454,462,452],
[465,0,470,454,448,441,441,432,434],
[457,420,0,454,441,490,439,492,435],
[458,436,436,0,405,430,427,454,398],
[451,442,449,485,0,452,467,463,427],
[428,449,400,460,438,0,419,450,433],
[436,449,451,463,423,471,0,484,435],
[428,458,398,436,427,440,406,0,446],
[438,456,455,492,463,457,455,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,487,436,505,426,479,463,467],
[428,0,464,451,464,468,450,480,452],
[403,426,0,433,413,442,410,410,446],
[454,439,457,0,495,503,445,463,468],
[385,426,477,395,0,447,420,452,436],
[464,422,448,387,443,0,459,460,464],
[411,440,480,445,470,431,0,447,472],
[427,410,480,427,438,430,443,0,405],
[423,438,444,422,454,426,418,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,442,446,455,421,451,444,441],
[457,0,465,447,471,448,466,468,444],
[448,425,0,441,448,436,454,451,426],
[444,443,449,0,459,443,464,466,445],
[435,419,442,431,0,437,450,430,418],
[469,442,454,447,453,0,458,462,456],
[439,424,436,426,440,432,0,430,417],
[446,422,439,424,460,428,460,0,432],
[449,446,464,445,472,434,473,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,433,458,442,437,438,464,426],
[467,0,431,441,458,430,442,466,439],
[457,459,0,468,436,459,425,450,448],
[432,449,422,0,440,424,448,447,443],
[448,432,454,450,0,420,440,441,452],
[453,460,431,466,470,0,461,476,436],
[452,448,465,442,450,429,0,452,424],
[426,424,440,443,449,414,438,0,463],
[464,451,442,447,438,454,466,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,404,425,431,441,411,417,436],
[462,0,423,430,450,459,446,450,451],
[486,467,0,448,438,466,436,449,461],
[465,460,442,0,446,466,449,441,450],
[459,440,452,444,0,440,454,443,444],
[449,431,424,424,450,0,437,445,433],
[479,444,454,441,436,453,0,449,457],
[473,440,441,449,447,445,441,0,446],
[454,439,429,440,446,457,433,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,462,407,425,457,444,440,439],
[456,0,475,428,452,467,482,479,438],
[428,415,0,390,436,412,431,457,375],
[483,462,500,0,457,443,457,442,426],
[465,438,454,433,0,428,451,461,445],
[433,423,478,447,462,0,463,432,447],
[446,408,459,433,439,427,0,428,420],
[450,411,433,448,429,458,462,0,460],
[451,452,515,464,445,443,470,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,424,412,440,449,433,428,420],
[481,0,415,446,461,416,408,461,455],
[466,475,0,449,493,446,444,459,439],
[478,444,441,0,453,445,414,423,429],
[450,429,397,437,0,413,445,437,415],
[441,474,444,445,477,0,439,460,467],
[457,482,446,476,445,451,0,460,462],
[462,429,431,467,453,430,430,0,442],
[470,435,451,461,475,423,428,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,447,441,456,436,458,460,453],
[423,0,438,446,443,447,451,440,453],
[443,452,0,440,455,436,456,432,436],
[449,444,450,0,458,447,449,454,454],
[434,447,435,432,0,445,454,432,446],
[454,443,454,443,445,0,445,463,463],
[432,439,434,441,436,445,0,418,449],
[430,450,458,436,458,427,472,0,458],
[437,437,454,436,444,427,441,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,453,468,454,440,488,470,451],
[440,0,430,452,441,420,467,430,464],
[437,460,0,470,467,455,478,462,429],
[422,438,420,0,457,425,469,454,434],
[436,449,423,433,0,419,451,455,435],
[450,470,435,465,471,0,472,459,482],
[402,423,412,421,439,418,0,448,446],
[420,460,428,436,435,431,442,0,438],
[439,426,461,456,455,408,444,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,432,468,493,483,469,546,438],
[432,0,439,475,475,465,435,501,448],
[458,451,0,474,458,459,422,494,439],
[422,415,416,0,450,461,424,440,400],
[397,415,432,440,0,459,442,455,410],
[407,425,431,429,431,0,388,458,403],
[421,455,468,466,448,502,0,474,446],
[344,389,396,450,435,432,416,0,387],
[452,442,451,490,480,487,444,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,428,419,425,441,435,416,463],
[456,0,440,421,425,474,423,422,455],
[462,450,0,433,491,416,445,432,466],
[471,469,457,0,447,428,453,474,466],
[465,465,399,443,0,443,390,431,424],
[449,416,474,462,447,0,420,444,460],
[455,467,445,437,500,470,0,452,469],
[474,468,458,416,459,446,438,0,449],
[427,435,424,424,466,430,421,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,439,435,385,437,414,441,399],
[471,0,423,414,430,411,447,415,406],
[451,467,0,433,438,432,410,429,425],
[455,476,457,0,432,439,415,393,419],
[505,460,452,458,0,477,452,419,451],
[453,479,458,451,413,0,435,442,420],
[476,443,480,475,438,455,0,434,412],
[449,475,461,497,471,448,456,0,443],
[491,484,465,471,439,470,478,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,443,415,497,432,486,431,521],
[404,0,382,342,417,371,454,374,409],
[447,508,0,400,488,409,495,441,477],
[475,548,490,0,488,449,506,429,484],
[393,473,402,402,0,363,436,439,406],
[458,519,481,441,527,0,511,508,536],
[404,436,395,384,454,379,0,412,475],
[459,516,449,461,451,382,478,0,483],
[369,481,413,406,484,354,415,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,437,447,430,429,451,480,451],
[434,0,451,454,458,442,441,477,445],
[453,439,0,450,449,408,438,459,448],
[443,436,440,0,441,416,450,469,430],
[460,432,441,449,0,449,461,475,453],
[461,448,482,474,441,0,460,484,455],
[439,449,452,440,429,430,0,469,448],
[410,413,431,421,415,406,421,0,429],
[439,445,442,460,437,435,442,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,412,446,439,471,434,488,417],
[449,0,441,450,479,458,461,484,439],
[478,449,0,442,487,477,440,525,463],
[444,440,448,0,409,449,427,550,417],
[451,411,403,481,0,444,425,477,399],
[419,432,413,441,446,0,420,474,414],
[456,429,450,463,465,470,0,493,447],
[402,406,365,340,413,416,397,0,363],
[473,451,427,473,491,476,443,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,449,447,469,443,447,467,458],
[436,0,456,439,477,421,450,460,444],
[441,434,0,442,447,405,418,437,446],
[443,451,448,0,485,453,461,452,451],
[421,413,443,405,0,413,411,427,435],
[447,469,485,437,477,0,464,465,488],
[443,440,472,429,479,426,0,460,452],
[423,430,453,438,463,425,430,0,443],
[432,446,444,439,455,402,438,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,457,474,445,450,467,460,463],
[433,0,441,472,443,452,435,439,445],
[433,449,0,447,450,447,443,438,429],
[416,418,443,0,446,428,418,416,424],
[445,447,440,444,0,447,435,443,443],
[440,438,443,462,443,0,443,439,438],
[423,455,447,472,455,447,0,438,440],
[430,451,452,474,447,451,452,0,450],
[427,445,461,466,447,452,450,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,466,443,454,432,460,454,451],
[434,0,465,431,432,449,442,453,429],
[424,425,0,448,449,433,434,439,424],
[447,459,442,0,445,460,461,465,432],
[436,458,441,445,0,436,446,451,442],
[458,441,457,430,454,0,455,452,458],
[430,448,456,429,444,435,0,445,424],
[436,437,451,425,439,438,445,0,454],
[439,461,466,458,448,432,466,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,423,439,441,444,430,444,420],
[474,0,434,469,458,456,451,463,449],
[467,456,0,462,461,437,459,463,444],
[451,421,428,0,444,438,441,455,438],
[449,432,429,446,0,433,443,459,416],
[446,434,453,452,457,0,453,470,438],
[460,439,431,449,447,437,0,473,443],
[446,427,427,435,431,420,417,0,450],
[470,441,446,452,474,452,447,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,506,437,421,473,466,464,423],
[470,0,503,443,394,491,475,462,461],
[384,387,0,372,354,434,370,409,376],
[453,447,518,0,418,475,477,495,424],
[469,496,536,472,0,525,439,518,436],
[417,399,456,415,365,0,432,433,413],
[424,415,520,413,451,458,0,443,417],
[426,428,481,395,372,457,447,0,402],
[467,429,514,466,454,477,473,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,436,448,417,459,457,455,429],
[432,0,430,445,438,435,443,434,436],
[454,460,0,431,440,445,481,460,432],
[442,445,459,0,421,437,458,423,440],
[473,452,450,469,0,433,490,423,447],
[431,455,445,453,457,0,463,446,415],
[433,447,409,432,400,427,0,424,430],
[435,456,430,467,467,444,466,0,451],
[461,454,458,450,443,475,460,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,453,428,442,434,452,426,461],
[450,0,460,472,436,455,503,456,453],
[437,430,0,410,418,424,435,415,486],
[462,418,480,0,418,422,463,423,445],
[448,454,472,472,0,456,479,431,444],
[456,435,466,468,434,0,474,419,458],
[438,387,455,427,411,416,0,412,416],
[464,434,475,467,459,471,478,0,471],
[429,437,404,445,446,432,474,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,441,440,452,448,451,467,449],
[436,0,427,442,457,438,444,434,427],
[449,463,0,451,451,433,456,447,445],
[450,448,439,0,449,446,450,452,437],
[438,433,439,441,0,415,446,453,412],
[442,452,457,444,475,0,464,452,422],
[439,446,434,440,444,426,0,466,437],
[423,456,443,438,437,438,424,0,440],
[441,463,445,453,478,468,453,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,434,460,406,440,425,450,418],
[408,0,421,387,375,442,411,464,414],
[456,469,0,443,460,506,466,507,454],
[430,503,447,0,392,456,467,432,407],
[484,515,430,498,0,534,484,458,415],
[450,448,384,434,356,0,465,482,405],
[465,479,424,423,406,425,0,458,427],
[440,426,383,458,432,408,432,0,418],
[472,476,436,483,475,485,463,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,419,439,454,429,423,427,446],
[485,0,425,405,500,415,456,443,436],
[471,465,0,473,458,462,465,442,522],
[451,485,417,0,468,427,436,471,462],
[436,390,432,422,0,418,441,444,442],
[461,475,428,463,472,0,444,451,493],
[467,434,425,454,449,446,0,484,478],
[463,447,448,419,446,439,406,0,482],
[444,454,368,428,448,397,412,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,458,437,433,449,467,448,462],
[465,0,447,483,449,486,465,446,437],
[432,443,0,420,405,477,448,409,406],
[453,407,470,0,413,452,462,417,440],
[457,441,485,477,0,456,452,460,440],
[441,404,413,438,434,0,445,420,414],
[423,425,442,428,438,445,0,420,456],
[442,444,481,473,430,470,470,0,446],
[428,453,484,450,450,476,434,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,443,453,440,437,463,429,440],
[430,0,421,434,407,433,437,435,422],
[447,469,0,441,448,423,471,442,441],
[437,456,449,0,441,432,447,423,460],
[450,483,442,449,0,435,445,450,448],
[453,457,467,458,455,0,455,437,450],
[427,453,419,443,445,435,0,429,442],
[461,455,448,467,440,453,461,0,451],
[450,468,449,430,442,440,448,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,477,478,434,452,437,462,467],
[447,0,464,456,428,445,436,458,479],
[413,426,0,456,417,439,462,422,456],
[412,434,434,0,430,454,432,443,439],
[456,462,473,460,0,469,435,484,462],
[438,445,451,436,421,0,440,450,453],
[453,454,428,458,455,450,0,456,450],
[428,432,468,447,406,440,434,0,436],
[423,411,434,451,428,437,440,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,484,429,414,452,449,431,439],
[418,0,481,448,415,451,451,451,400],
[406,409,0,426,407,423,375,408,394],
[461,442,464,0,471,487,417,479,433],
[476,475,483,419,0,467,440,452,411],
[438,439,467,403,423,0,423,429,410],
[441,439,515,473,450,467,0,463,448],
[459,439,482,411,438,461,427,0,414],
[451,490,496,457,479,480,442,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,427,421,453,443,433,446,413],
[460,0,437,436,459,444,447,452,443],
[463,453,0,445,481,465,479,471,457],
[469,454,445,0,452,452,471,482,454],
[437,431,409,438,0,428,434,452,433],
[447,446,425,438,462,0,450,482,450],
[457,443,411,419,456,440,0,458,442],
[444,438,419,408,438,408,432,0,433],
[477,447,433,436,457,440,448,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,446,424,446,430,446,454,447],
[439,0,425,425,455,436,433,438,441],
[444,465,0,448,444,460,478,462,470],
[466,465,442,0,444,443,451,445,454],
[444,435,446,446,0,438,440,456,465],
[460,454,430,447,452,0,450,444,442],
[444,457,412,439,450,440,0,450,448],
[436,452,428,445,434,446,440,0,447],
[443,449,420,436,425,448,442,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,445,451,455,453,432,432,441],
[460,0,425,438,446,455,445,438,422],
[445,465,0,465,466,462,444,455,444],
[439,452,425,0,442,466,434,440,439],
[435,444,424,448,0,451,450,419,420],
[437,435,428,424,439,0,436,434,429],
[458,445,446,456,440,454,0,456,443],
[458,452,435,450,471,456,434,0,470],
[449,468,446,451,470,461,447,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,565,451,462,376,429,521,419],
[425,0,492,383,454,315,427,449,443],
[325,398,0,373,419,385,287,435,319],
[439,507,517,0,335,374,360,513,351],
[428,436,471,555,0,363,401,510,329],
[514,575,505,516,527,0,436,605,467],
[461,463,603,530,489,454,0,538,398],
[369,441,455,377,380,285,352,0,335],
[471,447,571,539,561,423,492,555,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,416,468,471,467,447,420,434],
[461,0,427,438,506,456,463,481,440],
[474,463,0,453,444,491,474,499,462],
[422,452,437,0,469,484,487,445,459],
[419,384,446,421,0,416,455,465,433],
[423,434,399,406,474,0,486,444,428],
[443,427,416,403,435,404,0,415,436],
[470,409,391,445,425,446,475,0,452],
[456,450,428,431,457,462,454,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,460,439,429,445,453,447,466],
[446,0,463,455,456,467,452,440,439],
[430,427,0,436,446,434,449,429,451],
[451,435,454,0,456,435,446,456,437],
[461,434,444,434,0,457,449,422,449],
[445,423,456,455,433,0,456,429,438],
[437,438,441,444,441,434,0,421,420],
[443,450,461,434,468,461,469,0,451],
[424,451,439,453,441,452,470,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,433,462,443,450,446,448,422],
[446,0,428,475,450,457,435,453,414],
[457,462,0,474,442,459,440,458,450],
[428,415,416,0,424,419,414,434,398],
[447,440,448,466,0,456,430,429,436],
[440,433,431,471,434,0,440,464,409],
[444,455,450,476,460,450,0,455,432],
[442,437,432,456,461,426,435,0,441],
[468,476,440,492,454,481,458,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,457,463,458,419,449,478,465],
[430,0,430,452,437,444,452,470,432],
[433,460,0,459,440,430,430,467,453],
[427,438,431,0,419,423,429,492,427],
[432,453,450,471,0,429,425,448,422],
[471,446,460,467,461,0,462,485,442],
[441,438,460,461,465,428,0,465,442],
[412,420,423,398,442,405,425,0,403],
[425,458,437,463,468,448,448,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,488,441,434,422,465,472,465],
[435,0,430,491,456,463,435,489,480],
[402,460,0,450,453,396,404,428,431],
[449,399,440,0,444,443,449,504,445],
[456,434,437,446,0,451,444,477,433],
[468,427,494,447,439,0,435,461,452],
[425,455,486,441,446,455,0,496,461],
[418,401,462,386,413,429,394,0,449],
[425,410,459,445,457,438,429,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,455,458,490,450,461,440,444],
[458,0,472,473,472,459,454,419,482],
[435,418,0,450,470,435,451,462,439],
[432,417,440,0,450,442,433,432,435],
[400,418,420,440,0,434,446,415,427],
[440,431,455,448,456,0,442,430,403],
[429,436,439,457,444,448,0,421,415],
[450,471,428,458,475,460,469,0,466],
[446,408,451,455,463,487,475,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,458,442,492,432,460,471,464],
[443,0,474,454,496,459,484,479,476],
[432,416,0,451,436,425,454,456,465],
[448,436,439,0,480,446,466,457,465],
[398,394,454,410,0,441,469,480,441],
[458,431,465,444,449,0,445,456,484],
[430,406,436,424,421,445,0,396,434],
[419,411,434,433,410,434,494,0,444],
[426,414,425,425,449,406,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,452,480,448,448,459,441,465],
[412,0,431,456,428,428,438,449,423],
[438,459,0,475,440,442,446,447,451],
[410,434,415,0,418,435,440,404,446],
[442,462,450,472,0,426,442,439,443],
[442,462,448,455,464,0,460,473,448],
[431,452,444,450,448,430,0,409,434],
[449,441,443,486,451,417,481,0,446],
[425,467,439,444,447,442,456,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,451,464,474,440,443,501,452],
[425,0,461,476,477,443,448,464,439],
[439,429,0,435,449,425,449,456,416],
[426,414,455,0,447,440,460,456,409],
[416,413,441,443,0,417,430,474,420],
[450,447,465,450,473,0,440,474,438],
[447,442,441,430,460,450,0,448,436],
[389,426,434,434,416,416,442,0,390],
[438,451,474,481,470,452,454,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,288,416,343,442,438,355,328],
[442,0,359,438,381,475,356,357,379],
[602,531,0,482,429,522,389,475,480],
[474,452,408,0,351,424,381,349,377],
[547,509,461,539,0,511,545,523,434],
[448,415,368,466,379,0,370,409,452],
[452,534,501,509,345,520,0,415,432],
[535,533,415,541,367,481,475,0,362],
[562,511,410,513,456,438,458,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,427,424,433,411,423,419,445],
[465,0,478,474,461,458,449,437,475],
[463,412,0,440,453,436,436,433,462],
[466,416,450,0,460,447,448,434,463],
[457,429,437,430,0,415,419,430,470],
[479,432,454,443,475,0,451,433,477],
[467,441,454,442,471,439,0,422,448],
[471,453,457,456,460,457,468,0,434],
[445,415,428,427,420,413,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,462,448,464,465,453,441,471],
[433,0,445,458,429,454,453,464,460],
[428,445,0,421,429,428,429,416,447],
[442,432,469,0,445,461,433,449,474],
[426,461,461,445,0,438,439,438,449],
[425,436,462,429,452,0,455,436,455],
[437,437,461,457,451,435,0,440,457],
[449,426,474,441,452,454,450,0,462],
[419,430,443,416,441,435,433,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,489,449,459,452,496,509,433],
[406,0,475,419,469,446,481,460,467],
[401,415,0,424,429,445,468,420,433],
[441,471,466,0,485,445,466,467,437],
[431,421,461,405,0,446,409,433,429],
[438,444,445,445,444,0,486,440,400],
[394,409,422,424,481,404,0,439,467],
[381,430,470,423,457,450,451,0,429],
[457,423,457,453,461,490,423,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,461,501,423,471,445,425,449],
[420,0,443,442,425,430,436,452,438],
[429,447,0,489,408,423,404,412,409],
[389,448,401,0,350,386,395,378,410],
[467,465,482,540,0,416,428,444,384],
[419,460,467,504,474,0,458,420,476],
[445,454,486,495,462,432,0,465,453],
[465,438,478,512,446,470,425,0,454],
[441,452,481,480,506,414,437,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,493,536,410,515,456,485,451],
[536,0,517,623,390,451,463,480,428],
[397,373,0,524,412,430,416,435,377],
[354,267,366,0,373,404,353,379,417],
[480,500,478,517,0,423,489,479,442],
[375,439,460,486,467,0,449,456,449],
[434,427,474,537,401,441,0,496,445],
[405,410,455,511,411,434,394,0,451],
[439,462,513,473,448,441,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,438,419,412,386,410,474,467],
[468,0,439,446,473,416,455,440,468],
[452,451,0,462,431,458,448,497,468],
[471,444,428,0,399,402,443,458,441],
[478,417,459,491,0,431,451,490,463],
[504,474,432,488,459,0,428,454,410],
[480,435,442,447,439,462,0,491,450],
[416,450,393,432,400,436,399,0,421],
[423,422,422,449,427,480,440,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,447,420,495,490,448,471,456],
[492,0,499,442,508,517,496,509,455],
[443,391,0,437,490,502,473,450,445],
[470,448,453,0,471,503,502,422,459],
[395,382,400,419,0,477,465,443,408],
[400,373,388,387,413,0,430,387,414],
[442,394,417,388,425,460,0,434,437],
[419,381,440,468,447,503,456,0,455],
[434,435,445,431,482,476,453,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,475,458,424,438,423,428,427],
[427,0,418,438,410,405,413,393,413],
[415,472,0,463,426,438,442,406,427],
[432,452,427,0,425,415,429,411,425],
[466,480,464,465,0,453,441,429,441],
[452,485,452,475,437,0,442,448,440],
[467,477,448,461,449,448,0,427,442],
[462,497,484,479,461,442,463,0,466],
[463,477,463,465,449,450,448,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,439,451,438,448,397,430,397],
[474,0,491,473,484,455,467,426,453],
[451,399,0,461,488,428,384,430,397],
[439,417,429,0,480,446,430,443,455],
[452,406,402,410,0,459,440,397,405],
[442,435,462,444,431,0,415,414,436],
[493,423,506,460,450,475,0,457,430],
[460,464,460,447,493,476,433,0,463],
[493,437,493,435,485,454,460,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,439,406,423,420,413,423,412],
[436,0,423,423,414,423,435,438,401],
[451,467,0,444,438,428,434,424,425],
[484,467,446,0,460,458,467,456,425],
[467,476,452,430,0,455,455,456,437],
[470,467,462,432,435,0,499,446,446],
[477,455,456,423,435,391,0,433,438],
[467,452,466,434,434,444,457,0,431],
[478,489,465,465,453,444,452,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,451,460,455,437,438,423,446],
[458,0,455,458,437,451,465,456,459],
[439,435,0,442,459,454,442,444,440],
[430,432,448,0,443,427,441,449,450],
[435,453,431,447,0,426,434,436,440],
[453,439,436,463,464,0,450,464,466],
[452,425,448,449,456,440,0,459,422],
[467,434,446,441,454,426,431,0,436],
[444,431,450,440,450,424,468,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,428,468,467,451,455,420,423],
[450,0,455,479,476,470,459,423,425],
[462,435,0,449,476,467,456,401,426],
[422,411,441,0,430,455,439,414,391],
[423,414,414,460,0,448,456,422,410],
[439,420,423,435,442,0,434,434,406],
[435,431,434,451,434,456,0,412,418],
[470,467,489,476,468,456,478,0,445],
[467,465,464,499,480,484,472,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,449,418,402,415,430,449,411],
[458,0,473,462,446,438,458,472,443],
[441,417,0,447,429,438,447,446,438],
[472,428,443,0,415,431,435,459,457],
[488,444,461,475,0,455,465,461,438],
[475,452,452,459,435,0,457,458,432],
[460,432,443,455,425,433,0,456,433],
[441,418,444,431,429,432,434,0,410],
[479,447,452,433,452,458,457,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,463,465,461,435,463,436,426],
[451,0,450,465,457,451,469,465,422],
[427,440,0,464,447,425,464,452,429],
[425,425,426,0,445,428,433,414,427],
[429,433,443,445,0,427,448,445,401],
[455,439,465,462,463,0,472,449,445],
[427,421,426,457,442,418,0,425,405],
[454,425,438,476,445,441,465,0,419],
[464,468,461,463,489,445,485,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,420,511,422,483,449,460],
[446,0,435,445,451,420,460,470,463],
[437,455,0,420,489,452,460,487,453],
[470,445,470,0,488,427,471,449,467],
[379,439,401,402,0,393,435,411,417],
[468,470,438,463,497,0,468,461,469],
[407,430,430,419,455,422,0,424,432],
[441,420,403,441,479,429,466,0,417],
[430,427,437,423,473,421,458,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,336,331,367,303,433,471,415],
[394,0,350,461,355,329,442,450,372],
[554,540,0,487,467,318,521,480,332],
[559,429,403,0,494,431,543,447,453],
[523,535,423,396,0,422,585,506,382],
[587,561,572,459,468,0,569,456,327],
[457,448,369,347,305,321,0,392,277],
[419,440,410,443,384,434,498,0,522],
[475,518,558,437,508,563,613,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,389,586,580,547,468,596,528],
[447,0,551,491,424,410,507,644,514],
[501,339,0,424,484,550,424,583,492],
[304,399,466,0,387,440,507,440,531],
[310,466,406,503,0,461,533,520,473],
[343,480,340,450,429,0,472,437,467],
[422,383,466,383,357,418,0,404,460],
[294,246,307,450,370,453,486,0,498],
[362,376,398,359,417,423,430,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,432,428,434,441,439,454,453],
[436,0,445,442,428,451,447,453,453],
[458,445,0,424,431,462,425,448,465],
[462,448,466,0,458,462,444,458,477],
[456,462,459,432,0,455,439,454,467],
[449,439,428,428,435,0,430,442,466],
[451,443,465,446,451,460,0,447,480],
[436,437,442,432,436,448,443,0,468],
[437,437,425,413,423,424,410,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,408,426,411,376,363,423,394],
[474,0,432,441,420,417,393,456,395],
[482,458,0,464,433,410,394,463,430],
[464,449,426,0,424,459,406,466,420],
[479,470,457,466,0,433,421,468,437],
[514,473,480,431,457,0,445,477,448],
[527,497,496,484,469,445,0,498,438],
[467,434,427,424,422,413,392,0,402],
[496,495,460,470,453,442,452,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,456,461,479,458,437,443,458],
[404,0,409,430,450,443,426,407,436],
[434,481,0,468,461,452,446,465,461],
[429,460,422,0,458,430,416,444,444],
[411,440,429,432,0,427,391,443,446],
[432,447,438,460,463,0,430,442,419],
[453,464,444,474,499,460,0,475,471],
[447,483,425,446,447,448,415,0,429],
[432,454,429,446,444,471,419,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,435,437,415,405,401,389,391],
[478,0,475,445,474,459,450,455,484],
[455,415,0,438,420,448,424,422,445],
[453,445,452,0,496,463,428,460,481],
[475,416,470,394,0,417,442,385,461],
[485,431,442,427,473,0,423,410,431],
[489,440,466,462,448,467,0,450,465],
[501,435,468,430,505,480,440,0,464],
[499,406,445,409,429,459,425,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,453,420,450,480,468,449,459],
[456,0,432,439,407,444,437,449,464],
[437,458,0,407,437,420,450,451,438],
[470,451,483,0,461,461,458,443,453],
[440,483,453,429,0,436,442,444,453],
[410,446,470,429,454,0,441,464,484],
[422,453,440,432,448,449,0,483,480],
[441,441,439,447,446,426,407,0,436],
[431,426,452,437,437,406,410,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,421,411,420,423,419,446,424],
[465,0,420,422,452,437,417,452,425],
[469,470,0,435,469,453,453,465,439],
[479,468,455,0,471,456,440,454,443],
[470,438,421,419,0,413,438,444,423],
[467,453,437,434,477,0,461,440,438],
[471,473,437,450,452,429,0,460,448],
[444,438,425,436,446,450,430,0,413],
[466,465,451,447,467,452,442,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,456,467,465,465,453,507,487],
[523,0,487,505,528,441,466,573,528],
[434,403,0,469,473,411,414,476,472],
[423,385,421,0,424,389,406,438,487],
[425,362,417,466,0,425,414,457,455],
[425,449,479,501,465,0,426,513,502],
[437,424,476,484,476,464,0,479,496],
[383,317,414,452,433,377,411,0,427],
[403,362,418,403,435,388,394,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,454,449,412,438,431,449,433],
[458,0,432,431,428,448,437,451,440],
[436,458,0,443,393,448,434,462,414],
[441,459,447,0,446,483,476,471,419],
[478,462,497,444,0,473,468,461,447],
[452,442,442,407,417,0,449,451,428],
[459,453,456,414,422,441,0,441,428],
[441,439,428,419,429,439,449,0,430],
[457,450,476,471,443,462,462,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,447,443,474,448,467,457,435],
[441,0,441,452,454,431,451,447,442],
[443,449,0,471,473,457,446,449,440],
[447,438,419,0,461,427,430,431,445],
[416,436,417,429,0,441,406,437,414],
[442,459,433,463,449,0,423,451,439],
[423,439,444,460,484,467,0,452,439],
[433,443,441,459,453,439,438,0,430],
[455,448,450,445,476,451,451,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,455,441,450,434,413,427,420],
[478,0,445,458,476,475,459,455,481],
[435,445,0,459,453,454,438,433,450],
[449,432,431,0,450,409,449,410,437],
[440,414,437,440,0,443,427,438,427],
[456,415,436,481,447,0,435,443,440],
[477,431,452,441,463,455,0,470,431],
[463,435,457,480,452,447,420,0,430],
[470,409,440,453,463,450,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,451,471,376,474,514,421,406],
[465,0,466,541,445,518,483,529,455],
[439,424,0,476,408,483,498,393,409],
[419,349,414,0,359,431,431,445,370],
[514,445,482,531,0,493,469,467,468],
[416,372,407,459,397,0,441,419,381],
[376,407,392,459,421,449,0,460,428],
[469,361,497,445,423,471,430,0,411],
[484,435,481,520,422,509,462,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,475,460,443,503,479,452,462],
[409,0,434,406,434,474,417,454,433],
[415,456,0,420,407,429,436,405,406],
[430,484,470,0,482,486,483,475,487],
[447,456,483,408,0,476,460,420,450],
[387,416,461,404,414,0,400,401,417],
[411,473,454,407,430,490,0,433,443],
[438,436,485,415,470,489,457,0,467],
[428,457,484,403,440,473,447,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,450,449,443,457,439,430,473],
[442,0,469,429,446,460,458,449,462],
[440,421,0,410,428,438,434,408,454],
[441,461,480,0,442,463,449,439,463],
[447,444,462,448,0,446,443,448,482],
[433,430,452,427,444,0,438,438,462],
[451,432,456,441,447,452,0,448,465],
[460,441,482,451,442,452,442,0,471],
[417,428,436,427,408,428,425,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,430,396,481,450,425,398,399],
[506,0,424,420,492,447,498,373,470],
[460,466,0,483,610,471,454,464,416],
[494,470,407,0,432,429,395,458,442],
[409,398,280,458,0,379,422,404,384],
[440,443,419,461,511,0,429,417,424],
[465,392,436,495,468,461,0,488,472],
[492,517,426,432,486,473,402,0,429],
[491,420,474,448,506,466,418,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,409,431,425,451,401,459,427],
[458,0,445,446,437,466,436,427,476],
[481,445,0,462,446,472,443,455,467],
[459,444,428,0,431,474,426,461,451],
[465,453,444,459,0,493,453,463,471],
[439,424,418,416,397,0,406,420,417],
[489,454,447,464,437,484,0,466,455],
[431,463,435,429,427,470,424,0,459],
[463,414,423,439,419,473,435,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,459,438,428,471,439,460,495],
[434,0,449,455,455,458,440,477,480],
[431,441,0,422,425,454,449,468,475],
[452,435,468,0,431,451,441,445,467],
[462,435,465,459,0,461,432,466,465],
[419,432,436,439,429,0,423,452,480],
[451,450,441,449,458,467,0,475,472],
[430,413,422,445,424,438,415,0,438],
[395,410,415,423,425,410,418,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,452,441,451,446,448,448,446],
[444,0,444,418,453,448,429,418,418],
[438,446,0,455,456,459,446,445,443],
[449,472,435,0,460,462,450,438,449],
[439,437,434,430,0,449,434,422,440],
[444,442,431,428,441,0,427,436,430],
[442,461,444,440,456,463,0,440,447],
[442,472,445,452,468,454,450,0,465],
[444,472,447,441,450,460,443,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,443,451,479,448,467,456],
[451,0,455,436,458,462,449,431,451],
[442,435,0,451,445,459,458,464,449],
[447,454,439,0,451,463,439,446,471],
[439,432,445,439,0,453,432,456,460],
[411,428,431,427,437,0,421,452,446],
[442,441,432,451,458,469,0,462,442],
[423,459,426,444,434,438,428,0,457],
[434,439,441,419,430,444,448,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,451,642,486,329,355,534,533],
[589,0,554,613,439,506,470,497,571],
[439,336,0,546,452,368,402,507,525],
[248,277,344,0,323,240,275,356,434],
[404,451,438,567,0,445,389,530,491],
[561,384,522,650,445,0,573,480,522],
[535,420,488,615,501,317,0,564,527],
[356,393,383,534,360,410,326,0,382],
[357,319,365,456,399,368,363,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,426,442,458,443,434,410,449],
[468,0,439,445,459,444,433,443,460],
[464,451,0,454,465,450,440,446,452],
[448,445,436,0,450,432,459,426,446],
[432,431,425,440,0,475,463,427,434],
[447,446,440,458,415,0,460,457,450],
[456,457,450,431,427,430,0,438,446],
[480,447,444,464,463,433,452,0,456],
[441,430,438,444,456,440,444,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,426,445,468,497,448,436,484],
[377,0,387,414,399,445,372,432,405],
[464,503,0,474,486,523,474,480,441],
[445,476,416,0,453,502,436,486,453],
[422,491,404,437,0,483,387,403,440],
[393,445,367,388,407,0,384,386,438],
[442,518,416,454,503,506,0,463,481],
[454,458,410,404,487,504,427,0,447],
[406,485,449,437,450,452,409,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,472,458,476,461,450,454,438],
[432,0,446,444,479,452,416,423,432],
[418,444,0,432,440,465,399,452,424],
[432,446,458,0,465,471,435,431,429],
[414,411,450,425,0,436,421,413,439],
[429,438,425,419,454,0,419,415,410],
[440,474,491,455,469,471,0,453,450],
[436,467,438,459,477,475,437,0,422],
[452,458,466,461,451,480,440,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,417,449,405,437,400,439,446],
[462,0,459,445,436,461,448,460,449],
[473,431,0,434,445,437,423,445,438],
[441,445,456,0,434,441,426,445,431],
[485,454,445,456,0,436,447,458,466],
[453,429,453,449,454,0,442,459,447],
[490,442,467,464,443,448,0,458,446],
[451,430,445,445,432,431,432,0,449],
[444,441,452,459,424,443,444,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,391,434,403,413,413,376,371],
[537,0,453,503,433,491,453,433,430],
[499,437,0,490,407,493,416,455,432],
[456,387,400,0,389,441,426,395,380],
[487,457,483,501,0,516,428,445,457],
[477,399,397,449,374,0,431,392,385],
[477,437,474,464,462,459,0,414,433],
[514,457,435,495,445,498,476,0,416],
[519,460,458,510,433,505,457,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,433,423,430,468,448,457,422],
[454,0,466,467,465,448,451,426,456],
[457,424,0,417,438,458,436,460,444],
[467,423,473,0,449,461,447,444,447],
[460,425,452,441,0,448,426,433,420],
[422,442,432,429,442,0,456,439,412],
[442,439,454,443,464,434,0,473,439],
[433,464,430,446,457,451,417,0,442],
[468,434,446,443,470,478,451,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,433,439,427,401,393,437,447],
[484,0,438,466,511,455,434,465,473],
[457,452,0,450,489,434,380,440,460],
[451,424,440,0,451,436,448,473,465],
[463,379,401,439,0,409,379,417,419],
[489,435,456,454,481,0,465,463,443],
[497,456,510,442,511,425,0,486,488],
[453,425,450,417,473,427,404,0,446],
[443,417,430,425,471,447,402,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,442,487,416,411,443,436,429],
[499,0,454,499,443,468,392,456,457],
[448,436,0,491,431,399,459,418,417],
[403,391,399,0,386,364,373,396,417],
[474,447,459,504,0,420,398,443,460],
[479,422,491,526,470,0,415,462,437],
[447,498,431,517,492,475,0,465,462],
[454,434,472,494,447,428,425,0,463],
[461,433,473,473,430,453,428,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,506,472,484,494,478,496,499],
[447,0,460,417,439,469,460,435,429],
[384,430,0,428,416,449,432,432,422],
[418,473,462,0,460,473,459,470,435],
[406,451,474,430,0,443,467,434,447],
[396,421,441,417,447,0,471,448,440],
[412,430,458,431,423,419,0,446,419],
[394,455,458,420,456,442,444,0,441],
[391,461,468,455,443,450,471,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,407,433,434,430,404,441,417],
[466,0,438,448,470,430,458,464,461],
[483,452,0,442,462,423,470,470,465],
[457,442,448,0,436,444,419,443,455],
[456,420,428,454,0,406,432,447,451],
[460,460,467,446,484,0,466,480,439],
[486,432,420,471,458,424,0,461,473],
[449,426,420,447,443,410,429,0,451],
[473,429,425,435,439,451,417,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,435,434,434,452,453,417,455],
[386,0,406,431,415,420,428,401,428],
[455,484,0,451,438,453,466,422,475],
[456,459,439,0,455,426,451,408,481],
[456,475,452,435,0,444,452,435,461],
[438,470,437,464,446,0,470,450,464],
[437,462,424,439,438,420,0,404,436],
[473,489,468,482,455,440,486,0,458],
[435,462,415,409,429,426,454,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,452,471,485,384,387,440,470],
[492,0,463,486,442,424,454,370,506],
[438,427,0,440,437,416,402,467,412],
[419,404,450,0,428,369,397,423,406],
[405,448,453,462,0,397,436,415,474],
[506,466,474,521,493,0,469,434,470],
[503,436,488,493,454,421,0,433,476],
[450,520,423,467,475,456,457,0,446],
[420,384,478,484,416,420,414,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,428,486,457,447,450,448,485],
[412,0,435,436,413,435,423,409,434],
[462,455,0,457,393,410,432,436,456],
[404,454,433,0,391,471,419,462,456],
[433,477,497,499,0,465,449,502,493],
[443,455,480,419,425,0,407,476,466],
[440,467,458,471,441,483,0,498,494],
[442,481,454,428,388,414,392,0,436],
[405,456,434,434,397,424,396,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,417,457,432,434,444,448,424],
[444,0,411,419,438,437,448,464,423],
[473,479,0,467,480,461,487,485,444],
[433,471,423,0,433,441,430,463,429],
[458,452,410,457,0,444,446,467,434],
[456,453,429,449,446,0,445,446,421],
[446,442,403,460,444,445,0,440,462],
[442,426,405,427,423,444,450,0,440],
[466,467,446,461,456,469,428,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,414,448,437,416,443,430,439],
[469,0,439,444,447,436,460,439,445],
[476,451,0,453,458,444,462,431,439],
[442,446,437,0,440,429,471,427,427],
[453,443,432,450,0,422,456,433,443],
[474,454,446,461,468,0,451,439,443],
[447,430,428,419,434,439,0,429,426],
[460,451,459,463,457,451,461,0,440],
[451,445,451,463,447,447,464,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,451,465,492,422,468,441,415],
[484,0,459,530,504,402,484,418,486],
[439,431,0,489,468,430,456,402,410],
[425,360,401,0,388,409,429,428,333],
[398,386,422,502,0,360,428,409,386],
[468,488,460,481,530,0,449,440,482],
[422,406,434,461,462,441,0,379,406],
[449,472,488,462,481,450,511,0,432],
[475,404,480,557,504,408,484,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,380,418,373,436,403,415,456],
[503,0,423,548,469,531,489,504,581],
[510,467,0,516,425,473,446,410,513],
[472,342,374,0,300,413,352,378,465],
[517,421,465,590,0,501,516,466,546],
[454,359,417,477,389,0,464,464,516],
[487,401,444,538,374,426,0,460,497],
[475,386,480,512,424,426,430,0,432],
[434,309,377,425,344,374,393,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,477,442,476,432,433,464,489],
[427,0,477,401,439,380,463,451,466],
[413,413,0,401,430,391,438,423,491],
[448,489,489,0,489,427,448,437,525],
[414,451,460,401,0,429,480,466,487],
[458,510,499,463,461,0,442,454,527],
[457,427,452,442,410,448,0,401,455],
[426,439,467,453,424,436,489,0,504],
[401,424,399,365,403,363,435,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,456,448,467,461,447,459,429],
[414,0,437,431,461,425,416,430,453],
[434,453,0,445,448,440,404,443,420],
[442,459,445,0,458,436,427,452,425],
[423,429,442,432,0,423,413,411,413],
[429,465,450,454,467,0,410,448,446],
[443,474,486,463,477,480,0,459,446],
[431,460,447,438,479,442,431,0,437],
[461,437,470,465,477,444,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,468,548,404,439,481,587,408],
[373,0,396,423,423,316,364,586,421],
[422,494,0,478,460,350,435,569,418],
[342,467,412,0,387,465,489,526,332],
[486,467,430,503,0,361,430,508,468],
[451,574,540,425,529,0,529,564,496],
[409,526,455,401,460,361,0,553,432],
[303,304,321,364,382,326,337,0,386],
[482,469,472,558,422,394,458,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,464,460,485,461,465,443,469],
[403,0,449,440,435,442,457,437,437],
[426,441,0,448,479,424,425,429,450],
[430,450,442,0,441,437,443,390,437],
[405,455,411,449,0,410,427,409,408],
[429,448,466,453,480,0,464,443,449],
[425,433,465,447,463,426,0,422,398],
[447,453,461,500,481,447,468,0,433],
[421,453,440,453,482,441,492,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,363,315,453,247,377,415,254,254],
[527,0,346,492,408,531,577,451,309],
[575,544,0,615,456,586,582,499,379],
[437,398,275,0,375,398,498,437,399],
[643,482,434,515,0,563,705,496,496],
[513,359,304,492,327,0,472,304,366],
[475,313,308,392,185,418,0,389,432],
[636,439,391,453,394,586,501,0,402],
[636,581,511,491,394,524,458,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,469,487,470,480,454,439,425],
[435,0,453,453,480,472,447,461,456],
[421,437,0,452,419,445,416,404,412],
[403,437,438,0,450,457,430,407,414],
[420,410,471,440,0,453,429,428,414],
[410,418,445,433,437,0,405,430,405],
[436,443,474,460,461,485,0,462,442],
[451,429,486,483,462,460,428,0,452],
[465,434,478,476,476,485,448,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,442,456,440,456,447,452,482],
[456,0,457,451,440,459,432,443,431],
[448,433,0,440,412,441,414,439,460],
[434,439,450,0,417,453,396,454,438],
[450,450,478,473,0,458,421,433,453],
[434,431,449,437,432,0,396,457,415],
[443,458,476,494,469,494,0,465,443],
[438,447,451,436,457,433,425,0,428],
[408,459,430,452,437,475,447,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,408,366,410,428,407,438,403],
[471,0,428,384,403,500,442,483,456],
[482,462,0,452,418,456,428,451,452],
[524,506,438,0,468,526,457,475,506],
[480,487,472,422,0,513,451,431,440],
[462,390,434,364,377,0,397,367,409],
[483,448,462,433,439,493,0,469,448],
[452,407,439,415,459,523,421,0,434],
[487,434,438,384,450,481,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,467,443,451,452,465,459,445],
[421,0,420,413,435,444,443,423,438],
[423,470,0,439,445,414,485,423,453],
[447,477,451,0,435,430,461,427,452],
[439,455,445,455,0,464,471,443,446],
[438,446,476,460,426,0,481,446,462],
[425,447,405,429,419,409,0,413,407],
[431,467,467,463,447,444,477,0,483],
[445,452,437,438,444,428,483,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,461,447,458,439,417,463,411],
[429,0,458,416,442,438,425,445,431],
[429,432,0,413,443,411,424,463,428],
[443,474,477,0,482,453,455,476,468],
[432,448,447,408,0,421,457,457,435],
[451,452,479,437,469,0,457,487,450],
[473,465,466,435,433,433,0,462,455],
[427,445,427,414,433,403,428,0,424],
[479,459,462,422,455,440,435,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,419,442,449,450,440,445,452],
[434,0,425,431,427,458,429,441,425],
[471,465,0,453,451,479,441,456,454],
[448,459,437,0,445,483,436,469,452],
[441,463,439,445,0,455,430,436,444],
[440,432,411,407,435,0,420,441,444],
[450,461,449,454,460,470,0,445,455],
[445,449,434,421,454,449,445,0,431],
[438,465,436,438,446,446,435,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,441,428,425,421,458,439,463],
[465,0,460,456,446,444,469,482,446],
[449,430,0,445,431,426,449,453,460],
[462,434,445,0,441,446,455,461,466],
[465,444,459,449,0,438,467,484,471],
[469,446,464,444,452,0,447,471,474],
[432,421,441,435,423,443,0,428,436],
[451,408,437,429,406,419,462,0,430],
[427,444,430,424,419,416,454,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,446,461,434,458,445,445,435],
[423,0,440,457,432,428,451,453,425],
[444,450,0,446,445,467,451,459,456],
[429,433,444,0,440,447,427,442,444],
[456,458,445,450,0,460,452,439,439],
[432,462,423,443,430,0,436,439,442],
[445,439,439,463,438,454,0,428,453],
[445,437,431,448,451,451,462,0,449],
[455,465,434,446,451,448,437,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,427,415,425,432,436,433,442],
[438,0,432,454,425,430,410,420,446],
[463,458,0,453,449,423,430,435,426],
[475,436,437,0,438,444,441,451,442],
[465,465,441,452,0,466,468,449,448],
[458,460,467,446,424,0,451,426,456],
[454,480,460,449,422,439,0,439,417],
[457,470,455,439,441,464,451,0,435],
[448,444,464,448,442,434,473,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,424,363,412,372,343,336,418],
[494,0,539,411,462,417,480,435,429],
[466,351,0,374,413,439,386,435,429],
[527,479,516,0,455,476,406,398,402],
[478,428,477,435,0,472,466,373,468],
[518,473,451,414,418,0,421,429,435],
[547,410,504,484,424,469,0,455,390],
[554,455,455,492,517,461,435,0,459],
[472,461,461,488,422,455,500,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,474,420,457,452,432,528,540],
[384,0,443,446,435,442,431,412,405],
[416,447,0,383,382,395,399,438,429],
[470,444,507,0,484,450,478,504,434],
[433,455,508,406,0,417,396,466,471],
[438,448,495,440,473,0,415,433,484],
[458,459,491,412,494,475,0,528,445],
[362,478,452,386,424,457,362,0,507],
[350,485,461,456,419,406,445,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,485,467,458,447,437,492,416],
[403,0,401,424,442,403,466,488,492],
[405,489,0,454,425,446,435,478,455],
[423,466,436,0,408,417,397,479,427],
[432,448,465,482,0,410,402,489,489],
[443,487,444,473,480,0,455,507,531],
[453,424,455,493,488,435,0,468,493],
[398,402,412,411,401,383,422,0,444],
[474,398,435,463,401,359,397,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,411,428,439,430,452,460,442],
[445,0,407,423,460,460,471,425,437],
[479,483,0,454,467,468,487,439,450],
[462,467,436,0,467,477,452,445,439],
[451,430,423,423,0,458,477,447,452],
[460,430,422,413,432,0,462,446,441],
[438,419,403,438,413,428,0,437,434],
[430,465,451,445,443,444,453,0,448],
[448,453,440,451,438,449,456,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,462,471,446,481,442,471,453],
[458,0,454,476,433,486,446,472,442],
[428,436,0,441,417,450,446,449,453],
[419,414,449,0,414,450,430,444,445],
[444,457,473,476,0,523,500,478,476],
[409,404,440,440,367,0,408,436,406],
[448,444,444,460,390,482,0,454,425],
[419,418,441,446,412,454,436,0,422],
[437,448,437,445,414,484,465,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,431,447,444,417,453,458,454],
[431,0,463,417,452,429,449,457,447],
[459,427,0,430,438,452,457,495,402],
[443,473,460,0,435,494,456,492,489],
[446,438,452,455,0,471,434,457,427],
[473,461,438,396,419,0,381,495,439],
[437,441,433,434,456,509,0,440,370],
[432,433,395,398,433,395,450,0,421],
[436,443,488,401,463,451,520,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,450,446,432,442,436,472,420],
[447,0,451,433,419,438,450,455,430],
[440,439,0,447,451,444,421,460,431],
[444,457,443,0,453,444,453,460,442],
[458,471,439,437,0,431,443,474,434],
[448,452,446,446,459,0,434,465,450],
[454,440,469,437,447,456,0,452,440],
[418,435,430,430,416,425,438,0,412],
[470,460,459,448,456,440,450,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,451,456,414,436,465,399,524],
[466,0,418,508,476,468,465,476,473],
[439,472,0,476,435,457,514,434,501],
[434,382,414,0,411,458,472,401,477],
[476,414,455,479,0,424,472,412,510],
[454,422,433,432,466,0,463,443,485],
[425,425,376,418,418,427,0,410,404],
[491,414,456,489,478,447,480,0,509],
[366,417,389,413,380,405,486,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,414,446,460,413,445,402,412],
[455,0,420,427,465,399,445,415,441],
[476,470,0,511,439,430,453,458,428],
[444,463,379,0,407,402,362,406,378],
[430,425,451,483,0,438,450,459,438],
[477,491,460,488,452,0,450,478,414],
[445,445,437,528,440,440,0,460,448],
[488,475,432,484,431,412,430,0,420],
[478,449,462,512,452,476,442,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,448,436,416,434,423,435],
[456,0,451,449,457,441,455,450,453],
[450,439,0,420,438,406,441,434,433],
[442,441,470,0,447,428,439,436,460],
[454,433,452,443,0,431,430,447,434],
[474,449,484,462,459,0,452,470,431],
[456,435,449,451,460,438,0,440,439],
[467,440,456,454,443,420,450,0,460],
[455,437,457,430,456,459,451,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,438,458,484,464,451,456,477],
[466,0,444,453,476,448,475,439,459],
[452,446,0,474,467,436,460,471,456],
[432,437,416,0,448,462,455,457,425],
[406,414,423,442,0,436,466,449,426],
[426,442,454,428,454,0,438,474,456],
[439,415,430,435,424,452,0,446,439],
[434,451,419,433,441,416,444,0,444],
[413,431,434,465,464,434,451,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,426,456,445,431,461,464,445],
[413,0,451,434,439,431,450,439,433],
[464,439,0,427,435,432,436,459,466],
[434,456,463,0,445,458,429,457,437],
[445,451,455,445,0,451,437,445,452],
[459,459,458,432,439,0,448,469,470],
[429,440,454,461,453,442,0,475,442],
[426,451,431,433,445,421,415,0,446],
[445,457,424,453,438,420,448,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,485,468,455,538,441,474,490],
[428,0,342,408,425,453,402,339,405],
[405,548,0,544,484,507,494,511,408],
[422,482,346,0,479,565,476,487,474],
[435,465,406,411,0,427,414,384,446],
[352,437,383,325,463,0,440,397,491],
[449,488,396,414,476,450,0,404,411],
[416,551,379,403,506,493,486,0,420],
[400,485,482,416,444,399,479,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,445,453,443,441,434,450,455],
[396,0,448,437,438,442,428,445,425],
[445,442,0,426,408,441,432,445,428],
[437,453,464,0,441,440,428,427,426],
[447,452,482,449,0,454,441,459,460],
[449,448,449,450,436,0,461,455,428],
[456,462,458,462,449,429,0,444,443],
[440,445,445,463,431,435,446,0,429],
[435,465,462,464,430,462,447,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,400,434,440,445,436,404,429],
[456,0,448,451,463,454,448,446,424],
[490,442,0,471,460,445,454,453,446],
[456,439,419,0,443,453,443,428,434],
[450,427,430,447,0,454,456,426,442],
[445,436,445,437,436,0,455,430,442],
[454,442,436,447,434,435,0,439,437],
[486,444,437,462,464,460,451,0,472],
[461,466,444,456,448,448,453,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,483,498,484,448,456,463,478],
[445,0,483,494,470,453,481,482,467],
[407,407,0,439,447,418,441,469,423],
[392,396,451,0,449,438,446,473,435],
[406,420,443,441,0,434,435,443,447],
[442,437,472,452,456,0,469,470,445],
[434,409,449,444,455,421,0,434,460],
[427,408,421,417,447,420,456,0,442],
[412,423,467,455,443,445,430,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,457,442,471,463,455,485,441],
[451,0,468,442,424,463,455,476,439],
[433,422,0,434,431,428,433,459,443],
[448,448,456,0,435,446,440,471,431],
[419,466,459,455,0,461,452,455,453],
[427,427,462,444,429,0,441,472,445],
[435,435,457,450,438,449,0,471,426],
[405,414,431,419,435,418,419,0,414],
[449,451,447,459,437,445,464,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,418,413,461,443,468,395,451],
[398,0,403,394,426,326,450,395,407],
[472,487,0,472,465,437,506,471,477],
[477,496,418,0,457,380,480,429,462],
[429,464,425,433,0,406,487,373,485],
[447,564,453,510,484,0,465,412,460],
[422,440,384,410,403,425,0,386,413],
[495,495,419,461,517,478,504,0,460],
[439,483,413,428,405,430,477,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,489,439,451,465,465,466,443],
[412,0,449,424,409,432,414,439,402],
[401,441,0,445,397,442,445,450,400],
[451,466,445,0,400,433,446,459,467],
[439,481,493,490,0,460,469,484,468],
[425,458,448,457,430,0,441,428,406],
[425,476,445,444,421,449,0,491,430],
[424,451,440,431,406,462,399,0,430],
[447,488,490,423,422,484,460,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,446,486,449,434,468,452,441],
[431,0,463,456,446,464,451,432,455],
[444,427,0,459,433,435,447,426,448],
[404,434,431,0,419,433,422,435,406],
[441,444,457,471,0,434,454,440,436],
[456,426,455,457,456,0,463,443,443],
[422,439,443,468,436,427,0,437,427],
[438,458,464,455,450,447,453,0,437],
[449,435,442,484,454,447,463,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,427,448,458,448,461,435,451],
[421,0,426,441,452,439,449,430,434],
[463,464,0,447,465,456,474,465,444],
[442,449,443,0,467,465,461,441,440],
[432,438,425,423,0,441,456,429,450],
[442,451,434,425,449,0,443,429,433],
[429,441,416,429,434,447,0,439,430],
[455,460,425,449,461,461,451,0,477],
[439,456,446,450,440,457,460,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,427,424,424,450,425,429,449],
[442,0,436,427,435,466,439,483,466],
[463,454,0,437,447,464,452,479,459],
[466,463,453,0,454,470,438,499,462],
[466,455,443,436,0,461,454,461,457],
[440,424,426,420,429,0,432,472,449],
[465,451,438,452,436,458,0,472,479],
[461,407,411,391,429,418,418,0,439],
[441,424,431,428,433,441,411,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,433,433,420,463,409,448,424],
[470,0,454,456,449,457,421,453,459],
[457,436,0,441,445,434,431,443,462],
[457,434,449,0,446,456,430,446,455],
[470,441,445,444,0,460,452,453,455],
[427,433,456,434,430,0,418,451,458],
[481,469,459,460,438,472,0,464,462],
[442,437,447,444,437,439,426,0,433],
[466,431,428,435,435,432,428,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,443,455,451,461,476,466,480],
[427,0,438,455,433,447,463,461,447],
[447,452,0,436,475,475,483,450,469],
[435,435,454,0,447,463,470,476,472],
[439,457,415,443,0,466,430,476,458],
[429,443,415,427,424,0,462,450,442],
[414,427,407,420,460,428,0,444,434],
[424,429,440,414,414,440,446,0,411],
[410,443,421,418,432,448,456,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,480,453,431,440,429,460,488],
[419,0,444,450,444,453,420,419,454],
[410,446,0,396,450,443,448,449,469],
[437,440,494,0,443,434,441,453,482],
[459,446,440,447,0,452,456,449,462],
[450,437,447,456,438,0,423,444,460],
[461,470,442,449,434,467,0,432,482],
[430,471,441,437,441,446,458,0,426],
[402,436,421,408,428,430,408,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,501,491,493,421,489,497,452],
[418,0,478,471,441,431,474,434,389],
[389,412,0,470,419,401,422,443,393],
[399,419,420,0,439,405,440,463,391],
[397,449,471,451,0,469,489,478,447],
[469,459,489,485,421,0,511,480,425],
[401,416,468,450,401,379,0,446,350],
[393,456,447,427,412,410,444,0,394],
[438,501,497,499,443,465,540,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,451,466,453,455,464,459,450],
[456,0,450,443,455,460,449,447,431],
[439,440,0,444,448,420,454,420,461],
[424,447,446,0,435,411,449,428,424],
[437,435,442,455,0,461,455,449,435],
[435,430,470,479,429,0,454,431,437],
[426,441,436,441,435,436,0,430,434],
[431,443,470,462,441,459,460,0,444],
[440,459,429,466,455,453,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,438,392,407,393,408,336,502],
[433,0,335,388,392,539,532,657,582],
[452,555,0,482,428,644,584,605,599],
[498,502,408,0,464,501,470,587,570],
[483,498,462,426,0,458,498,628,544],
[497,351,246,389,432,0,413,544,340],
[482,358,306,420,392,477,0,510,590],
[554,233,285,303,262,346,380,0,286],
[388,308,291,320,346,550,300,604,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,492,439,461,426,448,477],
[428,0,448,485,449,468,448,457,447],
[445,442,0,460,444,423,465,451,438],
[398,405,430,0,423,422,417,408,420],
[451,441,446,467,0,419,446,442,438],
[429,422,467,468,471,0,449,434,460],
[464,442,425,473,444,441,0,462,445],
[442,433,439,482,448,456,428,0,455],
[413,443,452,470,452,430,445,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,430,468,434,460,473,437,460],
[444,0,433,444,449,412,443,453,429],
[460,457,0,445,439,439,446,441,459],
[422,446,445,0,436,420,434,411,435],
[456,441,451,454,0,424,458,469,469],
[430,478,451,470,466,0,442,434,460],
[417,447,444,456,432,448,0,424,422],
[453,437,449,479,421,456,466,0,434],
[430,461,431,455,421,430,468,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,425,542,461,453,518,456,491],
[430,0,433,462,432,485,512,485,495],
[465,457,0,514,462,429,549,492,543],
[348,428,376,0,391,464,479,418,434],
[429,458,428,499,0,494,472,490,479],
[437,405,461,426,396,0,444,426,435],
[372,378,341,411,418,446,0,415,404],
[434,405,398,472,400,464,475,0,465],
[399,395,347,456,411,455,486,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,463,454,474,455,448,438,426],
[440,0,465,440,472,450,454,446,477],
[427,425,0,457,456,464,457,415,424],
[436,450,433,0,461,443,428,436,436],
[416,418,434,429,0,447,419,416,426],
[435,440,426,447,443,0,427,429,432],
[442,436,433,462,471,463,0,458,459],
[452,444,475,454,474,461,432,0,476],
[464,413,466,454,464,458,431,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,466,449,475,418,464,461,431],
[449,0,451,437,455,428,448,465,418],
[424,439,0,440,434,459,440,444,408],
[441,453,450,0,450,461,446,470,442],
[415,435,456,440,0,434,446,457,449],
[472,462,431,429,456,0,444,453,415],
[426,442,450,444,444,446,0,453,427],
[429,425,446,420,433,437,437,0,420],
[459,472,482,448,441,475,463,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,491,458,464,476,477,467,445],
[435,0,450,452,446,453,474,460,442],
[399,440,0,424,431,437,448,428,445],
[432,438,466,0,452,462,460,462,460],
[426,444,459,438,0,444,453,453,466],
[414,437,453,428,446,0,446,448,438],
[413,416,442,430,437,444,0,441,417],
[423,430,462,428,437,442,449,0,414],
[445,448,445,430,424,452,473,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,466,490,515,471,482,454,440],
[439,0,426,455,425,417,465,455,392],
[424,464,0,463,461,448,430,451,406],
[400,435,427,0,442,390,421,392,393],
[375,465,429,448,0,436,439,428,432],
[419,473,442,500,454,0,446,454,445],
[408,425,460,469,451,444,0,446,423],
[436,435,439,498,462,436,444,0,425],
[450,498,484,497,458,445,467,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,423,451,437,435,448,445,453],
[444,0,426,437,419,436,451,453,439],
[467,464,0,460,438,447,448,469,459],
[439,453,430,0,454,437,438,444,447],
[453,471,452,436,0,434,463,457,458],
[455,454,443,453,456,0,442,468,449],
[442,439,442,452,427,448,0,457,454],
[445,437,421,446,433,422,433,0,436],
[437,451,431,443,432,441,436,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,415,460,444,472,433,447,461],
[433,0,410,401,420,424,428,429,430],
[475,480,0,433,482,457,476,446,463],
[430,489,457,0,431,473,449,474,463],
[446,470,408,459,0,447,446,451,459],
[418,466,433,417,443,0,440,442,449],
[457,462,414,441,444,450,0,447,460],
[443,461,444,416,439,448,443,0,446],
[429,460,427,427,431,441,430,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,410,441,427,429,434,418,438],
[444,0,431,467,445,468,441,456,438],
[480,459,0,485,446,449,449,456,445],
[449,423,405,0,427,414,418,432,397],
[463,445,444,463,0,434,456,432,447],
[461,422,441,476,456,0,462,461,464],
[456,449,441,472,434,428,0,427,434],
[472,434,434,458,458,429,463,0,461],
[452,452,445,493,443,426,456,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,435,450,441,467,448,436,442],
[416,0,436,455,418,435,438,420,401],
[455,454,0,469,442,456,434,458,445],
[440,435,421,0,429,429,436,427,412],
[449,472,448,461,0,441,446,432,450],
[423,455,434,461,449,0,429,422,406],
[442,452,456,454,444,461,0,440,432],
[454,470,432,463,458,468,450,0,434],
[448,489,445,478,440,484,458,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,418,441,440,450,474,525,414],
[463,0,447,458,466,491,492,482,430],
[472,443,0,483,478,448,516,499,454],
[449,432,407,0,491,487,445,466,440],
[450,424,412,399,0,427,448,474,399],
[440,399,442,403,463,0,439,509,413],
[416,398,374,445,442,451,0,461,421],
[365,408,391,424,416,381,429,0,390],
[476,460,436,450,491,477,469,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,361,344,405,456,365,488,518],
[514,0,351,394,431,433,445,442,499],
[529,539,0,499,489,553,428,613,622],
[546,496,391,0,438,507,484,452,565],
[485,459,401,452,0,456,395,514,490],
[434,457,337,383,434,0,505,449,566],
[525,445,462,406,495,385,0,399,596],
[402,448,277,438,376,441,491,0,531],
[372,391,268,325,400,324,294,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,370,470,450,311,392,459,369],
[449,0,372,544,478,494,436,462,429],
[520,518,0,526,491,465,444,532,444],
[420,346,364,0,448,374,365,436,430],
[440,412,399,442,0,372,321,415,437],
[579,396,425,516,518,0,463,483,430],
[498,454,446,525,569,427,0,496,493],
[431,428,358,454,475,407,394,0,376],
[521,461,446,460,453,460,397,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,415,435,475,422,438,394,480],
[463,0,445,445,467,442,435,410,457],
[475,445,0,391,474,459,432,444,485],
[455,445,499,0,477,423,480,468,461],
[415,423,416,413,0,429,418,434,471],
[468,448,431,467,461,0,457,463,418],
[452,455,458,410,472,433,0,426,476],
[496,480,446,422,456,427,464,0,472],
[410,433,405,429,419,472,414,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,428,486,378,350,357,402,427],
[538,0,543,529,475,443,507,521,445],
[462,347,0,494,395,391,395,413,369],
[404,361,396,0,390,347,337,398,399],
[512,415,495,500,0,446,463,444,497],
[540,447,499,543,444,0,473,478,492],
[533,383,495,553,427,417,0,460,433],
[488,369,477,492,446,412,430,0,474],
[463,445,521,491,393,398,457,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,458,415,463,332,451,409,374],
[433,0,461,415,451,407,448,474,350],
[432,429,0,457,499,482,476,381,416],
[475,475,433,0,425,461,460,484,470],
[427,439,391,465,0,369,393,430,374],
[558,483,408,429,521,0,491,447,437],
[439,442,414,430,497,399,0,383,389],
[481,416,509,406,460,443,507,0,423],
[516,540,474,420,516,453,501,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,436,447,501,452,497,444,455],
[411,0,429,402,449,451,477,502,438],
[454,461,0,474,442,412,484,541,415],
[443,488,416,0,483,485,495,423,437],
[389,441,448,407,0,473,494,492,367],
[438,439,478,405,417,0,503,505,476],
[393,413,406,395,396,387,0,494,422],
[446,388,349,467,398,385,396,0,365],
[435,452,475,453,523,414,468,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,449,453,438,452,435,434,449],
[464,0,462,470,461,476,448,426,445],
[441,428,0,451,424,445,443,448,435],
[437,420,439,0,392,463,451,418,425],
[452,429,466,498,0,483,445,448,455],
[438,414,445,427,407,0,413,431,435],
[455,442,447,439,445,477,0,446,459],
[456,464,442,472,442,459,444,0,465],
[441,445,455,465,435,455,431,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,447,432,439,418,431,442,426],
[453,0,455,462,430,452,452,444,415],
[443,435,0,430,433,445,433,448,426],
[458,428,460,0,432,436,427,457,427],
[451,460,457,458,0,455,455,469,420],
[472,438,445,454,435,0,460,449,448],
[459,438,457,463,435,430,0,445,433],
[448,446,442,433,421,441,445,0,423],
[464,475,464,463,470,442,457,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,430,515,486,419,476,475,386],
[438,0,388,405,391,355,415,485,345],
[460,502,0,507,404,389,415,508,407],
[375,485,383,0,366,379,384,417,397],
[404,499,486,524,0,460,400,475,413],
[471,535,501,511,430,0,471,489,451],
[414,475,475,506,490,419,0,502,376],
[415,405,382,473,415,401,388,0,324],
[504,545,483,493,477,439,514,566,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,478,473,464,441,436,449,468],
[392,0,454,417,442,406,416,457,444],
[412,436,0,424,387,434,428,391,399],
[417,473,466,0,401,425,387,453,441],
[426,448,503,489,0,450,463,469,456],
[449,484,456,465,440,0,476,453,458],
[454,474,462,503,427,414,0,456,462],
[441,433,499,437,421,437,434,0,438],
[422,446,491,449,434,432,428,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,453,422,442,449,439,421,433],
[465,0,448,474,455,467,456,434,430],
[437,442,0,423,450,445,431,440,435],
[468,416,467,0,439,439,449,434,448],
[448,435,440,451,0,425,423,446,435],
[441,423,445,451,465,0,441,435,441],
[451,434,459,441,467,449,0,459,442],
[469,456,450,456,444,455,431,0,459],
[457,460,455,442,455,449,448,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,497,551,477,497,443,492,473],
[415,0,420,471,462,457,428,473,428],
[393,470,0,497,502,436,407,489,428],
[339,419,393,0,402,443,336,460,429],
[413,428,388,488,0,421,434,447,383],
[393,433,454,447,469,0,382,475,397],
[447,462,483,554,456,508,0,514,445],
[398,417,401,430,443,415,376,0,409],
[417,462,462,461,507,493,445,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,452,438,449,457,420,433,430],
[445,0,460,438,449,456,431,458,441],
[438,430,0,448,462,465,442,417,447],
[452,452,442,0,455,486,426,439,431],
[441,441,428,435,0,444,438,425,442],
[433,434,425,404,446,0,412,399,424],
[470,459,448,464,452,478,0,431,452],
[457,432,473,451,465,491,459,0,460],
[460,449,443,459,448,466,438,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,414,391,422,469,502,428,476],
[441,0,489,468,453,477,416,450,460],
[476,401,0,391,433,458,420,510,472],
[499,422,499,0,439,460,455,489,482],
[468,437,457,451,0,394,423,502,475],
[421,413,432,430,496,0,426,411,474],
[388,474,470,435,467,464,0,503,475],
[462,440,380,401,388,479,387,0,481],
[414,430,418,408,415,416,415,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,467,470,502,405,464,411,431],
[453,0,478,492,490,443,499,406,453],
[423,412,0,416,432,431,448,392,406],
[420,398,474,0,445,408,443,411,420],
[388,400,458,445,0,415,434,386,401],
[485,447,459,482,475,0,463,446,442],
[426,391,442,447,456,427,0,437,429],
[479,484,498,479,504,444,453,0,456],
[459,437,484,470,489,448,461,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,456,448,511,457,459,439,503],
[401,0,484,438,484,409,485,479,477],
[434,406,0,432,441,360,418,485,473],
[442,452,458,0,479,442,480,444,524],
[379,406,449,411,0,411,432,431,470],
[433,481,530,448,479,0,467,448,508],
[431,405,472,410,458,423,0,471,526],
[451,411,405,446,459,442,419,0,479],
[387,413,417,366,420,382,364,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,442,461,435,444,450,443,437],
[441,0,418,463,447,443,443,437,442],
[448,472,0,469,462,431,440,439,442],
[429,427,421,0,463,430,422,412,444],
[455,443,428,427,0,423,450,458,432],
[446,447,459,460,467,0,458,442,456],
[440,447,450,468,440,432,0,442,444],
[447,453,451,478,432,448,448,0,457],
[453,448,448,446,458,434,446,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,458,461,467,442,424,466,454],
[406,0,458,428,396,452,429,444,417],
[432,432,0,440,443,416,422,433,429],
[429,462,450,0,441,442,454,429,432],
[423,494,447,449,0,459,426,423,432],
[448,438,474,448,431,0,425,425,445],
[466,461,468,436,464,465,0,456,454],
[424,446,457,461,467,465,434,0,433],
[436,473,461,458,458,445,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,449,437,482,439,513,458,441],
[424,0,430,463,422,440,472,396,439],
[441,460,0,478,453,419,505,445,474],
[453,427,412,0,433,462,494,426,462],
[408,468,437,457,0,444,481,412,429],
[451,450,471,428,446,0,472,449,455],
[377,418,385,396,409,418,0,394,438],
[432,494,445,464,478,441,496,0,425],
[449,451,416,428,461,435,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,411,400,380,388,413,423,397],
[479,0,456,409,413,427,424,417,414],
[479,434,0,371,410,419,415,418,415],
[490,481,519,0,459,453,450,462,443],
[510,477,480,431,0,461,430,469,451],
[502,463,471,437,429,0,445,488,479],
[477,466,475,440,460,445,0,446,465],
[467,473,472,428,421,402,444,0,448],
[493,476,475,447,439,411,425,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,431,451,417,436,419,434,433],
[452,0,457,475,424,460,424,413,458],
[459,433,0,475,438,465,436,447,454],
[439,415,415,0,415,429,398,422,443],
[473,466,452,475,0,482,425,414,479],
[454,430,425,461,408,0,432,464,458],
[471,466,454,492,465,458,0,455,442],
[456,477,443,468,476,426,435,0,470],
[457,432,436,447,411,432,448,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,426,447,455,426,428,457,433],
[471,0,442,463,452,443,454,455,438],
[464,448,0,456,460,455,452,453,432],
[443,427,434,0,429,433,422,460,423],
[435,438,430,461,0,442,434,451,447],
[464,447,435,457,448,0,455,471,432],
[462,436,438,468,456,435,0,463,451],
[433,435,437,430,439,419,427,0,442],
[457,452,458,467,443,458,439,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,418,429,463,424,460,419,466],
[411,0,415,418,434,389,461,404,440],
[472,475,0,452,485,458,476,445,480],
[461,472,438,0,474,450,492,457,460],
[427,456,405,416,0,411,464,433,446],
[466,501,432,440,479,0,483,442,452],
[430,429,414,398,426,407,0,417,424],
[471,486,445,433,457,448,473,0,459],
[424,450,410,430,444,438,466,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,424,449,422,416,435,417,405],
[450,0,454,436,434,433,437,428,435],
[466,436,0,456,441,455,437,466,425],
[441,454,434,0,425,424,450,421,425],
[468,456,449,465,0,446,460,471,420],
[474,457,435,466,444,0,471,441,460],
[455,453,453,440,430,419,0,445,425],
[473,462,424,469,419,449,445,0,429],
[485,455,465,465,470,430,465,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,446,419,424,427,461,428,416],
[463,0,477,441,463,469,474,445,460],
[444,413,0,411,416,427,450,432,432],
[471,449,479,0,449,451,480,440,471],
[466,427,474,441,0,440,464,438,447],
[463,421,463,439,450,0,453,438,442],
[429,416,440,410,426,437,0,420,427],
[462,445,458,450,452,452,470,0,457],
[474,430,458,419,443,448,463,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,440,435,426,435,470,410,430],
[469,0,451,428,428,451,465,435,424],
[450,439,0,422,442,462,466,439,451],
[455,462,468,0,444,414,471,446,437],
[464,462,448,446,0,460,468,432,437],
[455,439,428,476,430,0,477,422,447],
[420,425,424,419,422,413,0,408,403],
[480,455,451,444,458,468,482,0,463],
[460,466,439,453,453,443,487,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,453,484,433,430,424,441,452],
[457,0,480,469,446,430,443,450,476],
[437,410,0,416,431,444,413,432,426],
[406,421,474,0,425,433,416,447,455],
[457,444,459,465,0,451,425,452,428],
[460,460,446,457,439,0,468,467,459],
[466,447,477,474,465,422,0,464,472],
[449,440,458,443,438,423,426,0,437],
[438,414,464,435,462,431,418,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,564,500,483,557,442,519,445,468],
[326,0,415,410,399,376,440,388,320],
[390,475,0,437,459,406,437,444,421],
[407,480,453,0,426,406,461,393,424],
[333,491,431,464,0,441,429,439,443],
[448,514,484,484,449,0,465,450,437],
[371,450,453,429,461,425,0,400,444],
[445,502,446,497,451,440,490,0,479],
[422,570,469,466,447,453,446,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,439,420,435,424,449,445],
[440,0,443,435,453,429,409,457,429],
[453,447,0,460,411,449,437,448,431],
[451,455,430,0,434,452,440,486,452],
[470,437,479,456,0,446,452,462,435],
[455,461,441,438,444,0,451,450,415],
[466,481,453,450,438,439,0,466,433],
[441,433,442,404,428,440,424,0,418],
[445,461,459,438,455,475,457,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,458,458,442,469,451,440,455],
[431,0,444,444,450,482,446,446,450],
[432,446,0,467,452,464,449,446,424],
[432,446,423,0,443,464,431,460,436],
[448,440,438,447,0,492,447,444,442],
[421,408,426,426,398,0,401,435,408],
[439,444,441,459,443,489,0,472,452],
[450,444,444,430,446,455,418,0,433],
[435,440,466,454,448,482,438,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,435,433,424,433,443,435],
[434,0,457,429,429,428,446,435,439],
[443,433,0,424,445,436,438,439,422],
[455,461,466,0,445,450,455,440,436],
[457,461,445,445,0,433,447,441,467],
[466,462,454,440,457,0,474,469,451],
[457,444,452,435,443,416,0,446,436],
[447,455,451,450,449,421,444,0,454],
[455,451,468,454,423,439,454,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,448,442,457,465,443,454,467],
[431,0,421,432,443,463,468,445,448],
[442,469,0,455,442,482,457,442,445],
[448,458,435,0,445,468,441,430,423],
[433,447,448,445,0,459,438,421,450],
[425,427,408,422,431,0,425,418,451],
[447,422,433,449,452,465,0,437,468],
[436,445,448,460,469,472,453,0,456],
[423,442,445,467,440,439,422,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,445,456,455,467,452,439,462],
[425,0,428,416,438,440,435,438,437],
[445,462,0,439,451,455,445,437,446],
[434,474,451,0,439,442,470,451,478],
[435,452,439,451,0,451,448,447,463],
[423,450,435,448,439,0,434,423,449],
[438,455,445,420,442,456,0,448,454],
[451,452,453,439,443,467,442,0,461],
[428,453,444,412,427,441,436,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,434,426,456,405,441,463,446],
[468,0,455,481,434,481,440,452,431],
[456,435,0,423,459,442,447,446,433],
[464,409,467,0,482,444,426,478,442],
[434,456,431,408,0,423,407,465,454],
[485,409,448,446,467,0,425,437,477],
[449,450,443,464,483,465,0,459,438],
[427,438,444,412,425,453,431,0,408],
[444,459,457,448,436,413,452,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,468,467,407,460,458,476,414],
[432,0,411,476,414,435,448,414,414],
[422,479,0,469,405,464,424,442,397],
[423,414,421,0,395,445,421,490,383],
[483,476,485,495,0,502,481,520,417],
[430,455,426,445,388,0,430,440,413],
[432,442,466,469,409,460,0,444,421],
[414,476,448,400,370,450,446,0,465],
[476,476,493,507,473,477,469,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,465,449,442,444,433,460,464],
[444,0,445,443,448,428,433,455,459],
[425,445,0,383,435,466,433,450,466],
[441,447,507,0,481,478,462,450,478],
[448,442,455,409,0,433,432,420,461],
[446,462,424,412,457,0,448,421,431],
[457,457,457,428,458,442,0,467,467],
[430,435,440,440,470,469,423,0,463],
[426,431,424,412,429,459,423,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,444,447,457,449,444,450,476],
[434,0,445,460,456,419,441,469,457],
[446,445,0,451,443,440,425,465,462],
[443,430,439,0,443,395,452,436,450],
[433,434,447,447,0,432,428,464,464],
[441,471,450,495,458,0,445,474,468],
[446,449,465,438,462,445,0,469,471],
[440,421,425,454,426,416,421,0,462],
[414,433,428,440,426,422,419,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,444,485,441,460,437,444,448],
[456,0,449,460,455,454,422,448,442],
[446,441,0,445,438,457,435,452,430],
[405,430,445,0,425,453,431,422,429],
[449,435,452,465,0,469,429,444,440],
[430,436,433,437,421,0,433,445,436],
[453,468,455,459,461,457,0,461,438],
[446,442,438,468,446,445,429,0,442],
[442,448,460,461,450,454,452,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,433,409,442,435,413,422,436],
[464,0,445,457,450,445,444,430,447],
[457,445,0,426,446,443,442,430,438],
[481,433,464,0,471,464,428,442,454],
[448,440,444,419,0,426,425,427,436],
[455,445,447,426,464,0,441,441,464],
[477,446,448,462,465,449,0,434,459],
[468,460,460,448,463,449,456,0,438],
[454,443,452,436,454,426,431,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,459,411,444,428,410,427,446],
[449,0,473,440,464,442,438,468,466],
[431,417,0,423,441,423,434,456,443],
[479,450,467,0,459,427,443,454,468],
[446,426,449,431,0,426,437,444,446],
[462,448,467,463,464,0,468,443,459],
[480,452,456,447,453,422,0,463,470],
[463,422,434,436,446,447,427,0,452],
[444,424,447,422,444,431,420,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,473,485,467,453,452,441,437],
[427,0,453,424,452,439,464,404,416],
[417,437,0,417,438,441,440,459,430],
[405,466,473,0,460,432,451,458,434],
[423,438,452,430,0,409,413,434,418],
[437,451,449,458,481,0,445,452,437],
[438,426,450,439,477,445,0,435,421],
[449,486,431,432,456,438,455,0,455],
[453,474,460,456,472,453,469,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,413,419,420,427,428,391,427],
[459,0,439,440,441,445,459,441,445],
[477,451,0,451,471,461,441,449,459],
[471,450,439,0,454,455,430,451,452],
[470,449,419,436,0,452,436,433,444],
[463,445,429,435,438,0,444,436,451],
[462,431,449,460,454,446,0,438,456],
[499,449,441,439,457,454,452,0,454],
[463,445,431,438,446,439,434,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,551,478,514,470,455,437,448],
[394,0,487,429,400,425,476,404,447],
[339,403,0,423,411,437,408,364,372],
[412,461,467,0,453,424,412,380,381],
[376,490,479,437,0,431,476,471,443],
[420,465,453,466,459,0,492,401,448],
[435,414,482,478,414,398,0,396,435],
[453,486,526,510,419,489,494,0,412],
[442,443,518,509,447,442,455,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,451,440,457,452,449,448,440],
[456,0,474,463,456,460,454,453,434],
[439,416,0,424,408,454,439,441,426],
[450,427,466,0,448,443,451,437,465],
[433,434,482,442,0,448,436,457,446],
[438,430,436,447,442,0,439,433,444],
[441,436,451,439,454,451,0,446,429],
[442,437,449,453,433,457,444,0,434],
[450,456,464,425,444,446,461,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,469,476,474,468,443,471],
[434,0,433,474,450,454,457,450,468],
[443,457,0,465,438,477,456,477,458],
[421,416,425,0,428,448,455,421,437],
[414,440,452,462,0,462,440,437,450],
[416,436,413,442,428,0,460,441,433],
[422,433,434,435,450,430,0,459,459],
[447,440,413,469,453,449,431,0,460],
[419,422,432,453,440,457,431,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,455,421,455,436,444,461,449],
[427,0,452,444,461,465,439,450,452],
[435,438,0,460,447,440,420,460,443],
[469,446,430,0,468,453,438,471,474],
[435,429,443,422,0,440,445,454,452],
[454,425,450,437,450,0,435,477,437],
[446,451,470,452,445,455,0,471,456],
[429,440,430,419,436,413,419,0,436],
[441,438,447,416,438,453,434,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,441,466,404,479,449,433,415],
[470,0,465,450,412,494,446,451,447],
[449,425,0,446,426,472,457,445,455],
[424,440,444,0,421,461,453,449,415],
[486,478,464,469,0,504,454,464,431],
[411,396,418,429,386,0,411,431,388],
[441,444,433,437,436,479,0,439,455],
[457,439,445,441,426,459,451,0,430],
[475,443,435,475,459,502,435,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,469,439,463,443,388,422,411],
[491,0,457,427,445,455,481,443,459],
[421,433,0,455,399,450,433,396,386],
[451,463,435,0,425,471,454,415,450],
[427,445,491,465,0,444,415,457,462],
[447,435,440,419,446,0,444,414,399],
[502,409,457,436,475,446,0,428,479],
[468,447,494,475,433,476,462,0,457],
[479,431,504,440,428,491,411,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,468,426,450,435,459,458,439],
[452,0,458,459,427,465,453,471,462],
[422,432,0,405,443,411,444,462,400],
[464,431,485,0,463,436,471,453,448],
[440,463,447,427,0,430,453,442,418],
[455,425,479,454,460,0,473,434,449],
[431,437,446,419,437,417,0,446,418],
[432,419,428,437,448,456,444,0,420],
[451,428,490,442,472,441,472,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,469,477,460,468,426,481,454],
[413,0,468,444,425,421,397,415,433],
[421,422,0,448,436,433,407,433,420],
[413,446,442,0,417,433,404,428,445],
[430,465,454,473,0,426,445,422,436],
[422,469,457,457,464,0,406,435,436],
[464,493,483,486,445,484,0,461,451],
[409,475,457,462,468,455,429,0,434],
[436,457,470,445,454,454,439,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,458,445,453,448,441,458,450],
[433,0,442,449,459,430,444,457,439],
[432,448,0,443,445,423,423,440,431],
[445,441,447,0,459,446,429,440,433],
[437,431,445,431,0,438,432,451,414],
[442,460,467,444,452,0,442,438,435],
[449,446,467,461,458,448,0,456,428],
[432,433,450,450,439,452,434,0,415],
[440,451,459,457,476,455,462,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,472,461,478,449,461,442,471],
[419,0,472,458,461,466,467,445,437],
[418,418,0,447,445,444,438,437,443],
[429,432,443,0,430,443,415,414,442],
[412,429,445,460,0,423,424,444,459],
[441,424,446,447,467,0,457,465,448],
[429,423,452,475,466,433,0,441,463],
[448,445,453,476,446,425,449,0,502],
[419,453,447,448,431,442,427,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,426,446,465,457,445,462,449],
[425,0,429,432,432,426,425,458,423],
[464,461,0,454,443,441,431,466,425],
[444,458,436,0,422,442,439,452,440],
[425,458,447,468,0,444,443,442,433],
[433,464,449,448,446,0,442,445,431],
[445,465,459,451,447,448,0,437,434],
[428,432,424,438,448,445,453,0,409],
[441,467,465,450,457,459,456,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,447,441,471,452,429,445,425],
[399,0,421,404,396,401,381,415,394],
[443,469,0,390,416,424,392,415,404],
[449,486,500,0,448,499,429,434,460],
[419,494,474,442,0,456,407,449,440],
[438,489,466,391,434,0,418,427,408],
[461,509,498,461,483,472,0,430,463],
[445,475,475,456,441,463,460,0,423],
[465,496,486,430,450,482,427,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,469,440,476,495,469,442,464],
[441,0,425,414,462,458,425,436,442],
[421,465,0,441,454,470,438,442,453],
[450,476,449,0,484,485,438,461,472],
[414,428,436,406,0,443,418,424,422],
[395,432,420,405,447,0,415,407,425],
[421,465,452,452,472,475,0,450,446],
[448,454,448,429,466,483,440,0,448],
[426,448,437,418,468,465,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,435,458,405,418,448,447,472],
[445,0,437,448,431,433,448,451,436],
[455,453,0,455,418,427,420,456,438],
[432,442,435,0,406,419,438,433,454],
[485,459,472,484,0,442,452,483,457],
[472,457,463,471,448,0,435,447,443],
[442,442,470,452,438,455,0,443,460],
[443,439,434,457,407,443,447,0,454],
[418,454,452,436,433,447,430,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,412,492,465,472,430,475,422],
[446,0,438,486,486,460,452,481,412],
[478,452,0,501,456,438,475,483,430],
[398,404,389,0,461,419,430,418,407],
[425,404,434,429,0,445,411,461,394],
[418,430,452,471,445,0,446,462,449],
[460,438,415,460,479,444,0,457,424],
[415,409,407,472,429,428,433,0,418],
[468,478,460,483,496,441,466,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,444,437,438,438,448,443,441],
[445,0,437,436,452,462,455,451,455],
[446,453,0,459,454,473,433,463,487],
[453,454,431,0,437,448,440,456,450],
[452,438,436,453,0,465,459,472,444],
[452,428,417,442,425,0,447,445,462],
[442,435,457,450,431,443,0,451,444],
[447,439,427,434,418,445,439,0,441],
[449,435,403,440,446,428,446,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,444,448,368,427,492,467,448],
[462,0,495,443,400,460,490,456,437],
[446,395,0,409,387,431,443,486,398],
[442,447,481,0,393,425,467,455,422],
[522,490,503,497,0,498,518,493,443],
[463,430,459,465,392,0,513,464,456],
[398,400,447,423,372,377,0,426,426],
[423,434,404,435,397,426,464,0,406],
[442,453,492,468,447,434,464,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,890,745,412,890,557,890,557],
[406,0,823,557,473,490,557,557,490],
[0,67,0,328,328,473,473,67,406],
[145,333,562,0,406,739,473,478,406],
[478,417,562,484,0,562,557,629,490],
[0,400,417,151,328,0,328,67,261],
[333,333,417,417,333,562,0,333,345],
[0,333,823,412,261,823,557,0,490],
[333,400,484,484,400,629,545,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,457,454,425,426,454,452,442],
[437,0,468,452,410,418,461,437,448],
[433,422,0,430,407,423,444,446,446],
[436,438,460,0,448,419,446,476,457],
[465,480,483,442,0,456,467,481,478],
[464,472,467,471,434,0,463,465,475],
[436,429,446,444,423,427,0,471,451],
[438,453,444,414,409,425,419,0,436],
[448,442,444,433,412,415,439,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,465,456,439,370,476,446,491],
[383,0,371,386,434,417,393,367,454],
[425,519,0,472,490,454,506,448,443],
[434,504,418,0,483,460,491,451,482],
[451,456,400,407,0,366,451,402,467],
[520,473,436,430,524,0,492,445,517],
[414,497,384,399,439,398,0,418,423],
[444,523,442,439,488,445,472,0,483],
[399,436,447,408,423,373,467,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,477,498,490,416,430,427,440],
[449,0,437,528,524,391,432,465,463],
[413,453,0,518,520,477,457,452,506],
[392,362,372,0,461,382,374,438,409],
[400,366,370,429,0,406,361,449,400],
[474,499,413,508,484,0,482,427,491],
[460,458,433,516,529,408,0,451,451],
[463,425,438,452,441,463,439,0,423],
[450,427,384,481,490,399,439,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,498,444,448,464,413,438,395],
[492,0,503,442,481,454,463,456,428],
[392,387,0,449,443,463,398,425,361],
[446,448,441,0,451,489,427,466,406],
[442,409,447,439,0,433,452,416,426],
[426,436,427,401,457,0,431,425,397],
[477,427,492,463,438,459,0,451,454],
[452,434,465,424,474,465,439,0,447],
[495,462,529,484,464,493,436,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,457,439,448,453,440,486,447],
[414,0,423,424,390,452,420,437,451],
[433,467,0,433,434,436,426,448,436],
[451,466,457,0,443,455,455,457,468],
[442,500,456,447,0,471,478,457,473],
[437,438,454,435,419,0,405,444,435],
[450,470,464,435,412,485,0,467,491],
[404,453,442,433,433,446,423,0,437],
[443,439,454,422,417,455,399,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,461,428,433,466,452,443,413],
[421,0,449,421,404,446,440,433,415],
[429,441,0,422,429,442,445,435,431],
[462,469,468,0,462,462,480,439,454],
[457,486,461,428,0,460,475,471,448],
[424,444,448,428,430,0,448,449,435],
[438,450,445,410,415,442,0,435,432],
[447,457,455,451,419,441,455,0,440],
[477,475,459,436,442,455,458,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,439,444,493,402,447,412,443],
[451,0,424,379,455,395,413,435,418],
[451,466,0,440,506,438,435,443,447],
[446,511,450,0,479,428,453,446,429],
[397,435,384,411,0,411,418,405,411],
[488,495,452,462,479,0,448,437,435],
[443,477,455,437,472,442,0,472,466],
[478,455,447,444,485,453,418,0,450],
[447,472,443,461,479,455,424,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,417,444,386,449,421,407,416],
[488,0,455,454,460,451,415,442,452],
[473,435,0,439,414,413,392,415,455],
[446,436,451,0,418,443,420,506,441],
[504,430,476,472,0,425,452,446,469],
[441,439,477,447,465,0,435,491,466],
[469,475,498,470,438,455,0,501,475],
[483,448,475,384,444,399,389,0,439],
[474,438,435,449,421,424,415,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,418,401,460,450,441,428,429],
[471,0,430,424,453,475,429,430,443],
[472,460,0,437,487,477,479,483,498],
[489,466,453,0,499,484,486,445,497],
[430,437,403,391,0,427,427,414,425],
[440,415,413,406,463,0,444,443,468],
[449,461,411,404,463,446,0,450,474],
[462,460,407,445,476,447,440,0,459],
[461,447,392,393,465,422,416,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,415,420,408,413,438,411,417],
[464,0,382,410,438,420,400,387,405],
[475,508,0,445,464,464,483,428,460],
[470,480,445,0,438,467,452,463,450],
[482,452,426,452,0,474,462,444,462],
[477,470,426,423,416,0,443,402,438],
[452,490,407,438,428,447,0,400,430],
[479,503,462,427,446,488,490,0,485],
[473,485,430,440,428,452,460,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,389,420,440,397,416,415,395],
[439,0,346,414,435,369,387,400,384],
[501,544,0,483,488,486,491,471,445],
[470,476,407,0,445,392,435,428,434],
[450,455,402,445,0,425,447,438,407],
[493,521,404,498,465,0,499,480,451],
[474,503,399,455,443,391,0,461,426],
[475,490,419,462,452,410,429,0,450],
[495,506,445,456,483,439,464,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,473,473,457,467,465,450,485],
[446,0,493,450,450,415,478,423,452],
[417,397,0,397,436,418,449,429,443],
[417,440,493,0,459,462,444,475,431],
[433,440,454,431,0,423,475,425,437],
[423,475,472,428,467,0,477,433,460],
[425,412,441,446,415,413,0,371,446],
[440,467,461,415,465,457,519,0,447],
[405,438,447,459,453,430,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,431,442,397,429,415,472,437],
[475,0,447,410,440,476,439,457,428],
[459,443,0,441,400,434,428,427,414],
[448,480,449,0,426,463,437,469,424],
[493,450,490,464,0,471,440,451,477],
[461,414,456,427,419,0,421,441,400],
[475,451,462,453,450,469,0,458,435],
[418,433,463,421,439,449,432,0,426],
[453,462,476,466,413,490,455,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,396,411,441,462,453,485,401],
[445,0,455,432,413,478,484,434,415],
[494,435,0,437,456,464,467,459,461],
[479,458,453,0,465,471,475,466,435],
[449,477,434,425,0,485,507,474,421],
[428,412,426,419,405,0,437,431,400],
[437,406,423,415,383,453,0,416,366],
[405,456,431,424,416,459,474,0,398],
[489,475,429,455,469,490,524,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,444,425,439,408,425,450,441],
[461,0,459,422,434,423,409,452,444],
[446,431,0,421,437,395,396,428,419],
[465,468,469,0,458,436,442,465,450],
[451,456,453,432,0,430,437,444,445],
[482,467,495,454,460,0,445,464,459],
[465,481,494,448,453,445,0,481,462],
[440,438,462,425,446,426,409,0,432],
[449,446,471,440,445,431,428,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,413,388,467,446,440,501,414],
[493,0,392,467,346,542,498,549,448],
[477,498,0,435,405,617,573,551,508],
[502,423,455,0,439,603,554,539,482],
[423,544,485,451,0,562,609,529,513],
[444,348,273,287,328,0,401,442,285],
[450,392,317,336,281,489,0,543,398],
[389,341,339,351,361,448,347,0,416],
[476,442,382,408,377,605,492,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,448,472,453,442,459,457,466],
[443,0,451,467,444,444,439,440,440],
[442,439,0,453,444,443,445,437,463],
[418,423,437,0,438,431,414,438,422],
[437,446,446,452,0,433,426,437,436],
[448,446,447,459,457,0,450,451,436],
[431,451,445,476,464,440,0,458,449],
[433,450,453,452,453,439,432,0,456],
[424,450,427,468,454,454,441,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,481,422,398,438,449,426,417],
[404,0,468,423,446,395,428,406,399],
[409,422,0,385,391,372,380,375,392],
[468,467,505,0,490,486,423,410,486],
[492,444,499,400,0,432,431,428,425],
[452,495,518,404,458,0,473,443,451],
[441,462,510,467,459,417,0,449,421],
[464,484,515,480,462,447,441,0,425],
[473,491,498,404,465,439,469,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,438,410,435,485,413,437,436],
[441,0,441,423,442,456,413,449,422],
[452,449,0,404,442,472,423,452,438],
[480,467,486,0,455,485,436,465,457],
[455,448,448,435,0,461,413,448,424],
[405,434,418,405,429,0,419,444,421],
[477,477,467,454,477,471,0,462,432],
[453,441,438,425,442,446,428,0,429],
[454,468,452,433,466,469,458,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,447,439,472,460,452,424,435],
[447,0,430,448,456,431,443,440,425],
[443,460,0,450,458,427,450,450,446],
[451,442,440,0,465,440,422,449,440],
[418,434,432,425,0,430,440,414,409],
[430,459,463,450,460,0,449,449,435],
[438,447,440,468,450,441,0,447,439],
[466,450,440,441,476,441,443,0,444],
[455,465,444,450,481,455,451,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,452,463,456,436,446,462,456],
[385,0,439,409,437,446,413,442,435],
[438,451,0,407,445,419,420,470,424],
[427,481,483,0,468,434,452,457,472],
[434,453,445,422,0,389,420,417,448],
[454,444,471,456,501,0,422,477,426],
[444,477,470,438,470,468,0,447,462],
[428,448,420,433,473,413,443,0,473],
[434,455,466,418,442,464,428,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,427,429,428,453,437,431,443],
[463,0,452,444,444,473,440,448,441],
[463,438,0,449,447,463,446,425,449],
[461,446,441,0,435,463,449,429,450],
[462,446,443,455,0,466,436,423,448],
[437,417,427,427,424,0,415,408,433],
[453,450,444,441,454,475,0,438,445],
[459,442,465,461,467,482,452,0,455],
[447,449,441,440,442,457,445,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,407,424,458,436,423,444,442],
[455,0,435,438,460,442,429,423,430],
[483,455,0,448,438,451,439,431,461],
[466,452,442,0,479,478,453,461,462],
[432,430,452,411,0,439,435,443,454],
[454,448,439,412,451,0,457,476,454],
[467,461,451,437,455,433,0,436,464],
[446,467,459,429,447,414,454,0,454],
[448,460,429,428,436,436,426,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,440,466,456,451,456,433,423],
[453,0,419,454,468,449,424,451,431],
[450,471,0,461,461,472,461,442,442],
[424,436,429,0,460,432,456,410,413],
[434,422,429,430,0,454,434,407,428],
[439,441,418,458,436,0,457,440,446],
[434,466,429,434,456,433,0,418,422],
[457,439,448,480,483,450,472,0,467],
[467,459,448,477,462,444,468,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,435,483,443,455,459,456,462],
[445,0,460,471,434,481,448,464,484],
[455,430,0,470,442,474,467,456,501],
[407,419,420,0,417,420,435,432,473],
[447,456,448,473,0,434,456,461,485],
[435,409,416,470,456,0,434,437,484],
[431,442,423,455,434,456,0,439,475],
[434,426,434,458,429,453,451,0,457],
[428,406,389,417,405,406,415,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,441,425,460,459,458,453,456],
[448,0,413,386,406,403,451,417,447],
[449,477,0,438,477,450,478,444,484],
[465,504,452,0,481,441,489,453,466],
[430,484,413,409,0,446,447,429,467],
[431,487,440,449,444,0,484,449,453],
[432,439,412,401,443,406,0,422,410],
[437,473,446,437,461,441,468,0,476],
[434,443,406,424,423,437,480,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,502,432,449,450,484,413,423],
[431,0,486,380,377,411,404,387,385],
[388,404,0,369,401,409,431,375,385],
[458,510,521,0,415,443,477,434,426],
[441,513,489,475,0,459,468,467,429],
[440,479,481,447,431,0,467,437,416],
[406,486,459,413,422,423,0,428,404],
[477,503,515,456,423,453,462,0,457],
[467,505,505,464,461,474,486,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,458,445,485,463,490,536,475],
[424,0,418,400,398,438,461,469,453],
[432,472,0,433,456,479,486,478,462],
[445,490,457,0,443,444,503,490,451],
[405,492,434,447,0,426,455,470,464],
[427,452,411,446,464,0,454,471,461],
[400,429,404,387,435,436,0,443,404],
[354,421,412,400,420,419,447,0,435],
[415,437,428,439,426,429,486,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,505,432,453,476,437,431,487],
[424,0,448,444,415,455,420,433,432],
[385,442,0,469,405,471,481,437,490],
[458,446,421,0,485,464,476,450,485],
[437,475,485,405,0,487,434,401,473],
[414,435,419,426,403,0,420,457,438],
[453,470,409,414,456,470,0,440,478],
[459,457,453,440,489,433,450,0,487],
[403,458,400,405,417,452,412,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,418,551,480,471,472,471,443],
[434,0,423,502,480,449,478,471,414],
[472,467,0,515,486,423,445,508,467],
[339,388,375,0,410,377,415,385,366],
[410,410,404,480,0,443,439,432,395],
[419,441,467,513,447,0,502,497,425],
[418,412,445,475,451,388,0,464,399],
[419,419,382,505,458,393,426,0,438],
[447,476,423,524,495,465,491,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,432,456,443,436,425,488,426],
[445,0,429,473,456,435,460,459,428],
[458,461,0,463,457,464,449,445,469],
[434,417,427,0,401,412,421,433,423],
[447,434,433,489,0,460,471,467,450],
[454,455,426,478,430,0,443,448,460],
[465,430,441,469,419,447,0,485,449],
[402,431,445,457,423,442,405,0,412],
[464,462,421,467,440,430,441,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,463,406,439,474,462,418,426],
[454,0,454,440,443,476,493,423,464],
[427,436,0,413,434,475,462,407,445],
[484,450,477,0,483,491,450,446,439],
[451,447,456,407,0,479,473,416,436],
[416,414,415,399,411,0,432,377,425],
[428,397,428,440,417,458,0,428,429],
[472,467,483,444,474,513,462,0,451],
[464,426,445,451,454,465,461,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,427,423,443,455,406,472,463],
[436,0,417,447,435,485,414,437,461],
[463,473,0,419,458,455,452,490,460],
[467,443,471,0,484,468,455,471,450],
[447,455,432,406,0,432,484,447,429],
[435,405,435,422,458,0,422,406,441],
[484,476,438,435,406,468,0,442,435],
[418,453,400,419,443,484,448,0,444],
[427,429,430,440,461,449,455,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,422,431,442,426,446,440,426],
[432,0,393,385,403,399,456,409,415],
[468,497,0,453,483,428,467,464,449],
[459,505,437,0,444,447,453,467,443],
[448,487,407,446,0,432,458,444,406],
[464,491,462,443,458,0,475,438,452],
[444,434,423,437,432,415,0,427,421],
[450,481,426,423,446,452,463,0,423],
[464,475,441,447,484,438,469,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,438,450,469,462,448,420,474],
[472,0,464,458,457,452,464,439,465],
[452,426,0,426,448,447,439,430,441],
[440,432,464,0,465,463,472,465,476],
[421,433,442,425,0,455,449,455,454],
[428,438,443,427,435,0,440,433,446],
[442,426,451,418,441,450,0,423,456],
[470,451,460,425,435,457,467,0,469],
[416,425,449,414,436,444,434,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,463,431,411,464,464,456,453],
[465,0,458,446,443,485,477,461,491],
[427,432,0,446,449,459,424,406,401],
[459,444,444,0,443,469,462,423,462],
[479,447,441,447,0,478,436,408,462],
[426,405,431,421,412,0,429,409,434],
[426,413,466,428,454,461,0,415,467],
[434,429,484,467,482,481,475,0,447],
[437,399,489,428,428,456,423,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,465,455,463,451,454,435,457],
[435,0,450,457,460,460,434,441,456],
[425,440,0,438,440,439,438,432,435],
[435,433,452,0,442,427,439,429,442],
[427,430,450,448,0,443,448,438,437],
[439,430,451,463,447,0,429,417,452],
[436,456,452,451,442,461,0,453,454],
[455,449,458,461,452,473,437,0,455],
[433,434,455,448,453,438,436,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,475,455,458,483,439,440,493],
[454,0,472,464,441,476,434,463,488],
[415,418,0,421,397,439,405,400,401],
[435,426,469,0,439,489,425,455,457],
[432,449,493,451,0,489,450,481,465],
[407,414,451,401,401,0,367,400,432],
[451,456,485,465,440,523,0,444,490],
[450,427,490,435,409,490,446,0,481],
[397,402,489,433,425,458,400,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,455,443,450,473,463,420,427],
[487,0,495,464,465,486,496,422,434],
[435,395,0,439,434,417,472,393,415],
[447,426,451,0,408,442,461,408,452],
[440,425,456,482,0,445,480,449,432],
[417,404,473,448,445,0,471,434,417],
[427,394,418,429,410,419,0,391,423],
[470,468,497,482,441,456,499,0,445],
[463,456,475,438,458,473,467,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,460,358,421,405,480,355,381],
[464,0,460,426,463,427,525,413,461],
[430,430,0,351,419,369,436,345,339],
[532,464,539,0,446,426,542,509,441],
[469,427,471,444,0,510,465,408,453],
[485,463,521,464,380,0,493,460,467],
[410,365,454,348,425,397,0,380,390],
[535,477,545,381,482,430,510,0,422],
[509,429,551,449,437,423,500,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,499,450,411,543,461,450,385],
[464,0,486,328,501,487,481,431,380],
[391,404,0,345,428,467,459,413,330],
[440,562,545,0,498,537,576,445,481],
[479,389,462,392,0,416,500,416,359],
[347,403,423,353,474,0,407,379,347],
[429,409,431,314,390,483,0,398,309],
[440,459,477,445,474,511,492,0,408],
[505,510,560,409,531,543,581,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,429,466,432,416,423,481,438],
[465,0,452,477,470,436,446,444,442],
[461,438,0,458,455,438,432,463,441],
[424,413,432,0,436,408,419,438,396],
[458,420,435,454,0,411,441,452,436],
[474,454,452,482,479,0,444,465,461],
[467,444,458,471,449,446,0,454,456],
[409,446,427,452,438,425,436,0,422],
[452,448,449,494,454,429,434,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,622,574,524,415,628,471,574],
[414,0,436,529,474,499,529,459,488],
[268,454,0,428,426,405,467,454,482],
[316,361,462,0,431,509,481,511,563],
[366,416,464,459,0,444,511,499,380],
[475,391,485,381,446,0,562,487,461],
[262,361,423,409,379,328,0,419,489],
[419,431,436,379,391,403,471,0,438],
[316,402,408,327,510,429,401,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,450,422,441,456,433,465,442],
[459,0,437,460,461,468,451,461,433],
[440,453,0,439,465,464,448,496,444],
[468,430,451,0,476,471,441,473,438],
[449,429,425,414,0,459,418,452,418],
[434,422,426,419,431,0,445,448,405],
[457,439,442,449,472,445,0,448,457],
[425,429,394,417,438,442,442,0,436],
[448,457,446,452,472,485,433,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,445,454,452,425,452,455,439],
[455,0,428,444,461,449,447,433,439],
[445,462,0,460,438,432,441,429,428],
[436,446,430,0,436,442,437,449,441],
[438,429,452,454,0,439,458,429,442],
[465,441,458,448,451,0,444,460,454],
[438,443,449,453,432,446,0,429,440],
[435,457,461,441,461,430,461,0,436],
[451,451,462,449,448,436,450,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,432,442,429,395,423,413,450],
[449,0,423,472,465,455,429,435,456],
[458,467,0,454,473,439,451,433,459],
[448,418,436,0,441,448,418,427,472],
[461,425,417,449,0,441,443,435,438],
[495,435,451,442,449,0,438,425,455],
[467,461,439,472,447,452,0,449,467],
[477,455,457,463,455,465,441,0,452],
[440,434,431,418,452,435,423,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,472,406,420,472,424,462,445],
[400,0,436,393,408,466,405,434,410],
[418,454,0,396,405,417,414,419,420],
[484,497,494,0,447,491,461,465,440],
[470,482,485,443,0,469,435,448,456],
[418,424,473,399,421,0,437,447,412],
[466,485,476,429,455,453,0,494,441],
[428,456,471,425,442,443,396,0,409],
[445,480,470,450,434,478,449,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,439,446,429,449,417,410,429],
[409,0,425,446,438,460,446,416,415],
[451,465,0,422,415,434,441,445,404],
[444,444,468,0,469,474,440,457,414],
[461,452,475,421,0,482,424,501,446],
[441,430,456,416,408,0,428,417,463],
[473,444,449,450,466,462,0,436,422],
[480,474,445,433,389,473,454,0,439],
[461,475,486,476,444,427,468,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,483,668,483,890,222,668,415],
[378,0,483,668,483,890,222,668,415],
[407,407,0,668,483,697,407,378,600],
[222,222,222,0,705,697,222,600,415],
[407,407,407,185,0,697,407,185,407],
[0,0,193,193,193,0,222,193,415],
[668,668,483,668,483,668,0,668,193],
[222,222,512,290,705,697,222,0,415],
[475,475,290,475,483,475,697,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,446,442,454,457,442,449,418],
[438,0,454,446,454,446,445,442,415],
[444,436,0,427,447,451,442,444,436],
[448,444,463,0,467,457,432,450,447],
[436,436,443,423,0,470,442,443,436],
[433,444,439,433,420,0,410,419,441],
[448,445,448,458,448,480,0,445,452],
[441,448,446,440,447,471,445,0,418],
[472,475,454,443,454,449,438,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,464,428,436,473,453,448,469],
[424,0,448,442,439,451,439,449,451],
[426,442,0,425,411,443,424,431,450],
[462,448,465,0,441,447,423,465,478],
[454,451,479,449,0,466,418,456,480],
[417,439,447,443,424,0,440,439,456],
[437,451,466,467,472,450,0,455,484],
[442,441,459,425,434,451,435,0,446],
[421,439,440,412,410,434,406,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,442,431,443,403,400,377,459],
[444,0,437,435,440,440,447,438,461],
[448,453,0,434,431,425,436,420,470],
[459,455,456,0,424,449,433,419,484],
[447,450,459,466,0,441,430,408,465],
[487,450,465,441,449,0,470,423,488],
[490,443,454,457,460,420,0,458,485],
[513,452,470,471,482,467,432,0,499],
[431,429,420,406,425,402,405,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,462,478,438,443,491,458,447],
[453,0,458,446,439,424,462,443,451],
[428,432,0,462,423,463,479,460,462],
[412,444,428,0,399,439,447,470,423],
[452,451,467,491,0,432,517,470,443],
[447,466,427,451,458,0,478,458,467],
[399,428,411,443,373,412,0,432,441],
[432,447,430,420,420,432,458,0,440],
[443,439,428,467,447,423,449,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,459,320,274,437,449,448,427],
[414,0,453,433,354,444,362,470,651],
[431,437,0,482,453,489,418,453,353],
[570,457,408,0,351,529,375,341,498],
[616,536,437,539,0,523,458,614,585],
[453,446,401,361,367,0,394,371,519],
[441,528,472,515,432,496,0,449,444],
[442,420,437,549,276,519,441,0,443],
[463,239,537,392,305,371,446,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,417,518,433,456,440,418,450],
[465,0,469,561,469,450,478,416,406],
[473,421,0,518,406,515,429,458,470],
[372,329,372,0,357,425,391,372,378],
[457,421,484,533,0,474,496,448,467],
[434,440,375,465,416,0,422,436,434],
[450,412,461,499,394,468,0,404,474],
[472,474,432,518,442,454,486,0,448],
[440,484,420,512,423,456,416,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,432,453,432,423,439,462,434],
[432,0,424,457,399,414,407,428,418],
[458,466,0,463,431,440,431,450,452],
[437,433,427,0,386,412,411,436,428],
[458,491,459,504,0,442,460,446,459],
[467,476,450,478,448,0,444,469,471],
[451,483,459,479,430,446,0,462,451],
[428,462,440,454,444,421,428,0,447],
[456,472,438,462,431,419,439,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,446,455,438,464,436,432,461],
[454,0,442,474,453,451,451,458,469],
[444,448,0,464,452,451,453,451,472],
[435,416,426,0,397,426,437,430,466],
[452,437,438,493,0,479,477,452,497],
[426,439,439,464,411,0,455,439,470],
[454,439,437,453,413,435,0,456,460],
[458,432,439,460,438,451,434,0,479],
[429,421,418,424,393,420,430,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,450,496,484,400,417,424,426],
[412,0,447,418,414,432,402,442,412],
[440,443,0,445,415,429,433,409,445],
[394,472,445,0,433,437,455,379,442],
[406,476,475,457,0,400,434,454,416],
[490,458,461,453,490,0,431,455,480],
[473,488,457,435,456,459,0,421,424],
[466,448,481,511,436,435,469,0,454],
[464,478,445,448,474,410,466,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,439,454,435,430,449,455,454],
[488,0,438,459,466,461,512,493,468],
[451,452,0,461,440,447,494,467,453],
[436,431,429,0,458,440,479,447,454],
[455,424,450,432,0,421,440,455,453],
[460,429,443,450,469,0,489,468,450],
[441,378,396,411,450,401,0,421,418],
[435,397,423,443,435,422,469,0,428],
[436,422,437,436,437,440,472,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,406,478,462,499,477,425,439],
[406,0,374,481,435,416,401,385,384],
[484,516,0,507,444,515,474,502,448],
[412,409,383,0,507,427,474,453,447],
[428,455,446,383,0,423,406,382,363],
[391,474,375,463,467,0,361,438,388],
[413,489,416,416,484,529,0,467,416],
[465,505,388,437,508,452,423,0,471],
[451,506,442,443,527,502,474,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,449,422,426,442,467,437,438],
[440,0,448,430,420,448,470,446,416],
[441,442,0,420,429,450,432,415,414],
[468,460,470,0,454,469,464,473,437],
[464,470,461,436,0,448,447,463,446],
[448,442,440,421,442,0,452,443,413],
[423,420,458,426,443,438,0,423,425],
[453,444,475,417,427,447,467,0,414],
[452,474,476,453,444,477,465,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,392,398,440,447,412,467,333],
[542,0,401,604,553,571,540,553,463],
[498,489,0,535,470,479,453,469,418],
[492,286,355,0,367,455,418,488,335],
[450,337,420,523,0,550,448,520,438],
[443,319,411,435,340,0,348,482,348],
[478,350,437,472,442,542,0,537,453],
[423,337,421,402,370,408,353,0,288],
[557,427,472,555,452,542,437,602,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,408,460,453,456,469,449,449],
[464,0,433,465,440,452,460,451,448],
[482,457,0,465,466,426,457,470,474],
[430,425,425,0,436,420,458,445,429],
[437,450,424,454,0,419,448,453,434],
[434,438,464,470,471,0,492,462,442],
[421,430,433,432,442,398,0,427,432],
[441,439,420,445,437,428,463,0,430],
[441,442,416,461,456,448,458,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,422,410,445,445,430,435,426],
[462,0,433,441,477,476,452,446,449],
[468,457,0,463,475,483,459,445,467],
[480,449,427,0,462,457,449,426,441],
[445,413,415,428,0,434,436,441,433],
[445,414,407,433,456,0,422,441,437],
[460,438,431,441,454,468,0,454,443],
[455,444,445,464,449,449,436,0,459],
[464,441,423,449,457,453,447,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,420,447,474,449,429,442,454],
[437,0,428,439,458,441,433,460,449],
[470,462,0,450,480,467,452,457,445],
[443,451,440,0,474,444,445,440,427],
[416,432,410,416,0,436,413,430,415],
[441,449,423,446,454,0,439,447,417],
[461,457,438,445,477,451,0,473,430],
[448,430,433,450,460,443,417,0,465],
[436,441,445,463,475,473,460,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,420,432,438,494,293,558,317],
[573,0,351,609,583,524,441,511,532],
[470,539,0,583,475,350,433,269,427],
[458,281,307,0,365,566,483,497,411],
[452,307,415,525,0,656,494,503,431],
[396,366,540,324,234,0,486,391,325],
[597,449,457,407,396,404,0,336,488],
[332,379,621,393,387,499,554,0,484],
[573,358,463,479,459,565,402,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,449,458,480,428,485,449,451],
[457,0,464,463,478,414,487,417,434],
[441,426,0,494,445,418,458,460,445],
[432,427,396,0,402,395,425,419,404],
[410,412,445,488,0,463,488,441,466],
[462,476,472,495,427,0,509,454,463],
[405,403,432,465,402,381,0,411,429],
[441,473,430,471,449,436,479,0,462],
[439,456,445,486,424,427,461,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,449,451,427,432,458,449,449],
[479,0,459,445,447,438,473,443,460],
[441,431,0,451,432,434,446,448,449],
[439,445,439,0,420,420,454,429,451],
[463,443,458,470,0,431,445,457,468],
[458,452,456,470,459,0,428,442,446],
[432,417,444,436,445,462,0,425,441],
[441,447,442,461,433,448,465,0,455],
[441,430,441,439,422,444,449,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,444,461,454,454,449,452,460],
[459,0,465,474,464,457,447,450,444],
[446,425,0,458,442,452,461,445,423],
[429,416,432,0,439,432,426,453,432],
[436,426,448,451,0,441,447,447,418],
[436,433,438,458,449,0,462,443,431],
[441,443,429,464,443,428,0,454,449],
[438,440,445,437,443,447,436,0,422],
[430,446,467,458,472,459,441,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,470,436,447,443,467,453,490],
[450,0,460,448,456,431,431,450,461],
[420,430,0,406,444,420,431,410,444],
[454,442,484,0,445,451,465,442,475],
[443,434,446,445,0,437,440,433,449],
[447,459,470,439,453,0,461,442,468],
[423,459,459,425,450,429,0,433,462],
[437,440,480,448,457,448,457,0,469],
[400,429,446,415,441,422,428,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,401,466,406,414,395,462,433],
[446,0,434,494,428,408,459,474,477],
[489,456,0,480,431,452,445,445,476],
[424,396,410,0,413,414,449,421,421],
[484,462,459,477,0,429,478,477,462],
[476,482,438,476,461,0,457,469,480],
[495,431,445,441,412,433,0,462,442],
[428,416,445,469,413,421,428,0,460],
[457,413,414,469,428,410,448,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,464,467,455,433,474,450,480],
[434,0,459,427,443,419,458,437,449],
[426,431,0,456,455,396,456,436,446],
[423,463,434,0,452,431,468,417,466],
[435,447,435,438,0,417,463,434,468],
[457,471,494,459,473,0,485,432,475],
[416,432,434,422,427,405,0,407,445],
[440,453,454,473,456,458,483,0,486],
[410,441,444,424,422,415,445,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,403,451,394,429,428,407,429],
[457,0,407,451,422,441,436,408,420],
[487,483,0,485,437,444,467,427,467],
[439,439,405,0,454,425,427,441,443],
[496,468,453,436,0,447,478,448,460],
[461,449,446,465,443,0,476,480,471],
[462,454,423,463,412,414,0,449,444],
[483,482,463,449,442,410,441,0,443],
[461,470,423,447,430,419,446,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,442,455,446,441,438,410,447],
[447,0,449,494,457,475,449,445,474],
[448,441,0,474,465,426,465,452,462],
[435,396,416,0,424,416,437,459,421],
[444,433,425,466,0,433,447,465,441],
[449,415,464,474,457,0,447,464,407],
[452,441,425,453,443,443,0,395,414],
[480,445,438,431,425,426,495,0,431],
[443,416,428,469,449,483,476,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,466,466,458,518,457,472,451],
[449,0,474,474,446,455,438,475,460],
[424,416,0,442,431,430,423,476,474],
[424,416,448,0,426,437,407,459,438],
[432,444,459,464,0,441,410,468,459],
[372,435,460,453,449,0,434,454,464],
[433,452,467,483,480,456,0,447,478],
[418,415,414,431,422,436,443,0,441],
[439,430,416,452,431,426,412,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,450,447,453,425,455,462,453],
[445,0,463,442,441,450,451,433,432],
[440,427,0,434,435,443,443,449,415],
[443,448,456,0,444,474,463,452,436],
[437,449,455,446,0,444,443,452,431],
[465,440,447,416,446,0,448,449,437],
[435,439,447,427,447,442,0,462,436],
[428,457,441,438,438,441,428,0,420],
[437,458,475,454,459,453,454,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,428,415,408,438,445,419,467],
[463,0,435,443,442,456,462,456,413],
[462,455,0,487,442,504,454,491,450],
[475,447,403,0,446,456,450,458,448],
[482,448,448,444,0,493,468,460,463],
[452,434,386,434,397,0,431,437,422],
[445,428,436,440,422,459,0,459,438],
[471,434,399,432,430,453,431,0,427],
[423,477,440,442,427,468,452,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,474,493,426,442,450,434,466],
[425,0,458,456,436,437,456,439,460],
[416,432,0,460,415,440,424,424,426],
[397,434,430,0,421,422,421,416,446],
[464,454,475,469,0,454,446,444,453],
[448,453,450,468,436,0,436,446,457],
[440,434,466,469,444,454,0,441,463],
[456,451,466,474,446,444,449,0,467],
[424,430,464,444,437,433,427,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,459,447,452,453,434,450,447],
[445,0,449,437,466,456,456,443,446],
[431,441,0,419,452,438,441,430,453],
[443,453,471,0,473,461,451,439,449],
[438,424,438,417,0,416,426,442,437],
[437,434,452,429,474,0,435,445,448],
[456,434,449,439,464,455,0,458,461],
[440,447,460,451,448,445,432,0,448],
[443,444,437,441,453,442,429,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,449,473,477,442,462,456,450],
[458,0,390,405,415,378,433,418,415],
[441,500,0,491,441,476,465,466,445],
[417,485,399,0,444,397,473,419,424],
[413,475,449,446,0,393,455,434,483],
[448,512,414,493,497,0,464,487,437],
[428,457,425,417,435,426,0,413,400],
[434,472,424,471,456,403,477,0,406],
[440,475,445,466,407,453,490,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,458,433,471,433,465,471,449],
[441,0,458,440,436,439,440,453,426],
[432,432,0,426,433,431,452,463,426],
[457,450,464,0,471,453,486,480,435],
[419,454,457,419,0,426,432,439,425],
[457,451,459,437,464,0,438,466,412],
[425,450,438,404,458,452,0,463,443],
[419,437,427,410,451,424,427,0,404],
[441,464,464,455,465,478,447,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,456,447,440,420,408,437,440],
[449,0,470,433,479,437,427,458,429],
[434,420,0,469,466,448,452,468,419],
[443,457,421,0,452,420,438,443,434],
[450,411,424,438,0,392,421,438,407],
[470,453,442,470,498,0,455,483,486],
[482,463,438,452,469,435,0,438,455],
[453,432,422,447,452,407,452,0,439],
[450,461,471,456,483,404,435,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,445,441,467,440,444,436,475],
[449,0,443,439,451,436,446,448,485],
[445,447,0,439,476,464,461,467,467],
[449,451,451,0,462,445,465,445,466],
[423,439,414,428,0,442,453,427,455],
[450,454,426,445,448,0,449,434,469],
[446,444,429,425,437,441,0,447,466],
[454,442,423,445,463,456,443,0,477],
[415,405,423,424,435,421,424,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,430,403,413,412,459,409,427],
[450,0,419,427,456,422,469,419,478],
[460,471,0,449,451,440,474,429,473],
[487,463,441,0,469,465,485,437,476],
[477,434,439,421,0,438,463,418,473],
[478,468,450,425,452,0,457,445,466],
[431,421,416,405,427,433,0,411,456],
[481,471,461,453,472,445,479,0,467],
[463,412,417,414,417,424,434,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,393,419,425,456,459,507,446],
[452,0,468,494,480,515,438,424,434],
[497,422,0,462,489,499,513,511,471],
[471,396,428,0,379,432,384,450,442],
[465,410,401,511,0,416,413,440,477],
[434,375,391,458,474,0,469,456,486],
[431,452,377,506,477,421,0,470,440],
[383,466,379,440,450,434,420,0,423],
[444,456,419,448,413,404,450,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,460,434,450,431,442,441,451],
[454,0,455,445,441,435,453,433,449],
[430,435,0,433,439,435,431,421,444],
[456,445,457,0,440,446,452,439,444],
[440,449,451,450,0,441,440,430,459],
[459,455,455,444,449,0,451,445,458],
[448,437,459,438,450,439,0,444,458],
[449,457,469,451,460,445,446,0,454],
[439,441,446,446,431,432,432,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,431,449,463,436,453,459,427],
[447,0,448,445,462,444,458,462,446],
[459,442,0,436,452,445,444,464,419],
[441,445,454,0,464,445,466,453,436],
[427,428,438,426,0,424,425,440,389],
[454,446,445,445,466,0,461,460,427],
[437,432,446,424,465,429,0,454,422],
[431,428,426,437,450,430,436,0,427],
[463,444,471,454,501,463,468,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,434,467,419,443,486,532,422],
[446,0,461,443,481,426,445,511,456],
[456,429,0,466,438,431,447,550,448],
[423,447,424,0,401,442,449,532,421],
[471,409,452,489,0,462,495,500,430],
[447,464,459,448,428,0,487,496,419],
[404,445,443,441,395,403,0,453,431],
[358,379,340,358,390,394,437,0,405],
[468,434,442,469,460,471,459,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,463,421,461,454,424,448,437],
[436,0,459,436,462,448,438,434,436],
[427,431,0,435,432,438,429,442,398],
[469,454,455,0,471,422,446,447,453],
[429,428,458,419,0,415,401,447,448],
[436,442,452,468,475,0,417,441,450],
[466,452,461,444,489,473,0,469,445],
[442,456,448,443,443,449,421,0,431],
[453,454,492,437,442,440,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,454,467,458,453,444,465,464],
[406,0,433,448,441,424,430,422,423],
[436,457,0,454,442,411,432,433,440],
[423,442,436,0,435,420,427,433,429],
[432,449,448,455,0,441,455,436,457],
[437,466,479,470,449,0,451,443,430],
[446,460,458,463,435,439,0,425,439],
[425,468,457,457,454,447,465,0,464],
[426,467,450,461,433,460,451,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,458,464,463,456,462,437,464],
[440,0,451,436,451,443,466,412,478],
[432,439,0,424,481,426,454,445,465],
[426,454,466,0,442,444,456,444,462],
[427,439,409,448,0,420,439,418,461],
[434,447,464,446,470,0,462,423,479],
[428,424,436,434,451,428,0,428,468],
[453,478,445,446,472,467,462,0,453],
[426,412,425,428,429,411,422,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,426,433,440,422,418,427,421],
[434,0,445,423,443,426,417,399,422],
[464,445,0,449,443,444,433,448,455],
[457,467,441,0,439,466,437,437,451],
[450,447,447,451,0,434,451,432,433],
[468,464,446,424,456,0,417,429,450],
[472,473,457,453,439,473,0,449,466],
[463,491,442,453,458,461,441,0,469],
[469,468,435,439,457,440,424,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,431,473,436,435,444,446,449],
[421,0,439,443,444,419,424,424,454],
[459,451,0,461,467,456,437,437,461],
[417,447,429,0,452,426,432,421,436],
[454,446,423,438,0,436,421,436,441],
[455,471,434,464,454,0,458,462,450],
[446,466,453,458,469,432,0,445,464],
[444,466,453,469,454,428,445,0,433],
[441,436,429,454,449,440,426,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,460,470,448,422,456,485,418],
[459,0,490,465,451,455,484,496,442],
[430,400,0,462,446,432,443,478,379],
[420,425,428,0,426,435,431,463,434],
[442,439,444,464,0,431,484,505,471],
[468,435,458,455,459,0,454,474,451],
[434,406,447,459,406,436,0,483,435],
[405,394,412,427,385,416,407,0,380],
[472,448,511,456,419,439,455,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,431,438,445,469,462,452,450],
[415,0,419,462,450,447,444,459,451],
[459,471,0,470,476,467,438,472,466],
[452,428,420,0,449,448,449,455,439],
[445,440,414,441,0,436,446,465,438],
[421,443,423,442,454,0,448,463,462],
[428,446,452,441,444,442,0,462,461],
[438,431,418,435,425,427,428,0,413],
[440,439,424,451,452,428,429,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,450,438,450,435,469,418,440],
[423,0,424,424,435,410,493,399,400],
[440,466,0,408,466,459,520,424,468],
[452,466,482,0,433,471,502,432,423],
[440,455,424,457,0,444,447,457,385],
[455,480,431,419,446,0,457,443,405],
[421,397,370,388,443,433,0,397,381],
[472,491,466,458,433,447,493,0,471],
[450,490,422,467,505,485,509,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,474,492,439,443,467,424,399],
[431,0,487,451,449,458,391,471,494],
[416,403,0,404,419,452,441,429,402],
[398,439,486,0,465,443,432,442,402],
[451,441,471,425,0,437,485,461,475],
[447,432,438,447,453,0,442,473,395],
[423,499,449,458,405,448,0,474,404],
[466,419,461,448,429,417,416,0,453],
[491,396,488,488,415,495,486,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,446,451,415,479,451,430,438],
[445,0,501,436,449,470,480,477,440],
[444,389,0,419,392,462,437,411,433],
[439,454,471,0,408,458,454,458,459],
[475,441,498,482,0,478,482,498,498],
[411,420,428,432,412,0,445,451,433],
[439,410,453,436,408,445,0,419,431],
[460,413,479,432,392,439,471,0,430],
[452,450,457,431,392,457,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,435,450,426,416,486,486,415],
[460,0,444,481,485,425,490,496,443],
[455,446,0,437,435,397,475,458,399],
[440,409,453,0,462,483,514,523,429],
[464,405,455,428,0,433,460,468,434],
[474,465,493,407,457,0,521,503,479],
[404,400,415,376,430,369,0,440,358],
[404,394,432,367,422,387,450,0,360],
[475,447,491,461,456,411,532,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,431,384,406,401,426,369,394],
[459,0,420,456,500,428,461,424,451],
[459,470,0,447,468,432,409,416,478],
[506,434,443,0,442,449,468,442,455],
[484,390,422,448,0,461,416,446,456],
[489,462,458,441,429,0,438,426,424],
[464,429,481,422,474,452,0,451,481],
[521,466,474,448,444,464,439,0,463],
[496,439,412,435,434,466,409,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,482,387,465,436,422,447,490],
[514,0,529,456,478,489,494,392,470],
[408,361,0,429,480,411,416,414,449],
[503,434,461,0,558,459,449,445,481],
[425,412,410,332,0,386,435,402,378],
[454,401,479,431,504,0,478,430,505],
[468,396,474,441,455,412,0,406,462],
[443,498,476,445,488,460,484,0,453],
[400,420,441,409,512,385,428,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,423,423,421,446,439,436,437],
[457,0,443,449,435,470,455,449,447],
[467,447,0,464,428,459,449,441,438],
[467,441,426,0,444,470,452,447,455],
[469,455,462,446,0,477,459,422,449],
[444,420,431,420,413,0,444,419,435],
[451,435,441,438,431,446,0,446,446],
[454,441,449,443,468,471,444,0,466],
[453,443,452,435,441,455,444,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,483,436,441,489,455,471,481],
[396,0,454,374,353,417,377,422,417],
[407,436,0,470,387,432,436,417,449],
[454,516,420,0,473,506,518,483,521],
[449,537,503,417,0,489,441,503,525],
[401,473,458,384,401,0,393,402,441],
[435,513,454,372,449,497,0,395,468],
[419,468,473,407,387,488,495,0,461],
[409,473,441,369,365,449,422,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,464,457,446,489,471,472,469],
[457,0,477,458,444,483,469,469,458],
[426,413,0,434,439,463,467,424,463],
[433,432,456,0,443,438,461,443,448],
[444,446,451,447,0,472,459,468,441],
[401,407,427,452,418,0,470,427,446],
[419,421,423,429,431,420,0,431,428],
[418,421,466,447,422,463,459,0,446],
[421,432,427,442,449,444,462,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,430,422,442,412,451,460,431],
[435,0,452,440,460,446,440,443,460],
[460,438,0,452,464,488,451,464,474],
[468,450,438,0,454,448,473,466,469],
[448,430,426,436,0,435,474,451,441],
[478,444,402,442,455,0,466,452,456],
[439,450,439,417,416,424,0,421,443],
[430,447,426,424,439,438,469,0,427],
[459,430,416,421,449,434,447,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,433,458,453,442,427,478,418],
[418,0,443,436,425,447,427,444,437],
[457,447,0,445,463,446,459,467,426],
[432,454,445,0,472,435,434,455,453],
[437,465,427,418,0,436,422,438,411],
[448,443,444,455,454,0,447,444,433],
[463,463,431,456,468,443,0,455,443],
[412,446,423,435,452,446,435,0,411],
[472,453,464,437,479,457,447,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,498,411,433,500,471,473,452],
[442,0,465,422,418,445,425,445,480],
[392,425,0,466,393,402,392,401,400],
[479,468,424,0,440,440,430,461,464],
[457,472,497,450,0,503,423,482,446],
[390,445,488,450,387,0,417,433,451],
[419,465,498,460,467,473,0,510,513],
[417,445,489,429,408,457,380,0,453],
[438,410,490,426,444,439,377,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,448,479,498,479,453,458,467],
[445,0,418,421,440,451,412,392,436],
[442,472,0,489,463,448,450,444,488],
[411,469,401,0,407,440,421,394,429],
[392,450,427,483,0,434,447,418,477],
[411,439,442,450,456,0,459,417,465],
[437,478,440,469,443,431,0,428,463],
[432,498,446,496,472,473,462,0,462],
[423,454,402,461,413,425,427,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,441,430,438,455,431,410,427],
[478,0,461,455,455,453,441,455,441],
[449,429,0,434,435,447,456,416,418],
[460,435,456,0,456,481,468,454,458],
[452,435,455,434,0,453,468,453,431],
[435,437,443,409,437,0,440,422,432],
[459,449,434,422,422,450,0,443,437],
[480,435,474,436,437,468,447,0,433],
[463,449,472,432,459,458,453,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,477,459,462,452,394,450,483],
[439,0,475,486,505,451,454,499,440],
[413,415,0,441,449,421,382,371,376],
[431,404,449,0,434,442,427,429,416],
[428,385,441,456,0,435,393,409,432],
[438,439,469,448,455,0,411,464,456],
[496,436,508,463,497,479,0,494,447],
[440,391,519,461,481,426,396,0,434],
[407,450,514,474,458,434,443,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,460,461,448,435,441,475,443],
[435,0,433,440,428,417,407,447,418],
[430,457,0,446,430,412,413,472,425],
[429,450,444,0,425,436,402,478,444],
[442,462,460,465,0,441,430,473,435],
[455,473,478,454,449,0,434,470,463],
[449,483,477,488,460,456,0,485,445],
[415,443,418,412,417,420,405,0,416],
[447,472,465,446,455,427,445,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,462,434,442,432,462,405,427],
[462,0,482,459,438,424,494,456,456],
[428,408,0,467,425,436,466,413,393],
[456,431,423,0,450,428,481,430,431],
[448,452,465,440,0,443,451,403,462],
[458,466,454,462,447,0,461,432,429],
[428,396,424,409,439,429,0,395,430],
[485,434,477,460,487,458,495,0,491],
[463,434,497,459,428,461,460,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,438,429,435,435,443,442,441],
[472,0,443,467,465,442,427,457,461],
[452,447,0,475,437,473,469,460,470],
[461,423,415,0,459,434,477,442,445],
[455,425,453,431,0,470,462,477,441],
[455,448,417,456,420,0,468,495,454],
[447,463,421,413,428,422,0,440,411],
[448,433,430,448,413,395,450,0,428],
[449,429,420,445,449,436,479,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,471,469,455,453,468,464,428],
[413,0,453,458,440,450,460,421,418],
[419,437,0,477,426,421,444,417,421],
[421,432,413,0,429,442,436,397,408],
[435,450,464,461,0,445,449,430,456],
[437,440,469,448,445,0,443,438,452],
[422,430,446,454,441,447,0,446,408],
[426,469,473,493,460,452,444,0,427],
[462,472,469,482,434,438,482,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,453,494,477,478,464,486,441],
[451,0,433,462,433,471,466,463,425],
[437,457,0,465,468,461,433,489,479],
[396,428,425,0,427,472,427,444,412],
[413,457,422,463,0,438,437,458,436],
[412,419,429,418,452,0,410,433,386],
[426,424,457,463,453,480,0,465,462],
[404,427,401,446,432,457,425,0,404],
[449,465,411,478,454,504,428,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,419,454,444,444,424,434,451],
[466,0,424,467,449,438,455,448,456],
[471,466,0,463,465,458,451,445,467],
[436,423,427,0,432,441,436,423,440],
[446,441,425,458,0,450,438,430,436],
[446,452,432,449,440,0,443,442,442],
[466,435,439,454,452,447,0,465,469],
[456,442,445,467,460,448,425,0,453],
[439,434,423,450,454,448,421,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,432,417,425,462,419,437,443],
[467,0,456,445,454,470,465,448,446],
[458,434,0,432,433,470,457,459,429],
[473,445,458,0,427,463,451,429,415],
[465,436,457,463,0,477,463,417,459],
[428,420,420,427,413,0,416,433,397],
[471,425,433,439,427,474,0,429,402],
[453,442,431,461,473,457,461,0,442],
[447,444,461,475,431,493,488,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,455,461,462,442,453,447,436],
[422,0,429,439,416,431,420,433,448],
[435,461,0,444,422,428,435,445,438],
[429,451,446,0,424,458,423,441,461],
[428,474,468,466,0,458,448,444,454],
[448,459,462,432,432,0,429,451,444],
[437,470,455,467,442,461,0,441,455],
[443,457,445,449,446,439,449,0,462],
[454,442,452,429,436,446,435,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,447,461,467,456,422,436,457],
[444,0,434,469,464,469,446,466,464],
[443,456,0,454,466,463,438,457,458],
[429,421,436,0,436,448,433,422,455],
[423,426,424,454,0,432,401,415,436],
[434,421,427,442,458,0,423,427,441],
[468,444,452,457,489,467,0,447,451],
[454,424,433,468,475,463,443,0,454],
[433,426,432,435,454,449,439,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,434,448,437,413,446,450,419],
[464,0,433,443,462,431,460,470,421],
[456,457,0,460,453,445,448,475,432],
[442,447,430,0,429,421,433,439,402],
[453,428,437,461,0,445,447,469,432],
[477,459,445,469,445,0,449,469,449],
[444,430,442,457,443,441,0,458,425],
[440,420,415,451,421,421,432,0,403],
[471,469,458,488,458,441,465,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,460,434,437,430,426,425,410],
[468,0,429,466,444,414,454,427,457],
[430,461,0,473,423,444,466,437,475],
[456,424,417,0,447,444,430,460,412],
[453,446,467,443,0,424,418,429,433],
[460,476,446,446,466,0,444,442,439],
[464,436,424,460,472,446,0,449,432],
[465,463,453,430,461,448,441,0,425],
[480,433,415,478,457,451,458,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,544,440,459,442,442,501,473],
[460,0,501,449,434,437,477,437,397],
[346,389,0,377,412,396,390,339,402],
[450,441,513,0,458,429,436,467,470],
[431,456,478,432,0,430,384,418,446],
[448,453,494,461,460,0,439,407,476],
[448,413,500,454,506,451,0,472,459],
[389,453,551,423,472,483,418,0,451],
[417,493,488,420,444,414,431,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,456,430,452,426,444,445,415],
[466,0,445,431,448,416,470,428,466],
[434,445,0,426,464,431,466,485,421],
[460,459,464,0,464,440,478,470,458],
[438,442,426,426,0,407,421,427,466],
[464,474,459,450,483,0,458,439,469],
[446,420,424,412,469,432,0,445,453],
[445,462,405,420,463,451,445,0,425],
[475,424,469,432,424,421,437,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,454,462,461,443,453,456,463],
[416,0,398,437,443,443,439,426,436],
[436,492,0,424,454,419,442,444,455],
[428,453,466,0,458,410,455,397,465],
[429,447,436,432,0,465,467,411,475],
[447,447,471,480,425,0,454,455,465],
[437,451,448,435,423,436,0,439,439],
[434,464,446,493,479,435,451,0,505],
[427,454,435,425,415,425,451,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,441,441,445,443,453,452,452],
[433,0,452,455,432,473,471,441,475],
[449,438,0,445,437,451,461,423,461],
[449,435,445,0,468,467,472,466,508],
[445,458,453,422,0,501,476,449,481],
[447,417,439,423,389,0,437,425,464],
[437,419,429,418,414,453,0,408,427],
[438,449,467,424,441,465,482,0,482],
[438,415,429,382,409,426,463,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,446,459,460,477,456,442,471],
[424,0,434,409,429,438,409,422,437],
[444,456,0,445,460,500,447,448,490],
[431,481,445,0,442,476,455,435,462],
[430,461,430,448,0,453,451,445,470],
[413,452,390,414,437,0,431,422,421],
[434,481,443,435,439,459,0,440,441],
[448,468,442,455,445,468,450,0,462],
[419,453,400,428,420,469,449,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,471,429,515,460,417,455,375],
[440,0,432,476,496,462,430,394,442],
[419,458,0,440,467,474,408,383,417],
[461,414,450,0,446,453,401,372,481],
[375,394,423,444,0,388,403,326,344],
[430,428,416,437,502,0,378,329,426],
[473,460,482,489,487,512,0,393,449],
[435,496,507,518,564,561,497,0,478],
[515,448,473,409,546,464,441,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,408,451,428,476,455,448,427],
[479,0,448,466,412,486,456,434,441],
[482,442,0,482,448,492,479,451,479],
[439,424,408,0,420,443,462,449,423],
[462,478,442,470,0,473,455,436,444],
[414,404,398,447,417,0,439,416,423],
[435,434,411,428,435,451,0,443,433],
[442,456,439,441,454,474,447,0,439],
[463,449,411,467,446,467,457,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,435,443,400,439,428,453,454],
[411,0,421,449,463,433,448,457,443],
[455,469,0,478,423,433,450,486,472],
[447,441,412,0,423,427,407,456,455],
[490,427,467,467,0,440,474,488,496],
[451,457,457,463,450,0,442,505,472],
[462,442,440,483,416,448,0,477,455],
[437,433,404,434,402,385,413,0,428],
[436,447,418,435,394,418,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,473,407,471,552,515,499,461],
[475,0,404,374,463,495,465,399,479],
[417,486,0,459,460,515,417,456,432],
[483,516,431,0,486,464,410,464,505],
[419,427,430,404,0,399,461,427,534],
[338,395,375,426,491,0,435,450,419],
[375,425,473,480,429,455,0,418,432],
[391,491,434,426,463,440,472,0,458],
[429,411,458,385,356,471,458,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,429,461,434,434,410,418,443],
[478,0,435,487,425,449,439,446,444],
[461,455,0,484,428,438,456,466,486],
[429,403,406,0,396,395,409,426,420],
[456,465,462,494,0,446,440,478,454],
[456,441,452,495,444,0,450,478,456],
[480,451,434,481,450,440,0,442,466],
[472,444,424,464,412,412,448,0,422],
[447,446,404,470,436,434,424,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,502,517,481,452,449,448,440],
[410,0,412,499,433,429,453,454,473],
[388,478,0,493,437,462,433,442,380],
[373,391,397,0,425,331,344,384,402],
[409,457,453,465,0,457,432,407,430],
[438,461,428,559,433,0,452,414,423],
[441,437,457,546,458,438,0,513,474],
[442,436,448,506,483,476,377,0,445],
[450,417,510,488,460,467,416,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,451,445,477,478,491,468,435],
[400,0,431,398,456,417,445,406,399],
[439,459,0,422,490,443,472,443,402],
[445,492,468,0,500,459,453,448,454],
[413,434,400,390,0,406,446,420,394],
[412,473,447,431,484,0,483,468,474],
[399,445,418,437,444,407,0,444,395],
[422,484,447,442,470,422,446,0,401],
[455,491,488,436,496,416,495,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,451,413,436,444,424,435,442],
[439,0,454,414,417,460,432,433,425],
[439,436,0,411,403,447,413,445,415],
[477,476,479,0,450,487,460,466,424],
[454,473,487,440,0,485,457,457,439],
[446,430,443,403,405,0,438,430,426],
[466,458,477,430,433,452,0,459,449],
[455,457,445,424,433,460,431,0,435],
[448,465,475,466,451,464,441,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,443,439,451,449,449,446,426],
[444,0,455,455,437,426,456,452,431],
[447,435,0,463,451,440,448,443,434],
[451,435,427,0,439,429,441,462,421],
[439,453,439,451,0,439,470,458,440],
[441,464,450,461,451,0,469,457,452],
[441,434,442,449,420,421,0,426,444],
[444,438,447,428,432,433,464,0,444],
[464,459,456,469,450,438,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,429,437,423,484,457,476,397],
[451,0,449,449,467,438,427,461,461],
[461,441,0,412,457,490,465,503,428],
[453,441,478,0,455,502,476,478,427],
[467,423,433,435,0,489,426,488,447],
[406,452,400,388,401,0,425,432,396],
[433,463,425,414,464,465,0,468,441],
[414,429,387,412,402,458,422,0,407],
[493,429,462,463,443,494,449,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,445,457,431,432,447,423,451],
[451,0,447,445,438,430,433,435,466],
[445,443,0,468,479,451,469,463,469],
[433,445,422,0,436,441,425,418,444],
[459,452,411,454,0,424,435,446,470],
[458,460,439,449,466,0,438,431,479],
[443,457,421,465,455,452,0,436,474],
[467,455,427,472,444,459,454,0,488],
[439,424,421,446,420,411,416,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,447,434,442,460,437,443,435],
[451,0,441,447,465,451,451,447,469],
[443,449,0,441,419,452,445,443,439],
[456,443,449,0,435,446,444,461,449],
[448,425,471,455,0,456,444,444,430],
[430,439,438,444,434,0,436,407,417],
[453,439,445,446,446,454,0,442,431],
[447,443,447,429,446,483,448,0,453],
[455,421,451,441,460,473,459,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,452,464,458,453,444,479,469],
[448,0,444,419,457,441,444,455,433],
[438,446,0,448,467,455,439,461,477],
[426,471,442,0,458,431,442,444,457],
[432,433,423,432,0,443,438,419,437],
[437,449,435,459,447,0,459,457,441],
[446,446,451,448,452,431,0,453,449],
[411,435,429,446,471,433,437,0,445],
[421,457,413,433,453,449,441,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,452,432,449,456,435,447,454],
[461,0,463,453,464,447,433,465,447],
[438,427,0,419,444,414,445,432,452],
[458,437,471,0,455,444,436,463,463],
[441,426,446,435,0,415,426,453,458],
[434,443,476,446,475,0,453,441,451],
[455,457,445,454,464,437,0,438,469],
[443,425,458,427,437,449,452,0,434],
[436,443,438,427,432,439,421,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,479,410,462,448,460,466,452],
[402,0,449,429,442,402,488,451,433],
[411,441,0,425,393,415,461,435,428],
[480,461,465,0,467,438,498,465,472],
[428,448,497,423,0,434,457,477,448],
[442,488,475,452,456,0,466,479,456],
[430,402,429,392,433,424,0,424,428],
[424,439,455,425,413,411,466,0,454],
[438,457,462,418,442,434,462,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,606,442,549,428,528,343,498],
[500,0,466,411,521,403,487,462,418],
[284,424,0,359,475,395,520,380,309],
[448,479,531,0,502,431,495,397,450],
[341,369,415,388,0,279,501,336,379],
[462,487,495,459,611,0,602,420,401],
[362,403,370,395,389,288,0,300,314],
[547,428,510,493,554,470,590,0,448],
[392,472,581,440,511,489,576,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,434,431,463,464,431,446,431],
[445,0,458,450,455,469,450,453,447],
[456,432,0,438,477,452,440,445,434],
[459,440,452,0,452,460,444,436,430],
[427,435,413,438,0,446,433,428,420],
[426,421,438,430,444,0,435,446,428],
[459,440,450,446,457,455,0,445,433],
[444,437,445,454,462,444,445,0,434],
[459,443,456,460,470,462,457,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,380,437,413,414,425,425,392],
[491,0,452,462,434,486,486,462,444],
[510,438,0,452,445,472,466,470,442],
[453,428,438,0,423,458,459,428,428],
[477,456,445,467,0,475,451,461,449],
[476,404,418,432,415,0,423,433,406],
[465,404,424,431,439,467,0,466,403],
[465,428,420,462,429,457,424,0,426],
[498,446,448,462,441,484,487,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,452,428,455,442,442,458,435],
[453,0,444,459,452,455,448,470,456],
[438,446,0,426,440,436,450,465,440],
[462,431,464,0,458,460,458,459,457],
[435,438,450,432,0,441,446,451,447],
[448,435,454,430,449,0,423,454,450],
[448,442,440,432,444,467,0,467,480],
[432,420,425,431,439,436,423,0,433],
[455,434,450,433,443,440,410,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,411,390,429,438,398,425,407],
[490,0,465,433,456,470,450,443,466],
[479,425,0,461,452,479,448,472,467],
[500,457,429,0,456,453,439,443,458],
[461,434,438,434,0,429,442,465,441],
[452,420,411,437,461,0,444,440,442],
[492,440,442,451,448,446,0,448,451],
[465,447,418,447,425,450,442,0,452],
[483,424,423,432,449,448,439,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,464,533,508,447,467,392,403],
[436,0,425,516,405,431,404,397,386],
[426,465,0,548,510,475,475,412,445],
[357,374,342,0,442,362,365,356,317],
[382,485,380,448,0,445,364,408,389],
[443,459,415,528,445,0,438,421,432],
[423,486,415,525,526,452,0,442,429],
[498,493,478,534,482,469,448,0,414],
[487,504,445,573,501,458,461,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,412,437,450,419,420,528,488],
[387,0,419,411,343,428,389,482,395],
[478,471,0,418,453,464,419,566,498],
[453,479,472,0,437,457,395,537,461],
[440,547,437,453,0,431,439,529,461],
[471,462,426,433,459,0,366,515,423],
[470,501,471,495,451,524,0,554,427],
[362,408,324,353,361,375,336,0,397],
[402,495,392,429,429,467,463,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,462,470,432,461,432,458,446],
[407,0,450,456,433,452,422,459,423],
[428,440,0,437,443,465,429,447,433],
[420,434,453,0,418,440,404,447,416],
[458,457,447,472,0,482,441,442,447],
[429,438,425,450,408,0,455,429,434],
[458,468,461,486,449,435,0,421,450],
[432,431,443,443,448,461,469,0,444],
[444,467,457,474,443,456,440,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,458,469,451,473,438,392,452],
[446,0,443,482,442,449,438,447,458],
[432,447,0,452,457,458,440,443,434],
[421,408,438,0,447,425,432,431,405],
[439,448,433,443,0,443,430,434,432],
[417,441,432,465,447,0,436,442,453],
[452,452,450,458,460,454,0,439,453],
[498,443,447,459,456,448,451,0,429],
[438,432,456,485,458,437,437,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,460,455,438,448,444,445,451],
[461,0,469,435,456,461,444,434,473],
[430,421,0,412,422,434,427,411,430],
[435,455,478,0,438,463,448,460,459],
[452,434,468,452,0,484,455,435,462],
[442,429,456,427,406,0,439,429,449],
[446,446,463,442,435,451,0,455,465],
[445,456,479,430,455,461,435,0,457],
[439,417,460,431,428,441,425,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,459,453,461,464,457,443,479],
[421,0,440,429,445,444,425,413,449],
[431,450,0,452,472,454,454,455,450],
[437,461,438,0,475,443,431,441,478],
[429,445,418,415,0,452,410,445,447],
[426,446,436,447,438,0,412,431,470],
[433,465,436,459,480,478,0,438,469],
[447,477,435,449,445,459,452,0,462],
[411,441,440,412,443,420,421,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,532,420,512,464,453,466,507],
[382,0,482,418,456,494,438,478,501],
[358,408,0,365,498,476,412,421,474],
[470,472,525,0,497,472,423,497,490],
[378,434,392,393,0,431,415,449,438],
[426,396,414,418,459,0,437,416,399],
[437,452,478,467,475,453,0,512,478],
[424,412,469,393,441,474,378,0,470],
[383,389,416,400,452,491,412,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,432,476,436,415,392,418,406],
[474,0,498,488,467,465,438,479,464],
[458,392,0,429,417,404,395,429,397],
[414,402,461,0,401,438,391,428,435],
[454,423,473,489,0,438,428,411,447],
[475,425,486,452,452,0,453,429,428],
[498,452,495,499,462,437,0,447,465],
[472,411,461,462,479,461,443,0,489],
[484,426,493,455,443,462,425,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,439,424,440,447,433,430,425],
[448,0,445,426,431,461,460,444,455],
[451,445,0,446,457,459,470,452,448],
[466,464,444,0,466,482,453,466,452],
[450,459,433,424,0,477,464,442,426],
[443,429,431,408,413,0,433,413,415],
[457,430,420,437,426,457,0,457,429],
[460,446,438,424,448,477,433,0,437],
[465,435,442,438,464,475,461,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,472,486,499,485,454,469,438],
[421,0,460,468,438,492,451,453,456],
[418,430,0,439,447,473,461,431,440],
[404,422,451,0,435,432,405,419,414],
[391,452,443,455,0,435,464,425,408],
[405,398,417,458,455,0,404,414,419],
[436,439,429,485,426,486,0,445,412],
[421,437,459,471,465,476,445,0,418],
[452,434,450,476,482,471,478,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,451,495,438,458,443,478,451],
[427,0,465,449,443,453,453,455,461],
[439,425,0,438,425,449,437,449,439],
[395,441,452,0,425,450,421,403,411],
[452,447,465,465,0,441,452,459,442],
[432,437,441,440,449,0,452,451,424],
[447,437,453,469,438,438,0,460,429],
[412,435,441,487,431,439,430,0,443],
[439,429,451,479,448,466,461,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,441,459,476,469,484,456,449],
[395,0,428,431,485,467,448,412,440],
[449,462,0,469,462,467,480,423,461],
[431,459,421,0,449,450,449,459,430],
[414,405,428,441,0,434,454,434,436],
[421,423,423,440,456,0,437,428,434],
[406,442,410,441,436,453,0,418,441],
[434,478,467,431,456,462,472,0,463],
[441,450,429,460,454,456,449,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,426,447,466,430,471,461,457],
[434,0,405,432,453,428,434,430,420],
[464,485,0,446,456,441,450,478,470],
[443,458,444,0,492,467,437,441,462],
[424,437,434,398,0,456,448,440,438],
[460,462,449,423,434,0,459,449,441],
[419,456,440,453,442,431,0,449,445],
[429,460,412,449,450,441,441,0,436],
[433,470,420,428,452,449,445,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,466,369,436,408,430,412,404],
[488,0,464,468,454,447,450,433,457],
[424,426,0,405,412,378,378,426,379],
[521,422,485,0,455,448,375,454,429],
[454,436,478,435,0,458,506,450,424],
[482,443,512,442,432,0,400,483,463],
[460,440,512,515,384,490,0,506,447],
[478,457,464,436,440,407,384,0,430],
[486,433,511,461,466,427,443,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,454,444,447,453,462,459,435],
[430,0,443,438,440,440,456,453,427],
[436,447,0,417,444,438,452,452,423],
[446,452,473,0,459,446,477,479,433],
[443,450,446,431,0,433,459,469,452],
[437,450,452,444,457,0,443,477,417],
[428,434,438,413,431,447,0,453,428],
[431,437,438,411,421,413,437,0,411],
[455,463,467,457,438,473,462,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,472,454,439,470,429,447,464],
[416,0,429,415,432,444,421,415,435],
[418,461,0,416,456,450,412,439,470],
[436,475,474,0,442,462,434,483,457],
[451,458,434,448,0,456,450,435,446],
[420,446,440,428,434,0,416,454,425],
[461,469,478,456,440,474,0,451,456],
[443,475,451,407,455,436,439,0,456],
[426,455,420,433,444,465,434,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,480,455,458,437,410,442,450],
[461,0,456,434,459,462,451,438,431],
[410,434,0,431,464,451,438,443,440],
[435,456,459,0,453,427,420,422,444],
[432,431,426,437,0,407,434,425,420],
[453,428,439,463,483,0,460,437,438],
[480,439,452,470,456,430,0,440,445],
[448,452,447,468,465,453,450,0,444],
[440,459,450,446,470,452,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,440,467,424,442,446,420,419],
[442,0,420,451,410,447,433,425,422],
[450,470,0,446,427,437,458,414,426],
[423,439,444,0,425,446,446,440,415],
[466,480,463,465,0,467,458,445,457],
[448,443,453,444,423,0,458,428,423],
[444,457,432,444,432,432,0,427,425],
[470,465,476,450,445,462,463,0,450],
[471,468,464,475,433,467,465,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,460,450,463,473,458,482,444],
[424,0,452,423,457,471,435,459,441],
[430,438,0,420,435,457,445,462,459],
[440,467,470,0,482,473,469,480,450],
[427,433,455,408,0,454,434,445,425],
[417,419,433,417,436,0,429,451,423],
[432,455,445,421,456,461,0,468,444],
[408,431,428,410,445,439,422,0,419],
[446,449,431,440,465,467,446,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,442,463,435,498,478,456,420],
[439,0,440,462,455,495,497,471,448],
[448,450,0,472,440,488,477,458,426],
[427,428,418,0,417,456,441,449,381],
[455,435,450,473,0,493,512,468,428],
[392,395,402,434,397,0,434,452,358],
[412,393,413,449,378,456,0,443,396],
[434,419,432,441,422,438,447,0,406],
[470,442,464,509,462,532,494,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,439,455,457,406,448,399,435],
[479,0,468,475,448,477,494,448,444],
[451,422,0,468,436,434,485,411,447],
[435,415,422,0,418,414,452,411,429],
[433,442,454,472,0,447,464,444,413],
[484,413,456,476,443,0,467,449,449],
[442,396,405,438,426,423,0,410,409],
[491,442,479,479,446,441,480,0,436],
[455,446,443,461,477,441,481,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,423,466,468,434,453,440,447],
[466,0,466,478,482,458,460,438,454],
[467,424,0,424,453,431,463,447,457],
[424,412,466,0,446,422,466,433,454],
[422,408,437,444,0,420,412,411,431],
[456,432,459,468,470,0,459,431,452],
[437,430,427,424,478,431,0,421,459],
[450,452,443,457,479,459,469,0,470],
[443,436,433,436,459,438,431,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,383,432,454,447,362,436,411],
[495,0,424,462,497,435,492,547,457],
[507,466,0,452,491,459,445,498,473],
[458,428,438,0,424,405,371,455,430],
[436,393,399,466,0,364,448,483,399],
[443,455,431,485,526,0,426,427,508],
[528,398,445,519,442,464,0,523,439],
[454,343,392,435,407,463,367,0,448],
[479,433,417,460,491,382,451,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,408,381,445,415,417,425,421],
[458,0,416,400,407,433,398,403,408],
[482,474,0,447,485,446,469,444,468],
[509,490,443,0,486,436,452,412,442],
[445,483,405,404,0,385,397,382,419],
[475,457,444,454,505,0,467,454,454],
[473,492,421,438,493,423,0,428,446],
[465,487,446,478,508,436,462,0,440],
[469,482,422,448,471,436,444,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,452,439,427,469,437,466,446],
[468,0,474,456,444,442,447,465,460],
[438,416,0,423,428,443,414,447,454],
[451,434,467,0,428,455,422,463,458],
[463,446,462,462,0,469,435,461,456],
[421,448,447,435,421,0,405,434,453],
[453,443,476,468,455,485,0,482,480],
[424,425,443,427,429,456,408,0,435],
[444,430,436,432,434,437,410,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,401,479,419,443,427,365,469],
[502,0,411,512,411,504,453,475,444],
[489,479,0,492,445,483,496,472,436],
[411,378,398,0,377,394,403,367,384],
[471,479,445,513,0,468,476,440,449],
[447,386,407,496,422,0,442,412,461],
[463,437,394,487,414,448,0,447,451],
[525,415,418,523,450,478,443,0,475],
[421,446,454,506,441,429,439,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,454,448,433,434,446,438,449],
[465,0,451,470,459,429,459,470,443],
[436,439,0,468,444,447,454,454,456],
[442,420,422,0,439,413,433,456,433],
[457,431,446,451,0,452,438,458,445],
[456,461,443,477,438,0,430,451,446],
[444,431,436,457,452,460,0,456,434],
[452,420,436,434,432,439,434,0,451],
[441,447,434,457,445,444,456,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,439,434,447,456,399,427,404],
[484,0,435,429,415,482,420,443,445],
[451,455,0,402,438,430,427,468,425],
[456,461,488,0,453,483,431,467,450],
[443,475,452,437,0,486,436,467,460],
[434,408,460,407,404,0,446,444,426],
[491,470,463,459,454,444,0,465,433],
[463,447,422,423,423,446,425,0,439],
[486,445,465,440,430,464,457,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,436,427,428,434,450,454,454],
[448,0,437,430,429,427,450,460,450],
[454,453,0,464,461,444,472,471,461],
[463,460,426,0,419,439,440,453,462],
[462,461,429,471,0,451,459,464,462],
[456,463,446,451,439,0,473,462,440],
[440,440,418,450,431,417,0,449,449],
[436,430,419,437,426,428,441,0,440],
[436,440,429,428,428,450,441,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,434,447,415,448,451,434,443],
[444,0,441,441,426,439,447,437,437],
[456,449,0,441,456,468,483,456,451],
[443,449,449,0,446,463,454,447,449],
[475,464,434,444,0,455,447,451,444],
[442,451,422,427,435,0,452,446,421],
[439,443,407,436,443,438,0,437,438],
[456,453,434,443,439,444,453,0,433],
[447,453,439,441,446,469,452,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,417,427,433,448,428,433,429],
[467,0,443,435,439,466,432,449,449],
[473,447,0,445,451,481,463,432,463],
[463,455,445,0,451,469,441,455,447],
[457,451,439,439,0,452,440,429,441],
[442,424,409,421,438,0,415,406,409],
[462,458,427,449,450,475,0,441,450],
[457,441,458,435,461,484,449,0,440],
[461,441,427,443,449,481,440,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,413,455,458,450,446,476],
[434,0,382,377,393,428,440,404,417],
[448,508,0,395,465,482,469,453,498],
[477,513,495,0,457,471,471,438,507],
[435,497,425,433,0,477,490,441,464],
[432,462,408,419,413,0,446,420,485],
[440,450,421,419,400,444,0,443,454],
[444,486,437,452,449,470,447,0,477],
[414,473,392,383,426,405,436,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,500,445,441,466,450,462,440],
[389,0,393,438,454,443,405,396,411],
[390,497,0,446,455,471,427,415,451],
[445,452,444,0,460,482,440,443,455],
[449,436,435,430,0,487,473,446,425],
[424,447,419,408,403,0,426,428,436],
[440,485,463,450,417,464,0,462,445],
[428,494,475,447,444,462,428,0,434],
[450,479,439,435,465,454,445,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,501,441,457,423,441,444,484],
[453,0,433,428,346,380,413,417,438],
[389,457,0,427,407,427,466,433,514],
[449,462,463,0,470,446,442,463,489],
[433,544,483,420,0,461,474,475,519],
[467,510,463,444,429,0,458,424,467],
[449,477,424,448,416,432,0,444,490],
[446,473,457,427,415,466,446,0,513],
[406,452,376,401,371,423,400,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,452,449,442,441,464,432,459],
[429,0,510,467,450,444,460,445,427],
[438,380,0,464,452,444,447,429,434],
[441,423,426,0,432,451,436,422,427],
[448,440,438,458,0,406,454,435,458],
[449,446,446,439,484,0,472,451,469],
[426,430,443,454,436,418,0,464,442],
[458,445,461,468,455,439,426,0,462],
[431,463,456,463,432,421,448,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,472,455,450,439,447,454,468],
[405,0,443,433,437,434,404,428,430],
[418,447,0,447,452,424,458,445,456],
[435,457,443,0,448,461,437,450,456],
[440,453,438,442,0,443,424,431,448],
[451,456,466,429,447,0,448,441,455],
[443,486,432,453,466,442,0,462,465],
[436,462,445,440,459,449,428,0,463],
[422,460,434,434,442,435,425,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,453,464,439,493,450,424,450],
[393,0,376,421,450,397,355,372,380],
[437,514,0,456,472,481,435,476,470],
[426,469,434,0,465,444,410,419,399],
[451,440,418,425,0,409,443,415,381],
[397,493,409,446,481,0,442,403,413],
[440,535,455,480,447,448,0,412,461],
[466,518,414,471,475,487,478,0,437],
[440,510,420,491,509,477,429,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,460,475,479,432,427,453,457],
[420,0,412,427,444,407,417,438,440],
[430,478,0,448,458,451,445,473,469],
[415,463,442,0,449,428,455,429,444],
[411,446,432,441,0,435,417,431,429],
[458,483,439,462,455,0,444,472,471],
[463,473,445,435,473,446,0,458,454],
[437,452,417,461,459,418,432,0,429],
[433,450,421,446,461,419,436,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,461,453,454,466,445,470,449],
[426,0,436,433,445,443,426,453,435],
[429,454,0,438,447,450,417,447,422],
[437,457,452,0,450,473,426,457,457],
[436,445,443,440,0,447,437,440,440],
[424,447,440,417,443,0,399,445,443],
[445,464,473,464,453,491,0,459,476],
[420,437,443,433,450,445,431,0,446],
[441,455,468,433,450,447,414,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,387,426,428,375,373,403,462],
[478,0,425,479,453,453,428,459,487],
[503,465,0,482,488,462,451,430,482],
[464,411,408,0,432,457,436,454,457],
[462,437,402,458,0,447,422,439,450],
[515,437,428,433,443,0,452,457,472],
[517,462,439,454,468,438,0,472,470],
[487,431,460,436,451,433,418,0,426],
[428,403,408,433,440,418,420,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,448,479,456,456,440,463,432],
[456,0,475,464,456,427,478,482,440],
[442,415,0,449,449,442,436,453,417],
[411,426,441,0,429,441,436,442,425],
[434,434,441,461,0,444,453,451,448],
[434,463,448,449,446,0,448,461,441],
[450,412,454,454,437,442,0,460,410],
[427,408,437,448,439,429,430,0,426],
[458,450,473,465,442,449,480,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,455,461,463,396,425,476,460],
[405,0,421,454,448,411,400,436,486],
[435,469,0,491,464,429,453,437,451],
[429,436,399,0,486,414,484,451,445],
[427,442,426,404,0,413,474,429,441],
[494,479,461,476,477,0,480,489,421],
[465,490,437,406,416,410,0,424,433],
[414,454,453,439,461,401,466,0,468],
[430,404,439,445,449,469,457,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,463,455,465,464,451,458,448],
[449,0,445,443,468,456,459,452,443],
[427,445,0,447,450,442,460,447,436],
[435,447,443,0,453,446,456,459,425],
[425,422,440,437,0,437,418,432,424],
[426,434,448,444,453,0,457,445,436],
[439,431,430,434,472,433,0,422,435],
[432,438,443,431,458,445,468,0,439],
[442,447,454,465,466,454,455,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,476,475,402,463,414,481,469],
[381,0,430,443,389,381,352,466,364],
[414,460,0,445,431,387,403,426,396],
[415,447,445,0,430,407,441,459,404],
[488,501,459,460,0,458,493,532,416],
[427,509,503,483,432,0,456,508,447],
[476,538,487,449,397,434,0,505,469],
[409,424,464,431,358,382,385,0,414],
[421,526,494,486,474,443,421,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,442,469,477,462,483,458,469],
[408,0,418,467,416,371,405,442,450],
[448,472,0,476,467,421,447,435,436],
[421,423,414,0,431,439,443,421,440],
[413,474,423,459,0,414,433,438,429],
[428,519,469,451,476,0,495,461,488],
[407,485,443,447,457,395,0,434,452],
[432,448,455,469,452,429,456,0,476],
[421,440,454,450,461,402,438,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,432,449,397,475,455,467,437],
[415,0,422,413,426,445,424,450,431],
[458,468,0,457,396,442,451,430,449],
[441,477,433,0,416,437,450,420,446],
[493,464,494,474,0,497,445,463,466],
[415,445,448,453,393,0,433,420,435],
[435,466,439,440,445,457,0,444,442],
[423,440,460,470,427,470,446,0,432],
[453,459,441,444,424,455,448,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,466,429,445,465,463,429,446],
[460,0,461,444,433,465,458,446,450],
[424,429,0,449,437,445,436,433,413],
[461,446,441,0,445,443,413,443,433],
[445,457,453,445,0,442,442,442,448],
[425,425,445,447,448,0,444,432,422],
[427,432,454,477,448,446,0,441,424],
[461,444,457,447,448,458,449,0,432],
[444,440,477,457,442,468,466,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,408,436,421,439,455,446,447],
[449,0,410,455,416,457,463,433,426],
[482,480,0,474,445,484,490,480,475],
[454,435,416,0,407,434,466,442,421],
[469,474,445,483,0,458,488,465,467],
[451,433,406,456,432,0,459,442,438],
[435,427,400,424,402,431,0,425,416],
[444,457,410,448,425,448,465,0,443],
[443,464,415,469,423,452,474,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,460,441,491,455,454,447,440],
[439,0,467,432,473,448,434,442,458],
[430,423,0,418,450,440,431,454,428],
[449,458,472,0,472,474,455,448,431],
[399,417,440,418,0,435,427,436,429],
[435,442,450,416,455,0,430,441,435],
[436,456,459,435,463,460,0,467,446],
[443,448,436,442,454,449,423,0,455],
[450,432,462,459,461,455,444,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,373,469,344,398,436,422,471],
[445,0,356,454,388,442,472,409,462],
[517,534,0,535,419,508,505,458,529],
[421,436,355,0,313,466,521,356,470],
[546,502,471,577,0,568,591,421,558],
[492,448,382,424,322,0,449,360,482],
[454,418,385,369,299,441,0,333,446],
[468,481,432,534,469,530,557,0,488],
[419,428,361,420,332,408,444,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,450,440,429,436,439,427,431],
[467,0,464,441,454,455,472,444,459],
[440,426,0,431,417,428,427,438,448],
[450,449,459,0,452,444,464,425,441],
[461,436,473,438,0,446,441,448,463],
[454,435,462,446,444,0,454,472,441],
[451,418,463,426,449,436,0,418,444],
[463,446,452,465,442,418,472,0,467],
[459,431,442,449,427,449,446,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,422,443,398,409,423,430,444],
[443,0,406,407,408,421,403,395,407],
[468,484,0,445,464,449,437,425,479],
[447,483,445,0,434,418,447,445,435],
[492,482,426,456,0,449,456,437,451],
[481,469,441,472,441,0,459,426,457],
[467,487,453,443,434,431,0,457,461],
[460,495,465,445,453,464,433,0,441],
[446,483,411,455,439,433,429,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,591,516,478,453,415,456,400],
[381,0,460,441,559,540,411,540,413],
[299,430,0,374,431,304,380,353,354],
[374,449,516,0,453,341,501,351,360],
[412,331,459,437,0,359,547,422,366],
[437,350,586,549,531,0,522,490,508],
[475,479,510,389,343,368,0,400,385],
[434,350,537,539,468,400,490,0,431],
[490,477,536,530,524,382,505,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,469,444,419,507,491,482,473],
[400,0,485,458,473,442,481,476,467],
[421,405,0,447,451,448,449,464,424],
[446,432,443,0,455,419,467,433,444],
[471,417,439,435,0,444,446,447,470],
[383,448,442,471,446,0,459,473,477],
[399,409,441,423,444,431,0,443,440],
[408,414,426,457,443,417,447,0,425],
[417,423,466,446,420,413,450,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,455,464,492,442,443,468,439],
[435,0,455,450,484,433,462,453,457],
[435,435,0,427,455,407,437,423,441],
[426,440,463,0,479,462,432,456,436],
[398,406,435,411,0,422,414,419,410],
[448,457,483,428,468,0,436,437,462],
[447,428,453,458,476,454,0,452,442],
[422,437,467,434,471,453,438,0,452],
[451,433,449,454,480,428,448,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,463,428,439,461,437,450,445],
[441,0,429,436,449,443,417,433,435],
[427,461,0,448,439,443,428,448,432],
[462,454,442,0,420,449,433,447,451],
[451,441,451,470,0,455,472,436,449],
[429,447,447,441,435,0,452,441,442],
[453,473,462,457,418,438,0,447,464],
[440,457,442,443,454,449,443,0,435],
[445,455,458,439,441,448,426,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,445,443,445,441,483,424,423],
[447,0,423,458,458,443,471,425,445],
[445,467,0,469,433,442,487,449,453],
[447,432,421,0,417,414,463,394,408],
[445,432,457,473,0,472,483,422,444],
[449,447,448,476,418,0,458,430,425],
[407,419,403,427,407,432,0,401,419],
[466,465,441,496,468,460,489,0,447],
[467,445,437,482,446,465,471,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,495,445,473,454,446,480,469],
[410,0,452,432,413,450,416,438,420],
[395,438,0,431,428,447,425,420,438],
[445,458,459,0,451,446,442,451,448],
[417,477,462,439,0,486,440,448,443],
[436,440,443,444,404,0,418,442,429],
[444,474,465,448,450,472,0,469,464],
[410,452,470,439,442,448,421,0,449],
[421,470,452,442,447,461,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,470,425,421,436,428,422,410],
[457,0,481,459,415,474,475,480,426],
[420,409,0,412,446,453,450,437,408],
[465,431,478,0,418,434,474,429,448],
[469,475,444,472,0,451,510,483,431],
[454,416,437,456,439,0,470,452,438],
[462,415,440,416,380,420,0,439,420],
[468,410,453,461,407,438,451,0,419],
[480,464,482,442,459,452,470,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,429,414,430,431,417,438,429],
[447,0,421,423,399,445,419,448,440],
[461,469,0,445,435,471,433,460,423],
[476,467,445,0,445,455,444,467,445],
[460,491,455,445,0,469,448,471,466],
[459,445,419,435,421,0,428,452,421],
[473,471,457,446,442,462,0,471,449],
[452,442,430,423,419,438,419,0,430],
[461,450,467,445,424,469,441,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,476,467,449,448,431,432,434],
[411,0,447,436,416,453,409,402,394],
[414,443,0,430,427,435,429,409,421],
[423,454,460,0,453,460,438,438,431],
[441,474,463,437,0,487,464,437,430],
[442,437,455,430,403,0,437,417,449],
[459,481,461,452,426,453,0,445,432],
[458,488,481,452,453,473,445,0,438],
[456,496,469,459,460,441,458,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,547,494,435,456,482,479,503],
[390,0,427,402,375,391,382,379,395],
[343,463,0,408,386,449,424,379,393],
[396,488,482,0,424,371,378,448,447],
[455,515,504,466,0,449,491,467,410],
[434,499,441,519,441,0,475,446,490],
[408,508,466,512,399,415,0,409,480],
[411,511,511,442,423,444,481,0,455],
[387,495,497,443,480,400,410,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,421,435,444,440,467,424,411],
[446,0,426,428,429,431,456,421,431],
[469,464,0,465,456,477,482,424,446],
[455,462,425,0,452,468,463,427,451],
[446,461,434,438,0,453,449,429,401],
[450,459,413,422,437,0,476,418,423],
[423,434,408,427,441,414,0,412,417],
[466,469,466,463,461,472,478,0,434],
[479,459,444,439,489,467,473,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,414,365,366,415,386,310,338],
[510,0,402,440,397,390,400,375,402],
[476,488,0,474,394,513,421,443,424],
[525,450,416,0,411,399,402,340,329],
[524,493,496,479,0,465,412,457,469],
[475,500,377,491,425,0,382,383,365],
[504,490,469,488,478,508,0,387,433],
[580,515,447,550,433,507,503,0,465],
[552,488,466,561,421,525,457,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,466,446,459,434,450,443,470],
[400,0,436,421,408,424,394,383,441],
[424,454,0,442,466,457,436,456,464],
[444,469,448,0,447,448,457,423,472],
[431,482,424,443,0,434,423,429,427],
[456,466,433,442,456,0,442,399,483],
[440,496,454,433,467,448,0,434,459],
[447,507,434,467,461,491,456,0,477],
[420,449,426,418,463,407,431,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,472,464,474,469,439,446,416],
[444,0,429,428,455,443,467,449,455],
[418,461,0,434,467,435,439,450,399],
[426,462,456,0,498,412,422,438,450],
[416,435,423,392,0,433,385,417,360],
[421,447,455,478,457,0,452,430,442],
[451,423,451,468,505,438,0,456,444],
[444,441,440,452,473,460,434,0,427],
[474,435,491,440,530,448,446,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,453,463,464,484,457,434,446],
[468,0,433,454,491,473,415,429,474],
[437,457,0,453,456,464,426,434,441],
[427,436,437,0,464,483,440,443,450],
[426,399,434,426,0,449,384,419,428],
[406,417,426,407,441,0,399,402,435],
[433,475,464,450,506,491,0,460,489],
[456,461,456,447,471,488,430,0,468],
[444,416,449,440,462,455,401,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,455,434,410,426,428,433,459],
[462,0,429,461,443,461,438,453,474],
[435,461,0,459,424,450,435,453,466],
[456,429,431,0,438,448,436,452,458],
[480,447,466,452,0,445,453,477,449],
[464,429,440,442,445,0,428,458,463],
[462,452,455,454,437,462,0,470,471],
[457,437,437,438,413,432,420,0,432],
[431,416,424,432,441,427,419,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,592,447,513,547,437,533,485],
[399,0,485,502,479,574,510,541,509],
[298,405,0,440,427,416,417,341,383],
[443,388,450,0,423,491,396,388,384],
[377,411,463,467,0,496,428,395,443],
[343,316,474,399,394,0,419,336,420],
[453,380,473,494,462,471,0,379,465],
[357,349,549,502,495,554,511,0,512],
[405,381,507,506,447,470,425,378,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,464,452,434,467,450,432,434],
[445,0,462,462,429,425,445,412,409],
[426,428,0,454,431,444,433,436,425],
[438,428,436,0,454,436,472,440,433],
[456,461,459,436,0,425,430,436,445],
[423,465,446,454,465,0,460,423,451],
[440,445,457,418,460,430,0,442,437],
[458,478,454,450,454,467,448,0,429],
[456,481,465,457,445,439,453,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,461,417,473,458,456,435,452],
[449,0,444,425,449,423,464,427,440],
[429,446,0,433,479,438,471,409,456],
[473,465,457,0,478,442,485,464,478],
[417,441,411,412,0,418,432,405,447],
[432,467,452,448,472,0,468,417,459],
[434,426,419,405,458,422,0,380,445],
[455,463,481,426,485,473,510,0,482],
[438,450,434,412,443,431,445,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,451,425,460,417,454,478,448],
[429,0,432,422,460,422,457,440,450],
[439,458,0,443,453,449,455,457,458],
[465,468,447,0,470,442,472,462,457],
[430,430,437,420,0,446,441,454,448],
[473,468,441,448,444,0,454,460,456],
[436,433,435,418,449,436,0,450,413],
[412,450,433,428,436,430,440,0,447],
[442,440,432,433,442,434,477,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,442,437,454,469,446,445,447],
[438,0,430,430,432,464,430,432,436],
[448,460,0,448,445,463,420,415,437],
[453,460,442,0,437,456,448,442,433],
[436,458,445,453,0,458,448,450,448],
[421,426,427,434,432,0,413,425,407],
[444,460,470,442,442,477,0,434,435],
[445,458,475,448,440,465,456,0,462],
[443,454,453,457,442,483,455,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,410,420,449,437,416,462,414],
[471,0,431,449,429,440,435,465,436],
[480,459,0,456,444,446,452,454,428],
[470,441,434,0,444,452,418,465,418],
[441,461,446,446,0,452,432,453,428],
[453,450,444,438,438,0,459,425,443],
[474,455,438,472,458,431,0,458,456],
[428,425,436,425,437,465,432,0,417],
[476,454,462,472,462,447,434,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,435,445,449,441,444,459,452],
[430,0,417,439,423,451,432,451,435],
[455,473,0,467,421,446,465,457,475],
[445,451,423,0,429,421,445,438,448],
[441,467,469,461,0,474,441,448,455],
[449,439,444,469,416,0,456,446,446],
[446,458,425,445,449,434,0,448,440],
[431,439,433,452,442,444,442,0,462],
[438,455,415,442,435,444,450,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,437,437,474,441,446,445,421],
[458,0,452,437,482,456,461,449,429],
[453,438,0,425,468,444,452,448,434],
[453,453,465,0,470,454,465,450,427],
[416,408,422,420,0,399,439,415,409],
[449,434,446,436,491,0,464,430,454],
[444,429,438,425,451,426,0,434,396],
[445,441,442,440,475,460,456,0,437],
[469,461,456,463,481,436,494,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,452,451,411,434,424,427,471],
[464,0,490,487,470,456,471,469,434],
[438,400,0,457,432,431,452,422,438],
[439,403,433,0,431,443,436,416,425],
[479,420,458,459,0,445,460,445,456],
[456,434,459,447,445,0,444,407,459],
[466,419,438,454,430,446,0,430,449],
[463,421,468,474,445,483,460,0,465],
[419,456,452,465,434,431,441,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,478,465,468,447,476,425,471],
[422,0,450,421,436,421,454,392,450],
[412,440,0,445,452,442,463,442,458],
[425,469,445,0,484,436,467,448,471],
[422,454,438,406,0,409,442,411,445],
[443,469,448,454,481,0,472,465,464],
[414,436,427,423,448,418,0,419,440],
[465,498,448,442,479,425,471,0,473],
[419,440,432,419,445,426,450,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,464,447,440,432,432,443,422],
[430,0,427,441,428,425,439,439,433],
[426,463,0,437,465,433,452,451,470],
[443,449,453,0,460,454,465,465,434],
[450,462,425,430,0,441,463,467,421],
[458,465,457,436,449,0,464,437,450],
[458,451,438,425,427,426,0,425,446],
[447,451,439,425,423,453,465,0,456],
[468,457,420,456,469,440,444,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,469,435,439,416,457,401,444],
[452,0,443,422,437,418,416,419,423],
[421,447,0,462,433,431,440,419,454],
[455,468,428,0,456,454,427,412,459],
[451,453,457,434,0,427,431,436,446],
[474,472,459,436,463,0,448,445,434],
[433,474,450,463,459,442,0,437,477],
[489,471,471,478,454,445,453,0,471],
[446,467,436,431,444,456,413,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,447,453,395,450,448,454,465],
[443,0,470,431,397,416,416,401,423],
[443,420,0,456,424,417,410,466,426],
[437,459,434,0,401,430,432,400,437],
[495,493,466,489,0,444,467,487,458],
[440,474,473,460,446,0,399,458,434],
[442,474,480,458,423,491,0,452,442],
[436,489,424,490,403,432,438,0,444],
[425,467,464,453,432,456,448,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,449,424,448,425,421,438,412],
[472,0,483,437,472,454,445,477,455],
[441,407,0,432,445,435,419,462,438],
[466,453,458,0,485,454,440,468,461],
[442,418,445,405,0,420,425,451,403],
[465,436,455,436,470,0,461,451,447],
[469,445,471,450,465,429,0,448,460],
[452,413,428,422,439,439,442,0,415],
[478,435,452,429,487,443,430,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,451,464,451,444,449,470],
[433,0,445,428,441,448,425,444,440],
[429,445,0,437,434,448,419,438,442],
[439,462,453,0,445,446,435,443,465],
[426,449,456,445,0,438,457,444,450],
[439,442,442,444,452,0,459,458,455],
[446,465,471,455,433,431,0,460,452],
[441,446,452,447,446,432,430,0,432],
[420,450,448,425,440,435,438,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,498,432,434,446,428,447,457],
[440,0,459,437,426,449,428,438,473],
[392,431,0,432,412,436,436,423,458],
[458,453,458,0,443,452,434,449,452],
[456,464,478,447,0,473,450,450,435],
[444,441,454,438,417,0,452,428,470],
[462,462,454,456,440,438,0,413,450],
[443,452,467,441,440,462,477,0,439],
[433,417,432,438,455,420,440,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,439,439,449,451,424,436,440],
[464,0,464,471,478,472,461,444,463],
[451,426,0,448,452,458,435,444,422],
[451,419,442,0,453,453,437,416,419],
[441,412,438,437,0,441,424,435,429],
[439,418,432,437,449,0,421,429,425],
[466,429,455,453,466,469,0,448,429],
[454,446,446,474,455,461,442,0,431],
[450,427,468,471,461,465,461,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,449,446,420,446,423,426,456],
[429,0,428,387,427,430,403,394,432],
[441,462,0,442,454,468,426,433,449],
[444,503,448,0,435,470,452,462,461],
[470,463,436,455,0,481,462,454,435],
[444,460,422,420,409,0,437,432,440],
[467,487,464,438,428,453,0,457,455],
[464,496,457,428,436,458,433,0,443],
[434,458,441,429,455,450,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,228,396,382,479,263,415,486],
[419,0,452,368,384,376,375,277,452],
[662,438,0,452,518,484,476,415,399],
[494,522,438,0,523,627,458,423,417],
[508,506,372,367,0,509,350,483,562],
[411,514,406,263,381,0,285,235,362],
[627,515,414,432,540,605,0,399,376],
[475,613,475,467,407,655,491,0,552],
[404,438,491,473,328,528,514,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,446,511,462,436,480,410,421],
[448,0,459,526,451,426,475,454,439],
[444,431,0,497,468,472,452,427,451],
[379,364,393,0,380,410,412,405,390],
[428,439,422,510,0,443,454,424,419],
[454,464,418,480,447,0,453,407,393],
[410,415,438,478,436,437,0,408,437],
[480,436,463,485,466,483,482,0,437],
[469,451,439,500,471,497,453,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,473,447,429,444,481,484,450],
[432,0,427,436,452,447,459,497,441],
[417,463,0,444,444,454,478,472,422],
[443,454,446,0,434,451,479,482,429],
[461,438,446,456,0,467,469,456,442],
[446,443,436,439,423,0,485,491,424],
[409,431,412,411,421,405,0,449,407],
[406,393,418,408,434,399,441,0,402],
[440,449,468,461,448,466,483,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,439,416,472,433,438,416,405],
[472,0,464,478,461,456,452,453,444],
[451,426,0,450,479,441,461,427,423],
[474,412,440,0,468,465,470,447,440],
[418,429,411,422,0,409,433,420,386],
[457,434,449,425,481,0,448,450,423],
[452,438,429,420,457,442,0,433,429],
[474,437,463,443,470,440,457,0,462],
[485,446,467,450,504,467,461,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,452,439,461,438,425,460,451],
[457,0,461,452,451,424,451,454,449],
[438,429,0,445,454,429,426,436,446],
[451,438,445,0,481,454,449,462,443],
[429,439,436,409,0,422,412,430,431],
[452,466,461,436,468,0,468,457,466],
[465,439,464,441,478,422,0,450,475],
[430,436,454,428,460,433,440,0,458],
[439,441,444,447,459,424,415,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,475,491,481,451,465,430,478],
[427,0,458,453,449,447,454,442,428],
[415,432,0,442,439,440,445,422,406],
[399,437,448,0,464,422,440,430,421],
[409,441,451,426,0,448,429,401,402],
[439,443,450,468,442,0,464,422,452],
[425,436,445,450,461,426,0,453,421],
[460,448,468,460,489,468,437,0,426],
[412,462,484,469,488,438,469,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,448,428,416,436,481,450,431],
[439,0,429,435,427,413,441,474,411],
[442,461,0,450,458,453,464,455,446],
[462,455,440,0,419,404,443,464,432],
[474,463,432,471,0,442,463,439,455],
[454,477,437,486,448,0,464,496,439],
[409,449,426,447,427,426,0,435,428],
[440,416,435,426,451,394,455,0,438],
[459,479,444,458,435,451,462,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,447,459,444,434,487,464,462],
[442,0,465,452,467,442,453,479,482],
[443,425,0,465,457,447,494,483,492],
[431,438,425,0,434,423,478,446,482],
[446,423,433,456,0,448,452,468,481],
[456,448,443,467,442,0,479,464,473],
[403,437,396,412,438,411,0,420,479],
[426,411,407,444,422,426,470,0,461],
[428,408,398,408,409,417,411,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,451,465,437,434,426,427,427],
[450,0,450,470,450,465,444,441,452],
[439,440,0,451,431,425,440,434,428],
[425,420,439,0,446,431,431,434,442],
[453,440,459,444,0,444,446,442,436],
[456,425,465,459,446,0,467,470,454],
[464,446,450,459,444,423,0,437,449],
[463,449,456,456,448,420,453,0,421],
[463,438,462,448,454,436,441,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,437,469,475,434,466,453,468],
[416,0,442,449,484,422,451,416,456],
[453,448,0,439,505,446,458,429,467],
[421,441,451,0,484,445,457,431,454],
[415,406,385,406,0,393,432,406,411],
[456,468,444,445,497,0,498,457,464],
[424,439,432,433,458,392,0,420,440],
[437,474,461,459,484,433,470,0,458],
[422,434,423,436,479,426,450,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,423,420,403,436,415,405,435],
[482,0,444,458,445,445,445,451,444],
[467,446,0,444,431,460,436,455,455],
[470,432,446,0,436,457,458,431,454],
[487,445,459,454,0,467,459,445,479],
[454,445,430,433,423,0,420,410,446],
[475,445,454,432,431,470,0,432,456],
[485,439,435,459,445,480,458,0,474],
[455,446,435,436,411,444,434,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,446,438,414,442,443,440],
[456,0,427,438,439,439,434,416,484],
[450,463,0,450,445,457,451,445,440],
[444,452,440,0,453,434,443,407,494],
[452,451,445,437,0,435,407,428,439],
[476,451,433,456,455,0,450,442,457],
[448,456,439,447,483,440,0,446,468],
[447,474,445,483,462,448,444,0,467],
[450,406,450,396,451,433,422,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,458,439,456,489,477,444,435],
[435,0,431,436,424,451,436,442,410],
[432,459,0,454,461,478,475,425,433],
[451,454,436,0,440,448,433,448,438],
[434,466,429,450,0,458,420,404,447],
[401,439,412,442,432,0,438,433,391],
[413,454,415,457,470,452,0,417,408],
[446,448,465,442,486,457,473,0,459],
[455,480,457,452,443,499,482,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,478,463,455,463,423,472,412],
[394,0,395,387,451,435,431,424,388],
[412,495,0,415,436,444,459,425,439],
[427,503,475,0,463,480,435,437,461],
[435,439,454,427,0,456,440,424,405],
[427,455,446,410,434,0,471,447,427],
[467,459,431,455,450,419,0,431,466],
[418,466,465,453,466,443,459,0,431],
[478,502,451,429,485,463,424,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,404,442,444,399,451,422,449],
[437,0,423,425,359,438,423,453,421],
[486,467,0,473,435,401,440,437,443],
[448,465,417,0,423,467,492,408,451],
[446,531,455,467,0,433,459,450,436],
[491,452,489,423,457,0,521,484,470],
[439,467,450,398,431,369,0,434,405],
[468,437,453,482,440,406,456,0,400],
[441,469,447,439,454,420,485,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,441,408,436,481,468,450,458],
[440,0,440,466,461,449,462,401,463],
[449,450,0,416,495,441,436,410,441],
[482,424,474,0,471,477,467,406,466],
[454,429,395,419,0,450,414,390,444],
[409,441,449,413,440,0,445,416,452],
[422,428,454,423,476,445,0,434,466],
[440,489,480,484,500,474,456,0,480],
[432,427,449,424,446,438,424,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,429,448,395,441,428,458,461],
[482,0,438,451,425,455,441,450,448],
[461,452,0,458,424,438,416,414,440],
[442,439,432,0,396,425,430,420,428],
[495,465,466,494,0,463,473,436,468],
[449,435,452,465,427,0,415,446,459],
[462,449,474,460,417,475,0,433,472],
[432,440,476,470,454,444,457,0,443],
[429,442,450,462,422,431,418,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,420,462,463,454,474,471,497],
[423,0,447,470,474,478,470,491,496],
[470,443,0,485,454,466,434,484,469],
[428,420,405,0,426,432,436,440,449],
[427,416,436,464,0,479,413,475,472],
[436,412,424,458,411,0,429,445,485],
[416,420,456,454,477,461,0,478,485],
[419,399,406,450,415,445,412,0,446],
[393,394,421,441,418,405,405,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,441,442,442,444,444,457,466],
[449,0,442,446,454,430,420,426,432],
[449,448,0,448,448,435,446,438,450],
[448,444,442,0,450,449,441,437,454],
[448,436,442,440,0,455,442,442,453],
[446,460,455,441,435,0,432,442,460],
[446,470,444,449,448,458,0,447,460],
[433,464,452,453,448,448,443,0,466],
[424,458,440,436,437,430,430,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,468,443,464,489,451,514,467],
[453,0,439,415,415,454,434,462,450],
[422,451,0,431,458,437,493,469,440],
[447,475,459,0,454,482,465,484,436],
[426,475,432,436,0,475,468,468,456],
[401,436,453,408,415,0,438,467,421],
[439,456,397,425,422,452,0,441,442],
[376,428,421,406,422,423,449,0,394],
[423,440,450,454,434,469,448,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,345,491,500,468,414,440,497],
[397,0,382,419,355,354,340,370,445],
[545,508,0,505,493,408,469,489,501],
[399,471,385,0,402,370,437,445,472],
[390,535,397,488,0,403,460,398,493],
[422,536,482,520,487,0,423,536,522],
[476,550,421,453,430,467,0,506,516],
[450,520,401,445,492,354,384,0,488],
[393,445,389,418,397,368,374,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,442,487,471,438,458,449,462],
[460,0,439,485,453,477,452,453,464],
[448,451,0,458,450,453,432,437,445],
[403,405,432,0,433,439,442,419,418],
[419,437,440,457,0,449,427,432,436],
[452,413,437,451,441,0,429,441,444],
[432,438,458,448,463,461,0,448,451],
[441,437,453,471,458,449,442,0,451],
[428,426,445,472,454,446,439,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,420,440,451,442,438,437,454],
[451,0,442,458,449,457,455,463,464],
[470,448,0,466,436,471,457,453,459],
[450,432,424,0,443,443,444,466,430],
[439,441,454,447,0,440,452,463,458],
[448,433,419,447,450,0,446,426,446],
[452,435,433,446,438,444,0,432,470],
[453,427,437,424,427,464,458,0,457],
[436,426,431,460,432,444,420,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,419,448,475,457,467,476,441],
[448,0,438,428,437,468,459,453,426],
[471,452,0,456,435,487,445,431,482],
[442,462,434,0,457,479,477,473,446],
[415,453,455,433,0,470,467,471,437],
[433,422,403,411,420,0,434,435,424],
[423,431,445,413,423,456,0,435,446],
[414,437,459,417,419,455,455,0,422],
[449,464,408,444,453,466,444,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,461,463,445,467,454,482,471],
[437,0,464,434,433,448,432,474,445],
[429,426,0,428,419,433,440,460,438],
[427,456,462,0,436,448,432,463,448],
[445,457,471,454,0,441,430,466,461],
[423,442,457,442,449,0,436,454,445],
[436,458,450,458,460,454,0,452,452],
[408,416,430,427,424,436,438,0,424],
[419,445,452,442,429,445,438,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,471,435,444,444,423,476,423],
[409,0,434,434,426,414,400,441,395],
[419,456,0,432,420,442,419,437,434],
[455,456,458,0,447,461,460,474,437],
[446,464,470,443,0,438,439,445,449],
[446,476,448,429,452,0,433,464,423],
[467,490,471,430,451,457,0,468,462],
[414,449,453,416,445,426,422,0,410],
[467,495,456,453,441,467,428,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,448,430,500,439,464,422,421],
[471,0,458,494,513,457,466,462,427],
[442,432,0,431,461,416,466,441,471],
[460,396,459,0,453,437,469,439,436],
[390,377,429,437,0,421,407,438,412],
[451,433,474,453,469,0,477,467,464],
[426,424,424,421,483,413,0,429,430],
[468,428,449,451,452,423,461,0,451],
[469,463,419,454,478,426,460,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,415,429,462,438,440,443,429],
[461,0,436,455,475,464,426,482,452],
[475,454,0,439,483,473,441,465,498],
[461,435,451,0,471,469,461,456,467],
[428,415,407,419,0,452,403,424,458],
[452,426,417,421,438,0,454,438,466],
[450,464,449,429,487,436,0,466,436],
[447,408,425,434,466,452,424,0,465],
[461,438,392,423,432,424,454,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,435,459,450,483,437,419,455],
[438,0,427,464,453,500,445,394,437],
[455,463,0,472,437,472,427,420,464],
[431,426,418,0,442,459,433,444,429],
[440,437,453,448,0,473,418,425,438],
[407,390,418,431,417,0,396,401,380],
[453,445,463,457,472,494,0,447,447],
[471,496,470,446,465,489,443,0,450],
[435,453,426,461,452,510,443,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,454,432,465,456,443,435,438],
[434,0,466,453,480,467,465,466,436],
[436,424,0,468,455,442,443,425,440],
[458,437,422,0,461,436,447,455,432],
[425,410,435,429,0,424,439,438,431],
[434,423,448,454,466,0,429,435,434],
[447,425,447,443,451,461,0,444,451],
[455,424,465,435,452,455,446,0,456],
[452,454,450,458,459,456,439,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,429,442,429,435,445,444,419],
[437,0,432,470,439,435,448,453,438],
[461,458,0,459,460,465,443,422,434],
[448,420,431,0,437,436,442,431,434],
[461,451,430,453,0,448,457,442,431],
[455,455,425,454,442,0,467,452,443],
[445,442,447,448,433,423,0,432,446],
[446,437,468,459,448,438,458,0,447],
[471,452,456,456,459,447,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,445,463,467,465,453,458,457],
[418,0,424,437,445,435,418,431,439],
[445,466,0,466,456,468,433,450,438],
[427,453,424,0,461,441,439,448,452],
[423,445,434,429,0,447,417,445,435],
[425,455,422,449,443,0,438,441,445],
[437,472,457,451,473,452,0,448,454],
[432,459,440,442,445,449,442,0,445],
[433,451,452,438,455,445,436,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,437,474,459,460,416,488,459],
[425,0,442,421,477,437,444,495,462],
[453,448,0,412,470,453,445,438,459],
[416,469,478,0,495,422,465,500,463],
[431,413,420,395,0,407,432,453,465],
[430,453,437,468,483,0,488,500,497],
[474,446,445,425,458,402,0,515,439],
[402,395,452,390,437,390,375,0,429],
[431,428,431,427,425,393,451,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,473,444,466,461,469,472,464],
[406,0,443,448,447,443,470,454,435],
[417,447,0,442,459,450,472,438,431],
[446,442,448,0,447,444,470,484,446],
[424,443,431,443,0,432,476,449,446],
[429,447,440,446,458,0,471,468,444],
[421,420,418,420,414,419,0,418,435],
[418,436,452,406,441,422,472,0,425],
[426,455,459,444,444,446,455,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,559,337,492,344,306,558,313,369],
[331,0,330,396,194,304,460,283,385],
[553,560,0,517,379,406,706,406,388],
[398,494,373,0,338,423,501,366,323],
[546,696,511,552,0,551,673,441,573],
[584,586,484,467,339,0,666,455,426],
[332,430,184,389,217,224,0,300,167],
[577,607,484,524,449,435,590,0,392],
[521,505,502,567,317,464,723,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,461,442,472,460,439,448,443],
[409,0,433,440,436,427,426,456,431],
[429,457,0,413,431,443,425,456,439],
[448,450,477,0,461,442,442,449,457],
[418,454,459,429,0,440,447,435,445],
[430,463,447,448,450,0,416,425,442],
[451,464,465,448,443,474,0,465,444],
[442,434,434,441,455,465,425,0,424],
[447,459,451,433,445,448,446,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,437,467,507,412,420,427,462],
[462,0,456,461,495,475,400,418,479],
[453,434,0,457,489,437,452,430,466],
[423,429,433,0,488,464,399,418,433],
[383,395,401,402,0,449,388,409,415],
[478,415,453,426,441,0,409,431,457],
[470,490,438,491,502,481,0,486,487],
[463,472,460,472,481,459,404,0,457],
[428,411,424,457,475,433,403,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,460,477,423,437,429,405,446],
[469,0,443,484,453,442,463,453,440],
[430,447,0,448,396,433,407,395,419],
[413,406,442,0,388,434,431,410,386],
[467,437,494,502,0,464,463,446,444],
[453,448,457,456,426,0,450,414,417],
[461,427,483,459,427,440,0,416,395],
[485,437,495,480,444,476,474,0,427],
[444,450,471,504,446,473,495,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,400,449,406,491,445,474,399],
[473,0,444,488,414,493,445,491,426],
[490,446,0,541,432,487,445,478,453],
[441,402,349,0,393,433,373,433,390],
[484,476,458,497,0,476,445,504,434],
[399,397,403,457,414,0,387,419,391],
[445,445,445,517,445,503,0,487,448],
[416,399,412,457,386,471,403,0,400],
[491,464,437,500,456,499,442,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,392,396,388,374,373,366,452],
[469,0,392,470,372,434,470,385,583],
[498,498,0,484,497,483,558,400,445],
[494,420,406,0,304,473,457,352,478],
[502,518,393,586,0,466,642,461,567],
[516,456,407,417,424,0,498,442,438],
[517,420,332,433,248,392,0,360,468],
[524,505,490,538,429,448,530,0,536],
[438,307,445,412,323,452,422,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,445,439,442,458,403,419],
[448,0,442,458,455,451,468,440,434],
[445,448,0,446,429,437,474,414,433],
[445,432,444,0,447,425,427,389,414],
[451,435,461,443,0,438,461,405,431],
[448,439,453,465,452,0,479,446,460],
[432,422,416,463,429,411,0,415,421],
[487,450,476,501,485,444,475,0,447],
[471,456,457,476,459,430,469,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,467,418,460,438,491,438,422],
[472,0,437,441,439,443,466,447,428],
[423,453,0,429,461,434,481,441,408],
[472,449,461,0,451,491,514,472,427],
[430,451,429,439,0,452,437,456,419],
[452,447,456,399,438,0,477,421,448],
[399,424,409,376,453,413,0,448,408],
[452,443,449,418,434,469,442,0,427],
[468,462,482,463,471,442,482,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,425,422,417,442,441,396,425],
[458,0,465,451,430,462,453,423,441],
[465,425,0,431,407,451,423,427,411],
[468,439,459,0,401,451,428,425,399],
[473,460,483,489,0,463,454,435,444],
[448,428,439,439,427,0,433,393,410],
[449,437,467,462,436,457,0,455,447],
[494,467,463,465,455,497,435,0,439],
[465,449,479,491,446,480,443,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,462,471,458,416,435,416,425],
[444,0,482,461,472,432,451,418,437],
[428,408,0,444,453,435,454,453,429],
[419,429,446,0,451,424,472,414,427],
[432,418,437,439,0,397,452,422,454],
[474,458,455,466,493,0,462,439,458],
[455,439,436,418,438,428,0,433,437],
[474,472,437,476,468,451,457,0,471],
[465,453,461,463,436,432,453,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,570,498,373,554,446,365,461,287],
[320,0,476,340,388,336,327,375,220],
[392,414,0,407,416,333,366,395,393],
[517,550,483,0,538,252,515,416,436],
[336,502,474,352,0,212,370,328,348],
[444,554,557,638,678,0,546,483,458],
[525,563,524,375,520,344,0,416,458],
[429,515,495,474,562,407,474,0,407],
[603,670,497,454,542,432,432,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,485,462,414,433,480,444,443],
[405,0,478,480,429,406,497,445,429],
[405,412,0,416,423,386,444,447,392],
[428,410,474,0,470,388,449,423,427],
[476,461,467,420,0,444,494,434,408],
[457,484,504,502,446,0,506,436,446],
[410,393,446,441,396,384,0,392,377],
[446,445,443,467,456,454,498,0,434],
[447,461,498,463,482,444,513,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,478,470,402,319,338,491,381],
[426,0,378,482,436,369,337,522,356],
[412,512,0,511,468,442,429,518,351],
[420,408,379,0,408,369,333,452,428],
[488,454,422,482,0,408,471,474,331],
[571,521,448,521,482,0,405,510,413],
[552,553,461,557,419,485,0,515,477],
[399,368,372,438,416,380,375,0,345],
[509,534,539,462,559,477,413,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,416,360,376,470,492,487,451],
[387,0,336,386,402,383,432,509,411],
[474,554,0,511,470,476,554,607,432],
[530,504,379,0,429,405,466,489,416],
[514,488,420,461,0,440,532,529,501],
[420,507,414,485,450,0,488,505,385],
[398,458,336,424,358,402,0,428,407],
[403,381,283,401,361,385,462,0,344],
[439,479,458,474,389,505,483,546,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,447,468,467,447,463,458,445],
[459,0,449,441,458,430,444,438,422],
[443,441,0,448,453,436,442,425,436],
[422,449,442,0,448,430,448,450,453],
[423,432,437,442,0,421,437,437,414],
[443,460,454,460,469,0,463,451,444],
[427,446,448,442,453,427,0,462,431],
[432,452,465,440,453,439,428,0,411],
[445,468,454,437,476,446,459,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,411,441,442,430,422,434,437],
[468,0,453,431,436,431,428,433,447],
[479,437,0,457,436,449,439,452,453],
[449,459,433,0,442,411,423,468,455],
[448,454,454,448,0,444,414,450,452],
[460,459,441,479,446,0,431,460,440],
[468,462,451,467,476,459,0,444,451],
[456,457,438,422,440,430,446,0,433],
[453,443,437,435,438,450,439,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,371,382,567,457,324,404,270],
[517,0,371,624,603,553,405,505,513],
[519,519,0,457,423,572,540,600,511],
[508,266,433,0,571,516,338,521,274],
[323,287,467,319,0,390,373,606,411],
[433,337,318,374,500,0,272,458,404],
[566,485,350,552,517,618,0,602,553],
[486,385,290,369,284,432,288,0,324],
[620,377,379,616,479,486,337,566,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,436,432,430,437,410,416,438],
[470,0,467,435,469,478,450,455,451],
[454,423,0,445,439,453,450,434,452],
[458,455,445,0,458,466,443,438,457],
[460,421,451,432,0,453,446,428,454],
[453,412,437,424,437,0,419,420,446],
[480,440,440,447,444,471,0,440,447],
[474,435,456,452,462,470,450,0,463],
[452,439,438,433,436,444,443,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,468,478,467,489,459,448,451],
[447,0,452,443,463,455,454,450,444],
[422,438,0,437,426,457,442,456,425],
[412,447,453,0,435,483,423,471,397],
[423,427,464,455,0,436,436,439,420],
[401,435,433,407,454,0,449,447,424],
[431,436,448,467,454,441,0,426,432],
[442,440,434,419,451,443,464,0,448],
[439,446,465,493,470,466,458,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,435,425,422,463,399,442,430],
[454,0,453,483,465,442,460,434,466],
[455,437,0,461,498,523,468,445,465],
[465,407,429,0,450,485,463,449,435],
[468,425,392,440,0,485,433,437,436],
[427,448,367,405,405,0,419,395,403],
[491,430,422,427,457,471,0,453,434],
[448,456,445,441,453,495,437,0,469],
[460,424,425,455,454,487,456,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,432,428,425,420,451,446,476],
[455,0,445,399,405,404,418,436,433],
[458,445,0,470,439,435,453,422,474],
[462,491,420,0,491,458,442,442,468],
[465,485,451,399,0,425,447,468,479],
[470,486,455,432,465,0,465,446,445],
[439,472,437,448,443,425,0,417,448],
[444,454,468,448,422,444,473,0,464],
[414,457,416,422,411,445,442,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,450,459,433,444,454,431,441],
[440,0,440,435,443,455,424,437,420],
[440,450,0,446,432,437,424,431,412],
[431,455,444,0,467,444,451,433,432],
[457,447,458,423,0,444,447,407,428],
[446,435,453,446,446,0,439,441,443],
[436,466,466,439,443,451,0,441,443],
[459,453,459,457,483,449,449,0,445],
[449,470,478,458,462,447,447,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,466,464,427,421,440,430,452],
[450,0,457,441,447,435,459,453,391],
[424,433,0,475,441,417,431,429,379],
[426,449,415,0,464,420,420,421,407],
[463,443,449,426,0,419,452,431,393],
[469,455,473,470,471,0,448,436,438],
[450,431,459,470,438,442,0,440,402],
[460,437,461,469,459,454,450,0,413],
[438,499,511,483,497,452,488,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,499,445,454,511,608,445,453],
[386,0,364,364,492,443,385,489,343],
[391,526,0,583,580,586,470,473,459],
[445,526,307,0,537,511,476,471,423],
[436,398,310,353,0,539,396,384,307],
[379,447,304,379,351,0,398,395,346],
[282,505,420,414,494,492,0,397,351],
[445,401,417,419,506,495,493,0,360],
[437,547,431,467,583,544,539,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,431,434,435,443,436,436,452],
[455,0,442,421,459,447,438,416,440],
[459,448,0,441,452,445,438,445,467],
[456,469,449,0,461,460,454,426,454],
[455,431,438,429,0,447,439,433,453],
[447,443,445,430,443,0,441,418,454],
[454,452,452,436,451,449,0,437,439],
[454,474,445,464,457,472,453,0,459],
[438,450,423,436,437,436,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,463,450,498,446,410,403,485],
[401,0,425,464,397,459,451,424,491],
[427,465,0,478,446,472,489,464,492],
[440,426,412,0,420,486,444,462,496],
[392,493,444,470,0,446,486,449,468],
[444,431,418,404,444,0,465,427,477],
[480,439,401,446,404,425,0,423,478],
[487,466,426,428,441,463,467,0,519],
[405,399,398,394,422,413,412,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,429,452,465,479,454,451,439],
[430,0,456,416,461,469,451,421,433],
[461,434,0,425,470,471,471,426,454],
[438,474,465,0,485,478,445,443,460],
[425,429,420,405,0,433,427,417,433],
[411,421,419,412,457,0,443,415,435],
[436,439,419,445,463,447,0,428,434],
[439,469,464,447,473,475,462,0,454],
[451,457,436,430,457,455,456,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,419,411,389,427,413,413,430],
[489,0,458,420,413,461,447,439,456],
[471,432,0,452,424,414,437,427,434],
[479,470,438,0,431,486,426,440,454],
[501,477,466,459,0,458,472,430,453],
[463,429,476,404,432,0,450,425,472],
[477,443,453,464,418,440,0,453,436],
[477,451,463,450,460,465,437,0,478],
[460,434,456,436,437,418,454,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,449,460,458,475,473,468],
[448,0,450,434,439,428,452,453,480],
[442,440,0,440,447,449,454,435,445],
[441,456,450,0,426,446,468,451,451],
[430,451,443,464,0,456,457,446,451],
[432,462,441,444,434,0,443,452,447],
[415,438,436,422,433,447,0,454,460],
[417,437,455,439,444,438,436,0,449],
[422,410,445,439,439,443,430,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,424,426,443,428,481,399,476],
[477,0,451,429,466,421,492,500,494],
[466,439,0,477,466,409,459,462,552],
[464,461,413,0,493,461,485,455,530],
[447,424,424,397,0,385,452,461,496],
[462,469,481,429,505,0,514,443,515],
[409,398,431,405,438,376,0,369,451],
[491,390,428,435,429,447,521,0,479],
[414,396,338,360,394,375,439,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,434,459,439,426,396,437,472],
[467,0,455,500,462,462,445,449,486],
[456,435,0,465,476,461,440,435,502],
[431,390,425,0,436,446,396,427,444],
[451,428,414,454,0,427,431,453,499],
[464,428,429,444,463,0,463,447,477],
[494,445,450,494,459,427,0,435,501],
[453,441,455,463,437,443,455,0,476],
[418,404,388,446,391,413,389,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,452,435,459,456,432,414,463],
[436,0,441,429,446,450,448,450,467],
[438,449,0,434,457,444,430,453,428],
[455,461,456,0,460,435,432,418,438],
[431,444,433,430,0,440,410,413,387],
[434,440,446,455,450,0,429,399,428],
[458,442,460,458,480,461,0,475,436],
[476,440,437,472,477,491,415,0,446],
[427,423,462,452,503,462,454,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,431,447,413,422,434,425,441],
[456,0,432,446,427,431,438,439,445],
[459,458,0,470,462,441,448,443,456],
[443,444,420,0,433,434,443,435,443],
[477,463,428,457,0,437,455,463,471],
[468,459,449,456,453,0,441,447,468],
[456,452,442,447,435,449,0,416,440],
[465,451,447,455,427,443,474,0,455],
[449,445,434,447,419,422,450,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,598,496,564,602,548,487,435,483],
[292,0,446,376,460,507,313,382,318],
[394,444,0,452,459,501,420,488,495],
[326,514,438,0,471,456,327,416,448],
[288,430,431,419,0,428,379,314,381],
[342,383,389,434,462,0,405,429,407],
[403,577,470,563,511,485,0,479,484],
[455,508,402,474,576,461,411,0,479],
[407,572,395,442,509,483,406,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,451,445,447,427,409,413,433],
[428,0,441,433,446,447,436,434,443],
[439,449,0,442,445,433,433,439,431],
[445,457,448,0,459,445,429,436,438],
[443,444,445,431,0,452,419,430,448],
[463,443,457,445,438,0,443,429,460],
[481,454,457,461,471,447,0,435,458],
[477,456,451,454,460,461,455,0,444],
[457,447,459,452,442,430,432,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,451,451,420,461,449,452,451],
[443,0,422,424,403,433,444,423,434],
[439,468,0,428,420,447,442,414,445],
[439,466,462,0,447,441,443,446,473],
[470,487,470,443,0,469,467,435,479],
[429,457,443,449,421,0,447,434,464],
[441,446,448,447,423,443,0,424,463],
[438,467,476,444,455,456,466,0,460],
[439,456,445,417,411,426,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,464,446,430,430,442,481,432],
[439,0,444,460,438,445,441,446,437],
[426,446,0,427,442,458,453,464,426],
[444,430,463,0,428,431,422,465,454],
[460,452,448,462,0,442,453,474,463],
[460,445,432,459,448,0,460,464,452],
[448,449,437,468,437,430,0,472,414],
[409,444,426,425,416,426,418,0,405],
[458,453,464,436,427,438,476,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,436,431,407,446,477,406,414],
[560,0,509,476,464,494,442,461,505],
[454,381,0,454,407,507,485,447,436],
[459,414,436,0,418,492,496,461,404],
[483,426,483,472,0,443,452,493,409],
[444,396,383,398,447,0,442,408,409],
[413,448,405,394,438,448,0,430,418],
[484,429,443,429,397,482,460,0,446],
[476,385,454,486,481,481,472,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,455,381,400,431,409,374,437],
[474,0,470,370,416,468,435,358,456],
[435,420,0,353,396,438,427,364,369],
[509,520,537,0,476,517,484,456,437],
[490,474,494,414,0,459,443,400,412],
[459,422,452,373,431,0,434,379,414],
[481,455,463,406,447,456,0,377,429],
[516,532,526,434,490,511,513,0,507],
[453,434,521,453,478,476,461,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,433,397,424,401,407,410,412],
[503,0,424,514,501,482,438,486,513],
[457,466,0,476,440,389,451,482,470],
[493,376,414,0,386,394,409,453,472],
[466,389,450,504,0,479,503,501,451],
[489,408,501,496,411,0,469,500,481],
[483,452,439,481,387,421,0,489,421],
[480,404,408,437,389,390,401,0,441],
[478,377,420,418,439,409,469,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,428,449,444,472,442,438,447],
[433,0,466,461,437,464,416,418,453],
[462,424,0,457,451,494,451,452,458],
[441,429,433,0,452,462,426,426,446],
[446,453,439,438,0,501,434,417,470],
[418,426,396,428,389,0,407,404,432],
[448,474,439,464,456,483,0,431,478],
[452,472,438,464,473,486,459,0,478],
[443,437,432,444,420,458,412,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,435,448,437,435,433,435,420],
[466,0,453,429,456,450,465,463,453],
[455,437,0,441,436,438,425,458,455],
[442,461,449,0,448,475,443,455,461],
[453,434,454,442,0,451,453,439,446],
[455,440,452,415,439,0,448,439,466],
[457,425,465,447,437,442,0,436,470],
[455,427,432,435,451,451,454,0,445],
[470,437,435,429,444,424,420,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,444,418,439,435,424,407,433],
[450,0,453,442,454,423,449,460,429],
[446,437,0,443,449,423,433,421,431],
[472,448,447,0,465,412,452,446,464],
[451,436,441,425,0,425,446,424,421],
[455,467,467,478,465,0,468,453,426],
[466,441,457,438,444,422,0,457,455],
[483,430,469,444,466,437,433,0,420],
[457,461,459,426,469,464,435,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,433,457,455,458,471,454,442],
[439,0,433,437,446,442,431,427,454],
[457,457,0,446,451,447,440,445,436],
[433,453,444,0,461,467,446,445,452],
[435,444,439,429,0,449,443,435,441],
[432,448,443,423,441,0,437,437,436],
[419,459,450,444,447,453,0,453,453],
[436,463,445,445,455,453,437,0,447],
[448,436,454,438,449,454,437,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,451,445,476,414,411,449,470],
[436,0,454,449,481,444,464,491,428],
[439,436,0,419,510,454,446,486,465],
[445,441,471,0,492,466,454,445,463],
[414,409,380,398,0,442,408,438,432],
[476,446,436,424,448,0,481,477,475],
[479,426,444,436,482,409,0,465,451],
[441,399,404,445,452,413,425,0,437],
[420,462,425,427,458,415,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,399,446,414,442,458,427,444],
[474,0,449,445,423,466,471,446,448],
[491,441,0,472,455,473,477,472,454],
[444,445,418,0,436,429,451,414,426],
[476,467,435,454,0,476,482,438,437],
[448,424,417,461,414,0,464,447,431],
[432,419,413,439,408,426,0,438,407],
[463,444,418,476,452,443,452,0,454],
[446,442,436,464,453,459,483,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,426,443,446,424,443,441,421],
[442,0,437,458,440,442,434,454,444],
[464,453,0,433,462,432,449,436,421],
[447,432,457,0,439,436,439,452,436],
[444,450,428,451,0,456,432,441,453],
[466,448,458,454,434,0,441,459,434],
[447,456,441,451,458,449,0,455,459],
[449,436,454,438,449,431,435,0,446],
[469,446,469,454,437,456,431,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,433,417,454,405,442,425,427],
[478,0,442,452,440,434,456,483,482],
[457,448,0,404,422,426,461,444,414],
[473,438,486,0,486,480,494,488,490],
[436,450,468,404,0,456,443,433,446],
[485,456,464,410,434,0,483,443,450],
[448,434,429,396,447,407,0,416,415],
[465,407,446,402,457,447,474,0,432],
[463,408,476,400,444,440,475,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,429,428,421,437,441,441,425],
[472,0,473,460,475,440,451,502,487],
[461,417,0,434,448,452,467,464,447],
[462,430,456,0,461,449,453,462,443],
[469,415,442,429,0,419,421,473,422],
[453,450,438,441,471,0,452,495,440],
[449,439,423,437,469,438,0,462,416],
[449,388,426,428,417,395,428,0,448],
[465,403,443,447,468,450,474,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,440,463,455,468,439,450,451],
[435,0,418,421,423,442,416,424,431],
[450,472,0,441,434,461,463,470,441],
[427,469,449,0,436,452,431,439,458],
[435,467,456,454,0,453,431,462,458],
[422,448,429,438,437,0,428,441,444],
[451,474,427,459,459,462,0,467,451],
[440,466,420,451,428,449,423,0,446],
[439,459,449,432,432,446,439,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,464,446,475,465,428,461,516],
[427,0,474,452,434,427,436,444,500],
[426,416,0,416,413,363,400,446,446],
[444,438,474,0,435,474,445,504,535],
[415,456,477,455,0,417,437,466,494],
[425,463,527,416,473,0,459,487,515],
[462,454,490,445,453,431,0,450,474],
[429,446,444,386,424,403,440,0,418],
[374,390,444,355,396,375,416,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,423,424,420,419,430,429,411],
[438,0,432,416,424,405,449,426,424],
[467,458,0,451,452,444,452,433,448],
[466,474,439,0,455,449,455,441,448],
[470,466,438,435,0,428,461,435,424],
[471,485,446,441,462,0,472,458,452],
[460,441,438,435,429,418,0,458,436],
[461,464,457,449,455,432,432,0,437],
[479,466,442,442,466,438,454,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,430,452,443,446,449,452,447],
[428,0,439,439,438,433,432,437,452],
[460,451,0,437,447,468,434,446,464],
[438,451,453,0,433,449,439,437,458],
[447,452,443,457,0,446,458,428,457],
[444,457,422,441,444,0,433,452,445],
[441,458,456,451,432,457,0,450,462],
[438,453,444,453,462,438,440,0,469],
[443,438,426,432,433,445,428,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,434,412,442,373,365,372,393],
[477,0,443,406,333,428,407,433,388],
[456,447,0,456,381,428,424,387,409],
[478,484,434,0,489,355,519,456,442],
[448,557,509,401,0,438,364,440,394],
[517,462,462,535,452,0,471,463,432],
[525,483,466,371,526,419,0,453,452],
[518,457,503,434,450,427,437,0,412],
[497,502,481,448,496,458,438,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,432,423,415,419,433,470,447],
[448,0,450,420,424,449,435,454,456],
[458,440,0,447,443,451,435,479,435],
[467,470,443,0,417,458,434,453,430],
[475,466,447,473,0,452,445,495,477],
[471,441,439,432,438,0,436,467,444],
[457,455,455,456,445,454,0,505,464],
[420,436,411,437,395,423,385,0,421],
[443,434,455,460,413,446,426,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,444,464,458,454,465,439,456],
[432,0,425,455,450,433,450,438,428],
[446,465,0,442,452,450,468,451,447],
[426,435,448,0,450,455,447,423,435],
[432,440,438,440,0,446,448,444,422],
[436,457,440,435,444,0,472,429,444],
[425,440,422,443,442,418,0,446,430],
[451,452,439,467,446,461,444,0,447],
[434,462,443,455,468,446,460,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,417,454,459,466,483,468,490],
[420,0,382,450,423,440,462,422,453],
[473,508,0,476,442,483,500,466,495],
[436,440,414,0,439,468,484,451,469],
[431,467,448,451,0,450,496,444,479],
[424,450,407,422,440,0,488,437,461],
[407,428,390,406,394,402,0,396,432],
[422,468,424,439,446,453,494,0,483],
[400,437,395,421,411,429,458,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,414,467,428,453,449,434,443],
[443,0,420,431,447,459,471,425,430],
[476,470,0,477,449,491,472,442,446],
[423,459,413,0,460,440,448,396,435],
[462,443,441,430,0,453,469,460,451],
[437,431,399,450,437,0,456,466,398],
[441,419,418,442,421,434,0,429,398],
[456,465,448,494,430,424,461,0,446],
[447,460,444,455,439,492,492,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,455,452,437,438,415,420,441],
[440,0,429,445,424,450,433,439,443],
[435,461,0,442,431,458,431,431,448],
[438,445,448,0,441,449,434,423,441],
[453,466,459,449,0,470,451,468,443],
[452,440,432,441,420,0,435,439,432],
[475,457,459,456,439,455,0,464,447],
[470,451,459,467,422,451,426,0,433],
[449,447,442,449,447,458,443,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,439,462,462,463,474,493,446],
[410,0,409,431,418,389,403,440,431],
[451,481,0,461,452,470,445,516,447],
[428,459,429,0,457,451,424,471,436],
[428,472,438,433,0,426,453,471,444],
[427,501,420,439,464,0,436,477,446],
[416,487,445,466,437,454,0,489,460],
[397,450,374,419,419,413,401,0,402],
[444,459,443,454,446,444,430,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,416,455,451,439,445,437,450],
[441,0,445,460,440,425,436,472,488],
[474,445,0,457,423,440,415,455,468],
[435,430,433,0,416,457,394,403,443],
[439,450,467,474,0,436,420,467,480],
[451,465,450,433,454,0,425,459,440],
[445,454,475,496,470,465,0,483,448],
[453,418,435,487,423,431,407,0,448],
[440,402,422,447,410,450,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,453,519,428,556,484,496,472],
[357,0,452,393,408,437,470,445,402],
[437,438,0,504,426,475,512,493,495],
[371,497,386,0,433,455,462,466,444],
[462,482,464,457,0,449,459,426,471],
[334,453,415,435,441,0,436,405,421],
[406,420,378,428,431,454,0,457,389],
[394,445,397,424,464,485,433,0,477],
[418,488,395,446,419,469,501,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,447,448,455,440,457,444],
[449,0,429,460,423,468,449,435,463],
[444,461,0,463,465,466,439,448,458],
[443,430,427,0,445,445,449,438,442],
[442,467,425,445,0,481,437,439,458],
[435,422,424,445,409,0,423,438,433],
[450,441,451,441,453,467,0,446,454],
[433,455,442,452,451,452,444,0,453],
[446,427,432,448,432,457,436,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,456,429,513,452,437,402,469],
[450,0,447,478,500,426,460,499,460],
[434,443,0,441,457,400,420,424,419],
[461,412,449,0,466,437,460,424,460],
[377,390,433,424,0,398,432,426,459],
[438,464,490,453,492,0,456,453,482],
[453,430,470,430,458,434,0,428,478],
[488,391,466,466,464,437,462,0,466],
[421,430,471,430,431,408,412,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,484,400,365,389,443,451,379],
[447,0,453,394,412,417,419,435,396],
[406,437,0,424,356,374,369,488,372],
[490,496,466,0,447,382,463,480,448],
[525,478,534,443,0,411,422,501,396],
[501,473,516,508,479,0,443,505,448],
[447,471,521,427,468,447,0,590,505],
[439,455,402,410,389,385,300,0,358],
[511,494,518,442,494,442,385,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,422,446,456,427,433,423,428],
[456,0,425,446,451,438,431,427,449],
[468,465,0,457,458,454,460,444,461],
[444,444,433,0,440,421,426,444,444],
[434,439,432,450,0,444,410,424,441],
[463,452,436,469,446,0,445,434,444],
[457,459,430,464,480,445,0,462,463],
[467,463,446,446,466,456,428,0,450],
[462,441,429,446,449,446,427,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,450,455,452,432,450,449,450],
[408,0,439,428,432,455,432,419,433],
[440,451,0,428,432,418,426,410,427],
[435,462,462,0,440,426,442,446,448],
[438,458,458,450,0,440,432,435,471],
[458,435,472,464,450,0,418,429,459],
[440,458,464,448,458,472,0,459,464],
[441,471,480,444,455,461,431,0,448],
[440,457,463,442,419,431,426,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,410,418,377,477,432,340,415],
[483,0,398,483,464,462,504,370,435],
[480,492,0,501,503,525,469,450,438],
[472,407,389,0,411,460,432,368,437],
[513,426,387,479,0,490,465,337,434],
[413,428,365,430,400,0,410,311,372],
[458,386,421,458,425,480,0,383,393],
[550,520,440,522,553,579,507,0,485],
[475,455,452,453,456,518,497,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,430,409,379,399,449,407,447],
[491,0,443,433,451,431,447,416,484],
[460,447,0,448,443,428,431,423,460],
[481,457,442,0,444,452,481,421,459],
[511,439,447,446,0,460,429,464,457],
[491,459,462,438,430,0,468,439,478],
[441,443,459,409,461,422,0,408,474],
[483,474,467,469,426,451,482,0,467],
[443,406,430,431,433,412,416,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,474,449,485,452,444,487,422],
[477,0,461,431,477,505,484,499,460],
[416,429,0,448,477,449,445,509,436],
[441,459,442,0,467,445,457,470,468],
[405,413,413,423,0,430,450,445,402],
[438,385,441,445,460,0,462,475,358],
[446,406,445,433,440,428,0,484,434],
[403,391,381,420,445,415,406,0,401],
[468,430,454,422,488,532,456,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,370,404,322,394,326,442,374],
[467,0,378,442,489,488,421,487,456],
[520,512,0,480,389,478,461,443,436],
[486,448,410,0,429,494,568,347,403],
[568,401,501,461,0,472,499,490,512],
[496,402,412,396,418,0,433,557,404],
[564,469,429,322,391,457,0,484,369],
[448,403,447,543,400,333,406,0,451],
[516,434,454,487,378,486,521,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,424,440,455,418,422,465,414],
[424,0,384,387,420,420,406,426,379],
[466,506,0,480,480,441,455,488,453],
[450,503,410,0,477,433,439,452,409],
[435,470,410,413,0,418,421,453,413],
[472,470,449,457,472,0,411,480,439],
[468,484,435,451,469,479,0,439,397],
[425,464,402,438,437,410,451,0,405],
[476,511,437,481,477,451,493,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,433,472,461,426,459,409,429],
[454,0,473,479,512,468,434,465,420],
[457,417,0,481,468,439,429,435,421],
[418,411,409,0,476,430,443,397,400],
[429,378,422,414,0,408,399,365,370],
[464,422,451,460,482,0,461,467,418],
[431,456,461,447,491,429,0,416,416],
[481,425,455,493,525,423,474,0,448],
[461,470,469,490,520,472,474,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,434,435,446,445,458,459,426],
[458,0,440,457,460,451,432,482,451],
[456,450,0,470,428,450,446,458,449],
[455,433,420,0,451,456,443,467,458],
[444,430,462,439,0,451,417,478,455],
[445,439,440,434,439,0,416,461,427],
[432,458,444,447,473,474,0,471,447],
[431,408,432,423,412,429,419,0,441],
[464,439,441,432,435,463,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,414,404,448,446,423,451,457],
[445,0,431,398,435,440,411,435,443],
[476,459,0,440,453,459,459,461,454],
[486,492,450,0,454,462,471,443,472],
[442,455,437,436,0,445,439,449,445],
[444,450,431,428,445,0,445,419,451],
[467,479,431,419,451,445,0,472,464],
[439,455,429,447,441,471,418,0,453],
[433,447,436,418,445,439,426,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,442,424,451,439,443,433,427],
[452,0,445,434,464,448,450,454,439],
[448,445,0,442,447,443,427,437,444],
[466,456,448,0,447,456,427,448,435],
[439,426,443,443,0,475,446,444,436],
[451,442,447,434,415,0,433,427,428],
[447,440,463,463,444,457,0,469,423],
[457,436,453,442,446,463,421,0,445],
[463,451,446,455,454,462,467,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,476,424,454,458,425,459,444],
[431,0,449,448,415,460,409,425,439],
[414,441,0,410,413,411,360,442,424],
[466,442,480,0,411,461,414,473,408],
[436,475,477,479,0,485,443,473,433],
[432,430,479,429,405,0,427,464,457],
[465,481,530,476,447,463,0,505,441],
[431,465,448,417,417,426,385,0,423],
[446,451,466,482,457,433,449,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,456,484,453,467,449,456,445],
[399,0,369,379,367,410,423,408,396],
[434,521,0,470,413,425,466,428,470],
[406,511,420,0,450,434,343,430,421],
[437,523,477,440,0,443,462,494,417],
[423,480,465,456,447,0,448,489,468],
[441,467,424,547,428,442,0,490,477],
[434,482,462,460,396,401,400,0,457],
[445,494,420,469,473,422,413,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,452,425,449,429,421,506,430],
[404,0,427,419,453,418,418,440,443],
[438,463,0,473,474,448,422,496,447],
[465,471,417,0,431,405,435,450,436],
[441,437,416,459,0,422,409,457,408],
[461,472,442,485,468,0,434,486,488],
[469,472,468,455,481,456,0,446,444],
[384,450,394,440,433,404,444,0,423],
[460,447,443,454,482,402,446,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,446,424,410,432,417,450,425],
[424,0,462,415,423,440,432,440,429],
[444,428,0,422,436,438,441,450,432],
[466,475,468,0,453,456,413,476,448],
[480,467,454,437,0,472,452,448,429],
[458,450,452,434,418,0,446,466,440],
[473,458,449,477,438,444,0,464,436],
[440,450,440,414,442,424,426,0,439],
[465,461,458,442,461,450,454,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,464,490,473,452,448,459,445],
[470,0,433,455,431,443,446,456,411],
[426,457,0,471,443,472,455,440,426],
[400,435,419,0,384,428,422,404,419],
[417,459,447,506,0,440,458,447,441],
[438,447,418,462,450,0,414,446,407],
[442,444,435,468,432,476,0,426,404],
[431,434,450,486,443,444,464,0,441],
[445,479,464,471,449,483,486,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,463,435,407,423,440,452,424],
[416,0,453,392,420,417,440,420,425],
[427,437,0,415,429,409,409,424,413],
[455,498,475,0,467,446,458,493,432],
[483,470,461,423,0,429,462,414,414],
[467,473,481,444,461,0,443,452,410],
[450,450,481,432,428,447,0,420,419],
[438,470,466,397,476,438,470,0,456],
[466,465,477,458,476,480,471,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,440,426,454,404,462,414,413],
[453,0,451,441,456,415,433,420,443],
[450,439,0,441,489,435,452,436,450],
[464,449,449,0,497,446,457,420,433],
[436,434,401,393,0,388,403,386,391],
[486,475,455,444,502,0,450,446,446],
[428,457,438,433,487,440,0,428,425],
[476,470,454,470,504,444,462,0,433],
[477,447,440,457,499,444,465,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,490,505,482,433,487,456,445],
[367,0,450,391,360,355,392,385,363],
[400,440,0,473,401,402,415,374,360],
[385,499,417,0,422,395,406,403,440],
[408,530,489,468,0,439,484,482,437],
[457,535,488,495,451,0,512,442,394],
[403,498,475,484,406,378,0,437,414],
[434,505,516,487,408,448,453,0,401],
[445,527,530,450,453,496,476,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,412,380,399,326,466,441,472],
[525,0,585,596,525,429,585,520,510],
[478,305,0,491,396,465,466,388,525],
[510,294,399,0,519,515,455,419,459],
[491,365,494,371,0,504,474,513,555],
[564,461,425,375,386,0,475,474,515],
[424,305,424,435,416,415,0,479,382],
[449,370,502,471,377,416,411,0,524],
[418,380,365,431,335,375,508,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,470,447,456,477,458,474,439],
[424,0,458,450,445,465,464,461,439],
[420,432,0,431,455,441,434,457,422],
[443,440,459,0,464,460,458,463,443],
[434,445,435,426,0,427,455,470,419],
[413,425,449,430,463,0,446,454,431],
[432,426,456,432,435,444,0,451,445],
[416,429,433,427,420,436,439,0,440],
[451,451,468,447,471,459,445,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,451,474,457,445,454,462,464],
[428,0,438,449,444,436,432,459,468],
[439,452,0,479,436,437,461,463,452],
[416,441,411,0,424,440,419,440,432],
[433,446,454,466,0,464,442,454,449],
[445,454,453,450,426,0,454,446,457],
[436,458,429,471,448,436,0,431,455],
[428,431,427,450,436,444,459,0,434],
[426,422,438,458,441,433,435,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,436,459,435,428,426,435,453],
[452,0,443,465,436,447,440,434,460],
[454,447,0,466,422,447,428,443,453],
[431,425,424,0,420,436,418,420,449],
[455,454,468,470,0,444,445,457,464],
[462,443,443,454,446,0,442,435,457],
[464,450,462,472,445,448,0,466,458],
[455,456,447,470,433,455,424,0,450],
[437,430,437,441,426,433,432,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,431,393,473,422,425,469,448],
[468,0,484,432,514,511,475,445,462],
[459,406,0,437,424,465,487,428,460],
[497,458,453,0,502,505,467,433,471],
[417,376,466,388,0,460,454,381,427],
[468,379,425,385,430,0,402,437,426],
[465,415,403,423,436,488,0,421,418],
[421,445,462,457,509,453,469,0,442],
[442,428,430,419,463,464,472,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,453,395,455,433,472,481,474],
[437,0,493,462,499,419,555,455,480],
[437,397,0,388,438,428,436,437,423],
[495,428,502,0,386,457,493,509,456],
[435,391,452,504,0,441,463,478,433],
[457,471,462,433,449,0,476,463,474],
[418,335,454,397,427,414,0,402,449],
[409,435,453,381,412,427,488,0,424],
[416,410,467,434,457,416,441,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,426,417,428,424,443,451,432],
[451,0,461,431,418,447,437,451,479],
[464,429,0,400,410,439,433,464,436],
[473,459,490,0,429,446,469,486,473],
[462,472,480,461,0,440,459,469,469],
[466,443,451,444,450,0,452,492,480],
[447,453,457,421,431,438,0,457,482],
[439,439,426,404,421,398,433,0,435],
[458,411,454,417,421,410,408,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,450,462,494,441,465,457,435],
[444,0,437,451,508,465,440,482,429],
[440,453,0,449,473,434,454,483,427],
[428,439,441,0,489,433,441,436,445],
[396,382,417,401,0,423,425,427,386],
[449,425,456,457,467,0,454,437,450],
[425,450,436,449,465,436,0,435,429],
[433,408,407,454,463,453,455,0,435],
[455,461,463,445,504,440,461,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,493,447,504,440,434,418,476],
[419,0,488,399,440,441,406,424,412],
[397,402,0,358,389,403,358,429,427],
[443,491,532,0,518,453,441,462,512],
[386,450,501,372,0,429,401,361,469],
[450,449,487,437,461,0,399,441,414],
[456,484,532,449,489,491,0,490,444],
[472,466,461,428,529,449,400,0,443],
[414,478,463,378,421,476,446,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,433,442,445,454,462,452,452],
[443,0,436,436,437,451,435,424,460],
[457,454,0,449,456,437,460,449,457],
[448,454,441,0,440,457,455,447,440],
[445,453,434,450,0,450,470,456,466],
[436,439,453,433,440,0,435,434,440],
[428,455,430,435,420,455,0,427,428],
[438,466,441,443,434,456,463,0,451],
[438,430,433,450,424,450,462,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,435,429,433,412,446,452,457],
[453,0,438,424,440,430,439,452,431],
[455,452,0,407,445,449,459,466,462],
[461,466,483,0,458,471,464,445,452],
[457,450,445,432,0,435,457,460,445],
[478,460,441,419,455,0,456,452,458],
[444,451,431,426,433,434,0,424,437],
[438,438,424,445,430,438,466,0,439],
[433,459,428,438,445,432,453,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,515,444,526,512,530,449,487],
[385,0,430,441,427,451,438,425,393],
[375,460,0,423,443,456,389,424,478],
[446,449,467,0,431,528,442,492,455],
[364,463,447,459,0,488,429,404,458],
[378,439,434,362,402,0,419,451,371],
[360,452,501,448,461,471,0,449,420],
[441,465,466,398,486,439,441,0,459],
[403,497,412,435,432,519,470,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,479,444,457,442,459,431,447],
[447,0,467,438,443,461,457,436,443],
[411,423,0,438,433,450,448,438,425],
[446,452,452,0,452,451,453,445,467],
[433,447,457,438,0,438,438,441,441],
[448,429,440,439,452,0,453,450,440],
[431,433,442,437,452,437,0,442,441],
[459,454,452,445,449,440,448,0,454],
[443,447,465,423,449,450,449,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,456,484,449,405,442,418,428],
[453,0,424,459,467,392,446,434,442],
[434,466,0,459,443,450,473,461,452],
[406,431,431,0,452,388,380,420,417],
[441,423,447,438,0,379,423,430,450],
[485,498,440,502,511,0,464,483,439],
[448,444,417,510,467,426,0,433,419],
[472,456,429,470,460,407,457,0,480],
[462,448,438,473,440,451,471,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,461,407,452,436,438,459,443],
[420,0,445,416,448,447,445,445,428],
[429,445,0,424,475,431,447,463,443],
[483,474,466,0,474,443,468,460,461],
[438,442,415,416,0,420,465,438,451],
[454,443,459,447,470,0,463,468,470],
[452,445,443,422,425,427,0,435,456],
[431,445,427,430,452,422,455,0,455],
[447,462,447,429,439,420,434,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,439,436,457,445,437,418,463],
[450,0,466,435,456,468,441,458,480],
[451,424,0,443,450,460,450,445,439],
[454,455,447,0,465,469,438,436,481],
[433,434,440,425,0,434,433,426,454],
[445,422,430,421,456,0,402,418,457],
[453,449,440,452,457,488,0,413,468],
[472,432,445,454,464,472,477,0,455],
[427,410,451,409,436,433,422,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,484,430,334,458,539,394,431],
[649,0,541,619,318,459,576,341,495],
[406,349,0,388,241,240,266,390,371],
[460,271,502,0,418,309,569,353,532],
[556,572,649,472,0,582,716,410,442],
[432,431,650,581,308,0,643,399,420],
[351,314,624,321,174,247,0,248,315],
[496,549,500,537,480,491,642,0,429],
[459,395,519,358,448,470,575,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,491,488,461,454,444,491,479],
[434,0,468,453,434,449,436,451,469],
[399,422,0,454,423,426,445,447,441],
[402,437,436,0,414,430,423,439,451],
[429,456,467,476,0,456,463,459,463],
[436,441,464,460,434,0,450,454,455],
[446,454,445,467,427,440,0,447,456],
[399,439,443,451,431,436,443,0,463],
[411,421,449,439,427,435,434,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,456,444,433,424,459,475,443],
[449,0,452,425,420,435,436,445,465],
[434,438,0,441,434,423,456,414,423],
[446,465,449,0,428,415,472,458,439],
[457,470,456,462,0,455,462,451,445],
[466,455,467,475,435,0,497,456,462],
[431,454,434,418,428,393,0,442,430],
[415,445,476,432,439,434,448,0,416],
[447,425,467,451,445,428,460,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,482,451,462,452,416,449,447],
[477,0,483,435,411,469,414,432,411],
[408,407,0,409,408,380,407,383,393],
[439,455,481,0,430,448,468,474,426],
[428,479,482,460,0,470,472,464,453],
[438,421,510,442,420,0,436,420,448],
[474,476,483,422,418,454,0,462,432],
[441,458,507,416,426,470,428,0,394],
[443,479,497,464,437,442,458,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,491,504,433,440,441,501,440],
[405,0,437,473,401,382,406,431,413],
[399,453,0,474,423,368,435,460,431],
[386,417,416,0,405,400,386,428,406],
[457,489,467,485,0,458,423,437,468],
[450,508,522,490,432,0,468,478,435],
[449,484,455,504,467,422,0,479,491],
[389,459,430,462,453,412,411,0,446],
[450,477,459,484,422,455,399,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,447,456,467,469,442,483,462],
[440,0,448,462,442,443,454,456,439],
[443,442,0,450,439,459,450,463,461],
[434,428,440,0,435,455,434,447,438],
[423,448,451,455,0,460,446,467,474],
[421,447,431,435,430,0,425,470,464],
[448,436,440,456,444,465,0,456,473],
[407,434,427,443,423,420,434,0,461],
[428,451,429,452,416,426,417,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,445,457,467,463,487,466,482],
[406,0,402,384,430,417,440,416,424],
[445,488,0,419,465,454,457,446,457],
[433,506,471,0,446,477,483,470,447],
[423,460,425,444,0,417,461,430,443],
[427,473,436,413,473,0,476,454,441],
[403,450,433,407,429,414,0,422,416],
[424,474,444,420,460,436,468,0,461],
[408,466,433,443,447,449,474,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,471,439,465,434,434,440,450],
[437,0,471,434,440,431,427,431,439],
[419,419,0,436,437,436,430,441,437],
[451,456,454,0,467,433,470,445,460],
[425,450,453,423,0,430,439,443,443],
[456,459,454,457,460,0,453,439,445],
[456,463,460,420,451,437,0,450,449],
[450,459,449,445,447,451,440,0,445],
[440,451,453,430,447,445,441,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,412,435,440,441,448,459,441],
[484,0,461,454,476,436,481,463,483],
[478,429,0,428,471,434,476,457,466],
[455,436,462,0,468,448,447,477,449],
[450,414,419,422,0,437,467,443,462],
[449,454,456,442,453,0,455,458,461],
[442,409,414,443,423,435,0,456,447],
[431,427,433,413,447,432,434,0,450],
[449,407,424,441,428,429,443,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,393,440,420,450,432,415,405],
[479,0,443,459,430,491,422,420,427],
[497,447,0,460,435,488,463,457,450],
[450,431,430,0,441,488,434,454,426],
[470,460,455,449,0,485,436,418,421],
[440,399,402,402,405,0,439,473,429],
[458,468,427,456,454,451,0,466,440],
[475,470,433,436,472,417,424,0,422],
[485,463,440,464,469,461,450,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,317,385,432,396,461,355,362],
[432,0,393,365,424,230,376,284,345],
[573,497,0,466,529,413,530,486,469],
[505,525,424,0,517,335,487,343,422],
[458,466,361,373,0,356,458,290,363],
[494,660,477,555,534,0,521,457,395],
[429,514,360,403,432,369,0,396,468],
[535,606,404,547,600,433,494,0,329],
[528,545,421,468,527,495,422,561,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,444,431,436,433,413,419,430],
[482,0,460,421,449,433,434,408,439],
[446,430,0,419,429,437,470,430,471],
[459,469,471,0,450,438,475,440,459],
[454,441,461,440,0,430,459,440,440],
[457,457,453,452,460,0,451,438,450],
[477,456,420,415,431,439,0,408,450],
[471,482,460,450,450,452,482,0,434],
[460,451,419,431,450,440,440,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,424,437,457,457,452,450,451],
[427,0,417,409,419,451,419,421,455],
[466,473,0,430,462,443,429,475,449],
[453,481,460,0,480,445,448,441,467],
[433,471,428,410,0,439,451,458,422],
[433,439,447,445,451,0,462,454,465],
[438,471,461,442,439,428,0,458,464],
[440,469,415,449,432,436,432,0,452],
[439,435,441,423,468,425,426,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,428,449,429,422,446,422,420],
[446,0,454,481,456,449,426,448,446],
[462,436,0,461,441,455,446,444,459],
[441,409,429,0,431,411,428,417,438],
[461,434,449,459,0,437,451,445,455],
[468,441,435,479,453,0,453,433,439],
[444,464,444,462,439,437,0,415,444],
[468,442,446,473,445,457,475,0,432],
[470,444,431,452,435,451,446,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,553,418,529,398,545,515,528],
[422,0,449,452,525,358,441,394,440],
[337,441,0,332,464,309,427,309,450],
[472,438,558,0,492,347,426,408,493],
[361,365,426,398,0,330,370,363,421],
[492,532,581,543,560,0,541,403,598],
[345,449,463,464,520,349,0,404,549],
[375,496,581,482,527,487,486,0,592],
[362,450,440,397,469,292,341,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,412,416,450,495,444,394,455],
[438,0,428,433,453,446,422,459,442],
[478,462,0,448,465,468,434,458,468],
[474,457,442,0,447,454,451,430,453],
[440,437,425,443,0,458,409,442,456],
[395,444,422,436,432,0,449,453,408],
[446,468,456,439,481,441,0,422,465],
[496,431,432,460,448,437,468,0,466],
[435,448,422,437,434,482,425,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,463,481,499,527,490,477,537],
[476,0,467,454,417,516,458,436,508],
[427,423,0,462,393,485,399,389,490],
[409,436,428,0,443,447,447,427,455],
[391,473,497,447,0,550,431,481,457],
[363,374,405,443,340,0,395,393,427],
[400,432,491,443,459,495,0,451,415],
[413,454,501,463,409,497,439,0,479],
[353,382,400,435,433,463,475,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,412,464,445,477,436,431,443],
[408,0,412,399,380,452,380,419,397],
[478,478,0,466,413,502,433,459,457],
[426,491,424,0,406,440,446,449,421],
[445,510,477,484,0,488,418,496,466],
[413,438,388,450,402,0,386,424,423],
[454,510,457,444,472,504,0,482,472],
[459,471,431,441,394,466,408,0,420],
[447,493,433,469,424,467,418,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,475,463,478,479,450,466,439],
[441,0,454,469,456,470,450,459,459],
[415,436,0,453,422,463,422,455,471],
[427,421,437,0,423,427,417,450,437],
[412,434,468,467,0,471,420,445,442],
[411,420,427,463,419,0,417,449,438],
[440,440,468,473,470,473,0,489,447],
[424,431,435,440,445,441,401,0,431],
[451,431,419,453,448,452,443,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,459,434,422,481,429,480,477],
[470,0,458,430,416,458,453,428,473],
[431,432,0,426,434,433,415,379,458],
[456,460,464,0,437,438,476,397,474],
[468,474,456,453,0,479,442,450,496],
[409,432,457,452,411,0,415,439,447],
[461,437,475,414,448,475,0,439,469],
[410,462,511,493,440,451,451,0,490],
[413,417,432,416,394,443,421,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,437,413,351,445,457,409,434],
[469,0,473,426,408,450,496,433,469],
[453,417,0,445,397,470,475,411,464],
[477,464,445,0,414,490,522,488,450],
[539,482,493,476,0,478,483,442,491],
[445,440,420,400,412,0,472,394,435],
[433,394,415,368,407,418,0,401,415],
[481,457,479,402,448,496,489,0,483],
[456,421,426,440,399,455,475,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,462,446,407,507,448,419,472],
[420,0,468,456,477,481,468,475,451],
[428,422,0,441,398,476,466,433,405],
[444,434,449,0,448,511,485,473,447],
[483,413,492,442,0,551,490,468,443],
[383,409,414,379,339,0,380,407,404],
[442,422,424,405,400,510,0,431,449],
[471,415,457,417,422,483,459,0,436],
[418,439,485,443,447,486,441,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,429,391,401,420,493,417,474],
[446,0,426,447,417,432,453,414,443],
[461,464,0,436,438,421,505,457,463],
[499,443,454,0,460,469,489,479,474],
[489,473,452,430,0,458,511,447,481],
[470,458,469,421,432,0,490,459,492],
[397,437,385,401,379,400,0,425,430],
[473,476,433,411,443,431,465,0,476],
[416,447,427,416,409,398,460,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,433,410,381,398,439,440,430],
[467,0,433,445,407,448,438,466,472],
[457,457,0,411,452,439,467,436,471],
[480,445,479,0,424,470,442,453,481],
[509,483,438,466,0,519,511,478,524],
[492,442,451,420,371,0,456,425,468],
[451,452,423,448,379,434,0,465,445],
[450,424,454,437,412,465,425,0,441],
[460,418,419,409,366,422,445,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,443,467,460,452,429,442,431],
[439,0,438,448,427,453,422,457,425],
[447,452,0,453,454,449,424,422,441],
[423,442,437,0,441,439,432,412,417],
[430,463,436,449,0,461,446,427,412],
[438,437,441,451,429,0,436,459,423],
[461,468,466,458,444,454,0,475,412],
[448,433,468,478,463,431,415,0,457],
[459,465,449,473,478,467,478,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,441,427,430,442,445,449,427],
[440,0,432,398,417,421,441,419,433],
[449,458,0,396,425,431,441,435,422],
[463,492,494,0,444,444,468,472,459],
[460,473,465,446,0,466,461,471,435],
[448,469,459,446,424,0,502,449,436],
[445,449,449,422,429,388,0,435,424],
[441,471,455,418,419,441,455,0,423],
[463,457,468,431,455,454,466,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,223,359,261,287,439,343,478],
[600,0,479,620,329,494,535,478,601],
[667,411,0,596,463,488,587,457,665],
[531,270,294,0,353,334,520,386,517],
[629,561,427,537,0,485,629,536,589],
[603,396,402,556,405,0,661,480,637],
[451,355,303,370,261,229,0,348,431],
[547,412,433,504,354,410,542,0,603],
[412,289,225,373,301,253,459,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,434,462,487,403,451,402,458],
[399,0,421,425,483,410,486,374,429],
[456,469,0,453,474,402,463,385,456],
[428,465,437,0,479,388,419,341,462],
[403,407,416,411,0,353,448,372,428],
[487,480,488,502,537,0,524,423,505],
[439,404,427,471,442,366,0,455,518],
[488,516,505,549,518,467,435,0,503],
[432,461,434,428,462,385,372,387,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,431,447,415,470,448,429,433],
[461,0,439,418,428,446,460,462,435],
[459,451,0,430,434,478,476,446,442],
[443,472,460,0,455,461,472,457,443],
[475,462,456,435,0,463,477,438,458],
[420,444,412,429,427,0,473,447,428],
[442,430,414,418,413,417,0,442,432],
[461,428,444,433,452,443,448,0,423],
[457,455,448,447,432,462,458,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,458,443,433,450,458,444,435],
[476,0,452,458,445,461,421,459,412],
[432,438,0,450,438,462,437,446,431],
[447,432,440,0,452,456,434,433,381],
[457,445,452,438,0,444,424,431,409],
[440,429,428,434,446,0,406,426,437],
[432,469,453,456,466,484,0,463,466],
[446,431,444,457,459,464,427,0,438],
[455,478,459,509,481,453,424,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,453,448,468,476,457,457,430],
[469,0,469,445,476,479,459,463,467],
[437,421,0,436,463,463,452,436,467],
[442,445,454,0,473,467,449,460,465],
[422,414,427,417,0,446,421,430,419],
[414,411,427,423,444,0,438,437,418],
[433,431,438,441,469,452,0,452,459],
[433,427,454,430,460,453,438,0,453],
[460,423,423,425,471,472,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,447,386,351,480,459,489,380],
[525,0,502,407,458,422,453,505,451],
[443,388,0,376,293,422,371,421,353],
[504,483,514,0,425,501,459,493,439],
[539,432,597,465,0,530,422,486,490],
[410,468,468,389,360,0,401,454,458],
[431,437,519,431,468,489,0,465,452],
[401,385,469,397,404,436,425,0,335],
[510,439,537,451,400,432,438,555,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,481,459,431,478,490,434,448],
[424,0,456,445,445,470,466,439,467],
[409,434,0,452,440,460,435,442,423],
[431,445,438,0,466,463,436,437,429],
[459,445,450,424,0,486,448,450,439],
[412,420,430,427,404,0,459,384,385],
[400,424,455,454,442,431,0,425,420],
[456,451,448,453,440,506,465,0,476],
[442,423,467,461,451,505,470,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,448,443,435,466,451,424,445],
[465,0,454,449,474,482,459,467,433],
[442,436,0,437,458,438,449,410,454],
[447,441,453,0,446,458,448,433,464],
[455,416,432,444,0,407,431,408,432],
[424,408,452,432,483,0,424,442,473],
[439,431,441,442,459,466,0,432,461],
[466,423,480,457,482,448,458,0,474],
[445,457,436,426,458,417,429,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,447,433,470,435,401,442,421],
[488,0,434,414,474,424,411,448,420],
[443,456,0,452,504,433,461,498,442],
[457,476,438,0,480,438,390,468,469],
[420,416,386,410,0,386,366,456,406],
[455,466,457,452,504,0,434,471,460],
[489,479,429,500,524,456,0,498,436],
[448,442,392,422,434,419,392,0,395],
[469,470,448,421,484,430,454,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,459,419,439,441,487,481,472],
[465,0,491,432,450,480,482,500,442],
[431,399,0,444,437,434,451,469,449],
[471,458,446,0,458,436,454,488,460],
[451,440,453,432,0,468,465,471,463],
[449,410,456,454,422,0,450,468,443],
[403,408,439,436,425,440,0,450,445],
[409,390,421,402,419,422,440,0,433],
[418,448,441,430,427,447,445,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,414,432,420,426,458,434,475],
[461,0,449,475,472,519,481,417,498],
[476,441,0,467,449,492,466,455,505],
[458,415,423,0,412,466,460,380,470],
[470,418,441,478,0,463,471,448,507],
[464,371,398,424,427,0,446,456,458],
[432,409,424,430,419,444,0,415,491],
[456,473,435,510,442,434,475,0,510],
[415,392,385,420,383,432,399,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,398,479,446,394,364,390,412],
[471,0,426,443,441,426,433,437,414],
[492,464,0,490,521,454,433,472,471],
[411,447,400,0,427,446,403,457,426],
[444,449,369,463,0,435,395,453,381],
[496,464,436,444,455,0,409,481,395],
[526,457,457,487,495,481,0,443,414],
[500,453,418,433,437,409,447,0,396],
[478,476,419,464,509,495,476,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,426,426,415,453,427,443,438],
[478,0,433,465,447,480,453,446,433],
[464,457,0,456,443,461,457,456,454],
[464,425,434,0,452,464,441,423,419],
[475,443,447,438,0,476,461,462,458],
[437,410,429,426,414,0,409,420,421],
[463,437,433,449,429,481,0,435,443],
[447,444,434,467,428,470,455,0,462],
[452,457,436,471,432,469,447,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,399,401,364,360,420,457,391],
[490,0,436,473,409,411,413,458,437],
[491,454,0,461,445,455,425,461,458],
[489,417,429,0,425,426,429,466,468],
[526,481,445,465,0,408,444,439,446],
[530,479,435,464,482,0,455,489,443],
[470,477,465,461,446,435,0,457,433],
[433,432,429,424,451,401,433,0,445],
[499,453,432,422,444,447,457,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,451,442,461,425,458,440,457],
[440,0,427,452,446,417,449,448,446],
[439,463,0,439,455,424,454,453,444],
[448,438,451,0,450,415,459,434,446],
[429,444,435,440,0,431,450,439,423],
[465,473,466,475,459,0,482,432,440],
[432,441,436,431,440,408,0,429,434],
[450,442,437,456,451,458,461,0,462],
[433,444,446,444,467,450,456,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,472,413,484,469,455,476,467],
[408,0,452,412,459,466,441,473,425],
[418,438,0,400,487,428,415,439,416],
[477,478,490,0,499,469,459,488,443],
[406,431,403,391,0,415,434,433,432],
[421,424,462,421,475,0,443,467,436],
[435,449,475,431,456,447,0,474,436],
[414,417,451,402,457,423,416,0,449],
[423,465,474,447,458,454,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,440,466,464,396,499,496,478],
[446,0,496,453,487,444,426,460,420],
[450,394,0,415,436,446,436,461,383],
[424,437,475,0,439,414,403,429,401],
[426,403,454,451,0,372,433,416,408],
[494,446,444,476,518,0,452,487,482],
[391,464,454,487,457,438,0,422,419],
[394,430,429,461,474,403,468,0,436],
[412,470,507,489,482,408,471,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,421,455,434,386,416,417,427],
[464,0,463,465,468,413,431,421,430],
[469,427,0,476,453,427,438,442,430],
[435,425,414,0,469,414,403,430,446],
[456,422,437,421,0,433,429,425,434],
[504,477,463,476,457,0,460,440,466],
[474,459,452,487,461,430,0,476,436],
[473,469,448,460,465,450,414,0,449],
[463,460,460,444,456,424,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,434,439,475,467,416,498,470],
[450,0,472,495,470,463,441,467,481],
[456,418,0,470,420,373,428,466,448],
[451,395,420,0,395,377,446,438,468],
[415,420,470,495,0,387,439,495,466],
[423,427,517,513,503,0,487,506,450],
[474,449,462,444,451,403,0,469,433],
[392,423,424,452,395,384,421,0,435],
[420,409,442,422,424,440,457,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,427,451,486,505,467,433,430],
[464,0,419,456,496,507,480,455,465],
[463,471,0,440,448,497,461,443,429],
[439,434,450,0,509,476,435,458,437],
[404,394,442,381,0,452,413,412,403],
[385,383,393,414,438,0,387,422,404],
[423,410,429,455,477,503,0,459,444],
[457,435,447,432,478,468,431,0,448],
[460,425,461,453,487,486,446,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,489,448,438,444,410,419,440],
[457,0,491,459,474,470,408,436,470],
[401,399,0,443,423,419,380,396,424],
[442,431,447,0,444,438,415,453,455],
[452,416,467,446,0,414,386,401,415],
[446,420,471,452,476,0,438,469,447],
[480,482,510,475,504,452,0,436,463],
[471,454,494,437,489,421,454,0,429],
[450,420,466,435,475,443,427,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,412,470,456,448,472,444,469],
[406,0,393,444,405,399,412,404,416],
[478,497,0,479,450,435,461,462,424],
[420,446,411,0,423,414,429,390,396],
[434,485,440,467,0,441,467,430,443],
[442,491,455,476,449,0,444,444,445],
[418,478,429,461,423,446,0,450,447],
[446,486,428,500,460,446,440,0,454],
[421,474,466,494,447,445,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,381,459,335,382,370,423,355],
[518,0,488,579,357,366,405,492,442],
[509,402,0,448,435,415,407,496,386],
[431,311,442,0,401,418,352,468,341],
[555,533,455,489,0,517,412,584,528],
[508,524,475,472,373,0,457,571,486],
[520,485,483,538,478,433,0,536,479],
[467,398,394,422,306,319,354,0,424],
[535,448,504,549,362,404,411,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,438,447,455,448,433,463],
[445,0,438,453,470,463,462,461,456],
[453,452,0,469,458,456,475,436,464],
[452,437,421,0,447,454,467,425,451],
[443,420,432,443,0,416,418,408,450],
[435,427,434,436,474,0,427,435,476],
[442,428,415,423,472,463,0,445,438],
[457,429,454,465,482,455,445,0,479],
[427,434,426,439,440,414,452,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,439,484,477,430,461,411,456],
[446,0,467,465,471,441,461,439,457],
[451,423,0,499,462,425,477,437,437],
[406,425,391,0,427,432,433,397,437],
[413,419,428,463,0,421,442,387,419],
[460,449,465,458,469,0,469,446,434],
[429,429,413,457,448,421,0,404,433],
[479,451,453,493,503,444,486,0,447],
[434,433,453,453,471,456,457,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,437,468,403,400,421,419,446],
[441,0,429,443,455,429,384,434,457],
[453,461,0,468,487,442,473,452,501],
[422,447,422,0,428,421,417,405,451],
[487,435,403,462,0,435,422,449,454],
[490,461,448,469,455,0,436,434,470],
[469,506,417,473,468,454,0,461,488],
[471,456,438,485,441,456,429,0,434],
[444,433,389,439,436,420,402,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,441,456,419,450,451,430,434],
[473,0,438,452,437,458,449,449,440],
[449,452,0,458,447,438,451,449,422],
[434,438,432,0,435,444,431,437,445],
[471,453,443,455,0,462,449,446,428],
[440,432,452,446,428,0,449,445,416],
[439,441,439,459,441,441,0,449,419],
[460,441,441,453,444,445,441,0,424],
[456,450,468,445,462,474,471,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,437,443,445,444,442,451,467],
[451,0,432,452,458,439,451,454,445],
[453,458,0,448,445,456,438,442,445],
[447,438,442,0,458,458,456,453,463],
[445,432,445,432,0,443,457,445,449],
[446,451,434,432,447,0,455,456,432],
[448,439,452,434,433,435,0,449,446],
[439,436,448,437,445,434,441,0,454],
[423,445,445,427,441,458,444,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,504,444,548,471,503,391,527],
[385,0,456,392,452,357,435,349,433],
[386,434,0,396,498,413,478,397,508],
[446,498,494,0,498,425,428,434,453],
[342,438,392,392,0,365,424,387,395],
[419,533,477,465,525,0,501,456,524],
[387,455,412,462,466,389,0,342,374],
[499,541,493,456,503,434,548,0,521],
[363,457,382,437,495,366,516,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,443,405,425,372,468,419,447],
[470,0,434,455,481,445,472,422,425],
[447,456,0,479,498,429,461,483,424],
[485,435,411,0,424,424,441,382,396],
[465,409,392,466,0,388,448,456,403],
[518,445,461,466,502,0,463,485,445],
[422,418,429,449,442,427,0,389,430],
[471,468,407,508,434,405,501,0,446],
[443,465,466,494,487,445,460,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,471,461,445,461,482,464,485],
[443,0,459,445,418,451,430,451,438],
[419,431,0,445,427,454,456,433,458],
[429,445,445,0,429,439,436,456,430],
[445,472,463,461,0,457,472,465,473],
[429,439,436,451,433,0,460,450,450],
[408,460,434,454,418,430,0,426,464],
[426,439,457,434,425,440,464,0,449],
[405,452,432,460,417,440,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,446,484,455,470,465,440,458],
[442,0,469,487,440,485,467,450,427],
[444,421,0,476,459,456,414,430,436],
[406,403,414,0,406,467,449,417,380],
[435,450,431,484,0,477,445,449,471],
[420,405,434,423,413,0,398,434,415],
[425,423,476,441,445,492,0,439,424],
[450,440,460,473,441,456,451,0,419],
[432,463,454,510,419,475,466,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,433,503,469,486,457,482,469],
[447,0,399,400,477,452,392,384,440],
[457,491,0,471,449,461,441,479,437],
[387,490,419,0,440,393,431,435,457],
[421,413,441,450,0,452,430,457,431],
[404,438,429,497,438,0,425,452,463],
[433,498,449,459,460,465,0,437,464],
[408,506,411,455,433,438,453,0,437],
[421,450,453,433,459,427,426,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,457,439,436,486,481,408,491],
[439,0,381,397,451,463,469,409,484],
[433,509,0,443,442,486,471,405,484],
[451,493,447,0,465,519,479,445,460],
[454,439,448,425,0,464,471,403,457],
[404,427,404,371,426,0,409,331,434],
[409,421,419,411,419,481,0,394,427],
[482,481,485,445,487,559,496,0,466],
[399,406,406,430,433,456,463,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,465,454,473,442,452,473,456],
[429,0,482,464,476,481,455,446,468],
[425,408,0,463,452,406,400,425,456],
[436,426,427,0,453,434,448,434,471],
[417,414,438,437,0,406,416,374,484],
[448,409,484,456,484,0,418,407,461],
[438,435,490,442,474,472,0,446,492],
[417,444,465,456,516,483,444,0,453],
[434,422,434,419,406,429,398,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,433,395,426,426,461,439,404],
[443,0,424,424,453,441,493,456,440],
[457,466,0,453,445,491,455,458,469],
[495,466,437,0,449,461,476,470,466],
[464,437,445,441,0,443,467,433,442],
[464,449,399,429,447,0,437,438,444],
[429,397,435,414,423,453,0,426,407],
[451,434,432,420,457,452,464,0,453],
[486,450,421,424,448,446,483,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,425,425,453,412,457,469,451],
[476,0,445,471,473,488,485,476,474],
[465,445,0,477,465,465,476,476,515],
[465,419,413,0,472,485,471,485,476],
[437,417,425,418,0,428,450,455,459],
[478,402,425,405,462,0,457,468,470],
[433,405,414,419,440,433,0,451,453],
[421,414,414,405,435,422,439,0,452],
[439,416,375,414,431,420,437,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,453,451,459,453,450,417,466],
[461,0,485,461,493,449,448,447,440],
[437,405,0,452,446,433,430,398,436],
[439,429,438,0,455,447,429,431,430],
[431,397,444,435,0,438,432,403,429],
[437,441,457,443,452,0,434,418,451],
[440,442,460,461,458,456,0,416,444],
[473,443,492,459,487,472,474,0,466],
[424,450,454,460,461,439,446,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,425,446,412,401,446,418,395],
[442,0,413,431,411,413,435,403,416],
[465,477,0,455,429,440,447,438,444],
[444,459,435,0,435,413,444,437,424],
[478,479,461,455,0,443,464,433,448],
[489,477,450,477,447,0,484,438,447],
[444,455,443,446,426,406,0,425,426],
[472,487,452,453,457,452,465,0,439],
[495,474,446,466,442,443,464,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,450,453,446,439,445,456,455],
[445,0,447,480,460,456,444,421,441],
[440,443,0,450,429,450,441,442,417],
[437,410,440,0,467,436,437,407,438],
[444,430,461,423,0,433,430,410,410],
[451,434,440,454,457,0,441,429,411],
[445,446,449,453,460,449,0,436,411],
[434,469,448,483,480,461,454,0,445],
[435,449,473,452,480,479,479,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,477,475,474,445,477,466,453],
[421,0,443,462,434,440,456,433,451],
[413,447,0,473,435,430,463,422,456],
[415,428,417,0,429,424,415,419,409],
[416,456,455,461,0,441,450,458,449],
[445,450,460,466,449,0,466,436,454],
[413,434,427,475,440,424,0,442,435],
[424,457,468,471,432,454,448,0,467],
[437,439,434,481,441,436,455,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,443,427,440,422,444,441],
[445,0,439,411,429,442,433,435,425],
[453,451,0,436,435,434,432,437,434],
[447,479,454,0,451,477,451,468,434],
[463,461,455,439,0,476,443,464,428],
[450,448,456,413,414,0,450,445,411],
[468,457,458,439,447,440,0,479,431],
[446,455,453,422,426,445,411,0,445],
[449,465,456,456,462,479,459,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,441,450,462,471,429,437,467],
[442,0,432,453,454,475,432,453,472],
[449,458,0,480,472,490,433,460,480],
[440,437,410,0,458,459,433,433,461],
[428,436,418,432,0,458,434,452,458],
[419,415,400,431,432,0,411,426,451],
[461,458,457,457,456,479,0,444,495],
[453,437,430,457,438,464,446,0,459],
[423,418,410,429,432,439,395,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,466,448,447,438,479,449,459],
[449,0,444,421,442,452,470,412,459],
[424,446,0,432,435,451,473,456,462],
[442,469,458,0,462,439,469,452,455],
[443,448,455,428,0,457,485,450,457],
[452,438,439,451,433,0,468,446,463],
[411,420,417,421,405,422,0,436,430],
[441,478,434,438,440,444,454,0,432],
[431,431,428,435,433,427,460,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,475,405,490,405,518,478,424],
[529,0,490,467,500,436,474,505,403],
[415,400,0,366,446,375,398,418,311],
[485,423,524,0,484,478,498,506,457],
[400,390,444,406,0,462,446,428,347],
[485,454,515,412,428,0,440,452,436],
[372,416,492,392,444,450,0,450,429],
[412,385,472,384,462,438,440,0,406],
[466,487,579,433,543,454,461,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,430,444,444,452,447,461,432],
[487,0,450,485,476,481,478,492,441],
[460,440,0,487,448,485,470,488,459],
[446,405,403,0,480,444,443,451,428],
[446,414,442,410,0,459,439,467,433],
[438,409,405,446,431,0,450,452,409],
[443,412,420,447,451,440,0,445,448],
[429,398,402,439,423,438,445,0,427],
[458,449,431,462,457,481,442,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,469,568,465,485,631,496,478],
[453,0,551,525,426,407,652,379,535],
[421,339,0,425,441,380,591,481,548],
[322,365,465,0,375,361,547,468,523],
[425,464,449,515,0,429,579,446,489],
[405,483,510,529,461,0,630,528,558],
[259,238,299,343,311,260,0,351,287],
[394,511,409,422,444,362,539,0,443],
[412,355,342,367,401,332,603,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,456,449,460,444,450,466,453],
[428,0,472,410,457,450,444,461,443],
[434,418,0,405,423,424,440,465,433],
[441,480,485,0,458,466,462,492,484],
[430,433,467,432,0,446,431,470,473],
[446,440,466,424,444,0,460,472,456],
[440,446,450,428,459,430,0,473,437],
[424,429,425,398,420,418,417,0,450],
[437,447,457,406,417,434,453,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,306,328,374,315,218,472,394],
[565,0,508,494,455,364,384,506,376],
[584,382,0,416,518,331,364,534,337],
[562,396,474,0,447,485,338,599,400],
[516,435,372,443,0,459,300,628,430],
[575,526,559,405,431,0,457,562,437],
[672,506,526,552,590,433,0,620,471],
[418,384,356,291,262,328,270,0,285],
[496,514,553,490,460,453,419,605,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,445,367,534,243,143,461,262],
[409,0,445,531,444,171,335,478,354],
[445,445,0,503,303,422,194,313,303],
[523,359,387,0,605,189,318,326,266],
[356,446,587,285,0,333,279,313,275],
[647,719,468,701,557,0,363,482,481],
[747,555,696,572,611,527,0,488,414],
[429,412,577,564,577,408,402,0,336],
[628,536,587,624,615,409,476,554,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,464,444,451,444,448,453,476],
[462,0,479,472,462,451,443,467,484],
[426,411,0,454,414,427,428,475,469],
[446,418,436,0,442,427,416,465,441],
[439,428,476,448,0,444,445,458,495],
[446,439,463,463,446,0,441,489,468],
[442,447,462,474,445,449,0,463,483],
[437,423,415,425,432,401,427,0,470],
[414,406,421,449,395,422,407,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,441,439,442,465,428,440,446],
[429,0,416,426,427,457,418,418,432],
[449,474,0,448,450,453,440,443,443],
[451,464,442,0,457,465,442,433,467],
[448,463,440,433,0,462,440,418,442],
[425,433,437,425,428,0,416,408,434],
[462,472,450,448,450,474,0,445,450],
[450,472,447,457,472,482,445,0,445],
[444,458,447,423,448,456,440,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,436,449,430,434,442,429,420],
[441,0,432,429,432,415,429,413,447],
[454,458,0,424,433,408,450,435,437],
[441,461,466,0,429,414,442,420,455],
[460,458,457,461,0,445,449,420,461],
[456,475,482,476,445,0,473,466,461],
[448,461,440,448,441,417,0,425,462],
[461,477,455,470,470,424,465,0,444],
[470,443,453,435,429,429,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,511,393,439,448,359,426,444],
[553,0,536,438,557,500,526,505,546],
[379,354,0,378,385,375,348,449,360],
[497,452,512,0,564,439,428,555,473],
[451,333,505,326,0,466,367,442,441],
[442,390,515,451,424,0,375,469,411],
[531,364,542,462,523,515,0,533,458],
[464,385,441,335,448,421,357,0,486],
[446,344,530,417,449,479,432,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,472,463,480,450,441,452,474],
[453,0,464,458,463,471,449,435,474],
[418,426,0,454,438,439,432,460,446],
[427,432,436,0,435,434,451,414,464],
[410,427,452,455,0,437,451,415,450],
[440,419,451,456,453,0,434,436,475],
[449,441,458,439,439,456,0,442,477],
[438,455,430,476,475,454,448,0,454],
[416,416,444,426,440,415,413,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,461,459,452,504,446,483,485],
[445,0,418,408,398,508,457,420,432],
[429,472,0,438,409,517,439,415,447],
[431,482,452,0,405,507,452,400,447],
[438,492,481,485,0,546,495,453,503],
[386,382,373,383,344,0,402,409,382],
[444,433,451,438,395,488,0,444,459],
[407,470,475,490,437,481,446,0,450],
[405,458,443,443,387,508,431,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,447,426,427,454,375,463,462],
[411,0,417,428,398,403,373,411,398],
[443,473,0,472,456,425,405,438,460],
[464,462,418,0,463,446,424,449,455],
[463,492,434,427,0,499,464,520,497],
[436,487,465,444,391,0,386,441,459],
[515,517,485,466,426,504,0,452,494],
[427,479,452,441,370,449,438,0,454],
[428,492,430,435,393,431,396,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,406,463,449,453,434,456,448],
[410,0,407,456,429,430,427,429,422],
[484,483,0,442,453,455,452,449,463],
[427,434,448,0,442,431,442,444,455],
[441,461,437,448,0,449,444,451,450],
[437,460,435,459,441,0,451,434,463],
[456,463,438,448,446,439,0,445,444],
[434,461,441,446,439,456,445,0,444],
[442,468,427,435,440,427,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,447,456,467,453,466,471,449],
[455,0,443,475,463,446,475,477,492],
[443,447,0,439,460,447,447,455,486],
[434,415,451,0,431,423,473,434,442],
[423,427,430,459,0,430,478,461,455],
[437,444,443,467,460,0,477,461,505],
[424,415,443,417,412,413,0,450,451],
[419,413,435,456,429,429,440,0,472],
[441,398,404,448,435,385,439,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,389,447,415,437,455,433,451],
[476,0,440,451,437,444,454,462,441],
[501,450,0,484,449,444,475,459,468],
[443,439,406,0,425,451,451,472,451],
[475,453,441,465,0,453,458,474,443],
[453,446,446,439,437,0,466,473,449],
[435,436,415,439,432,424,0,442,440],
[457,428,431,418,416,417,448,0,444],
[439,449,422,439,447,441,450,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,462,442,430,457,417,435,441],
[459,0,451,429,448,464,460,447,450],
[428,439,0,418,424,427,432,420,425],
[448,461,472,0,441,464,442,450,450],
[460,442,466,449,0,477,464,447,450],
[433,426,463,426,413,0,437,416,442],
[473,430,458,448,426,453,0,447,455],
[455,443,470,440,443,474,443,0,441],
[449,440,465,440,440,448,435,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,451,473,423,447,446,454,434],
[441,0,453,482,413,421,439,440,407],
[439,437,0,437,409,430,417,433,410],
[417,408,453,0,417,416,443,445,418],
[467,477,481,473,0,436,455,477,448],
[443,469,460,474,454,0,472,506,447],
[444,451,473,447,435,418,0,449,407],
[436,450,457,445,413,384,441,0,431],
[456,483,480,472,442,443,483,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,448,448,439,451,486,454,452],
[426,0,440,427,437,447,456,417,443],
[442,450,0,455,450,443,512,468,461],
[442,463,435,0,422,451,471,436,437],
[451,453,440,468,0,447,461,439,434],
[439,443,447,439,443,0,457,439,436],
[404,434,378,419,429,433,0,441,428],
[436,473,422,454,451,451,449,0,447],
[438,447,429,453,456,454,462,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,419,451,460,442,463,464,472],
[399,0,435,405,386,454,520,458,449],
[471,455,0,486,430,476,488,513,502],
[439,485,404,0,455,479,500,471,429],
[430,504,460,435,0,492,508,449,517],
[448,436,414,411,398,0,449,425,439],
[427,370,402,390,382,441,0,407,364],
[426,432,377,419,441,465,483,0,448],
[418,441,388,461,373,451,526,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,410,371,442,450,405,409,432],
[463,0,416,422,438,497,462,467,363],
[480,474,0,466,537,501,456,497,381],
[519,468,424,0,475,547,443,549,407],
[448,452,353,415,0,433,369,434,352],
[440,393,389,343,457,0,372,419,376],
[485,428,434,447,521,518,0,455,452],
[481,423,393,341,456,471,435,0,412],
[458,527,509,483,538,514,438,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,426,453,463,430,431,489,467],
[423,0,448,392,443,369,409,435,438],
[464,442,0,442,421,410,454,470,471],
[437,498,448,0,478,463,465,437,449],
[427,447,469,412,0,436,440,441,458],
[460,521,480,427,454,0,452,492,485],
[459,481,436,425,450,438,0,457,417],
[401,455,420,453,449,398,433,0,455],
[423,452,419,441,432,405,473,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,441,433,420,431,419,422,427],
[475,0,434,456,447,436,479,457,429],
[449,456,0,444,454,457,472,432,454],
[457,434,446,0,447,440,462,453,446],
[470,443,436,443,0,455,463,420,453],
[459,454,433,450,435,0,469,441,445],
[471,411,418,428,427,421,0,433,424],
[468,433,458,437,470,449,457,0,443],
[463,461,436,444,437,445,466,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,455,457,403,421,415,421,441],
[435,0,383,444,437,401,399,415,417],
[435,507,0,477,462,454,447,422,449],
[433,446,413,0,422,397,419,420,432],
[487,453,428,468,0,422,437,427,453],
[469,489,436,493,468,0,438,476,461],
[475,491,443,471,453,452,0,454,455],
[469,475,468,470,463,414,436,0,457],
[449,473,441,458,437,429,435,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,434,456,462,452,441,476],
[442,0,463,460,444,430,451,433,467],
[448,427,0,454,437,442,430,415,467],
[456,430,436,0,443,425,430,461,469],
[434,446,453,447,0,434,473,444,481],
[428,460,448,465,456,0,450,448,473],
[438,439,460,460,417,440,0,452,445],
[449,457,475,429,446,442,438,0,474],
[414,423,423,421,409,417,445,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,459,442,439,460,444,449,448],
[442,0,450,449,437,445,432,440,429],
[431,440,0,431,434,446,460,441,439],
[448,441,459,0,438,429,455,449,440],
[451,453,456,452,0,442,460,441,453],
[430,445,444,461,448,0,447,464,438],
[446,458,430,435,430,443,0,459,440],
[441,450,449,441,449,426,431,0,448],
[442,461,451,450,437,452,450,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,448,421,474,403,439,450,401],
[497,0,464,470,472,446,402,532,471],
[442,426,0,480,449,412,448,479,470],
[469,420,410,0,441,401,438,453,434],
[416,418,441,449,0,437,492,489,501],
[487,444,478,489,453,0,444,490,471],
[451,488,442,452,398,446,0,475,461],
[440,358,411,437,401,400,415,0,395],
[489,419,420,456,389,419,429,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,496,454,439,450,455,450,472],
[427,0,439,449,454,404,426,437,438],
[394,451,0,448,445,411,443,424,446],
[436,441,442,0,435,444,454,450,425],
[451,436,445,455,0,383,468,445,444],
[440,486,479,446,507,0,465,440,466],
[435,464,447,436,422,425,0,394,435],
[440,453,466,440,445,450,496,0,455],
[418,452,444,465,446,424,455,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,428,429,433,429,461,431,428],
[470,0,477,436,458,466,468,435,450],
[462,413,0,445,458,455,443,444,429],
[461,454,445,0,472,488,448,465,466],
[457,432,432,418,0,493,485,435,466],
[461,424,435,402,397,0,443,456,437],
[429,422,447,442,405,447,0,422,448],
[459,455,446,425,455,434,468,0,473],
[462,440,461,424,424,453,442,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,379,467,489,402,499,455,502],
[461,0,467,466,437,494,440,463,553],
[511,423,0,415,439,398,492,448,461],
[423,424,475,0,399,466,474,429,422],
[401,453,451,491,0,518,459,423,501],
[488,396,492,424,372,0,445,412,534],
[391,450,398,416,431,445,0,392,446],
[435,427,442,461,467,478,498,0,482],
[388,337,429,468,389,356,444,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,504,484,445,445,439,449,487],
[408,0,467,447,419,440,460,416,476],
[386,423,0,431,387,430,433,413,433],
[406,443,459,0,411,422,438,422,455],
[445,471,503,479,0,445,472,450,479],
[445,450,460,468,445,0,441,440,475],
[451,430,457,452,418,449,0,421,476],
[441,474,477,468,440,450,469,0,495],
[403,414,457,435,411,415,414,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,489,454,438,483,484,451,467],
[410,0,456,402,453,462,482,476,458],
[401,434,0,422,407,441,541,504,438],
[436,488,468,0,455,448,473,502,452],
[452,437,483,435,0,417,464,505,465],
[407,428,449,442,473,0,531,439,492],
[406,408,349,417,426,359,0,374,409],
[439,414,386,388,385,451,516,0,439],
[423,432,452,438,425,398,481,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,425,493,472,391,441,412,399],
[485,0,450,528,514,447,458,452,432],
[465,440,0,510,478,428,445,425,454],
[397,362,380,0,416,375,386,348,318],
[418,376,412,474,0,336,395,375,347],
[499,443,462,515,554,0,469,468,455],
[449,432,445,504,495,421,0,410,393],
[478,438,465,542,515,422,480,0,416],
[491,458,436,572,543,435,497,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,438,449,406,445,424,442],
[457,0,446,443,452,427,442,430,461],
[451,444,0,417,445,451,466,429,458],
[452,447,473,0,438,452,461,436,459],
[441,438,445,452,0,446,436,433,483],
[484,463,439,438,444,0,431,438,430],
[445,448,424,429,454,459,0,430,447],
[466,460,461,454,457,452,460,0,442],
[448,429,432,431,407,460,443,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,403,345,406,464,424,419,403],
[464,0,441,423,425,456,417,441,402],
[487,449,0,463,427,525,453,510,454],
[545,467,427,0,476,543,490,545,469],
[484,465,463,414,0,499,470,505,420],
[426,434,365,347,391,0,395,391,367],
[466,473,437,400,420,495,0,454,446],
[471,449,380,345,385,499,436,0,430],
[487,488,436,421,470,523,444,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,423,466,435,434,494,444,452],
[423,0,423,462,438,454,466,451,425],
[467,467,0,460,443,491,482,474,455],
[424,428,430,0,466,446,457,402,445],
[455,452,447,424,0,472,444,431,472],
[456,436,399,444,418,0,452,424,445],
[396,424,408,433,446,438,0,419,441],
[446,439,416,488,459,466,471,0,441],
[438,465,435,445,418,445,449,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,434,435,423,442,456,452,462],
[446,0,433,440,413,420,456,425,442],
[456,457,0,454,436,443,453,454,461],
[455,450,436,0,426,435,450,443,450],
[467,477,454,464,0,453,473,445,461],
[448,470,447,455,437,0,479,456,451],
[434,434,437,440,417,411,0,414,444],
[438,465,436,447,445,434,476,0,444],
[428,448,429,440,429,439,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,449,421,412,401,399,419,438],
[456,0,465,452,427,430,452,428,454],
[441,425,0,432,439,419,427,432,436],
[469,438,458,0,425,408,439,429,454],
[478,463,451,465,0,466,464,443,470],
[489,460,471,482,424,0,453,453,471],
[491,438,463,451,426,437,0,434,466],
[471,462,458,461,447,437,456,0,456],
[452,436,454,436,420,419,424,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,480,449,437,467,439,457,475],
[435,0,440,418,414,432,436,434,458],
[410,450,0,399,429,457,446,442,448],
[441,472,491,0,456,481,492,472,467],
[453,476,461,434,0,446,464,459,476],
[423,458,433,409,444,0,437,454,467],
[451,454,444,398,426,453,0,449,449],
[433,456,448,418,431,436,441,0,464],
[415,432,442,423,414,423,441,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,434,434,438,423,472,454],
[445,0,450,447,427,433,441,446,451],
[447,440,0,433,447,430,424,433,469],
[456,443,457,0,447,457,431,449,451],
[456,463,443,443,0,451,438,460,459],
[452,457,460,433,439,0,450,460,461],
[467,449,466,459,452,440,0,482,455],
[418,444,457,441,430,430,408,0,465],
[436,439,421,439,431,429,435,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,443,457,434,440,442,425,421],
[473,0,464,472,473,451,443,450,453],
[447,426,0,454,440,428,415,430,428],
[433,418,436,0,437,427,421,409,428],
[456,417,450,453,0,434,444,431,433],
[450,439,462,463,456,0,447,432,441],
[448,447,475,469,446,443,0,440,451],
[465,440,460,481,459,458,450,0,462],
[469,437,462,462,457,449,439,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,583,523,481,501,521,518,444],
[390,0,507,499,527,495,442,575,384],
[307,383,0,495,414,458,394,492,311],
[367,391,395,0,574,512,438,473,465],
[409,363,476,316,0,440,452,377,268],
[389,395,432,378,450,0,419,480,364],
[369,448,496,452,438,471,0,495,424],
[372,315,398,417,513,410,395,0,371],
[446,506,579,425,622,526,466,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,448,454,439,449,466,461,476],
[438,0,448,452,439,455,468,452,449],
[442,442,0,460,458,454,470,454,470],
[436,438,430,0,461,451,446,433,446],
[451,451,432,429,0,444,490,465,465],
[441,435,436,439,446,0,472,476,465],
[424,422,420,444,400,418,0,442,447],
[429,438,436,457,425,414,448,0,473],
[414,441,420,444,425,425,443,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,464,442,432,462,408,444,445],
[447,0,450,433,432,460,429,434,440],
[426,440,0,453,425,467,403,410,426],
[448,457,437,0,425,439,413,459,439],
[458,458,465,465,0,460,442,423,458],
[428,430,423,451,430,0,392,418,440],
[482,461,487,477,448,498,0,445,448],
[446,456,480,431,467,472,445,0,447],
[445,450,464,451,432,450,442,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,406,432,403,429,429,422,420],
[476,0,443,460,452,454,472,473,459],
[484,447,0,424,463,471,469,444,465],
[458,430,466,0,449,471,446,451,456],
[487,438,427,441,0,464,433,470,442],
[461,436,419,419,426,0,425,432,389],
[461,418,421,444,457,465,0,422,424],
[468,417,446,439,420,458,468,0,429],
[470,431,425,434,448,501,466,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,452,423,402,421,407,421,425],
[472,0,459,444,432,424,419,419,427],
[438,431,0,428,421,404,416,426,406],
[467,446,462,0,439,460,424,417,427],
[488,458,469,451,0,459,426,451,436],
[469,466,486,430,431,0,441,443,441],
[483,471,474,466,464,449,0,444,449],
[469,471,464,473,439,447,446,0,452],
[465,463,484,463,454,449,441,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,427,425,440,453,456,420,445],
[460,0,455,439,454,461,450,447,454],
[463,435,0,438,454,448,461,426,424],
[465,451,452,0,468,480,444,451,453],
[450,436,436,422,0,438,432,437,430],
[437,429,442,410,452,0,426,419,429],
[434,440,429,446,458,464,0,430,436],
[470,443,464,439,453,471,460,0,449],
[445,436,466,437,460,461,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,436,446,424,445,419,451,449],
[436,0,450,452,429,463,455,488,443],
[454,440,0,475,453,448,431,490,490],
[444,438,415,0,432,468,457,478,444],
[466,461,437,458,0,455,447,465,471],
[445,427,442,422,435,0,441,460,470],
[471,435,459,433,443,449,0,454,468],
[439,402,400,412,425,430,436,0,436],
[441,447,400,446,419,420,422,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,439,502,486,492,445,469,470],
[400,0,417,471,465,458,448,447,418],
[451,473,0,487,464,463,462,468,440],
[388,419,403,0,444,423,412,431,392],
[404,425,426,446,0,444,436,437,416],
[398,432,427,467,446,0,397,441,417],
[445,442,428,478,454,493,0,456,447],
[421,443,422,459,453,449,434,0,408],
[420,472,450,498,474,473,443,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,444,453,434,481,425,448,452],
[436,0,485,472,451,480,450,481,448],
[446,405,0,456,432,465,444,470,441],
[437,418,434,0,432,469,424,472,453],
[456,439,458,458,0,482,463,462,423],
[409,410,425,421,408,0,396,437,450],
[465,440,446,466,427,494,0,492,427],
[442,409,420,418,428,453,398,0,419],
[438,442,449,437,467,440,463,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,429,412,441,433,446,439,445],
[466,0,450,453,428,462,464,464,463],
[461,440,0,482,481,472,424,443,472],
[478,437,408,0,463,459,453,459,470],
[449,462,409,427,0,448,428,411,443],
[457,428,418,431,442,0,470,422,454],
[444,426,466,437,462,420,0,435,413],
[451,426,447,431,479,468,455,0,450],
[445,427,418,420,447,436,477,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,473,471,456,463,461,447,421],
[440,0,460,445,467,431,474,451,436],
[417,430,0,419,424,444,449,445,421],
[419,445,471,0,448,461,431,438,427],
[434,423,466,442,0,453,461,448,455],
[427,459,446,429,437,0,454,451,417],
[429,416,441,459,429,436,0,455,415],
[443,439,445,452,442,439,435,0,428],
[469,454,469,463,435,473,475,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,436,458,494,442,463,443,429],
[422,0,441,414,464,448,436,431,429],
[454,449,0,440,478,436,466,449,446],
[432,476,450,0,454,426,465,405,410],
[396,426,412,436,0,446,436,408,404],
[448,442,454,464,444,0,448,432,434],
[427,454,424,425,454,442,0,431,462],
[447,459,441,485,482,458,459,0,436],
[461,461,444,480,486,456,428,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,414,455,450,429,466,430,441],
[450,0,444,455,458,419,456,435,462],
[476,446,0,534,512,443,452,468,460],
[435,435,356,0,381,415,413,412,379],
[440,432,378,509,0,444,452,438,422],
[461,471,447,475,446,0,431,444,451],
[424,434,438,477,438,459,0,422,433],
[460,455,422,478,452,446,468,0,448],
[449,428,430,511,468,439,457,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,440,425,436,409,418,434,423],
[448,0,448,418,441,422,420,406,430],
[450,442,0,429,454,410,437,439,413],
[465,472,461,0,476,432,453,453,446],
[454,449,436,414,0,406,437,432,437],
[481,468,480,458,484,0,440,457,440],
[472,470,453,437,453,450,0,432,438],
[456,484,451,437,458,433,458,0,454],
[467,460,477,444,453,450,452,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,440,441,435,467,429,447,404],
[454,0,455,463,460,473,429,457,434],
[450,435,0,458,458,502,438,461,456],
[449,427,432,0,412,486,436,468,429],
[455,430,432,478,0,475,458,452,412],
[423,417,388,404,415,0,411,416,397],
[461,461,452,454,432,479,0,456,429],
[443,433,429,422,438,474,434,0,435],
[486,456,434,461,478,493,461,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,453,430,456,466,451,447,442],
[449,0,471,440,457,474,466,436,436],
[437,419,0,431,455,470,444,452,448],
[460,450,459,0,458,461,456,436,451],
[434,433,435,432,0,440,432,439,452],
[424,416,420,429,450,0,455,436,433],
[439,424,446,434,458,435,0,443,448],
[443,454,438,454,451,454,447,0,457],
[448,454,442,439,438,457,442,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,482,505,484,493,438,484,466],
[464,0,493,436,432,437,468,434,444],
[408,397,0,480,429,493,393,442,443],
[385,454,410,0,446,457,467,424,412],
[406,458,461,444,0,408,427,399,398],
[397,453,397,433,482,0,404,423,432],
[452,422,497,423,463,486,0,438,490],
[406,456,448,466,491,467,452,0,447],
[424,446,447,478,492,458,400,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,423,441,423,377,442,447,424],
[469,0,474,447,454,417,452,425,424],
[467,416,0,426,418,414,462,482,452],
[449,443,464,0,459,451,480,484,485],
[467,436,472,431,0,401,464,450,474],
[513,473,476,439,489,0,456,483,477],
[448,438,428,410,426,434,0,476,446],
[443,465,408,406,440,407,414,0,430],
[466,466,438,405,416,413,444,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,460,469,429,449,464,471,463],
[431,0,461,444,427,444,472,478,465],
[430,429,0,469,416,437,449,443,466],
[421,446,421,0,397,414,421,458,444],
[461,463,474,493,0,443,469,454,458],
[441,446,453,476,447,0,457,471,471],
[426,418,441,469,421,433,0,444,454],
[419,412,447,432,436,419,446,0,433],
[427,425,424,446,432,419,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,448,447,444,450,447,410,440],
[450,0,433,427,453,458,448,423,437],
[442,457,0,430,433,447,426,472,442],
[443,463,460,0,454,474,427,442,446],
[446,437,457,436,0,405,455,430,430],
[440,432,443,416,485,0,448,434,439],
[443,442,464,463,435,442,0,427,437],
[480,467,418,448,460,456,463,0,447],
[450,453,448,444,460,451,453,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,466,479,455,443,453,483,464],
[419,0,406,480,417,441,427,470,460],
[424,484,0,477,458,451,442,459,435],
[411,410,413,0,434,420,400,463,439],
[435,473,432,456,0,444,435,459,453],
[447,449,439,470,446,0,434,480,430],
[437,463,448,490,455,456,0,477,455],
[407,420,431,427,431,410,413,0,432],
[426,430,455,451,437,460,435,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,443,450,428,416,407,432,435],
[473,0,475,468,485,470,447,433,500],
[447,415,0,427,428,448,407,433,452],
[440,422,463,0,451,443,408,450,455],
[462,405,462,439,0,459,428,430,450],
[474,420,442,447,431,0,432,449,446],
[483,443,483,482,462,458,0,460,479],
[458,457,457,440,460,441,430,0,462],
[455,390,438,435,440,444,411,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,467,447,414,449,412,432,432],
[457,0,462,453,450,447,441,468,412],
[423,428,0,428,415,439,429,439,436],
[443,437,462,0,437,469,446,447,442],
[476,440,475,453,0,453,446,460,463],
[441,443,451,421,437,0,421,442,429],
[478,449,461,444,444,469,0,472,476],
[458,422,451,443,430,448,418,0,465],
[458,478,454,448,427,461,414,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,447,450,455,442,432,445,455],
[446,0,408,483,450,469,460,447,415],
[443,482,0,458,467,460,471,435,428],
[440,407,432,0,437,440,423,445,432],
[435,440,423,453,0,463,488,480,489],
[448,421,430,450,427,0,445,432,444],
[458,430,419,467,402,445,0,449,408],
[445,443,455,445,410,458,441,0,410],
[435,475,462,458,401,446,482,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,473,467,463,445,513,468,567],
[450,0,470,444,406,440,540,546,522],
[417,420,0,453,392,461,498,488,477],
[423,446,437,0,423,457,546,448,473],
[427,484,498,467,0,506,470,520,571],
[445,450,429,433,384,0,505,553,520],
[377,350,392,344,420,385,0,462,458],
[422,344,402,442,370,337,428,0,556],
[323,368,413,417,319,370,432,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,474,435,426,477,479,442,413],
[401,0,326,382,433,414,527,467,459],
[416,564,0,481,509,537,540,498,563],
[455,508,409,0,421,435,514,495,380],
[464,457,381,469,0,397,524,463,426],
[413,476,353,455,493,0,486,439,519],
[411,363,350,376,366,404,0,392,417],
[448,423,392,395,427,451,498,0,450],
[477,431,327,510,464,371,473,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,439,426,425,414,437,449,433],
[421,0,446,419,429,425,401,446,408],
[451,444,0,414,436,433,398,441,431],
[464,471,476,0,439,451,454,485,459],
[465,461,454,451,0,441,429,448,430],
[476,465,457,439,449,0,456,484,444],
[453,489,492,436,461,434,0,461,464],
[441,444,449,405,442,406,429,0,433],
[457,482,459,431,460,446,426,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,482,464,461,454,444,476,457],
[405,0,428,450,427,448,427,431,451],
[408,462,0,429,422,437,455,439,440],
[426,440,461,0,416,427,429,431,439],
[429,463,468,474,0,472,459,469,464],
[436,442,453,463,418,0,435,437,438],
[446,463,435,461,431,455,0,438,460],
[414,459,451,459,421,453,452,0,453],
[433,439,450,451,426,452,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,441,449,416,465,471,443,429],
[455,0,445,450,453,442,468,460,448],
[449,445,0,438,452,464,438,446,435],
[441,440,452,0,453,456,461,424,445],
[474,437,438,437,0,455,466,457,447],
[425,448,426,434,435,0,437,409,444],
[419,422,452,429,424,453,0,440,423],
[447,430,444,466,433,481,450,0,435],
[461,442,455,445,443,446,467,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,459,431,439,423,451,423,443],
[442,0,458,439,445,439,452,447,437],
[431,432,0,426,433,418,442,425,441],
[459,451,464,0,444,431,460,423,440],
[451,445,457,446,0,428,458,437,420],
[467,451,472,459,462,0,457,456,445],
[439,438,448,430,432,433,0,442,443],
[467,443,465,467,453,434,448,0,454],
[447,453,449,450,470,445,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,427,444,432,438,443,440,464],
[430,0,433,443,442,438,470,444,440],
[463,457,0,454,444,446,451,439,448],
[446,447,436,0,433,421,421,410,439],
[458,448,446,457,0,427,455,449,473],
[452,452,444,469,463,0,472,454,458],
[447,420,439,469,435,418,0,420,448],
[450,446,451,480,441,436,470,0,485],
[426,450,442,451,417,432,442,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,416,424,408,439,512,490,407],
[412,0,433,430,420,424,443,448,411],
[474,457,0,464,442,504,493,465,455],
[466,460,426,0,467,471,468,467,402],
[482,470,448,423,0,515,510,444,429],
[451,466,386,419,375,0,403,431,429],
[378,447,397,422,380,487,0,399,415],
[400,442,425,423,446,459,491,0,467],
[483,479,435,488,461,461,475,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,460,440,432,466,450,450,446],
[392,0,427,443,423,425,433,423,414],
[430,463,0,451,420,453,446,427,404],
[450,447,439,0,432,445,457,431,431],
[458,467,470,458,0,464,446,432,432],
[424,465,437,445,426,0,448,438,444],
[440,457,444,433,444,442,0,431,440],
[440,467,463,459,458,452,459,0,435],
[444,476,486,459,458,446,450,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,407,410,430,389,427,388,444],
[489,0,407,433,396,419,450,441,474],
[483,483,0,483,457,457,514,436,494],
[480,457,407,0,447,446,442,439,475],
[460,494,433,443,0,463,484,446,485],
[501,471,433,444,427,0,478,476,492],
[463,440,376,448,406,412,0,422,427],
[502,449,454,451,444,414,468,0,469],
[446,416,396,415,405,398,463,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,435,437,418,451,426,433,432],
[434,0,469,476,416,458,409,481,459],
[455,421,0,418,424,438,414,443,431],
[453,414,472,0,402,435,399,419,432],
[472,474,466,488,0,445,451,460,491],
[439,432,452,455,445,0,415,449,434],
[464,481,476,491,439,475,0,468,458],
[457,409,447,471,430,441,422,0,445],
[458,431,459,458,399,456,432,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,453,438,461,428,440,453,489],
[453,0,462,455,465,453,426,458,483],
[437,428,0,453,448,450,461,467,493],
[452,435,437,0,443,458,419,460,498],
[429,425,442,447,0,433,425,447,457],
[462,437,440,432,457,0,452,462,471],
[450,464,429,471,465,438,0,434,478],
[437,432,423,430,443,428,456,0,467],
[401,407,397,392,433,419,412,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,461,458,441,459,461,437,467],
[482,0,475,473,442,481,476,474,461],
[429,415,0,451,443,466,447,458,462],
[432,417,439,0,461,447,449,439,451],
[449,448,447,429,0,449,450,445,480],
[431,409,424,443,441,0,421,432,457],
[429,414,443,441,440,469,0,416,464],
[453,416,432,451,445,458,474,0,465],
[423,429,428,439,410,433,426,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,415,462,450,456,490,501,437],
[419,0,472,493,443,416,432,514,443],
[475,418,0,454,441,428,464,461,422],
[428,397,436,0,389,408,462,465,418],
[440,447,449,501,0,407,480,454,445],
[434,474,462,482,483,0,474,493,454],
[400,458,426,428,410,416,0,517,409],
[389,376,429,425,436,397,373,0,393],
[453,447,468,472,445,436,481,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,399,450,408,386,411,404,423],
[473,0,433,404,426,389,446,436,446],
[491,457,0,428,459,454,465,450,453],
[440,486,462,0,448,430,454,453,444],
[482,464,431,442,0,381,456,451,447],
[504,501,436,460,509,0,474,478,473],
[479,444,425,436,434,416,0,450,427],
[486,454,440,437,439,412,440,0,475],
[467,444,437,446,443,417,463,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,464,456,465,477,441,459,486],
[450,0,423,440,441,430,432,431,460],
[426,467,0,435,466,446,451,475,454],
[434,450,455,0,444,461,457,463,465],
[425,449,424,446,0,438,435,411,442],
[413,460,444,429,452,0,426,459,456],
[449,458,439,433,455,464,0,447,453],
[431,459,415,427,479,431,443,0,432],
[404,430,436,425,448,434,437,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,421,477,424,405,427,451,438],
[415,0,401,434,415,383,405,429,396],
[469,489,0,481,439,429,429,476,448],
[413,456,409,0,438,382,401,465,425],
[466,475,451,452,0,439,445,447,421],
[485,507,461,508,451,0,445,487,484],
[463,485,461,489,445,445,0,483,455],
[439,461,414,425,443,403,407,0,417],
[452,494,442,465,469,406,435,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,412,454,412,413,436,418,447],
[432,0,440,432,406,440,438,408,422],
[478,450,0,488,459,475,452,440,454],
[436,458,402,0,433,432,441,431,445],
[478,484,431,457,0,446,443,446,416],
[477,450,415,458,444,0,432,423,432],
[454,452,438,449,447,458,0,437,473],
[472,482,450,459,444,467,453,0,458],
[443,468,436,445,474,458,417,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,485,467,445,455,411,467,432],
[473,0,478,436,440,439,433,486,426],
[405,412,0,416,426,437,421,430,392],
[423,454,474,0,419,426,426,443,411],
[445,450,464,471,0,463,445,450,426],
[435,451,453,464,427,0,410,435,408],
[479,457,469,464,445,480,0,484,450],
[423,404,460,447,440,455,406,0,405],
[458,464,498,479,464,482,440,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,462,448,466,478,442,454,451],
[453,0,471,435,441,428,441,475,455],
[428,419,0,439,437,441,449,443,436],
[442,455,451,0,455,448,455,453,451],
[424,449,453,435,0,459,430,461,467],
[412,462,449,442,431,0,419,432,428],
[448,449,441,435,460,471,0,447,467],
[436,415,447,437,429,458,443,0,448],
[439,435,454,439,423,462,423,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,436,438,453,447,466,492,448],
[447,0,460,438,450,430,453,488,453],
[454,430,0,445,420,425,467,463,408],
[452,452,445,0,443,425,487,469,440],
[437,440,470,447,0,429,483,430,430],
[443,460,465,465,461,0,459,481,442],
[424,437,423,403,407,431,0,474,382],
[398,402,427,421,460,409,416,0,398],
[442,437,482,450,460,448,508,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,452,539,392,555,443,444,529],
[508,0,519,535,478,581,431,483,481],
[438,371,0,538,516,537,512,457,468],
[351,355,352,0,385,438,421,407,393],
[498,412,374,505,0,524,435,442,424],
[335,309,353,452,366,0,386,337,402],
[447,459,378,469,455,504,0,429,455],
[446,407,433,483,448,553,461,0,507],
[361,409,422,497,466,488,435,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,495,446,434,447,471,483,451],
[438,0,458,449,436,427,450,451,460],
[395,432,0,430,420,391,431,432,430],
[444,441,460,0,431,426,446,447,444],
[456,454,470,459,0,441,460,460,465],
[443,463,499,464,449,0,463,464,473],
[419,440,459,444,430,427,0,426,449],
[407,439,458,443,430,426,464,0,465],
[439,430,460,446,425,417,441,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,447,359,348,526,427,472,381],
[477,0,463,444,432,514,415,481,369],
[443,427,0,391,491,506,470,543,425],
[531,446,499,0,479,589,513,548,443],
[542,458,399,411,0,480,416,534,419],
[364,376,384,301,410,0,335,465,381],
[463,475,420,377,474,555,0,541,493],
[418,409,347,342,356,425,349,0,300],
[509,521,465,447,471,509,397,590,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,483,459,455,459,442,442,436],
[448,0,435,444,455,457,433,437,451],
[407,455,0,423,449,444,438,448,440],
[431,446,467,0,449,449,453,433,414],
[435,435,441,441,0,446,444,418,420],
[431,433,446,441,444,0,429,416,430],
[448,457,452,437,446,461,0,439,442],
[448,453,442,457,472,474,451,0,436],
[454,439,450,476,470,460,448,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,471,483,479,420,456,493,452],
[405,0,419,437,421,436,451,460,447],
[419,471,0,457,430,427,464,486,473],
[407,453,433,0,429,432,458,484,412],
[411,469,460,461,0,462,444,502,486],
[470,454,463,458,428,0,475,462,463],
[434,439,426,432,446,415,0,459,461],
[397,430,404,406,388,428,431,0,454],
[438,443,417,478,404,427,429,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,435,454,459,456,436,480,461],
[403,0,396,422,415,432,408,412,445],
[455,494,0,469,463,467,441,460,490],
[436,468,421,0,432,433,444,431,458],
[431,475,427,458,0,443,453,440,479],
[434,458,423,457,447,0,445,447,475],
[454,482,449,446,437,445,0,437,464],
[410,478,430,459,450,443,453,0,467],
[429,445,400,432,411,415,426,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,476,439,476,442,439,443,422],
[493,0,478,476,481,458,433,468,458],
[414,412,0,460,459,433,415,444,410],
[451,414,430,0,446,446,423,457,436],
[414,409,431,444,0,435,405,425,407],
[448,432,457,444,455,0,438,441,441],
[451,457,475,467,485,452,0,458,439],
[447,422,446,433,465,449,432,0,454],
[468,432,480,454,483,449,451,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,475,444,455,441,451,476,448],
[426,0,471,451,440,437,439,467,440],
[415,419,0,441,445,438,434,454,443],
[446,439,449,0,451,446,458,489,448],
[435,450,445,439,0,426,415,474,447],
[449,453,452,444,464,0,444,484,440],
[439,451,456,432,475,446,0,468,428],
[414,423,436,401,416,406,422,0,419],
[442,450,447,442,443,450,462,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,441,444,430,443,427,414,418],
[444,0,442,450,424,450,418,426,442],
[449,448,0,447,448,426,445,455,454],
[446,440,443,0,450,440,429,427,430],
[460,466,442,440,0,456,459,452,449],
[447,440,464,450,434,0,428,439,434],
[463,472,445,461,431,462,0,447,457],
[476,464,435,463,438,451,443,0,438],
[472,448,436,460,441,456,433,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,473,434,480,410,441,457,469],
[416,0,434,401,445,451,410,433,447],
[417,456,0,438,431,463,436,450,431],
[456,489,452,0,492,460,445,477,482],
[410,445,459,398,0,460,439,460,449],
[480,439,427,430,430,0,439,446,435],
[449,480,454,445,451,451,0,483,452],
[433,457,440,413,430,444,407,0,446],
[421,443,459,408,441,455,438,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,392,397,481,373,370,369,473],
[454,0,453,398,521,440,450,428,439],
[498,437,0,397,485,434,443,404,476],
[493,492,493,0,531,481,442,453,517],
[409,369,405,359,0,395,321,348,402],
[517,450,456,409,495,0,465,450,477],
[520,440,447,448,569,425,0,426,475],
[521,462,486,437,542,440,464,0,513],
[417,451,414,373,488,413,415,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,435,472,458,468,431,443,462],
[434,0,447,463,452,439,433,446,434],
[455,443,0,466,453,462,449,416,453],
[418,427,424,0,432,439,418,435,450],
[432,438,437,458,0,444,415,430,430],
[422,451,428,451,446,0,441,426,457],
[459,457,441,472,475,449,0,458,437],
[447,444,474,455,460,464,432,0,443],
[428,456,437,440,460,433,453,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,452,441,425,440,452,427,422],
[499,0,461,461,439,427,471,437,467],
[438,429,0,422,438,469,428,443,411],
[449,429,468,0,406,473,467,457,482],
[465,451,452,484,0,484,443,441,472],
[450,463,421,417,406,0,443,421,442],
[438,419,462,423,447,447,0,418,447],
[463,453,447,433,449,469,472,0,428],
[468,423,479,408,418,448,443,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,460,455,441,466,411,510,482],
[457,0,457,468,458,445,475,445,440],
[430,433,0,434,412,443,438,446,440],
[435,422,456,0,468,446,451,492,489],
[449,432,478,422,0,420,452,474,423],
[424,445,447,444,470,0,447,443,469],
[479,415,452,439,438,443,0,484,492],
[380,445,444,398,416,447,406,0,390],
[408,450,450,401,467,421,398,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,460,467,462,446,446,440,407],
[431,0,443,427,439,408,468,446,404],
[430,447,0,401,461,421,423,446,416],
[423,463,489,0,463,437,436,471,441],
[428,451,429,427,0,444,431,440,422],
[444,482,469,453,446,0,442,423,421],
[444,422,467,454,459,448,0,430,411],
[450,444,444,419,450,467,460,0,449],
[483,486,474,449,468,469,479,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,386,165,0,725,311,613,255],
[498,0,498,498,386,588,498,688,476],
[504,392,0,0,90,725,392,392,557],
[725,392,890,0,613,725,613,613,557],
[890,504,800,277,0,725,890,778,557],
[165,302,165,165,165,0,165,467,165],
[579,392,498,277,0,725,0,613,255],
[277,202,498,277,112,423,277,0,367],
[635,414,333,333,333,725,635,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,462,462,421,477,471,459,545],
[446,0,447,486,444,458,500,516,516],
[428,443,0,487,399,422,456,390,455],
[428,404,403,0,395,365,439,459,368],
[469,446,491,495,0,445,455,500,510],
[413,432,468,525,445,0,504,463,416],
[419,390,434,451,435,386,0,397,466],
[431,374,500,431,390,427,493,0,431],
[345,374,435,522,380,474,424,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,467,462,456,466,478,476,435],
[469,0,476,450,417,474,437,446,448],
[423,414,0,441,464,426,426,401,449],
[428,440,449,0,415,434,455,416,432],
[434,473,426,475,0,468,442,428,467],
[424,416,464,456,422,0,454,413,405],
[412,453,464,435,448,436,0,450,425],
[414,444,489,474,462,477,440,0,425],
[455,442,441,458,423,485,465,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,417,431,434,441,415,420,407],
[450,0,414,435,441,443,430,437,401],
[473,476,0,474,457,449,408,463,403],
[459,455,416,0,479,448,424,457,416],
[456,449,433,411,0,450,437,461,451],
[449,447,441,442,440,0,418,415,423],
[475,460,482,466,453,472,0,432,431],
[470,453,427,433,429,475,458,0,413],
[483,489,487,474,439,467,459,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,455,467,462,446,441,473,492],
[423,0,421,415,452,410,405,458,458],
[435,469,0,425,463,431,464,500,459],
[423,475,465,0,460,451,455,498,477],
[428,438,427,430,0,438,432,466,449],
[444,480,459,439,452,0,438,474,467],
[449,485,426,435,458,452,0,470,455],
[417,432,390,392,424,416,420,0,449],
[398,432,431,413,441,423,435,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,430,443,428,454,450,409,463],
[469,0,461,460,464,479,444,455,479],
[460,429,0,432,456,437,444,422,477],
[447,430,458,0,446,451,442,433,449],
[462,426,434,444,0,465,455,413,468],
[436,411,453,439,425,0,425,412,450],
[440,446,446,448,435,465,0,419,467],
[481,435,468,457,477,478,471,0,464],
[427,411,413,441,422,440,423,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,421,443,442,444,440,440],
[449,0,432,431,406,434,432,436,416],
[446,458,0,433,457,422,443,468,439],
[469,459,457,0,424,442,439,451,419],
[447,484,433,466,0,479,463,476,457],
[448,456,468,448,411,0,431,446,431],
[446,458,447,451,427,459,0,456,481],
[450,454,422,439,414,444,434,0,440],
[450,474,451,471,433,459,409,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,424,378,445,388,412,395,431],
[462,0,428,406,413,430,397,393,434],
[466,462,0,468,445,480,469,423,516],
[512,484,422,0,444,458,444,451,473],
[445,477,445,446,0,444,400,427,470],
[502,460,410,432,446,0,435,423,436],
[478,493,421,446,490,455,0,467,422],
[495,497,467,439,463,467,423,0,418],
[459,456,374,417,420,454,468,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,439,509,457,473,494,441,458],
[409,0,441,410,426,400,445,383,462],
[451,449,0,407,482,424,438,388,497],
[381,480,483,0,430,459,460,442,461],
[433,464,408,460,0,440,405,409,449],
[417,490,466,431,450,0,459,457,459],
[396,445,452,430,485,431,0,397,450],
[449,507,502,448,481,433,493,0,539],
[432,428,393,429,441,431,440,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,443,405,460,414,454,416,468],
[422,0,401,427,434,403,411,410,457],
[447,489,0,429,460,446,456,413,473],
[485,463,461,0,488,441,468,456,493],
[430,456,430,402,0,395,421,364,436],
[476,487,444,449,495,0,463,421,462],
[436,479,434,422,469,427,0,407,462],
[474,480,477,434,526,469,483,0,510],
[422,433,417,397,454,428,428,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,381,429,402,435,446,424,400],
[472,0,455,458,435,445,455,441,444],
[509,435,0,485,436,459,450,457,444],
[461,432,405,0,438,449,459,424,446],
[488,455,454,452,0,455,462,434,428],
[455,445,431,441,435,0,445,433,425],
[444,435,440,431,428,445,0,434,432],
[466,449,433,466,456,457,456,0,458],
[490,446,446,444,462,465,458,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,438,450,435,456,439,436,453],
[457,0,436,465,445,454,447,448,451],
[452,454,0,457,446,463,436,453,451],
[440,425,433,0,441,437,416,420,438],
[455,445,444,449,0,456,424,447,466],
[434,436,427,453,434,0,435,444,430],
[451,443,454,474,466,455,0,444,460],
[454,442,437,470,443,446,446,0,455],
[437,439,439,452,424,460,430,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,468,434,418,444,409,433,398],
[462,0,463,459,448,458,437,437,436],
[422,427,0,449,432,456,435,417,429],
[456,431,441,0,452,456,435,415,421],
[472,442,458,438,0,445,442,434,438],
[446,432,434,434,445,0,422,412,429],
[481,453,455,455,448,468,0,439,448],
[457,453,473,475,456,478,451,0,434],
[492,454,461,469,452,461,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,436,430,443,443,445,429,456],
[467,0,454,446,464,459,441,460,466],
[454,436,0,426,457,449,441,426,445],
[460,444,464,0,452,456,466,456,462],
[447,426,433,438,0,449,452,443,436],
[447,431,441,434,441,0,457,444,443],
[445,449,449,424,438,433,0,405,453],
[461,430,464,434,447,446,485,0,446],
[434,424,445,428,454,447,437,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,454,418,407,418,413,444,463],
[467,0,464,447,436,431,425,457,475],
[436,426,0,412,405,411,411,418,449],
[472,443,478,0,447,441,438,447,461],
[483,454,485,443,0,452,481,482,464],
[472,459,479,449,438,0,450,446,479],
[477,465,479,452,409,440,0,455,431],
[446,433,472,443,408,444,435,0,458],
[427,415,441,429,426,411,459,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,452,489,500,424,353,454,509],
[429,0,438,460,428,478,457,463,453],
[438,452,0,494,411,451,382,443,446],
[401,430,396,0,480,434,381,426,466],
[390,462,479,410,0,426,422,381,387],
[466,412,439,456,464,0,367,461,454],
[537,433,508,509,468,523,0,521,483],
[436,427,447,464,509,429,369,0,420],
[381,437,444,424,503,436,407,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,433,447,454,434,453,420,459],
[457,0,472,446,451,461,436,439,481],
[457,418,0,437,429,448,437,433,454],
[443,444,453,0,436,454,455,457,461],
[436,439,461,454,0,450,449,431,464],
[456,429,442,436,440,0,443,442,465],
[437,454,453,435,441,447,0,429,451],
[470,451,457,433,459,448,461,0,469],
[431,409,436,429,426,425,439,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,374,297,363,431,401,292,431],
[606,0,382,348,502,504,432,502,488],
[516,508,0,494,484,541,428,430,622],
[593,542,396,0,458,597,436,504,562],
[527,388,406,432,0,506,514,382,584],
[459,386,349,293,384,0,357,409,498],
[489,458,462,454,376,533,0,371,410],
[598,388,460,386,508,481,519,0,592],
[459,402,268,328,306,392,480,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,458,452,443,484,501,447],
[442,0,436,408,435,408,418,485,455],
[448,454,0,443,404,416,454,464,441],
[432,482,447,0,452,408,474,445,474],
[438,455,486,438,0,448,466,477,453],
[447,482,474,482,442,0,433,461,459],
[406,472,436,416,424,457,0,474,459],
[389,405,426,445,413,429,416,0,426],
[443,435,449,416,437,431,431,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,463,483,460,477,438,482,476],
[428,0,448,459,455,448,436,460,454],
[427,442,0,455,453,451,462,458,457],
[407,431,435,0,425,450,408,422,440],
[430,435,437,465,0,461,430,407,446],
[413,442,439,440,429,0,436,449,447],
[452,454,428,482,460,454,0,443,458],
[408,430,432,468,483,441,447,0,452],
[414,436,433,450,444,443,432,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,522,478,507,402,477,444,359],
[414,0,496,423,430,335,418,387,395],
[368,394,0,302,374,266,370,284,302],
[412,467,588,0,505,351,430,415,408],
[383,460,516,385,0,318,457,308,456],
[488,555,624,539,572,0,559,478,419],
[413,472,520,460,433,331,0,381,486],
[446,503,606,475,582,412,509,0,520],
[531,495,588,482,434,471,404,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,460,449,447,473,464,449,449],
[447,0,449,459,427,457,437,435,417],
[430,441,0,443,435,456,438,426,409],
[441,431,447,0,442,457,437,449,422],
[443,463,455,448,0,458,476,451,439],
[417,433,434,433,432,0,423,421,410],
[426,453,452,453,414,467,0,426,445],
[441,455,464,441,439,469,464,0,441],
[441,473,481,468,451,480,445,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,405,447,427,443,430,416,414],
[485,0,420,448,438,436,467,449,438],
[485,470,0,456,458,458,472,437,465],
[443,442,434,0,472,472,476,470,455],
[463,452,432,418,0,424,466,418,466],
[447,454,432,418,466,0,452,442,420],
[460,423,418,414,424,438,0,435,418],
[474,441,453,420,472,448,455,0,452],
[476,452,425,435,424,470,472,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,550,365,467,531,444,493,412],
[418,0,518,377,375,455,452,380,393],
[340,372,0,404,464,411,441,373,393],
[525,513,486,0,454,526,362,427,467],
[423,515,426,436,0,494,462,474,491],
[359,435,479,364,396,0,324,381,425],
[446,438,449,528,428,566,0,490,463],
[397,510,517,463,416,509,400,0,463],
[478,497,497,423,399,465,427,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,451,455,443,486,471,461],
[442,0,470,463,452,450,482,467,463],
[446,420,0,462,418,430,455,488,409],
[439,427,428,0,419,452,462,460,452],
[435,438,472,471,0,466,452,488,454],
[447,440,460,438,424,0,436,475,429],
[404,408,435,428,438,454,0,481,430],
[419,423,402,430,402,415,409,0,415],
[429,427,481,438,436,461,460,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,432,441,451,455,442,443,433],
[458,0,435,444,449,473,446,466,452],
[458,455,0,456,444,453,472,465,436],
[449,446,434,0,437,448,454,466,456],
[439,441,446,453,0,471,466,443,454],
[435,417,437,442,419,0,439,436,450],
[448,444,418,436,424,451,0,432,452],
[447,424,425,424,447,454,458,0,461],
[457,438,454,434,436,440,438,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,466,476,490,400,531,511,382],
[389,0,496,453,530,339,526,439,421],
[424,394,0,440,523,434,461,463,333],
[414,437,450,0,550,375,488,428,388],
[400,360,367,340,0,323,421,477,361],
[490,551,456,515,567,0,558,413,502],
[359,364,429,402,469,332,0,337,378],
[379,451,427,462,413,477,553,0,428],
[508,469,557,502,529,388,512,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,453,431,444,421,396,412,381],
[469,0,504,505,480,466,409,460,457],
[437,386,0,438,409,429,413,456,368],
[459,385,452,0,427,385,387,457,392],
[446,410,481,463,0,415,416,466,425],
[469,424,461,505,475,0,445,464,433],
[494,481,477,503,474,445,0,512,481],
[478,430,434,433,424,426,378,0,388],
[509,433,522,498,465,457,409,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,436,444,467,440,459,449,480],
[430,0,429,384,405,402,427,422,413],
[454,461,0,457,441,439,499,479,461],
[446,506,433,0,451,458,488,489,510],
[423,485,449,439,0,440,478,455,431],
[450,488,451,432,450,0,497,495,436],
[431,463,391,402,412,393,0,400,407],
[441,468,411,401,435,395,490,0,454],
[410,477,429,380,459,454,483,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,449,453,436,425,450,445,467],
[426,0,429,446,415,419,433,411,422],
[441,461,0,455,445,461,453,453,446],
[437,444,435,0,415,415,400,429,436],
[454,475,445,475,0,451,434,448,438],
[465,471,429,475,439,0,432,450,449],
[440,457,437,490,456,458,0,456,455],
[445,479,437,461,442,440,434,0,463],
[423,468,444,454,452,441,435,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,423,488,471,501,437,448,473],
[456,0,449,497,503,475,432,464,480],
[467,441,0,491,478,452,439,472,499],
[402,393,399,0,432,447,416,418,437],
[419,387,412,458,0,440,412,453,427],
[389,415,438,443,450,0,414,484,452],
[453,458,451,474,478,476,0,438,483],
[442,426,418,472,437,406,452,0,441],
[417,410,391,453,463,438,407,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,459,463,457,466,468,456,477],
[460,0,463,457,446,443,466,459,478],
[431,427,0,458,446,436,457,452,448],
[427,433,432,0,436,437,443,434,449],
[433,444,444,454,0,469,474,454,463],
[424,447,454,453,421,0,456,471,452],
[422,424,433,447,416,434,0,433,454],
[434,431,438,456,436,419,457,0,433],
[413,412,442,441,427,438,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,451,425,443,423,420,472,410],
[471,0,427,436,408,406,444,429,458],
[439,463,0,434,409,434,429,448,436],
[465,454,456,0,433,450,448,488,449],
[447,482,481,457,0,446,418,489,450],
[467,484,456,440,444,0,471,479,480],
[470,446,461,442,472,419,0,520,461],
[418,461,442,402,401,411,370,0,427],
[480,432,454,441,440,410,429,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,434,437,437,445,436,446,456],
[446,0,442,442,467,451,439,438,442],
[456,448,0,441,466,449,433,453,457],
[453,448,449,0,446,437,442,439,446],
[453,423,424,444,0,450,405,439,443],
[445,439,441,453,440,0,457,477,436],
[454,451,457,448,485,433,0,455,461],
[444,452,437,451,451,413,435,0,443],
[434,448,433,444,447,454,429,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,462,425,474,429,429,435,484],
[452,0,429,360,482,513,418,436,484],
[428,461,0,417,508,470,459,431,504],
[465,530,473,0,453,526,438,440,496],
[416,408,382,437,0,449,448,459,462],
[461,377,420,364,441,0,398,411,411],
[461,472,431,452,442,492,0,416,484],
[455,454,459,450,431,479,474,0,520],
[406,406,386,394,428,479,406,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,458,458,445,439,455,458,441],
[430,0,420,442,421,432,429,440,425],
[432,470,0,456,438,461,440,441,449],
[432,448,434,0,447,444,435,458,458],
[445,469,452,443,0,443,445,449,453],
[451,458,429,446,447,0,430,451,447],
[435,461,450,455,445,460,0,436,437],
[432,450,449,432,441,439,454,0,448],
[449,465,441,432,437,443,453,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,414,394,448,441,427,424,450],
[448,0,420,425,447,447,439,408,454],
[476,470,0,424,493,495,438,458,488],
[496,465,466,0,459,454,462,419,489],
[442,443,397,431,0,416,399,432,436],
[449,443,395,436,474,0,444,413,445],
[463,451,452,428,491,446,0,445,447],
[466,482,432,471,458,477,445,0,457],
[440,436,402,401,454,445,443,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,458,437,433,427,451,434,456],
[460,0,463,449,437,432,450,432,459],
[432,427,0,426,418,430,421,444,450],
[453,441,464,0,446,444,438,432,463],
[457,453,472,444,0,435,452,443,465],
[463,458,460,446,455,0,472,445,482],
[439,440,469,452,438,418,0,440,450],
[456,458,446,458,447,445,450,0,449],
[434,431,440,427,425,408,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,405,431,445,457,446,424,434],
[435,0,415,447,420,420,412,434,401],
[485,475,0,469,480,467,442,480,457],
[459,443,421,0,439,457,418,434,445],
[445,470,410,451,0,460,417,433,442],
[433,470,423,433,430,0,421,428,427],
[444,478,448,472,473,469,0,457,466],
[466,456,410,456,457,462,433,0,476],
[456,489,433,445,448,463,424,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,452,463,457,407,425,423,465],
[421,0,415,417,403,405,428,417,423],
[438,475,0,482,429,419,422,419,419],
[427,473,408,0,435,395,444,419,421],
[433,487,461,455,0,451,463,467,443],
[483,485,471,495,439,0,453,463,433],
[465,462,468,446,427,437,0,444,447],
[467,473,471,471,423,427,446,0,450],
[425,467,471,469,447,457,443,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,417,426,429,444,451,424,447],
[455,0,443,430,436,461,467,444,480],
[473,447,0,475,440,452,462,453,466],
[464,460,415,0,450,448,453,431,455],
[461,454,450,440,0,439,444,433,460],
[446,429,438,442,451,0,451,438,465],
[439,423,428,437,446,439,0,434,450],
[466,446,437,459,457,452,456,0,457],
[443,410,424,435,430,425,440,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,495,530,410,583,452,429,519],
[414,0,458,416,451,528,415,457,432],
[395,432,0,491,408,517,410,388,431],
[360,474,399,0,383,534,370,440,392],
[480,439,482,507,0,558,364,450,397],
[307,362,373,356,332,0,340,368,343],
[438,475,480,520,526,550,0,404,470],
[461,433,502,450,440,522,486,0,434],
[371,458,459,498,493,547,420,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,376,383,409,444,462,404,449],
[502,0,423,499,395,409,504,475,551],
[514,467,0,441,434,462,533,473,507],
[507,391,449,0,399,468,473,514,478],
[481,495,456,491,0,388,459,525,525],
[446,481,428,422,502,0,497,502,466],
[428,386,357,417,431,393,0,403,472],
[486,415,417,376,365,388,487,0,509],
[441,339,383,412,365,424,418,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,468,472,438,462,468,451,465],
[401,0,446,445,419,406,441,430,434],
[422,444,0,447,459,448,469,453,434],
[418,445,443,0,418,438,462,426,438],
[452,471,431,472,0,443,485,454,451],
[428,484,442,452,447,0,472,451,427],
[422,449,421,428,405,418,0,438,431],
[439,460,437,464,436,439,452,0,460],
[425,456,456,452,439,463,459,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,468,451,396,414,497,369,445],
[450,0,460,491,411,421,466,435,452],
[422,430,0,433,435,402,463,411,478],
[439,399,457,0,407,371,455,416,464],
[494,479,455,483,0,418,514,474,481],
[476,469,488,519,472,0,512,438,487],
[393,424,427,435,376,378,0,409,471],
[521,455,479,474,416,452,481,0,485],
[445,438,412,426,409,403,419,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,417,428,436,452,434,439,434],
[454,0,428,440,444,464,433,437,451],
[473,462,0,461,444,463,455,448,465],
[462,450,429,0,449,466,439,434,444],
[454,446,446,441,0,467,460,445,448],
[438,426,427,424,423,0,428,435,421],
[456,457,435,451,430,462,0,451,428],
[451,453,442,456,445,455,439,0,456],
[456,439,425,446,442,469,462,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,473,441,477,447,420,413,479],
[500,0,496,471,489,450,419,458,507],
[417,394,0,445,447,432,416,399,416],
[449,419,445,0,450,497,448,440,472],
[413,401,443,440,0,435,437,435,450],
[443,440,458,393,455,0,414,425,433],
[470,471,474,442,453,476,0,468,492],
[477,432,491,450,455,465,422,0,431],
[411,383,474,418,440,457,398,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,473,512,516,551,448,466,432],
[465,0,470,482,466,477,518,440,421],
[417,420,0,459,422,464,435,451,427],
[378,408,431,0,543,453,396,445,449],
[374,424,468,347,0,441,438,428,384],
[339,413,426,437,449,0,390,379,396],
[442,372,455,494,452,500,0,491,399],
[424,450,439,445,462,511,399,0,456],
[458,469,463,441,506,494,491,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,457,454,439,450,461,439,449],
[430,0,419,443,439,434,447,434,429],
[433,471,0,422,420,435,438,443,441],
[436,447,468,0,431,432,466,457,458],
[451,451,470,459,0,468,458,452,442],
[440,456,455,458,422,0,454,446,461],
[429,443,452,424,432,436,0,430,431],
[451,456,447,433,438,444,460,0,467],
[441,461,449,432,448,429,459,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,471,473,469,467,464,471,479],
[467,0,467,440,479,451,469,477,474],
[419,423,0,426,444,442,461,450,452],
[417,450,464,0,441,432,463,447,474],
[421,411,446,449,0,427,455,441,490],
[423,439,448,458,463,0,465,458,478],
[426,421,429,427,435,425,0,435,479],
[419,413,440,443,449,432,455,0,461],
[411,416,438,416,400,412,411,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,417,405,435,422,410,405,407],
[455,0,451,440,443,417,420,409,446],
[473,439,0,454,424,412,392,383,423],
[485,450,436,0,452,455,421,397,415],
[455,447,466,438,0,438,412,406,464],
[468,473,478,435,452,0,442,412,441],
[480,470,498,469,478,448,0,439,459],
[485,481,507,493,484,478,451,0,443],
[483,444,467,475,426,449,431,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,428,443,467,455,445,446,446],
[441,0,448,423,458,425,443,404,434],
[462,442,0,463,466,456,455,438,475],
[447,467,427,0,474,462,440,439,462],
[423,432,424,416,0,430,411,400,430],
[435,465,434,428,460,0,423,435,465],
[445,447,435,450,479,467,0,431,472],
[444,486,452,451,490,455,459,0,477],
[444,456,415,428,460,425,418,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,535,364,452,481,388,359,421],
[445,0,527,408,420,512,454,407,430],
[355,363,0,326,436,421,347,369,360],
[526,482,564,0,491,531,482,426,460],
[438,470,454,399,0,463,406,375,381],
[409,378,469,359,427,0,352,366,384],
[502,436,543,408,484,538,0,406,472],
[531,483,521,464,515,524,484,0,442],
[469,460,530,430,509,506,418,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,405,429,451,404,480,462,391],
[462,0,402,470,420,414,398,418,365],
[485,488,0,470,457,470,437,483,453],
[461,420,420,0,397,415,472,479,424],
[439,470,433,493,0,455,498,472,440],
[486,476,420,475,435,0,461,434,475],
[410,492,453,418,392,429,0,451,446],
[428,472,407,411,418,456,439,0,456],
[499,525,437,466,450,415,444,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,387,462,425,399,450,468,467],
[452,0,439,502,456,457,464,484,482],
[503,451,0,490,465,459,444,479,486],
[428,388,400,0,415,411,446,464,471],
[465,434,425,475,0,434,445,461,484],
[491,433,431,479,456,0,444,459,503],
[440,426,446,444,445,446,0,501,477],
[422,406,411,426,429,431,389,0,463],
[423,408,404,419,406,387,413,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,475,433,478,436,438,429,478],
[460,0,449,388,449,450,440,434,484],
[415,441,0,441,474,445,475,457,472],
[457,502,449,0,488,481,486,444,457],
[412,441,416,402,0,433,422,433,463],
[454,440,445,409,457,0,436,459,481],
[452,450,415,404,468,454,0,428,469],
[461,456,433,446,457,431,462,0,450],
[412,406,418,433,427,409,421,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,454,446,430,482,428,435,449],
[452,0,467,461,434,463,445,455,445],
[436,423,0,417,440,458,438,437,439],
[444,429,473,0,446,470,446,446,442],
[460,456,450,444,0,463,464,438,461],
[408,427,432,420,427,0,424,417,416],
[462,445,452,444,426,466,0,429,438],
[455,435,453,444,452,473,461,0,436],
[441,445,451,448,429,474,452,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,438,439,424,447,447,436,423],
[435,0,445,450,426,420,442,436,436],
[452,445,0,428,450,458,445,435,406],
[451,440,462,0,414,438,448,446,420],
[466,464,440,476,0,443,448,435,447],
[443,470,432,452,447,0,459,454,421],
[443,448,445,442,442,431,0,464,416],
[454,454,455,444,455,436,426,0,436],
[467,454,484,470,443,469,474,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,457,447,441,453,451,443,450],
[455,0,454,434,391,444,449,466,418],
[433,436,0,427,413,451,409,429,435],
[443,456,463,0,427,431,443,464,446],
[449,499,477,463,0,470,429,465,480],
[437,446,439,459,420,0,434,465,454],
[439,441,481,447,461,456,0,447,426],
[447,424,461,426,425,425,443,0,449],
[440,472,455,444,410,436,464,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,405,391,455,418,465,430,444],
[447,0,420,404,468,384,457,375,399],
[485,470,0,430,547,444,461,470,464],
[499,486,460,0,481,442,432,450,454],
[435,422,343,409,0,397,424,413,389],
[472,506,446,448,493,0,436,397,499],
[425,433,429,458,466,454,0,460,449],
[460,515,420,440,477,493,430,0,455],
[446,491,426,436,501,391,441,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,414,419,416,435,436,416,427],
[498,0,465,445,458,458,469,423,474],
[476,425,0,419,455,454,459,449,464],
[471,445,471,0,458,438,453,439,460],
[474,432,435,432,0,419,467,431,475],
[455,432,436,452,471,0,462,432,489],
[454,421,431,437,423,428,0,477,482],
[474,467,441,451,459,458,413,0,479],
[463,416,426,430,415,401,408,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,415,433,446,417,436,432],
[444,0,466,446,439,449,440,440,433],
[436,424,0,414,426,425,451,409,403],
[475,444,476,0,467,456,416,458,435],
[457,451,464,423,0,447,403,436,432],
[444,441,465,434,443,0,423,455,418],
[473,450,439,474,487,467,0,454,465],
[454,450,481,432,454,435,436,0,431],
[458,457,487,455,458,472,425,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,448,415,468,397,424,448],
[451,0,463,403,367,459,423,410,381],
[442,427,0,419,414,444,385,470,447],
[442,487,471,0,444,451,442,430,404],
[475,523,476,446,0,472,451,431,407],
[422,431,446,439,418,0,436,460,380],
[493,467,505,448,439,454,0,427,399],
[466,480,420,460,459,430,463,0,387],
[442,509,443,486,483,510,491,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,467,445,456,471,412,412,440],
[440,0,459,446,467,464,429,434,460],
[423,431,0,422,440,452,427,412,444],
[445,444,468,0,500,455,453,438,470],
[434,423,450,390,0,462,435,402,425],
[419,426,438,435,428,0,437,412,463],
[478,461,463,437,455,453,0,454,467],
[478,456,478,452,488,478,436,0,447],
[450,430,446,420,465,427,423,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,451,430,449,437,426,425,453],
[439,0,459,465,449,455,438,454,435],
[439,431,0,426,434,434,442,448,420],
[460,425,464,0,407,462,432,436,434],
[441,441,456,483,0,446,452,456,450],
[453,435,456,428,444,0,438,441,433],
[464,452,448,458,438,452,0,443,438],
[465,436,442,454,434,449,447,0,425],
[437,455,470,456,440,457,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,416,432,451,451,460,470,417],
[458,0,433,448,443,458,398,507,446],
[474,457,0,474,467,469,483,473,427],
[458,442,416,0,464,445,464,453,441],
[439,447,423,426,0,431,452,481,426],
[439,432,421,445,459,0,441,444,441],
[430,492,407,426,438,449,0,474,401],
[420,383,417,437,409,446,416,0,351],
[473,444,463,449,464,449,489,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,442,397,440,441,427,428,466],
[433,0,466,453,439,467,441,436,455],
[448,424,0,417,420,462,437,441,448],
[493,437,473,0,449,467,435,456,450],
[450,451,470,441,0,438,433,472,456],
[449,423,428,423,452,0,436,446,442],
[463,449,453,455,457,454,0,441,470],
[462,454,449,434,418,444,449,0,456],
[424,435,442,440,434,448,420,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,478,470,441,497,494,523,571],
[389,0,427,380,402,518,484,479,489],
[412,463,0,448,470,434,432,478,486],
[420,510,442,0,484,460,436,480,457],
[449,488,420,406,0,492,466,441,444],
[393,372,456,430,398,0,444,451,430],
[396,406,458,454,424,446,0,443,412],
[367,411,412,410,449,439,447,0,461],
[319,401,404,433,446,460,478,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,530,424,402,466,455,458,490],
[393,0,514,401,392,474,443,445,463],
[360,376,0,393,419,469,411,401,412],
[466,489,497,0,426,482,442,446,450],
[488,498,471,464,0,501,459,442,526],
[424,416,421,408,389,0,410,377,457],
[435,447,479,448,431,480,0,441,453],
[432,445,489,444,448,513,449,0,495],
[400,427,478,440,364,433,437,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,449,356,440,420,401,382,436],
[488,0,437,447,520,455,489,445,436],
[441,453,0,413,450,431,455,386,436],
[534,443,477,0,519,457,476,442,468],
[450,370,440,371,0,406,390,399,410],
[470,435,459,433,484,0,478,447,465],
[489,401,435,414,500,412,0,438,404],
[508,445,504,448,491,443,452,0,461],
[454,454,454,422,480,425,486,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,439,476,427,450,424,436,439],
[400,0,448,428,413,375,443,416,383],
[451,442,0,476,455,427,448,423,432],
[414,462,414,0,447,395,455,406,417],
[463,477,435,443,0,431,428,396,429],
[440,515,463,495,459,0,461,446,435],
[466,447,442,435,462,429,0,419,417],
[454,474,467,484,494,444,471,0,453],
[451,507,458,473,461,455,473,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,468,440,455,440,447,443],
[446,0,458,454,445,444,461,454,441],
[437,432,0,453,448,443,442,443,460],
[422,436,437,0,437,422,435,453,427],
[450,445,442,453,0,448,444,450,450],
[435,446,447,468,442,0,453,446,445],
[450,429,448,455,446,437,0,445,458],
[443,436,447,437,440,444,445,0,446],
[447,449,430,463,440,445,432,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,460,505,504,495,456,445,463],
[397,0,407,458,432,446,441,435,441],
[430,483,0,465,454,441,474,431,467],
[385,432,425,0,446,444,449,437,446],
[386,458,436,444,0,454,446,453,451],
[395,444,449,446,436,0,451,428,469],
[434,449,416,441,444,439,0,457,449],
[445,455,459,453,437,462,433,0,448],
[427,449,423,444,439,421,441,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,462,458,471,449,426,467,463],
[435,0,428,410,457,416,412,441,424],
[428,462,0,431,458,427,444,456,444],
[432,480,459,0,457,452,449,465,440],
[419,433,432,433,0,417,426,450,446],
[441,474,463,438,473,0,458,467,459],
[464,478,446,441,464,432,0,465,464],
[423,449,434,425,440,423,425,0,443],
[427,466,446,450,444,431,426,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,483,484,466,445,475,487,456],
[437,0,479,451,478,466,487,495,464],
[407,411,0,423,429,431,440,468,466],
[406,439,467,0,433,440,470,501,445],
[424,412,461,457,0,431,470,485,394],
[445,424,459,450,459,0,447,490,466],
[415,403,450,420,420,443,0,516,487],
[403,395,422,389,405,400,374,0,426],
[434,426,424,445,496,424,403,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,408,500,424,449,453,413,442],
[449,0,438,498,466,408,488,432,460],
[482,452,0,496,446,468,446,402,435],
[390,392,394,0,388,408,414,405,398],
[466,424,444,502,0,437,429,414,411],
[441,482,422,482,453,0,472,459,480],
[437,402,444,476,461,418,0,436,399],
[477,458,488,485,476,431,454,0,457],
[448,430,455,492,479,410,491,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,457,446,458,442,454,446,461],
[440,0,460,441,448,434,435,441,439],
[433,430,0,423,430,418,418,426,424],
[444,449,467,0,439,435,448,446,453],
[432,442,460,451,0,448,448,443,464],
[448,456,472,455,442,0,440,454,458],
[436,455,472,442,442,450,0,438,469],
[444,449,464,444,447,436,452,0,456],
[429,451,466,437,426,432,421,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,438,366,459,321,419,437,409],
[529,0,490,481,471,428,602,537,497],
[452,400,0,392,432,368,488,384,424],
[524,409,498,0,492,474,559,590,507],
[431,419,458,398,0,409,516,483,487],
[569,462,522,416,481,0,512,436,508],
[471,288,402,331,374,378,0,471,397],
[453,353,506,300,407,454,419,0,432],
[481,393,466,383,403,382,493,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,470,418,466,383,402,429,430],
[460,0,540,442,463,482,499,491,468],
[420,350,0,395,416,416,489,397,390],
[472,448,495,0,443,455,474,468,462],
[424,427,474,447,0,429,472,431,432],
[507,408,474,435,461,0,511,468,460],
[488,391,401,416,418,379,0,452,442],
[461,399,493,422,459,422,438,0,463],
[460,422,500,428,458,430,448,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,446,445,439,434,441,444,428],
[455,0,457,450,430,434,426,415,427],
[444,433,0,470,425,429,430,455,443],
[445,440,420,0,424,433,431,438,435],
[451,460,465,466,0,435,431,456,449],
[456,456,461,457,455,0,439,464,431],
[449,464,460,459,459,451,0,464,442],
[446,475,435,452,434,426,426,0,423],
[462,463,447,455,441,459,448,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,478,443,431,437,438,392,423],
[496,0,492,468,461,427,498,486,431],
[412,398,0,455,393,426,438,483,421],
[447,422,435,0,365,439,426,441,380],
[459,429,497,525,0,488,478,519,468],
[453,463,464,451,402,0,464,469,449],
[452,392,452,464,412,426,0,444,399],
[498,404,407,449,371,421,446,0,368],
[467,459,469,510,422,441,491,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,429,479,467,422,424,441],
[445,0,431,435,450,453,446,465,436],
[447,459,0,420,451,435,414,427,425],
[461,455,470,0,471,478,441,463,436],
[411,440,439,419,0,424,405,432,418],
[423,437,455,412,466,0,422,442,413],
[468,444,476,449,485,468,0,460,472],
[466,425,463,427,458,448,430,0,430],
[449,454,465,454,472,477,418,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,496,477,463,446,462,463,465],
[468,0,475,490,478,444,488,454,444],
[394,415,0,465,472,446,451,440,413],
[413,400,425,0,448,414,437,399,410],
[427,412,418,442,0,448,442,440,407],
[444,446,444,476,442,0,459,445,445],
[428,402,439,453,448,431,0,455,452],
[427,436,450,491,450,445,435,0,444],
[425,446,477,480,483,445,438,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,440,440,420,435,430,435,432],
[450,0,455,438,435,425,428,448,433],
[450,435,0,438,431,424,442,449,434],
[450,452,452,0,443,426,435,456,430],
[470,455,459,447,0,440,457,457,462],
[455,465,466,464,450,0,441,465,448],
[460,462,448,455,433,449,0,453,435],
[455,442,441,434,433,425,437,0,456],
[458,457,456,460,428,442,455,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,431,459,466,430,466,430,428],
[438,0,446,452,457,450,442,421,456],
[459,444,0,456,459,445,457,450,459],
[431,438,434,0,459,448,435,432,438],
[424,433,431,431,0,444,421,423,422],
[460,440,445,442,446,0,451,426,438],
[424,448,433,455,469,439,0,429,455],
[460,469,440,458,467,464,461,0,458],
[462,434,431,452,468,452,435,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,467,470,433,455,443,460,468],
[436,0,455,459,452,482,457,439,434],
[423,435,0,454,438,465,427,420,469],
[420,431,436,0,425,466,445,428,448],
[457,438,452,465,0,471,457,449,465],
[435,408,425,424,419,0,426,439,458],
[447,433,463,445,433,464,0,443,450],
[430,451,470,462,441,451,447,0,463],
[422,456,421,442,425,432,440,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,396,430,405,435,439,470,450],
[464,0,442,422,424,448,444,438,463],
[494,448,0,447,451,444,470,460,471],
[460,468,443,0,454,453,439,446,457],
[485,466,439,436,0,453,424,455,455],
[455,442,446,437,437,0,440,459,454],
[451,446,420,451,466,450,0,470,453],
[420,452,430,444,435,431,420,0,476],
[440,427,419,433,435,436,437,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,506,469,429,483,430,425,495],
[433,0,455,434,372,442,428,423,387],
[384,435,0,431,426,484,465,423,502],
[421,456,459,0,425,507,438,485,456],
[461,518,464,465,0,490,441,378,453],
[407,448,406,383,400,0,444,432,465],
[460,462,425,452,449,446,0,445,491],
[465,467,467,405,512,458,445,0,486],
[395,503,388,434,437,425,399,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,519,496,469,452,484,457,440],
[407,0,457,446,455,420,428,426,406],
[371,433,0,443,433,399,426,426,417],
[394,444,447,0,450,405,435,451,411],
[421,435,457,440,0,404,435,428,418],
[438,470,491,485,486,0,472,451,453],
[406,462,464,455,455,418,0,457,400],
[433,464,464,439,462,439,433,0,436],
[450,484,473,479,472,437,490,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,434,416,412,438,484,433,421],
[453,0,485,444,460,471,466,467,474],
[456,405,0,449,435,464,441,437,433],
[474,446,441,0,440,462,435,454,448],
[478,430,455,450,0,467,458,453,432],
[452,419,426,428,423,0,476,442,455],
[406,424,449,455,432,414,0,431,437],
[457,423,453,436,437,448,459,0,426],
[469,416,457,442,458,435,453,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,498,500,448,442,458,448,383],
[516,0,497,544,410,510,464,492,479],
[392,393,0,434,332,427,479,465,396],
[390,346,456,0,353,416,445,437,347],
[442,480,558,537,0,470,573,511,436],
[448,380,463,474,420,0,494,491,403],
[432,426,411,445,317,396,0,419,331],
[442,398,425,453,379,399,471,0,388],
[507,411,494,543,454,487,559,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,481,419,447,448,448,454,465],
[412,0,442,393,481,408,401,447,433],
[409,448,0,397,460,422,410,452,434],
[471,497,493,0,459,435,438,443,468],
[443,409,430,431,0,392,433,410,428],
[442,482,468,455,498,0,452,487,478],
[442,489,480,452,457,438,0,430,491],
[436,443,438,447,480,403,460,0,425],
[425,457,456,422,462,412,399,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,452,466,458,453,462,436,450],
[446,0,444,440,456,445,464,448,435],
[438,446,0,446,446,453,466,459,443],
[424,450,444,0,436,432,452,429,447],
[432,434,444,454,0,446,431,445,446],
[437,445,437,458,444,0,475,459,454],
[428,426,424,438,459,415,0,428,438],
[454,442,431,461,445,431,462,0,447],
[440,455,447,443,444,436,452,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,424,465,451,442,477,437,441],
[426,0,440,472,457,438,458,455,437],
[466,450,0,472,460,444,471,439,455],
[425,418,418,0,427,436,447,413,413],
[439,433,430,463,0,441,441,412,440],
[448,452,446,454,449,0,464,435,435],
[413,432,419,443,449,426,0,413,432],
[453,435,451,477,478,455,477,0,458],
[449,453,435,477,450,455,458,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,452,447,449,440,412,435,417],
[497,0,482,465,470,483,446,459,444],
[438,408,0,418,459,454,433,442,436],
[443,425,472,0,471,459,428,438,431],
[441,420,431,419,0,451,416,427,429],
[450,407,436,431,439,0,416,414,403],
[478,444,457,462,474,474,0,459,473],
[455,431,448,452,463,476,431,0,413],
[473,446,454,459,461,487,417,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,378,420,430,368,418,398,422],
[452,0,395,413,448,410,391,420,426],
[512,495,0,454,507,433,468,443,455],
[470,477,436,0,459,450,451,473,441],
[460,442,383,431,0,394,428,410,388],
[522,480,457,440,496,0,460,477,466],
[472,499,422,439,462,430,0,464,450],
[492,470,447,417,480,413,426,0,438],
[468,464,435,449,502,424,440,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,431,485,478,457,451,459,450],
[448,0,435,428,444,436,433,395,424],
[459,455,0,433,457,421,460,447,444],
[405,462,457,0,458,454,449,418,417],
[412,446,433,432,0,416,416,450,398],
[433,454,469,436,474,0,479,466,447],
[439,457,430,441,474,411,0,430,415],
[431,495,443,472,440,424,460,0,445],
[440,466,446,473,492,443,475,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,345,346,428,473,361,451,446],
[517,0,414,359,420,475,507,450,430],
[545,476,0,348,417,578,356,458,364],
[544,531,542,0,488,710,434,595,304],
[462,470,473,402,0,577,409,457,372],
[417,415,312,180,313,0,296,418,281],
[529,383,534,456,481,594,0,504,505],
[439,440,432,295,433,472,386,0,401],
[444,460,526,586,518,609,385,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,476,421,352,346,420,375,428],
[493,0,441,477,351,399,511,446,437],
[414,449,0,458,374,418,421,366,415],
[469,413,432,0,428,429,483,426,468],
[538,539,516,462,0,441,568,485,509],
[544,491,472,461,449,0,470,535,444],
[470,379,469,407,322,420,0,529,440],
[515,444,524,464,405,355,361,0,465],
[462,453,475,422,381,446,450,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,465,451,443,451,443,476,421],
[429,0,450,416,459,465,420,482,415],
[425,440,0,440,454,434,444,466,427],
[439,474,450,0,475,458,448,476,450],
[447,431,436,415,0,461,430,463,448],
[439,425,456,432,429,0,424,462,412],
[447,470,446,442,460,466,0,481,433],
[414,408,424,414,427,428,409,0,410],
[469,475,463,440,442,478,457,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,434,432,360,442,456,423,397],
[538,0,498,488,486,504,461,456,417],
[456,392,0,402,416,394,419,423,397],
[458,402,488,0,445,500,391,483,404],
[530,404,474,445,0,465,499,453,449],
[448,386,496,390,425,0,410,418,392],
[434,429,471,499,391,480,0,483,441],
[467,434,467,407,437,472,407,0,369],
[493,473,493,486,441,498,449,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,462,468,447,457,428,440,463],
[433,0,451,439,452,489,437,451,461],
[428,439,0,454,435,467,433,435,458],
[422,451,436,0,430,450,442,446,473],
[443,438,455,460,0,465,431,445,449],
[433,401,423,440,425,0,429,433,447],
[462,453,457,448,459,461,0,444,465],
[450,439,455,444,445,457,446,0,473],
[427,429,432,417,441,443,425,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,441,455,440,442,438,431,456],
[420,0,431,445,442,430,416,424,429],
[449,459,0,420,460,444,432,422,449],
[435,445,470,0,464,416,453,445,446],
[450,448,430,426,0,445,446,430,426],
[448,460,446,474,445,0,459,429,468],
[452,474,458,437,444,431,0,454,444],
[459,466,468,445,460,461,436,0,452],
[434,461,441,444,464,422,446,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,466,500,465,465,464,450,429],
[431,0,434,437,459,484,502,437,435],
[424,456,0,456,440,466,455,462,449],
[390,453,434,0,441,468,399,413,446],
[425,431,450,449,0,452,452,461,446],
[425,406,424,422,438,0,459,446,436],
[426,388,435,491,438,431,0,443,439],
[440,453,428,477,429,444,447,0,415],
[461,455,441,444,444,454,451,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,440,440,441,448,445,436,445],
[458,0,420,432,449,421,442,441,457],
[450,470,0,436,483,459,438,455,457],
[450,458,454,0,466,432,424,443,435],
[449,441,407,424,0,415,458,458,436],
[442,469,431,458,475,0,462,443,470],
[445,448,452,466,432,428,0,453,424],
[454,449,435,447,432,447,437,0,444],
[445,433,433,455,454,420,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,392,314,490,389,414,408,533],
[570,0,425,444,487,455,455,488,515],
[498,465,0,446,436,428,483,527,480],
[576,446,444,0,476,433,486,496,513],
[400,403,454,414,0,448,471,385,410],
[501,435,462,457,442,0,442,499,508],
[476,435,407,404,419,448,0,467,481],
[482,402,363,394,505,391,423,0,412],
[357,375,410,377,480,382,409,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,386,432,404,409,408,434,379],
[508,0,405,451,471,482,435,412,399],
[504,485,0,473,488,467,490,407,456],
[458,439,417,0,426,493,417,436,390],
[486,419,402,464,0,479,435,419,415],
[481,408,423,397,411,0,433,404,406],
[482,455,400,473,455,457,0,449,395],
[456,478,483,454,471,486,441,0,444],
[511,491,434,500,475,484,495,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,465,467,455,470,432,462,456],
[417,0,462,460,473,455,433,440,439],
[425,428,0,421,448,451,432,454,442],
[423,430,469,0,462,441,427,435,433],
[435,417,442,428,0,463,452,433,415],
[420,435,439,449,427,0,432,438,439],
[458,457,458,463,438,458,0,466,448],
[428,450,436,455,457,452,424,0,419],
[434,451,448,457,475,451,442,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,428,442,427,425,437,434,424],
[462,0,427,463,440,434,459,460,447],
[462,463,0,467,432,432,447,445,430],
[448,427,423,0,407,450,435,422,429],
[463,450,458,483,0,438,444,475,436],
[465,456,458,440,452,0,428,448,453],
[453,431,443,455,446,462,0,444,456],
[456,430,445,468,415,442,446,0,437],
[466,443,460,461,454,437,434,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,420,428,421,425,422,444,439],
[443,0,436,461,417,425,436,473,435],
[470,454,0,439,440,446,467,485,430],
[462,429,451,0,433,437,428,456,457],
[469,473,450,457,0,442,449,463,471],
[465,465,444,453,448,0,461,463,430],
[468,454,423,462,441,429,0,463,457],
[446,417,405,434,427,427,427,0,444],
[451,455,460,433,419,460,433,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,436,419,422,428,472,440,416],
[458,0,432,421,451,418,459,428,435],
[454,458,0,395,441,425,466,451,402],
[471,469,495,0,427,451,467,453,467],
[468,439,449,463,0,475,464,454,446],
[462,472,465,439,415,0,450,440,430],
[418,431,424,423,426,440,0,441,415],
[450,462,439,437,436,450,449,0,427],
[474,455,488,423,444,460,475,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,323,456,433,384,445,442,515],
[501,0,421,498,458,420,410,340,430],
[567,469,0,416,474,500,529,453,420],
[434,392,474,0,427,529,525,392,477],
[457,432,416,463,0,429,485,476,509],
[506,470,390,361,461,0,488,404,479],
[445,480,361,365,405,402,0,449,358],
[448,550,437,498,414,486,441,0,350],
[375,460,470,413,381,411,532,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,570,642,498,634,692,686,380],
[410,0,344,220,366,464,502,410,8],
[320,546,0,328,410,464,692,744,252],
[248,670,562,0,584,588,728,582,480],
[392,524,480,306,0,252,646,662,334],
[256,426,426,302,638,0,630,492,280],
[198,388,198,162,244,260,0,460,8],
[204,480,146,308,228,398,430,0,146],
[510,882,638,410,556,610,882,744,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,431,477,441,476,452,442,440],
[481,0,449,469,484,450,420,424,423],
[459,441,0,478,465,472,471,477,514],
[413,421,412,0,433,459,484,411,425],
[449,406,425,457,0,462,425,401,454],
[414,440,418,431,428,0,444,456,419],
[438,470,419,406,465,446,0,428,433],
[448,466,413,479,489,434,462,0,472],
[450,467,376,465,436,471,457,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,399,430,463,334,427,409,379],
[447,0,389,467,430,402,448,442,427],
[491,501,0,509,494,409,475,494,487],
[460,423,381,0,434,451,449,412,415],
[427,460,396,456,0,433,460,396,431],
[556,488,481,439,457,0,518,508,465],
[463,442,415,441,430,372,0,470,446],
[481,448,396,478,494,382,420,0,470],
[511,463,403,475,459,425,444,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,445,453,450,431,451,429,455],
[429,0,430,442,454,424,438,458,459],
[445,460,0,438,459,442,473,445,481],
[437,448,452,0,454,439,461,482,463],
[440,436,431,436,0,421,436,434,419],
[459,466,448,451,469,0,457,444,475],
[439,452,417,429,454,433,0,420,449],
[461,432,445,408,456,446,470,0,454],
[435,431,409,427,471,415,441,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,414,467,477,456,449,474,445],
[443,0,458,447,461,505,490,482,409],
[476,432,0,467,497,460,471,495,444],
[423,443,423,0,492,462,466,478,420],
[413,429,393,398,0,434,448,449,395],
[434,385,430,428,456,0,453,460,412],
[441,400,419,424,442,437,0,493,441],
[416,408,395,412,441,430,397,0,391],
[445,481,446,470,495,478,449,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,463,466,417,447,457,456,417],
[459,0,491,491,493,490,482,450,439],
[427,399,0,467,413,450,432,409,413],
[424,399,423,0,434,412,422,429,422],
[473,397,477,456,0,455,463,448,434],
[443,400,440,478,435,0,452,428,429],
[433,408,458,468,427,438,0,425,401],
[434,440,481,461,442,462,465,0,459],
[473,451,477,468,456,461,489,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,484,453,477,462,472,461,453],
[455,0,479,442,462,452,453,453,436],
[406,411,0,456,456,422,438,443,430],
[437,448,434,0,452,437,445,454,434],
[413,428,434,438,0,422,439,440,420],
[428,438,468,453,468,0,434,448,429],
[418,437,452,445,451,456,0,447,453],
[429,437,447,436,450,442,443,0,425],
[437,454,460,456,470,461,437,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,437,437,438,430,434,412,424],
[465,0,459,445,444,461,446,429,434],
[453,431,0,458,437,452,425,434,434],
[453,445,432,0,447,437,429,415,453],
[452,446,453,443,0,435,439,439,427],
[460,429,438,453,455,0,459,416,445],
[456,444,465,461,451,431,0,437,440],
[478,461,456,475,451,474,453,0,443],
[466,456,456,437,463,445,450,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,451,449,444,465,474,451,441],
[432,0,443,451,481,454,479,449,464],
[439,447,0,449,460,413,483,430,440],
[441,439,441,0,489,480,481,456,463],
[446,409,430,401,0,420,426,429,428],
[425,436,477,410,470,0,460,434,461],
[416,411,407,409,464,430,0,413,436],
[439,441,460,434,461,456,477,0,468],
[449,426,450,427,462,429,454,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,448,442,424,463,490,476,435],
[409,0,418,407,374,440,406,433,410],
[442,472,0,486,447,482,481,441,442],
[448,483,404,0,417,468,431,444,412],
[466,516,443,473,0,472,457,452,455],
[427,450,408,422,418,0,422,453,467],
[400,484,409,459,433,468,0,414,457],
[414,457,449,446,438,437,476,0,467],
[455,480,448,478,435,423,433,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,436,467,436,412,431,444,422],
[452,0,470,458,451,449,442,450,448],
[454,420,0,448,447,444,437,433,448],
[423,432,442,0,428,440,437,434,447],
[454,439,443,462,0,449,453,455,449],
[478,441,446,450,441,0,426,453,451],
[459,448,453,453,437,464,0,467,458],
[446,440,457,456,435,437,423,0,453],
[468,442,442,443,441,439,432,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,429,500,423,451,459,433,463],
[464,0,487,468,493,446,442,451,449],
[461,403,0,500,451,430,474,443,481],
[390,422,390,0,424,402,442,454,453],
[467,397,439,466,0,439,427,435,458],
[439,444,460,488,451,0,462,447,491],
[431,448,416,448,463,428,0,410,473],
[457,439,447,436,455,443,480,0,430],
[427,441,409,437,432,399,417,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,484,428,477,446,513,549,479],
[349,0,422,369,404,422,414,443,459],
[406,468,0,384,430,476,439,538,510],
[462,521,506,0,554,499,435,566,534],
[413,486,460,336,0,431,461,552,464],
[444,468,414,391,459,0,442,533,458],
[377,476,451,455,429,448,0,517,518],
[341,447,352,324,338,357,373,0,397],
[411,431,380,356,426,432,372,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,432,450,395,454,461,453,459],
[466,0,446,439,442,467,461,467,488],
[458,444,0,421,414,467,456,450,482],
[440,451,469,0,448,482,477,455,474],
[495,448,476,442,0,504,463,469,481],
[436,423,423,408,386,0,423,443,439],
[429,429,434,413,427,467,0,448,459],
[437,423,440,435,421,447,442,0,453],
[431,402,408,416,409,451,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,467,548,489,483,492,439,491],
[426,0,458,539,463,462,476,497,490],
[423,432,0,530,466,489,488,441,482],
[342,351,360,0,383,415,425,401,411],
[401,427,424,507,0,479,492,458,490],
[407,428,401,475,411,0,480,468,460],
[398,414,402,465,398,410,0,397,459],
[451,393,449,489,432,422,493,0,474],
[399,400,408,479,400,430,431,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,437,455,480,428,438,455,425],
[432,0,450,457,445,442,430,463,436],
[453,440,0,462,465,445,455,446,467],
[435,433,428,0,458,429,430,441,442],
[410,445,425,432,0,423,429,433,402],
[462,448,445,461,467,0,432,458,453],
[452,460,435,460,461,458,0,467,468],
[435,427,444,449,457,432,423,0,447],
[465,454,423,448,488,437,422,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,426,434,461,423,427,463,460],
[436,0,463,417,433,432,433,459,447],
[464,427,0,408,461,451,404,472,455],
[456,473,482,0,458,454,473,505,436],
[429,457,429,432,0,437,446,489,450],
[467,458,439,436,453,0,452,480,467],
[463,457,486,417,444,438,0,497,452],
[427,431,418,385,401,410,393,0,419],
[430,443,435,454,440,423,438,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,455,336,437,333,352,398,380],
[491,0,477,477,400,395,355,491,496],
[435,413,0,412,457,236,524,553,584],
[554,413,478,0,551,477,523,536,515],
[453,490,433,339,0,282,432,516,392],
[557,495,654,413,608,0,542,602,584],
[538,535,366,367,458,348,0,509,414],
[492,399,337,354,374,288,381,0,512],
[510,394,306,375,498,306,476,378,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,445,445,460,434,463,452,430],
[458,0,452,444,461,450,459,460,435],
[445,438,0,462,456,440,442,462,457],
[445,446,428,0,454,424,440,471,448],
[430,429,434,436,0,438,447,451,428],
[456,440,450,466,452,0,458,464,457],
[427,431,448,450,443,432,0,458,455],
[438,430,428,419,439,426,432,0,434],
[460,455,433,442,462,433,435,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,441,432,468,437,452,472,428],
[418,0,416,464,402,429,415,466,405],
[449,474,0,405,430,464,452,448,449],
[458,426,485,0,476,476,493,460,431],
[422,488,460,414,0,464,436,474,456],
[453,461,426,414,426,0,439,456,400],
[438,475,438,397,454,451,0,459,457],
[418,424,442,430,416,434,431,0,414],
[462,485,441,459,434,490,433,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,451,447,459,511,458,463,464],
[453,0,436,426,454,503,467,458,432],
[439,454,0,454,507,469,465,470,471],
[443,464,436,0,471,464,482,428,461],
[431,436,383,419,0,455,442,430,436],
[379,387,421,426,435,0,467,408,422],
[432,423,425,408,448,423,0,419,446],
[427,432,420,462,460,482,471,0,464],
[426,458,419,429,454,468,444,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,440,477,439,439,448,444,436],
[440,0,438,455,451,438,442,447,423],
[450,452,0,467,457,438,455,451,449],
[413,435,423,0,445,412,434,449,442],
[451,439,433,445,0,449,457,444,436],
[451,452,452,478,441,0,452,434,460],
[442,448,435,456,433,438,0,454,442],
[446,443,439,441,446,456,436,0,463],
[454,467,441,448,454,430,448,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,433,433,424,445,440,428,472],
[460,0,451,451,432,453,447,460,473],
[457,439,0,482,426,475,453,459,464],
[457,439,408,0,425,452,449,414,451],
[466,458,464,465,0,443,449,476,492],
[445,437,415,438,447,0,460,427,437],
[450,443,437,441,441,430,0,433,455],
[462,430,431,476,414,463,457,0,468],
[418,417,426,439,398,453,435,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,444,440,486,451,439,419,422],
[411,0,441,467,476,442,461,413,443],
[446,449,0,448,464,418,441,431,419],
[450,423,442,0,450,431,417,390,422],
[404,414,426,440,0,412,417,401,389],
[439,448,472,459,478,0,464,445,445],
[451,429,449,473,473,426,0,424,445],
[471,477,459,500,489,445,466,0,440],
[468,447,471,468,501,445,445,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,444,440,455,442,448,419,470],
[433,0,470,478,467,443,448,446,483],
[446,420,0,468,441,448,439,432,464],
[450,412,422,0,428,436,430,406,473],
[435,423,449,462,0,431,445,419,459],
[448,447,442,454,459,0,454,430,479],
[442,442,451,460,445,436,0,408,444],
[471,444,458,484,471,460,482,0,474],
[420,407,426,417,431,411,446,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,401,422,386,410,421,438,429],
[492,0,474,417,442,398,443,480,427],
[489,416,0,417,392,360,446,422,388],
[468,473,473,0,411,453,438,466,424],
[504,448,498,479,0,400,462,451,434],
[480,492,530,437,490,0,468,500,534],
[469,447,444,452,428,422,0,463,436],
[452,410,468,424,439,390,427,0,385],
[461,463,502,466,456,356,454,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,442,432,446,461,481,508,429],
[409,0,448,415,418,510,417,440,445],
[448,442,0,436,418,494,435,473,447],
[458,475,454,0,443,487,484,493,396],
[444,472,472,447,0,468,445,475,432],
[429,380,396,403,422,0,407,484,402],
[409,473,455,406,445,483,0,460,435],
[382,450,417,397,415,406,430,0,420],
[461,445,443,494,458,488,455,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,445,475,414,467,462,434,472],
[431,0,420,468,425,463,451,438,466],
[445,470,0,487,460,468,501,442,485],
[415,422,403,0,406,427,442,401,446],
[476,465,430,484,0,457,480,465,489],
[423,427,422,463,433,0,446,432,465],
[428,439,389,448,410,444,0,414,465],
[456,452,448,489,425,458,476,0,494],
[418,424,405,444,401,425,425,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,421,416,431,436,448,412,414],
[459,0,458,442,469,455,455,445,433],
[469,432,0,408,453,430,439,436,434],
[474,448,482,0,457,447,445,446,453],
[459,421,437,433,0,453,433,458,438],
[454,435,460,443,437,0,435,438,427],
[442,435,451,445,457,455,0,436,457],
[478,445,454,444,432,452,454,0,442],
[476,457,456,437,452,463,433,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,407,455,441,450,452,476,450],
[450,0,441,464,435,459,421,455,428],
[483,449,0,470,428,434,446,479,478],
[435,426,420,0,438,432,413,455,462],
[449,455,462,452,0,419,447,444,448],
[440,431,456,458,471,0,444,448,467],
[438,469,444,477,443,446,0,494,442],
[414,435,411,435,446,442,396,0,451],
[440,462,412,428,442,423,448,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,416,480,451,425,410,444,427],
[439,0,423,401,452,442,450,464,429],
[474,467,0,451,476,460,438,482,447],
[410,489,439,0,463,427,457,465,435],
[439,438,414,427,0,417,405,444,402],
[465,448,430,463,473,0,414,459,439],
[480,440,452,433,485,476,0,474,440],
[446,426,408,425,446,431,416,0,411],
[463,461,443,455,488,451,450,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,464,432,446,416,460,453,442],
[463,0,466,489,470,453,474,465,435],
[426,424,0,451,445,420,445,424,442],
[458,401,439,0,442,417,424,401,428],
[444,420,445,448,0,421,426,409,422],
[474,437,470,473,469,0,439,437,450],
[430,416,445,466,464,451,0,431,431],
[437,425,466,489,481,453,459,0,450],
[448,455,448,462,468,440,459,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,422,411,415,439,425,402,427],
[452,0,431,441,418,460,435,420,429],
[468,459,0,456,434,441,436,417,447],
[479,449,434,0,443,461,446,434,446],
[475,472,456,447,0,465,444,430,439],
[451,430,449,429,425,0,418,402,421],
[465,455,454,444,446,472,0,436,443],
[488,470,473,456,460,488,454,0,438],
[463,461,443,444,451,469,447,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,456,477,473,466,427,422,412],
[450,0,498,476,481,478,453,426,467],
[434,392,0,458,439,428,394,428,467],
[413,414,432,0,427,438,434,412,423],
[417,409,451,463,0,418,414,446,443],
[424,412,462,452,472,0,431,455,456],
[463,437,496,456,476,459,0,433,491],
[468,464,462,478,444,435,457,0,460],
[478,423,423,467,447,434,399,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,471,431,432,463,430,423,442],
[428,0,427,408,435,451,397,417,435],
[419,463,0,399,433,453,426,403,445],
[459,482,491,0,437,495,425,446,452],
[458,455,457,453,0,490,447,444,458],
[427,439,437,395,400,0,422,409,425],
[460,493,464,465,443,468,0,408,438],
[467,473,487,444,446,481,482,0,456],
[448,455,445,438,432,465,452,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,468,473,488,458,451,477,444],
[442,0,434,429,475,448,394,435,430],
[422,456,0,427,414,460,390,424,435],
[417,461,463,0,444,447,427,463,458],
[402,415,476,446,0,453,394,421,483],
[432,442,430,443,437,0,393,417,418],
[439,496,500,463,496,497,0,456,454],
[413,455,466,427,469,473,434,0,438],
[446,460,455,432,407,472,436,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,462,510,411,504,434,414,538],
[390,0,442,517,452,431,410,418,496],
[428,448,0,518,430,465,336,415,483],
[380,373,372,0,500,426,369,403,401],
[479,438,460,390,0,488,422,466,517],
[386,459,425,464,402,0,484,441,531],
[456,480,554,521,468,406,0,563,591],
[476,472,475,487,424,449,327,0,508],
[352,394,407,489,373,359,299,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,260,217,256,329,343,223,248],
[595,0,397,531,359,541,512,339,311],
[630,493,0,416,425,511,387,268,374],
[673,359,474,0,340,458,447,215,322],
[634,531,465,550,0,571,552,445,470],
[561,349,379,432,319,0,277,252,259],
[547,378,503,443,338,613,0,394,351],
[667,551,622,675,445,638,496,0,426],
[642,579,516,568,420,631,539,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,442,422,443,398,471,425,433],
[415,0,474,422,440,409,434,489,394],
[448,416,0,402,430,371,419,415,368],
[468,468,488,0,461,440,435,482,424],
[447,450,460,429,0,408,439,410,378],
[492,481,519,450,482,0,422,455,459],
[419,456,471,455,451,468,0,480,443],
[465,401,475,408,480,435,410,0,409],
[457,496,522,466,512,431,447,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,423,445,432,405,410,430,407],
[481,0,422,440,448,443,436,437,452],
[467,468,0,459,446,467,464,448,445],
[445,450,431,0,453,464,434,441,446],
[458,442,444,437,0,427,449,450,454],
[485,447,423,426,463,0,444,449,417],
[480,454,426,456,441,446,0,446,429],
[460,453,442,449,440,441,444,0,431],
[483,438,445,444,436,473,461,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,422,430,415,440,418,429,452],
[451,0,431,451,441,464,441,410,472],
[468,459,0,464,442,482,425,434,464],
[460,439,426,0,458,457,453,446,458],
[475,449,448,432,0,464,437,425,488],
[450,426,408,433,426,0,423,420,439],
[472,449,465,437,453,467,0,415,468],
[461,480,456,444,465,470,475,0,470],
[438,418,426,432,402,451,422,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,454,474,448,445,435,456,482],
[447,0,425,467,436,435,409,443,426],
[436,465,0,459,428,435,425,447,466],
[416,423,431,0,405,399,432,416,444],
[442,454,462,485,0,427,448,458,460],
[445,455,455,491,463,0,425,469,487],
[455,481,465,458,442,465,0,469,458],
[434,447,443,474,432,421,421,0,451],
[408,464,424,446,430,403,432,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,457,452,458,455,439,446,453],
[432,0,435,457,441,422,451,456,449],
[433,455,0,443,466,422,457,443,445],
[438,433,447,0,419,425,443,434,440],
[432,449,424,471,0,437,441,450,438],
[435,468,468,465,453,0,459,475,455],
[451,439,433,447,449,431,0,447,441],
[444,434,447,456,440,415,443,0,429],
[437,441,445,450,452,435,449,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,437,443,428,421,477,441,427],
[444,0,481,416,391,427,450,437,402],
[453,409,0,447,425,449,438,422,441],
[447,474,443,0,447,459,474,455,437],
[462,499,465,443,0,445,495,425,429],
[469,463,441,431,445,0,494,458,451],
[413,440,452,416,395,396,0,412,385],
[449,453,468,435,465,432,478,0,459],
[463,488,449,453,461,439,505,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,422,431,417,430,428,440,416],
[423,0,419,422,422,418,411,439,411],
[468,471,0,441,430,447,441,447,453],
[459,468,449,0,445,464,453,456,466],
[473,468,460,445,0,458,439,440,464],
[460,472,443,426,432,0,431,443,442],
[462,479,449,437,451,459,0,450,440],
[450,451,443,434,450,447,440,0,453],
[474,479,437,424,426,448,450,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,424,467,459,449,464,445,438],
[428,0,446,455,468,450,459,449,436],
[466,444,0,449,467,465,454,446,454],
[423,435,441,0,435,472,426,440,442],
[431,422,423,455,0,444,424,431,434],
[441,440,425,418,446,0,453,426,439],
[426,431,436,464,466,437,0,451,451],
[445,441,444,450,459,464,439,0,434],
[452,454,436,448,456,451,439,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,486,470,516,457,497,467,440],
[426,0,462,440,476,421,503,449,432],
[404,428,0,423,473,459,464,438,416],
[420,450,467,0,482,433,463,483,448],
[374,414,417,408,0,426,449,415,417],
[433,469,431,457,464,0,508,486,463],
[393,387,426,427,441,382,0,405,396],
[423,441,452,407,475,404,485,0,442],
[450,458,474,442,473,427,494,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,438,461,469,454,494,475,454],
[389,0,409,442,417,404,422,388,392],
[452,481,0,461,427,428,474,446,448],
[429,448,429,0,403,456,477,407,427],
[421,473,463,487,0,409,491,465,433],
[436,486,462,434,481,0,485,437,466],
[396,468,416,413,399,405,0,401,405],
[415,502,444,483,425,453,489,0,426],
[436,498,442,463,457,424,485,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,469,395,368,372,485,417,451],
[445,0,441,445,369,406,460,419,410],
[421,449,0,457,390,398,476,415,454],
[495,445,433,0,395,404,502,437,427],
[522,521,500,495,0,419,545,472,454],
[518,484,492,486,471,0,489,436,454],
[405,430,414,388,345,401,0,388,399],
[473,471,475,453,418,454,502,0,410],
[439,480,436,463,436,436,491,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,442,441,449,460,448,447,428],
[455,0,446,447,432,439,431,439,442],
[448,444,0,449,436,443,443,428,458],
[449,443,441,0,445,462,446,438,459],
[441,458,454,445,0,463,465,427,468],
[430,451,447,428,427,0,444,453,448],
[442,459,447,444,425,446,0,450,424],
[443,451,462,452,463,437,440,0,445],
[462,448,432,431,422,442,466,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,433,455,438,416,446,423,414],
[441,0,441,456,456,436,460,438,425],
[457,449,0,459,468,428,474,433,445],
[435,434,431,0,456,410,427,424,433],
[452,434,422,434,0,429,444,427,431],
[474,454,462,480,461,0,476,443,457],
[444,430,416,463,446,414,0,422,418],
[467,452,457,466,463,447,468,0,441],
[476,465,445,457,459,433,472,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,433,436,434,419,446,415,413],
[453,0,438,443,446,439,448,435,442],
[457,452,0,451,438,445,474,451,466],
[454,447,439,0,416,441,446,442,457],
[456,444,452,474,0,459,458,458,459],
[471,451,445,449,431,0,456,446,433],
[444,442,416,444,432,434,0,427,445],
[475,455,439,448,432,444,463,0,452],
[477,448,424,433,431,457,445,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,425,465,472,482,449,422,447],
[434,0,427,461,449,461,471,425,455],
[465,463,0,452,460,468,451,425,462],
[425,429,438,0,455,440,436,415,421],
[418,441,430,435,0,428,451,404,429],
[408,429,422,450,462,0,442,431,433],
[441,419,439,454,439,448,0,447,424],
[468,465,465,475,486,459,443,0,476],
[443,435,428,469,461,457,466,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,447,451,465,484,468,442,462],
[431,0,466,456,474,500,483,459,458],
[443,424,0,430,481,506,473,449,471],
[439,434,460,0,475,477,461,436,466],
[425,416,409,415,0,453,437,424,431],
[406,390,384,413,437,0,454,400,420],
[422,407,417,429,453,436,0,408,428],
[448,431,441,454,466,490,482,0,452],
[428,432,419,424,459,470,462,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,474,439,427,416,395,409,380],
[466,0,465,464,442,493,454,465,434],
[416,425,0,443,412,463,426,397,425],
[451,426,447,0,406,433,400,444,422],
[463,448,478,484,0,463,456,437,450],
[474,397,427,457,427,0,481,436,395],
[495,436,464,490,434,409,0,445,430],
[481,425,493,446,453,454,445,0,408],
[510,456,465,468,440,495,460,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,439,444,459,442,460,434,451],
[454,0,439,449,460,448,447,449,468],
[451,451,0,474,474,439,468,458,466],
[446,441,416,0,439,420,436,444,452],
[431,430,416,451,0,441,426,425,454],
[448,442,451,470,449,0,465,441,462],
[430,443,422,454,464,425,0,445,458],
[456,441,432,446,465,449,445,0,462],
[439,422,424,438,436,428,432,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,463,425,446,443,393,433,434],
[476,0,460,447,473,435,439,447,446],
[427,430,0,429,433,434,429,448,422],
[465,443,461,0,453,440,416,440,452],
[444,417,457,437,0,429,452,455,445],
[447,455,456,450,461,0,428,445,437],
[497,451,461,474,438,462,0,457,449],
[457,443,442,450,435,445,433,0,437],
[456,444,468,438,445,453,441,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,446,460,477,452,463,418,439],
[429,0,473,403,422,383,442,413,413],
[444,417,0,423,437,408,420,353,403],
[430,487,467,0,477,459,482,434,463],
[413,468,453,413,0,437,438,456,435],
[438,507,482,431,453,0,446,430,442],
[427,448,470,408,452,444,0,398,403],
[472,477,537,456,434,460,492,0,452],
[451,477,487,427,455,448,487,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,237,372,436,440,403,291,486],
[424,0,407,484,541,335,537,380,488],
[653,483,0,387,592,539,522,320,515],
[518,406,503,0,272,462,509,231,363],
[454,349,298,618,0,518,546,345,655],
[450,555,351,428,372,0,668,453,443],
[487,353,368,381,344,222,0,345,453],
[599,510,570,659,545,437,545,0,535],
[404,402,375,527,235,447,437,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,413,355,404,355,429,397,415],
[484,0,499,423,438,428,394,403,457],
[477,391,0,443,431,416,433,384,414],
[535,467,447,0,508,483,443,447,459],
[486,452,459,382,0,412,439,450,451],
[535,462,474,407,478,0,478,459,492],
[461,496,457,447,451,412,0,412,454],
[493,487,506,443,440,431,478,0,496],
[475,433,476,431,439,398,436,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,441,459,439,462,446,451,452],
[438,0,469,449,440,452,455,464,433],
[449,421,0,434,417,461,475,458,424],
[431,441,456,0,453,433,462,452,446],
[451,450,473,437,0,490,483,457,455],
[428,438,429,457,400,0,455,440,427],
[444,435,415,428,407,435,0,435,426],
[439,426,432,438,433,450,455,0,426],
[438,457,466,444,435,463,464,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,411,428,417,443,442,432,434],
[465,0,429,442,441,455,480,435,446],
[479,461,0,461,453,432,486,465,460],
[462,448,429,0,454,447,465,427,440],
[473,449,437,436,0,435,464,432,425],
[447,435,458,443,455,0,497,442,424],
[448,410,404,425,426,393,0,410,409],
[458,455,425,463,458,448,480,0,454],
[456,444,430,450,465,466,481,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,434,450,453,442,452,464,430],
[428,0,417,438,425,420,403,419,415],
[456,473,0,438,445,450,454,443,444],
[440,452,452,0,434,454,444,440,464],
[437,465,445,456,0,449,454,453,436],
[448,470,440,436,441,0,443,453,451],
[438,487,436,446,436,447,0,446,447],
[426,471,447,450,437,437,444,0,434],
[460,475,446,426,454,439,443,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,446,443,467,464,454,463,470],
[431,0,425,425,438,438,436,430,432],
[444,465,0,425,449,449,469,457,439],
[447,465,465,0,460,461,442,447,459],
[423,452,441,430,0,436,456,455,460],
[426,452,441,429,454,0,438,471,469],
[436,454,421,448,434,452,0,469,453],
[427,460,433,443,435,419,421,0,442],
[420,458,451,431,430,421,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,462,458,466,434,437,440,420],
[422,0,462,462,427,429,382,424,417],
[428,428,0,450,430,426,401,418,387],
[432,428,440,0,457,405,401,453,413],
[424,463,460,433,0,409,422,426,412],
[456,461,464,485,481,0,455,456,429],
[453,508,489,489,468,435,0,444,480],
[450,466,472,437,464,434,446,0,446],
[470,473,503,477,478,461,410,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,434,475,448,448,456,492,434],
[440,0,425,443,466,468,448,481,472],
[456,465,0,475,449,482,441,485,488],
[415,447,415,0,428,429,437,441,435],
[442,424,441,462,0,434,416,465,448],
[442,422,408,461,456,0,419,462,450],
[434,442,449,453,474,471,0,479,442],
[398,409,405,449,425,428,411,0,436],
[456,418,402,455,442,440,448,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,455,446,449,452,453,455,464],
[448,0,452,447,447,456,445,433,428],
[435,438,0,436,450,451,440,435,446],
[444,443,454,0,462,445,448,429,461],
[441,443,440,428,0,443,457,444,448],
[438,434,439,445,447,0,421,435,447],
[437,445,450,442,433,469,0,440,474],
[435,457,455,461,446,455,450,0,450],
[426,462,444,429,442,443,416,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,436,445,444,445,443,417,432],
[458,0,444,448,459,449,438,446,428],
[454,446,0,439,468,433,443,439,447],
[445,442,451,0,459,444,434,447,432],
[446,431,422,431,0,419,452,432,447],
[445,441,457,446,471,0,452,453,454],
[447,452,447,456,438,438,0,450,436],
[473,444,451,443,458,437,440,0,438],
[458,462,443,458,443,436,454,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,398,417,434,413,411,400,455],
[490,0,410,433,441,424,465,430,444],
[492,480,0,475,448,447,465,451,435],
[473,457,415,0,447,450,458,411,475],
[456,449,442,443,0,441,484,423,447],
[477,466,443,440,449,0,462,431,453],
[479,425,425,432,406,428,0,436,427],
[490,460,439,479,467,459,454,0,489],
[435,446,455,415,443,437,463,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,493,447,493,437,482,407,471],
[495,0,506,473,471,441,503,473,488],
[397,384,0,416,431,397,411,361,407],
[443,417,474,0,423,447,457,421,468],
[397,419,459,467,0,428,412,394,440],
[453,449,493,443,462,0,459,459,487],
[408,387,479,433,478,431,0,419,468],
[483,417,529,469,496,431,471,0,521],
[419,402,483,422,450,403,422,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,470,449,454,416,539,477,538],
[363,0,460,429,356,421,466,420,461],
[420,430,0,405,399,388,433,420,443],
[441,461,485,0,396,504,460,424,453],
[436,534,491,494,0,518,524,458,496],
[474,469,502,386,372,0,463,452,476],
[351,424,457,430,366,427,0,414,419],
[413,470,470,466,432,438,476,0,494],
[352,429,447,437,394,414,471,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,455,451,448,430,458,486,455],
[464,0,469,473,439,430,457,466,460],
[435,421,0,442,445,442,444,479,432],
[439,417,448,0,447,447,450,455,449],
[442,451,445,443,0,437,456,485,439],
[460,460,448,443,453,0,448,469,447],
[432,433,446,440,434,442,0,449,424],
[404,424,411,435,405,421,441,0,415],
[435,430,458,441,451,443,466,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,449,448,441,447,421,466,437],
[460,0,452,473,437,437,461,460,444],
[441,438,0,438,443,430,420,452,460],
[442,417,452,0,429,426,437,457,443],
[449,453,447,461,0,452,440,452,455],
[443,453,460,464,438,0,460,458,458],
[469,429,470,453,450,430,0,461,452],
[424,430,438,433,438,432,429,0,439],
[453,446,430,447,435,432,438,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,468,431,431,445,461,435,442],
[426,0,450,429,421,421,453,406,444],
[422,440,0,425,419,435,437,423,434],
[459,461,465,0,441,440,469,470,478],
[459,469,471,449,0,459,472,442,476],
[445,469,455,450,431,0,465,424,451],
[429,437,453,421,418,425,0,442,462],
[455,484,467,420,448,466,448,0,462],
[448,446,456,412,414,439,428,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,398,393,463,399,397,460,398],
[365,0,397,432,431,467,432,400,398],
[492,493,0,459,560,464,496,490,431],
[497,458,431,0,527,396,493,495,429],
[427,459,330,363,0,430,528,526,495],
[491,423,426,494,460,0,395,526,392],
[493,458,394,397,362,495,0,428,427],
[430,490,400,395,364,364,462,0,397],
[492,492,459,461,395,498,463,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,546,463,455,578,461,548,503,409],
[344,0,326,506,415,438,454,320,410],
[427,564,0,589,591,543,497,521,519],
[435,384,301,0,484,458,411,361,482],
[312,475,299,406,0,481,383,455,455],
[429,452,347,432,409,0,407,386,361],
[342,436,393,479,507,483,0,503,433],
[387,570,369,529,435,504,387,0,409],
[481,480,371,408,435,529,457,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,464,440,441,419,422,421,402],
[429,0,410,402,419,444,404,409,444],
[426,480,0,450,426,453,448,415,415],
[450,488,440,0,458,451,457,432,423],
[449,471,464,432,0,437,404,460,422],
[471,446,437,439,453,0,474,425,444],
[468,486,442,433,486,416,0,438,416],
[469,481,475,458,430,465,452,0,465],
[488,446,475,467,468,446,474,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,491,440,467,422,476,473,462],
[453,0,452,440,461,432,440,448,427],
[399,438,0,447,433,377,452,443,390],
[450,450,443,0,450,468,454,451,422],
[423,429,457,440,0,434,465,429,448],
[468,458,513,422,456,0,477,469,421],
[414,450,438,436,425,413,0,441,405],
[417,442,447,439,461,421,449,0,427],
[428,463,500,468,442,469,485,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,450,435,435,434,419,449,450],
[456,0,432,444,446,450,424,455,452],
[440,458,0,454,434,440,437,433,431],
[455,446,436,0,439,425,434,453,446],
[455,444,456,451,0,465,449,443,459],
[456,440,450,465,425,0,436,440,454],
[471,466,453,456,441,454,0,480,466],
[441,435,457,437,447,450,410,0,433],
[440,438,459,444,431,436,424,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,407,489,471,478,572,470,457],
[451,0,445,472,479,462,521,481,431],
[483,445,0,468,452,469,530,483,460],
[401,418,422,0,412,436,522,482,418],
[419,411,438,478,0,437,495,460,419],
[412,428,421,454,453,0,490,445,413],
[318,369,360,368,395,400,0,380,340],
[420,409,407,408,430,445,510,0,394],
[433,459,430,472,471,477,550,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,456,444,462,467,471,486,479],
[447,0,464,459,437,451,449,456,484],
[434,426,0,450,459,460,466,465,490],
[446,431,440,0,434,450,454,460,451],
[428,453,431,456,0,447,463,464,452],
[423,439,430,440,443,0,457,464,460],
[419,441,424,436,427,433,0,432,447],
[404,434,425,430,426,426,458,0,446],
[411,406,400,439,438,430,443,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,421,490,520,464,426,454,483],
[455,0,465,501,507,455,451,524,423],
[469,425,0,502,528,532,489,501,507],
[400,389,388,0,477,442,373,428,408],
[370,383,362,413,0,398,364,418,417],
[426,435,358,448,492,0,444,488,450],
[464,439,401,517,526,446,0,497,471],
[436,366,389,462,472,402,393,0,411],
[407,467,383,482,473,440,419,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,434,446,454,486,452,442,454],
[456,0,459,482,444,471,481,482,455],
[456,431,0,466,441,461,431,467,437],
[444,408,424,0,421,431,441,424,441],
[436,446,449,469,0,477,455,441,433],
[404,419,429,459,413,0,459,441,411],
[438,409,459,449,435,431,0,469,446],
[448,408,423,466,449,449,421,0,470],
[436,435,453,449,457,479,444,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,449,473,443,453,445,476,472],
[425,0,417,436,410,428,399,474,435],
[441,473,0,432,447,460,413,490,444],
[417,454,458,0,430,446,440,491,466],
[447,480,443,460,0,423,442,469,432],
[437,462,430,444,467,0,477,500,459],
[445,491,477,450,448,413,0,511,455],
[414,416,400,399,421,390,379,0,396],
[418,455,446,424,458,431,435,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,434,442,464,436,436,438,428],
[483,0,482,444,507,461,498,476,447],
[456,408,0,430,467,460,455,413,408],
[448,446,460,0,456,444,451,444,415],
[426,383,423,434,0,416,433,423,423],
[454,429,430,446,474,0,434,451,432],
[454,392,435,439,457,456,0,447,455],
[452,414,477,446,467,439,443,0,431],
[462,443,482,475,467,458,435,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,442,475,493,469,464,455,464],
[427,0,446,446,472,466,453,448,446],
[448,444,0,444,460,455,440,446,435],
[415,444,446,0,460,458,445,433,424],
[397,418,430,430,0,436,424,425,422],
[421,424,435,432,454,0,437,438,444],
[426,437,450,445,466,453,0,451,445],
[435,442,444,457,465,452,439,0,457],
[426,444,455,466,468,446,445,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,442,427,391,390,427,432,437],
[436,0,399,445,408,439,461,429,381],
[448,491,0,425,386,416,474,446,425],
[463,445,465,0,433,434,481,430,427],
[499,482,504,457,0,426,443,458,425],
[500,451,474,456,464,0,453,434,468],
[463,429,416,409,447,437,0,426,418],
[458,461,444,460,432,456,464,0,422],
[453,509,465,463,465,422,472,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,465,488,479,479,449,457,429],
[414,0,432,449,428,454,449,426,406],
[425,458,0,438,423,441,437,433,424],
[402,441,452,0,412,465,440,447,387],
[411,462,467,478,0,433,441,475,414],
[411,436,449,425,457,0,428,448,424],
[441,441,453,450,449,462,0,442,446],
[433,464,457,443,415,442,448,0,428],
[461,484,466,503,476,466,444,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,407,460,441,427,413,456,403],
[448,0,453,458,433,459,458,473,418],
[483,437,0,524,474,535,474,475,453],
[430,432,366,0,451,421,442,423,435],
[449,457,416,439,0,466,430,452,456],
[463,431,355,469,424,0,436,424,434],
[477,432,416,448,460,454,0,403,410],
[434,417,415,467,438,466,487,0,426],
[487,472,437,455,434,456,480,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,441,458,443,460,462,472,449],
[449,0,436,444,450,472,405,458,427],
[449,454,0,445,455,483,445,450,449],
[432,446,445,0,431,460,434,416,425],
[447,440,435,459,0,427,453,387,419],
[430,418,407,430,463,0,418,430,427],
[428,485,445,456,437,472,0,447,454],
[418,432,440,474,503,460,443,0,419],
[441,463,441,465,471,463,436,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,466,424,428,426,503,460,465],
[410,0,469,396,429,485,465,503,413],
[424,421,0,349,311,366,467,458,349],
[466,494,541,0,354,485,484,532,429],
[462,461,579,536,0,556,576,517,409],
[464,405,524,405,334,0,484,513,405],
[387,425,423,406,314,406,0,420,334],
[430,387,432,358,373,377,470,0,396],
[425,477,541,461,481,485,556,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,473,449,450,438,435,474,459],
[435,0,450,428,453,436,433,454,444],
[417,440,0,421,441,417,428,448,441],
[441,462,469,0,462,464,449,471,450],
[440,437,449,428,0,433,437,461,429],
[452,454,473,426,457,0,431,456,457],
[455,457,462,441,453,459,0,472,454],
[416,436,442,419,429,434,418,0,423],
[431,446,449,440,461,433,436,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,371,325,329,419,560,326,235],
[518,0,282,565,381,426,472,286,428],
[519,608,0,473,333,469,565,471,521],
[565,325,417,0,422,329,608,516,376],
[561,509,557,468,0,419,606,563,421],
[471,464,421,561,471,0,608,513,425],
[330,418,325,282,284,282,0,279,377],
[564,604,419,374,327,377,611,0,284],
[655,462,369,514,469,465,513,606,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,445,449,474,476,457,467,451],
[439,0,465,425,455,483,455,444,460],
[445,425,0,454,465,424,462,442,452],
[441,465,436,0,441,465,452,437,441],
[416,435,425,449,0,438,436,428,431],
[414,407,466,425,452,0,442,401,420],
[433,435,428,438,454,448,0,421,452],
[423,446,448,453,462,489,469,0,466],
[439,430,438,449,459,470,438,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,415,434,442,430,433,420,440],
[429,0,417,421,410,428,425,435,429],
[475,473,0,476,429,446,450,463,449],
[456,469,414,0,432,439,446,435,448],
[448,480,461,458,0,442,463,447,443],
[460,462,444,451,448,0,450,463,444],
[457,465,440,444,427,440,0,439,435],
[470,455,427,455,443,427,451,0,445],
[450,461,441,442,447,446,455,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,456,453,482,455,419,493,472],
[460,0,404,418,460,431,429,465,421],
[434,486,0,453,511,443,431,472,435],
[437,472,437,0,510,467,454,487,442],
[408,430,379,380,0,431,397,409,424],
[435,459,447,423,459,0,408,475,425],
[471,461,459,436,493,482,0,500,469],
[397,425,418,403,481,415,390,0,427],
[418,469,455,448,466,465,421,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,417,479,469,478,471,464,479],
[432,0,430,482,479,481,463,480,461],
[473,460,0,458,456,482,472,479,444],
[411,408,432,0,447,436,451,439,425],
[421,411,434,443,0,428,419,455,439],
[412,409,408,454,462,0,417,471,444],
[419,427,418,439,471,473,0,457,436],
[426,410,411,451,435,419,433,0,440],
[411,429,446,465,451,446,454,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,469,476,448,444,457,464],
[434,0,462,467,473,452,454,460,451],
[442,428,0,471,454,460,463,476,440],
[421,423,419,0,427,426,428,427,437],
[414,417,436,463,0,440,455,447,455],
[442,438,430,464,450,0,453,451,446],
[446,436,427,462,435,437,0,447,443],
[433,430,414,463,443,439,443,0,446],
[426,439,450,453,435,444,447,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,419,410,423,441,421,439,439],
[444,0,421,414,425,417,435,432,435],
[471,469,0,430,427,430,426,445,428],
[480,476,460,0,463,459,422,471,449],
[467,465,463,427,0,454,429,452,428],
[449,473,460,431,436,0,452,469,447],
[469,455,464,468,461,438,0,443,471],
[451,458,445,419,438,421,447,0,418],
[451,455,462,441,462,443,419,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,454,464,417,443,461,439,432],
[437,0,467,444,437,451,467,425,441],
[436,423,0,433,448,422,440,414,448],
[426,446,457,0,422,427,456,455,432],
[473,453,442,468,0,453,466,474,452],
[447,439,468,463,437,0,481,455,444],
[429,423,450,434,424,409,0,433,409],
[451,465,476,435,416,435,457,0,429],
[458,449,442,458,438,446,481,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,370,393,398,438,417,438,449],
[495,0,462,444,477,457,446,474,467],
[520,428,0,461,447,461,461,472,482],
[497,446,429,0,446,445,452,486,491],
[492,413,443,444,0,472,439,471,435],
[452,433,429,445,418,0,444,427,484],
[473,444,429,438,451,446,0,444,437],
[452,416,418,404,419,463,446,0,442],
[441,423,408,399,455,406,453,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,448,434,454,447,442,424,431],
[462,0,461,443,439,422,423,489,439],
[442,429,0,476,468,450,433,462,428],
[456,447,414,0,426,442,425,468,412],
[436,451,422,464,0,429,438,467,406],
[443,468,440,448,461,0,450,464,425],
[448,467,457,465,452,440,0,508,461],
[466,401,428,422,423,426,382,0,423],
[459,451,462,478,484,465,429,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,484,432,445,423,460,423,473],
[417,0,468,406,481,415,470,468,431],
[406,422,0,426,502,418,466,443,428],
[458,484,464,0,490,439,455,472,475],
[445,409,388,400,0,451,414,447,422],
[467,475,472,451,439,0,472,405,392],
[430,420,424,435,476,418,0,420,457],
[467,422,447,418,443,485,470,0,452],
[417,459,462,415,468,498,433,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,442,429,482,483,452,475,502],
[427,0,437,414,440,421,394,422,397],
[448,453,0,415,433,441,415,436,428],
[461,476,475,0,467,471,457,433,461],
[408,450,457,423,0,453,446,478,429],
[407,469,449,419,437,0,430,439,462],
[438,496,475,433,444,460,0,465,462],
[415,468,454,457,412,451,425,0,404],
[388,493,462,429,461,428,428,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,428,479,459,438,428,450,431],
[432,0,454,474,454,433,433,448,422],
[462,436,0,487,458,453,442,470,427],
[411,416,403,0,440,404,401,420,402],
[431,436,432,450,0,417,428,440,429],
[452,457,437,486,473,0,464,458,445],
[462,457,448,489,462,426,0,460,451],
[440,442,420,470,450,432,430,0,431],
[459,468,463,488,461,445,439,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,436,461,510,462,451,445,422],
[385,0,365,366,368,434,364,394,394],
[454,525,0,446,463,458,436,494,446],
[429,524,444,0,432,473,429,493,447],
[380,522,427,458,0,444,431,470,411],
[428,456,432,417,446,0,417,459,426],
[439,526,454,461,459,473,0,448,472],
[445,496,396,397,420,431,442,0,443],
[468,496,444,443,479,464,418,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,603,447,449,392,494,473,497,551],
[287,0,342,343,341,415,525,338,364],
[443,548,0,447,471,520,421,368,525],
[441,547,443,0,523,521,423,524,414],
[498,549,419,367,0,413,448,395,392],
[396,475,370,369,477,0,503,474,474],
[417,365,469,467,442,387,0,387,390],
[393,552,522,366,495,416,503,0,471],
[339,526,365,476,498,416,500,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,447,469,445,483,469,477,452],
[428,0,454,470,421,447,453,464,445],
[443,436,0,462,432,460,465,466,453],
[421,420,428,0,393,431,467,461,436],
[445,469,458,497,0,469,472,478,473],
[407,443,430,459,421,0,444,466,437],
[421,437,425,423,418,446,0,435,449],
[413,426,424,429,412,424,455,0,432],
[438,445,437,454,417,453,441,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,444,453,439,467,479,443,478],
[434,0,446,445,456,469,459,452,449],
[446,444,0,462,452,467,475,450,478],
[437,445,428,0,446,474,463,438,471],
[451,434,438,444,0,467,456,452,470],
[423,421,423,416,423,0,460,428,434],
[411,431,415,427,434,430,0,415,442],
[447,438,440,452,438,462,475,0,480],
[412,441,412,419,420,456,448,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,497,467,482,467,481,531,496],
[464,0,502,387,447,383,394,446,427],
[393,388,0,413,424,399,408,447,423],
[423,503,477,0,455,418,421,484,459],
[408,443,466,435,0,407,433,468,459],
[423,507,491,472,483,0,480,471,485],
[409,496,482,469,457,410,0,444,491],
[359,444,443,406,422,419,446,0,424],
[394,463,467,431,431,405,399,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,487,410,465,446,450,477,474],
[443,0,485,447,461,452,477,505,493],
[403,405,0,397,462,446,463,479,482],
[480,443,493,0,452,474,470,523,497],
[425,429,428,438,0,430,434,462,454],
[444,438,444,416,460,0,443,491,490],
[440,413,427,420,456,447,0,492,477],
[413,385,411,367,428,399,398,0,440],
[416,397,408,393,436,400,413,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,417,457,394,419,411,379,427],
[415,0,388,457,369,435,401,422,406],
[473,502,0,436,437,488,463,512,459],
[433,433,454,0,424,480,476,419,421],
[496,521,453,466,0,439,448,459,518],
[471,455,402,410,451,0,439,434,481],
[479,489,427,414,442,451,0,445,475],
[511,468,378,471,431,456,445,0,505],
[463,484,431,469,372,409,415,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,453,462,444,506,446,448,456],
[466,0,458,479,461,461,484,399,477],
[437,432,0,459,446,464,411,382,419],
[428,411,431,0,425,436,414,405,431],
[446,429,444,465,0,467,433,385,459],
[384,429,426,454,423,0,421,375,391],
[444,406,479,476,457,469,0,462,441],
[442,491,508,485,505,515,428,0,457],
[434,413,471,459,431,499,449,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,440,442,421,432,445,429,459],
[452,0,439,450,424,442,479,454,476],
[450,451,0,434,432,440,449,454,466],
[448,440,456,0,426,434,460,451,447],
[469,466,458,464,0,459,465,445,468],
[458,448,450,456,431,0,454,435,448],
[445,411,441,430,425,436,0,450,457],
[461,436,436,439,445,455,440,0,458],
[431,414,424,443,422,442,433,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,489,450,451,453,455,445,464],
[434,0,481,440,436,435,434,430,441],
[401,409,0,399,444,442,438,421,417],
[440,450,491,0,462,437,454,448,441],
[439,454,446,428,0,446,423,427,427],
[437,455,448,453,444,0,457,419,441],
[435,456,452,436,467,433,0,440,434],
[445,460,469,442,463,471,450,0,459],
[426,449,473,449,463,449,456,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,392,459,461,413,424,460,404],
[441,0,412,438,451,447,411,453,367],
[498,478,0,479,516,441,465,454,453],
[431,452,411,0,501,436,488,456,436],
[429,439,374,389,0,369,453,440,416],
[477,443,449,454,521,0,475,453,430],
[466,479,425,402,437,415,0,458,393],
[430,437,436,434,450,437,432,0,367],
[486,523,437,454,474,460,497,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,460,438,466,472,437,456,452],
[429,0,450,432,448,463,435,427,448],
[430,440,0,439,442,446,424,436,457],
[452,458,451,0,457,463,445,428,449],
[424,442,448,433,0,456,448,434,450],
[418,427,444,427,434,0,439,436,435],
[453,455,466,445,442,451,0,434,444],
[434,463,454,462,456,454,456,0,455],
[438,442,433,441,440,455,446,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,475,473,458,431,476,479,444],
[471,0,453,469,472,429,453,485,449],
[415,437,0,469,434,444,450,490,426],
[417,421,421,0,412,419,408,439,430],
[432,418,456,478,0,461,439,454,459],
[459,461,446,471,429,0,461,478,449],
[414,437,440,482,451,429,0,442,431],
[411,405,400,451,436,412,448,0,430],
[446,441,464,460,431,441,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,488,465,460,435,455,444,463],
[427,0,437,428,405,434,423,436,426],
[402,453,0,443,412,414,426,423,452],
[425,462,447,0,429,432,429,419,445],
[430,485,478,461,0,442,448,458,461],
[455,456,476,458,448,0,450,449,438],
[435,467,464,461,442,440,0,450,453],
[446,454,467,471,432,441,440,0,443],
[427,464,438,445,429,452,437,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,440,457,462,445,471,492,466],
[431,0,438,448,444,445,429,468,450],
[450,452,0,452,454,450,435,477,434],
[433,442,438,0,453,430,434,487,486],
[428,446,436,437,0,433,409,461,462],
[445,445,440,460,457,0,437,498,448],
[419,461,455,456,481,453,0,485,454],
[398,422,413,403,429,392,405,0,433],
[424,440,456,404,428,442,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,375,394,404,386,390,445,456],
[478,0,406,454,484,439,463,454,455],
[515,484,0,482,472,396,466,466,520],
[496,436,408,0,468,417,449,468,465],
[486,406,418,422,0,392,391,451,435],
[504,451,494,473,498,0,429,520,547],
[500,427,424,441,499,461,0,466,490],
[445,436,424,422,439,370,424,0,488],
[434,435,370,425,455,343,400,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,461,464,469,520,461,461,428],
[460,0,450,457,459,495,430,440,433],
[429,440,0,435,423,460,392,415,409],
[426,433,455,0,440,465,420,453,398],
[421,431,467,450,0,491,430,456,439],
[370,395,430,425,399,0,390,414,367],
[429,460,498,470,460,500,0,450,447],
[429,450,475,437,434,476,440,0,431],
[462,457,481,492,451,523,443,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,452,484,439,438,423,438,449],
[428,0,441,479,422,415,444,445,434],
[438,449,0,439,437,448,437,447,467],
[406,411,451,0,407,446,427,421,445],
[451,468,453,483,0,446,445,445,444],
[452,475,442,444,444,0,441,441,475],
[467,446,453,463,445,449,0,455,460],
[452,445,443,469,445,449,435,0,455],
[441,456,423,445,446,415,430,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,463,410,438,429,431,423,455],
[438,0,442,460,446,440,421,450,448],
[427,448,0,412,438,414,418,416,433],
[480,430,478,0,432,409,441,439,466],
[452,444,452,458,0,437,446,441,451],
[461,450,476,481,453,0,438,477,491],
[459,469,472,449,444,452,0,468,476],
[467,440,474,451,449,413,422,0,471],
[435,442,457,424,439,399,414,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,477,685,548,548,479,686,414],
[411,0,408,479,411,616,478,616,479],
[413,482,0,413,411,481,478,482,481],
[205,411,477,0,548,412,547,620,414],
[342,479,479,342,0,548,344,549,411],
[342,274,409,478,342,0,478,618,414],
[411,412,412,343,546,412,0,551,483],
[204,274,408,270,341,272,339,0,274],
[476,411,409,476,479,476,407,616,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,429,394,425,416,433,474,426],
[464,0,425,439,458,427,456,452,468],
[461,465,0,442,445,439,449,460,460],
[496,451,448,0,445,445,464,482,474],
[465,432,445,445,0,415,459,461,435],
[474,463,451,445,475,0,471,471,433],
[457,434,441,426,431,419,0,447,447],
[416,438,430,408,429,419,443,0,433],
[464,422,430,416,455,457,443,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,436,458,444,468,468,452,461],
[416,0,466,429,425,474,467,433,438],
[454,424,0,447,413,455,450,466,442],
[432,461,443,0,445,487,436,436,444],
[446,465,477,445,0,490,458,466,437],
[422,416,435,403,400,0,426,459,437],
[422,423,440,454,432,464,0,464,442],
[438,457,424,454,424,431,426,0,441],
[429,452,448,446,453,453,448,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,460,419,413,452,396,442,422],
[426,0,440,424,441,453,406,447,451],
[430,450,0,411,408,448,373,424,420],
[471,466,479,0,446,450,429,488,446],
[477,449,482,444,0,453,447,473,456],
[438,437,442,440,437,0,413,459,432],
[494,484,517,461,443,477,0,491,445],
[448,443,466,402,417,431,399,0,418],
[468,439,470,444,434,458,445,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,413,441,442,419,454,452,441],
[459,0,432,480,455,464,435,439,477],
[477,458,0,457,445,481,456,422,446],
[449,410,433,0,418,453,448,430,424],
[448,435,445,472,0,444,446,450,456],
[471,426,409,437,446,0,458,427,416],
[436,455,434,442,444,432,0,445,448],
[438,451,468,460,440,463,445,0,434],
[449,413,444,466,434,474,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,480,440,458,457,441,447,439],
[434,0,471,452,444,466,449,456,451],
[410,419,0,429,427,446,407,417,430],
[450,438,461,0,461,463,441,449,455],
[432,446,463,429,0,464,436,439,436],
[433,424,444,427,426,0,418,426,424],
[449,441,483,449,454,472,0,447,445],
[443,434,473,441,451,464,443,0,458],
[451,439,460,435,454,466,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,458,453,443,442,427,454,457],
[443,0,426,444,451,427,413,407,439],
[432,464,0,452,447,416,426,427,430],
[437,446,438,0,430,433,435,409,406],
[447,439,443,460,0,442,448,441,436],
[448,463,474,457,448,0,471,444,447],
[463,477,464,455,442,419,0,448,407],
[436,483,463,481,449,446,442,0,476],
[433,451,460,484,454,443,483,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,478,453,468,459,439,455,463],
[430,0,434,446,438,445,429,409,446],
[412,456,0,410,400,440,419,382,444],
[437,444,480,0,461,472,452,466,481],
[422,452,490,429,0,436,435,424,459],
[431,445,450,418,454,0,420,438,449],
[451,461,471,438,455,470,0,468,460],
[435,481,508,424,466,452,422,0,453],
[427,444,446,409,431,441,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,437,467,454,453,449,450,445],
[455,0,471,458,446,437,473,435,419],
[453,419,0,457,422,426,452,425,438],
[423,432,433,0,439,424,456,428,435],
[436,444,468,451,0,447,466,456,450],
[437,453,464,466,443,0,473,418,482],
[441,417,438,434,424,417,0,445,412],
[440,455,465,462,434,472,445,0,441],
[445,471,452,455,440,408,478,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,474,431,446,445,459,444,443],
[460,0,469,435,447,430,436,435,454],
[416,421,0,444,435,430,441,451,436],
[459,455,446,0,452,444,470,441,463],
[444,443,455,438,0,485,445,432,449],
[445,460,460,446,405,0,454,444,435],
[431,454,449,420,445,436,0,450,451],
[446,455,439,449,458,446,440,0,435],
[447,436,454,427,441,455,439,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,426,451,389,378,431,467,436],
[485,0,476,481,447,411,447,478,437],
[464,414,0,455,405,396,434,464,457],
[439,409,435,0,418,389,418,464,423],
[501,443,485,472,0,442,449,465,438],
[512,479,494,501,448,0,435,475,468],
[459,443,456,472,441,455,0,505,448],
[423,412,426,426,425,415,385,0,428],
[454,453,433,467,452,422,442,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,460,437,424,431,413,433,417],
[448,0,466,458,457,460,451,423,456],
[430,424,0,437,413,440,440,426,427],
[453,432,453,0,435,471,435,441,432],
[466,433,477,455,0,468,455,437,430],
[459,430,450,419,422,0,405,430,433],
[477,439,450,455,435,485,0,447,445],
[457,467,464,449,453,460,443,0,435],
[473,434,463,458,460,457,445,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,473,460,459,454,454,410,432],
[469,0,465,465,453,472,430,453,465],
[417,425,0,425,450,462,406,440,429],
[430,425,465,0,427,440,427,439,425],
[431,437,440,463,0,465,446,430,430],
[436,418,428,450,425,0,418,418,449],
[436,460,484,463,444,472,0,402,440],
[480,437,450,451,460,472,488,0,441],
[458,425,461,465,460,441,450,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,479,421,459,451,452,459,462],
[446,0,478,441,495,482,475,485,461],
[411,412,0,448,440,433,450,452,454],
[469,449,442,0,470,461,450,479,457],
[431,395,450,420,0,443,441,426,438],
[439,408,457,429,447,0,421,448,443],
[438,415,440,440,449,469,0,446,435],
[431,405,438,411,464,442,444,0,450],
[428,429,436,433,452,447,455,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,455,465,449,444,443,442,445],
[443,0,436,443,439,431,446,418,411],
[435,454,0,450,452,423,425,442,408],
[425,447,440,0,436,440,415,446,422],
[441,451,438,454,0,434,423,434,429],
[446,459,467,450,456,0,458,457,431],
[447,444,465,475,467,432,0,446,440],
[448,472,448,444,456,433,444,0,439],
[445,479,482,468,461,459,450,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,438,451,409,450,419,414,464],
[457,0,465,464,452,435,466,467,463],
[452,425,0,463,462,445,436,445,470],
[439,426,427,0,432,439,445,409,460],
[481,438,428,458,0,440,453,456,467],
[440,455,445,451,450,0,452,442,454],
[471,424,454,445,437,438,0,444,455],
[476,423,445,481,434,448,446,0,467],
[426,427,420,430,423,436,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,436,421,406,435,454,416,395],
[469,0,476,491,456,479,442,452,433],
[454,414,0,451,416,433,433,468,437],
[469,399,439,0,425,455,426,452,446],
[484,434,474,465,0,476,451,474,476],
[455,411,457,435,414,0,439,445,421],
[436,448,457,464,439,451,0,454,441],
[474,438,422,438,416,445,436,0,423],
[495,457,453,444,414,469,449,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,419,457,483,465,425,468,450],
[437,0,418,450,449,436,431,459,455],
[471,472,0,469,454,457,451,479,445],
[433,440,421,0,464,449,422,454,417],
[407,441,436,426,0,468,428,467,454],
[425,454,433,441,422,0,459,457,450],
[465,459,439,468,462,431,0,443,445],
[422,431,411,436,423,433,447,0,430],
[440,435,445,473,436,440,445,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,396,423,410,443,437,415,445],
[442,0,425,435,435,442,438,444,410],
[494,465,0,447,421,464,461,465,451],
[467,455,443,0,453,484,449,456,446],
[480,455,469,437,0,478,462,453,455],
[447,448,426,406,412,0,395,422,407],
[453,452,429,441,428,495,0,461,448],
[475,446,425,434,437,468,429,0,426],
[445,480,439,444,435,483,442,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,405,567,486,322,726,403,404],
[486,0,565,567,322,320,486,481,245],
[485,325,0,568,322,402,648,241,324],
[323,323,322,0,242,321,564,239,323],
[404,568,568,648,0,483,730,403,405],
[568,570,488,569,407,0,649,487,488],
[164,404,242,326,160,241,0,322,243],
[487,409,649,651,487,403,568,0,409],
[486,645,566,567,485,402,647,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,458,446,502,502,492,507],
[428,0,466,424,402,473,436,452,469],
[445,424,0,440,408,425,442,413,425],
[432,466,450,0,434,457,450,430,475],
[444,488,482,456,0,483,500,529,467],
[388,417,465,433,407,0,432,440,439],
[388,454,448,440,390,458,0,441,466],
[398,438,477,460,361,450,449,0,473],
[383,421,465,415,423,451,424,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,460,441,466,467,445,440,456],
[423,0,434,429,458,453,421,431,411],
[430,456,0,432,445,450,436,441,434],
[449,461,458,0,458,463,433,429,424],
[424,432,445,432,0,451,433,413,436],
[423,437,440,427,439,0,422,426,416],
[445,469,454,457,457,468,0,446,416],
[450,459,449,461,477,464,444,0,419],
[434,479,456,466,454,474,474,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,429,513,489,513,531,409,439],
[465,0,461,517,533,449,588,438,463],
[461,429,0,515,456,464,472,459,361],
[377,373,375,0,420,451,461,368,385],
[401,357,434,470,0,419,481,412,423],
[377,441,426,439,471,0,464,361,367],
[359,302,418,429,409,426,0,441,330],
[481,452,431,522,478,529,449,0,432],
[451,427,529,505,467,523,560,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,436,473,479,464,479,450,454],
[381,0,407,422,446,397,430,389,415],
[454,483,0,437,467,461,465,448,463],
[417,468,453,0,487,442,455,460,454],
[411,444,423,403,0,445,446,413,404],
[426,493,429,448,445,0,462,438,434],
[411,460,425,435,444,428,0,437,410],
[440,501,442,430,477,452,453,0,423],
[436,475,427,436,486,456,480,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,435,436,484,444,421,446,440],
[443,0,448,420,472,431,440,445,435],
[455,442,0,440,465,454,444,443,433],
[454,470,450,0,482,467,433,455,452],
[406,418,425,408,0,436,415,434,426],
[446,459,436,423,454,0,421,444,440],
[469,450,446,457,475,469,0,468,444],
[444,445,447,435,456,446,422,0,435],
[450,455,457,438,464,450,446,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,477,472,446,442,469,469,486],
[415,0,467,444,436,412,420,457,453],
[413,423,0,410,433,423,390,413,509],
[418,446,480,0,476,448,419,450,470],
[444,454,457,414,0,428,396,417,475],
[448,478,467,442,462,0,415,445,465],
[421,470,500,471,494,475,0,466,503],
[421,433,477,440,473,445,424,0,486],
[404,437,381,420,415,425,387,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,410,430,435,460,415,470,453],
[418,0,449,418,446,440,405,458,453],
[480,441,0,455,440,449,427,434,455],
[460,472,435,0,474,476,452,456,478],
[455,444,450,416,0,476,453,449,433],
[430,450,441,414,414,0,388,433,477],
[475,485,463,438,437,502,0,459,475],
[420,432,456,434,441,457,431,0,442],
[437,437,435,412,457,413,415,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,417,471,464,444,496,449,478],
[475,0,478,518,517,521,496,437,487],
[473,412,0,522,443,476,458,447,484],
[419,372,368,0,462,418,430,442,444],
[426,373,447,428,0,455,468,414,455],
[446,369,414,472,435,0,436,428,402],
[394,394,432,460,422,454,0,397,472],
[441,453,443,448,476,462,493,0,491],
[412,403,406,446,435,488,418,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,435,433,454,426,431,438,452],
[454,0,456,419,438,413,468,422,439],
[455,434,0,430,434,424,455,440,450],
[457,471,460,0,442,439,476,465,455],
[436,452,456,448,0,418,454,432,455],
[464,477,466,451,472,0,461,440,461],
[459,422,435,414,436,429,0,417,444],
[452,468,450,425,458,450,473,0,463],
[438,451,440,435,435,429,446,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,459,432,436,438,450,464,465],
[471,0,478,439,459,472,459,466,453],
[431,412,0,422,399,424,441,452,431],
[458,451,468,0,445,468,465,460,449],
[454,431,491,445,0,478,445,463,454],
[452,418,466,422,412,0,424,448,429],
[440,431,449,425,445,466,0,429,430],
[426,424,438,430,427,442,461,0,433],
[425,437,459,441,436,461,460,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,450,440,462,446,457,431,491],
[434,0,448,454,460,422,484,453,477],
[440,442,0,451,456,423,466,432,448],
[450,436,439,0,460,436,470,442,467],
[428,430,434,430,0,410,455,451,452],
[444,468,467,454,480,0,477,457,477],
[433,406,424,420,435,413,0,420,415],
[459,437,458,448,439,433,470,0,443],
[399,413,442,423,438,413,475,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,421,432,421,410,429,419,440],
[458,0,460,441,428,431,457,421,467],
[469,430,0,465,452,462,432,455,476],
[458,449,425,0,446,406,464,417,457],
[469,462,438,444,0,399,454,462,460],
[480,459,428,484,491,0,497,465,492],
[461,433,458,426,436,393,0,414,444],
[471,469,435,473,428,425,476,0,444],
[450,423,414,433,430,398,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,442,439,447,416,432,449,468],
[447,0,451,461,467,462,444,442,445],
[448,439,0,434,446,424,432,440,467],
[451,429,456,0,469,435,442,440,466],
[443,423,444,421,0,440,460,446,459],
[474,428,466,455,450,0,456,454,441],
[458,446,458,448,430,434,0,447,459],
[441,448,450,450,444,436,443,0,471],
[422,445,423,424,431,449,431,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,428,429,432,422,435,443,393],
[474,0,464,427,453,461,423,436,443],
[462,426,0,418,464,487,492,442,458],
[461,463,472,0,441,476,471,473,438],
[458,437,426,449,0,437,461,443,435],
[468,429,403,414,453,0,453,431,402],
[455,467,398,419,429,437,0,424,429],
[447,454,448,417,447,459,466,0,435],
[497,447,432,452,455,488,461,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,401,465,405,377,336,436,419],
[509,0,456,483,491,434,423,488,488],
[489,434,0,490,451,423,397,513,499],
[425,407,400,0,413,340,372,414,454],
[485,399,439,477,0,386,477,453,489],
[513,456,467,550,504,0,378,492,476],
[554,467,493,518,413,512,0,474,468],
[454,402,377,476,437,398,416,0,418],
[471,402,391,436,401,414,422,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,439,454,446,478,465,493,469],
[439,0,422,420,439,424,416,448,445],
[451,468,0,445,456,473,483,509,465],
[436,470,445,0,456,448,478,480,453],
[444,451,434,434,0,438,451,479,462],
[412,466,417,442,452,0,424,464,434],
[425,474,407,412,439,466,0,444,445],
[397,442,381,410,411,426,446,0,417],
[421,445,425,437,428,456,445,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,486,436,460,446,509,485,451],
[398,0,464,411,449,423,464,466,405],
[404,426,0,435,403,426,493,440,442],
[454,479,455,0,489,437,531,477,489],
[430,441,487,401,0,430,467,436,407],
[444,467,464,453,460,0,500,507,449],
[381,426,397,359,423,390,0,400,398],
[405,424,450,413,454,383,490,0,422],
[439,485,448,401,483,441,492,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,492,455,443,487,503,450,473],
[418,0,458,429,415,445,454,426,442],
[398,432,0,451,402,425,447,437,409],
[435,461,439,0,418,436,445,437,416],
[447,475,488,472,0,471,490,438,463],
[403,445,465,454,419,0,480,442,461],
[387,436,443,445,400,410,0,426,444],
[440,464,453,453,452,448,464,0,448],
[417,448,481,474,427,429,446,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,467,450,463,443,469,451,436],
[407,0,463,408,434,422,444,440,425],
[423,427,0,426,429,425,456,379,432],
[440,482,464,0,450,452,468,431,461],
[427,456,461,440,0,433,476,444,467],
[447,468,465,438,457,0,471,418,412],
[421,446,434,422,414,419,0,413,398],
[439,450,511,459,446,472,477,0,455],
[454,465,458,429,423,478,492,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,421,410,425,427,436,431,463],
[460,0,445,433,460,466,449,468,437],
[469,445,0,439,444,455,457,471,427],
[480,457,451,0,437,464,449,472,466],
[465,430,446,453,0,446,455,437,469],
[463,424,435,426,444,0,441,479,448],
[454,441,433,441,435,449,0,456,467],
[459,422,419,418,453,411,434,0,432],
[427,453,463,424,421,442,423,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,449,466,485,422,446,470,453],
[415,0,455,439,440,420,424,446,439],
[441,435,0,436,428,442,439,447,431],
[424,451,454,0,454,447,425,461,461],
[405,450,462,436,0,440,422,438,450],
[468,470,448,443,450,0,445,468,468],
[444,466,451,465,468,445,0,455,457],
[420,444,443,429,452,422,435,0,457],
[437,451,459,429,440,422,433,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,449,455,442,453,451,444,447],
[431,0,449,469,434,458,469,471,467],
[441,441,0,460,450,435,458,444,446],
[435,421,430,0,419,432,447,448,435],
[448,456,440,471,0,445,463,466,465],
[437,432,455,458,445,0,452,456,437],
[439,421,432,443,427,438,0,429,414],
[446,419,446,442,424,434,461,0,445],
[443,423,444,455,425,453,476,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,452,440,450,455,479,448,444],
[430,0,456,439,447,443,446,449,424],
[438,434,0,425,440,451,447,429,449],
[450,451,465,0,438,445,470,474,445],
[440,443,450,452,0,445,452,433,442],
[435,447,439,445,445,0,453,457,466],
[411,444,443,420,438,437,0,432,432],
[442,441,461,416,457,433,458,0,428],
[446,466,441,445,448,424,458,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,460,427,491,416,440,434,425],
[432,0,459,417,509,433,376,421,441],
[430,431,0,446,479,415,450,413,423],
[463,473,444,0,502,453,439,409,452],
[399,381,411,388,0,419,355,407,362],
[474,457,475,437,471,0,445,445,438],
[450,514,440,451,535,445,0,438,455],
[456,469,477,481,483,445,452,0,457],
[465,449,467,438,528,452,435,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,423,447,423,455,475,437,442],
[459,0,430,434,439,432,472,422,420],
[467,460,0,464,425,480,491,458,461],
[443,456,426,0,419,468,461,452,437],
[467,451,465,471,0,482,479,434,483],
[435,458,410,422,408,0,450,414,451],
[415,418,399,429,411,440,0,402,427],
[453,468,432,438,456,476,488,0,464],
[448,470,429,453,407,439,463,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,442,456,444,466,489,443,440],
[430,0,443,438,454,444,449,426,458],
[448,447,0,442,457,452,443,443,436],
[434,452,448,0,434,425,464,401,425],
[446,436,433,456,0,425,444,429,403],
[424,446,438,465,465,0,456,418,432],
[401,441,447,426,446,434,0,404,448],
[447,464,447,489,461,472,486,0,441],
[450,432,454,465,487,458,442,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,456,426,430,462,402,399,403],
[504,0,494,405,494,548,534,512,465],
[434,396,0,362,495,472,392,492,433],
[464,485,528,0,445,537,461,457,460],
[460,396,395,445,0,486,373,366,355],
[428,342,418,353,404,0,388,369,406],
[488,356,498,429,517,502,0,426,383],
[491,378,398,433,524,521,464,0,404],
[487,425,457,430,535,484,507,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,428,482,418,418,390,487,517],
[473,0,433,393,435,393,422,459,504],
[462,457,0,496,462,459,424,477,478],
[408,497,394,0,410,460,434,434,461],
[472,455,428,480,0,455,471,429,486],
[472,497,431,430,435,0,409,463,515],
[500,468,466,456,419,481,0,540,581],
[403,431,413,456,461,427,350,0,545],
[373,386,412,429,404,375,309,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,446,449,452,445,434,461,445],
[450,0,453,449,446,460,436,458,463],
[444,437,0,444,440,446,430,454,426],
[441,441,446,0,428,454,447,446,437],
[438,444,450,462,0,459,421,446,445],
[445,430,444,436,431,0,436,456,438],
[456,454,460,443,469,454,0,474,454],
[429,432,436,444,444,434,416,0,438],
[445,427,464,453,445,452,436,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,468,455,446,453,407,463,448],
[480,0,441,496,471,439,446,465,444],
[422,449,0,452,437,461,391,412,468],
[435,394,438,0,459,494,384,379,448],
[444,419,453,431,0,433,412,427,428],
[437,451,429,396,457,0,425,437,417],
[483,444,499,506,478,465,0,442,493],
[427,425,478,511,463,453,448,0,444],
[442,446,422,442,462,473,397,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,507,432,440,472,520,454,441],
[448,0,508,394,440,477,490,487,473],
[383,382,0,389,410,433,456,421,403],
[458,496,501,0,482,436,510,456,495],
[450,450,480,408,0,479,511,449,437],
[418,413,457,454,411,0,489,450,436],
[370,400,434,380,379,401,0,393,405],
[436,403,469,434,441,440,497,0,391],
[449,417,487,395,453,454,485,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,437,426,450,446,457,440,439],
[460,0,446,434,454,404,436,411,444],
[453,444,0,438,433,440,435,459,454],
[464,456,452,0,453,440,462,450,451],
[440,436,457,437,0,425,424,428,418],
[444,486,450,450,465,0,454,442,448],
[433,454,455,428,466,436,0,465,445],
[450,479,431,440,462,448,425,0,458],
[451,446,436,439,472,442,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,470,449,423,471,446,464,482],
[430,0,460,432,434,455,464,437,454],
[420,430,0,420,421,447,437,415,453],
[441,458,470,0,427,457,456,434,467],
[467,456,469,463,0,457,468,438,468],
[419,435,443,433,433,0,438,429,453],
[444,426,453,434,422,452,0,422,457],
[426,453,475,456,452,461,468,0,471],
[408,436,437,423,422,437,433,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,450,453,447,460,440,413,451],
[435,0,435,418,435,415,388,394,425],
[440,455,0,425,417,440,420,394,425],
[437,472,465,0,451,480,437,449,449],
[443,455,473,439,0,485,464,435,447],
[430,475,450,410,405,0,439,420,421],
[450,502,470,453,426,451,0,409,459],
[477,496,496,441,455,470,481,0,501],
[439,465,465,441,443,469,431,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,458,432,451,452,453,442,449],
[440,0,471,463,471,452,476,489,451],
[432,419,0,426,437,437,457,443,435],
[458,427,464,0,459,456,457,439,449],
[439,419,453,431,0,454,465,445,448],
[438,438,453,434,436,0,467,458,467],
[437,414,433,433,425,423,0,443,435],
[448,401,447,451,445,432,447,0,448],
[441,439,455,441,442,423,455,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,491,491,496,456,427,442,444],
[451,0,450,461,473,429,414,430,433],
[399,440,0,445,470,437,418,429,434],
[399,429,445,0,449,411,386,430,431],
[394,417,420,441,0,413,391,421,420],
[434,461,453,479,477,0,453,452,446],
[463,476,472,504,499,437,0,459,481],
[448,460,461,460,469,438,431,0,441],
[446,457,456,459,470,444,409,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,457,462,458,446,479,434,468],
[433,0,401,441,450,431,448,408,373],
[433,489,0,454,451,478,483,448,437],
[428,449,436,0,456,479,490,452,440],
[432,440,439,434,0,451,458,447,414],
[444,459,412,411,439,0,447,432,423],
[411,442,407,400,432,443,0,418,415],
[456,482,442,438,443,458,472,0,431],
[422,517,453,450,476,467,475,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,443,446,427,462,453,431,460],
[438,0,463,448,453,468,458,437,441],
[447,427,0,441,453,452,441,437,439],
[444,442,449,0,470,463,444,472,449],
[463,437,437,420,0,454,441,448,423],
[428,422,438,427,436,0,440,428,441],
[437,432,449,446,449,450,0,460,406],
[459,453,453,418,442,462,430,0,452],
[430,449,451,441,467,449,484,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,445,433,438,441,476,411,452],
[422,0,454,417,470,442,441,431,416],
[445,436,0,455,447,439,444,415,427],
[457,473,435,0,442,459,471,471,413],
[452,420,443,448,0,464,444,435,444],
[449,448,451,431,426,0,470,445,445],
[414,449,446,419,446,420,0,421,441],
[479,459,475,419,455,445,469,0,435],
[438,474,463,477,446,445,449,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,469,425,424,464,428,429,425],
[468,0,419,408,374,439,423,424,406],
[421,471,0,441,397,445,472,458,422],
[465,482,449,0,376,417,434,418,369],
[466,516,493,514,0,438,468,503,455],
[426,451,445,473,452,0,442,449,432],
[462,467,418,456,422,448,0,434,408],
[461,466,432,472,387,441,456,0,420],
[465,484,468,521,435,458,482,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,437,440,440,462,426,430,447],
[446,0,445,442,427,415,422,435,420],
[453,445,0,455,444,458,426,407,405],
[450,448,435,0,468,461,451,425,461],
[450,463,446,422,0,449,434,420,442],
[428,475,432,429,441,0,426,448,462],
[464,468,464,439,456,464,0,452,472],
[460,455,483,465,470,442,438,0,462],
[443,470,485,429,448,428,418,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,512,447,450,439,516,509,463],
[439,0,502,434,432,436,481,487,463],
[378,388,0,470,418,400,454,460,463],
[443,456,420,0,434,448,448,466,513],
[440,458,472,456,0,472,512,499,488],
[451,454,490,442,418,0,462,512,465],
[374,409,436,442,378,428,0,473,412],
[381,403,430,424,391,378,417,0,463],
[427,427,427,377,402,425,478,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,425,417,441,463,441,437,442],
[429,0,432,446,441,458,448,453,468],
[465,458,0,455,445,487,444,465,464],
[473,444,435,0,433,471,441,455,449],
[449,449,445,457,0,451,447,459,453],
[427,432,403,419,439,0,429,430,444],
[449,442,446,449,443,461,0,470,453],
[453,437,425,435,431,460,420,0,447],
[448,422,426,441,437,446,437,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,447,458,457,452,434,456],
[428,0,449,442,440,441,439,421,429],
[445,441,0,482,474,444,468,441,454],
[443,448,408,0,442,435,445,413,441],
[432,450,416,448,0,427,425,415,429],
[433,449,446,455,463,0,457,440,446],
[438,451,422,445,465,433,0,429,433],
[456,469,449,477,475,450,461,0,445],
[434,461,436,449,461,444,457,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,440,424,435,439,439,424,465],
[466,0,499,404,462,434,471,433,480],
[450,391,0,447,487,423,410,467,495],
[466,486,443,0,460,413,445,452,463],
[455,428,403,430,0,395,475,441,475],
[451,456,467,477,495,0,472,390,497],
[451,419,480,445,415,418,0,404,459],
[466,457,423,438,449,500,486,0,522],
[425,410,395,427,415,393,431,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,392,411,472,394,472,427,434],
[477,0,458,415,412,455,538,473,413],
[498,432,0,477,473,473,537,472,393],
[479,475,413,0,437,458,538,454,478],
[418,478,417,453,0,476,578,494,518],
[496,435,417,432,414,0,474,430,355],
[418,352,353,352,312,416,0,410,373],
[463,417,418,436,396,460,480,0,383],
[456,477,497,412,372,535,517,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,430,476,439,420,461,459,430],
[434,0,417,459,451,455,437,453,436],
[460,473,0,443,462,431,425,463,424],
[414,431,447,0,444,416,445,440,456],
[451,439,428,446,0,434,438,419,420],
[470,435,459,474,456,0,457,434,393],
[429,453,465,445,452,433,0,425,411],
[431,437,427,450,471,456,465,0,405],
[460,454,466,434,470,497,479,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,394,399,371,432,411,443,399],
[494,0,435,412,451,473,439,467,451],
[496,455,0,447,440,449,390,481,418],
[491,478,443,0,458,479,452,471,455],
[519,439,450,432,0,467,435,495,444],
[458,417,441,411,423,0,433,488,404],
[479,451,500,438,455,457,0,491,444],
[447,423,409,419,395,402,399,0,383],
[491,439,472,435,446,486,446,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,404,436,420,414,409,420,399],
[469,0,435,460,463,409,412,475,429],
[486,455,0,443,443,420,413,465,432],
[454,430,447,0,444,436,402,441,398],
[470,427,447,446,0,420,407,427,395],
[476,481,470,454,470,0,480,483,445],
[481,478,477,488,483,410,0,473,424],
[470,415,425,449,463,407,417,0,413],
[491,461,458,492,495,445,466,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,449,446,455,469,485,463,486],
[450,0,479,403,453,453,473,424,442],
[441,411,0,413,437,453,500,421,466],
[444,487,477,0,481,452,482,441,458],
[435,437,453,409,0,429,486,431,441],
[421,437,437,438,461,0,472,395,454],
[405,417,390,408,404,418,0,404,418],
[427,466,469,449,459,495,486,0,473],
[404,448,424,432,449,436,472,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,414,457,482,470,372,390,419],
[494,0,453,464,465,468,383,497,496],
[476,437,0,465,547,467,438,426,476],
[433,426,425,0,477,414,449,441,440],
[408,425,343,413,0,522,374,412,417],
[420,422,423,476,368,0,384,399,406],
[518,507,452,441,516,506,0,552,491],
[500,393,464,449,478,491,338,0,447],
[471,394,414,450,473,484,399,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,452,451,460,482,444,452,464],
[420,0,425,430,407,463,428,449,467],
[438,465,0,461,419,471,437,474,481],
[439,460,429,0,413,475,452,448,479],
[430,483,471,477,0,504,476,469,473],
[408,427,419,415,386,0,412,431,430],
[446,462,453,438,414,478,0,431,488],
[438,441,416,442,421,459,459,0,449],
[426,423,409,411,417,460,402,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,415,484,429,416,447,502,447],
[452,0,414,426,425,423,390,491,445],
[475,476,0,526,442,480,439,514,467],
[406,464,364,0,435,438,453,474,441],
[461,465,448,455,0,441,451,538,424],
[474,467,410,452,449,0,465,502,473],
[443,500,451,437,439,425,0,472,447],
[388,399,376,416,352,388,418,0,409],
[443,445,423,449,466,417,443,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,474,402,429,459,420,442,422],
[437,0,444,443,446,453,453,418,442],
[416,446,0,431,422,421,396,409,421],
[488,447,459,0,462,468,440,426,460],
[461,444,468,428,0,462,419,456,430],
[431,437,469,422,428,0,427,423,430],
[470,437,494,450,471,463,0,493,461],
[448,472,481,464,434,467,397,0,451],
[468,448,469,430,460,460,429,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,443,441,442,455,451,447,449],
[418,0,446,445,455,442,439,436,433],
[447,444,0,444,447,451,446,450,451],
[449,445,446,0,447,443,435,444,435],
[448,435,443,443,0,428,440,422,436],
[435,448,439,447,462,0,434,433,447],
[439,451,444,455,450,456,0,456,451],
[443,454,440,446,468,457,434,0,454],
[441,457,439,455,454,443,439,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,437,444,438,424,428,461,437],
[450,0,420,420,419,456,420,465,436],
[453,470,0,458,462,444,462,479,465],
[446,470,432,0,450,458,439,485,451],
[452,471,428,440,0,458,429,454,447],
[466,434,446,432,432,0,433,467,439],
[462,470,428,451,461,457,0,490,434],
[429,425,411,405,436,423,400,0,436],
[453,454,425,439,443,451,456,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,447,494,498,402,468,413,469],
[379,0,426,455,442,392,441,403,447],
[443,464,0,471,532,492,493,447,440],
[396,435,419,0,460,394,417,413,418],
[392,448,358,430,0,395,432,460,450],
[488,498,398,496,495,0,425,496,512],
[422,449,397,473,458,465,0,412,461],
[477,487,443,477,430,394,478,0,447],
[421,443,450,472,440,378,429,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,447,446,460,451,449,464],
[428,0,462,435,433,458,418,438,453],
[448,428,0,426,427,468,438,443,425],
[443,455,464,0,446,444,435,441,444],
[444,457,463,444,0,472,445,455,447],
[430,432,422,446,418,0,435,428,439],
[439,472,452,455,445,455,0,450,457],
[441,452,447,449,435,462,440,0,431],
[426,437,465,446,443,451,433,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,450,437,449,456,471,446,443],
[427,0,452,437,446,475,426,457,438],
[440,438,0,449,459,447,441,450,421],
[453,453,441,0,436,456,442,461,430],
[441,444,431,454,0,425,453,436,455],
[434,415,443,434,465,0,439,452,449],
[419,464,449,448,437,451,0,434,416],
[444,433,440,429,454,438,456,0,445],
[447,452,469,460,435,441,474,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,463,443,455,497,451,469,450],
[473,0,488,504,417,490,443,451,439],
[427,402,0,427,427,460,399,422,410],
[447,386,463,0,416,499,428,477,424],
[435,473,463,474,0,471,491,462,529],
[393,400,430,391,419,0,408,469,376],
[439,447,491,462,399,482,0,432,472],
[421,439,468,413,428,421,458,0,469],
[440,451,480,466,361,514,418,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,433,429,436,406,443,449,452],
[486,0,443,437,454,440,471,442,487],
[457,447,0,425,462,442,432,443,461],
[461,453,465,0,448,460,443,463,471],
[454,436,428,442,0,439,436,443,472],
[484,450,448,430,451,0,444,481,453],
[447,419,458,447,454,446,0,449,456],
[441,448,447,427,447,409,441,0,446],
[438,403,429,419,418,437,434,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,428,434,460,468,450,449,471],
[400,0,426,437,443,437,433,414,444],
[462,464,0,446,448,439,472,440,462],
[456,453,444,0,479,470,448,438,479],
[430,447,442,411,0,410,451,416,446],
[422,453,451,420,480,0,422,427,423],
[440,457,418,442,439,468,0,417,456],
[441,476,450,452,474,463,473,0,480],
[419,446,428,411,444,467,434,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,408,427,445,414,447,399,414],
[460,0,422,428,448,448,453,435,460],
[482,468,0,447,431,448,436,433,440],
[463,462,443,0,472,428,443,432,429],
[445,442,459,418,0,459,451,413,463],
[476,442,442,462,431,0,450,423,460],
[443,437,454,447,439,440,0,445,451],
[491,455,457,458,477,467,445,0,440],
[476,430,450,461,427,430,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,453,457,413,421,424,424,459],
[456,0,455,472,427,432,445,476,442],
[437,435,0,467,443,420,433,458,464],
[433,418,423,0,429,433,419,439,426],
[477,463,447,461,0,453,415,452,463],
[469,458,470,457,437,0,438,467,477],
[466,445,457,471,475,452,0,474,483],
[466,414,432,451,438,423,416,0,436],
[431,448,426,464,427,413,407,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,440,442,387,426,447,415,442],
[426,0,436,431,458,426,451,447,463],
[450,454,0,453,447,476,444,435,435],
[448,459,437,0,419,428,446,415,454],
[503,432,443,471,0,447,469,427,414],
[464,464,414,462,443,0,427,440,429],
[443,439,446,444,421,463,0,421,420],
[475,443,455,475,463,450,469,0,394],
[448,427,455,436,476,461,470,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,452,456,447,436,442,442,433],
[430,0,450,419,438,413,440,444,432],
[438,440,0,436,449,414,439,445,393],
[434,471,454,0,457,416,453,458,456],
[443,452,441,433,0,431,429,445,431],
[454,477,476,474,459,0,468,465,444],
[448,450,451,437,461,422,0,446,456],
[448,446,445,432,445,425,444,0,422],
[457,458,497,434,459,446,434,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,419,426,451,412,448,422,407],
[444,0,439,414,462,431,454,432,441],
[471,451,0,444,472,454,484,445,447],
[464,476,446,0,469,451,465,445,452],
[439,428,418,421,0,422,441,407,420],
[478,459,436,439,468,0,491,460,471],
[442,436,406,425,449,399,0,433,414],
[468,458,445,445,483,430,457,0,449],
[483,449,443,438,470,419,476,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,443,454,456,446,432,454,452],
[434,0,437,463,467,439,438,444,420],
[447,453,0,461,457,452,472,460,440],
[436,427,429,0,407,418,440,432,416],
[434,423,433,483,0,449,433,443,437],
[444,451,438,472,441,0,458,472,446],
[458,452,418,450,457,432,0,427,427],
[436,446,430,458,447,418,463,0,422],
[438,470,450,474,453,444,463,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,456,436,440,447,456,462,437],
[431,0,439,465,427,427,442,444,433],
[434,451,0,436,444,428,444,464,446],
[454,425,454,0,441,442,442,454,437],
[450,463,446,449,0,450,443,445,440],
[443,463,462,448,440,0,453,445,424],
[434,448,446,448,447,437,0,439,441],
[428,446,426,436,445,445,451,0,433],
[453,457,444,453,450,466,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,451,451,476,451,506,464,393],
[373,0,394,440,423,416,461,403,398],
[439,496,0,461,497,467,479,394,414],
[439,450,429,0,438,454,485,409,417],
[414,467,393,452,0,439,511,386,411],
[439,474,423,436,451,0,500,407,454],
[384,429,411,405,379,390,0,364,328],
[426,487,496,481,504,483,526,0,419],
[497,492,476,473,479,436,562,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,485,464,451,473,444,424,456],
[452,0,442,456,432,449,435,440,453],
[405,448,0,455,431,469,436,452,451],
[426,434,435,0,438,458,440,425,436],
[439,458,459,452,0,489,442,435,446],
[417,441,421,432,401,0,433,437,472],
[446,455,454,450,448,457,0,431,447],
[466,450,438,465,455,453,459,0,461],
[434,437,439,454,444,418,443,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,417,416,399,445,469,417,424],
[448,0,451,445,432,444,510,431,476],
[473,439,0,430,447,464,472,417,432],
[474,445,460,0,480,471,476,437,458],
[491,458,443,410,0,445,473,432,460],
[445,446,426,419,445,0,475,441,436],
[421,380,418,414,417,415,0,419,411],
[473,459,473,453,458,449,471,0,443],
[466,414,458,432,430,454,479,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,463,458,424,439,466,443,439],
[419,0,421,401,376,417,410,378,386],
[427,469,0,465,471,429,448,437,451],
[432,489,425,0,451,465,442,439,448],
[466,514,419,439,0,459,448,450,414],
[451,473,461,425,431,0,457,458,420],
[424,480,442,448,442,433,0,449,451],
[447,512,453,451,440,432,441,0,435],
[451,504,439,442,476,470,439,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,422,428,454,466,458,448,451],
[449,0,428,450,462,475,452,457,475],
[468,462,0,472,465,453,437,487,470],
[462,440,418,0,418,463,420,431,449],
[436,428,425,472,0,446,405,394,457],
[424,415,437,427,444,0,406,440,448],
[432,438,453,470,485,484,0,427,458],
[442,433,403,459,496,450,463,0,483],
[439,415,420,441,433,442,432,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,440,439,427,450,416,434,454],
[446,0,446,460,460,444,436,444,460],
[450,444,0,454,439,458,444,447,460],
[451,430,436,0,429,445,422,450,445],
[463,430,451,461,0,434,412,446,441],
[440,446,432,445,456,0,423,446,459],
[474,454,446,468,478,467,0,440,466],
[456,446,443,440,444,444,450,0,454],
[436,430,430,445,449,431,424,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,472,445,459,481,466,427,477],
[437,0,467,463,451,463,472,444,449],
[418,423,0,443,417,451,468,434,442],
[445,427,447,0,438,447,475,438,418],
[431,439,473,452,0,475,473,446,456],
[409,427,439,443,415,0,437,429,430],
[424,418,422,415,417,453,0,419,445],
[463,446,456,452,444,461,471,0,457],
[413,441,448,472,434,460,445,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,454,436,465,425,458,438,426],
[470,0,452,436,466,410,481,407,439],
[436,438,0,434,434,395,448,406,433],
[454,454,456,0,434,437,471,447,451],
[425,424,456,456,0,420,470,419,413],
[465,480,495,453,470,0,490,480,438],
[432,409,442,419,420,400,0,432,424],
[452,483,484,443,471,410,458,0,471],
[464,451,457,439,477,452,466,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,439,451,450,435,440,443,426],
[430,0,444,434,442,447,439,459,429],
[451,446,0,437,434,421,433,457,441],
[439,456,453,0,456,439,444,446,444],
[440,448,456,434,0,463,437,474,420],
[455,443,469,451,427,0,436,471,458],
[450,451,457,446,453,454,0,456,445],
[447,431,433,444,416,419,434,0,429],
[464,461,449,446,470,432,445,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,440,450,435,438,440,443,448],
[427,0,427,441,461,434,429,432,411],
[450,463,0,455,463,456,448,460,436],
[440,449,435,0,462,444,443,451,445],
[455,429,427,428,0,449,437,435,434],
[452,456,434,446,441,0,449,442,436],
[450,461,442,447,453,441,0,437,442],
[447,458,430,439,455,448,453,0,440],
[442,479,454,445,456,454,448,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,427,419,428,457,426,427,424],
[510,0,444,524,476,461,522,459,467],
[463,446,0,465,430,442,462,430,436],
[471,366,425,0,420,451,427,387,412],
[462,414,460,470,0,470,463,423,410],
[433,429,448,439,420,0,435,376,404],
[464,368,428,463,427,455,0,439,414],
[463,431,460,503,467,514,451,0,472],
[466,423,454,478,480,486,476,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,417,442,445,453,432,415,431],
[455,0,422,461,452,455,432,429,428],
[473,468,0,472,452,476,449,457,445],
[448,429,418,0,435,446,433,413,424],
[445,438,438,455,0,439,434,434,435],
[437,435,414,444,451,0,426,439,416],
[458,458,441,457,456,464,0,415,421],
[475,461,433,477,456,451,475,0,447],
[459,462,445,466,455,474,469,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,455,453,452,446,462,434,456],
[408,0,414,420,430,437,429,419,426],
[435,476,0,463,448,464,470,461,484],
[437,470,427,0,446,435,456,431,459],
[438,460,442,444,0,436,446,424,452],
[444,453,426,455,454,0,446,435,450],
[428,461,420,434,444,444,0,426,436],
[456,471,429,459,466,455,464,0,475],
[434,464,406,431,438,440,454,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,442,411,461,452,423,451,449],
[445,0,428,410,457,455,439,450,446],
[448,462,0,444,456,451,435,468,433],
[479,480,446,0,483,451,454,443,460],
[429,433,434,407,0,433,408,434,441],
[438,435,439,439,457,0,441,469,447],
[467,451,455,436,482,449,0,461,433],
[439,440,422,447,456,421,429,0,431],
[441,444,457,430,449,443,457,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,430,482,468,452,420,447,463],
[426,0,428,459,461,460,427,437,427],
[460,462,0,491,454,444,438,438,433],
[408,431,399,0,445,424,411,408,390],
[422,429,436,445,0,434,396,457,387],
[438,430,446,466,456,0,436,440,436],
[470,463,452,479,494,454,0,473,431],
[443,453,452,482,433,450,417,0,449],
[427,463,457,500,503,454,459,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,412,439,446,425,423,411,407],
[484,0,430,463,443,446,411,427,402],
[478,460,0,450,485,440,431,437,448],
[451,427,440,0,454,417,400,426,426],
[444,447,405,436,0,425,417,449,425],
[465,444,450,473,465,0,447,464,451],
[467,479,459,490,473,443,0,433,442],
[479,463,453,464,441,426,457,0,453],
[483,488,442,464,465,439,448,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,515,494,481,485,443,516,535],
[384,0,472,465,400,480,394,442,453],
[375,418,0,459,413,425,373,427,464],
[396,425,431,0,376,351,427,430,415],
[409,490,477,514,0,495,419,524,539],
[405,410,465,539,395,0,451,475,471],
[447,496,517,463,471,439,0,538,463],
[374,448,463,460,366,415,352,0,513],
[355,437,426,475,351,419,427,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,445,433,431,449,448,431,409],
[454,0,451,444,402,447,485,450,469],
[445,439,0,472,448,468,464,446,446],
[457,446,418,0,452,424,437,449,414],
[459,488,442,438,0,463,472,457,452],
[441,443,422,466,427,0,455,457,445],
[442,405,426,453,418,435,0,446,431],
[459,440,444,441,433,433,444,0,427],
[481,421,444,476,438,445,459,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,433,437,427,447,421,430,440],
[463,0,444,461,428,448,451,442,438],
[457,446,0,461,433,469,432,472,452],
[453,429,429,0,436,436,439,425,453],
[463,462,457,454,0,457,422,449,470],
[443,442,421,454,433,0,428,442,447],
[469,439,458,451,468,462,0,465,458],
[460,448,418,465,441,448,425,0,453],
[450,452,438,437,420,443,432,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,417,440,453,426,438,464,419],
[472,0,432,453,478,462,473,468,443],
[473,458,0,448,485,452,482,471,441],
[450,437,442,0,488,416,435,449,421],
[437,412,405,402,0,412,406,432,453],
[464,428,438,474,478,0,467,492,487],
[452,417,408,455,484,423,0,433,440],
[426,422,419,441,458,398,457,0,408],
[471,447,449,469,437,403,450,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,437,444,448,460,459,447,451],
[442,0,464,472,481,452,467,454,437],
[453,426,0,447,474,447,446,446,460],
[446,418,443,0,469,463,460,433,460],
[442,409,416,421,0,432,441,422,440],
[430,438,443,427,458,0,445,438,467],
[431,423,444,430,449,445,0,421,474],
[443,436,444,457,468,452,469,0,440],
[439,453,430,430,450,423,416,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,445,444,491,425,479,525,566],
[495,0,407,430,513,469,533,531,528],
[445,483,0,488,424,506,505,568,504],
[446,460,402,0,423,511,486,467,439],
[399,377,466,467,0,424,456,571,456],
[465,421,384,379,466,0,439,545,482],
[411,357,385,404,434,451,0,531,456],
[365,359,322,423,319,345,359,0,314],
[324,362,386,451,434,408,434,576,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,459,454,484,436,456,444,488],
[424,0,437,434,452,459,447,468,482],
[431,453,0,440,460,440,449,462,488],
[436,456,450,0,460,451,452,442,464],
[406,438,430,430,0,437,433,451,455],
[454,431,450,439,453,0,464,458,492],
[434,443,441,438,457,426,0,442,473],
[446,422,428,448,439,432,448,0,451],
[402,408,402,426,435,398,417,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,478,447,483,447,442,427,413],
[476,0,438,429,461,376,402,440,408],
[412,452,0,379,431,430,422,443,448],
[443,461,511,0,514,394,508,477,428],
[407,429,459,376,0,465,405,390,396],
[443,514,460,496,425,0,510,462,462],
[448,488,468,382,485,380,0,448,382],
[463,450,447,413,500,428,442,0,467],
[477,482,442,462,494,428,508,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,478,427,454,428,452,431,458],
[438,0,468,438,443,429,420,441,447],
[412,422,0,424,417,416,445,418,448],
[463,452,466,0,434,461,431,494,461],
[436,447,473,456,0,430,427,477,475],
[462,461,474,429,460,0,453,471,456],
[438,470,445,459,463,437,0,480,467],
[459,449,472,396,413,419,410,0,426],
[432,443,442,429,415,434,423,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,437,436,424,472,431,444,437],
[455,0,437,424,436,475,427,438,427],
[453,453,0,447,434,475,431,436,427],
[454,466,443,0,445,463,439,443,447],
[466,454,456,445,0,469,453,466,436],
[418,415,415,427,421,0,413,436,412],
[459,463,459,451,437,477,0,457,454],
[446,452,454,447,424,454,433,0,410],
[453,463,463,443,454,478,436,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,464,658,659,656,466,696,542],
[464,0,386,504,542,619,543,542,387],
[426,504,0,619,581,579,466,580,620],
[232,386,271,0,466,424,349,424,428],
[231,348,309,424,0,500,426,462,425],
[234,271,311,466,390,0,350,425,310],
[424,347,424,541,464,540,0,463,503],
[194,348,310,466,428,465,427,0,388],
[348,503,270,462,465,580,387,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,458,441,465,451,463,429,465],
[441,0,414,412,423,434,407,441,426],
[432,476,0,452,470,467,444,430,462],
[449,478,438,0,455,432,439,437,417],
[425,467,420,435,0,445,421,434,451],
[439,456,423,458,445,0,458,407,471],
[427,483,446,451,469,432,0,452,477],
[461,449,460,453,456,483,438,0,462],
[425,464,428,473,439,419,413,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,422,422,426,468,480,446,439],
[473,0,443,424,429,436,462,440,468],
[468,447,0,446,493,450,442,480,463],
[468,466,444,0,470,464,495,475,479],
[464,461,397,420,0,463,469,482,447],
[422,454,440,426,427,0,471,480,462],
[410,428,448,395,421,419,0,460,448],
[444,450,410,415,408,410,430,0,455],
[451,422,427,411,443,428,442,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,436,433,387,491,419,380,405],
[402,0,413,363,437,426,361,348,457],
[454,477,0,374,395,510,448,419,420],
[457,527,516,0,393,452,452,380,451],
[503,453,495,497,0,498,487,481,437],
[399,464,380,438,392,0,426,386,408],
[471,529,442,438,403,464,0,379,463],
[510,542,471,510,409,504,511,0,439],
[485,433,470,439,453,482,427,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,447,446,411,427,445,436,460],
[476,0,448,449,431,454,449,474,438],
[443,442,0,446,433,432,425,459,427],
[444,441,444,0,454,468,457,468,420],
[479,459,457,436,0,437,453,475,453],
[463,436,458,422,453,0,463,440,452],
[445,441,465,433,437,427,0,453,445],
[454,416,431,422,415,450,437,0,447],
[430,452,463,470,437,438,445,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,465,425,424,479,428,399,432],
[478,0,443,456,443,471,450,428,455],
[425,447,0,429,427,482,423,420,403],
[465,434,461,0,466,479,466,459,448],
[466,447,463,424,0,486,465,415,445],
[411,419,408,411,404,0,427,408,425],
[462,440,467,424,425,463,0,413,405],
[491,462,470,431,475,482,477,0,435],
[458,435,487,442,445,465,485,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,431,442,401,455,435,440,427],
[471,0,458,453,451,443,472,469,459],
[459,432,0,448,452,472,455,442,436],
[448,437,442,0,429,434,438,412,424],
[489,439,438,461,0,483,464,438,459],
[435,447,418,456,407,0,425,432,434],
[455,418,435,452,426,465,0,421,450],
[450,421,448,478,452,458,469,0,456],
[463,431,454,466,431,456,440,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,458,472,455,448,463,471,454],
[447,0,438,448,438,418,458,452,442],
[432,452,0,454,473,459,475,444,454],
[418,442,436,0,424,414,476,445,434],
[435,452,417,466,0,436,461,432,433],
[442,472,431,476,454,0,474,456,438],
[427,432,415,414,429,416,0,425,412],
[419,438,446,445,458,434,465,0,445],
[436,448,436,456,457,452,478,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,473,456,442,447,448,473,455],
[436,0,454,452,458,437,452,459,461],
[417,436,0,449,443,455,458,469,443],
[434,438,441,0,410,432,444,459,430],
[448,432,447,480,0,445,447,458,441],
[443,453,435,458,445,0,462,455,456],
[442,438,432,446,443,428,0,465,457],
[417,431,421,431,432,435,425,0,423],
[435,429,447,460,449,434,433,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,430,432,417,399,439,440,441],
[442,0,428,444,456,366,446,424,425],
[460,462,0,493,485,466,444,455,494],
[458,446,397,0,469,385,443,414,477],
[473,434,405,421,0,388,446,424,441],
[491,524,424,505,502,0,471,491,515],
[451,444,446,447,444,419,0,444,455],
[450,466,435,476,466,399,446,0,426],
[449,465,396,413,449,375,435,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,451,434,446,457,438,453],
[446,0,440,433,423,443,456,461,444],
[437,450,0,428,439,472,463,461,448],
[439,457,462,0,446,474,466,461,466],
[456,467,451,444,0,476,453,460,447],
[444,447,418,416,414,0,431,440,442],
[433,434,427,424,437,459,0,438,455],
[452,429,429,429,430,450,452,0,446],
[437,446,442,424,443,448,435,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,448,469,476,450,473,439,470],
[424,0,444,451,451,451,439,466,479],
[442,446,0,439,479,453,469,446,457],
[421,439,451,0,468,452,469,442,481],
[414,439,411,422,0,430,437,422,442],
[440,439,437,438,460,0,436,427,454],
[417,451,421,421,453,454,0,413,450],
[451,424,444,448,468,463,477,0,456],
[420,411,433,409,448,436,440,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,427,414,389,459,403,433,474],
[467,0,374,426,425,438,388,420,442],
[463,516,0,436,444,504,432,428,476],
[476,464,454,0,488,511,412,446,472],
[501,465,446,402,0,452,411,395,487],
[431,452,386,379,438,0,386,416,462],
[487,502,458,478,479,504,0,422,488],
[457,470,462,444,495,474,468,0,466],
[416,448,414,418,403,428,402,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,419,430,433,422,449,410,429],
[457,0,445,445,447,463,465,448,455],
[471,445,0,444,456,459,466,451,460],
[460,445,446,0,469,463,470,441,452],
[457,443,434,421,0,431,447,444,438],
[468,427,431,427,459,0,437,430,434],
[441,425,424,420,443,453,0,451,450],
[480,442,439,449,446,460,439,0,437],
[461,435,430,438,452,456,440,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,463,441,478,459,464,460,467],
[416,0,431,434,426,413,417,434,451],
[427,459,0,453,449,429,428,442,432],
[449,456,437,0,460,428,435,473,470],
[412,464,441,430,0,417,412,433,450],
[431,477,461,462,473,0,447,466,487],
[426,473,462,455,478,443,0,445,472],
[430,456,448,417,457,424,445,0,463],
[423,439,458,420,440,403,418,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,444,440,417,450,475,409,468],
[426,0,438,430,417,410,446,400,430],
[446,452,0,474,412,450,433,426,485],
[450,460,416,0,438,421,477,482,495],
[473,473,478,452,0,455,467,427,456],
[440,480,440,469,435,0,478,436,457],
[415,444,457,413,423,412,0,400,426],
[481,490,464,408,463,454,490,0,446],
[422,460,405,395,434,433,464,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,464,396,436,407,446,415,427],
[439,0,413,415,428,428,450,403,426],
[426,477,0,401,427,424,440,385,419],
[494,475,489,0,460,449,463,424,436],
[454,462,463,430,0,454,418,406,433],
[483,462,466,441,436,0,438,453,417],
[444,440,450,427,472,452,0,435,408],
[475,487,505,466,484,437,455,0,445],
[463,464,471,454,457,473,482,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,448,451,453,440,454,443,443],
[452,0,453,467,459,451,461,445,450],
[442,437,0,446,450,436,456,459,435],
[439,423,444,0,436,429,454,434,451],
[437,431,440,454,0,441,453,435,417],
[450,439,454,461,449,0,460,458,458],
[436,429,434,436,437,430,0,442,438],
[447,445,431,456,455,432,448,0,424],
[447,440,455,439,473,432,452,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,416,399,423,408,409,406,395],
[478,0,451,460,471,466,447,444,438],
[474,439,0,417,469,421,460,474,430],
[491,430,473,0,505,421,455,436,477],
[467,419,421,385,0,426,423,432,435],
[482,424,469,469,464,0,437,457,438],
[481,443,430,435,467,453,0,456,408],
[484,446,416,454,458,433,434,0,411],
[495,452,460,413,455,452,482,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,452,458,456,455,436,458,433],
[412,0,440,412,428,413,444,422,406],
[438,450,0,404,448,419,411,434,410],
[432,478,486,0,452,445,465,493,458],
[434,462,442,438,0,433,439,433,423],
[435,477,471,445,457,0,439,460,422],
[454,446,479,425,451,451,0,445,453],
[432,468,456,397,457,430,445,0,435],
[457,484,480,432,467,468,437,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,427,429,488,430,402,474,430],
[414,0,421,445,467,417,441,484,455],
[463,469,0,469,510,391,514,553,462],
[461,445,421,0,516,447,445,518,472],
[402,423,380,374,0,432,418,427,400],
[460,473,499,443,458,0,432,455,457],
[488,449,376,445,472,458,0,530,443],
[416,406,337,372,463,435,360,0,417],
[460,435,428,418,490,433,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,417,443,416,467,444,437,427],
[456,0,447,483,464,494,436,459,454],
[473,443,0,419,430,460,464,430,433],
[447,407,471,0,441,482,457,458,438],
[474,426,460,449,0,494,459,441,463],
[423,396,430,408,396,0,453,443,424],
[446,454,426,433,431,437,0,430,416],
[453,431,460,432,449,447,460,0,461],
[463,436,457,452,427,466,474,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,411,417,431,386,419,416,410],
[479,0,473,417,468,474,468,455,443],
[479,417,0,506,488,436,483,431,446],
[473,473,384,0,471,450,458,456,437],
[459,422,402,419,0,415,426,427,395],
[504,416,454,440,475,0,483,442,454],
[471,422,407,432,464,407,0,470,439],
[474,435,459,434,463,448,420,0,435],
[480,447,444,453,495,436,451,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,445,422,438,430,428,445,422],
[455,0,464,451,436,439,474,438,443],
[445,426,0,445,426,439,445,444,430],
[468,439,445,0,452,436,453,441,445],
[452,454,464,438,0,442,472,466,447],
[460,451,451,454,448,0,448,442,448],
[462,416,445,437,418,442,0,435,426],
[445,452,446,449,424,448,455,0,439],
[468,447,460,445,443,442,464,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,365,386,314,340,388,435,387],
[581,0,434,556,466,416,487,511,536],
[525,456,0,404,383,506,457,528,505],
[504,334,486,0,412,486,436,436,485],
[576,424,507,478,0,456,408,551,483],
[550,474,384,404,434,0,383,551,481],
[502,403,433,454,482,507,0,552,555],
[455,379,362,454,339,339,338,0,339],
[503,354,385,405,407,409,335,551,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,427,428,434,418,456,468,405],
[463,0,441,433,463,419,407,415,398],
[463,449,0,382,436,465,429,446,414],
[462,457,508,0,475,475,447,498,433],
[456,427,454,415,0,454,461,459,405],
[472,471,425,415,436,0,479,461,423],
[434,483,461,443,429,411,0,483,414],
[422,475,444,392,431,429,407,0,451],
[485,492,476,457,485,467,476,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,491,448,423,466,443,486,443],
[422,0,446,444,456,465,455,476,467],
[399,444,0,415,433,424,443,438,429],
[442,446,475,0,430,424,475,481,445],
[467,434,457,460,0,431,450,472,454],
[424,425,466,466,459,0,438,457,476],
[447,435,447,415,440,452,0,457,455],
[404,414,452,409,418,433,433,0,433],
[447,423,461,445,436,414,435,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,460,428,423,442,456,432,456],
[421,0,458,461,444,453,458,441,462],
[430,432,0,445,422,432,474,433,425],
[462,429,445,0,407,455,476,444,464],
[467,446,468,483,0,446,469,461,442],
[448,437,458,435,444,0,473,447,456],
[434,432,416,414,421,417,0,428,407],
[458,449,457,446,429,443,462,0,446],
[434,428,465,426,448,434,483,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,451,450,468,436,445,479,422],
[448,0,455,464,442,471,428,452,444],
[439,435,0,448,461,439,440,444,450],
[440,426,442,0,430,424,440,430,436],
[422,448,429,460,0,439,447,448,411],
[454,419,451,466,451,0,451,453,438],
[445,462,450,450,443,439,0,440,433],
[411,438,446,460,442,437,450,0,452],
[468,446,440,454,479,452,457,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,457,444,431,421,446,451,444],
[452,0,454,435,460,447,431,444,434],
[433,436,0,423,436,448,438,423,427],
[446,455,467,0,438,435,440,435,456],
[459,430,454,452,0,434,449,436,452],
[469,443,442,455,456,0,443,448,445],
[444,459,452,450,441,447,0,440,459],
[439,446,467,455,454,442,450,0,435],
[446,456,463,434,438,445,431,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,445,465,442,453,461,458,467],
[427,0,431,441,425,443,450,417,418],
[445,459,0,432,438,468,448,446,470],
[425,449,458,0,455,460,461,444,440],
[448,465,452,435,0,458,451,443,450],
[437,447,422,430,432,0,441,440,445],
[429,440,442,429,439,449,0,428,436],
[432,473,444,446,447,450,462,0,431],
[423,472,420,450,440,445,454,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,466,429,470,457,444,444],
[446,0,462,466,460,443,449,452,437],
[437,428,0,469,449,446,447,419,450],
[424,424,421,0,445,421,438,448,439],
[461,430,441,445,0,437,427,457,445],
[420,447,444,469,453,0,472,445,458],
[433,441,443,452,463,418,0,448,431],
[446,438,471,442,433,445,442,0,451],
[446,453,440,451,445,432,459,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,452,484,416,403,400,421,405],
[529,0,435,508,472,501,481,457,428],
[438,455,0,467,429,404,445,412,454],
[406,382,423,0,399,413,449,400,393],
[474,418,461,491,0,459,484,452,435],
[487,389,486,477,431,0,440,440,397],
[490,409,445,441,406,450,0,412,375],
[469,433,478,490,438,450,478,0,424],
[485,462,436,497,455,493,515,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,433,419,440,451,434,442,422],
[450,0,460,423,448,479,450,439,429],
[457,430,0,416,432,450,431,433,441],
[471,467,474,0,472,466,480,468,438],
[450,442,458,418,0,458,418,426,437],
[439,411,440,424,432,0,421,420,407],
[456,440,459,410,472,469,0,435,437],
[448,451,457,422,464,470,455,0,449],
[468,461,449,452,453,483,453,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,453,465,455,443,427,453,467],
[424,0,429,422,435,419,426,435,436],
[437,461,0,429,413,448,416,438,433],
[425,468,461,0,442,449,428,442,432],
[435,455,477,448,0,466,461,462,464],
[447,471,442,441,424,0,445,429,433],
[463,464,474,462,429,445,0,448,442],
[437,455,452,448,428,461,442,0,462],
[423,454,457,458,426,457,448,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,462,435,406,455,428,445,482],
[463,0,432,410,417,435,433,449,456],
[428,458,0,434,433,464,450,436,485],
[455,480,456,0,439,449,452,443,469],
[484,473,457,451,0,454,440,448,478],
[435,455,426,441,436,0,444,428,437],
[462,457,440,438,450,446,0,432,439],
[445,441,454,447,442,462,458,0,475],
[408,434,405,421,412,453,451,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,435,446,445,449,484,443,446],
[431,0,426,414,424,443,459,430,421],
[455,464,0,432,437,459,484,413,438],
[444,476,458,0,449,461,484,458,437],
[445,466,453,441,0,459,444,448,445],
[441,447,431,429,431,0,448,436,442],
[406,431,406,406,446,442,0,418,409],
[447,460,477,432,442,454,472,0,434],
[444,469,452,453,445,448,481,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,449,457,424,449,450,457,433],
[491,0,440,493,483,465,466,469,478],
[441,450,0,445,452,463,459,458,427],
[433,397,445,0,420,451,444,416,445],
[466,407,438,470,0,467,455,456,452],
[441,425,427,439,423,0,433,433,447],
[440,424,431,446,435,457,0,421,442],
[433,421,432,474,434,457,469,0,467],
[457,412,463,445,438,443,448,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,441,450,448,450,458,465,460],
[431,0,435,433,437,437,457,439,444],
[449,455,0,426,436,450,446,460,449],
[440,457,464,0,453,436,444,445,447],
[442,453,454,437,0,461,448,461,439],
[440,453,440,454,429,0,439,442,452],
[432,433,444,446,442,451,0,439,446],
[425,451,430,445,429,448,451,0,440],
[430,446,441,443,451,438,444,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,419,435,460,439,439,437],
[448,0,442,446,445,452,445,444,438],
[442,448,0,437,479,455,467,458,464],
[471,444,453,0,436,475,452,448,442],
[455,445,411,454,0,453,448,457,423],
[430,438,435,415,437,0,420,427,442],
[451,445,423,438,442,470,0,446,445],
[451,446,432,442,433,463,444,0,454],
[453,452,426,448,467,448,445,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,435,436,434,413,443,433,429],
[440,0,429,428,447,423,439,430,422],
[455,461,0,453,461,460,453,451,445],
[454,462,437,0,442,474,437,470,431],
[456,443,429,448,0,434,429,447,435],
[477,467,430,416,456,0,442,428,425],
[447,451,437,453,461,448,0,439,452],
[457,460,439,420,443,462,451,0,432],
[461,468,445,459,455,465,438,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,440,453,452,437,446,459,454],
[451,0,447,444,445,424,448,448,474],
[450,443,0,462,453,450,444,461,455],
[437,446,428,0,448,429,450,439,456],
[438,445,437,442,0,426,439,445,460],
[453,466,440,461,464,0,459,441,459],
[444,442,446,440,451,431,0,452,448],
[431,442,429,451,445,449,438,0,442],
[436,416,435,434,430,431,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,433,423,430,412,436,424,420],
[471,0,424,445,456,446,470,435,447],
[457,466,0,462,455,470,460,433,446],
[467,445,428,0,445,453,424,417,428],
[460,434,435,445,0,467,457,449,440],
[478,444,420,437,423,0,456,421,434],
[454,420,430,466,433,434,0,409,437],
[466,455,457,473,441,469,481,0,441],
[470,443,444,462,450,456,453,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,460,448,445,414,442,425,446],
[420,0,457,432,465,457,458,458,493],
[430,433,0,426,434,448,426,436,459],
[442,458,464,0,436,447,481,452,512],
[445,425,456,454,0,429,495,463,494],
[476,433,442,443,461,0,475,447,476],
[448,432,464,409,395,415,0,428,450],
[465,432,454,438,427,443,462,0,476],
[444,397,431,378,396,414,440,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,456,485,396,401,385,411,453],
[391,0,393,385,404,367,405,419,440],
[434,497,0,456,518,438,460,502,528],
[405,505,434,0,450,454,403,405,422],
[494,486,372,440,0,445,441,403,441],
[489,523,452,436,445,0,382,439,452],
[505,485,430,487,449,508,0,454,501],
[479,471,388,485,487,451,436,0,468],
[437,450,362,468,449,438,389,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,480,419,508,568,487,470,398],
[357,0,461,467,462,548,511,384,420],
[410,429,0,449,532,427,478,450,403],
[471,423,441,0,529,399,556,491,486],
[382,428,358,361,0,424,516,367,358],
[322,342,463,491,466,0,516,365,464],
[403,379,412,334,374,374,0,315,353],
[420,506,440,399,523,525,575,0,417],
[492,470,487,404,532,426,537,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,435,444,422,401,419,419,428],
[466,0,412,436,456,437,449,428,472],
[455,478,0,448,450,416,449,428,512],
[446,454,442,0,428,466,415,438,473],
[468,434,440,462,0,459,460,455,447],
[489,453,474,424,431,0,451,435,472],
[471,441,441,475,430,439,0,448,484],
[471,462,462,452,435,455,442,0,491],
[462,418,378,417,443,418,406,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,454,448,457,455,490,424,421],
[450,0,471,433,459,441,465,455,458],
[436,419,0,428,413,401,440,437,438],
[442,457,462,0,458,432,462,457,442],
[433,431,477,432,0,436,438,438,416],
[435,449,489,458,454,0,494,471,460],
[400,425,450,428,452,396,0,425,407],
[466,435,453,433,452,419,465,0,465],
[469,432,452,448,474,430,483,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,440,500,464,458,463,487,454],
[474,0,409,494,360,470,420,499,481],
[450,481,0,537,489,436,566,489,464],
[390,396,353,0,379,454,376,454,388],
[426,530,401,511,0,462,410,451,384],
[432,420,454,436,428,0,451,480,364],
[427,470,324,514,480,439,0,465,405],
[403,391,401,436,439,410,425,0,413],
[436,409,426,502,506,526,485,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,435,433,453,456,477,426,433],
[436,0,462,459,455,450,464,453,429],
[455,428,0,410,461,446,444,447,444],
[457,431,480,0,490,477,432,436,456],
[437,435,429,400,0,444,422,409,416],
[434,440,444,413,446,0,437,405,432],
[413,426,446,458,468,453,0,431,456],
[464,437,443,454,481,485,459,0,454],
[457,461,446,434,474,458,434,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,451,431,427,458,449,434,437],
[446,0,427,426,431,451,432,438,446],
[439,463,0,451,437,448,444,446,442],
[459,464,439,0,446,463,478,458,469],
[463,459,453,444,0,449,463,434,448],
[432,439,442,427,441,0,441,445,457],
[441,458,446,412,427,449,0,434,447],
[456,452,444,432,456,445,456,0,452],
[453,444,448,421,442,433,443,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,464,451,434,441,440,429,455],
[449,0,456,465,452,460,443,436,456],
[426,434,0,453,422,440,444,437,438],
[439,425,437,0,426,437,442,428,444],
[456,438,468,464,0,452,451,455,469],
[449,430,450,453,438,0,435,451,455],
[450,447,446,448,439,455,0,444,452],
[461,454,453,462,435,439,446,0,468],
[435,434,452,446,421,435,438,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,470,422,439,453,428,442,437],
[447,0,448,422,451,485,426,437,451],
[420,442,0,400,426,439,406,399,398],
[468,468,490,0,426,470,440,459,432],
[451,439,464,464,0,459,461,430,435],
[437,405,451,420,431,0,422,407,418],
[462,464,484,450,429,468,0,465,458],
[448,453,491,431,460,483,425,0,448],
[453,439,492,458,455,472,432,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,443,457,490,473,502,454,509],
[412,0,453,435,420,415,449,402,486],
[447,437,0,468,450,483,484,432,486],
[433,455,422,0,468,415,461,439,452],
[400,470,440,422,0,453,452,415,470],
[417,475,407,475,437,0,466,453,494],
[388,441,406,429,438,424,0,423,393],
[436,488,458,451,475,437,467,0,525],
[381,404,404,438,420,396,497,365,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,465,427,435,419,478,470,479],
[404,0,429,424,416,394,468,484,437],
[425,461,0,475,395,463,438,482,466],
[463,466,415,0,412,457,468,488,432],
[455,474,495,478,0,433,493,476,453],
[471,496,427,433,457,0,469,489,455],
[412,422,452,422,397,421,0,480,440],
[420,406,408,402,414,401,410,0,399],
[411,453,424,458,437,435,450,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,441,430,422,436,427,420,432],
[458,0,440,422,464,457,449,398,441],
[449,450,0,448,472,458,432,432,463],
[460,468,442,0,461,463,438,413,473],
[468,426,418,429,0,457,416,400,449],
[454,433,432,427,433,0,419,411,438],
[463,441,458,452,474,471,0,448,472],
[470,492,458,477,490,479,442,0,461],
[458,449,427,417,441,452,418,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,482,446,474,456,482,433,471],
[449,0,412,431,465,468,497,442,428],
[408,478,0,443,488,439,433,439,442],
[444,459,447,0,487,439,475,460,425],
[416,425,402,403,0,431,477,412,430],
[434,422,451,451,459,0,457,447,433],
[408,393,457,415,413,433,0,445,401],
[457,448,451,430,478,443,445,0,437],
[419,462,448,465,460,457,489,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,453,450,448,449,427,460,446],
[442,0,462,446,437,450,413,438,439],
[437,428,0,474,432,467,422,464,435],
[440,444,416,0,443,436,423,431,447],
[442,453,458,447,0,443,450,456,470],
[441,440,423,454,447,0,422,438,468],
[463,477,468,467,440,468,0,459,456],
[430,452,426,459,434,452,431,0,426],
[444,451,455,443,420,422,434,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,429,451,443,413,449,417,474],
[453,0,452,443,435,443,422,418,466],
[461,438,0,442,427,453,426,420,475],
[439,447,448,0,444,456,429,449,512],
[447,455,463,446,0,452,453,440,470],
[477,447,437,434,438,0,429,451,433],
[441,468,464,461,437,461,0,445,476],
[473,472,470,441,450,439,445,0,470],
[416,424,415,378,420,457,414,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,490,440,461,410,448,455,461],
[437,0,458,429,447,425,435,423,469],
[400,432,0,409,424,427,419,409,428],
[450,461,481,0,453,440,439,435,472],
[429,443,466,437,0,449,423,446,474],
[480,465,463,450,441,0,450,422,451],
[442,455,471,451,467,440,0,458,498],
[435,467,481,455,444,468,432,0,491],
[429,421,462,418,416,439,392,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,427,437,439,430,447,428,433],
[453,0,397,456,436,466,491,417,451],
[463,493,0,501,487,468,514,458,433],
[453,434,389,0,469,431,451,373,463],
[451,454,403,421,0,426,477,440,413],
[460,424,422,459,464,0,452,449,436],
[443,399,376,439,413,438,0,384,423],
[462,473,432,517,450,441,506,0,428],
[457,439,457,427,477,454,467,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,432,413,470,409,405,429,446],
[459,0,404,397,477,429,460,437,423],
[458,486,0,431,504,477,455,457,474],
[477,493,459,0,509,445,467,472,461],
[420,413,386,381,0,426,430,381,399],
[481,461,413,445,464,0,405,445,451],
[485,430,435,423,460,485,0,471,469],
[461,453,433,418,509,445,419,0,436],
[444,467,416,429,491,439,421,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,457,449,448,421,460,465,440],
[455,0,445,435,462,440,425,438,452],
[433,445,0,432,447,403,451,442,438],
[441,455,458,0,462,462,481,437,448],
[442,428,443,428,0,427,457,441,441],
[469,450,487,428,463,0,452,447,478],
[430,465,439,409,433,438,0,428,424],
[425,452,448,453,449,443,462,0,451],
[450,438,452,442,449,412,466,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,486,462,439,482,453,465,459],
[446,0,467,455,430,491,462,437,459],
[404,423,0,465,442,462,441,438,461],
[428,435,425,0,423,462,418,433,441],
[451,460,448,467,0,499,424,450,466],
[408,399,428,428,391,0,430,388,421],
[437,428,449,472,466,460,0,442,449],
[425,453,452,457,440,502,448,0,469],
[431,431,429,449,424,469,441,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,444,408,443,425,419,461,434],
[467,0,445,475,447,455,475,468,449],
[446,445,0,408,433,456,414,430,435],
[482,415,482,0,443,443,445,457,440],
[447,443,457,447,0,435,445,445,444],
[465,435,434,447,455,0,471,450,425],
[471,415,476,445,445,419,0,465,429],
[429,422,460,433,445,440,425,0,447],
[456,441,455,450,446,465,461,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,463,463,428,453,441,433,449],
[452,0,462,449,440,472,428,437,448],
[427,428,0,430,429,441,420,398,424],
[427,441,460,0,443,455,430,442,444],
[462,450,461,447,0,440,418,450,449],
[437,418,449,435,450,0,419,416,469],
[449,462,470,460,472,471,0,439,457],
[457,453,492,448,440,474,451,0,462],
[441,442,466,446,441,421,433,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,497,424,499,499,500,628,404],
[408,0,421,349,483,501,445,465,403],
[393,469,0,438,485,430,485,485,369],
[466,541,452,0,521,429,520,560,465],
[391,407,405,369,0,428,444,571,331],
[391,389,460,461,462,0,500,461,426],
[390,445,405,370,446,390,0,576,406],
[262,425,405,330,319,429,314,0,278],
[486,487,521,425,559,464,484,612,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,421,444,458,440,420,444,440],
[498,0,463,463,488,460,464,445,487],
[469,427,0,442,435,461,453,471,448],
[446,427,448,0,458,428,446,450,454],
[432,402,455,432,0,451,428,449,449],
[450,430,429,462,439,0,424,436,453],
[470,426,437,444,462,466,0,465,430],
[446,445,419,440,441,454,425,0,439],
[450,403,442,436,441,437,460,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,458,435,461,469,447,435,477],
[435,0,420,434,464,464,454,424,449],
[432,470,0,464,467,442,456,451,474],
[455,456,426,0,446,466,459,431,435],
[429,426,423,444,0,449,430,408,441],
[421,426,448,424,441,0,430,432,445],
[443,436,434,431,460,460,0,430,449],
[455,466,439,459,482,458,460,0,473],
[413,441,416,455,449,445,441,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,470,448,461,436,457,447,444],
[461,0,437,476,474,438,451,446,473],
[420,453,0,438,426,453,437,426,418],
[442,414,452,0,435,429,436,436,410],
[429,416,464,455,0,420,464,459,409],
[454,452,437,461,470,0,454,444,429],
[433,439,453,454,426,436,0,442,437],
[443,444,464,454,431,446,448,0,450],
[446,417,472,480,481,461,453,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,448,454,488,442,458,476,472],
[428,0,437,461,485,444,451,485,492],
[442,453,0,445,478,471,438,484,478],
[436,429,445,0,477,442,427,488,486],
[402,405,412,413,0,427,405,438,429],
[448,446,419,448,463,0,457,463,486],
[432,439,452,463,485,433,0,470,458],
[414,405,406,402,452,427,420,0,443],
[418,398,412,404,461,404,432,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,454,441,449,449,445,449,456],
[436,0,453,447,450,454,435,451,455],
[436,437,0,416,421,453,448,424,432],
[449,443,474,0,452,452,460,428,458],
[441,440,469,438,0,445,458,443,443],
[441,436,437,438,445,0,445,437,464],
[445,455,442,430,432,445,0,451,435],
[441,439,466,462,447,453,439,0,449],
[434,435,458,432,447,426,455,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,450,434,441,461,431,457,451],
[424,0,436,443,422,446,415,435,440],
[440,454,0,436,428,457,455,451,434],
[456,447,454,0,425,435,449,443,435],
[449,468,462,465,0,452,435,462,426],
[429,444,433,455,438,0,430,444,415],
[459,475,435,441,455,460,0,472,443],
[433,455,439,447,428,446,418,0,431],
[439,450,456,455,464,475,447,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,460,427,460,461,445,433,486],
[443,0,463,476,463,441,469,462,452],
[430,427,0,463,433,449,454,415,421],
[463,414,427,0,452,428,437,410,451],
[430,427,457,438,0,428,426,427,432],
[429,449,441,462,462,0,410,437,449],
[445,421,436,453,464,480,0,436,455],
[457,428,475,480,463,453,454,0,460],
[404,438,469,439,458,441,435,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,473,450,453,432,429,445,462],
[464,0,457,434,449,445,423,431,446],
[417,433,0,425,432,425,409,437,429],
[440,456,465,0,457,451,440,471,459],
[437,441,458,433,0,430,446,453,452],
[458,445,465,439,460,0,478,457,464],
[461,467,481,450,444,412,0,461,450],
[445,459,453,419,437,433,429,0,448],
[428,444,461,431,438,426,440,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,457,440,469,445,446,449,430],
[424,0,388,426,447,427,414,423,416],
[433,502,0,442,444,437,437,446,453],
[450,464,448,0,456,433,434,422,452],
[421,443,446,434,0,442,413,423,428],
[445,463,453,457,448,0,450,414,454],
[444,476,453,456,477,440,0,430,448],
[441,467,444,468,467,476,460,0,465],
[460,474,437,438,462,436,442,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,423,438,456,440,428,432,416],
[478,0,451,464,467,442,475,468,441],
[467,439,0,474,467,459,458,449,477],
[452,426,416,0,447,438,450,443,430],
[434,423,423,443,0,436,452,452,403],
[450,448,431,452,454,0,430,432,446],
[462,415,432,440,438,460,0,445,439],
[458,422,441,447,438,458,445,0,441],
[474,449,413,460,487,444,451,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,495,593,398,594,493,693,495],
[297,0,398,496,496,496,198,693,595],
[395,492,0,394,198,493,492,691,295],
[297,394,496,0,199,395,296,494,298],
[492,394,692,691,0,295,394,691,393],
[296,394,397,495,595,0,395,792,395],
[397,692,398,594,496,495,0,791,594],
[197,197,199,396,199,98,99,0,296],
[395,295,595,592,497,495,296,594,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,444,438,442,442,440,451,448],
[424,0,445,435,445,436,408,447,427],
[446,445,0,443,447,425,420,435,456],
[452,455,447,0,465,455,423,447,459],
[448,445,443,425,0,423,431,429,441],
[448,454,465,435,467,0,448,453,464],
[450,482,470,467,459,442,0,458,443],
[439,443,455,443,461,437,432,0,423],
[442,463,434,431,449,426,447,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,457,440,438,483,450,460,471],
[460,0,468,472,463,472,441,493,468],
[433,422,0,447,431,435,437,446,447],
[450,418,443,0,431,451,427,451,450],
[452,427,459,459,0,462,430,440,461],
[407,418,455,439,428,0,421,432,438],
[440,449,453,463,460,469,0,445,470],
[430,397,444,439,450,458,445,0,461],
[419,422,443,440,429,452,420,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,461,567,429,430,501,426,533],
[354,0,390,426,390,463,390,392,568],
[429,500,0,496,358,430,574,499,502],
[323,464,394,0,430,360,504,427,432],
[461,500,532,460,0,425,498,458,535],
[460,427,460,530,465,0,570,425,678],
[389,500,316,386,392,320,0,281,498],
[464,498,391,463,432,465,609,0,572],
[357,322,388,458,355,212,392,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,410,417,472,418,434,439,424],
[495,0,469,457,526,429,447,505,459],
[480,421,0,446,501,424,470,511,462],
[473,433,444,0,564,475,494,492,411],
[418,364,389,326,0,379,432,429,382],
[472,461,466,415,511,0,458,503,415],
[456,443,420,396,458,432,0,436,434],
[451,385,379,398,461,387,454,0,415],
[466,431,428,479,508,475,456,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,470,462,469,477,448,421,461],
[442,0,470,454,460,478,438,459,449],
[420,420,0,444,442,457,430,408,441],
[428,436,446,0,434,460,437,439,441],
[421,430,448,456,0,453,432,416,429],
[413,412,433,430,437,0,440,433,424],
[442,452,460,453,458,450,0,448,447],
[469,431,482,451,474,457,442,0,465],
[429,441,449,449,461,466,443,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,451,457,463,475,450,458,443],
[454,0,432,436,455,464,443,482,465],
[439,458,0,456,499,467,444,465,435],
[433,454,434,0,467,456,402,439,448],
[427,435,391,423,0,443,425,445,459],
[415,426,423,434,447,0,426,445,427],
[440,447,446,488,465,464,0,500,477],
[432,408,425,451,445,445,390,0,453],
[447,425,455,442,431,463,413,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,401,417,385,407,421,413,424],
[510,0,441,454,445,457,463,477,433],
[489,449,0,445,398,423,444,449,444],
[473,436,445,0,426,423,459,439,412],
[505,445,492,464,0,473,480,485,450],
[483,433,467,467,417,0,447,454,448],
[469,427,446,431,410,443,0,405,449],
[477,413,441,451,405,436,485,0,423],
[466,457,446,478,440,442,441,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,430,450,453,433,488,430,441],
[461,0,411,465,454,432,480,420,449],
[460,479,0,470,436,448,489,446,461],
[440,425,420,0,420,422,499,418,443],
[437,436,454,470,0,477,441,385,472],
[457,458,442,468,413,0,451,434,447],
[402,410,401,391,449,439,0,396,429],
[460,470,444,472,505,456,494,0,485],
[449,441,429,447,418,443,461,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,454,459,451,450,467,427,457],
[430,0,441,449,431,442,443,451,441],
[436,449,0,435,444,441,435,445,438],
[431,441,455,0,441,432,450,426,437],
[439,459,446,449,0,474,479,451,463],
[440,448,449,458,416,0,443,440,457],
[423,447,455,440,411,447,0,457,451],
[463,439,445,464,439,450,433,0,455],
[433,449,452,453,427,433,439,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,444,507,345,505,380,407,373],
[477,0,511,477,379,440,282,503,472],
[446,379,0,411,377,410,250,408,375],
[383,413,479,0,347,380,219,381,375],
[545,511,513,543,0,477,316,475,439],
[385,450,480,510,413,0,318,385,440],
[510,608,640,671,574,572,0,442,537],
[483,387,482,509,415,505,448,0,474],
[517,418,515,515,451,450,353,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,456,429,417,454,464,450,429],
[426,0,413,446,422,421,413,415,435],
[434,477,0,436,453,437,444,454,447],
[461,444,454,0,454,418,428,421,431],
[473,468,437,436,0,463,429,464,448],
[436,469,453,472,427,0,441,408,449],
[426,477,446,462,461,449,0,453,437],
[440,475,436,469,426,482,437,0,420],
[461,455,443,459,442,441,453,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,499,444,405,469,475,492,480],
[430,0,492,421,452,442,472,498,482],
[391,398,0,403,373,417,435,393,408],
[446,469,487,0,436,444,467,447,471],
[485,438,517,454,0,476,486,438,478],
[421,448,473,446,414,0,452,462,466],
[415,418,455,423,404,438,0,424,428],
[398,392,497,443,452,428,466,0,457],
[410,408,482,419,412,424,462,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,439,424,488,451,437,443,422],
[443,0,460,449,488,468,451,447,457],
[451,430,0,443,473,431,442,452,456],
[466,441,447,0,470,431,467,471,440],
[402,402,417,420,0,403,427,409,407],
[439,422,459,459,487,0,468,446,452],
[453,439,448,423,463,422,0,433,419],
[447,443,438,419,481,444,457,0,418],
[468,433,434,450,483,438,471,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,428,495,487,436,446,465,477],
[438,0,439,455,467,444,410,498,445],
[462,451,0,442,461,493,426,499,469],
[395,435,448,0,436,452,430,483,488],
[403,423,429,454,0,459,427,467,472],
[454,446,397,438,431,0,441,452,460],
[444,480,464,460,463,449,0,499,491],
[425,392,391,407,423,438,391,0,446],
[413,445,421,402,418,430,399,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,439,444,449,481,452,429,459],
[450,0,442,459,444,463,453,434,434],
[451,448,0,471,447,481,475,442,473],
[446,431,419,0,443,448,426,431,453],
[441,446,443,447,0,472,445,445,444],
[409,427,409,442,418,0,439,432,446],
[438,437,415,464,445,451,0,443,456],
[461,456,448,459,445,458,447,0,471],
[431,456,417,437,446,444,434,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,473,450,451,467,445,447,445],
[438,0,460,451,438,447,453,421,436],
[417,430,0,428,427,415,425,432,418],
[440,439,462,0,443,440,439,466,438],
[439,452,463,447,0,431,424,444,450],
[423,443,475,450,459,0,452,433,433],
[445,437,465,451,466,438,0,441,447],
[443,469,458,424,446,457,449,0,436],
[445,454,472,452,440,457,443,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,477,413,402,445,461,421,486],
[404,0,431,391,341,463,428,402,397],
[413,459,0,369,444,492,432,435,446],
[477,499,521,0,493,469,468,442,500],
[488,549,446,397,0,518,504,436,491],
[445,427,398,421,372,0,414,454,396],
[429,462,458,422,386,476,0,435,470],
[469,488,455,448,454,436,455,0,497],
[404,493,444,390,399,494,420,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,443,465,443,465,511,482,475],
[456,0,463,467,491,480,474,463,375],
[447,427,0,451,455,506,484,417,432],
[425,423,439,0,448,475,471,433,406],
[447,399,435,442,0,416,469,435,392],
[425,410,384,415,474,0,445,409,426],
[379,416,406,419,421,445,0,392,385],
[408,427,473,457,455,481,498,0,436],
[415,515,458,484,498,464,505,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,392,445,476,396,398,407,477],
[545,0,458,469,503,431,475,462,506],
[498,432,0,444,504,392,430,418,452],
[445,421,446,0,451,420,409,426,516],
[414,387,386,439,0,377,413,390,421],
[494,459,498,470,513,0,491,406,563],
[492,415,460,481,477,399,0,432,486],
[483,428,472,464,500,484,458,0,502],
[413,384,438,374,469,327,404,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,498,471,459,470,479,437,455],
[415,0,424,444,428,422,431,423,459],
[392,466,0,427,430,445,450,428,455],
[419,446,463,0,392,428,446,435,448],
[431,462,460,498,0,460,474,452,450],
[420,468,445,462,430,0,468,429,446],
[411,459,440,444,416,422,0,431,428],
[453,467,462,455,438,461,459,0,458],
[435,431,435,442,440,444,462,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,458,444,428,430,440,441,428],
[438,0,459,433,416,425,443,459,447],
[432,431,0,443,421,432,426,439,413],
[446,457,447,0,425,428,447,453,428],
[462,474,469,465,0,468,441,471,464],
[460,465,458,462,422,0,438,460,433],
[450,447,464,443,449,452,0,456,435],
[449,431,451,437,419,430,434,0,430],
[462,443,477,462,426,457,455,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,447,424,444,453,465,467,441],
[381,0,404,360,423,411,441,442,396],
[443,486,0,406,462,424,443,450,419],
[466,530,484,0,450,469,480,470,433],
[446,467,428,440,0,476,444,440,442],
[437,479,466,421,414,0,451,447,462],
[425,449,447,410,446,439,0,438,432],
[423,448,440,420,450,443,452,0,438],
[449,494,471,457,448,428,458,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,405,438,446,399,385,449,449],
[470,0,452,470,486,412,453,473,467],
[485,438,0,451,460,402,433,457,465],
[452,420,439,0,467,413,408,435,447],
[444,404,430,423,0,433,408,444,438],
[491,478,488,477,457,0,374,464,488],
[505,437,457,482,482,516,0,500,500],
[441,417,433,455,446,426,390,0,457],
[441,423,425,443,452,402,390,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,459,448,445,432,433,452,430],
[440,0,448,483,467,438,459,466,440],
[431,442,0,451,455,420,424,443,440],
[442,407,439,0,470,457,416,458,441],
[445,423,435,420,0,431,435,425,465],
[458,452,470,433,459,0,420,439,445],
[457,431,466,474,455,470,0,462,445],
[438,424,447,432,465,451,428,0,453],
[460,450,450,449,425,445,445,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,472,437,464,475,496,527,445],
[469,0,490,439,458,470,501,518,451],
[418,400,0,476,399,469,450,520,420],
[453,451,414,0,448,481,486,503,480],
[426,432,491,442,0,524,425,482,434],
[415,420,421,409,366,0,411,498,356],
[394,389,440,404,465,479,0,461,408],
[363,372,370,387,408,392,429,0,412],
[445,439,470,410,456,534,482,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,462,442,433,424,475,461,440],
[434,0,439,471,465,433,488,494,430],
[428,451,0,455,399,396,496,424,450],
[448,419,435,0,482,465,481,465,413],
[457,425,491,408,0,410,510,441,400],
[466,457,494,425,480,0,491,449,447],
[415,402,394,409,380,399,0,417,389],
[429,396,466,425,449,441,473,0,432],
[450,460,440,477,490,443,501,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,437,450,440,458,468,473,465],
[446,0,447,443,430,462,443,471,437],
[453,443,0,449,451,450,460,471,451],
[440,447,441,0,423,456,437,454,446],
[450,460,439,467,0,470,457,465,468],
[432,428,440,434,420,0,421,455,421],
[422,447,430,453,433,469,0,443,445],
[417,419,419,436,425,435,447,0,437],
[425,453,439,444,422,469,445,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,473,436,524,511,418,452,453],
[436,0,385,419,510,489,383,437,400],
[417,505,0,417,423,414,418,508,376],
[454,471,473,0,385,434,420,456,453],
[366,380,467,505,0,450,435,398,469],
[379,401,476,456,440,0,403,385,453],
[472,507,472,470,455,487,0,455,400],
[438,453,382,434,492,505,435,0,447],
[437,490,514,437,421,437,490,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,443,422,433,463,447,442,457],
[444,0,458,432,449,454,451,450,450],
[447,432,0,461,479,480,465,453,484],
[468,458,429,0,469,445,451,473,468],
[457,441,411,421,0,449,429,451,459],
[427,436,410,445,441,0,450,413,452],
[443,439,425,439,461,440,0,433,459],
[448,440,437,417,439,477,457,0,482],
[433,440,406,422,431,438,431,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,420,454,443,461,474,474,470],
[430,0,416,442,431,439,452,434,441],
[470,474,0,447,459,430,446,453,437],
[436,448,443,0,442,452,448,452,469],
[447,459,431,448,0,436,427,480,447],
[429,451,460,438,454,0,443,463,455],
[416,438,444,442,463,447,0,461,463],
[416,456,437,438,410,427,429,0,493],
[420,449,453,421,443,435,427,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,450,467,435,435,437,422,445],
[448,0,453,462,456,480,442,472,446],
[440,437,0,474,462,497,458,466,469],
[423,428,416,0,441,432,441,400,464],
[455,434,428,449,0,462,447,433,449],
[455,410,393,458,428,0,496,434,425],
[453,448,432,449,443,394,0,439,427],
[468,418,424,490,457,456,451,0,431],
[445,444,421,426,441,465,463,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,453,368,370,452,497,451,580],
[355,0,434,408,409,433,580,514,414],
[437,456,0,432,393,421,517,498,499],
[522,482,458,0,374,397,583,558,542],
[520,481,497,516,0,418,541,562,584],
[438,457,469,493,472,0,494,476,516],
[393,310,373,307,349,396,0,478,518],
[439,376,392,332,328,414,412,0,498],
[310,476,391,348,306,374,372,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,458,446,456,398,444,450,444],
[454,0,482,467,442,466,479,490,499],
[432,408,0,456,458,427,424,428,448],
[444,423,434,0,427,409,440,471,433],
[434,448,432,463,0,460,452,487,455],
[492,424,463,481,430,0,462,456,433],
[446,411,466,450,438,428,0,454,417],
[440,400,462,419,403,434,436,0,413],
[446,391,442,457,435,457,473,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,450,456,455,437,490,444,456],
[475,0,449,444,464,448,491,433,460],
[440,441,0,429,440,436,436,438,455],
[434,446,461,0,451,429,462,427,440],
[435,426,450,439,0,407,460,468,460],
[453,442,454,461,483,0,484,474,458],
[400,399,454,428,430,406,0,433,437],
[446,457,452,463,422,416,457,0,463],
[434,430,435,450,430,432,453,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,398,395,366,436,363,406,435],
[457,0,379,452,412,426,435,480,445],
[492,511,0,498,442,507,503,500,493],
[495,438,392,0,418,430,409,434,442],
[524,478,448,472,0,460,427,487,523],
[454,464,383,460,430,0,434,460,487],
[527,455,387,481,463,456,0,467,439],
[484,410,390,456,403,430,423,0,409],
[455,445,397,448,367,403,451,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,451,414,409,375,408,431,446],
[471,0,448,468,420,449,437,454,488],
[439,442,0,424,413,405,421,438,488],
[476,422,466,0,422,436,443,450,478],
[481,470,477,468,0,440,453,478,507],
[515,441,485,454,450,0,454,456,481],
[482,453,469,447,437,436,0,447,484],
[459,436,452,440,412,434,443,0,500],
[444,402,402,412,383,409,406,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,425,405,439,426,453,413,455],
[413,0,399,441,441,436,441,502,489],
[465,491,0,445,512,469,491,467,467],
[485,449,445,0,491,486,491,481,469],
[451,449,378,399,0,458,461,431,459],
[464,454,421,404,432,0,432,452,426],
[437,449,399,399,429,458,0,490,412],
[477,388,423,409,459,438,400,0,424],
[435,401,423,421,431,464,478,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,441,438,466,454,439,463,459],
[431,0,459,424,434,440,451,398,431],
[449,431,0,457,451,433,444,373,423],
[452,466,433,0,419,416,438,403,433],
[424,456,439,471,0,445,439,409,438],
[436,450,457,474,445,0,424,461,432],
[451,439,446,452,451,466,0,421,438],
[427,492,517,487,481,429,469,0,443],
[431,459,467,457,452,458,452,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,467,441,530,492,421,511,464],
[351,0,463,415,459,322,421,441,492],
[423,427,0,421,513,421,468,424,493],
[449,475,469,0,582,564,449,491,426],
[360,431,377,308,0,400,307,471,428],
[398,568,469,326,490,0,467,469,470],
[469,469,422,441,583,423,0,465,491],
[379,449,466,399,419,421,425,0,375],
[426,398,397,464,462,420,399,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,449,450,438,458,458,457,441],
[433,0,459,430,446,450,438,453,442],
[441,431,0,449,430,443,443,464,453],
[440,460,441,0,439,443,453,473,442],
[452,444,460,451,0,448,453,456,451],
[432,440,447,447,442,0,449,455,449],
[432,452,447,437,437,441,0,463,465],
[433,437,426,417,434,435,427,0,455],
[449,448,437,448,439,441,425,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,668,558,558,668,445,447,558,558],
[222,0,448,336,446,446,224,336,446],
[332,442,0,446,444,332,113,557,554],
[332,554,444,0,221,554,112,444,666],
[222,444,446,669,0,443,225,446,558],
[445,444,558,336,447,0,336,668,668],
[443,666,777,778,665,554,0,667,665],
[332,554,333,446,444,222,223,0,443],
[332,444,336,224,332,222,225,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,551,469,492,516,432,616,631],
[383,0,376,490,340,400,449,479,517],
[339,514,0,452,451,476,353,497,519],
[421,400,438,0,459,496,280,602,521],
[398,550,439,431,0,515,413,519,597],
[374,490,414,394,375,0,371,455,478],
[458,441,537,610,477,519,0,658,636],
[274,411,393,288,371,435,232,0,492],
[259,373,371,369,293,412,254,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,481,451,488,448,451,450,473],
[473,0,467,469,458,439,444,443,470],
[409,423,0,431,464,452,445,423,454],
[439,421,459,0,460,457,455,421,454],
[402,432,426,430,0,428,418,440,453],
[442,451,438,433,462,0,446,448,454],
[439,446,445,435,472,444,0,429,459],
[440,447,467,469,450,442,461,0,436],
[417,420,436,436,437,436,431,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,449,433,454,439,460,454,451],
[436,0,441,435,439,460,438,436,447],
[441,449,0,444,446,441,451,434,459],
[457,455,446,0,450,465,450,442,458],
[436,451,444,440,0,440,449,440,471],
[451,430,449,425,450,0,431,449,448],
[430,452,439,440,441,459,0,453,439],
[436,454,456,448,450,441,437,0,455],
[439,443,431,432,419,442,451,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,358,422,471,341,452,415,377],
[497,0,439,463,453,512,513,475,454],
[532,451,0,424,452,491,468,507,374],
[468,427,466,0,429,508,431,465,428],
[419,437,438,461,0,423,401,457,401],
[549,378,399,382,467,0,396,451,416],
[438,377,422,459,489,494,0,395,400],
[475,415,383,425,433,439,495,0,421],
[513,436,516,462,489,474,490,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,486,464,442,456,445,455,458],
[369,0,443,394,392,427,429,426,396],
[404,447,0,435,426,421,441,420,479],
[426,496,455,0,459,461,474,425,453],
[448,498,464,431,0,477,462,422,475],
[434,463,469,429,413,0,445,452,419],
[445,461,449,416,428,445,0,437,440],
[435,464,470,465,468,438,453,0,440],
[432,494,411,437,415,471,450,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,470,434,439,422,427,449,447],
[465,0,463,427,432,419,447,456,449],
[420,427,0,434,438,431,437,456,452],
[456,463,456,0,460,427,450,453,451],
[451,458,452,430,0,450,444,458,444],
[468,471,459,463,440,0,457,462,460],
[463,443,453,440,446,433,0,463,445],
[441,434,434,437,432,428,427,0,454],
[443,441,438,439,446,430,445,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,461,390,460,479,486,447,492],
[509,0,499,429,537,496,504,466,489],
[429,391,0,410,422,421,455,425,450],
[500,461,480,0,473,448,468,425,501],
[430,353,468,417,0,426,449,414,462],
[411,394,469,442,464,0,446,406,500],
[404,386,435,422,441,444,0,405,466],
[443,424,465,465,476,484,485,0,510],
[398,401,440,389,428,390,424,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,433,427,435,427,435,416,458],
[424,0,415,419,417,407,407,422,416],
[457,475,0,413,428,448,427,422,442],
[463,471,477,0,439,440,445,443,457],
[455,473,462,451,0,442,427,451,463],
[463,483,442,450,448,0,449,436,448],
[455,483,463,445,463,441,0,438,463],
[474,468,468,447,439,454,452,0,468],
[432,474,448,433,427,442,427,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,459,464,399,472,476,466,439],
[451,0,437,423,400,467,449,478,452],
[431,453,0,414,415,460,436,514,398],
[426,467,476,0,410,532,517,542,425],
[491,490,475,480,0,429,386,506,517],
[418,423,430,358,461,0,413,475,429],
[414,441,454,373,504,477,0,507,472],
[424,412,376,348,384,415,383,0,434],
[451,438,492,465,373,461,418,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,418,363,388,378,362,365,391],
[429,0,429,376,413,346,407,388,382],
[472,461,0,417,427,400,417,419,391],
[527,514,473,0,465,417,455,424,415],
[502,477,463,425,0,443,464,525,446],
[512,544,490,473,447,0,481,427,477],
[528,483,473,435,426,409,0,440,407],
[525,502,471,466,365,463,450,0,444],
[499,508,499,475,444,413,483,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,438,445,438,440,448,455,461],
[423,0,434,441,403,425,403,438,423],
[452,456,0,465,429,450,440,473,473],
[445,449,425,0,423,433,448,462,434],
[452,487,461,467,0,437,439,479,475],
[450,465,440,457,453,0,449,467,470],
[442,487,450,442,451,441,0,466,464],
[435,452,417,428,411,423,424,0,449],
[429,467,417,456,415,420,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,476,482,441,429,444,448,440],
[438,0,441,474,432,453,430,427,428],
[414,449,0,460,433,452,438,445,456],
[408,416,430,0,440,447,421,445,426],
[449,458,457,450,0,437,448,468,462],
[461,437,438,443,453,0,445,457,437],
[446,460,452,469,442,445,0,439,456],
[442,463,445,445,422,433,451,0,451],
[450,462,434,464,428,453,434,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,464,557,429,407,459,418,376],
[427,0,429,417,461,406,432,466,377],
[426,461,0,508,448,493,434,441,463],
[333,473,382,0,480,370,407,417,368],
[461,429,442,410,0,427,412,442,406],
[483,484,397,520,463,0,428,452,392],
[431,458,456,483,478,462,0,449,376],
[472,424,449,473,448,438,441,0,434],
[514,513,427,522,484,498,514,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,441,440,450,447,462,433,445],
[434,0,411,421,447,466,443,420,440],
[449,479,0,433,452,443,469,428,443],
[450,469,457,0,465,472,468,428,446],
[440,443,438,425,0,451,434,413,416],
[443,424,447,418,439,0,440,415,433],
[428,447,421,422,456,450,0,414,448],
[457,470,462,462,477,475,476,0,441],
[445,450,447,444,474,457,442,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,449,436,464,431,453,458,453],
[448,0,443,434,468,452,456,466,448],
[441,447,0,425,454,425,465,429,417],
[454,456,465,0,473,455,477,466,427],
[426,422,436,417,0,432,437,443,426],
[459,438,465,435,458,0,448,456,433],
[437,434,425,413,453,442,0,455,429],
[432,424,461,424,447,434,435,0,428],
[437,442,473,463,464,457,461,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,462,479,448,446,439,497,467],
[396,0,467,438,455,432,445,410,429],
[428,423,0,443,452,436,436,479,441],
[411,452,447,0,477,431,425,458,465],
[442,435,438,413,0,428,394,430,449],
[444,458,454,459,462,0,430,477,462],
[451,445,454,465,496,460,0,460,470],
[393,480,411,432,460,413,430,0,447],
[423,461,449,425,441,428,420,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,445,463,466,446,460,457,461],
[426,0,441,423,436,421,442,450,434],
[445,449,0,463,490,457,453,457,457],
[427,467,427,0,453,437,454,451,436],
[424,454,400,437,0,443,461,470,413],
[444,469,433,453,447,0,434,478,432],
[430,448,437,436,429,456,0,453,434],
[433,440,433,439,420,412,437,0,427],
[429,456,433,454,477,458,456,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,466,440,425,446,463,477,460],
[419,0,437,422,407,416,444,432,409],
[424,453,0,428,415,429,420,472,422],
[450,468,462,0,456,462,474,497,421],
[465,483,475,434,0,451,450,463,466],
[444,474,461,428,439,0,474,507,462],
[427,446,470,416,440,416,0,436,417],
[413,458,418,393,427,383,454,0,430],
[430,481,468,469,424,428,473,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,395,462,431,378,433,379,477],
[460,0,373,403,380,330,455,345,382],
[495,517,0,523,432,442,509,381,474],
[428,487,367,0,448,343,500,337,410],
[459,510,458,442,0,397,464,413,435],
[512,560,448,547,493,0,493,432,450],
[457,435,381,390,426,397,0,385,464],
[511,545,509,553,477,458,505,0,440],
[413,508,416,480,455,440,426,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,455,438,440,434,437,451,401],
[443,0,465,436,446,474,415,413,432],
[435,425,0,420,434,425,399,419,380],
[452,454,470,0,445,462,436,424,470],
[450,444,456,445,0,454,415,433,444],
[456,416,465,428,436,0,416,401,439],
[453,475,491,454,475,474,0,443,450],
[439,477,471,466,457,489,447,0,440],
[489,458,510,420,446,451,440,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,439,403,485,432,452,434,432],
[449,0,406,411,416,394,454,431,409],
[451,484,0,429,492,423,464,444,437],
[487,479,461,0,501,448,473,445,469],
[405,474,398,389,0,430,416,417,404],
[458,496,467,442,460,0,461,441,451],
[438,436,426,417,474,429,0,431,428],
[456,459,446,445,473,449,459,0,471],
[458,481,453,421,486,439,462,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,448,433,459,446,455,472,452],
[435,0,428,437,431,451,468,468,433],
[442,462,0,427,437,461,450,454,425],
[457,453,463,0,459,469,432,458,451],
[431,459,453,431,0,460,444,468,446],
[444,439,429,421,430,0,445,433,422],
[435,422,440,458,446,445,0,463,457],
[418,422,436,432,422,457,427,0,432],
[438,457,465,439,444,468,433,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,445,442,432,431,433,423,434],
[468,0,475,459,467,444,443,442,462],
[445,415,0,442,425,420,414,425,443],
[448,431,448,0,426,433,445,445,438],
[458,423,465,464,0,433,441,455,447],
[459,446,470,457,457,0,437,443,467],
[457,447,476,445,449,453,0,435,444],
[467,448,465,445,435,447,455,0,457],
[456,428,447,452,443,423,446,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,464,449,495,426,443,446,459],
[474,0,492,451,522,445,484,474,451],
[426,398,0,414,466,375,429,432,430],
[441,439,476,0,511,441,442,439,458],
[395,368,424,379,0,392,405,424,418],
[464,445,515,449,498,0,449,449,474],
[447,406,461,448,485,441,0,396,445],
[444,416,458,451,466,441,494,0,467],
[431,439,460,432,472,416,445,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,491,440,467,479,472,473,465],
[417,0,450,451,468,435,455,433,461],
[399,440,0,431,437,432,434,438,436],
[450,439,459,0,468,478,445,451,438],
[423,422,453,422,0,438,444,405,436],
[411,455,458,412,452,0,458,452,445],
[418,435,456,445,446,432,0,454,423],
[417,457,452,439,485,438,436,0,477],
[425,429,454,452,454,445,467,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,422,461,357,565,393,426,501],
[503,0,461,467,359,641,467,466,430],
[468,429,0,466,465,535,431,395,502],
[429,423,424,0,498,600,501,462,427],
[533,531,425,392,0,638,535,499,500],
[325,249,355,290,252,0,289,361,325],
[497,423,459,389,355,601,0,391,427],
[464,424,495,428,391,529,499,0,502],
[389,460,388,463,390,565,463,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,420,465,397,465,438,469,465],
[450,0,390,476,455,459,425,466,443],
[470,500,0,517,425,494,445,483,459],
[425,414,373,0,413,432,441,391,419],
[493,435,465,477,0,499,443,445,455],
[425,431,396,458,391,0,420,430,424],
[452,465,445,449,447,470,0,426,429],
[421,424,407,499,445,460,464,0,472],
[425,447,431,471,435,466,461,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,431,360,486,404,488,443,414],
[485,0,458,435,525,464,546,501,480],
[459,432,0,418,496,426,460,459,478],
[530,455,472,0,480,439,478,499,461],
[404,365,394,410,0,361,460,474,414],
[486,426,464,451,529,0,552,495,510],
[402,344,430,412,430,338,0,418,419],
[447,389,431,391,416,395,472,0,408],
[476,410,412,429,476,380,471,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,448,457,452,422,412,432,492],
[426,0,434,456,455,444,428,434,463],
[442,456,0,433,424,389,402,459,465],
[433,434,457,0,415,401,436,437,479],
[438,435,466,475,0,441,430,461,493],
[468,446,501,489,449,0,457,445,516],
[478,462,488,454,460,433,0,457,509],
[458,456,431,453,429,445,433,0,493],
[398,427,425,411,397,374,381,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,591,592,445,294,147,147,298,295],
[299,0,445,445,147,147,298,298,446],
[298,445,0,446,295,0,148,151,295],
[445,445,444,0,445,444,445,445,592],
[596,743,595,445,0,445,593,445,743],
[743,743,890,446,445,0,446,446,743],
[743,592,742,445,297,444,0,445,739],
[592,592,739,445,445,444,445,0,739],
[595,444,595,298,147,147,151,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,434,452,437,415,436,419,469],
[480,0,456,450,446,436,456,447,483],
[456,434,0,446,438,424,426,421,455],
[438,440,444,0,462,431,417,428,449],
[453,444,452,428,0,406,429,440,442],
[475,454,466,459,484,0,434,467,446],
[454,434,464,473,461,456,0,431,466],
[471,443,469,462,450,423,459,0,458],
[421,407,435,441,448,444,424,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,439,497,470,404,466,429,470],
[434,0,415,448,442,452,455,413,431],
[451,475,0,516,465,428,546,531,509],
[393,442,374,0,453,459,488,438,456],
[420,448,425,437,0,415,488,399,411],
[486,438,462,431,475,0,498,391,465],
[424,435,344,402,402,392,0,421,374],
[461,477,359,452,491,499,469,0,435],
[420,459,381,434,479,425,516,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,472,486,490,462,453,438,455],
[484,0,473,469,466,457,445,465,469],
[418,417,0,451,452,485,419,447,465],
[404,421,439,0,414,414,386,406,424],
[400,424,438,476,0,448,419,431,458],
[428,433,405,476,442,0,398,433,463],
[437,445,471,504,471,492,0,461,465],
[452,425,443,484,459,457,429,0,454],
[435,421,425,466,432,427,425,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,471,432,457,444,454,434,455],
[423,0,463,419,454,436,441,437,461],
[419,427,0,409,449,434,408,433,436],
[458,471,481,0,463,424,462,453,502],
[433,436,441,427,0,426,423,418,427],
[446,454,456,466,464,0,429,435,464],
[436,449,482,428,467,461,0,414,436],
[456,453,457,437,472,455,476,0,500],
[435,429,454,388,463,426,454,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,471,434,422,440,463,513,437],
[477,0,480,403,458,481,454,442,519],
[419,410,0,355,397,349,445,370,420],
[456,487,535,0,423,433,473,441,429],
[468,432,493,467,0,422,436,451,426],
[450,409,541,457,468,0,489,488,477],
[427,436,445,417,454,401,0,419,469],
[377,448,520,449,439,402,471,0,424],
[453,371,470,461,464,413,421,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,427,434,463,442,442,494,426],
[450,0,388,421,404,412,420,467,412],
[463,502,0,455,452,439,442,451,411],
[456,469,435,0,415,461,475,487,422],
[427,486,438,475,0,437,429,515,478],
[448,478,451,429,453,0,493,474,431],
[448,470,448,415,461,397,0,470,414],
[396,423,439,403,375,416,420,0,424],
[464,478,479,468,412,459,476,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,392,443,401,376,380,364,415],
[495,0,444,410,474,391,383,354,430],
[498,446,0,423,426,429,467,453,450],
[447,480,467,0,391,381,405,422,416],
[489,416,464,499,0,379,429,401,439],
[514,499,461,509,511,0,395,402,487],
[510,507,423,485,461,495,0,414,400],
[526,536,437,468,489,488,476,0,418],
[475,460,440,474,451,403,490,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,397,430,423,451,448,453,415],
[516,0,428,472,464,488,451,475,449],
[493,462,0,446,474,436,455,502,477],
[460,418,444,0,438,486,438,467,423],
[467,426,416,452,0,459,466,477,444],
[439,402,454,404,431,0,447,468,423],
[442,439,435,452,424,443,0,473,426],
[437,415,388,423,413,422,417,0,411],
[475,441,413,467,446,467,464,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,424,452,455,455,418,441,423],
[449,0,445,463,462,452,437,445,445],
[466,445,0,463,445,455,447,451,423],
[438,427,427,0,429,452,429,425,431],
[435,428,445,461,0,459,435,452,422],
[435,438,435,438,431,0,430,439,439],
[472,453,443,461,455,460,0,463,443],
[449,445,439,465,438,451,427,0,460],
[467,445,467,459,468,451,447,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,449,427,448,426,456,443,427],
[465,0,467,429,451,455,470,452,450],
[441,423,0,427,423,435,437,432,425],
[463,461,463,0,450,467,455,433,428],
[442,439,467,440,0,462,470,444,449],
[464,435,455,423,428,0,426,453,427],
[434,420,453,435,420,464,0,421,418],
[447,438,458,457,446,437,469,0,438],
[463,440,465,462,441,463,472,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,461,452,459,461,452,438,457],
[425,0,444,431,422,422,443,439,414],
[429,446,0,435,420,426,449,448,441],
[438,459,455,0,426,427,438,433,435],
[431,468,470,464,0,446,451,431,434],
[429,468,464,463,444,0,443,469,433],
[438,447,441,452,439,447,0,432,452],
[452,451,442,457,459,421,458,0,431],
[433,476,449,455,456,457,438,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,442,445,450,412,447,432,478],
[420,0,422,435,416,380,421,432,469],
[448,468,0,460,431,468,442,462,475],
[445,455,430,0,438,447,458,450,481],
[440,474,459,452,0,466,456,470,484],
[478,510,422,443,424,0,451,459,457],
[443,469,448,432,434,439,0,455,462],
[458,458,428,440,420,431,435,0,472],
[412,421,415,409,406,433,428,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,442,433,469,464,417,481,434],
[431,0,439,425,457,482,451,460,448],
[448,451,0,440,475,477,443,502,461],
[457,465,450,0,491,501,451,466,438],
[421,433,415,399,0,448,426,457,436],
[426,408,413,389,442,0,453,442,431],
[473,439,447,439,464,437,0,460,469],
[409,430,388,424,433,448,430,0,443],
[456,442,429,452,454,459,421,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,450,430,439,428,443,426,462],
[473,0,485,443,418,433,449,427,464],
[440,405,0,413,413,403,429,397,438],
[460,447,477,0,418,434,436,431,469],
[451,472,477,472,0,436,473,449,471],
[462,457,487,456,454,0,456,444,485],
[447,441,461,454,417,434,0,442,458],
[464,463,493,459,441,446,448,0,463],
[428,426,452,421,419,405,432,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,433,445,439,445,467,406],
[451,0,414,426,438,458,435,427,432],
[442,476,0,437,459,446,448,453,448],
[457,464,453,0,478,443,444,456,453],
[445,452,431,412,0,458,432,415,415],
[451,432,444,447,432,0,470,438,455],
[445,455,442,446,458,420,0,456,452],
[423,463,437,434,475,452,434,0,418],
[484,458,442,437,475,435,438,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,455,458,440,429,427,435,443],
[459,0,441,488,465,443,418,447,463],
[435,449,0,481,447,467,449,462,438],
[432,402,409,0,434,400,418,425,408],
[450,425,443,456,0,426,425,431,423],
[461,447,423,490,464,0,433,470,453],
[463,472,441,472,465,457,0,450,448],
[455,443,428,465,459,420,440,0,421],
[447,427,452,482,467,437,442,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,432,459,443,477,430,421,427],
[422,0,403,450,416,452,418,416,445],
[458,487,0,459,443,479,452,442,428],
[431,440,431,0,438,440,426,426,407],
[447,474,447,452,0,487,458,421,429],
[413,438,411,450,403,0,422,430,422],
[460,472,438,464,432,468,0,422,419],
[469,474,448,464,469,460,468,0,439],
[463,445,462,483,461,468,471,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,470,473,449,458,456,432,465],
[430,0,447,434,443,455,447,431,437],
[420,443,0,446,435,427,438,415,427],
[417,456,444,0,445,440,433,452,440],
[441,447,455,445,0,440,430,441,421],
[432,435,463,450,450,0,457,421,424],
[434,443,452,457,460,433,0,417,447],
[458,459,475,438,449,469,473,0,462],
[425,453,463,450,469,466,443,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,441,463,437,416,480,455,446],
[402,0,402,456,416,369,439,419,420],
[449,488,0,472,426,438,476,449,459],
[427,434,418,0,428,411,461,457,421],
[453,474,464,462,0,426,464,436,437],
[474,521,452,479,464,0,478,473,443],
[410,451,414,429,426,412,0,443,394],
[435,471,441,433,454,417,447,0,431],
[444,470,431,469,453,447,496,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,360,436,362,455,312,436,552],
[505,0,504,434,480,481,362,479,571],
[530,386,0,412,411,482,362,364,577],
[454,456,478,0,407,501,526,410,572],
[528,410,479,483,0,577,358,505,523],
[435,409,408,389,313,0,383,410,505],
[578,528,528,364,532,507,0,434,621],
[454,411,526,480,385,480,456,0,597],
[338,319,313,318,367,385,269,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,428,468,444,447,488,400,418],
[469,0,463,487,469,483,491,423,484],
[462,427,0,472,456,494,474,447,488],
[422,403,418,0,410,432,445,396,413],
[446,421,434,480,0,449,504,468,509],
[443,407,396,458,441,0,466,418,475],
[402,399,416,445,386,424,0,420,424],
[490,467,443,494,422,472,470,0,449],
[472,406,402,477,381,415,466,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,447,450,457,444,452,448,437],
[454,0,463,455,450,444,447,444,472],
[443,427,0,440,415,429,435,439,454],
[440,435,450,0,446,436,440,451,468],
[433,440,475,444,0,446,454,458,462],
[446,446,461,454,444,0,447,447,461],
[438,443,455,450,436,443,0,437,447],
[442,446,451,439,432,443,453,0,469],
[453,418,436,422,428,429,443,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,433,438,469,436,436,466,487],
[435,0,448,445,462,410,428,463,457],
[457,442,0,430,469,436,435,452,488],
[452,445,460,0,472,449,464,435,466],
[421,428,421,418,0,407,410,432,441],
[454,480,454,441,483,0,426,464,490],
[454,462,455,426,480,464,0,464,465],
[424,427,438,455,458,426,426,0,467],
[403,433,402,424,449,400,425,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,429,473,419,472,424,446,445],
[434,0,427,475,445,455,429,416,437],
[461,463,0,474,435,485,455,457,470],
[417,415,416,0,432,457,416,430,421],
[471,445,455,458,0,484,455,443,491],
[418,435,405,433,406,0,393,416,415],
[466,461,435,474,435,497,0,423,478],
[444,474,433,460,447,474,467,0,462],
[445,453,420,469,399,475,412,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,428,438,438,476,451,499,438],
[410,0,407,420,440,471,435,445,442],
[462,483,0,451,466,488,412,482,461],
[452,470,439,0,424,497,449,478,484],
[452,450,424,466,0,471,436,527,477],
[414,419,402,393,419,0,430,461,447],
[439,455,478,441,454,460,0,466,465],
[391,445,408,412,363,429,424,0,456],
[452,448,429,406,413,443,425,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,453,419,432,440,435,438,442],
[478,0,464,440,458,442,478,477,470],
[437,426,0,434,424,438,446,444,454],
[471,450,456,0,434,462,446,460,462],
[458,432,466,456,0,458,440,447,470],
[450,448,452,428,432,0,437,432,443],
[455,412,444,444,450,453,0,447,443],
[452,413,446,430,443,458,443,0,438],
[448,420,436,428,420,447,447,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,456,468,446,421,437,436,440],
[439,0,463,488,445,474,420,464,442],
[434,427,0,464,446,443,420,426,458],
[422,402,426,0,419,416,414,417,438],
[444,445,444,471,0,435,399,439,439],
[469,416,447,474,455,0,410,441,451],
[453,470,470,476,491,480,0,440,465],
[454,426,464,473,451,449,450,0,446],
[450,448,432,452,451,439,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,454,472,436,431,479,455,447],
[454,0,466,481,440,436,467,451,454],
[436,424,0,454,420,428,435,432,417],
[418,409,436,0,401,409,421,432,442],
[454,450,470,489,0,434,473,460,469],
[459,454,462,481,456,0,453,440,475],
[411,423,455,469,417,437,0,432,451],
[435,439,458,458,430,450,458,0,458],
[443,436,473,448,421,415,439,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,409,427,428,470,421,425,451],
[454,0,447,420,472,442,471,438,473],
[481,443,0,416,464,406,471,458,461],
[463,470,474,0,459,419,479,445,472],
[462,418,426,431,0,464,445,399,445],
[420,448,484,471,426,0,456,461,460],
[469,419,419,411,445,434,0,428,460],
[465,452,432,445,491,429,462,0,467],
[439,417,429,418,445,430,430,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,435,457,501,455,546,464,515],
[372,0,420,466,419,379,405,446,392],
[455,470,0,472,363,446,468,415,475],
[433,424,418,0,411,464,481,454,443],
[389,471,527,479,0,508,503,493,523],
[435,511,444,426,382,0,424,461,464],
[344,485,422,409,387,466,0,430,442],
[426,444,475,436,397,429,460,0,434],
[375,498,415,447,367,426,448,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,465,451,452,415,443,442,446],
[455,0,494,444,449,459,458,466,486],
[425,396,0,431,411,425,425,410,435],
[439,446,459,0,420,415,459,437,456],
[438,441,479,470,0,454,472,453,460],
[475,431,465,475,436,0,460,448,477],
[447,432,465,431,418,430,0,424,426],
[448,424,480,453,437,442,466,0,451],
[444,404,455,434,430,413,464,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,448,459,490,426,505,443,461],
[404,0,373,438,442,380,444,405,435],
[442,517,0,502,485,473,480,456,497],
[431,452,388,0,435,397,480,403,435],
[400,448,405,455,0,412,424,412,474],
[464,510,417,493,478,0,491,486,503],
[385,446,410,410,466,399,0,421,433],
[447,485,434,487,478,404,469,0,483],
[429,455,393,455,416,387,457,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,389,438,370,450,405,347,391],
[478,0,415,463,449,495,458,403,498],
[501,475,0,448,411,508,448,485,482],
[452,427,442,0,387,503,403,407,412],
[520,441,479,503,0,503,448,494,466],
[440,395,382,387,387,0,418,389,378],
[485,432,442,487,442,472,0,404,472],
[543,487,405,483,396,501,486,0,451],
[499,392,408,478,424,512,418,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,453,442,445,473,410,460,407],
[402,0,460,400,430,427,423,430,452],
[437,430,0,420,412,425,414,446,423],
[448,490,470,0,428,482,447,474,440],
[445,460,478,462,0,476,438,472,477],
[417,463,465,408,414,0,422,433,410],
[480,467,476,443,452,468,0,460,431],
[430,460,444,416,418,457,430,0,420],
[483,438,467,450,413,480,459,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,430,455,454,454,467,416,445],
[422,0,436,442,450,448,459,421,423],
[460,454,0,451,463,458,445,435,420],
[435,448,439,0,440,442,451,408,460],
[436,440,427,450,0,444,453,434,426],
[436,442,432,448,446,0,447,406,436],
[423,431,445,439,437,443,0,404,414],
[474,469,455,482,456,484,486,0,443],
[445,467,470,430,464,454,476,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,426,399,419,456,456,424,435],
[457,0,434,426,417,432,458,466,438],
[464,456,0,433,426,429,477,475,442],
[491,464,457,0,447,450,454,431,459],
[471,473,464,443,0,461,469,437,431],
[434,458,461,440,429,0,440,477,474],
[434,432,413,436,421,450,0,420,400],
[466,424,415,459,453,413,470,0,458],
[455,452,448,431,459,416,490,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,456,392,440,396,473,414,425],
[468,0,485,446,479,445,490,449,434],
[434,405,0,443,455,431,455,408,466],
[498,444,447,0,479,436,518,430,445],
[450,411,435,411,0,451,488,452,429],
[494,445,459,454,439,0,468,467,473],
[417,400,435,372,402,422,0,434,422],
[476,441,482,460,438,423,456,0,442],
[465,456,424,445,461,417,468,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,450,442,471,429,438,469,447],
[449,0,437,445,439,456,423,448,441],
[440,453,0,450,454,451,422,465,444],
[448,445,440,0,446,449,444,456,445],
[419,451,436,444,0,448,424,464,448],
[461,434,439,441,442,0,440,458,454],
[452,467,468,446,466,450,0,461,444],
[421,442,425,434,426,432,429,0,416],
[443,449,446,445,442,436,446,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,482,512,469,442,505,475,471],
[396,0,468,461,407,429,412,426,444],
[408,422,0,443,410,429,415,438,419],
[378,429,447,0,419,416,417,427,414],
[421,483,480,471,0,454,452,466,449],
[448,461,461,474,436,0,440,469,454],
[385,478,475,473,438,450,0,455,440],
[415,464,452,463,424,421,435,0,443],
[419,446,471,476,441,436,450,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,477,542,452,409,476,471,396],
[437,0,516,515,476,459,493,507,463],
[413,374,0,472,435,419,413,416,353],
[348,375,418,0,476,446,362,422,320],
[438,414,455,414,0,399,484,428,359],
[481,431,471,444,491,0,454,502,459],
[414,397,477,528,406,436,0,513,412],
[419,383,474,468,462,388,377,0,359],
[494,427,537,570,531,431,478,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,445,467,437,455,461,469,521],
[433,0,434,438,466,429,450,468,438],
[445,456,0,434,456,433,458,447,461],
[423,452,456,0,447,435,466,447,483],
[453,424,434,443,0,433,466,436,442],
[435,461,457,455,457,0,446,441,461],
[429,440,432,424,424,444,0,436,475],
[421,422,443,443,454,449,454,0,474],
[369,452,429,407,448,429,415,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,395,402,406,406,415,449,455],
[510,0,440,382,428,395,434,425,449],
[495,450,0,456,433,448,471,483,460],
[488,508,434,0,425,430,467,441,478],
[484,462,457,465,0,432,456,476,472],
[484,495,442,460,458,0,493,474,487],
[475,456,419,423,434,397,0,455,474],
[441,465,407,449,414,416,435,0,449],
[435,441,430,412,418,403,416,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,436,451,473,462,449,441,454],
[421,0,464,443,422,451,427,466,453],
[454,426,0,442,399,415,404,409,448],
[439,447,448,0,463,434,418,452,418],
[417,468,491,427,0,462,433,452,457],
[428,439,475,456,428,0,452,446,440],
[441,463,486,472,457,438,0,471,489],
[449,424,481,438,438,444,419,0,441],
[436,437,442,472,433,450,401,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,441,440,413,465,460,477,415],
[415,0,428,450,461,491,419,437,420],
[449,462,0,446,428,449,426,442,396],
[450,440,444,0,440,421,413,452,419],
[477,429,462,450,0,414,436,490,446],
[425,399,441,469,476,0,454,459,413],
[430,471,464,477,454,436,0,459,453],
[413,453,448,438,400,431,431,0,400],
[475,470,494,471,444,477,437,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,438,424,428,464,473,472,451],
[419,0,416,417,419,440,433,454,443],
[452,474,0,464,466,491,444,478,464],
[466,473,426,0,432,468,439,481,472],
[462,471,424,458,0,465,474,494,471],
[426,450,399,422,425,0,451,442,459],
[417,457,446,451,416,439,0,459,489],
[418,436,412,409,396,448,431,0,437],
[439,447,426,418,419,431,401,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,445,439,455,445,474,466,461],
[455,0,457,434,471,459,488,466,470],
[445,433,0,438,455,429,468,448,475],
[451,456,452,0,442,435,460,443,453],
[435,419,435,448,0,436,463,454,470],
[445,431,461,455,454,0,479,479,457],
[416,402,422,430,427,411,0,428,425],
[424,424,442,447,436,411,462,0,460],
[429,420,415,437,420,433,465,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,438,443,475,445,433,439,430],
[464,0,441,450,448,430,454,446,426],
[452,449,0,460,457,430,448,444,451],
[447,440,430,0,455,431,442,442,440],
[415,442,433,435,0,430,427,431,439],
[445,460,460,459,460,0,448,457,448],
[457,436,442,448,463,442,0,449,440],
[451,444,446,448,459,433,441,0,443],
[460,464,439,450,451,442,450,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,436,435,436,427,462,430,414],
[443,0,451,447,440,477,464,423,456],
[454,439,0,439,476,451,487,458,433],
[455,443,451,0,450,446,468,432,422],
[454,450,414,440,0,448,472,419,426],
[463,413,439,444,442,0,444,439,456],
[428,426,403,422,418,446,0,402,399],
[460,467,432,458,471,451,488,0,449],
[476,434,457,468,464,434,491,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,475,436,443,451,447,468,482],
[427,0,462,454,433,438,454,444,448],
[415,428,0,423,405,418,435,450,419],
[454,436,467,0,439,447,464,425,474],
[447,457,485,451,0,435,445,463,469],
[439,452,472,443,455,0,464,432,442],
[443,436,455,426,445,426,0,416,464],
[422,446,440,465,427,458,474,0,438],
[408,442,471,416,421,448,426,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,460,436,433,419,459,437,461],
[415,0,430,425,411,408,456,436,440],
[430,460,0,428,426,432,449,440,431],
[454,465,462,0,441,461,473,425,466],
[457,479,464,449,0,442,480,439,446],
[471,482,458,429,448,0,465,460,469],
[431,434,441,417,410,425,0,414,451],
[453,454,450,465,451,430,476,0,461],
[429,450,459,424,444,421,439,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,399,432,457,450,450,389,440],
[490,0,486,389,472,486,448,446,402],
[491,404,0,358,479,462,450,407,445],
[458,501,532,0,469,482,420,387,476],
[433,418,411,421,0,488,439,400,399],
[440,404,428,408,402,0,400,429,360],
[440,442,440,470,451,490,0,359,443],
[501,444,483,503,490,461,531,0,447],
[450,488,445,414,491,530,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,442,475,454,457,448,460,445],
[407,0,410,444,428,436,463,450,397],
[448,480,0,463,419,451,428,464,423],
[415,446,427,0,413,424,433,466,397],
[436,462,471,477,0,444,470,436,435],
[433,454,439,466,446,0,437,451,408],
[442,427,462,457,420,453,0,461,428],
[430,440,426,424,454,439,429,0,380],
[445,493,467,493,455,482,462,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,426,446,452,428,440,458,424],
[440,0,436,429,426,437,446,455,434],
[464,454,0,421,467,449,453,452,458],
[444,461,469,0,457,476,467,471,448],
[438,464,423,433,0,451,464,483,442],
[462,453,441,414,439,0,446,437,445],
[450,444,437,423,426,444,0,476,429],
[432,435,438,419,407,453,414,0,408],
[466,456,432,442,448,445,461,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,470,464,456,475,500,498,441],
[443,0,478,449,502,459,484,497,477],
[420,412,0,430,451,443,461,481,448],
[426,441,460,0,483,466,480,486,461],
[434,388,439,407,0,435,428,441,448],
[415,431,447,424,455,0,485,444,456],
[390,406,429,410,462,405,0,438,439],
[392,393,409,404,449,446,452,0,424],
[449,413,442,429,442,434,451,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,412,434,416,423,438,435,464],
[459,0,439,459,468,452,464,447,483],
[478,451,0,456,455,436,468,465,476],
[456,431,434,0,442,435,449,451,488],
[474,422,435,448,0,435,457,444,481],
[467,438,454,455,455,0,449,466,479],
[452,426,422,441,433,441,0,445,467],
[455,443,425,439,446,424,445,0,478],
[426,407,414,402,409,411,423,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,459,433,451,498,439,467,448],
[417,0,446,403,419,435,398,414,397],
[431,444,0,406,417,464,410,441,423],
[457,487,484,0,470,486,424,445,447],
[439,471,473,420,0,471,462,439,421],
[392,455,426,404,419,0,402,411,407],
[451,492,480,466,428,488,0,477,476],
[423,476,449,445,451,479,413,0,452],
[442,493,467,443,469,483,414,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,447,419,443,436,476,449],
[444,0,447,435,420,434,415,441,439],
[436,443,0,432,404,433,440,456,436],
[443,455,458,0,437,446,459,441,447],
[471,470,486,453,0,446,416,452,457],
[447,456,457,444,444,0,444,478,454],
[454,475,450,431,474,446,0,452,464],
[414,449,434,449,438,412,438,0,449],
[441,451,454,443,433,436,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,476,410,481,464,432,465,451],
[453,0,481,424,485,429,457,492,448],
[414,409,0,435,461,405,385,434,431],
[480,466,455,0,500,467,435,469,491],
[409,405,429,390,0,424,391,445,421],
[426,461,485,423,466,0,412,458,474],
[458,433,505,455,499,478,0,493,491],
[425,398,456,421,445,432,397,0,434],
[439,442,459,399,469,416,399,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,452,473,465,458,443,448,455],
[453,0,451,481,454,461,454,430,466],
[438,439,0,454,444,433,453,456,459],
[417,409,436,0,443,451,424,412,437],
[425,436,446,447,0,440,443,428,448],
[432,429,457,439,450,0,442,402,426],
[447,436,437,466,447,448,0,403,422],
[442,460,434,478,462,488,487,0,472],
[435,424,431,453,442,464,468,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,454,478,453,483,462,383,416],
[446,0,481,487,443,502,458,448,480],
[436,409,0,459,471,493,387,401,436],
[412,403,431,0,413,455,416,400,424],
[437,447,419,477,0,496,463,417,473],
[407,388,397,435,394,0,370,370,415],
[428,432,503,474,427,520,0,419,448],
[507,442,489,490,473,520,471,0,517],
[474,410,454,466,417,475,442,373,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,512,394,374,500,455,434,475],
[437,0,515,411,442,430,485,425,419],
[378,375,0,414,359,354,429,379,361],
[496,479,476,0,452,437,412,458,467],
[516,448,531,438,0,455,538,430,428],
[390,460,536,453,435,0,420,447,488],
[435,405,461,478,352,470,0,444,394],
[456,465,511,432,460,443,446,0,449],
[415,471,529,423,462,402,496,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,495,495,476,460,474,505,492],
[463,0,477,465,504,445,494,503,464],
[395,413,0,462,448,446,423,466,430],
[395,425,428,0,455,452,431,443,468],
[414,386,442,435,0,434,410,438,439],
[430,445,444,438,456,0,452,466,510],
[416,396,467,459,480,438,0,478,477],
[385,387,424,447,452,424,412,0,413],
[398,426,460,422,451,380,413,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,378,426,420,409,448,427,486],
[460,0,445,447,446,460,455,421,479],
[512,445,0,490,469,473,461,476,500],
[464,443,400,0,423,438,436,445,474],
[470,444,421,467,0,450,447,452,490],
[481,430,417,452,440,0,452,427,457],
[442,435,429,454,443,438,0,445,458],
[463,469,414,445,438,463,445,0,491],
[404,411,390,416,400,433,432,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,421,423,428,411,421,445,427],
[463,0,448,442,458,461,461,468,470],
[469,442,0,445,460,469,447,466,456],
[467,448,445,0,449,454,448,461,460],
[462,432,430,441,0,427,456,457,447],
[479,429,421,436,463,0,453,458,435],
[469,429,443,442,434,437,0,439,442],
[445,422,424,429,433,432,451,0,460],
[463,420,434,430,443,455,448,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,478,457,483,428,455,455,449],
[471,0,483,455,452,429,452,473,450],
[412,407,0,442,439,412,416,426,431],
[433,435,448,0,437,439,419,453,422],
[407,438,451,453,0,428,427,439,442],
[462,461,478,451,462,0,442,474,442],
[435,438,474,471,463,448,0,460,461],
[435,417,464,437,451,416,430,0,435],
[441,440,459,468,448,448,429,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,436,441,474,429,409,416,441],
[422,0,436,458,446,438,431,427,443],
[454,454,0,444,472,461,416,412,479],
[449,432,446,0,454,455,450,416,455],
[416,444,418,436,0,417,419,400,448],
[461,452,429,435,473,0,428,426,463],
[481,459,474,440,471,462,0,445,469],
[474,463,478,474,490,464,445,0,482],
[449,447,411,435,442,427,421,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,441,448,440,439,442,459,433],
[434,0,449,425,449,434,433,471,453],
[449,441,0,430,427,439,441,450,451],
[442,465,460,0,433,449,460,453,455],
[450,441,463,457,0,446,440,447,446],
[451,456,451,441,444,0,434,456,453],
[448,457,449,430,450,456,0,459,450],
[431,419,440,437,443,434,431,0,452],
[457,437,439,435,444,437,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,449,424,445,425,490,445,430],
[434,0,449,448,432,444,467,455,420],
[441,441,0,419,465,462,466,430,448],
[466,442,471,0,434,427,475,437,450],
[445,458,425,456,0,460,489,465,455],
[465,446,428,463,430,0,462,445,453],
[400,423,424,415,401,428,0,430,427],
[445,435,460,453,425,445,460,0,465],
[460,470,442,440,435,437,463,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,493,452,452,463,473,478,442],
[427,0,442,419,431,401,428,465,433],
[397,448,0,445,410,400,429,421,448],
[438,471,445,0,493,447,451,487,441],
[438,459,480,397,0,439,439,460,438],
[427,489,490,443,451,0,482,472,436],
[417,462,461,439,451,408,0,474,431],
[412,425,469,403,430,418,416,0,428],
[448,457,442,449,452,454,459,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,433,470,464,459,470,449,443],
[452,0,452,450,451,446,462,442,476],
[457,438,0,443,461,453,467,448,465],
[420,440,447,0,445,453,451,444,466],
[426,439,429,445,0,436,453,427,440],
[431,444,437,437,454,0,438,440,450],
[420,428,423,439,437,452,0,426,469],
[441,448,442,446,463,450,464,0,457],
[447,414,425,424,450,440,421,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,432,438,445,457,421,415,426],
[463,0,454,445,441,461,434,434,450],
[458,436,0,455,441,460,459,436,440],
[452,445,435,0,427,430,437,433,441],
[445,449,449,463,0,472,429,439,456],
[433,429,430,460,418,0,451,409,414],
[469,456,431,453,461,439,0,463,470],
[475,456,454,457,451,481,427,0,449],
[464,440,450,449,434,476,420,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,428,431,411,457,484,431,439],
[425,0,403,418,424,424,390,426,406],
[462,487,0,430,444,425,460,427,424],
[459,472,460,0,458,466,467,444,457],
[479,466,446,432,0,431,445,439,440],
[433,466,465,424,459,0,467,450,462],
[406,500,430,423,445,423,0,423,422],
[459,464,463,446,451,440,467,0,423],
[451,484,466,433,450,428,468,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,441,442,459,439,465,446,436],
[416,0,435,429,444,431,455,440,430],
[449,455,0,429,457,437,461,472,461],
[448,461,461,0,460,453,463,443,455],
[431,446,433,430,0,448,436,438,431],
[451,459,453,437,442,0,466,457,445],
[425,435,429,427,454,424,0,431,440],
[444,450,418,447,452,433,459,0,445],
[454,460,429,435,459,445,450,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,444,444,390,429,395,414,435],
[475,0,431,438,424,425,456,481,446],
[446,459,0,465,421,413,457,458,445],
[446,452,425,0,408,419,440,454,413],
[500,466,469,482,0,474,480,519,445],
[461,465,477,471,416,0,427,449,433],
[495,434,433,450,410,463,0,436,443],
[476,409,432,436,371,441,454,0,437],
[455,444,445,477,445,457,447,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,436,457,482,459,451,481,471],
[421,0,457,431,451,456,464,493,440],
[454,433,0,449,442,439,457,471,466],
[433,459,441,0,482,474,478,485,456],
[408,439,448,408,0,433,426,453,447],
[431,434,451,416,457,0,446,469,444],
[439,426,433,412,464,444,0,455,437],
[409,397,419,405,437,421,435,0,431],
[419,450,424,434,443,446,453,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,441,449,439,443,458,452,452],
[429,0,460,418,400,409,413,458,408],
[449,430,0,428,443,439,430,461,445],
[441,472,462,0,410,430,415,429,437],
[451,490,447,480,0,474,435,472,465],
[447,481,451,460,416,0,429,462,447],
[432,477,460,475,455,461,0,454,457],
[438,432,429,461,418,428,436,0,443],
[438,482,445,453,425,443,433,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,416,408,408,423,411,444,412],
[486,0,453,429,454,460,457,465,449],
[474,437,0,426,439,483,442,461,444],
[482,461,464,0,447,478,436,465,466],
[482,436,451,443,0,486,423,468,448],
[467,430,407,412,404,0,417,459,396],
[479,433,448,454,467,473,0,484,434],
[446,425,429,425,422,431,406,0,420],
[478,441,446,424,442,494,456,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,481,453,430,454,458,479],
[428,0,419,422,444,405,468,464,445],
[448,471,0,468,468,465,443,483,496],
[409,468,422,0,432,451,417,460,489],
[437,446,422,458,0,446,441,441,464],
[460,485,425,439,444,0,447,448,459],
[436,422,447,473,449,443,0,455,485],
[432,426,407,430,449,442,435,0,467],
[411,445,394,401,426,431,405,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,497,502,483,409,355,466,329],
[423,0,479,553,541,506,522,632,466],
[393,411,0,483,442,434,410,444,372],
[388,337,407,0,371,376,370,411,349],
[407,349,448,519,0,377,350,484,440],
[481,384,456,514,513,0,426,536,399],
[535,368,480,520,540,464,0,500,404],
[424,258,446,479,406,354,390,0,309],
[561,424,518,541,450,491,486,581,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,476,474,466,456,435,454,463],
[461,0,443,462,448,470,447,460,450],
[414,447,0,424,450,428,418,434,416],
[416,428,466,0,435,454,424,469,414],
[424,442,440,455,0,435,423,451,443],
[434,420,462,436,455,0,405,444,442],
[455,443,472,466,467,485,0,467,469],
[436,430,456,421,439,446,423,0,432],
[427,440,474,476,447,448,421,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,434,437,444,463,476,458,415],
[435,0,434,448,444,461,471,458,422],
[456,456,0,440,448,449,473,443,438],
[453,442,450,0,464,434,469,451,413],
[446,446,442,426,0,465,471,453,426],
[427,429,441,456,425,0,444,431,445],
[414,419,417,421,419,446,0,449,399],
[432,432,447,439,437,459,441,0,393],
[475,468,452,477,464,445,491,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,460,454,455,468,454,444,457],
[450,0,431,423,415,446,454,428,437],
[430,459,0,448,441,433,451,441,463],
[436,467,442,0,418,468,452,429,449],
[435,475,449,472,0,454,450,431,440],
[422,444,457,422,436,0,452,445,427],
[436,436,439,438,440,438,0,420,433],
[446,462,449,461,459,445,470,0,462],
[433,453,427,441,450,463,457,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,434,428,450,485,469,485,455],
[403,0,445,437,407,424,432,434,401],
[456,445,0,444,475,478,431,469,425],
[462,453,446,0,433,463,447,457,416],
[440,483,415,457,0,466,432,456,416],
[405,466,412,427,424,0,432,435,440],
[421,458,459,443,458,458,0,446,453],
[405,456,421,433,434,455,444,0,397],
[435,489,465,474,474,450,437,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,414,449,444,461,452,459,422],
[447,0,412,447,444,456,465,440,412],
[476,478,0,476,470,469,465,453,434],
[441,443,414,0,416,436,435,449,415],
[446,446,420,474,0,469,456,474,445],
[429,434,421,454,421,0,444,471,404],
[438,425,425,455,434,446,0,461,426],
[431,450,437,441,416,419,429,0,413],
[468,478,456,475,445,486,464,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,451,476,421,419,419,440,435],
[431,0,439,448,432,409,398,438,419],
[439,451,0,452,421,406,435,439,430],
[414,442,438,0,406,415,412,414,413],
[469,458,469,484,0,440,459,442,457],
[471,481,484,475,450,0,434,439,442],
[471,492,455,478,431,456,0,442,457],
[450,452,451,476,448,451,448,0,429],
[455,471,460,477,433,448,433,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,439,461,418,425,439,420,466],
[448,0,456,465,440,408,431,438,433],
[451,434,0,434,446,387,388,413,396],
[429,425,456,0,457,419,424,419,420],
[472,450,444,433,0,395,412,397,408],
[465,482,503,471,495,0,453,443,489],
[451,459,502,466,478,437,0,439,462],
[470,452,477,471,493,447,451,0,444],
[424,457,494,470,482,401,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,422,431,408,449,433,416,380],
[455,0,425,385,405,414,414,387,395],
[468,465,0,450,405,470,451,405,457],
[459,505,440,0,425,453,450,437,463],
[482,485,485,465,0,467,426,445,465],
[441,476,420,437,423,0,445,437,416],
[457,476,439,440,464,445,0,448,460],
[474,503,485,453,445,453,442,0,459],
[510,495,433,427,425,474,430,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,464,454,457,453,439,447,468],
[428,0,423,436,425,448,434,432,474],
[426,467,0,420,462,434,437,445,471],
[436,454,470,0,458,455,453,451,472],
[433,465,428,432,0,447,448,411,442],
[437,442,456,435,443,0,450,424,448],
[451,456,453,437,442,440,0,474,462],
[443,458,445,439,479,466,416,0,465],
[422,416,419,418,448,442,428,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,479,454,443,476,445,482,457],
[440,0,452,452,442,432,449,432,409],
[411,438,0,452,422,445,439,461,442],
[436,438,438,0,468,453,456,486,433],
[447,448,468,422,0,429,456,482,437],
[414,458,445,437,461,0,471,466,443],
[445,441,451,434,434,419,0,468,412],
[408,458,429,404,408,424,422,0,416],
[433,481,448,457,453,447,478,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,437,480,451,486,457,474,504],
[423,0,447,390,413,411,446,431,442],
[453,443,0,446,456,466,452,500,466],
[410,500,444,0,456,519,490,462,467],
[439,477,434,434,0,454,460,486,498],
[404,479,424,371,436,0,405,421,428],
[433,444,438,400,430,485,0,496,404],
[416,459,390,428,404,469,394,0,397],
[386,448,424,423,392,462,486,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,436,449,428,429,432,458,448],
[473,0,439,486,432,473,449,463,447],
[454,451,0,456,457,441,443,452,443],
[441,404,434,0,424,419,408,418,416],
[462,458,433,466,0,479,437,446,457],
[461,417,449,471,411,0,430,446,426],
[458,441,447,482,453,460,0,442,458],
[432,427,438,472,444,444,448,0,443],
[442,443,447,474,433,464,432,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,595,692,597,492,690,396,593,492],
[295,0,394,396,295,493,497,398,198],
[198,496,0,299,396,493,497,495,198],
[293,494,591,0,393,688,396,593,591],
[398,595,494,497,0,691,497,593,496],
[200,397,397,202,199,0,101,500,298],
[494,393,393,494,393,789,0,496,397],
[297,492,395,297,297,390,394,0,99],
[398,692,692,299,394,592,493,791,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,471,475,450,484,442,458,471],
[453,0,452,451,425,467,437,429,438],
[419,438,0,443,433,458,428,418,440],
[415,439,447,0,435,446,422,395,416],
[440,465,457,455,0,461,437,439,451],
[406,423,432,444,429,0,430,406,444],
[448,453,462,468,453,460,0,441,455],
[432,461,472,495,451,484,449,0,461],
[419,452,450,474,439,446,435,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,449,461,430,467,456,445,486],
[448,0,431,447,441,458,452,430,471],
[441,459,0,454,451,442,461,438,473],
[429,443,436,0,445,460,445,453,487],
[460,449,439,445,0,451,452,439,493],
[423,432,448,430,439,0,472,450,484],
[434,438,429,445,438,418,0,436,484],
[445,460,452,437,451,440,454,0,478],
[404,419,417,403,397,406,406,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,436,449,470,455,480,446,449],
[420,0,454,465,467,470,457,459,437],
[454,436,0,444,465,437,475,452,463],
[441,425,446,0,466,453,460,450,449],
[420,423,425,424,0,408,434,422,427],
[435,420,453,437,482,0,468,472,447],
[410,433,415,430,456,422,0,424,438],
[444,431,438,440,468,418,466,0,454],
[441,453,427,441,463,443,452,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,443,444,520,446,463,465,469],
[403,0,429,458,469,443,461,397,432],
[447,461,0,458,505,459,432,440,447],
[446,432,432,0,455,442,456,433,454],
[370,421,385,435,0,415,428,387,405],
[444,447,431,448,475,0,415,447,438],
[427,429,458,434,462,475,0,442,429],
[425,493,450,457,503,443,448,0,440],
[421,458,443,436,485,452,461,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,444,423,462,449,477,458,480],
[439,0,430,455,468,444,472,448,444],
[446,460,0,436,462,467,446,454,466],
[467,435,454,0,453,446,467,458,447],
[428,422,428,437,0,438,468,439,453],
[441,446,423,444,452,0,473,456,489],
[413,418,444,423,422,417,0,436,427],
[432,442,436,432,451,434,454,0,450],
[410,446,424,443,437,401,463,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,460,453,439,432,431,443,458],
[442,0,454,454,442,447,443,443,458],
[430,436,0,440,418,415,432,436,446],
[437,436,450,0,433,442,431,441,443],
[451,448,472,457,0,445,442,433,482],
[458,443,475,448,445,0,448,435,467],
[459,447,458,459,448,442,0,441,462],
[447,447,454,449,457,455,449,0,440],
[432,432,444,447,408,423,428,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,464,446,444,432,471,442,457],
[444,0,468,459,467,450,468,466,445],
[426,422,0,462,433,433,454,411,427],
[444,431,428,0,451,436,462,440,414],
[446,423,457,439,0,430,439,434,425],
[458,440,457,454,460,0,474,447,455],
[419,422,436,428,451,416,0,434,420],
[448,424,479,450,456,443,456,0,424],
[433,445,463,476,465,435,470,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,434,438,437,452,415,455,394],
[473,0,467,461,438,483,416,455,432],
[456,423,0,430,442,440,428,424,401],
[452,429,460,0,432,445,448,463,408],
[453,452,448,458,0,463,427,475,446],
[438,407,450,445,427,0,444,423,391],
[475,474,462,442,463,446,0,479,426],
[435,435,466,427,415,467,411,0,412],
[496,458,489,482,444,499,464,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,483,411,457,378,439,400,358],
[464,0,569,483,437,435,464,408,434],
[407,321,0,395,434,431,390,327,405],
[479,407,495,0,421,432,434,451,418],
[433,453,456,469,0,391,372,466,466],
[512,455,459,458,499,0,408,437,502],
[451,426,500,456,518,482,0,441,467],
[490,482,563,439,424,453,449,0,450],
[532,456,485,472,424,388,423,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,474,463,447,462,451,465],
[448,0,456,459,458,440,454,444,444],
[442,434,0,451,460,450,456,447,456],
[416,431,439,0,460,423,446,437,443],
[427,432,430,430,0,450,456,436,451],
[443,450,440,467,440,0,456,453,458],
[428,436,434,444,434,434,0,426,454],
[439,446,443,453,454,437,464,0,447],
[425,446,434,447,439,432,436,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,459,462,447,440,469,436,439],
[446,0,467,465,471,436,467,436,448],
[431,423,0,464,438,431,445,425,432],
[428,425,426,0,453,421,447,429,414],
[443,419,452,437,0,425,449,426,450],
[450,454,459,469,465,0,455,467,440],
[421,423,445,443,441,435,0,436,425],
[454,454,465,461,464,423,454,0,434],
[451,442,458,476,440,450,465,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,463,492,459,441,462,443],
[440,0,402,419,432,464,448,423,425],
[453,488,0,448,489,455,451,437,446],
[427,471,442,0,479,429,440,420,447],
[398,458,401,411,0,461,449,414,413],
[431,426,435,461,429,0,443,407,440],
[449,442,439,450,441,447,0,391,461],
[428,467,453,470,476,483,499,0,468],
[447,465,444,443,477,450,429,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,392,386,468,489,543,404,459],
[469,0,418,357,465,440,534,384,460],
[498,472,0,445,533,555,509,470,507],
[504,533,445,0,515,520,533,487,542],
[422,425,357,375,0,474,426,474,427],
[401,450,335,370,416,0,484,422,426],
[347,356,381,357,464,406,0,368,400],
[486,506,420,403,416,468,522,0,469],
[431,430,383,348,463,464,490,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,433,445,424,463,420,415,436],
[445,0,437,438,438,437,432,441,432],
[457,453,0,457,456,447,444,436,423],
[445,452,433,0,420,417,423,435,446],
[466,452,434,470,0,440,438,436,470],
[427,453,443,473,450,0,454,424,439],
[470,458,446,467,452,436,0,446,440],
[475,449,454,455,454,466,444,0,427],
[454,458,467,444,420,451,450,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,451,501,454,465,449,444,459],
[424,0,407,444,425,455,450,420,424],
[439,483,0,453,449,456,473,432,442],
[389,446,437,0,437,423,423,420,419],
[436,465,441,453,0,438,431,426,422],
[425,435,434,467,452,0,451,406,415],
[441,440,417,467,459,439,0,423,434],
[446,470,458,470,464,484,467,0,444],
[431,466,448,471,468,475,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,384,443,371,424,416,464,395],
[472,0,416,468,390,426,470,461,405],
[506,474,0,515,438,485,510,499,478],
[447,422,375,0,405,422,448,464,424],
[519,500,452,485,0,439,452,509,489],
[466,464,405,468,451,0,458,462,414],
[474,420,380,442,438,432,0,454,413],
[426,429,391,426,381,428,436,0,409],
[495,485,412,466,401,476,477,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,461,445,484,463,445,463,451],
[421,0,473,405,444,460,443,444,439],
[429,417,0,412,455,449,432,435,439],
[445,485,478,0,476,474,465,464,461],
[406,446,435,414,0,420,398,416,410],
[427,430,441,416,470,0,442,446,451],
[445,447,458,425,492,448,0,467,444],
[427,446,455,426,474,444,423,0,434],
[439,451,451,429,480,439,446,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,446,441,428,469,430,445,456],
[440,0,454,420,474,451,416,424,423],
[444,436,0,445,457,473,405,423,452],
[449,470,445,0,474,479,437,452,412],
[462,416,433,416,0,457,464,466,439],
[421,439,417,411,433,0,429,455,405],
[460,474,485,453,426,461,0,517,469],
[445,466,467,438,424,435,373,0,476],
[434,467,438,478,451,485,421,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,480,451,454,458,426,432,452],
[452,0,453,455,457,469,447,464,443],
[410,437,0,411,433,432,465,437,428],
[439,435,479,0,413,439,470,440,443],
[436,433,457,477,0,451,464,454,448],
[432,421,458,451,439,0,446,438,451],
[464,443,425,420,426,444,0,471,449],
[458,426,453,450,436,452,419,0,441],
[438,447,462,447,442,439,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,442,495,407,383,486,406,448],
[498,0,494,533,489,460,471,400,478],
[448,396,0,433,410,417,454,401,401],
[395,357,457,0,389,379,416,333,384],
[483,401,480,501,0,492,484,451,466],
[507,430,473,511,398,0,482,461,466],
[404,419,436,474,406,408,0,376,433],
[484,490,489,557,439,429,514,0,462],
[442,412,489,506,424,424,457,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,435,413,451,433,440,451,399],
[453,0,448,393,447,397,443,443,441],
[455,442,0,413,454,415,429,452,452],
[477,497,477,0,482,444,459,468,443],
[439,443,436,408,0,429,436,443,433],
[457,493,475,446,461,0,468,451,438],
[450,447,461,431,454,422,0,443,434],
[439,447,438,422,447,439,447,0,446],
[491,449,438,447,457,452,456,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,476,500,526,512,523,478,494],
[452,0,478,460,482,507,464,433,467],
[414,412,0,428,444,434,487,441,468],
[390,430,462,0,511,406,446,434,463],
[364,408,446,379,0,396,424,406,406],
[378,383,456,484,494,0,451,415,432],
[367,426,403,444,466,439,0,420,380],
[412,457,449,456,484,475,470,0,397],
[396,423,422,427,484,458,510,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,378,413,432,389,374,397,376,395],
[512,0,490,473,434,512,473,352,512],
[477,400,0,434,380,536,457,395,496],
[458,417,456,0,471,437,460,438,475],
[501,456,510,419,0,438,457,455,479],
[516,378,354,453,452,0,434,334,455],
[493,417,433,430,433,456,0,417,494],
[514,538,495,452,435,556,473,0,535],
[495,378,394,415,411,435,396,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,491,444,501,462,461,453,459],
[419,0,465,432,448,420,443,434,436],
[399,425,0,418,435,423,429,432,426],
[446,458,472,0,462,449,463,436,451],
[389,442,455,428,0,416,469,444,440],
[428,470,467,441,474,0,481,440,479],
[429,447,461,427,421,409,0,440,419],
[437,456,458,454,446,450,450,0,446],
[431,454,464,439,450,411,471,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,439,465,451,448,448,450,429],
[439,0,454,466,470,418,454,461,455],
[451,436,0,454,442,466,457,477,440],
[425,424,436,0,438,422,453,427,432],
[439,420,448,452,0,428,418,426,435],
[442,472,424,468,462,0,456,457,442],
[442,436,433,437,472,434,0,424,441],
[440,429,413,463,464,433,466,0,421],
[461,435,450,458,455,448,449,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,422,429,447,448,443,444,444],
[435,0,431,428,445,449,426,436,466],
[468,459,0,435,468,461,439,466,474],
[461,462,455,0,459,485,443,456,479],
[443,445,422,431,0,451,427,434,446],
[442,441,429,405,439,0,422,442,467],
[447,464,451,447,463,468,0,441,468],
[446,454,424,434,456,448,449,0,444],
[446,424,416,411,444,423,422,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,482,446,482,483,521,445,448],
[446,0,370,371,408,407,449,446,297],
[408,520,0,521,446,481,486,372,448],
[444,519,369,0,521,481,410,408,520],
[408,482,444,369,0,407,483,372,409],
[407,483,409,409,483,0,448,445,483],
[369,441,404,480,407,442,0,406,334],
[445,444,518,482,518,445,484,0,370],
[442,593,442,370,481,407,556,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,411,412,441,400,431,408,432],
[464,0,419,468,450,396,455,440,456],
[479,471,0,426,460,417,458,432,473],
[478,422,464,0,483,452,491,458,432],
[449,440,430,407,0,407,490,491,420],
[490,494,473,438,483,0,483,451,468],
[459,435,432,399,400,407,0,439,422],
[482,450,458,432,399,439,451,0,462],
[458,434,417,458,470,422,468,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,466,428,454,446,478,438,453],
[444,0,455,412,469,437,455,448,454],
[424,435,0,448,458,451,446,465,474],
[462,478,442,0,476,459,477,430,482],
[436,421,432,414,0,446,429,428,435],
[444,453,439,431,444,0,441,455,440],
[412,435,444,413,461,449,0,442,448],
[452,442,425,460,462,435,448,0,455],
[437,436,416,408,455,450,442,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,424,449,432,479,420,453,439],
[408,0,397,421,420,465,463,464,471],
[466,493,0,439,438,482,475,496,483],
[441,469,451,0,476,494,443,500,489],
[458,470,452,414,0,463,453,445,459],
[411,425,408,396,427,0,440,429,439],
[470,427,415,447,437,450,0,477,445],
[437,426,394,390,445,461,413,0,444],
[451,419,407,401,431,451,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,443,459,417,450,442,411,437],
[450,0,450,455,452,432,420,455,438],
[447,440,0,456,423,434,441,414,444],
[431,435,434,0,412,400,406,403,438],
[473,438,467,478,0,431,450,482,435],
[440,458,456,490,459,0,430,452,426],
[448,470,449,484,440,460,0,439,452],
[479,435,476,487,408,438,451,0,423],
[453,452,446,452,455,464,438,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,458,490,472,445,452,443,454],
[427,0,451,456,472,449,465,430,467],
[432,439,0,459,456,434,458,448,434],
[400,434,431,0,462,410,428,421,413],
[418,418,434,428,0,438,438,399,433],
[445,441,456,480,452,0,438,476,458],
[438,425,432,462,452,452,0,434,457],
[447,460,442,469,491,414,456,0,456],
[436,423,456,477,457,432,433,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,379,501,461,440,449,434,406],
[492,0,427,499,502,522,464,451,461],
[511,463,0,486,492,486,472,447,414],
[389,391,404,0,431,377,413,416,392],
[429,388,398,459,0,435,400,440,378],
[450,368,404,513,455,0,464,457,441],
[441,426,418,477,490,426,0,458,428],
[456,439,443,474,450,433,432,0,464],
[484,429,476,498,512,449,462,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,433,469,450,445,433,461,412],
[463,0,465,494,445,481,477,491,418],
[457,425,0,485,458,462,436,450,428],
[421,396,405,0,445,443,389,406,381],
[440,445,432,445,0,440,428,478,405],
[445,409,428,447,450,0,429,431,410],
[457,413,454,501,462,461,0,459,414],
[429,399,440,484,412,459,431,0,455],
[478,472,462,509,485,480,476,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,486,460,445,421,447,463,445],
[430,0,504,445,434,449,472,441,414],
[404,386,0,365,377,378,391,406,408],
[430,445,525,0,456,421,449,460,432],
[445,456,513,434,0,468,415,461,409],
[469,441,512,469,422,0,462,473,444],
[443,418,499,441,475,428,0,479,434],
[427,449,484,430,429,417,411,0,407],
[445,476,482,458,481,446,456,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,410,455,403,423,422,398,411],
[463,0,433,481,454,424,450,427,456],
[480,457,0,476,436,466,462,463,469],
[435,409,414,0,376,388,409,388,393],
[487,436,454,514,0,443,464,455,453],
[467,466,424,502,447,0,469,433,470],
[468,440,428,481,426,421,0,462,413],
[492,463,427,502,435,457,428,0,463],
[479,434,421,497,437,420,477,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,440,437,436,451,416,448,420],
[470,0,427,462,429,457,447,457,435],
[450,463,0,451,438,457,429,446,435],
[453,428,439,0,438,435,430,429,426],
[454,461,452,452,0,465,410,454,424],
[439,433,433,455,425,0,423,441,404],
[474,443,461,460,480,467,0,479,445],
[442,433,444,461,436,449,411,0,434],
[470,455,455,464,466,486,445,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,437,451,447,438,457,458,450],
[434,0,417,453,437,428,435,440,444],
[453,473,0,443,466,450,463,474,454],
[439,437,447,0,469,453,468,458,441],
[443,453,424,421,0,435,462,457,451],
[452,462,440,437,455,0,452,457,444],
[433,455,427,422,428,438,0,431,442],
[432,450,416,432,433,433,459,0,434],
[440,446,436,449,439,446,448,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,421,441,421,441,472,446,427],
[457,0,390,457,425,402,464,434,455],
[469,500,0,458,441,497,473,481,438],
[449,433,432,0,401,430,450,445,423],
[469,465,449,489,0,469,474,465,443],
[449,488,393,460,421,0,464,439,417],
[418,426,417,440,416,426,0,451,430],
[444,456,409,445,425,451,439,0,422],
[463,435,452,467,447,473,460,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,454,469,493,471,504,437,466],
[420,0,414,412,465,438,479,457,430],
[436,476,0,431,485,468,491,476,431],
[421,478,459,0,507,477,492,473,454],
[397,425,405,383,0,412,413,419,413],
[419,452,422,413,478,0,465,430,430],
[386,411,399,398,477,425,0,443,418],
[453,433,414,417,471,460,447,0,449],
[424,460,459,436,477,460,472,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,418,439,490,419,477,485,432],
[447,0,423,411,489,454,447,515,408],
[472,467,0,435,499,510,531,517,441],
[451,479,455,0,497,423,475,512,424],
[400,401,391,393,0,429,491,494,370],
[471,436,380,467,461,0,497,430,477],
[413,443,359,415,399,393,0,450,384],
[405,375,373,378,396,460,440,0,392],
[458,482,449,466,520,413,506,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,429,444,453,458,450,459,455],
[438,0,440,434,417,440,441,443,445],
[461,450,0,437,442,448,415,444,464],
[446,456,453,0,458,439,434,484,458],
[437,473,448,432,0,473,438,449,470],
[432,450,442,451,417,0,452,463,421],
[440,449,475,456,452,438,0,477,452],
[431,447,446,406,441,427,413,0,441],
[435,445,426,432,420,469,438,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,448,442,437,395,444,436,469],
[509,0,483,503,464,465,425,497,490],
[442,407,0,470,436,405,433,416,463],
[448,387,420,0,411,408,399,459,422],
[453,426,454,479,0,453,411,492,475],
[495,425,485,482,437,0,445,471,475],
[446,465,457,491,479,445,0,474,461],
[454,393,474,431,398,419,416,0,461],
[421,400,427,468,415,415,429,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,439,423,448,424,475,471,433],
[437,0,419,375,399,389,440,464,415],
[451,471,0,392,430,382,442,424,421],
[467,515,498,0,474,445,457,506,525],
[442,491,460,416,0,406,451,455,494],
[466,501,508,445,484,0,484,533,489],
[415,450,448,433,439,406,0,471,465],
[419,426,466,384,435,357,419,0,446],
[457,475,469,365,396,401,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,479,504,450,472,456,442,461],
[427,0,420,448,428,428,429,422,436],
[411,470,0,449,434,458,406,438,421],
[386,442,441,0,420,433,381,417,446],
[440,462,456,470,0,467,438,458,486],
[418,462,432,457,423,0,405,443,453],
[434,461,484,509,452,485,0,474,463],
[448,468,452,473,432,447,416,0,453],
[429,454,469,444,404,437,427,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,450,509,442,467,463,471,452],
[425,0,465,438,431,423,438,473,455],
[440,425,0,479,442,464,498,482,426],
[381,452,411,0,439,449,422,438,453],
[448,459,448,451,0,484,448,453,428],
[423,467,426,441,406,0,426,446,404],
[427,452,392,468,442,464,0,450,447],
[419,417,408,452,437,444,440,0,441],
[438,435,464,437,462,486,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,504,507,458,460,483,430,556],
[357,0,484,437,411,335,385,253,357],
[386,406,0,436,404,388,407,382,328],
[383,453,454,0,457,458,456,377,429],
[432,479,486,433,0,433,433,457,434],
[430,555,502,432,457,0,456,404,505],
[407,505,483,434,457,434,0,558,455],
[460,637,508,513,433,486,332,0,482],
[334,533,562,461,456,385,435,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,457,489,479,443,470,542,470],
[434,0,352,381,472,406,347,390,362],
[433,538,0,463,547,439,385,498,439],
[401,509,427,0,494,454,415,482,359],
[411,418,343,396,0,358,294,429,365],
[447,484,451,436,532,0,433,541,380],
[420,543,505,475,596,457,0,512,457],
[348,500,392,408,461,349,378,0,354],
[420,528,451,531,525,510,433,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,450,459,447,424,448,463,449],
[430,0,457,442,442,438,433,472,455],
[440,433,0,443,416,446,437,440,441],
[431,448,447,0,450,434,433,448,472],
[443,448,474,440,0,448,432,449,449],
[466,452,444,456,442,0,454,443,456],
[442,457,453,457,458,436,0,470,473],
[427,418,450,442,441,447,420,0,430],
[441,435,449,418,441,434,417,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,647,405,485,406,648,486,325],
[484,0,486,487,486,406,568,567,564],
[243,404,0,404,487,323,649,487,323],
[485,403,486,0,486,486,486,405,484],
[405,404,403,404,0,324,404,404,404],
[484,484,567,404,566,0,648,485,564],
[242,322,241,404,486,242,0,322,403],
[404,323,403,485,486,405,568,0,485],
[565,326,567,406,486,326,487,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,440,453,472,472,427,463,477],
[435,0,432,427,430,450,440,423,467],
[450,458,0,459,452,460,439,455,473],
[437,463,431,0,454,451,425,439,459],
[418,460,438,436,0,455,438,441,458],
[418,440,430,439,435,0,439,438,454],
[463,450,451,465,452,451,0,438,459],
[427,467,435,451,449,452,452,0,452],
[413,423,417,431,432,436,431,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,443,422,421,404,418,445,437],
[441,0,480,473,451,467,446,433,448],
[447,410,0,438,420,415,428,427,439],
[468,417,452,0,437,427,429,440,430],
[469,439,470,453,0,454,446,459,451],
[486,423,475,463,436,0,451,462,467],
[472,444,462,461,444,439,0,460,446],
[445,457,463,450,431,428,430,0,443],
[453,442,451,460,439,423,444,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,442,473,412,423,447,409,463],
[447,0,462,456,454,498,441,443,467],
[448,428,0,421,428,468,404,431,480],
[417,434,469,0,455,425,411,447,486],
[478,436,462,435,0,468,456,424,499],
[467,392,422,465,422,0,394,384,464],
[443,449,486,479,434,496,0,424,497],
[481,447,459,443,466,506,466,0,494],
[427,423,410,404,391,426,393,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,563,507,574,539,539,547,468],
[452,0,477,444,591,484,425,591,570],
[327,413,0,319,467,463,350,455,411],
[383,446,571,0,533,484,468,486,502],
[316,299,423,357,0,435,400,476,418],
[351,406,427,406,455,0,403,460,487],
[351,465,540,422,490,487,0,527,436],
[343,299,435,404,414,430,363,0,478],
[422,320,479,388,472,403,454,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,442,477,457,443,460,464,457],
[430,0,440,442,436,446,454,456,444],
[448,450,0,457,443,454,448,474,451],
[413,448,433,0,456,424,441,470,447],
[433,454,447,434,0,447,444,463,461],
[447,444,436,466,443,0,451,468,461],
[430,436,442,449,446,439,0,463,445],
[426,434,416,420,427,422,427,0,434],
[433,446,439,443,429,429,445,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,452,444,446,475,456,461,465],
[438,0,412,419,432,476,413,470,467],
[438,478,0,456,465,478,477,459,467],
[446,471,434,0,435,436,430,432,451],
[444,458,425,455,0,469,405,477,447],
[415,414,412,454,421,0,410,433,427],
[434,477,413,460,485,480,0,446,471],
[429,420,431,458,413,457,444,0,436],
[425,423,423,439,443,463,419,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,454,442,457,462,452,459,445],
[445,0,438,435,482,477,453,438,452],
[436,452,0,447,472,437,453,439,438],
[448,455,443,0,472,449,473,445,446],
[433,408,418,418,0,444,444,426,440],
[428,413,453,441,446,0,470,430,426],
[438,437,437,417,446,420,0,447,443],
[431,452,451,445,464,460,443,0,443],
[445,438,452,444,450,464,447,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,446,464,436,453,444,453,437],
[445,0,422,441,456,451,476,454,434],
[444,468,0,437,455,442,459,451,445],
[426,449,453,0,441,444,442,455,439],
[454,434,435,449,0,450,437,453,433],
[437,439,448,446,440,0,447,446,440],
[446,414,431,448,453,443,0,458,430],
[437,436,439,435,437,444,432,0,430],
[453,456,445,451,457,450,460,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,443,442,445,455,449,454,433],
[444,0,455,427,443,452,463,433,458],
[447,435,0,433,437,465,450,430,440],
[448,463,457,0,438,452,461,449,434],
[445,447,453,452,0,462,457,463,447],
[435,438,425,438,428,0,419,425,426],
[441,427,440,429,433,471,0,434,437],
[436,457,460,441,427,465,456,0,458],
[457,432,450,456,443,464,453,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,447,486,279,567,445,483,440],
[571,0,370,609,364,649,487,484,403],
[443,520,0,566,360,647,365,565,402],
[404,281,324,0,239,446,405,364,322],
[611,526,530,651,0,651,410,569,487],
[323,241,243,444,239,0,364,323,241],
[445,403,525,485,480,526,0,525,442],
[407,406,325,526,321,567,365,0,279],
[450,487,488,568,403,649,448,611,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,440,468,485,479,465,490,469],
[469,0,462,481,459,429,462,476,448],
[450,428,0,431,468,458,443,463,435],
[422,409,459,0,448,449,443,442,416],
[405,431,422,442,0,424,412,437,416],
[411,461,432,441,466,0,429,434,417],
[425,428,447,447,478,461,0,491,451],
[400,414,427,448,453,456,399,0,407],
[421,442,455,474,474,473,439,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,452,410,455,439,446,452,457],
[420,0,454,419,444,425,433,416,440],
[438,436,0,413,447,421,428,416,434],
[480,471,477,0,471,430,460,452,446],
[435,446,443,419,0,425,430,431,425],
[451,465,469,460,465,0,451,454,442],
[444,457,462,430,460,439,0,463,432],
[438,474,474,438,459,436,427,0,431],
[433,450,456,444,465,448,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,462,448,451,451,445,470],
[442,0,440,432,430,446,451,431,452],
[446,450,0,446,438,464,414,426,464],
[428,458,444,0,420,445,450,420,457],
[442,460,452,470,0,465,457,425,473],
[439,444,426,445,425,0,451,442,476],
[439,439,476,440,433,439,0,446,469],
[445,459,464,470,465,448,444,0,475],
[420,438,426,433,417,414,421,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,395,482,423,439,480,408,443],
[428,0,439,466,429,447,478,457,434],
[495,451,0,484,468,458,494,477,426],
[408,424,406,0,439,454,430,412,406],
[467,461,422,451,0,431,480,430,485],
[451,443,432,436,459,0,465,434,392],
[410,412,396,460,410,425,0,421,433],
[482,433,413,478,460,456,469,0,447],
[447,456,464,484,405,498,457,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,432,471,441,451,471,434],
[457,0,451,444,477,458,450,442,455],
[440,439,0,452,453,450,463,439,426],
[458,446,438,0,463,450,471,469,446],
[419,413,437,427,0,438,444,449,417],
[449,432,440,440,452,0,459,477,447],
[439,440,427,419,446,431,0,459,454],
[419,448,451,421,441,413,431,0,433],
[456,435,464,444,473,443,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,441,431,452,462,447,440,447],
[447,0,466,423,468,461,459,431,443],
[449,424,0,428,450,408,444,437,444],
[459,467,462,0,459,467,467,427,439],
[438,422,440,431,0,439,450,395,441],
[428,429,482,423,451,0,421,417,431],
[443,431,446,423,440,469,0,437,433],
[450,459,453,463,495,473,453,0,428],
[443,447,446,451,449,459,457,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,429,446,437,444,445,480,420],
[461,0,435,450,460,462,451,480,468],
[461,455,0,453,462,476,432,474,443],
[444,440,437,0,475,468,452,477,444],
[453,430,428,415,0,446,402,456,432],
[446,428,414,422,444,0,421,452,419],
[445,439,458,438,488,469,0,463,462],
[410,410,416,413,434,438,427,0,422],
[470,422,447,446,458,471,428,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,455,439,477,456,447,434,467],
[440,0,441,446,468,443,426,446,447],
[435,449,0,439,487,478,452,468,487],
[451,444,451,0,475,439,419,428,472],
[413,422,403,415,0,442,408,394,431],
[434,447,412,451,448,0,446,432,428],
[443,464,438,471,482,444,0,461,456],
[456,444,422,462,496,458,429,0,459],
[423,443,403,418,459,462,434,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,406,374,407,441,501,374,494],
[444,0,458,446,466,410,497,406,495],
[484,432,0,462,497,404,451,425,406],
[516,444,428,0,481,389,448,408,491],
[483,424,393,409,0,405,416,408,444],
[449,480,486,501,485,0,413,446,406],
[389,393,439,442,474,477,0,408,514],
[516,484,465,482,482,444,482,0,475],
[396,395,484,399,446,484,376,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,469,453,458,443,448,455,467],
[436,0,428,455,444,414,411,437,441],
[421,462,0,442,444,453,424,448,430],
[437,435,448,0,423,443,414,439,428],
[432,446,446,467,0,453,445,471,451],
[447,476,437,447,437,0,442,447,440],
[442,479,466,476,445,448,0,458,458],
[435,453,442,451,419,443,432,0,447],
[423,449,460,462,439,450,432,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,420,465,460,451,434,420,404],
[456,0,469,465,448,459,415,446,442],
[470,421,0,480,455,430,426,429,448],
[425,425,410,0,427,451,434,439,423],
[430,442,435,463,0,438,421,429,428],
[439,431,460,439,452,0,435,457,414],
[456,475,464,456,469,455,0,462,444],
[470,444,461,451,461,433,428,0,438],
[486,448,442,467,462,476,446,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,435,477,439,446,440,428,446],
[453,0,450,501,409,432,449,452,473],
[455,440,0,474,446,446,467,434,457],
[413,389,416,0,409,412,414,413,429],
[451,481,444,481,0,463,462,468,457],
[444,458,444,478,427,0,435,459,458],
[450,441,423,476,428,455,0,433,477],
[462,438,456,477,422,431,457,0,465],
[444,417,433,461,433,432,413,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,566,486,406,566,730,488,646,322],
[324,0,403,406,485,648,567,567,485],
[404,487,0,487,241,486,324,405,161],
[484,484,403,0,321,645,485,483,322],
[324,405,649,569,0,567,487,487,324],
[160,242,404,245,323,0,243,242,79],
[402,323,566,405,403,647,0,565,484],
[244,323,485,407,403,648,325,0,485],
[568,405,729,568,566,811,406,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,466,492,436,442,424,427,408],
[499,0,436,493,457,513,467,487,446],
[424,454,0,491,425,446,425,470,445],
[398,397,399,0,389,423,433,417,419],
[454,433,465,501,0,510,478,442,447],
[448,377,444,467,380,0,405,452,323],
[466,423,465,457,412,485,0,437,378],
[463,403,420,473,448,438,453,0,361],
[482,444,445,471,443,567,512,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,444,446,425,452,413,442],
[438,0,418,420,424,446,427,420,459],
[443,472,0,445,453,447,452,457,454],
[446,470,445,0,445,467,434,452,476],
[444,466,437,445,0,441,440,443,440],
[465,444,443,423,449,0,460,457,464],
[438,463,438,456,450,430,0,453,457],
[477,470,433,438,447,433,437,0,456],
[448,431,436,414,450,426,433,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,426,527,465,483,493,438,440],
[364,0,348,390,343,429,412,336,335],
[464,542,0,470,477,462,562,479,378],
[363,500,420,0,404,525,506,399,442],
[425,547,413,486,0,486,488,413,428],
[407,461,428,365,404,0,487,410,400],
[397,478,328,384,402,403,0,351,349],
[452,554,411,491,477,480,539,0,467],
[450,555,512,448,462,490,541,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,378,374,439,445,405,415,387],
[438,0,445,389,457,404,442,440,416],
[512,445,0,450,487,450,472,519,441],
[516,501,440,0,501,490,472,478,466],
[451,433,403,389,0,441,474,431,422],
[445,486,440,400,449,0,465,465,413],
[485,448,418,418,416,425,0,457,394],
[475,450,371,412,459,425,433,0,405],
[503,474,449,424,468,477,496,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,394,430,426,467,402,433,419],
[503,0,452,495,462,497,462,453,436],
[496,438,0,475,463,503,466,441,464],
[460,395,415,0,422,440,462,419,433],
[464,428,427,468,0,482,446,432,436],
[423,393,387,450,408,0,406,396,395],
[488,428,424,428,444,484,0,434,459],
[457,437,449,471,458,494,456,0,458],
[471,454,426,457,454,495,431,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,512,438,452,445,462,474,465],
[359,0,421,359,461,292,403,431,432],
[378,469,0,356,431,357,421,422,410],
[452,531,534,0,513,421,488,536,554],
[438,429,459,377,0,377,417,398,431],
[445,598,533,469,513,0,527,563,428],
[428,487,469,402,473,363,0,540,441],
[416,459,468,354,492,327,350,0,386],
[425,458,480,336,459,462,449,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,444,408,424,441,433,445,455],
[447,0,432,430,445,449,444,461,431],
[446,458,0,435,436,460,453,459,449],
[482,460,455,0,435,445,459,456,448],
[466,445,454,455,0,445,441,451,435],
[449,441,430,445,445,0,454,449,451],
[457,446,437,431,449,436,0,455,451],
[445,429,431,434,439,441,435,0,452],
[435,459,441,442,455,439,439,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,440,434,453,436,432,432,410],
[455,0,482,454,451,473,440,477,436],
[450,408,0,416,445,427,403,417,429],
[456,436,474,0,448,451,433,443,444],
[437,439,445,442,0,465,447,464,427],
[454,417,463,439,425,0,406,418,410],
[458,450,487,457,443,484,0,459,446],
[458,413,473,447,426,472,431,0,433],
[480,454,461,446,463,480,444,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,474,441,440,472,431,461,459],
[428,0,453,445,417,455,425,427,445],
[416,437,0,446,442,444,448,452,459],
[449,445,444,0,447,443,437,473,438],
[450,473,448,443,0,472,441,465,447],
[418,435,446,447,418,0,424,441,447],
[459,465,442,453,449,466,0,438,462],
[429,463,438,417,425,449,452,0,453],
[431,445,431,452,443,443,428,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,447,430,437,424,430,446,430],
[477,0,469,447,451,443,458,469,471],
[443,421,0,444,430,428,422,447,441],
[460,443,446,0,444,445,449,465,482],
[453,439,460,446,0,450,458,473,452],
[466,447,462,445,440,0,457,462,470],
[460,432,468,441,432,433,0,469,428],
[444,421,443,425,417,428,421,0,455],
[460,419,449,408,438,420,462,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,483,451,459,434,458,450,456],
[435,0,470,434,448,440,453,452,431],
[407,420,0,374,438,390,410,416,416],
[439,456,516,0,472,468,459,445,469],
[431,442,452,418,0,408,417,425,405],
[456,450,500,422,482,0,459,451,449],
[432,437,480,431,473,431,0,438,471],
[440,438,474,445,465,439,452,0,457],
[434,459,474,421,485,441,419,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,454,415,490,443,461,433,414],
[435,0,484,449,510,474,443,425,421],
[436,406,0,423,464,440,450,416,412],
[475,441,467,0,487,490,473,443,432],
[400,380,426,403,0,410,445,395,421],
[447,416,450,400,480,0,471,459,439],
[429,447,440,417,445,419,0,424,433],
[457,465,474,447,495,431,466,0,465],
[476,469,478,458,469,451,457,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,471,501,445,439,470,434,470],
[462,0,471,476,444,477,475,479,494],
[419,419,0,444,433,446,453,433,439],
[389,414,446,0,424,421,422,410,418],
[445,446,457,466,0,455,473,427,437],
[451,413,444,469,435,0,450,434,450],
[420,415,437,468,417,440,0,409,458],
[456,411,457,480,463,456,481,0,492],
[420,396,451,472,453,440,432,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,410,470,442,448,482,472,476],
[389,0,432,420,430,454,428,441,469],
[480,458,0,479,451,438,467,518,538],
[420,470,411,0,432,457,455,454,478],
[448,460,439,458,0,478,457,491,489],
[442,436,452,433,412,0,434,438,485],
[408,462,423,435,433,456,0,466,505],
[418,449,372,436,399,452,424,0,453],
[414,421,352,412,401,405,385,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,490,449,455,456,459,471,464],
[465,0,473,466,441,457,448,472,443],
[400,417,0,427,421,445,423,470,436],
[441,424,463,0,425,458,443,453,455],
[435,449,469,465,0,455,447,461,433],
[434,433,445,432,435,0,415,462,446],
[431,442,467,447,443,475,0,486,459],
[419,418,420,437,429,428,404,0,429],
[426,447,454,435,457,444,431,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,461,441,473,476,452,439,456],
[456,0,493,447,451,492,455,443,505],
[429,397,0,414,440,460,389,413,410],
[449,443,476,0,456,503,468,487,486],
[417,439,450,434,0,439,441,463,449],
[414,398,430,387,451,0,447,390,458],
[438,435,501,422,449,443,0,424,445],
[451,447,477,403,427,500,466,0,484],
[434,385,480,404,441,432,445,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,476,443,426,449,464,480,470],
[385,0,381,419,409,383,409,364,408],
[414,509,0,450,460,482,451,446,474],
[447,471,440,0,423,424,450,445,467],
[464,481,430,467,0,461,463,433,457],
[441,507,408,466,429,0,450,438,454],
[426,481,439,440,427,440,0,415,428],
[410,526,444,445,457,452,475,0,469],
[420,482,416,423,433,436,462,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,429,461,421,457,478,458,436],
[444,0,440,452,402,409,463,460,431],
[461,450,0,454,426,438,480,460,454],
[429,438,436,0,394,440,440,454,434],
[469,488,464,496,0,465,484,492,431],
[433,481,452,450,425,0,468,476,455],
[412,427,410,450,406,422,0,478,447],
[432,430,430,436,398,414,412,0,406],
[454,459,436,456,459,435,443,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,474,451,434,448,474,434],
[440,0,467,476,469,436,456,489,446],
[453,423,0,455,448,455,468,483,423],
[416,414,435,0,406,420,448,446,402],
[439,421,442,484,0,414,440,477,453],
[456,454,435,470,476,0,460,514,455],
[442,434,422,442,450,430,0,448,448],
[416,401,407,444,413,376,442,0,411],
[456,444,467,488,437,435,442,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,358,370,438,324,362,370,404],
[536,0,426,459,470,373,456,393,446],
[532,464,0,457,525,413,475,471,505],
[520,431,433,0,416,437,437,409,503],
[452,420,365,474,0,361,414,394,441],
[566,517,477,453,529,0,497,423,551],
[528,434,415,453,476,393,0,429,523],
[520,497,419,481,496,467,461,0,531],
[486,444,385,387,449,339,367,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,435,486,473,418,450,451,446],
[451,0,449,518,469,439,442,483,467],
[455,441,0,471,482,449,441,452,454],
[404,372,419,0,432,383,439,450,417],
[417,421,408,458,0,405,421,415,426],
[472,451,441,507,485,0,458,473,466],
[440,448,449,451,469,432,0,436,455],
[439,407,438,440,475,417,454,0,454],
[444,423,436,473,464,424,435,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,477,443,434,464,458,463,462],
[433,0,483,457,440,469,440,448,447],
[413,407,0,418,448,447,424,442,427],
[447,433,472,0,450,457,436,462,452],
[456,450,442,440,0,441,434,474,441],
[426,421,443,433,449,0,421,448,427],
[432,450,466,454,456,469,0,448,429],
[427,442,448,428,416,442,442,0,438],
[428,443,463,438,449,463,461,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,468,492,439,449,449,459,455],
[417,0,439,461,415,440,428,440,436],
[422,451,0,458,429,454,438,450,434],
[398,429,432,0,412,397,417,430,415],
[451,475,461,478,0,421,452,455,453],
[441,450,436,493,469,0,432,460,458],
[441,462,452,473,438,458,0,464,447],
[431,450,440,460,435,430,426,0,440],
[435,454,456,475,437,432,443,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,469,426,478,433,484,466,499],
[433,0,511,478,478,460,508,485,491],
[421,379,0,432,449,427,464,457,459],
[464,412,458,0,461,465,473,483,464],
[412,412,441,429,0,426,477,434,457],
[457,430,463,425,464,0,458,461,438],
[406,382,426,417,413,432,0,426,423],
[424,405,433,407,456,429,464,0,458],
[391,399,431,426,433,452,467,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,416,422,452,397,405,436,431],
[450,0,454,432,455,425,438,467,459],
[474,436,0,455,473,433,450,474,446],
[468,458,435,0,487,413,436,476,463],
[438,435,417,403,0,424,414,424,430],
[493,465,457,477,466,0,443,474,456],
[485,452,440,454,476,447,0,456,456],
[454,423,416,414,466,416,434,0,433],
[459,431,444,427,460,434,434,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,483,515,481,395,484,464,487],
[390,0,435,477,466,447,465,461,418],
[407,455,0,426,510,475,447,438,501],
[375,413,464,0,380,342,417,426,385],
[409,424,380,510,0,423,465,524,433],
[495,443,415,548,467,0,431,428,553],
[406,425,443,473,425,459,0,389,534],
[426,429,452,464,366,462,501,0,468],
[403,472,389,505,457,337,356,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,452,466,469,455,448,454,457],
[455,0,430,474,466,438,462,463,430],
[438,460,0,476,465,442,461,465,467],
[424,416,414,0,440,428,458,445,409],
[421,424,425,450,0,442,458,449,445],
[435,452,448,462,448,0,451,452,442],
[442,428,429,432,432,439,0,432,424],
[436,427,425,445,441,438,458,0,428],
[433,460,423,481,445,448,466,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,429,490,459,458,438,437,462],
[415,0,434,466,451,438,446,430,416],
[461,456,0,452,471,444,455,424,432],
[400,424,438,0,454,430,449,461,436],
[431,439,419,436,0,428,430,441,424],
[432,452,446,460,462,0,448,431,425],
[452,444,435,441,460,442,0,437,439],
[453,460,466,429,449,459,453,0,459],
[428,474,458,454,466,465,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,404,426,456,403,434,421,430],
[459,0,421,469,450,430,467,440,444],
[486,469,0,415,454,436,469,459,444],
[464,421,475,0,443,421,456,443,443],
[434,440,436,447,0,441,466,463,455],
[487,460,454,469,449,0,437,438,440],
[456,423,421,434,424,453,0,429,420],
[469,450,431,447,427,452,461,0,423],
[460,446,446,447,435,450,470,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,494,463,496,494,494,528,397],
[459,0,360,461,490,528,427,430,399],
[396,530,0,497,493,528,491,395,431],
[427,429,393,0,461,528,427,397,400],
[394,400,397,429,0,494,429,331,399],
[396,362,362,362,396,0,459,364,366],
[396,463,399,463,461,431,0,426,331],
[362,460,495,493,559,526,464,0,461],
[493,491,459,490,491,524,559,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,410,422,420,433,410,404,439],
[471,0,447,459,450,449,440,453,473],
[480,443,0,439,447,461,453,439,433],
[468,431,451,0,427,471,448,440,486],
[470,440,443,463,0,452,458,442,472],
[457,441,429,419,438,0,426,414,470],
[480,450,437,442,432,464,0,454,452],
[486,437,451,450,448,476,436,0,447],
[451,417,457,404,418,420,438,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,430,432,430,442,473,433,465],
[427,0,426,421,424,461,456,402,471],
[460,464,0,430,440,477,455,435,485],
[458,469,460,0,432,467,455,441,491],
[460,466,450,458,0,485,478,445,490],
[448,429,413,423,405,0,458,441,441],
[417,434,435,435,412,432,0,420,458],
[457,488,455,449,445,449,470,0,488],
[425,419,405,399,400,449,432,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,389,435,391,454,458,391,393],
[517,0,478,475,414,498,350,410,480],
[501,412,0,500,458,434,481,414,540],
[455,415,390,0,456,452,351,325,415],
[499,476,432,434,0,431,452,410,409],
[436,392,456,438,459,0,420,390,480],
[432,540,409,539,438,470,0,519,518],
[499,480,476,565,480,500,371,0,500],
[497,410,350,475,481,410,372,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,441,417,431,420,450,436,431],
[434,0,418,430,454,442,455,446,446],
[449,472,0,425,422,439,445,433,437],
[473,460,465,0,467,462,456,445,454],
[459,436,468,423,0,424,456,457,422],
[470,448,451,428,466,0,464,453,450],
[440,435,445,434,434,426,0,429,428],
[454,444,457,445,433,437,461,0,437],
[459,444,453,436,468,440,462,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,438,454,452,482,460,442,478],
[420,0,434,441,431,453,468,422,436],
[452,456,0,461,443,450,458,462,451],
[436,449,429,0,397,467,466,420,456],
[438,459,447,493,0,455,458,468,455],
[408,437,440,423,435,0,445,431,422],
[430,422,432,424,432,445,0,430,434],
[448,468,428,470,422,459,460,0,442],
[412,454,439,434,435,468,456,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,456,452,429,432,445,467,409],
[441,0,433,498,441,454,441,476,430],
[434,457,0,462,454,449,446,455,480],
[438,392,428,0,426,420,442,474,430],
[461,449,436,464,0,462,440,477,436],
[458,436,441,470,428,0,452,476,438],
[445,449,444,448,450,438,0,485,455],
[423,414,435,416,413,414,405,0,385],
[481,460,410,460,454,452,435,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,465,430,445,401,515,448,394],
[374,0,494,412,473,410,492,460,389],
[425,396,0,448,379,345,513,397,345],
[460,478,442,0,460,465,596,429,532],
[445,417,511,430,0,345,446,449,481],
[489,480,545,425,545,0,543,513,462],
[375,398,377,294,444,347,0,344,347],
[442,430,493,461,441,377,546,0,444],
[496,501,545,358,409,428,543,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,456,452,448,444,421,467,421],
[424,0,437,397,462,416,402,434,434],
[434,453,0,421,446,445,412,494,443],
[438,493,469,0,459,476,457,469,445],
[442,428,444,431,0,405,419,457,425],
[446,474,445,414,485,0,448,469,444],
[469,488,478,433,471,442,0,458,439],
[423,456,396,421,433,421,432,0,445],
[469,456,447,445,465,446,451,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,429,452,451,431,440,447,453],
[446,0,448,457,451,455,443,452,462],
[461,442,0,444,435,447,447,460,439],
[438,433,446,0,418,429,432,444,425],
[439,439,455,472,0,452,458,457,459],
[459,435,443,461,438,0,442,444,440],
[450,447,443,458,432,448,0,448,443],
[443,438,430,446,433,446,442,0,434],
[437,428,451,465,431,450,447,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,451,479,497,441,450,438,469],
[424,0,409,452,478,414,441,410,484],
[439,481,0,473,494,454,451,437,469],
[411,438,417,0,474,416,433,410,448],
[393,412,396,416,0,392,385,366,402],
[449,476,436,474,498,0,479,450,496],
[440,449,439,457,505,411,0,443,460],
[452,480,453,480,524,440,447,0,488],
[421,406,421,442,488,394,430,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,458,464,433,466,481,477,451],
[395,0,398,417,403,386,403,411,398],
[432,492,0,440,423,430,431,437,448],
[426,473,450,0,435,414,452,447,456],
[457,487,467,455,0,437,482,456,422],
[424,504,460,476,453,0,471,430,454],
[409,487,459,438,408,419,0,431,436],
[413,479,453,443,434,460,459,0,426],
[439,492,442,434,468,436,454,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,426,445,444,461,443,467,458],
[439,0,417,448,460,463,438,448,449],
[464,473,0,444,452,479,448,469,460],
[445,442,446,0,443,450,438,437,428],
[446,430,438,447,0,452,420,452,421],
[429,427,411,440,438,0,420,447,437],
[447,452,442,452,470,470,0,456,466],
[423,442,421,453,438,443,434,0,446],
[432,441,430,462,469,453,424,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,470,494,490,441,501,505,504],
[407,0,455,488,459,466,461,444,459],
[420,435,0,460,394,433,451,397,453],
[396,402,430,0,412,413,433,458,451],
[400,431,496,478,0,476,429,441,450],
[449,424,457,477,414,0,453,449,474],
[389,429,439,457,461,437,0,430,435],
[385,446,493,432,449,441,460,0,444],
[386,431,437,439,440,416,455,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,452,445,450,459,454,474,486],
[438,0,451,446,466,499,462,467,500],
[438,439,0,462,449,444,439,493,495],
[445,444,428,0,432,427,444,483,457],
[440,424,441,458,0,446,482,463,493],
[431,391,446,463,444,0,443,461,473],
[436,428,451,446,408,447,0,497,472],
[416,423,397,407,427,429,393,0,456],
[404,390,395,433,397,417,418,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,429,404,428,443,451,471,449],
[501,0,435,424,450,474,459,433,461],
[461,455,0,470,460,461,458,470,436],
[486,466,420,0,457,476,468,496,449],
[462,440,430,433,0,436,444,449,442],
[447,416,429,414,454,0,449,451,423],
[439,431,432,422,446,441,0,446,422],
[419,457,420,394,441,439,444,0,433],
[441,429,454,441,448,467,468,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,439,402,457,443,484,469,474],
[424,0,434,426,453,420,481,472,430],
[451,456,0,475,462,428,473,440,480],
[488,464,415,0,439,460,481,469,457],
[433,437,428,451,0,408,458,445,451],
[447,470,462,430,482,0,490,458,472],
[406,409,417,409,432,400,0,454,445],
[421,418,450,421,445,432,436,0,471],
[416,460,410,433,439,418,445,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,430,430,451,453,459,423,445],
[441,0,430,452,431,445,433,437,436],
[460,460,0,459,455,456,439,449,463],
[460,438,431,0,446,438,426,431,434],
[439,459,435,444,0,448,440,431,441],
[437,445,434,452,442,0,456,447,447],
[431,457,451,464,450,434,0,425,450],
[467,453,441,459,459,443,465,0,462],
[445,454,427,456,449,443,440,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,456,419,441,444,453,429,436],
[432,0,426,441,455,431,453,443,452],
[434,464,0,436,457,449,461,446,473],
[471,449,454,0,417,460,488,445,465],
[449,435,433,473,0,462,423,438,434],
[446,459,441,430,428,0,453,428,456],
[437,437,429,402,467,437,0,431,451],
[461,447,444,445,452,462,459,0,472],
[454,438,417,425,456,434,439,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,416,455,447,482,420,472,434],
[444,0,453,438,466,470,453,442,454],
[474,437,0,463,436,455,426,460,447],
[435,452,427,0,413,468,417,455,454],
[443,424,454,477,0,495,441,458,457],
[408,420,435,422,395,0,424,440,418],
[470,437,464,473,449,466,0,472,437],
[418,448,430,435,432,450,418,0,406],
[456,436,443,436,433,472,453,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,463,459,440,444,437,451,440],
[433,0,453,441,410,438,441,445,462],
[427,437,0,385,424,452,438,469,419],
[431,449,505,0,431,453,461,456,485],
[450,480,466,459,0,483,445,485,486],
[446,452,438,437,407,0,459,439,409],
[453,449,452,429,445,431,0,438,421],
[439,445,421,434,405,451,452,0,453],
[450,428,471,405,404,481,469,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,519,480,473,498,494,461,480],
[459,0,514,484,447,463,459,438,468],
[371,376,0,435,391,457,437,398,443],
[410,406,455,0,403,415,427,415,441],
[417,443,499,487,0,478,487,438,472],
[392,427,433,475,412,0,469,435,456],
[396,431,453,463,403,421,0,421,445],
[429,452,492,475,452,455,469,0,482],
[410,422,447,449,418,434,445,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,454,440,449,469,460,419,452],
[422,0,432,424,429,444,430,435,463],
[436,458,0,445,442,455,449,436,455],
[450,466,445,0,461,476,449,435,449],
[441,461,448,429,0,470,454,428,465],
[421,446,435,414,420,0,427,424,437],
[430,460,441,441,436,463,0,423,449],
[471,455,454,455,462,466,467,0,442],
[438,427,435,441,425,453,441,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,466,467,444,464,456,391,413],
[429,0,472,476,457,455,417,427,388],
[424,418,0,432,407,438,375,422,432],
[423,414,458,0,443,446,397,426,404],
[446,433,483,447,0,465,442,409,418],
[426,435,452,444,425,0,435,404,391],
[434,473,515,493,448,455,0,445,449],
[499,463,468,464,481,486,445,0,446],
[477,502,458,486,472,499,441,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,421,437,460,426,455,433,416],
[428,0,422,456,438,471,437,460,453],
[469,468,0,414,441,477,419,425,449],
[453,434,476,0,479,489,464,390,460],
[430,452,449,411,0,453,414,444,475],
[464,419,413,401,437,0,373,413,440],
[435,453,471,426,476,517,0,456,429],
[457,430,465,500,446,477,434,0,499],
[474,437,441,430,415,450,461,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,483,472,434,465,424,462,437],
[450,0,455,477,456,466,449,483,439],
[407,435,0,431,421,444,406,454,438],
[418,413,459,0,422,437,429,446,409],
[456,434,469,468,0,452,431,466,462],
[425,424,446,453,438,0,441,469,464],
[466,441,484,461,459,449,0,458,470],
[428,407,436,444,424,421,432,0,422],
[453,451,452,481,428,426,420,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,462,472,416,450,399,425,445],
[461,0,440,436,412,480,422,433,422],
[428,450,0,438,402,407,449,407,416],
[418,454,452,0,417,441,426,410,431],
[474,478,488,473,0,465,443,421,440],
[440,410,483,449,425,0,435,442,441],
[491,468,441,464,447,455,0,469,465],
[465,457,483,480,469,448,421,0,455],
[445,468,474,459,450,449,425,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,452,455,428,432,453,453,444],
[411,0,430,406,401,407,428,423,420],
[438,460,0,441,455,449,440,459,453],
[435,484,449,0,435,459,471,445,433],
[462,489,435,455,0,457,459,458,472],
[458,483,441,431,433,0,450,443,448],
[437,462,450,419,431,440,0,437,441],
[437,467,431,445,432,447,453,0,450],
[446,470,437,457,418,442,449,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,474,479,456,482,467,451],
[440,0,442,461,457,438,464,450,436],
[453,448,0,471,467,439,467,468,461],
[416,429,419,0,446,419,457,436,422],
[411,433,423,444,0,408,424,438,422],
[434,452,451,471,482,0,479,456,455],
[408,426,423,433,466,411,0,429,451],
[423,440,422,454,452,434,461,0,423],
[439,454,429,468,468,435,439,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,418,422,449,441,437,469,436],
[450,0,452,476,434,469,428,484,457],
[472,438,0,486,450,476,450,445,460],
[468,414,404,0,428,449,427,450,452],
[441,456,440,462,0,458,424,472,454],
[449,421,414,441,432,0,419,455,435],
[453,462,440,463,466,471,0,488,458],
[421,406,445,440,418,435,402,0,430],
[454,433,430,438,436,455,432,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,345,378,479,448,478,414,379],
[445,0,340,449,480,483,480,447,412],
[545,550,0,515,545,445,512,413,444],
[512,441,375,0,475,443,576,446,476],
[411,410,345,415,0,379,411,413,343],
[442,407,445,447,511,0,510,478,410],
[412,410,378,314,479,380,0,413,413],
[476,443,477,444,477,412,477,0,444],
[511,478,446,414,547,480,477,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,407,450,456,459,404,445,419],
[474,0,444,501,477,464,426,455,492],
[483,446,0,458,457,447,431,454,458],
[440,389,432,0,438,458,401,426,438],
[434,413,433,452,0,441,404,445,444],
[431,426,443,432,449,0,429,447,427],
[486,464,459,489,486,461,0,469,435],
[445,435,436,464,445,443,421,0,461],
[471,398,432,452,446,463,455,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,435,400,419,427,414,440,438],
[483,0,453,449,472,430,444,471,459],
[455,437,0,454,449,470,470,467,442],
[490,441,436,0,441,453,422,433,429],
[471,418,441,449,0,442,461,438,445],
[463,460,420,437,448,0,428,460,457],
[476,446,420,468,429,462,0,438,470],
[450,419,423,457,452,430,452,0,454],
[452,431,448,461,445,433,420,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,428,441,419,439,448,448,434],
[467,0,479,444,455,451,474,476,473],
[462,411,0,425,445,446,478,452,424],
[449,446,465,0,461,434,474,451,447],
[471,435,445,429,0,478,453,470,456],
[451,439,444,456,412,0,462,450,433],
[442,416,412,416,437,428,0,445,429],
[442,414,438,439,420,440,445,0,448],
[456,417,466,443,434,457,461,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,434,444,406,405,444,436,476],
[443,0,475,476,429,465,469,458,464],
[456,415,0,446,443,420,459,428,459],
[446,414,444,0,417,410,402,446,449],
[484,461,447,473,0,445,469,468,469],
[485,425,470,480,445,0,467,429,465],
[446,421,431,488,421,423,0,414,467],
[454,432,462,444,422,461,476,0,459],
[414,426,431,441,421,425,423,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,446,483,460,419,470,458,495],
[418,0,452,443,448,419,438,416,462],
[444,438,0,459,448,414,447,433,434],
[407,447,431,0,397,445,436,450,440],
[430,442,442,493,0,396,419,414,439],
[471,471,476,445,494,0,458,445,459],
[420,452,443,454,471,432,0,427,422],
[432,474,457,440,476,445,463,0,415],
[395,428,456,450,451,431,468,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,432,415,433,413,442,438,458],
[457,0,450,439,419,439,454,454,464],
[458,440,0,442,429,439,450,455,455],
[475,451,448,0,438,461,431,472,467],
[457,471,461,452,0,451,446,461,442],
[477,451,451,429,439,0,466,448,454],
[448,436,440,459,444,424,0,457,447],
[452,436,435,418,429,442,433,0,463],
[432,426,435,423,448,436,443,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,434,463,463,452,439,443,429],
[447,0,492,463,455,452,444,466,424],
[456,398,0,439,435,419,406,440,370],
[427,427,451,0,437,452,416,413,432],
[427,435,455,453,0,467,456,435,460],
[438,438,471,438,423,0,444,421,428],
[451,446,484,474,434,446,0,447,441],
[447,424,450,477,455,469,443,0,433],
[461,466,520,458,430,462,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,494,437,462,479,462,498,450],
[408,0,454,387,393,423,439,448,411],
[396,436,0,399,430,422,448,466,415],
[453,503,491,0,470,487,470,501,440],
[428,497,460,420,0,417,456,479,440],
[411,467,468,403,473,0,431,463,411],
[428,451,442,420,434,459,0,449,432],
[392,442,424,389,411,427,441,0,409],
[440,479,475,450,450,479,458,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,437,449,470,435,425,451,418],
[459,0,441,462,478,459,467,473,460],
[453,449,0,465,471,454,439,479,460],
[441,428,425,0,436,429,441,446,434],
[420,412,419,454,0,427,426,455,440],
[455,431,436,461,463,0,418,449,452],
[465,423,451,449,464,472,0,459,437],
[439,417,411,444,435,441,431,0,417],
[472,430,430,456,450,438,453,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,444,433,445,439,463,437,468],
[472,0,477,475,437,496,465,436,491],
[446,413,0,438,421,435,437,459,445],
[457,415,452,0,431,428,436,440,430],
[445,453,469,459,0,443,479,453,478],
[451,394,455,462,447,0,502,440,479],
[427,425,453,454,411,388,0,413,439],
[453,454,431,450,437,450,477,0,452],
[422,399,445,460,412,411,451,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,396,471,428,479,486,431,426],
[456,0,441,477,458,510,476,470,471],
[494,449,0,484,431,503,499,430,436],
[419,413,406,0,451,476,451,385,418],
[462,432,459,439,0,472,479,439,466],
[411,380,387,414,418,0,463,369,408],
[404,414,391,439,411,427,0,396,409],
[459,420,460,505,451,521,494,0,460],
[464,419,454,472,424,482,481,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,472,445,452,472,481,475,461],
[407,0,423,446,426,446,450,434,461],
[418,467,0,450,459,453,459,477,448],
[445,444,440,0,450,455,458,440,457],
[438,464,431,440,0,456,475,471,419],
[418,444,437,435,434,0,450,450,451],
[409,440,431,432,415,440,0,436,423],
[415,456,413,450,419,440,454,0,424],
[429,429,442,433,471,439,467,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,446,434,448,473,447,439,433],
[429,0,442,428,456,446,429,459,428],
[444,448,0,436,430,439,414,437,411],
[456,462,454,0,458,453,407,453,466],
[442,434,460,432,0,451,436,463,416],
[417,444,451,437,439,0,422,424,415],
[443,461,476,483,454,468,0,475,453],
[451,431,453,437,427,466,415,0,434],
[457,462,479,424,474,475,437,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,425,422,445,444,446,425,428],
[464,0,440,433,419,438,444,473,450],
[465,450,0,429,452,470,441,466,446],
[468,457,461,0,444,465,460,463,455],
[445,471,438,446,0,451,445,449,443],
[446,452,420,425,439,0,450,431,443],
[444,446,449,430,445,440,0,440,448],
[465,417,424,427,441,459,450,0,448],
[462,440,444,435,447,447,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,469,442,454,461,434,446,439],
[464,0,457,481,442,485,462,436,453],
[421,433,0,480,413,448,434,429,429],
[448,409,410,0,406,447,395,418,407],
[436,448,477,484,0,476,420,464,450],
[429,405,442,443,414,0,400,439,429],
[456,428,456,495,470,490,0,474,457],
[444,454,461,472,426,451,416,0,419],
[451,437,461,483,440,461,433,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,430,465,420,437,442,469,404],
[457,0,437,463,429,445,451,441,425],
[460,453,0,472,443,465,446,450,445],
[425,427,418,0,412,435,435,430,390],
[470,461,447,478,0,465,444,467,424],
[453,445,425,455,425,0,455,449,413],
[448,439,444,455,446,435,0,445,416],
[421,449,440,460,423,441,445,0,419],
[486,465,445,500,466,477,474,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,442,422,464,460,461,434,468],
[443,0,447,456,454,442,436,453,433],
[448,443,0,433,498,445,441,439,443],
[468,434,457,0,468,474,496,457,454],
[426,436,392,422,0,432,410,432,394],
[430,448,445,416,458,0,442,442,439],
[429,454,449,394,480,448,0,432,428],
[456,437,451,433,458,448,458,0,430],
[422,457,447,436,496,451,462,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,421,442,429,409,421,399,427],
[460,0,462,439,430,446,423,442,422],
[469,428,0,465,437,432,437,432,430],
[448,451,425,0,427,437,419,468,425],
[461,460,453,463,0,446,427,463,428],
[481,444,458,453,444,0,436,438,446],
[469,467,453,471,463,454,0,465,440],
[491,448,458,422,427,452,425,0,451],
[463,468,460,465,462,444,450,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,467,432,502,416,410,462,409],
[449,0,469,454,459,431,412,499,448],
[423,421,0,430,489,405,419,449,396],
[458,436,460,0,501,431,398,464,429],
[388,431,401,389,0,402,374,430,384],
[474,459,485,459,488,0,425,498,430],
[480,478,471,492,516,465,0,530,424],
[428,391,441,426,460,392,360,0,408],
[481,442,494,461,506,460,466,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,473,462,427,426,461,443,471],
[435,0,461,421,436,422,465,455,443],
[417,429,0,450,423,416,448,404,460],
[428,469,440,0,437,452,463,424,468],
[463,454,467,453,0,443,449,444,464],
[464,468,474,438,447,0,460,442,470],
[429,425,442,427,441,430,0,426,445],
[447,435,486,466,446,448,464,0,467],
[419,447,430,422,426,420,445,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,438,445,464,462,436,457,453],
[405,0,421,423,448,436,426,431,432],
[452,469,0,440,459,458,452,433,454],
[445,467,450,0,449,445,454,450,464],
[426,442,431,441,0,458,447,451,467],
[428,454,432,445,432,0,432,454,459],
[454,464,438,436,443,458,0,458,469],
[433,459,457,440,439,436,432,0,449],
[437,458,436,426,423,431,421,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,433,498,457,464,435,456,374],
[445,0,476,473,466,456,468,439,419],
[457,414,0,455,457,444,419,467,472],
[392,417,435,0,453,461,427,436,377],
[433,424,433,437,0,445,429,406,389],
[426,434,446,429,445,0,387,424,393],
[455,422,471,463,461,503,0,459,412],
[434,451,423,454,484,466,431,0,444],
[516,471,418,513,501,497,478,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,453,434,443,429,427,444,393],
[460,0,449,420,460,442,449,478,446],
[437,441,0,430,447,436,415,476,423],
[456,470,460,0,458,426,432,464,413],
[447,430,443,432,0,423,407,461,419],
[461,448,454,464,467,0,460,479,442],
[463,441,475,458,483,430,0,472,440],
[446,412,414,426,429,411,418,0,400],
[497,444,467,477,471,448,450,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,408,429,451,460,450,451,438],
[436,0,427,442,436,468,462,463,447],
[482,463,0,440,449,461,439,500,453],
[461,448,450,0,443,477,453,475,459],
[439,454,441,447,0,456,442,460,455],
[430,422,429,413,434,0,431,464,428],
[440,428,451,437,448,459,0,453,448],
[439,427,390,415,430,426,437,0,431],
[452,443,437,431,435,462,442,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,408,453,453,445,419,418,445],
[469,0,433,464,485,466,443,462,446],
[482,457,0,483,488,482,451,445,452],
[437,426,407,0,444,473,430,456,430],
[437,405,402,446,0,443,445,423,427],
[445,424,408,417,447,0,445,404,413],
[471,447,439,460,445,445,0,457,441],
[472,428,445,434,467,486,433,0,437],
[445,444,438,460,463,477,449,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,405,420,448,427,421,425,433],
[459,0,422,461,473,455,449,458,452],
[485,468,0,468,458,457,439,487,460],
[470,429,422,0,459,427,427,478,437],
[442,417,432,431,0,419,402,450,430],
[463,435,433,463,471,0,425,478,458],
[469,441,451,463,488,465,0,500,451],
[465,432,403,412,440,412,390,0,426],
[457,438,430,453,460,432,439,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,432,497,495,485,465,458,472],
[423,0,418,480,470,464,435,434,423],
[458,472,0,500,466,464,460,446,444],
[393,410,390,0,423,406,422,392,417],
[395,420,424,467,0,429,464,442,435],
[405,426,426,484,461,0,436,430,414],
[425,455,430,468,426,454,0,436,422],
[432,456,444,498,448,460,454,0,459],
[418,467,446,473,455,476,468,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,465,489,483,445,495,497,512],
[454,0,469,449,487,434,501,501,499],
[425,421,0,459,462,434,472,487,494],
[401,441,431,0,483,463,466,465,500],
[407,403,428,407,0,403,456,456,464],
[445,456,456,427,487,0,495,469,501],
[395,389,418,424,434,395,0,457,468],
[393,389,403,425,434,421,433,0,455],
[378,391,396,390,426,389,422,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,325,371,422,354,569,325,405],
[442,0,362,376,432,400,476,313,425],
[565,528,0,434,549,499,569,466,550],
[519,514,456,0,538,437,551,420,548],
[468,458,341,352,0,436,503,372,482],
[536,490,391,453,454,0,634,387,533],
[321,414,321,339,387,256,0,321,467],
[565,577,424,470,518,503,569,0,645],
[485,465,340,342,408,357,423,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,447,419,482,457,472,440,444],
[439,0,441,437,438,462,416,427,436],
[443,449,0,426,457,444,423,417,428],
[471,453,464,0,464,435,464,450,452],
[408,452,433,426,0,427,437,443,427],
[433,428,446,455,463,0,422,429,463],
[418,474,467,426,453,468,0,463,447],
[450,463,473,440,447,461,427,0,439],
[446,454,462,438,463,427,443,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,443,463,454,484,465,465,440],
[456,0,448,422,478,488,441,432,407],
[447,442,0,464,439,456,422,444,447],
[427,468,426,0,427,505,445,433,464],
[436,412,451,463,0,477,431,423,417],
[406,402,434,385,413,0,378,427,408],
[425,449,468,445,459,512,0,472,503],
[425,458,446,457,467,463,418,0,411],
[450,483,443,426,473,482,387,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,468,459,446,437,435,451,442],
[466,0,482,491,449,478,440,437,431],
[422,408,0,469,439,428,434,417,459],
[431,399,421,0,397,425,432,425,427],
[444,441,451,493,0,481,456,440,450],
[453,412,462,465,409,0,428,450,432],
[455,450,456,458,434,462,0,476,450],
[439,453,473,465,450,440,414,0,458],
[448,459,431,463,440,458,440,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,422,419,437,453,434,460,444],
[452,0,436,431,434,418,437,434,426],
[468,454,0,459,459,441,448,445,436],
[471,459,431,0,468,452,465,451,437],
[453,456,431,422,0,459,449,456,475],
[437,472,449,438,431,0,458,448,450],
[456,453,442,425,441,432,0,431,436],
[430,456,445,439,434,442,459,0,426],
[446,464,454,453,415,440,454,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,446,415,426,429,497,437,480],
[395,0,419,428,414,443,458,415,408],
[444,471,0,411,498,447,519,474,462],
[475,462,479,0,469,491,462,438,474],
[464,476,392,421,0,459,462,459,487],
[461,447,443,399,431,0,476,430,430],
[393,432,371,428,428,414,0,404,376],
[453,475,416,452,431,460,486,0,455],
[410,482,428,416,403,460,514,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,450,435,450,430,429,452,434],
[432,0,413,399,419,407,411,414,397],
[440,477,0,418,437,416,410,428,439],
[455,491,472,0,482,449,437,472,449],
[440,471,453,408,0,423,459,419,435],
[460,483,474,441,467,0,464,443,441],
[461,479,480,453,431,426,0,451,446],
[438,476,462,418,471,447,439,0,438],
[456,493,451,441,455,449,444,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,469,475,434,445,468,458,456],
[447,0,456,467,441,470,458,453,464],
[421,434,0,460,445,442,473,459,447],
[415,423,430,0,411,420,428,438,429],
[456,449,445,479,0,454,449,472,449],
[445,420,448,470,436,0,442,467,465],
[422,432,417,462,441,448,0,455,438],
[432,437,431,452,418,423,435,0,445],
[434,426,443,461,441,425,452,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,466,385,421,394,377,416,353],
[506,0,517,469,432,417,458,489,441],
[424,373,0,414,375,390,413,426,324],
[505,421,476,0,484,490,426,465,457],
[469,458,515,406,0,502,518,468,417],
[496,473,500,400,388,0,462,436,425],
[513,432,477,464,372,428,0,414,427],
[474,401,464,425,422,454,476,0,413],
[537,449,566,433,473,465,463,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,464,466,484,484,440,455,489],
[418,0,454,452,465,455,443,433,473],
[426,436,0,448,475,443,444,445,458],
[424,438,442,0,457,439,450,428,456],
[406,425,415,433,0,437,450,427,454],
[406,435,447,451,453,0,457,449,450],
[450,447,446,440,440,433,0,413,456],
[435,457,445,462,463,441,477,0,504],
[401,417,432,434,436,440,434,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,463,449,422,437,444,407,423],
[461,0,448,441,419,441,456,427,445],
[427,442,0,433,433,423,427,410,414],
[441,449,457,0,432,447,444,424,420],
[468,471,457,458,0,454,431,432,429],
[453,449,467,443,436,0,445,435,447],
[446,434,463,446,459,445,0,453,424],
[483,463,480,466,458,455,437,0,448],
[467,445,476,470,461,443,466,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,331,469,421,325,420,419,420],
[425,0,379,424,422,278,376,236,284],
[559,511,0,421,373,514,466,420,465],
[421,466,469,0,467,374,469,561,421],
[469,468,517,423,0,376,423,427,375],
[565,612,376,516,514,0,513,516,421],
[470,514,424,421,467,377,0,423,372],
[471,654,470,329,463,374,467,0,465],
[470,606,425,469,515,469,518,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,439,435,457,548,470,465,422],
[356,0,408,351,421,405,432,410,416],
[451,482,0,441,454,445,489,476,434],
[455,539,449,0,470,462,438,423,483],
[433,469,436,420,0,459,460,433,459],
[342,485,445,428,431,0,471,411,461],
[420,458,401,452,430,419,0,459,416],
[425,480,414,467,457,479,431,0,446],
[468,474,456,407,431,429,474,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,436,439,404,469,438,463,453],
[351,0,397,378,389,436,408,333,439],
[454,493,0,461,492,513,428,450,505],
[451,512,429,0,569,481,473,395,498],
[486,501,398,321,0,414,426,435,452],
[421,454,377,409,476,0,456,447,466],
[452,482,462,417,464,434,0,444,465],
[427,557,440,495,455,443,446,0,471],
[437,451,385,392,438,424,425,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,352,315,390,384,388,233,231],
[658,0,388,467,505,500,504,347,500],
[538,502,0,584,542,347,581,387,540],
[575,423,306,0,428,460,499,421,458],
[500,385,348,462,0,459,462,348,385],
[506,390,543,430,431,0,621,392,583],
[502,386,309,391,428,269,0,271,385],
[657,543,503,469,542,498,619,0,386],
[659,390,350,432,505,307,505,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,466,452,473,457,472,457,406],
[414,0,460,446,449,447,447,452,443],
[424,430,0,427,446,443,461,443,426],
[438,444,463,0,445,447,451,436,463],
[417,441,444,445,0,472,481,448,423],
[433,443,447,443,418,0,473,402,415],
[418,443,429,439,409,417,0,414,441],
[433,438,447,454,442,488,476,0,407],
[484,447,464,427,467,475,449,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,404,415,434,417,404,430,427],
[447,0,429,402,454,415,449,419,445],
[486,461,0,445,453,417,432,454,457],
[475,488,445,0,478,453,464,444,467],
[456,436,437,412,0,408,426,436,432],
[473,475,473,437,482,0,484,492,478],
[486,441,458,426,464,406,0,422,452],
[460,471,436,446,454,398,468,0,430],
[463,445,433,423,458,412,438,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,417,437,400,394,462,446,402],
[426,0,450,414,462,387,440,386,371],
[473,440,0,474,477,417,407,368,356],
[453,476,416,0,437,427,348,376,368],
[490,428,413,453,0,415,394,407,361],
[496,503,473,463,475,0,439,403,455],
[428,450,483,542,496,451,0,477,418],
[444,504,522,514,483,487,413,0,448],
[488,519,534,522,529,435,472,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,441,433,425,416,427,410,437],
[452,0,447,449,423,432,445,433,460],
[449,443,0,454,418,414,433,444,428],
[457,441,436,0,425,421,436,442,435],
[465,467,472,465,0,426,431,436,456],
[474,458,476,469,464,0,441,441,442],
[463,445,457,454,459,449,0,419,439],
[480,457,446,448,454,449,471,0,443],
[453,430,462,455,434,448,451,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,478,439,453,486,461,443,454],
[431,0,445,420,460,452,436,453,434],
[412,445,0,407,422,459,447,433,418],
[451,470,483,0,451,463,460,462,439],
[437,430,468,439,0,443,442,450,440],
[404,438,431,427,447,0,445,450,426],
[429,454,443,430,448,445,0,449,447],
[447,437,457,428,440,440,441,0,451],
[436,456,472,451,450,464,443,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,438,456,461,449,492,448,473],
[478,0,456,461,429,459,474,446,459],
[452,434,0,469,451,444,474,482,420],
[434,429,421,0,429,426,448,430,404],
[429,461,439,461,0,452,502,438,424],
[441,431,446,464,438,0,468,433,464],
[398,416,416,442,388,422,0,414,435],
[442,444,408,460,452,457,476,0,414],
[417,431,470,486,466,426,455,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,483,433,445,453,484,427,440],
[451,0,493,434,453,454,461,448,447],
[407,397,0,428,404,385,445,374,450],
[457,456,462,0,413,430,450,454,440],
[445,437,486,477,0,446,474,417,455],
[437,436,505,460,444,0,495,423,466],
[406,429,445,440,416,395,0,430,438],
[463,442,516,436,473,467,460,0,489],
[450,443,440,450,435,424,452,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,454,460,469,463,471,432,473],
[442,0,444,454,470,476,472,457,472],
[436,446,0,456,480,460,469,448,474],
[430,436,434,0,461,461,443,419,463],
[421,420,410,429,0,421,407,393,451],
[427,414,430,429,469,0,433,399,449],
[419,418,421,447,483,457,0,427,437],
[458,433,442,471,497,491,463,0,462],
[417,418,416,427,439,441,453,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,510,467,466,470,450,385,436],
[423,0,456,458,434,478,424,414,428],
[380,434,0,471,412,440,409,426,430],
[423,432,419,0,403,453,430,393,439],
[424,456,478,487,0,462,456,463,446],
[420,412,450,437,428,0,444,406,406],
[440,466,481,460,434,446,0,438,420],
[505,476,464,497,427,484,452,0,457],
[454,462,460,451,444,484,470,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,456,443,447,448,440,442,473],
[440,0,443,435,460,457,449,435,456],
[434,447,0,435,445,452,449,429,467],
[447,455,455,0,465,461,443,440,465],
[443,430,445,425,0,462,440,417,457],
[442,433,438,429,428,0,429,420,443],
[450,441,441,447,450,461,0,448,456],
[448,455,461,450,473,470,442,0,491],
[417,434,423,425,433,447,434,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,453,463,449,439,460,435,435],
[462,0,432,427,461,442,478,454,454],
[437,458,0,442,468,456,480,456,452],
[427,463,448,0,461,457,452,462,482],
[441,429,422,429,0,445,477,426,413],
[451,448,434,433,445,0,450,423,414],
[430,412,410,438,413,440,0,458,423],
[455,436,434,428,464,467,432,0,457],
[455,436,438,408,477,476,467,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,418,398,371,459,421,391,402],
[480,0,412,412,405,457,455,455,440],
[472,478,0,432,427,488,469,427,464],
[492,478,458,0,420,489,452,444,457],
[519,485,463,470,0,492,441,444,474],
[431,433,402,401,398,0,440,397,415],
[469,435,421,438,449,450,0,414,485],
[499,435,463,446,446,493,476,0,459],
[488,450,426,433,416,475,405,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,429,454,434,470,493,447,440],
[452,0,437,484,445,476,463,450,458],
[461,453,0,472,422,497,497,462,439],
[436,406,418,0,424,453,472,438,451],
[456,445,468,466,0,473,502,425,469],
[420,414,393,437,417,0,454,432,430],
[397,427,393,418,388,436,0,418,409],
[443,440,428,452,465,458,472,0,444],
[450,432,451,439,421,460,481,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,477,451,420,470,432,466,447],
[445,0,519,437,469,488,449,442,452],
[413,371,0,377,383,395,376,381,369],
[439,453,513,0,470,462,440,499,427],
[470,421,507,420,0,456,430,420,450],
[420,402,495,428,434,0,415,439,435],
[458,441,514,450,460,475,0,461,441],
[424,448,509,391,470,451,429,0,424],
[443,438,521,463,440,455,449,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,431,411,464,443,447,422,405],
[446,0,441,456,435,450,443,441,399],
[459,449,0,442,449,447,444,429,420],
[479,434,448,0,461,439,460,428,416],
[426,455,441,429,0,431,425,451,399],
[447,440,443,451,459,0,452,453,454],
[443,447,446,430,465,438,0,448,413],
[468,449,461,462,439,437,442,0,390],
[485,491,470,474,491,436,477,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,409,465,447,397,416,454,434],
[457,0,454,476,451,456,455,460,443],
[481,436,0,447,476,460,442,414,456],
[425,414,443,0,421,441,403,415,438],
[443,439,414,469,0,416,421,465,432],
[493,434,430,449,474,0,450,463,457],
[474,435,448,487,469,440,0,460,477],
[436,430,476,475,425,427,430,0,462],
[456,447,434,452,458,433,413,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,476,434,431,462,426,461,436],
[417,0,449,414,423,420,408,429,422],
[414,441,0,410,436,405,422,421,415],
[456,476,480,0,447,470,448,470,441],
[459,467,454,443,0,460,454,465,459],
[428,470,485,420,430,0,420,453,448],
[464,482,468,442,436,470,0,436,453],
[429,461,469,420,425,437,454,0,427],
[454,468,475,449,431,442,437,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,392,391,402,435,447,429,414],
[464,0,435,438,453,447,460,436,451],
[498,455,0,438,446,451,473,430,447],
[499,452,452,0,434,464,484,461,452],
[488,437,444,456,0,468,497,453,465],
[455,443,439,426,422,0,457,442,451],
[443,430,417,406,393,433,0,425,405],
[461,454,460,429,437,448,465,0,430],
[476,439,443,438,425,439,485,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,410,449,458,474,477,445,429],
[447,0,435,439,444,433,475,473,415],
[480,455,0,440,440,494,479,463,444],
[441,451,450,0,458,466,475,504,458],
[432,446,450,432,0,457,473,472,405],
[416,457,396,424,433,0,422,448,411],
[413,415,411,415,417,468,0,448,397],
[445,417,427,386,418,442,442,0,413],
[461,475,446,432,485,479,493,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,485,474,483,486,445,474,474],
[444,0,470,425,454,438,436,455,490],
[405,420,0,418,435,449,428,428,444],
[416,465,472,0,471,452,443,471,483],
[407,436,455,419,0,413,415,434,468],
[404,452,441,438,477,0,397,441,430],
[445,454,462,447,475,493,0,462,473],
[416,435,462,419,456,449,428,0,460],
[416,400,446,407,422,460,417,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,493,488,474,449,442,471,486],
[419,0,470,443,439,425,456,435,474],
[397,420,0,438,441,400,404,415,442],
[402,447,452,0,448,455,426,459,456],
[416,451,449,442,0,458,438,422,480],
[441,465,490,435,432,0,457,454,452],
[448,434,486,464,452,433,0,440,467],
[419,455,475,431,468,436,450,0,469],
[404,416,448,434,410,438,423,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,446,501,447,457,436,417,395],
[459,0,444,505,456,430,426,448,465],
[444,446,0,495,446,417,446,426,410],
[389,385,395,0,405,434,380,368,396],
[443,434,444,485,0,448,419,420,431],
[433,460,473,456,442,0,443,410,407],
[454,464,444,510,471,447,0,458,447],
[473,442,464,522,470,480,432,0,428],
[495,425,480,494,459,483,443,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,436,444,478,450,463,461,443],
[416,0,422,435,457,425,427,449,439],
[454,468,0,434,468,442,464,466,445],
[446,455,456,0,467,445,454,437,446],
[412,433,422,423,0,425,445,455,439],
[440,465,448,445,465,0,473,475,467],
[427,463,426,436,445,417,0,446,446],
[429,441,424,453,435,415,444,0,432],
[447,451,445,444,451,423,444,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,437,439,442,433,469,399,441],
[435,0,445,479,484,456,465,426,456],
[453,445,0,476,480,466,468,447,488],
[451,411,414,0,419,430,455,407,474],
[448,406,410,471,0,452,480,394,451],
[457,434,424,460,438,0,471,429,462],
[421,425,422,435,410,419,0,382,435],
[491,464,443,483,496,461,508,0,462],
[449,434,402,416,439,428,455,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,462,544,439,395,476,414,461],
[429,0,314,537,491,411,473,513,432],
[428,576,0,543,452,475,513,452,416],
[346,353,347,0,305,430,391,410,409],
[451,399,438,585,0,438,454,436,459],
[495,479,415,460,452,0,455,452,417],
[414,417,377,499,436,435,0,328,476],
[476,377,438,480,454,438,562,0,459],
[429,458,474,481,431,473,414,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,422,444,440,457,450,433,432],
[443,0,449,435,427,456,463,495,475],
[468,441,0,418,450,482,452,436,462],
[446,455,472,0,450,479,409,479,444],
[450,463,440,440,0,471,463,456,472],
[433,434,408,411,419,0,404,447,458],
[440,427,438,481,427,486,0,473,430],
[457,395,454,411,434,443,417,0,456],
[458,415,428,446,418,432,460,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,447,430,460,443,478,454,447],
[432,0,448,437,451,431,437,451,429],
[443,442,0,422,431,434,437,432,426],
[460,453,468,0,460,449,444,463,446],
[430,439,459,430,0,437,419,428,435],
[447,459,456,441,453,0,449,444,423],
[412,453,453,446,471,441,0,449,432],
[436,439,458,427,462,446,441,0,433],
[443,461,464,444,455,467,458,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,452,427,455,476,446,446,458],
[439,0,446,448,448,470,454,471,450],
[438,444,0,435,454,453,449,468,431],
[463,442,455,0,449,449,448,475,427],
[435,442,436,441,0,458,437,467,430],
[414,420,437,441,432,0,432,461,432],
[444,436,441,442,453,458,0,479,438],
[444,419,422,415,423,429,411,0,415],
[432,440,459,463,460,458,452,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,523,368,419,366,414,624,312],
[575,0,525,524,473,420,522,733,471],
[367,365,0,417,469,470,417,522,473],
[522,366,473,0,524,418,519,521,472],
[471,417,421,366,0,419,468,624,367],
[524,470,420,472,471,0,468,520,366],
[476,368,473,371,422,422,0,577,370],
[266,157,368,369,266,370,313,0,369],
[578,419,417,418,523,524,520,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,450,470,437,436,415,426,421],
[440,0,409,432,397,428,400,424,415],
[440,481,0,446,439,446,431,435,443],
[420,458,444,0,418,423,409,441,411],
[453,493,451,472,0,445,425,458,449],
[454,462,444,467,445,0,425,461,448],
[475,490,459,481,465,465,0,447,417],
[464,466,455,449,432,429,443,0,420],
[469,475,447,479,441,442,473,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,477,441,450,474,434,448,490],
[426,0,455,422,437,446,430,466,452],
[413,435,0,437,413,430,413,439,455],
[449,468,453,0,460,459,450,475,441],
[440,453,477,430,0,471,435,458,455],
[416,444,460,431,419,0,407,450,437],
[456,460,477,440,455,483,0,464,454],
[442,424,451,415,432,440,426,0,419],
[400,438,435,449,435,453,436,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,393,401,416,452,447,426,442],
[473,0,415,455,459,436,498,438,461],
[497,475,0,421,465,475,464,440,511],
[489,435,469,0,465,486,495,445,489],
[474,431,425,425,0,465,433,429,438],
[438,454,415,404,425,0,464,418,430],
[443,392,426,395,457,426,0,428,407],
[464,452,450,445,461,472,462,0,446],
[448,429,379,401,452,460,483,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,462,436,450,462,392,426,419],
[413,0,374,469,443,396,384,438,449],
[428,516,0,421,456,498,441,448,441],
[454,421,469,0,400,474,421,456,473],
[440,447,434,490,0,462,453,433,459],
[428,494,392,416,428,0,409,417,430],
[498,506,449,469,437,481,0,467,413],
[464,452,442,434,457,473,423,0,492],
[471,441,449,417,431,460,477,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,446,452,437,474,446,464,472],
[452,0,463,445,427,440,428,428,424],
[444,427,0,439,436,446,451,445,465],
[438,445,451,0,476,456,438,432,447],
[453,463,454,414,0,443,409,440,471],
[416,450,444,434,447,0,413,422,457],
[444,462,439,452,481,477,0,456,469],
[426,462,445,458,450,468,434,0,453],
[418,466,425,443,419,433,421,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,467,452,456,459,430,502,414],
[421,0,429,452,452,468,479,480,425],
[423,461,0,419,457,478,482,455,445],
[438,438,471,0,402,416,463,443,461],
[434,438,433,488,0,457,490,472,446],
[431,422,412,474,433,0,466,478,442],
[460,411,408,427,400,424,0,460,408],
[388,410,435,447,418,412,430,0,404],
[476,465,445,429,444,448,482,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,457,421,464,436,473,470,489],
[414,0,415,399,437,438,444,443,434],
[433,475,0,413,408,428,445,449,468],
[469,491,477,0,465,445,470,493,467],
[426,453,482,425,0,441,450,483,436],
[454,452,462,445,449,0,479,482,445],
[417,446,445,420,440,411,0,441,447],
[420,447,441,397,407,408,449,0,441],
[401,456,422,423,454,445,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,433,420,451,439,438,446,425],
[458,0,442,423,445,439,435,423,425],
[457,448,0,393,483,431,436,428,434],
[470,467,497,0,483,498,456,504,440],
[439,445,407,407,0,452,424,441,408],
[451,451,459,392,438,0,406,419,407],
[452,455,454,434,466,484,0,446,425],
[444,467,462,386,449,471,444,0,460],
[465,465,456,450,482,483,465,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,434,455,450,483,468,504,477],
[453,0,440,437,402,445,460,475,458],
[456,450,0,420,431,495,481,453,495],
[435,453,470,0,441,467,464,478,435],
[440,488,459,449,0,458,482,485,476],
[407,445,395,423,432,0,462,454,479],
[422,430,409,426,408,428,0,446,418],
[386,415,437,412,405,436,444,0,455],
[413,432,395,455,414,411,472,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,465,463,461,441,454,430,433],
[457,0,480,444,467,447,427,448,467],
[425,410,0,429,452,438,415,420,435],
[427,446,461,0,460,424,439,448,435],
[429,423,438,430,0,412,419,450,425],
[449,443,452,466,478,0,445,471,458],
[436,463,475,451,471,445,0,441,419],
[460,442,470,442,440,419,449,0,416],
[457,423,455,455,465,432,471,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,593,298,593,295,295,0,297],
[595,0,595,595,595,592,890,595,297],
[297,295,0,297,295,295,295,0,297],
[592,295,593,0,593,295,295,0,297],
[297,295,595,297,0,295,295,0,297],
[595,298,595,595,595,0,890,595,595],
[595,0,595,595,595,0,0,298,297],
[890,295,890,890,890,295,592,0,297],
[593,593,593,593,593,295,593,593,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,467,454,492,470,509,468,487],
[449,0,454,432,466,475,490,458,459],
[423,436,0,410,423,447,446,443,439],
[436,458,480,0,475,487,470,476,475],
[398,424,467,415,0,464,449,480,453],
[420,415,443,403,426,0,465,475,465],
[381,400,444,420,441,425,0,442,432],
[422,432,447,414,410,415,448,0,458],
[403,431,451,415,437,425,458,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,444,449,452,454,449,439,454],
[432,0,425,427,439,416,394,395,427],
[446,465,0,451,439,451,438,443,439],
[441,463,439,0,425,448,424,446,419],
[438,451,451,465,0,476,423,452,456],
[436,474,439,442,414,0,448,422,456],
[441,496,452,466,467,442,0,432,459],
[451,495,447,444,438,468,458,0,450],
[436,463,451,471,434,434,431,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,457,476,461,461,439,426,452],
[434,0,462,473,467,456,443,458,454],
[433,428,0,467,453,424,471,411,435],
[414,417,423,0,456,427,445,410,418],
[429,423,437,434,0,424,429,408,424],
[429,434,466,463,466,0,479,445,432],
[451,447,419,445,461,411,0,421,427],
[464,432,479,480,482,445,469,0,463],
[438,436,455,472,466,458,463,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,391,563,449,497,464,393,483],
[463,0,373,493,450,531,445,482,462],
[499,517,0,480,402,516,344,430,451],
[327,397,410,0,434,461,393,478,414],
[441,440,488,456,0,542,487,526,526],
[393,359,374,429,348,0,340,465,467],
[426,445,546,497,403,550,0,496,535],
[497,408,460,412,364,425,394,0,446],
[407,428,439,476,364,423,355,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,478,411,437,425,446,442,442],
[465,0,483,456,467,480,436,468,418],
[412,407,0,432,424,463,411,451,394],
[479,434,458,0,441,456,452,458,451],
[453,423,466,449,0,457,430,469,412],
[465,410,427,434,433,0,437,441,422],
[444,454,479,438,460,453,0,454,451],
[448,422,439,432,421,449,436,0,434],
[448,472,496,439,478,468,439,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,417,459,430,439,447,460,458],
[459,0,452,468,462,438,467,467,460],
[473,438,0,447,417,442,439,444,470],
[431,422,443,0,420,411,430,429,451],
[460,428,473,470,0,460,450,458,473],
[451,452,448,479,430,0,444,451,461],
[443,423,451,460,440,446,0,449,455],
[430,423,446,461,432,439,441,0,467],
[432,430,420,439,417,429,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,459,426,421,424,425,443,403],
[480,0,492,435,416,419,430,455,440],
[431,398,0,414,405,407,438,412,423],
[464,455,476,0,432,417,443,481,435],
[469,474,485,458,0,424,453,479,459],
[466,471,483,473,466,0,441,460,464],
[465,460,452,447,437,449,0,449,451],
[447,435,478,409,411,430,441,0,447],
[487,450,467,455,431,426,439,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,461,459,536,479,521,536,461],
[481,0,463,445,521,478,446,500,537],
[429,427,0,404,483,499,446,499,537],
[431,445,486,0,522,487,506,523,398],
[354,369,407,368,0,498,372,425,389],
[411,412,391,403,392,0,355,440,409],
[369,444,444,384,518,535,0,572,478],
[354,390,391,367,465,450,318,0,445],
[429,353,353,492,501,481,412,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,458,489,454,450,446,455,421],
[424,0,448,459,432,419,460,454,421],
[432,442,0,468,451,427,452,462,438],
[401,431,422,0,414,401,428,423,402],
[436,458,439,476,0,448,472,459,432],
[440,471,463,489,442,0,452,456,469],
[444,430,438,462,418,438,0,444,397],
[435,436,428,467,431,434,446,0,434],
[469,469,452,488,458,421,493,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,446,254,634,509,509,507,254],
[571,0,573,444,697,571,571,507,382],
[444,317,0,508,633,572,444,443,318],
[636,446,382,0,762,698,507,570,509],
[256,193,257,128,0,382,572,317,255],
[381,319,318,192,508,0,382,317,317],
[381,319,446,383,318,508,0,443,191],
[383,383,447,320,573,573,447,0,383],
[636,508,572,381,635,573,699,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,450,430,413,440,447,432,454],
[456,0,450,414,428,429,471,451,455],
[440,440,0,410,407,438,461,430,438],
[460,476,480,0,457,461,492,445,451],
[477,462,483,433,0,460,502,475,486],
[450,461,452,429,430,0,481,437,435],
[443,419,429,398,388,409,0,397,401],
[458,439,460,445,415,453,493,0,472],
[436,435,452,439,404,455,489,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,355,416,499,463,355,384,399,475],
[535,0,476,482,514,407,482,442,504],
[474,414,0,408,452,418,420,395,474],
[391,408,482,0,450,402,399,386,490],
[427,376,438,440,0,369,399,431,465],
[535,483,472,488,521,0,398,462,574],
[506,408,470,491,491,492,0,411,545],
[491,448,495,504,459,428,479,0,489],
[415,386,416,400,425,316,345,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,397,484,429,423,511,503,449],
[422,0,423,465,469,417,455,493,421],
[493,467,0,494,457,441,491,518,465],
[406,425,396,0,443,353,449,437,406],
[461,421,433,447,0,397,513,434,456],
[467,473,449,537,493,0,515,483,443],
[379,435,399,441,377,375,0,453,425],
[387,397,372,453,456,407,437,0,426],
[441,469,425,484,434,447,465,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,429,451,433,427,460,433,441],
[465,0,450,466,426,450,438,443,441],
[461,440,0,473,447,440,442,445,452],
[439,424,417,0,430,434,423,425,433],
[457,464,443,460,0,444,442,444,434],
[463,440,450,456,446,0,444,442,462],
[430,452,448,467,448,446,0,438,445],
[457,447,445,465,446,448,452,0,445],
[449,449,438,457,456,428,445,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,424,445,450,419,429,436,443],
[438,0,431,440,444,423,436,455,456],
[466,459,0,479,460,449,465,474,441],
[445,450,411,0,424,416,435,447,446],
[440,446,430,466,0,422,438,448,439],
[471,467,441,474,468,0,459,467,449],
[461,454,425,455,452,431,0,465,448],
[454,435,416,443,442,423,425,0,436],
[447,434,449,444,451,441,442,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,476,474,468,469,457,477,428],
[414,0,439,456,443,432,411,468,419],
[414,451,0,454,447,455,450,470,428],
[416,434,436,0,417,426,409,470,419],
[422,447,443,473,0,408,409,469,414],
[421,458,435,464,482,0,428,487,421],
[433,479,440,481,481,462,0,468,463],
[413,422,420,420,421,403,422,0,385],
[462,471,462,471,476,469,427,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,400,403,412,450,380,433,430],
[495,0,456,427,422,476,456,422,460],
[490,434,0,449,436,475,446,421,457],
[487,463,441,0,446,481,454,447,457],
[478,468,454,444,0,481,470,464,468],
[440,414,415,409,409,0,414,391,420],
[510,434,444,436,420,476,0,436,465],
[457,468,469,443,426,499,454,0,461],
[460,430,433,433,422,470,425,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,457,472,452,432,472,433,490],
[426,0,426,460,435,456,478,418,475],
[433,464,0,491,484,450,493,481,477],
[418,430,399,0,408,379,445,391,413],
[438,455,406,482,0,427,462,371,467],
[458,434,440,511,463,0,483,454,452],
[418,412,397,445,428,407,0,436,414],
[457,472,409,499,519,436,454,0,468],
[400,415,413,477,423,438,476,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,479,464,443,454,461,408,450],
[387,0,392,409,382,409,343,380,373],
[411,498,0,453,441,450,407,373,377],
[426,481,437,0,386,410,425,400,371],
[447,508,449,504,0,462,452,454,420],
[436,481,440,480,428,0,410,428,396],
[429,547,483,465,438,480,0,468,453],
[482,510,517,490,436,462,422,0,423],
[440,517,513,519,470,494,437,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,471,449,459,441,435,473,448],
[456,0,456,446,461,445,446,453,444],
[419,434,0,426,433,431,433,441,429],
[441,444,464,0,435,436,442,458,454],
[431,429,457,455,0,433,455,454,458],
[449,445,459,454,457,0,455,472,453],
[455,444,457,448,435,435,0,453,426],
[417,437,449,432,436,418,437,0,441],
[442,446,461,436,432,437,464,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,431,442,438,448,446,440,432],
[463,0,463,453,444,461,459,448,427],
[459,427,0,439,424,458,450,445,409],
[448,437,451,0,439,464,477,443,443],
[452,446,466,451,0,453,445,433,446],
[442,429,432,426,437,0,435,425,433],
[444,431,440,413,445,455,0,434,415],
[450,442,445,447,457,465,456,0,440],
[458,463,481,447,444,457,475,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,415,453,431,439,473,420,473],
[452,0,435,470,440,474,471,434,462],
[475,455,0,482,427,460,431,421,471],
[437,420,408,0,408,424,439,404,446],
[459,450,463,482,0,467,460,408,460],
[451,416,430,466,423,0,446,402,451],
[417,419,459,451,430,444,0,461,482],
[470,456,469,486,482,488,429,0,458],
[417,428,419,444,430,439,408,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,464,455,454,470,468,441,464],
[418,0,449,428,436,429,456,455,440],
[426,441,0,417,401,441,456,440,439],
[435,462,473,0,432,471,461,457,445],
[436,454,489,458,0,461,459,470,453],
[420,461,449,419,429,0,451,446,447],
[422,434,434,429,431,439,0,432,421],
[449,435,450,433,420,444,458,0,448],
[426,450,451,445,437,443,469,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,453,445,443,445,439,452,470],
[429,0,439,433,433,415,426,441,442],
[437,451,0,438,439,425,439,458,431],
[445,457,452,0,456,444,440,429,455],
[447,457,451,434,0,443,437,425,433],
[445,475,465,446,447,0,459,453,454],
[451,464,451,450,453,431,0,458,468],
[438,449,432,461,465,437,432,0,446],
[420,448,459,435,457,436,422,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,489,430,450,448,474,439,455],
[486,0,442,451,484,476,440,443,454],
[401,448,0,420,446,459,429,401,418],
[460,439,470,0,476,443,440,453,430],
[440,406,444,414,0,443,433,414,459],
[442,414,431,447,447,0,417,421,401],
[416,450,461,450,457,473,0,438,451],
[451,447,489,437,476,469,452,0,450],
[435,436,472,460,431,489,439,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,478,423,441,474,493,467,434],
[446,0,451,415,453,423,470,464,410],
[412,439,0,410,405,431,437,452,387],
[467,475,480,0,471,449,456,481,433],
[449,437,485,419,0,410,467,444,453],
[416,467,459,441,480,0,467,481,457],
[397,420,453,434,423,423,0,438,396],
[423,426,438,409,446,409,452,0,390],
[456,480,503,457,437,433,494,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,442,477,461,452,453,447,450],
[443,0,447,469,442,452,449,465,446],
[448,443,0,462,452,457,464,452,460],
[413,421,428,0,449,443,445,440,435],
[429,448,438,441,0,444,448,430,423],
[438,438,433,447,446,0,450,445,468],
[437,441,426,445,442,440,0,445,435],
[443,425,438,450,460,445,445,0,456],
[440,444,430,455,467,422,455,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,422,443,448,427,441,437,455],
[466,0,429,428,450,454,431,464,439],
[468,461,0,468,466,475,432,469,465],
[447,462,422,0,447,449,439,474,456],
[442,440,424,443,0,425,450,439,453],
[463,436,415,441,465,0,427,449,459],
[449,459,458,451,440,463,0,462,455],
[453,426,421,416,451,441,428,0,454],
[435,451,425,434,437,431,435,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,470,446,453,400,455,438,450],
[385,0,455,416,466,375,409,413,421],
[420,435,0,400,445,395,448,434,425],
[444,474,490,0,483,436,442,453,443],
[437,424,445,407,0,388,410,465,424],
[490,515,495,454,502,0,456,435,492],
[435,481,442,448,480,434,0,436,453],
[452,477,456,437,425,455,454,0,456],
[440,469,465,447,466,398,437,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,403,466,423,488,452,492,395],
[407,0,437,411,402,470,432,495,423],
[487,453,0,444,458,511,466,443,416],
[424,479,446,0,441,433,440,468,416],
[467,488,432,449,0,475,471,501,449],
[402,420,379,457,415,0,390,503,401],
[438,458,424,450,419,500,0,485,410],
[398,395,447,422,389,387,405,0,412],
[495,467,474,474,441,489,480,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,467,448,467,479,440,454,459],
[397,0,433,415,439,458,422,433,435],
[423,457,0,394,421,454,426,401,425],
[442,475,496,0,470,478,445,479,459],
[423,451,469,420,0,449,439,458,484],
[411,432,436,412,441,0,418,455,424],
[450,468,464,445,451,472,0,436,453],
[436,457,489,411,432,435,454,0,461],
[431,455,465,431,406,466,437,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,445,445,447,441,434,443,444],
[427,0,424,411,420,421,439,428,409],
[445,466,0,471,450,438,456,460,458],
[445,479,419,0,447,458,469,451,431],
[443,470,440,443,0,437,453,457,454],
[449,469,452,432,453,0,449,490,458],
[456,451,434,421,437,441,0,428,427],
[447,462,430,439,433,400,462,0,424],
[446,481,432,459,436,432,463,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,562,527,464,527,361,531,460],
[361,0,397,394,361,426,295,396,394],
[328,493,0,428,462,524,394,529,361],
[363,496,462,0,464,495,328,432,463],
[426,529,428,426,0,493,329,497,460],
[363,464,366,395,397,0,364,497,497],
[529,595,496,562,561,526,0,563,429],
[359,494,361,458,393,393,327,0,423],
[430,496,529,427,430,393,461,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,486,446,450,429,431,455,455],
[445,0,467,445,446,445,449,434,432],
[404,423,0,429,405,403,407,430,418],
[444,445,461,0,451,436,440,435,440],
[440,444,485,439,0,418,432,455,456],
[461,445,487,454,472,0,457,472,439],
[459,441,483,450,458,433,0,432,452],
[435,456,460,455,435,418,458,0,455],
[435,458,472,450,434,451,438,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,454,504,460,471,478,449,468],
[470,0,444,466,430,442,496,428,472],
[436,446,0,453,442,449,476,410,460],
[386,424,437,0,394,418,468,384,408],
[430,460,448,496,0,450,484,446,471],
[419,448,441,472,440,0,484,394,432],
[412,394,414,422,406,406,0,368,424],
[441,462,480,506,444,496,522,0,451],
[422,418,430,482,419,458,466,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,463,456,451,426,424,445,444],
[445,0,469,435,466,440,426,445,421],
[427,421,0,443,441,417,446,441,462],
[434,455,447,0,465,447,422,431,443],
[439,424,449,425,0,419,419,445,419],
[464,450,473,443,471,0,425,461,442],
[466,464,444,468,471,465,0,448,445],
[445,445,449,459,445,429,442,0,435],
[446,469,428,447,471,448,445,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,442,448,446,453,439,469,447],
[440,0,428,426,476,466,445,444,455],
[448,462,0,440,471,458,456,490,470],
[442,464,450,0,461,455,475,481,464],
[444,414,419,429,0,446,439,465,458],
[437,424,432,435,444,0,437,462,460],
[451,445,434,415,451,453,0,470,455],
[421,446,400,409,425,428,420,0,442],
[443,435,420,426,432,430,435,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,412,423,416,446,418,436,407],
[470,0,434,453,437,480,421,462,456],
[478,456,0,431,445,453,421,454,438],
[467,437,459,0,426,466,441,432,441],
[474,453,445,464,0,473,447,428,437],
[444,410,437,424,417,0,435,431,416],
[472,469,469,449,443,455,0,461,446],
[454,428,436,458,462,459,429,0,444],
[483,434,452,449,453,474,444,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,453,465,455,453,445,469,464],
[450,0,434,435,438,472,432,453,456],
[437,456,0,454,458,474,438,460,454],
[425,455,436,0,463,469,432,448,447],
[435,452,432,427,0,435,425,457,462],
[437,418,416,421,455,0,430,431,449],
[445,458,452,458,465,460,0,440,459],
[421,437,430,442,433,459,450,0,485],
[426,434,436,443,428,441,431,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,440,492,431,455,470,501,430],
[458,0,458,489,463,472,412,452,430],
[450,432,0,462,430,444,427,413,440],
[398,401,428,0,401,417,385,414,380],
[459,427,460,489,0,480,421,440,403],
[435,418,446,473,410,0,414,443,410],
[420,478,463,505,469,476,0,462,460],
[389,438,477,476,450,447,428,0,401],
[460,460,450,510,487,480,430,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,438,443,474,455,464,438,467],
[461,0,455,457,449,461,463,443,467],
[452,435,0,473,470,480,447,449,478],
[447,433,417,0,446,457,459,432,451],
[416,441,420,444,0,453,463,438,458],
[435,429,410,433,437,0,446,461,457],
[426,427,443,431,427,444,0,445,432],
[452,447,441,458,452,429,445,0,452],
[423,423,412,439,432,433,458,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,420,454,437,432,438,415,433],
[462,0,430,471,440,424,392,396,438],
[470,460,0,496,469,435,435,474,455],
[436,419,394,0,419,430,414,449,461],
[453,450,421,471,0,402,427,448,412],
[458,466,455,460,488,0,425,436,421],
[452,498,455,476,463,465,0,472,424],
[475,494,416,441,442,454,418,0,421],
[457,452,435,429,478,469,466,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,452,432,448,455,474,448,471],
[450,0,429,424,418,444,459,442,449],
[438,461,0,430,437,470,462,434,457],
[458,466,460,0,434,467,460,450,460],
[442,472,453,456,0,462,478,465,461],
[435,446,420,423,428,0,442,420,455],
[416,431,428,430,412,448,0,429,446],
[442,448,456,440,425,470,461,0,452],
[419,441,433,430,429,435,444,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,455,436,437,465,445,446,412],
[445,0,438,440,451,456,449,445,427],
[435,452,0,446,446,448,446,457,427],
[454,450,444,0,440,433,445,459,447],
[453,439,444,450,0,436,438,455,429],
[425,434,442,457,454,0,448,446,418],
[445,441,444,445,452,442,0,434,428],
[444,445,433,431,435,444,456,0,425],
[478,463,463,443,461,472,462,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,360,401,344,360,405,365,365],
[529,0,451,432,454,413,453,430,429],
[530,439,0,435,458,408,487,405,459],
[489,458,455,0,419,421,466,418,446],
[546,436,432,471,0,391,452,403,445],
[530,477,482,469,499,0,493,463,445],
[485,437,403,424,438,397,0,436,435],
[525,460,485,472,487,427,454,0,428],
[525,461,431,444,445,445,455,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,476,402,415,411,413,427,440],
[395,0,442,361,370,453,378,371,429],
[414,448,0,405,370,468,413,414,429],
[488,529,485,0,432,512,482,420,475],
[475,520,520,458,0,499,503,433,484],
[479,437,422,378,391,0,381,372,432],
[477,512,477,408,387,509,0,451,470],
[463,519,476,470,457,518,439,0,461],
[450,461,461,415,406,458,420,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,445,457,433,446,464,454,451],
[449,0,442,436,422,444,455,448,463],
[445,448,0,462,456,444,472,447,460],
[433,454,428,0,440,434,449,429,442],
[457,468,434,450,0,448,453,449,449],
[444,446,446,456,442,0,469,454,461],
[426,435,418,441,437,421,0,432,460],
[436,442,443,461,441,436,458,0,453],
[439,427,430,448,441,429,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,474,467,463,479,490,430,458],
[444,0,440,462,454,452,452,433,466],
[416,450,0,451,459,444,467,470,469],
[423,428,439,0,447,427,467,431,494],
[427,436,431,443,0,456,469,438,480],
[411,438,446,463,434,0,446,449,460],
[400,438,423,423,421,444,0,437,435],
[460,457,420,459,452,441,453,0,448],
[432,424,421,396,410,430,455,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,428,412,440,470,437,407,456],
[414,0,448,391,388,436,425,414,391],
[462,442,0,440,445,461,437,441,438],
[478,499,450,0,463,468,445,462,472],
[450,502,445,427,0,457,416,416,469],
[420,454,429,422,433,0,424,420,398],
[453,465,453,445,474,466,0,440,458],
[483,476,449,428,474,470,450,0,452],
[434,499,452,418,421,492,432,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,459,444,408,435,471,456,451],
[455,0,454,442,471,465,441,446,445],
[431,436,0,426,438,436,409,432,417],
[446,448,464,0,423,467,443,430,479],
[482,419,452,467,0,482,458,451,469],
[455,425,454,423,408,0,421,440,444],
[419,449,481,447,432,469,0,443,461],
[434,444,458,460,439,450,447,0,459],
[439,445,473,411,421,446,429,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,426,451,426,436,426,438,434],
[426,0,432,472,397,433,416,461,445],
[464,458,0,502,454,472,454,453,434],
[439,418,388,0,434,438,427,458,429],
[464,493,436,456,0,456,448,460,460],
[454,457,418,452,434,0,426,428,458],
[464,474,436,463,442,464,0,488,447],
[452,429,437,432,430,462,402,0,404],
[456,445,456,461,430,432,443,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,456,454,447,439,449,437,480],
[441,0,449,468,448,477,433,435,467],
[434,441,0,413,434,450,448,434,452],
[436,422,477,0,455,462,433,433,472],
[443,442,456,435,0,468,438,450,453],
[451,413,440,428,422,0,445,422,440],
[441,457,442,457,452,445,0,441,467],
[453,455,456,457,440,468,449,0,458],
[410,423,438,418,437,450,423,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,451,451,465,438,459,454,433],
[443,0,446,429,484,442,448,439,441],
[439,444,0,456,445,423,452,458,446],
[439,461,434,0,481,448,468,444,440],
[425,406,445,409,0,433,438,423,433],
[452,448,467,442,457,0,451,466,453],
[431,442,438,422,452,439,0,465,450],
[436,451,432,446,467,424,425,0,452],
[457,449,444,450,457,437,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,459,445,449,455,428,429,456],
[455,0,475,459,486,451,445,458,452],
[431,415,0,421,414,437,432,418,423],
[445,431,469,0,465,426,419,468,440],
[441,404,476,425,0,423,437,407,442],
[435,439,453,464,467,0,423,461,472],
[462,445,458,471,453,467,0,460,480],
[461,432,472,422,483,429,430,0,426],
[434,438,467,450,448,418,410,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,420,441,382,448,370,396,456],
[456,0,401,436,472,411,442,445,453],
[470,489,0,456,454,448,421,456,432],
[449,454,434,0,445,420,469,425,438],
[508,418,436,445,0,438,433,473,442],
[442,479,442,470,452,0,444,443,434],
[520,448,469,421,457,446,0,493,465],
[494,445,434,465,417,447,397,0,435],
[434,437,458,452,448,456,425,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,439,431,430,442,449,451,451],
[476,0,452,460,438,421,481,451,463],
[451,438,0,452,453,450,453,434,451],
[459,430,438,0,435,436,457,438,457],
[460,452,437,455,0,454,474,431,452],
[448,469,440,454,436,0,456,436,444],
[441,409,437,433,416,434,0,438,436],
[439,439,456,452,459,454,452,0,461],
[439,427,439,433,438,446,454,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,439,456,445,450,436,433,446],
[462,0,457,450,455,457,447,456,439],
[451,433,0,453,450,458,413,436,440],
[434,440,437,0,458,461,441,442,428],
[445,435,440,432,0,454,405,416,427],
[440,433,432,429,436,0,438,447,427],
[454,443,477,449,485,452,0,465,465],
[457,434,454,448,474,443,425,0,430],
[444,451,450,462,463,463,425,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,394,333,371,376,352,372,373],
[583,0,480,477,396,439,543,438,457],
[496,410,0,473,430,374,391,373,435],
[557,413,417,0,453,480,559,395,460],
[519,494,460,437,0,399,438,496,542],
[514,451,516,410,491,0,497,433,456],
[538,347,499,331,452,393,0,433,355],
[518,452,517,495,394,457,457,0,438],
[517,433,455,430,348,434,535,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,440,460,424,441,442,443,438],
[447,0,449,453,427,408,437,432,417],
[450,441,0,480,446,446,459,454,451],
[430,437,410,0,421,421,431,421,406],
[466,463,444,469,0,445,453,443,433],
[449,482,444,469,445,0,458,452,436],
[448,453,431,459,437,432,0,438,415],
[447,458,436,469,447,438,452,0,414],
[452,473,439,484,457,454,475,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,409,446,425,425,417,420,425],
[435,0,435,423,419,429,417,428,421],
[481,455,0,454,431,440,435,415,434],
[444,467,436,0,435,447,439,427,425],
[465,471,459,455,0,465,459,446,443],
[465,461,450,443,425,0,441,416,439],
[473,473,455,451,431,449,0,428,447],
[470,462,475,463,444,474,462,0,454],
[465,469,456,465,447,451,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,432,438,453,421,409,420,446],
[475,0,444,498,496,431,471,451,487],
[458,446,0,477,451,437,457,421,450],
[452,392,413,0,446,447,404,405,433],
[437,394,439,444,0,395,388,369,437],
[469,459,453,443,495,0,493,437,475],
[481,419,433,486,502,397,0,449,436],
[470,439,469,485,521,453,441,0,449],
[444,403,440,457,453,415,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,493,464,464,461,465,447,461],
[446,0,458,429,450,430,438,416,443],
[397,432,0,441,416,408,413,406,457],
[426,461,449,0,443,452,441,455,452],
[426,440,474,447,0,430,451,417,459],
[429,460,482,438,460,0,451,445,425],
[425,452,477,449,439,439,0,452,450],
[443,474,484,435,473,445,438,0,472],
[429,447,433,438,431,465,440,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,450,430,451,430,455,427,409],
[443,0,422,423,412,398,448,425,410],
[440,468,0,443,438,437,459,435,443],
[460,467,447,0,464,439,461,468,407],
[439,478,452,426,0,438,469,431,441],
[460,492,453,451,452,0,464,410,437],
[435,442,431,429,421,426,0,432,384],
[463,465,455,422,459,480,458,0,445],
[481,480,447,483,449,453,506,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,438,462,452,453,441,435,451],
[459,0,447,442,469,481,435,464,439],
[452,443,0,446,443,469,422,444,445],
[428,448,444,0,446,476,449,448,451],
[438,421,447,444,0,460,440,447,450],
[437,409,421,414,430,0,422,415,415],
[449,455,468,441,450,468,0,468,460],
[455,426,446,442,443,475,422,0,434],
[439,451,445,439,440,475,430,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,448,450,477,431,429,438],
[444,0,444,472,429,470,432,425,446],
[455,446,0,442,445,477,421,427,430],
[442,418,448,0,457,470,458,459,429],
[440,461,445,433,0,471,445,455,453],
[413,420,413,420,419,0,435,419,389],
[459,458,469,432,445,455,0,447,432],
[461,465,463,431,435,471,443,0,428],
[452,444,460,461,437,501,458,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,488,432,481,443,460,439,455],
[429,0,427,428,434,441,425,422,460],
[402,463,0,442,459,456,430,407,463],
[458,462,448,0,468,442,447,443,465],
[409,456,431,422,0,422,436,433,430],
[447,449,434,448,468,0,466,445,448],
[430,465,460,443,454,424,0,455,470],
[451,468,483,447,457,445,435,0,472],
[435,430,427,425,460,442,420,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,472,442,448,448,444,433,484],
[438,0,447,456,474,412,483,446,494],
[418,443,0,469,477,424,487,421,471],
[448,434,421,0,445,415,446,428,461],
[442,416,413,445,0,453,465,410,465],
[442,478,466,475,437,0,465,459,473],
[446,407,403,444,425,425,0,434,448],
[457,444,469,462,480,431,456,0,474],
[406,396,419,429,425,417,442,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,425,424,460,448,455,418],
[428,0,446,441,420,451,435,435,408],
[448,444,0,431,435,460,453,430,419],
[465,449,459,0,454,463,453,452,422],
[466,470,455,436,0,452,462,437,445],
[430,439,430,427,438,0,445,408,415],
[442,455,437,437,428,445,0,410,417],
[435,455,460,438,453,482,480,0,430],
[472,482,471,468,445,475,473,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,430,433,460,467,472,476,516],
[433,0,459,455,452,537,486,460,469],
[460,431,0,412,424,463,452,433,453],
[457,435,478,0,408,465,447,441,502],
[430,438,466,482,0,481,463,457,514],
[423,353,427,425,409,0,409,446,463],
[418,404,438,443,427,481,0,425,450],
[414,430,457,449,433,444,465,0,491],
[374,421,437,388,376,427,440,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,419,431,427,446,447,434,445],
[461,0,444,454,425,434,442,450,451],
[471,446,0,451,425,444,448,464,433],
[459,436,439,0,457,448,460,451,441],
[463,465,465,433,0,463,458,466,464],
[444,456,446,442,427,0,455,445,443],
[443,448,442,430,432,435,0,447,459],
[456,440,426,439,424,445,443,0,455],
[445,439,457,449,426,447,431,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,437,474,455,488,492,476,471],
[428,0,477,465,475,450,477,473,477],
[453,413,0,458,472,477,479,450,477],
[416,425,432,0,423,434,474,424,446],
[435,415,418,467,0,448,473,419,451],
[402,440,413,456,442,0,440,429,440],
[398,413,411,416,417,450,0,432,410],
[414,417,440,466,471,461,458,0,451],
[419,413,413,444,439,450,480,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,428,422,414,420,425,416,434],
[455,0,434,454,424,452,435,430,448],
[462,456,0,464,422,459,457,438,459],
[468,436,426,0,448,459,446,439,437],
[476,466,468,442,0,481,471,460,456],
[470,438,431,431,409,0,445,441,449],
[465,455,433,444,419,445,0,444,436],
[474,460,452,451,430,449,446,0,446],
[456,442,431,453,434,441,454,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,453,411,463,409,411,405,434],
[482,0,470,439,492,470,455,454,476],
[437,420,0,428,465,448,452,438,455],
[479,451,462,0,463,465,445,437,463],
[427,398,425,427,0,430,405,435,442],
[481,420,442,425,460,0,437,431,448],
[479,435,438,445,485,453,0,460,486],
[485,436,452,453,455,459,430,0,459],
[456,414,435,427,448,442,404,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,454,404,503,429,431,454,436],
[410,0,521,405,458,451,436,429,461],
[436,369,0,317,435,316,345,272,389],
[486,485,573,0,596,485,436,435,437],
[387,432,455,294,0,386,345,409,435],
[461,439,574,405,504,0,504,411,458],
[459,454,545,454,545,386,0,431,435],
[436,461,618,455,481,479,459,0,552],
[454,429,501,453,455,432,455,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,436,445,459,451,434,465,472],
[421,0,417,458,447,420,434,426,426],
[454,473,0,452,453,442,471,484,463],
[445,432,438,0,437,431,435,466,447],
[431,443,437,453,0,415,452,456,448],
[439,470,448,459,475,0,455,499,464],
[456,456,419,455,438,435,0,443,447],
[425,464,406,424,434,391,447,0,438],
[418,464,427,443,442,426,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,414,434,442,433,451,418,448],
[475,0,456,466,455,461,464,442,470],
[476,434,0,473,468,444,457,453,462],
[456,424,417,0,462,434,425,416,443],
[448,435,422,428,0,428,442,432,448],
[457,429,446,456,462,0,447,451,458],
[439,426,433,465,448,443,0,419,445],
[472,448,437,474,458,439,471,0,461],
[442,420,428,447,442,432,445,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,463,425,401,439,483,419,481],
[459,0,469,443,436,448,512,430,487],
[427,421,0,433,409,463,460,415,469],
[465,447,457,0,440,457,469,469,503],
[489,454,481,450,0,453,471,425,479],
[451,442,427,433,437,0,454,426,479],
[407,378,430,421,419,436,0,404,436],
[471,460,475,421,465,464,486,0,506],
[409,403,421,387,411,411,454,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,439,454,441,458,425,467,451],
[445,0,460,472,457,461,420,440,430],
[451,430,0,455,461,446,452,448,440],
[436,418,435,0,432,428,431,444,453],
[449,433,429,458,0,438,416,440,425],
[432,429,444,462,452,0,426,445,452],
[465,470,438,459,474,464,0,438,447],
[423,450,442,446,450,445,452,0,430],
[439,460,450,437,465,438,443,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,411,404,388,434,396,451,447],
[549,0,469,519,465,476,444,522,450],
[479,421,0,441,485,428,395,474,414],
[486,371,449,0,437,420,357,464,375],
[502,425,405,453,0,440,418,468,397],
[456,414,462,470,450,0,429,457,446],
[494,446,495,533,472,461,0,512,399],
[439,368,416,426,422,433,378,0,405],
[443,440,476,515,493,444,491,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,473,488,500,472,447,416,419],
[409,0,460,418,406,409,462,344,383],
[417,430,0,489,439,456,403,445,400],
[402,472,401,0,414,418,433,342,378],
[390,484,451,476,0,474,477,408,429],
[418,481,434,472,416,0,441,398,353],
[443,428,487,457,413,449,0,417,410],
[474,546,445,548,482,492,473,0,458],
[471,507,490,512,461,537,480,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,386,452,402,402,430,433,440],
[464,0,414,457,426,475,430,458,504],
[504,476,0,469,479,448,464,438,475],
[438,433,421,0,423,443,455,396,454],
[488,464,411,467,0,474,460,459,446],
[488,415,442,447,416,0,461,429,461],
[460,460,426,435,430,429,0,473,496],
[457,432,452,494,431,461,417,0,454],
[450,386,415,436,444,429,394,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,456,442,454,436,447,452,447],
[418,0,500,474,448,457,446,476,447],
[434,390,0,396,379,386,438,427,414],
[448,416,494,0,428,442,428,463,436],
[436,442,511,462,0,466,477,485,460],
[454,433,504,448,424,0,456,464,480],
[443,444,452,462,413,434,0,461,443],
[438,414,463,427,405,426,429,0,434],
[443,443,476,454,430,410,447,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,486,488,449,429,457,502,474],
[379,0,450,430,423,410,426,423,429],
[404,440,0,505,458,401,464,452,436],
[402,460,385,0,418,415,420,466,438],
[441,467,432,472,0,412,409,413,454],
[461,480,489,475,478,0,496,391,503],
[433,464,426,470,481,394,0,473,439],
[388,467,438,424,477,499,417,0,449],
[416,461,454,452,436,387,451,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,482,469,445,436,433,440,441],
[465,0,475,494,452,433,502,435,458],
[408,415,0,392,393,410,402,410,394],
[421,396,498,0,456,423,448,433,424],
[445,438,497,434,0,420,434,462,444],
[454,457,480,467,470,0,472,425,466],
[457,388,488,442,456,418,0,407,415],
[450,455,480,457,428,465,483,0,466],
[449,432,496,466,446,424,475,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,439,489,467,442,450,474,427],
[462,0,442,467,438,431,437,471,430],
[451,448,0,490,455,413,460,459,468],
[401,423,400,0,429,430,403,435,428],
[423,452,435,461,0,429,415,434,418],
[448,459,477,460,461,0,421,421,431],
[440,453,430,487,475,469,0,475,439],
[416,419,431,455,456,469,415,0,417],
[463,460,422,462,472,459,451,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,429,444,445,454,471,494,455],
[425,0,411,447,440,402,441,468,448],
[461,479,0,447,475,423,441,473,489],
[446,443,443,0,432,434,463,465,467],
[445,450,415,458,0,432,416,472,456],
[436,488,467,456,458,0,407,453,478],
[419,449,449,427,474,483,0,447,483],
[396,422,417,425,418,437,443,0,438],
[435,442,401,423,434,412,407,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,449,448,454,419,484,454,475],
[451,0,463,438,409,402,484,451,457],
[441,427,0,422,437,431,466,441,464],
[442,452,468,0,442,414,433,411,451],
[436,481,453,448,0,458,466,449,500],
[471,488,459,476,432,0,472,428,460],
[406,406,424,457,424,418,0,419,467],
[436,439,449,479,441,462,471,0,433],
[415,433,426,439,390,430,423,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,443,432,430,445,443,500,442],
[424,0,467,427,354,458,439,436,409],
[447,423,0,376,357,387,366,482,464],
[458,463,514,0,448,458,529,473,426],
[460,536,533,442,0,491,524,503,489],
[445,432,503,432,399,0,470,426,477],
[447,451,524,361,366,420,0,449,434],
[390,454,408,417,387,464,441,0,506],
[448,481,426,464,401,413,456,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,456,428,471,465,441,433,441],
[452,0,446,471,466,463,451,451,445],
[434,444,0,439,457,432,458,433,441],
[462,419,451,0,485,487,458,440,475],
[419,424,433,405,0,401,419,409,452],
[425,427,458,403,489,0,450,423,461],
[449,439,432,432,471,440,0,439,451],
[457,439,457,450,481,467,451,0,459],
[449,445,449,415,438,429,439,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,474,502,485,465,432,449,513],
[432,0,470,449,492,440,449,412,465],
[416,420,0,405,465,411,405,390,422],
[388,441,485,0,446,414,411,384,471],
[405,398,425,444,0,406,409,386,415],
[425,450,479,476,484,0,443,430,466],
[458,441,485,479,481,447,0,471,459],
[441,478,500,506,504,460,419,0,492],
[377,425,468,419,475,424,431,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,464,436,479,439,463,479,555],
[462,0,461,497,419,442,426,465,460],
[426,429,0,472,470,471,397,497,505],
[454,393,418,0,465,494,420,454,474],
[411,471,420,425,0,457,483,509,477],
[451,448,419,396,433,0,454,471,479],
[427,464,493,470,407,436,0,499,471],
[411,425,393,436,381,419,391,0,409],
[335,430,385,416,413,411,419,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,449,464,455,446,434,453,467],
[444,0,439,461,444,416,425,447,445],
[441,451,0,458,464,431,432,445,446],
[426,429,432,0,445,447,418,439,451],
[435,446,426,445,0,427,431,441,423],
[444,474,459,443,463,0,447,461,464],
[456,465,458,472,459,443,0,453,460],
[437,443,445,451,449,429,437,0,425],
[423,445,444,439,467,426,430,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,435,429,411,449,455,424,423],
[441,0,464,448,430,462,459,441,485],
[455,426,0,439,435,442,455,419,468],
[461,442,451,0,424,439,448,462,449],
[479,460,455,466,0,470,485,438,481],
[441,428,448,451,420,0,470,454,448],
[435,431,435,442,405,420,0,436,436],
[466,449,471,428,452,436,454,0,431],
[467,405,422,441,409,442,454,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,469,442,421,420,465,445,485],
[466,0,479,455,481,492,485,438,502],
[421,411,0,462,452,429,455,417,475],
[448,435,428,0,415,440,445,432,485],
[469,409,438,475,0,464,443,438,466],
[470,398,461,450,426,0,459,429,463],
[425,405,435,445,447,431,0,420,409],
[445,452,473,458,452,461,470,0,474],
[405,388,415,405,424,427,481,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,446,433,419,413,430,480,399],
[479,0,452,451,408,475,425,468,469],
[444,438,0,488,459,470,450,479,450],
[457,439,402,0,425,459,449,482,427],
[471,482,431,465,0,511,475,502,445],
[477,415,420,431,379,0,455,482,400],
[460,465,440,441,415,435,0,478,458],
[410,422,411,408,388,408,412,0,378],
[491,421,440,463,445,490,432,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,439,505,444,488,427,391,499],
[368,0,503,367,328,469,389,392,363],
[451,387,0,400,386,388,406,361,378],
[385,523,490,0,441,479,496,467,455],
[446,562,504,449,0,560,469,423,523],
[402,421,502,411,330,0,431,383,392],
[463,501,484,394,421,459,0,449,473],
[499,498,529,423,467,507,441,0,448],
[391,527,512,435,367,498,417,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,476,424,464,436,495,431],
[433,0,467,481,421,462,458,468,402],
[429,423,0,507,480,455,488,469,464],
[414,409,383,0,427,406,414,408,405],
[466,469,410,463,0,474,444,484,452],
[426,428,435,484,416,0,463,457,406],
[454,432,402,476,446,427,0,448,448],
[395,422,421,482,406,433,442,0,382],
[459,488,426,485,438,484,442,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,475,507,477,450,458,461,451],
[451,0,445,461,451,438,445,461,444],
[415,445,0,460,425,437,441,446,444],
[383,429,430,0,435,433,413,443,419],
[413,439,465,455,0,447,472,465,479],
[440,452,453,457,443,0,467,458,457],
[432,445,449,477,418,423,0,447,445],
[429,429,444,447,425,432,443,0,415],
[439,446,446,471,411,433,445,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,395,489,427,436,447,416,387],
[505,0,400,427,420,479,448,436,444],
[495,490,0,503,415,433,450,455,411],
[401,463,387,0,447,378,417,415,384],
[463,470,475,443,0,453,479,411,436],
[454,411,457,512,437,0,450,456,420],
[443,442,440,473,411,440,0,427,422],
[474,454,435,475,479,434,463,0,457],
[503,446,479,506,454,470,468,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,421,462,450,454,442,457,466],
[443,0,427,461,461,420,435,443,456],
[469,463,0,463,467,443,440,438,458],
[428,429,427,0,428,407,425,417,448],
[440,429,423,462,0,433,441,424,440],
[436,470,447,483,457,0,447,448,457],
[448,455,450,465,449,443,0,452,485],
[433,447,452,473,466,442,438,0,468],
[424,434,432,442,450,433,405,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,489,429,501,489,460,484,498],
[387,0,414,405,430,429,385,465,427],
[401,476,0,454,484,444,427,483,447],
[461,485,436,0,477,430,382,460,513],
[389,460,406,413,0,426,370,443,445],
[401,461,446,460,464,0,409,431,473],
[430,505,463,508,520,481,0,465,474],
[406,425,407,430,447,459,425,0,449],
[392,463,443,377,445,417,416,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,465,479,471,464,451,468,443],
[421,0,458,478,461,435,453,466,440],
[425,432,0,482,430,438,419,470,441],
[411,412,408,0,438,427,413,422,442],
[419,429,460,452,0,443,429,478,452],
[426,455,452,463,447,0,413,438,461],
[439,437,471,477,461,477,0,441,459],
[422,424,420,468,412,452,449,0,476],
[447,450,449,448,438,429,431,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,440,428,414,454,453,468,450],
[446,0,430,455,428,453,456,463,456],
[450,460,0,461,455,447,460,462,440],
[462,435,429,0,462,443,447,468,472],
[476,462,435,428,0,449,469,436,455],
[436,437,443,447,441,0,436,447,450],
[437,434,430,443,421,454,0,440,437],
[422,427,428,422,454,443,450,0,440],
[440,434,450,418,435,440,453,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,426,456,432,447,428,436,438],
[487,0,489,453,443,480,479,488,444],
[464,401,0,418,421,435,397,436,426],
[434,437,472,0,435,466,470,470,449],
[458,447,469,455,0,452,463,457,433],
[443,410,455,424,438,0,439,481,439],
[462,411,493,420,427,451,0,435,439],
[454,402,454,420,433,409,455,0,425],
[452,446,464,441,457,451,451,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,452,466,377,443,389,473,428],
[458,0,493,469,461,449,473,476,400],
[438,397,0,415,348,403,408,403,419],
[424,421,475,0,412,456,431,411,419],
[513,429,542,478,0,481,463,490,496],
[447,441,487,434,409,0,412,408,433],
[501,417,482,459,427,478,0,427,417],
[417,414,487,479,400,482,463,0,472],
[462,490,471,471,394,457,473,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,465,457,444,428,466,472,464],
[449,0,457,471,459,426,443,458,485],
[425,433,0,454,424,416,433,447,454],
[433,419,436,0,409,400,421,438,434],
[446,431,466,481,0,463,470,467,486],
[462,464,474,490,427,0,467,472,476],
[424,447,457,469,420,423,0,442,467],
[418,432,443,452,423,418,448,0,464],
[426,405,436,456,404,414,423,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,440,457,483,426,458,440,419],
[447,0,438,457,470,413,436,432,422],
[450,452,0,469,444,470,445,453,453],
[433,433,421,0,442,446,415,443,414],
[407,420,446,448,0,409,408,440,414],
[464,477,420,444,481,0,441,484,457],
[432,454,445,475,482,449,0,452,437],
[450,458,437,447,450,406,438,0,470],
[471,468,437,476,476,433,453,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,477,465,475,448,482,450,440],
[416,0,459,358,377,365,411,382,363],
[413,431,0,463,427,411,421,429,375],
[425,532,427,0,420,395,433,460,366],
[415,513,463,470,0,429,419,384,449],
[442,525,479,495,461,0,468,421,409],
[408,479,469,457,471,422,0,393,429],
[440,508,461,430,506,469,497,0,463],
[450,527,515,524,441,481,461,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,543,479,428,408,468,493,479],
[408,0,457,491,432,455,433,452,500],
[347,433,0,487,402,358,449,398,428],
[411,399,403,0,419,399,408,436,431],
[462,458,488,471,0,450,433,457,467],
[482,435,532,491,440,0,413,453,425],
[422,457,441,482,457,477,0,483,521],
[397,438,492,454,433,437,407,0,446],
[411,390,462,459,423,465,369,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,509,473,490,527,487,438,475],
[416,0,510,440,496,485,451,446,446],
[381,380,0,356,424,464,422,402,410],
[417,450,534,0,470,478,478,442,457],
[400,394,466,420,0,466,439,408,433],
[363,405,426,412,424,0,437,416,403],
[403,439,468,412,451,453,0,410,444],
[452,444,488,448,482,474,480,0,495],
[415,444,480,433,457,487,446,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,439,496,454,457,467,442],
[428,0,431,448,484,477,422,443,449],
[445,459,0,444,457,474,444,452,432],
[451,442,446,0,470,451,421,438,430],
[394,406,433,420,0,442,417,434,416],
[436,413,416,439,448,0,417,432,427],
[433,468,446,469,473,473,0,447,450],
[423,447,438,452,456,458,443,0,425],
[448,441,458,460,474,463,440,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,490,442,448,442,468,419,436],
[445,0,428,419,434,418,408,367,364],
[400,462,0,500,421,422,467,399,407],
[448,471,390,0,433,424,444,424,421],
[442,456,469,457,0,420,459,390,451],
[448,472,468,466,470,0,469,422,461],
[422,482,423,446,431,421,0,417,390],
[471,523,491,466,500,468,473,0,437],
[454,526,483,469,439,429,500,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,488,519,444,455,444,503,532],
[393,0,419,408,399,430,454,487,462],
[402,471,0,453,381,468,408,484,480],
[371,482,437,0,414,422,459,481,480],
[446,491,509,476,0,492,414,507,469],
[435,460,422,468,398,0,416,476,452],
[446,436,482,431,476,474,0,496,468],
[387,403,406,409,383,414,394,0,412],
[358,428,410,410,421,438,422,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,446,668,667,668,445,445,445],
[445,0,446,667,667,445,445,223,667],
[444,444,0,444,444,222,222,222,444],
[222,223,446,0,667,445,445,223,667],
[223,223,446,223,0,445,445,223,445],
[222,445,668,445,445,0,667,222,444],
[445,445,668,445,445,223,0,445,667],
[445,667,668,667,667,668,445,0,444],
[445,223,446,223,445,446,223,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,467,441,413,455,418,448,455],
[441,0,430,403,429,468,423,462,427],
[423,460,0,392,402,442,416,414,417],
[449,487,498,0,451,460,503,444,462],
[477,461,488,439,0,427,434,485,469],
[435,422,448,430,463,0,406,414,410],
[472,467,474,387,456,484,0,458,455],
[442,428,476,446,405,476,432,0,433],
[435,463,473,428,421,480,435,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,433,479,416,422,490,435,459],
[431,0,430,447,434,392,487,442,434],
[457,460,0,479,466,457,501,477,439],
[411,443,411,0,429,369,439,411,399],
[474,456,424,461,0,469,454,474,440],
[468,498,433,521,421,0,460,466,473],
[400,403,389,451,436,430,0,427,409],
[455,448,413,479,416,424,463,0,440],
[431,456,451,491,450,417,481,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,439,504,462,449,469,493,501],
[418,0,400,463,426,400,434,467,467],
[451,490,0,489,470,440,458,498,474],
[386,427,401,0,426,409,440,460,478],
[428,464,420,464,0,405,442,468,444],
[441,490,450,481,485,0,479,519,493],
[421,456,432,450,448,411,0,474,492],
[397,423,392,430,422,371,416,0,454],
[389,423,416,412,446,397,398,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,469,481,418,452,511,470,495],
[438,0,412,571,466,553,572,500,523],
[421,478,0,444,421,495,507,436,490],
[409,319,446,0,458,510,499,484,468],
[472,424,469,432,0,448,491,421,449],
[438,337,395,380,442,0,499,433,455],
[379,318,383,391,399,391,0,419,329],
[420,390,454,406,469,457,471,0,406],
[395,367,400,422,441,435,561,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,453,458,446,435,430,425,412],
[447,0,463,442,447,427,449,447,451],
[437,427,0,432,426,416,451,427,427],
[432,448,458,0,451,429,451,443,422],
[444,443,464,439,0,454,432,459,433],
[455,463,474,461,436,0,444,435,444],
[460,441,439,439,458,446,0,454,434],
[465,443,463,447,431,455,436,0,435],
[478,439,463,468,457,446,456,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,407,456,426,419,420,434,424],
[465,0,432,456,434,434,420,440,462],
[483,458,0,466,446,413,439,432,414],
[434,434,424,0,419,409,385,419,426],
[464,456,444,471,0,424,462,453,480],
[471,456,477,481,466,0,456,455,436],
[470,470,451,505,428,434,0,456,452],
[456,450,458,471,437,435,434,0,450],
[466,428,476,464,410,454,438,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,443,433,453,449,464,476,459],
[425,0,430,442,419,456,437,432,441],
[447,460,0,435,443,452,464,481,471],
[457,448,455,0,462,440,453,460,477],
[437,471,447,428,0,459,452,452,468],
[441,434,438,450,431,0,462,430,439],
[426,453,426,437,438,428,0,452,446],
[414,458,409,430,438,460,438,0,454],
[431,449,419,413,422,451,444,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,465,447,455,441,451,447,461],
[443,0,449,431,443,442,438,438,462],
[425,441,0,422,433,415,405,405,450],
[443,459,468,0,443,419,437,444,452],
[435,447,457,447,0,444,429,428,449],
[449,448,475,471,446,0,450,435,459],
[439,452,485,453,461,440,0,452,464],
[443,452,485,446,462,455,438,0,473],
[429,428,440,438,441,431,426,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,420,423,373,378,471,424,468],
[378,0,468,422,331,472,563,473,514],
[470,422,0,373,465,564,563,565,469],
[467,468,517,0,327,519,468,426,422],
[517,559,425,563,0,702,562,517,610],
[512,418,326,371,188,0,515,423,561],
[419,327,327,422,328,375,0,424,374],
[466,417,325,464,373,467,466,0,514],
[422,376,421,468,280,329,516,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,438,416,450,430,457,412,421],
[461,0,459,457,411,471,469,450,421],
[452,431,0,462,451,455,469,415,441],
[474,433,428,0,417,439,434,423,414],
[440,479,439,473,0,471,465,464,454],
[460,419,435,451,419,0,435,462,421],
[433,421,421,456,425,455,0,455,424],
[478,440,475,467,426,428,435,0,431],
[469,469,449,476,436,469,466,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,455,414,453,452,468,438,429],
[461,0,465,463,449,476,454,452,424],
[435,425,0,422,455,450,420,451,428],
[476,427,468,0,468,455,467,454,464],
[437,441,435,422,0,440,442,430,443],
[438,414,440,435,450,0,446,424,453],
[422,436,470,423,448,444,0,450,438],
[452,438,439,436,460,466,440,0,439],
[461,466,462,426,447,437,452,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,467,458,451,486,477,469,439],
[426,0,433,448,434,439,435,431,435],
[423,457,0,454,444,460,455,436,446],
[432,442,436,0,413,458,452,456,417],
[439,456,446,477,0,468,467,448,452],
[404,451,430,432,422,0,429,432,420],
[413,455,435,438,423,461,0,435,443],
[421,459,454,434,442,458,455,0,435],
[451,455,444,473,438,470,447,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,453,468,452,447,428,444],
[444,0,442,439,454,445,418,409,442],
[436,448,0,473,470,427,427,423,454],
[437,451,417,0,465,451,444,448,458],
[422,436,420,425,0,418,412,414,435],
[438,445,463,439,472,0,455,432,458],
[443,472,463,446,478,435,0,431,436],
[462,481,467,442,476,458,459,0,444],
[446,448,436,432,455,432,454,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,423,453,433,458,433,454,474],
[468,0,460,428,439,462,457,466,477],
[467,430,0,463,447,463,427,448,465],
[437,462,427,0,398,470,430,444,480],
[457,451,443,492,0,458,435,464,485],
[432,428,427,420,432,0,429,417,459],
[457,433,463,460,455,461,0,434,477],
[436,424,442,446,426,473,456,0,464],
[416,413,425,410,405,431,413,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,416,442,437,384,437,452,430],
[439,0,428,492,386,406,401,428,415],
[474,462,0,499,453,350,462,492,498],
[448,398,391,0,374,448,473,433,441],
[453,504,437,516,0,428,497,481,484],
[506,484,540,442,462,0,438,513,459],
[453,489,428,417,393,452,0,388,461],
[438,462,398,457,409,377,502,0,440],
[460,475,392,449,406,431,429,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,459,429,438,460,445,428,458],
[457,0,467,433,404,446,447,440,449],
[431,423,0,449,425,444,460,437,446],
[461,457,441,0,422,451,458,437,468],
[452,486,465,468,0,481,488,445,465],
[430,444,446,439,409,0,458,433,463],
[445,443,430,432,402,432,0,413,418],
[462,450,453,453,445,457,477,0,463],
[432,441,444,422,425,427,472,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,433,438,470,422,434,461,447],
[444,0,419,463,453,414,439,451,424],
[457,471,0,468,480,428,440,435,449],
[452,427,422,0,478,406,424,463,425],
[420,437,410,412,0,416,411,428,390],
[468,476,462,484,474,0,453,491,429],
[456,451,450,466,479,437,0,472,480],
[429,439,455,427,462,399,418,0,426],
[443,466,441,465,500,461,410,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,433,444,414,426,433,423,407],
[465,0,433,472,446,475,458,440,447],
[457,457,0,442,410,450,452,438,442],
[446,418,448,0,422,459,459,428,439],
[476,444,480,468,0,466,451,449,450],
[464,415,440,431,424,0,471,433,444],
[457,432,438,431,439,419,0,417,441],
[467,450,452,462,441,457,473,0,439],
[483,443,448,451,440,446,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,433,461,439,436,459,460,462],
[418,0,445,457,431,416,415,412,432],
[457,445,0,421,451,432,446,452,435],
[429,433,469,0,458,441,420,433,471],
[451,459,439,432,0,446,443,429,446],
[454,474,458,449,444,0,418,461,457],
[431,475,444,470,447,472,0,436,456],
[430,478,438,457,461,429,454,0,447],
[428,458,455,419,444,433,434,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,450,452,440,444,457,438,420],
[450,0,464,453,463,425,474,441,442],
[440,426,0,439,476,438,464,435,441],
[438,437,451,0,457,431,448,445,460],
[450,427,414,433,0,441,450,437,438],
[446,465,452,459,449,0,452,439,436],
[433,416,426,442,440,438,0,426,434],
[452,449,455,445,453,451,464,0,452],
[470,448,449,430,452,454,456,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,439,449,425,438,408,425],
[433,0,476,463,468,455,450,475,440],
[429,414,0,439,438,429,446,438,435],
[451,427,451,0,435,432,443,451,444],
[441,422,452,455,0,435,441,457,438],
[465,435,461,458,455,0,442,452,465],
[452,440,444,447,449,448,0,449,429],
[482,415,452,439,433,438,441,0,435],
[465,450,455,446,452,425,461,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,442,452,481,502,443,467,436],
[381,0,373,424,359,471,448,477,347],
[448,517,0,469,457,495,411,533,452],
[438,466,421,0,393,501,408,448,394],
[409,531,433,497,0,481,494,477,434],
[388,419,395,389,409,0,424,462,345],
[447,442,479,482,396,466,0,523,419],
[423,413,357,442,413,428,367,0,404],
[454,543,438,496,456,545,471,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,399,403,269,267,314,359,446],
[446,0,489,360,222,359,313,447,538],
[491,401,0,538,403,488,316,491,581],
[487,530,352,0,311,354,401,444,624],
[621,668,487,579,0,488,357,356,622],
[623,531,402,536,402,0,404,540,446],
[576,577,574,489,533,486,0,401,535],
[531,443,399,446,534,350,489,0,579],
[444,352,309,266,268,444,355,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,469,471,478,443,493,475,466],
[422,0,500,439,475,451,461,440,430],
[421,390,0,450,449,427,477,441,419],
[419,451,440,0,452,445,490,458,415],
[412,415,441,438,0,441,460,450,450],
[447,439,463,445,449,0,474,459,422],
[397,429,413,400,430,416,0,411,413],
[415,450,449,432,440,431,479,0,434],
[424,460,471,475,440,468,477,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,192,320,319,383,252,381,253],
[445,0,381,380,253,511,506,318,505],
[698,509,0,637,508,510,508,382,378],
[570,510,253,0,381,446,380,382,378],
[571,637,382,509,0,701,507,700,570],
[507,379,380,444,189,0,442,508,441],
[638,384,382,510,383,448,0,448,383],
[509,572,508,508,190,382,442,0,442],
[637,385,512,512,320,449,507,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,556,446,669,222,446,448,445],
[446,0,667,446,778,443,556,558,556],
[334,223,0,223,669,334,336,337,334],
[444,444,667,0,780,333,446,448,667],
[221,112,221,110,0,332,0,223,110],
[668,447,556,557,558,0,335,448,445],
[444,334,554,444,890,555,0,444,556],
[442,332,553,442,667,442,446,0,445],
[445,334,556,223,780,445,334,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,477,424,438,431,453,429,440],
[483,0,476,443,457,450,466,453,457],
[413,414,0,440,446,420,426,446,395],
[466,447,450,0,467,444,446,429,406],
[452,433,444,423,0,471,454,448,449],
[459,440,470,446,419,0,439,462,444],
[437,424,464,444,436,451,0,452,429],
[461,437,444,461,442,428,438,0,432],
[450,433,495,484,441,446,461,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,434,431,442,443,430,467,419],
[470,0,453,443,439,457,413,470,442],
[456,437,0,423,458,459,451,462,428],
[459,447,467,0,452,474,437,471,470],
[448,451,432,438,0,448,432,446,454],
[447,433,431,416,442,0,432,467,415],
[460,477,439,453,458,458,0,444,468],
[423,420,428,419,444,423,446,0,428],
[471,448,462,420,436,475,422,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,459,460,435,436,446,425,455],
[445,0,477,481,465,458,449,468,478],
[431,413,0,453,448,427,416,413,449],
[430,409,437,0,424,418,453,429,442],
[455,425,442,466,0,423,427,416,449],
[454,432,463,472,467,0,459,462,464],
[444,441,474,437,463,431,0,432,440],
[465,422,477,461,474,428,458,0,472],
[435,412,441,448,441,426,450,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,446,469,448,462,444,468],
[444,0,447,458,428,447,445,437,431],
[436,443,0,460,445,456,448,435,443],
[444,432,430,0,429,444,424,422,419],
[421,462,445,461,0,429,448,438,457],
[442,443,434,446,461,0,452,440,466],
[428,445,442,466,442,438,0,435,444],
[446,453,455,468,452,450,455,0,438],
[422,459,447,471,433,424,446,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,417,469,479,462,453,449,428],
[443,0,465,435,445,448,432,459,454],
[473,425,0,482,463,449,447,460,470],
[421,455,408,0,458,447,427,448,418],
[411,445,427,432,0,453,408,445,415],
[428,442,441,443,437,0,459,438,425],
[437,458,443,463,482,431,0,443,475],
[441,431,430,442,445,452,447,0,426],
[462,436,420,472,475,465,415,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,455,429,475,463,459,445,456],
[422,0,420,434,452,442,426,434,420],
[435,470,0,437,456,468,451,443,435],
[461,456,453,0,473,466,455,427,437],
[415,438,434,417,0,461,406,424,409],
[427,448,422,424,429,0,438,422,414],
[431,464,439,435,484,452,0,444,431],
[445,456,447,463,466,468,446,0,437],
[434,470,455,453,481,476,459,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,451,430,426,428,422,456,433],
[429,0,427,400,424,416,425,435,421],
[439,463,0,450,441,439,437,453,426],
[460,490,440,0,424,436,427,446,449],
[464,466,449,466,0,461,451,481,445],
[462,474,451,454,429,0,444,457,450],
[468,465,453,463,439,446,0,454,440],
[434,455,437,444,409,433,436,0,423],
[457,469,464,441,445,440,450,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,414,422,460,438,434,413,444],
[438,0,398,462,479,412,416,357,462],
[476,492,0,498,470,435,467,433,455],
[468,428,392,0,446,389,414,383,416],
[430,411,420,444,0,382,402,402,432],
[452,478,455,501,508,0,434,446,466],
[456,474,423,476,488,456,0,439,486],
[477,533,457,507,488,444,451,0,491],
[446,428,435,474,458,424,404,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,452,442,467,464,469,479,445],
[411,0,444,409,408,431,419,454,430],
[438,446,0,436,435,441,444,455,456],
[448,481,454,0,451,441,451,458,455],
[423,482,455,439,0,455,443,488,446],
[426,459,449,449,435,0,432,471,441],
[421,471,446,439,447,458,0,457,438],
[411,436,435,432,402,419,433,0,430],
[445,460,434,435,444,449,452,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,476,445,447,430,439,467,441],
[445,0,465,459,456,457,432,469,467],
[414,425,0,434,418,435,424,448,442],
[445,431,456,0,423,447,426,449,450],
[443,434,472,467,0,448,448,458,439],
[460,433,455,443,442,0,437,473,457],
[451,458,466,464,442,453,0,481,452],
[423,421,442,441,432,417,409,0,441],
[449,423,448,440,451,433,438,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,475,405,448,435,457,445,446],
[449,0,469,427,446,429,462,447,478],
[415,421,0,397,419,470,446,433,466],
[485,463,493,0,425,462,498,436,474],
[442,444,471,465,0,456,507,451,474],
[455,461,420,428,434,0,470,438,441],
[433,428,444,392,383,420,0,432,433],
[445,443,457,454,439,452,458,0,466],
[444,412,424,416,416,449,457,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,424,413,411,432,435,439,414],
[448,0,447,411,425,443,429,421,433],
[466,443,0,426,446,435,461,443,444],
[477,479,464,0,432,475,485,456,458],
[479,465,444,458,0,474,477,472,506],
[458,447,455,415,416,0,447,443,457],
[455,461,429,405,413,443,0,436,435],
[451,469,447,434,418,447,454,0,434],
[476,457,446,432,384,433,455,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,441,428,448,412,488,455,424],
[451,0,431,449,429,419,435,452,401],
[449,459,0,414,412,413,448,458,407],
[462,441,476,0,430,452,440,471,450],
[442,461,478,460,0,448,486,456,437],
[478,471,477,438,442,0,485,504,455],
[402,455,442,450,404,405,0,447,403],
[435,438,432,419,434,386,443,0,403],
[466,489,483,440,453,435,487,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,433,427,450,460,425,455,434],
[467,0,460,490,451,489,438,463,479],
[457,430,0,458,440,488,438,467,481],
[463,400,432,0,420,467,432,435,460],
[440,439,450,470,0,464,451,455,475],
[430,401,402,423,426,0,379,433,439],
[465,452,452,458,439,511,0,439,452],
[435,427,423,455,435,457,451,0,460],
[456,411,409,430,415,451,438,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,444,444,458,450,410,444,451],
[428,0,447,454,443,459,444,436,437],
[446,443,0,445,446,432,434,463,439],
[446,436,445,0,458,444,429,467,469],
[432,447,444,432,0,436,422,435,419],
[440,431,458,446,454,0,430,464,459],
[480,446,456,461,468,460,0,490,422],
[446,454,427,423,455,426,400,0,457],
[439,453,451,421,471,431,468,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,470,469,484,477,474,437,481],
[451,0,455,470,456,505,481,432,460],
[420,435,0,463,473,470,456,460,480],
[421,420,427,0,453,468,443,412,444],
[406,434,417,437,0,462,442,407,436],
[413,385,420,422,428,0,431,396,426],
[416,409,434,447,448,459,0,447,477],
[453,458,430,478,483,494,443,0,465],
[409,430,410,446,454,464,413,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,461,452,460,455,440,472,460],
[452,0,442,461,458,453,454,465,460],
[429,448,0,452,443,458,449,457,468],
[438,429,438,0,443,438,434,448,456],
[430,432,447,447,0,444,441,428,460],
[435,437,432,452,446,0,436,434,452],
[450,436,441,456,449,454,0,454,455],
[418,425,433,442,462,456,436,0,433],
[430,430,422,434,430,438,435,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,421,434,456,450,446,443,421],
[424,0,426,415,418,427,427,434,412],
[469,464,0,438,465,472,468,470,446],
[456,475,452,0,433,471,467,472,449],
[434,472,425,457,0,446,470,451,423],
[440,463,418,419,444,0,449,438,402],
[444,463,422,423,420,441,0,416,418],
[447,456,420,418,439,452,474,0,427],
[469,478,444,441,467,488,472,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,449,439,423,388,473,398,445],
[386,0,437,427,353,374,412,459,386],
[441,453,0,398,382,341,473,381,435],
[451,463,492,0,449,456,463,443,488],
[467,537,508,441,0,444,498,449,513],
[502,516,549,434,446,0,468,408,492],
[417,478,417,427,392,422,0,353,410],
[492,431,509,447,441,482,537,0,446],
[445,504,455,402,377,398,480,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,461,442,461,434,430,445,473],
[443,0,432,413,459,440,416,446,463],
[429,458,0,452,466,457,429,444,446],
[448,477,438,0,450,448,450,442,464],
[429,431,424,440,0,435,440,442,443],
[456,450,433,442,455,0,454,439,454],
[460,474,461,440,450,436,0,437,472],
[445,444,446,448,448,451,453,0,469],
[417,427,444,426,447,436,418,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,439,452,421,444,426,458,420],
[458,0,474,480,413,439,443,439,431],
[451,416,0,441,427,408,421,447,403],
[438,410,449,0,432,434,431,420,412],
[469,477,463,458,0,428,439,426,422],
[446,451,482,456,462,0,453,435,445],
[464,447,469,459,451,437,0,447,443],
[432,451,443,470,464,455,443,0,428],
[470,459,487,478,468,445,447,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,434,478,491,457,441,422,461],
[464,0,451,484,475,489,428,455,477],
[456,439,0,478,478,486,460,435,446],
[412,406,412,0,463,424,412,410,433],
[399,415,412,427,0,424,392,420,443],
[433,401,404,466,466,0,439,427,433],
[449,462,430,478,498,451,0,436,472],
[468,435,455,480,470,463,454,0,441],
[429,413,444,457,447,457,418,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,437,486,444,438,482,460,421],
[484,0,456,474,496,499,495,494,418],
[453,434,0,456,471,471,467,477,429],
[404,416,434,0,459,448,453,397,397],
[446,394,419,431,0,458,442,429,406],
[452,391,419,442,432,0,454,431,372],
[408,395,423,437,448,436,0,422,406],
[430,396,413,493,461,459,468,0,445],
[469,472,461,493,484,518,484,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,471,326,269,299,285,385,411],
[510,0,551,428,474,484,479,512,508],
[419,339,0,364,283,337,302,407,441],
[564,462,526,0,440,407,417,481,466],
[621,416,607,450,0,481,463,492,506],
[591,406,553,483,409,0,407,499,450],
[605,411,588,473,427,483,0,467,514],
[505,378,483,409,398,391,423,0,497],
[479,382,449,424,384,440,376,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,514,453,455,432,501,442,473],
[391,0,444,429,421,402,471,437,374],
[376,446,0,368,422,392,423,417,383],
[437,461,522,0,433,453,475,459,438],
[435,469,468,457,0,415,466,437,407],
[458,488,498,437,475,0,500,496,454],
[389,419,467,415,424,390,0,439,404],
[448,453,473,431,453,394,451,0,413],
[417,516,507,452,483,436,486,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,487,392,505,463,502,423,546],
[440,0,463,313,409,366,426,404,481],
[403,427,0,408,431,390,367,426,448],
[498,577,482,0,509,382,503,460,558],
[385,481,459,381,0,342,449,438,444],
[427,524,500,508,548,0,500,504,522],
[388,464,523,387,441,390,0,478,421],
[467,486,464,430,452,386,412,0,527],
[344,409,442,332,446,368,469,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,456,458,450,453,440,457,456],
[439,0,439,450,436,464,450,456,454],
[434,451,0,454,422,449,426,441,459],
[432,440,436,0,437,468,426,452,439],
[440,454,468,453,0,462,444,450,458],
[437,426,441,422,428,0,433,436,435],
[450,440,464,464,446,457,0,442,471],
[433,434,449,438,440,454,448,0,461],
[434,436,431,451,432,455,419,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,467,469,505,447,479,505,440],
[429,0,467,404,434,410,465,478,410],
[423,423,0,417,457,424,414,480,446],
[421,486,473,0,510,443,460,455,438],
[385,456,433,380,0,453,446,473,389],
[443,480,466,447,437,0,461,476,465],
[411,425,476,430,444,429,0,462,459],
[385,412,410,435,417,414,428,0,390],
[450,480,444,452,501,425,431,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,439,455,421,449,412,449,403],
[454,0,459,462,442,461,421,465,441],
[451,431,0,460,429,458,450,439,438],
[435,428,430,0,425,435,409,453,444],
[469,448,461,465,0,461,439,416,450],
[441,429,432,455,429,0,401,435,407],
[478,469,440,481,451,489,0,475,489],
[441,425,451,437,474,455,415,0,447],
[487,449,452,446,440,483,401,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,440,425,433,451,446,439],
[446,0,435,437,443,423,432,415,422],
[441,455,0,389,393,409,431,428,430],
[450,453,501,0,420,447,432,433,420],
[465,447,497,470,0,430,484,444,471],
[457,467,481,443,460,0,470,425,443],
[439,458,459,458,406,420,0,394,424],
[444,475,462,457,446,465,496,0,478],
[451,468,460,470,419,447,466,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,384,466,391,454,370,385,432],
[485,0,478,510,411,472,436,484,492],
[506,412,0,439,386,428,362,422,426],
[424,380,451,0,404,489,362,399,435],
[499,479,504,486,0,441,449,440,463],
[436,418,462,401,449,0,413,418,426],
[520,454,528,528,441,477,0,436,532],
[505,406,468,491,450,472,454,0,507],
[458,398,464,455,427,464,358,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,369,397,420,383,452,452,432],
[465,0,412,434,400,420,441,457,490],
[521,478,0,424,464,486,449,479,462],
[493,456,466,0,457,445,437,463,444],
[470,490,426,433,0,411,465,456,421],
[507,470,404,445,479,0,457,473,445],
[438,449,441,453,425,433,0,426,454],
[438,433,411,427,434,417,464,0,455],
[458,400,428,446,469,445,436,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,479,418,525,489,478,481,447],
[443,0,480,457,494,499,460,479,455],
[411,410,0,423,456,486,477,465,469],
[472,433,467,0,515,508,506,493,463],
[365,396,434,375,0,447,419,417,355],
[401,391,404,382,443,0,404,436,365],
[412,430,413,384,471,486,0,450,421],
[409,411,425,397,473,454,440,0,435],
[443,435,421,427,535,525,469,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,416,386,413,402,416,430,422],
[463,0,439,411,410,425,439,456,443],
[474,451,0,432,445,435,446,447,467],
[504,479,458,0,428,425,441,480,456],
[477,480,445,462,0,454,451,487,439],
[488,465,455,465,436,0,439,480,452],
[474,451,444,449,439,451,0,441,475],
[460,434,443,410,403,410,449,0,439],
[468,447,423,434,451,438,415,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,488,442,434,434,472,446,455],
[430,0,458,424,431,417,429,396,416],
[402,432,0,424,416,415,414,397,421],
[448,466,466,0,453,428,465,454,434],
[456,459,474,437,0,447,446,445,457],
[456,473,475,462,443,0,471,434,457],
[418,461,476,425,444,419,0,413,436],
[444,494,493,436,445,456,477,0,455],
[435,474,469,456,433,433,454,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,427,448,452,449,394,441,417],
[437,0,458,500,501,459,448,466,468],
[463,432,0,467,441,446,429,415,489],
[442,390,423,0,452,430,447,425,444],
[438,389,449,438,0,417,418,430,432],
[441,431,444,460,473,0,468,471,443],
[496,442,461,443,472,422,0,461,436],
[449,424,475,465,460,419,429,0,470],
[473,422,401,446,458,447,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,433,484,505,484,442,436,451],
[400,0,413,463,472,444,445,421,450],
[457,477,0,461,487,468,462,421,458],
[406,427,429,0,481,413,397,436,443],
[385,418,403,409,0,404,391,382,424],
[406,446,422,477,486,0,447,459,428],
[448,445,428,493,499,443,0,457,487],
[454,469,469,454,508,431,433,0,431],
[439,440,432,447,466,462,403,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,448,441,442,453,452,449],
[434,0,459,450,438,459,466,443,422],
[448,431,0,446,456,448,472,459,428],
[442,440,444,0,449,469,482,459,439],
[449,452,434,441,0,449,444,435,448],
[448,431,442,421,441,0,459,443,423],
[437,424,418,408,446,431,0,443,426],
[438,447,431,431,455,447,447,0,431],
[441,468,462,451,442,467,464,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,436,450,437,456,434,440,425],
[451,0,445,449,450,448,425,428,437],
[454,445,0,436,452,453,438,451,443],
[440,441,454,0,465,459,438,421,435],
[453,440,438,425,0,445,445,415,438],
[434,442,437,431,445,0,443,425,421],
[456,465,452,452,445,447,0,446,456],
[450,462,439,469,475,465,444,0,444],
[465,453,447,455,452,469,434,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,473,475,462,458,447,467,444],
[412,0,436,450,410,412,433,413,415],
[417,454,0,448,415,431,433,417,437],
[415,440,442,0,428,443,423,429,434],
[428,480,475,462,0,444,458,443,438],
[432,478,459,447,446,0,440,442,421],
[443,457,457,467,432,450,0,448,443],
[423,477,473,461,447,448,442,0,451],
[446,475,453,456,452,469,447,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,436,451,440,443,467,429,444],
[436,0,426,419,434,441,440,408,443],
[454,464,0,427,430,445,463,435,442],
[439,471,463,0,469,446,441,457,453],
[450,456,460,421,0,452,464,428,434],
[447,449,445,444,438,0,455,451,444],
[423,450,427,449,426,435,0,427,440],
[461,482,455,433,462,439,463,0,435],
[446,447,448,437,456,446,450,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,461,450,447,463,446,439,454],
[446,0,446,449,450,469,451,446,437],
[429,444,0,452,448,467,426,448,444],
[440,441,438,0,442,441,451,433,433],
[443,440,442,448,0,458,436,449,445],
[427,421,423,449,432,0,427,428,439],
[444,439,464,439,454,463,0,456,445],
[451,444,442,457,441,462,434,0,447],
[436,453,446,457,445,451,445,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,426,416,368,409,471,415,410],
[485,0,430,434,446,454,482,463,446],
[464,460,0,456,423,447,486,433,442],
[474,456,434,0,433,437,510,451,434],
[522,444,467,457,0,456,510,456,461],
[481,436,443,453,434,0,439,439,445],
[419,408,404,380,380,451,0,414,420],
[475,427,457,439,434,451,476,0,460],
[480,444,448,456,429,445,470,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,421,418,435,463,409,466,455],
[501,0,440,447,500,477,460,491,482],
[469,450,0,406,459,454,424,444,447],
[472,443,484,0,501,468,432,464,506],
[455,390,431,389,0,432,428,446,459],
[427,413,436,422,458,0,417,451,454],
[481,430,466,458,462,473,0,459,521],
[424,399,446,426,444,439,431,0,449],
[435,408,443,384,431,436,369,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,424,412,426,442,418,427,435],
[440,0,416,404,417,415,434,428,445],
[466,474,0,438,430,444,430,435,469],
[478,486,452,0,429,462,459,478,475],
[464,473,460,461,0,470,441,467,456],
[448,475,446,428,420,0,440,435,467],
[472,456,460,431,449,450,0,452,464],
[463,462,455,412,423,455,438,0,451],
[455,445,421,415,434,423,426,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,466,410,439,463,431,439,442],
[462,0,465,431,450,445,457,480,451],
[424,425,0,434,435,449,425,428,443],
[480,459,456,0,474,449,465,485,443],
[451,440,455,416,0,426,418,465,445],
[427,445,441,441,464,0,443,467,438],
[459,433,465,425,472,447,0,469,434],
[451,410,462,405,425,423,421,0,444],
[448,439,447,447,445,452,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,551,477,380,408,408,407,431],
[511,0,530,557,529,337,509,380,456],
[339,360,0,385,328,412,414,415,462],
[413,333,505,0,405,537,486,389,433],
[510,361,562,485,0,488,563,461,384],
[482,553,478,353,402,0,380,355,403],
[482,381,476,404,327,510,0,384,430],
[483,510,475,501,429,535,506,0,533],
[459,434,428,457,506,487,460,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,430,434,482,464,443,440,464],
[414,0,479,463,434,405,406,470,471],
[460,411,0,455,486,452,458,457,452],
[456,427,435,0,409,450,460,439,415],
[408,456,404,481,0,425,444,440,425],
[426,485,438,440,465,0,445,425,405],
[447,484,432,430,446,445,0,453,425],
[450,420,433,451,450,465,437,0,425],
[426,419,438,475,465,485,465,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,468,477,494,471,452,431,443],
[407,0,393,485,437,477,424,434,392],
[422,497,0,462,492,473,416,466,428],
[413,405,428,0,454,421,410,430,367],
[396,453,398,436,0,435,414,413,396],
[419,413,417,469,455,0,422,439,416],
[438,466,474,480,476,468,0,452,439],
[459,456,424,460,477,451,438,0,465],
[447,498,462,523,494,474,451,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,460,445,448,451,470,452,458],
[465,0,465,449,475,443,473,441,489],
[430,425,0,438,431,425,475,437,464],
[445,441,452,0,466,434,465,441,474],
[442,415,459,424,0,413,461,432,460],
[439,447,465,456,477,0,502,458,474],
[420,417,415,425,429,388,0,435,459],
[438,449,453,449,458,432,455,0,457],
[432,401,426,416,430,416,431,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,449,426,462,425,449,460,441],
[446,0,438,420,472,415,448,430,440],
[441,452,0,436,471,402,423,457,419],
[464,470,454,0,469,443,456,473,448],
[428,418,419,421,0,438,423,446,411],
[465,475,488,447,452,0,437,460,458],
[441,442,467,434,467,453,0,427,426],
[430,460,433,417,444,430,463,0,423],
[449,450,471,442,479,432,464,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,458,442,462,453,458,468,467],
[434,0,451,424,424,426,428,446,434],
[432,439,0,428,431,434,438,417,432],
[448,466,462,0,449,444,457,450,474],
[428,466,459,441,0,442,457,438,450],
[437,464,456,446,448,0,449,435,469],
[432,462,452,433,433,441,0,440,480],
[422,444,473,440,452,455,450,0,465],
[423,456,458,416,440,421,410,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,420,452,459,454,501,450,446],
[442,0,429,466,460,459,466,449,457],
[470,461,0,443,466,453,460,456,458],
[438,424,447,0,444,461,460,429,403],
[431,430,424,446,0,433,472,422,415],
[436,431,437,429,457,0,426,404,423],
[389,424,430,430,418,464,0,433,412],
[440,441,434,461,468,486,457,0,467],
[444,433,432,487,475,467,478,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,452,452,467,447,465,480,445],
[421,0,443,452,438,428,455,449,448],
[438,447,0,433,450,446,437,462,446],
[438,438,457,0,456,458,459,457,469],
[423,452,440,434,0,449,467,445,446],
[443,462,444,432,441,0,437,452,451],
[425,435,453,431,423,453,0,462,446],
[410,441,428,433,445,438,428,0,440],
[445,442,444,421,444,439,444,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,480,468,459,456,432,445,432],
[372,0,415,399,429,398,396,361,367],
[410,475,0,412,411,446,424,380,403],
[422,491,478,0,452,441,438,455,405],
[431,461,479,438,0,402,373,410,415],
[434,492,444,449,488,0,453,454,421],
[458,494,466,452,517,437,0,465,482],
[445,529,510,435,480,436,425,0,426],
[458,523,487,485,475,469,408,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,398,446,391,464,452,379,450],
[461,0,439,469,456,480,437,424,479],
[492,451,0,494,482,513,458,441,482],
[444,421,396,0,446,484,447,417,441],
[499,434,408,444,0,458,427,420,478],
[426,410,377,406,432,0,407,385,424],
[438,453,432,443,463,483,0,447,472],
[511,466,449,473,470,505,443,0,495],
[440,411,408,449,412,466,418,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,462,464,459,453,439,462,444],
[438,0,440,449,453,437,433,418,461],
[428,450,0,457,459,428,425,420,460],
[426,441,433,0,432,443,434,440,444],
[431,437,431,458,0,452,419,438,422],
[437,453,462,447,438,0,433,432,436],
[451,457,465,456,471,457,0,429,470],
[428,472,470,450,452,458,461,0,482],
[446,429,430,446,468,454,420,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,432,447,423,454,438,420,436],
[471,0,471,477,489,483,454,433,474],
[458,419,0,458,452,454,430,423,455],
[443,413,432,0,427,451,421,422,449],
[467,401,438,463,0,450,425,462,475],
[436,407,436,439,440,0,388,429,423],
[452,436,460,469,465,502,0,420,470],
[470,457,467,468,428,461,470,0,470],
[454,416,435,441,415,467,420,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,479,458,433,490,412,445,480],
[432,0,467,448,412,453,415,456,397],
[411,423,0,421,430,446,393,462,454],
[432,442,469,0,401,446,420,438,439],
[457,478,460,489,0,470,421,452,482],
[400,437,444,444,420,0,420,410,425],
[478,475,497,470,469,470,0,491,436],
[445,434,428,452,438,480,399,0,462],
[410,493,436,451,408,465,454,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,446,454,454,448,434,453,439],
[434,0,439,450,490,450,454,456,449],
[444,451,0,454,447,432,441,468,428],
[436,440,436,0,438,443,431,455,429],
[436,400,443,452,0,423,439,426,416],
[442,440,458,447,467,0,446,446,438],
[456,436,449,459,451,444,0,452,438],
[437,434,422,435,464,444,438,0,432],
[451,441,462,461,474,452,452,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,463,447,485,446,451,492,438],
[461,0,452,472,454,430,440,483,467],
[427,438,0,422,447,442,415,425,429],
[443,418,468,0,450,435,425,447,455],
[405,436,443,440,0,439,436,433,441],
[444,460,448,455,451,0,446,447,474],
[439,450,475,465,454,444,0,472,448],
[398,407,465,443,457,443,418,0,435],
[452,423,461,435,449,416,442,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,473,463,475,473,442,459,468],
[416,0,427,428,432,429,437,427,449],
[417,463,0,429,475,463,428,440,455],
[427,462,461,0,456,457,452,429,450],
[415,458,415,434,0,442,443,427,436],
[417,461,427,433,448,0,414,450,462],
[448,453,462,438,447,476,0,468,478],
[431,463,450,461,463,440,422,0,450],
[422,441,435,440,454,428,412,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,395,413,452,396,389,409,415],
[425,0,386,418,444,397,412,441,358],
[495,504,0,482,501,437,454,499,457],
[477,472,408,0,512,412,443,467,451],
[438,446,389,378,0,416,428,414,435],
[494,493,453,478,474,0,424,454,433],
[501,478,436,447,462,466,0,430,433],
[481,449,391,423,476,436,460,0,388],
[475,532,433,439,455,457,457,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,414,447,463,446,446,422,471],
[379,0,415,361,440,389,403,367,451],
[476,475,0,423,493,434,470,426,463],
[443,529,467,0,454,470,458,442,472],
[427,450,397,436,0,439,436,409,470],
[444,501,456,420,451,0,423,436,500],
[444,487,420,432,454,467,0,448,477],
[468,523,464,448,481,454,442,0,469],
[419,439,427,418,420,390,413,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,442,444,456,463,452,445,472],
[421,0,458,434,443,455,435,439,436],
[448,432,0,463,456,439,451,431,458],
[446,456,427,0,450,451,426,423,422],
[434,447,434,440,0,444,448,429,444],
[427,435,451,439,446,0,452,453,435],
[438,455,439,464,442,438,0,435,430],
[445,451,459,467,461,437,455,0,469],
[418,454,432,468,446,455,460,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,426,432,433,406,442,414],
[445,0,432,411,443,431,417,469,458],
[453,458,0,405,436,416,409,470,453],
[464,479,485,0,447,480,435,475,453],
[458,447,454,443,0,434,422,466,414],
[457,459,474,410,456,0,440,478,437],
[484,473,481,455,468,450,0,463,443],
[448,421,420,415,424,412,427,0,419],
[476,432,437,437,476,453,447,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,430,391,397,393,400,411,362],
[511,0,489,507,467,421,399,469,414],
[460,401,0,433,426,385,394,445,379],
[499,383,457,0,405,430,436,482,431],
[493,423,464,485,0,420,435,450,454],
[497,469,505,460,470,0,427,493,477],
[490,491,496,454,455,463,0,437,408],
[479,421,445,408,440,397,453,0,457],
[528,476,511,459,436,413,482,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,453,439,427,439,413,450,414],
[442,0,476,431,431,413,412,397,388],
[437,414,0,449,423,457,433,440,408],
[451,459,441,0,464,481,431,459,450],
[463,459,467,426,0,474,440,459,423],
[451,477,433,409,416,0,427,438,411],
[477,478,457,459,450,463,0,473,409],
[440,493,450,431,431,452,417,0,405],
[476,502,482,440,467,479,481,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,447,457,473,452,430,421,409],
[441,0,437,472,484,475,474,457,453],
[443,453,0,456,451,457,442,425,424],
[433,418,434,0,486,456,440,433,444],
[417,406,439,404,0,439,446,418,413],
[438,415,433,434,451,0,442,400,408],
[460,416,448,450,444,448,0,424,418],
[469,433,465,457,472,490,466,0,446],
[481,437,466,446,477,482,472,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,446,457,437,443,440,431,445],
[430,0,450,444,411,426,437,413,422],
[444,440,0,455,456,450,455,440,445],
[433,446,435,0,413,423,410,422,435],
[453,479,434,477,0,432,445,437,444],
[447,464,440,467,458,0,439,439,474],
[450,453,435,480,445,451,0,437,457],
[459,477,450,468,453,451,453,0,445],
[445,468,445,455,446,416,433,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,510,464,449,454,461,447,432],
[420,0,475,432,449,475,451,454,420],
[380,415,0,438,455,467,455,442,450],
[426,458,452,0,461,490,476,484,430],
[441,441,435,429,0,469,448,462,426],
[436,415,423,400,421,0,464,420,422],
[429,439,435,414,442,426,0,436,424],
[443,436,448,406,428,470,454,0,441],
[458,470,440,460,464,468,466,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,437,445,452,459,433,457,451],
[451,0,452,440,428,443,420,470,449],
[453,438,0,440,428,433,432,447,447],
[445,450,450,0,460,444,447,463,470],
[438,462,462,430,0,446,446,454,467],
[431,447,457,446,444,0,441,445,465],
[457,470,458,443,444,449,0,458,491],
[433,420,443,427,436,445,432,0,461],
[439,441,443,420,423,425,399,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,450,434,456,434,435,454,448],
[423,0,450,437,442,437,448,426,456],
[440,440,0,418,438,445,447,423,443],
[456,453,472,0,449,451,446,444,464],
[434,448,452,441,0,442,445,446,441],
[456,453,445,439,448,0,458,463,445],
[455,442,443,444,445,432,0,437,452],
[436,464,467,446,444,427,453,0,463],
[442,434,447,426,449,445,438,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,478,453,444,452,470,450,460],
[428,0,437,401,424,425,430,457,429],
[412,453,0,428,430,427,437,442,431],
[437,489,462,0,467,467,470,489,479],
[446,466,460,423,0,451,451,466,456],
[438,465,463,423,439,0,455,448,455],
[420,460,453,420,439,435,0,459,412],
[440,433,448,401,424,442,431,0,423],
[430,461,459,411,434,435,478,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,440,361,407,453,474,437,414],
[481,0,452,451,430,400,471,428,467],
[450,438,0,443,488,432,465,441,422],
[529,439,447,0,476,447,492,465,495],
[483,460,402,414,0,410,438,417,398],
[437,490,458,443,480,0,450,444,435],
[416,419,425,398,452,440,0,386,415],
[453,462,449,425,473,446,504,0,425],
[476,423,468,395,492,455,475,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,443,393,393,422,377,439,380],
[444,0,434,419,409,427,419,440,397],
[447,456,0,440,433,401,407,444,411],
[497,471,450,0,440,440,462,468,419],
[497,481,457,450,0,441,458,438,446],
[468,463,489,450,449,0,430,470,403],
[513,471,483,428,432,460,0,488,432],
[451,450,446,422,452,420,402,0,413],
[510,493,479,471,444,487,458,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,460,465,473,473,430,435,469],
[432,0,458,435,469,442,459,441,462],
[430,432,0,424,459,449,452,431,457],
[425,455,466,0,476,471,447,419,430],
[417,421,431,414,0,430,433,413,448],
[417,448,441,419,460,0,424,421,459],
[460,431,438,443,457,466,0,460,451],
[455,449,459,471,477,469,430,0,439],
[421,428,433,460,442,431,439,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,437,464,448,455,432,438,442],
[417,0,424,456,433,436,429,430,437],
[453,466,0,454,451,456,442,442,443],
[426,434,436,0,427,434,437,413,454],
[442,457,439,463,0,449,435,447,462],
[435,454,434,456,441,0,458,438,453],
[458,461,448,453,455,432,0,444,455],
[452,460,448,477,443,452,446,0,456],
[448,453,447,436,428,437,435,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,447,415,447,434,430,446,442],
[435,0,451,414,451,456,405,486,452],
[443,439,0,450,463,453,439,465,415],
[475,476,440,0,445,424,421,469,405],
[443,439,427,445,0,425,402,484,439],
[456,434,437,466,465,0,446,473,426],
[460,485,451,469,488,444,0,463,443],
[444,404,425,421,406,417,427,0,440],
[448,438,475,485,451,464,447,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,439,412,435,445,417,433],
[437,0,430,443,420,430,422,432,419],
[455,460,0,455,435,444,453,437,449],
[451,447,435,0,410,447,444,430,443],
[478,470,455,480,0,454,481,475,439],
[455,460,446,443,436,0,459,454,439],
[445,468,437,446,409,431,0,434,432],
[473,458,453,460,415,436,456,0,445],
[457,471,441,447,451,451,458,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,463,489,450,440,439,441,505],
[374,0,402,412,384,349,329,392,405],
[427,488,0,439,413,379,451,454,506],
[401,478,451,0,428,350,456,435,484],
[440,506,477,462,0,416,428,387,529],
[450,541,511,540,474,0,428,530,506],
[451,561,439,434,462,462,0,402,504],
[449,498,436,455,503,360,488,0,506],
[385,485,384,406,361,384,386,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,441,482,418,427,467,459,413],
[446,0,474,471,430,470,486,470,440],
[449,416,0,458,428,439,470,449,424],
[408,419,432,0,423,413,453,426,416],
[472,460,462,467,0,429,477,445,404],
[463,420,451,477,461,0,458,462,448],
[423,404,420,437,413,432,0,412,399],
[431,420,441,464,445,428,478,0,429],
[477,450,466,474,486,442,491,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,465,446,446,456,470,459,443],
[435,0,430,450,450,430,437,456,420],
[425,460,0,435,470,441,446,453,449],
[444,440,455,0,428,438,449,451,426],
[444,440,420,462,0,445,461,453,433],
[434,460,449,452,445,0,443,458,469],
[420,453,444,441,429,447,0,447,426],
[431,434,437,439,437,432,443,0,422],
[447,470,441,464,457,421,464,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,445,453,465,464,429,444,489],
[442,0,440,448,445,479,450,460,457],
[445,450,0,436,442,466,435,438,457],
[437,442,454,0,430,458,429,442,463],
[425,445,448,460,0,462,444,462,450],
[426,411,424,432,428,0,414,422,440],
[461,440,455,461,446,476,0,454,469],
[446,430,452,448,428,468,436,0,465],
[401,433,433,427,440,450,421,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,438,469,472,466,432,455,445],
[444,0,424,457,458,448,434,423,420],
[452,466,0,499,461,493,438,429,439],
[421,433,391,0,434,446,407,412,388],
[418,432,429,456,0,457,420,439,417],
[424,442,397,444,433,0,426,415,403],
[458,456,452,483,470,464,0,449,415],
[435,467,461,478,451,475,441,0,428],
[445,470,451,502,473,487,475,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,443,517,376,443,429,494,388],
[376,0,461,413,462,429,427,361,340],
[447,429,0,446,359,451,447,395,410],
[373,477,444,0,407,479,379,391,407],
[514,428,531,483,0,469,501,467,458],
[447,461,439,411,421,0,409,422,406],
[461,463,443,511,389,481,0,406,374],
[396,529,495,499,423,468,484,0,457],
[502,550,480,483,432,484,516,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,455,435,437,427,445,418,457],
[467,0,447,434,458,450,449,455,462],
[435,443,0,456,438,445,447,467,446],
[455,456,434,0,431,439,447,482,445],
[453,432,452,459,0,419,438,446,438],
[463,440,445,451,471,0,467,454,435],
[445,441,443,443,452,423,0,460,434],
[472,435,423,408,444,436,430,0,449],
[433,428,444,445,452,455,456,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,479,481,504,460,440,498,470],
[385,0,431,446,454,428,411,451,430],
[411,459,0,464,447,446,416,470,419],
[409,444,426,0,415,432,394,445,416],
[386,436,443,475,0,411,427,444,420],
[430,462,444,458,479,0,420,464,447],
[450,479,474,496,463,470,0,491,440],
[392,439,420,445,446,426,399,0,447],
[420,460,471,474,470,443,450,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,0,594,297,594,297,594,594],
[593,0,297,594,594,890,890,890,890],
[890,593,0,594,297,890,890,890,890],
[296,296,296,0,296,593,296,296,296],
[593,296,593,594,0,593,593,593,593],
[296,0,0,297,297,0,0,0,297],
[593,0,0,594,297,890,0,593,890],
[296,0,0,594,297,890,297,0,890],
[296,0,0,594,297,593,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,399,463,477,470,458,429],
[444,0,432,400,445,439,452,435,439],
[455,458,0,428,462,448,402,438,443],
[491,490,462,0,479,516,452,431,458],
[427,445,428,411,0,473,433,414,401],
[413,451,442,374,417,0,449,419,370],
[420,438,488,438,457,441,0,456,418],
[432,455,452,459,476,471,434,0,470],
[461,451,447,432,489,520,472,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,473,432,449,467,442,452,453],
[421,0,452,428,418,452,444,424,440],
[417,438,0,428,430,449,449,437,459],
[458,462,462,0,445,486,459,468,467],
[441,472,460,445,0,456,447,438,468],
[423,438,441,404,434,0,449,432,470],
[448,446,441,431,443,441,0,422,459],
[438,466,453,422,452,458,468,0,477],
[437,450,431,423,422,420,431,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,433,434,442,421,435,448,412],
[475,0,473,497,472,440,449,467,455],
[457,417,0,477,479,458,429,453,441],
[456,393,413,0,447,441,408,457,439],
[448,418,411,443,0,446,415,477,439],
[469,450,432,449,444,0,417,452,439],
[455,441,461,482,475,473,0,504,454],
[442,423,437,433,413,438,386,0,449],
[478,435,449,451,451,451,436,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,453,433,409,463,457,410,406],
[448,0,451,455,444,439,443,453,451],
[437,439,0,440,469,444,483,453,440],
[457,435,450,0,410,428,432,419,427],
[481,446,421,480,0,451,440,457,475],
[427,451,446,462,439,0,488,428,454],
[433,447,407,458,450,402,0,425,428],
[480,437,437,471,433,462,465,0,459],
[484,439,450,463,415,436,462,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,428,440,438,440,420,460,412],
[501,0,483,466,474,482,436,466,473],
[462,407,0,451,424,456,440,398,426],
[450,424,439,0,478,498,469,458,408],
[452,416,466,412,0,483,473,438,393],
[450,408,434,392,407,0,418,413,401],
[470,454,450,421,417,472,0,454,446],
[430,424,492,432,452,477,436,0,406],
[478,417,464,482,497,489,444,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,483,455,460,452,462,440,463],
[446,0,487,426,444,432,427,428,443],
[407,403,0,394,428,401,405,399,421],
[435,464,496,0,468,455,458,460,446],
[430,446,462,422,0,428,430,429,436],
[438,458,489,435,462,0,453,432,450],
[428,463,485,432,460,437,0,452,455],
[450,462,491,430,461,458,438,0,456],
[427,447,469,444,454,440,435,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,439,428,428,447,429,429,448],
[477,0,469,456,445,454,451,477,482],
[451,421,0,422,426,455,429,444,463],
[462,434,468,0,445,463,439,458,475],
[462,445,464,445,0,457,447,455,481],
[443,436,435,427,433,0,405,435,460],
[461,439,461,451,443,485,0,447,471],
[461,413,446,432,435,455,443,0,468],
[442,408,427,415,409,430,419,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,438,438,442,440,489,454,450],
[431,0,420,414,455,435,446,441,437],
[452,470,0,432,430,443,466,439,448],
[452,476,458,0,477,451,463,473,443],
[448,435,460,413,0,447,470,422,451],
[450,455,447,439,443,0,474,435,447],
[401,444,424,427,420,416,0,417,430],
[436,449,451,417,468,455,473,0,450],
[440,453,442,447,439,443,460,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,469,468,448,441,432,467,470],
[425,0,430,445,411,399,418,444,449],
[421,460,0,479,443,453,454,450,452],
[422,445,411,0,424,411,450,430,435],
[442,479,447,466,0,459,450,468,448],
[449,491,437,479,431,0,433,446,462],
[458,472,436,440,440,457,0,433,412],
[423,446,440,460,422,444,457,0,450],
[420,441,438,455,442,428,478,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,420,405,452,400,400,452,409],
[501,0,474,422,475,423,532,473,401],
[470,416,0,449,438,389,452,493,385],
[485,468,441,0,524,473,527,475,477],
[438,415,452,366,0,484,437,442,456],
[490,467,501,417,406,0,463,397,450],
[490,358,438,363,453,427,0,501,428],
[438,417,397,415,448,493,389,0,418],
[481,489,505,413,434,440,462,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,459,488,451,466,433,465,453],
[400,0,451,384,408,454,435,455,431],
[431,439,0,426,433,463,444,443,431],
[402,506,464,0,459,468,438,416,456],
[439,482,457,431,0,488,479,465,444],
[424,436,427,422,402,0,456,407,398],
[457,455,446,452,411,434,0,436,451],
[425,435,447,474,425,483,454,0,453],
[437,459,459,434,446,492,439,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,580,556,553,489,585,463,491,402],
[310,0,434,404,307,493,433,522,338],
[334,456,0,522,460,584,428,423,366],
[337,486,368,0,398,426,274,334,338],
[401,583,430,492,0,645,432,549,429],
[305,397,306,464,245,0,276,332,336],
[427,457,462,616,458,614,0,487,492],
[399,368,467,556,341,558,403,0,341],
[488,552,524,552,461,554,398,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,444,426,466,460,430,453,436],
[435,0,467,460,469,464,480,480,477],
[446,423,0,432,462,449,429,449,432],
[464,430,458,0,483,444,449,460,436],
[424,421,428,407,0,431,419,436,418],
[430,426,441,446,459,0,433,443,405],
[460,410,461,441,471,457,0,458,414],
[437,410,441,430,454,447,432,0,411],
[454,413,458,454,472,485,476,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,429,429,498,484,441,486,460],
[428,0,419,409,459,463,451,474,458],
[461,471,0,432,466,469,443,471,446],
[461,481,458,0,484,499,479,523,422],
[392,431,424,406,0,486,430,460,430],
[406,427,421,391,404,0,397,430,399],
[449,439,447,411,460,493,0,477,427],
[404,416,419,367,430,460,413,0,409],
[430,432,444,468,460,491,463,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,414,437,433,476,465,432,439],
[438,0,430,441,452,455,445,444,424],
[476,460,0,454,442,482,442,433,417],
[453,449,436,0,439,465,458,451,433],
[457,438,448,451,0,488,475,465,450],
[414,435,408,425,402,0,420,420,414],
[425,445,448,432,415,470,0,426,411],
[458,446,457,439,425,470,464,0,436],
[451,466,473,457,440,476,479,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,488,471,480,473,438,463,477],
[439,0,445,459,464,472,432,465,487],
[402,445,0,438,440,442,420,434,455],
[419,431,452,0,475,450,449,466,483],
[410,426,450,415,0,446,403,438,440],
[417,418,448,440,444,0,423,431,463],
[452,458,470,441,487,467,0,449,495],
[427,425,456,424,452,459,441,0,476],
[413,403,435,407,450,427,395,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,497,454,431,421,456,467,400],
[476,0,477,438,448,439,452,447,449],
[393,413,0,404,421,405,404,486,412],
[436,452,486,0,485,419,444,445,439],
[459,442,469,405,0,415,461,417,383],
[469,451,485,471,475,0,433,475,451],
[434,438,486,446,429,457,0,484,411],
[423,443,404,445,473,415,406,0,416],
[490,441,478,451,507,439,479,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,466,419,459,459,466,485,466],
[435,0,464,432,412,408,412,420,446],
[424,426,0,426,424,413,451,456,459],
[471,458,464,0,423,406,452,445,471],
[431,478,466,467,0,431,430,423,463],
[431,482,477,484,459,0,443,452,482],
[424,478,439,438,460,447,0,413,503],
[405,470,434,445,467,438,477,0,467],
[424,444,431,419,427,408,387,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,406,450,508,478,472,516,492],
[457,0,425,374,430,413,454,462,439],
[484,465,0,471,467,489,464,454,399],
[440,516,419,0,471,470,481,494,417],
[382,460,423,419,0,390,495,490,438],
[412,477,401,420,500,0,495,429,450],
[418,436,426,409,395,395,0,412,411],
[374,428,436,396,400,461,478,0,386],
[398,451,491,473,452,440,479,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,486,470,438,476,497,466,457],
[445,0,457,432,426,415,424,422,437],
[404,433,0,415,422,429,433,427,454],
[420,458,475,0,454,453,476,458,446],
[452,464,468,436,0,442,485,467,437],
[414,475,461,437,448,0,461,448,452],
[393,466,457,414,405,429,0,419,444],
[424,468,463,432,423,442,471,0,440],
[433,453,436,444,453,438,446,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,378,387,429,401,415,419,443,451],
[512,0,423,478,477,460,462,450,455],
[503,467,0,465,462,439,456,469,453],
[461,412,425,0,431,419,462,439,462],
[489,413,428,459,0,420,456,492,447],
[475,430,451,471,470,0,479,477,446],
[471,428,434,428,434,411,0,453,442],
[447,440,421,451,398,413,437,0,434],
[439,435,437,428,443,444,448,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,422,423,423,427,466,441,446],
[470,0,440,474,454,473,474,457,432],
[468,450,0,462,482,452,470,440,443],
[467,416,428,0,453,462,469,460,441],
[467,436,408,437,0,433,457,449,463],
[463,417,438,428,457,0,469,457,441],
[424,416,420,421,433,421,0,440,433],
[449,433,450,430,441,433,450,0,436],
[444,458,447,449,427,449,457,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,445,223,669,445,669,445,666],
[667,0,669,669,446,445,446,446,667],
[445,221,0,668,445,223,445,224,445],
[667,221,222,0,667,445,667,222,443],
[221,444,445,223,0,445,666,445,443],
[445,445,667,445,445,0,445,446,667],
[221,444,445,223,224,445,0,222,443],
[445,444,666,668,445,444,668,0,443],
[224,223,445,447,447,223,447,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,470,443,450,470,412,369,408],
[438,0,445,473,404,482,384,395,397],
[420,445,0,410,436,404,430,405,451],
[447,417,480,0,442,443,400,369,409],
[440,486,454,448,0,497,482,395,439],
[420,408,486,447,393,0,412,412,393],
[478,506,460,490,408,478,0,422,467],
[521,495,485,521,495,478,468,0,439],
[482,493,439,481,451,497,423,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,445,423,429,423,454,447,433],
[456,0,452,452,431,444,472,456,438],
[445,438,0,438,445,439,438,462,453],
[467,438,452,0,444,471,446,457,447],
[461,459,445,446,0,464,452,464,443],
[467,446,451,419,426,0,430,444,437],
[436,418,452,444,438,460,0,460,427],
[443,434,428,433,426,446,430,0,434],
[457,452,437,443,447,453,463,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,444,477,501,395,612,447,387],
[444,0,474,338,559,475,557,388,413],
[446,416,0,502,553,446,557,389,499],
[413,552,388,0,552,444,554,469,470],
[389,331,337,338,0,307,446,277,332],
[495,415,444,446,583,0,666,527,470],
[278,333,333,336,444,224,0,306,360],
[443,502,501,421,613,363,584,0,523],
[503,477,391,420,558,420,530,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,450,467,473,420,431,459,449],
[426,0,417,410,440,410,402,418,447],
[440,473,0,472,459,452,408,418,414],
[423,480,418,0,473,401,405,459,459],
[417,450,431,417,0,407,431,441,434],
[470,480,438,489,483,0,461,455,491],
[459,488,482,485,459,429,0,459,478],
[431,472,472,431,449,435,431,0,417],
[441,443,476,431,456,399,412,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,449,446,453,458,447,445,456],
[432,0,460,436,437,442,440,447,445],
[441,430,0,425,442,435,430,456,431],
[444,454,465,0,444,428,437,453,452],
[437,453,448,446,0,435,438,447,433],
[432,448,455,462,455,0,434,463,455],
[443,450,460,453,452,456,0,458,436],
[445,443,434,437,443,427,432,0,442],
[434,445,459,438,457,435,454,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,0,296,296,593,296,296,593],
[297,0,297,297,297,297,0,0,890],
[890,593,0,593,296,593,593,296,593],
[594,593,297,0,297,593,0,0,890],
[594,593,594,593,0,593,297,0,593],
[297,593,297,297,297,0,297,297,593],
[594,890,297,890,593,593,0,593,890],
[594,890,594,890,890,593,297,0,890],
[297,0,297,0,297,297,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,445,450,457,439,462,468],
[433,0,449,421,434,436,414,451,438],
[429,441,0,446,440,435,453,446,455],
[445,469,444,0,448,460,458,464,471],
[440,456,450,442,0,446,448,469,454],
[433,454,455,430,444,0,430,465,466],
[451,476,437,432,442,460,0,453,457],
[428,439,444,426,421,425,437,0,451],
[422,452,435,419,436,424,433,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,423,443,462,448,461,402,422],
[445,0,410,457,428,418,433,418,424],
[467,480,0,455,453,447,458,447,441],
[447,433,435,0,423,406,457,412,429],
[428,462,437,467,0,438,436,437,457],
[442,472,443,484,452,0,469,435,427],
[429,457,432,433,454,421,0,390,409],
[488,472,443,478,453,455,500,0,472],
[468,466,449,461,433,463,481,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,453,447,460,437,425,456,441],
[461,0,492,465,445,442,469,479,450],
[437,398,0,410,415,434,424,435,442],
[443,425,480,0,434,462,448,467,459],
[430,445,475,456,0,474,471,499,451],
[453,448,456,428,416,0,437,467,440],
[465,421,466,442,419,453,0,483,473],
[434,411,455,423,391,423,407,0,429],
[449,440,448,431,439,450,417,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,443,427,431,440,440,423,431],
[447,0,452,432,442,449,453,450,439],
[447,438,0,429,434,453,460,463,430],
[463,458,461,0,464,449,460,441,439],
[459,448,456,426,0,442,460,456,433],
[450,441,437,441,448,0,453,463,426],
[450,437,430,430,430,437,0,469,453],
[467,440,427,449,434,427,421,0,436],
[459,451,460,451,457,464,437,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,365,439,484,466,402,458,436],
[411,0,466,466,497,484,513,528,462],
[525,424,0,482,541,512,528,515,500],
[451,424,408,0,450,431,413,515,432],
[406,393,349,440,0,479,451,442,490],
[424,406,378,459,411,0,429,456,435],
[488,377,362,477,439,461,0,464,444],
[432,362,375,375,448,434,426,0,483],
[454,428,390,458,400,455,446,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,447,453,429,444,426,455,444],
[439,0,439,448,440,451,418,446,438],
[443,451,0,449,437,438,453,441,435],
[437,442,441,0,447,445,449,453,447],
[461,450,453,443,0,446,438,455,444],
[446,439,452,445,444,0,431,444,435],
[464,472,437,441,452,459,0,460,447],
[435,444,449,437,435,446,430,0,441],
[446,452,455,443,446,455,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,457,528,469,485,471,427,445],
[421,0,459,396,387,472,437,469,418],
[433,431,0,464,463,481,445,407,465],
[362,494,426,0,467,468,472,397,478],
[421,503,427,423,0,521,561,415,493],
[405,418,409,422,369,0,434,372,428],
[419,453,445,418,329,456,0,350,381],
[463,421,483,493,475,518,540,0,561],
[445,472,425,412,397,462,509,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,459,508,479,446,447,500,412],
[386,0,374,439,359,406,381,463,369],
[431,516,0,469,426,477,480,478,498],
[382,451,421,0,379,437,379,426,420],
[411,531,464,511,0,465,439,560,464],
[444,484,413,453,425,0,447,458,436],
[443,509,410,511,451,443,0,503,441],
[390,427,412,464,330,432,387,0,349],
[478,521,392,470,426,454,449,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,890,890,890,445,890,445,890,445],
[0,0,0,445,0,445,0,0,0],
[0,890,0,890,0,890,0,0,445],
[0,445,0,0,0,445,0,0,0],
[445,890,890,890,0,890,445,890,445],
[0,445,0,445,0,0,0,0,0],
[445,890,890,890,445,890,0,890,890],
[0,890,890,890,0,890,0,0,445],
[445,890,445,890,445,890,0,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,434,432,449,441,445,454,445],
[444,0,437,431,429,415,423,429,427],
[456,453,0,464,455,461,453,432,448],
[458,459,426,0,476,464,452,431,440],
[441,461,435,414,0,441,419,458,448],
[449,475,429,426,449,0,457,430,441],
[445,467,437,438,471,433,0,426,457],
[436,461,458,459,432,460,464,0,451],
[445,463,442,450,442,449,433,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,476,472,451,422,436,455,428],
[434,0,461,429,429,422,450,465,391],
[414,429,0,411,422,413,411,434,387],
[418,461,479,0,449,416,428,456,422],
[439,461,468,441,0,427,451,466,463],
[468,468,477,474,463,0,430,487,452],
[454,440,479,462,439,460,0,498,437],
[435,425,456,434,424,403,392,0,402],
[462,499,503,468,427,438,453,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,431,431,454,436,441,439,445],
[444,0,453,454,477,452,449,454,432],
[459,437,0,481,480,441,455,459,462],
[459,436,409,0,456,438,434,434,421],
[436,413,410,434,0,433,429,415,418],
[454,438,449,452,457,0,434,449,438],
[449,441,435,456,461,456,0,457,451],
[451,436,431,456,475,441,433,0,427],
[445,458,428,469,472,452,439,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,412,450,453,427,425,437,407],
[474,0,424,473,447,453,465,456,437],
[478,466,0,460,465,456,453,450,423],
[440,417,430,0,437,438,406,430,420],
[437,443,425,453,0,431,439,422,423],
[463,437,434,452,459,0,439,424,416],
[465,425,437,484,451,451,0,454,440],
[453,434,440,460,468,466,436,0,455],
[483,453,467,470,467,474,450,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,477,483,454,462,457,481,457],
[452,0,462,479,435,458,446,466,461],
[413,428,0,428,433,444,436,431,442],
[407,411,462,0,413,418,416,440,441],
[436,455,457,477,0,456,441,454,469],
[428,432,446,472,434,0,455,464,448],
[433,444,454,474,449,435,0,449,448],
[409,424,459,450,436,426,441,0,430],
[433,429,448,449,421,442,442,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,427,421,440,424,438,444,449],
[484,0,443,458,465,451,458,447,469],
[463,447,0,436,469,425,469,446,464],
[469,432,454,0,451,449,467,451,461],
[450,425,421,439,0,422,438,425,443],
[466,439,465,441,468,0,470,456,452],
[452,432,421,423,452,420,0,415,435],
[446,443,444,439,465,434,475,0,446],
[441,421,426,429,447,438,455,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,439,441,460,438,433,437],
[449,0,470,436,428,475,446,426,428],
[446,420,0,429,412,440,444,415,433],
[451,454,461,0,441,460,457,446,435],
[449,462,478,449,0,491,451,435,456],
[430,415,450,430,399,0,447,440,435],
[452,444,446,433,439,443,0,441,457],
[457,464,475,444,455,450,449,0,453],
[453,462,457,455,434,455,433,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,445,477,482,476,530,473,399],
[478,0,383,506,455,424,478,481,423],
[445,507,0,473,459,473,487,479,473],
[413,384,417,0,419,456,444,421,389],
[408,435,431,471,0,441,449,475,435],
[414,466,417,434,449,0,436,479,427],
[360,412,403,446,441,454,0,463,402],
[417,409,411,469,415,411,427,0,400],
[491,467,417,501,455,463,488,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,462,436,437,478,464,446],
[437,0,433,418,435,452,457,446,437],
[455,457,0,449,467,425,460,453,426],
[428,472,441,0,463,460,460,462,463],
[454,455,423,427,0,440,423,442,409],
[453,438,465,430,450,0,443,435,442],
[412,433,430,430,467,447,0,454,441],
[426,444,437,428,448,455,436,0,445],
[444,453,464,427,481,448,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,453,438,455,473,436,470,452],
[417,0,457,438,455,474,447,469,439],
[437,433,0,411,431,467,444,448,403],
[452,452,479,0,438,456,443,467,439],
[435,435,459,452,0,457,438,470,453],
[417,416,423,434,433,0,416,454,412],
[454,443,446,447,452,474,0,463,451],
[420,421,442,423,420,436,427,0,415],
[438,451,487,451,437,478,439,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,472,468,460,479,487,453,433],
[444,0,438,460,455,441,471,451,452],
[418,452,0,456,446,458,464,426,438],
[422,430,434,0,448,440,461,430,425],
[430,435,444,442,0,451,481,426,417],
[411,449,432,450,439,0,493,432,430],
[403,419,426,429,409,397,0,407,403],
[437,439,464,460,464,458,483,0,430],
[457,438,452,465,473,460,487,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,396,442,466,436,442,406,425],
[450,0,463,498,460,435,475,458,428],
[494,427,0,449,484,484,522,428,450],
[448,392,441,0,439,433,439,428,436],
[424,430,406,451,0,457,511,482,478],
[454,455,406,457,433,0,443,442,414],
[448,415,368,451,379,447,0,472,410],
[484,432,462,462,408,448,418,0,415],
[465,462,440,454,412,476,480,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,419,419,443,421,458,438,457],
[459,0,448,440,463,464,474,470,465],
[471,442,0,467,455,471,475,467,454],
[471,450,423,0,480,453,461,452,445],
[447,427,435,410,0,451,447,443,452],
[469,426,419,437,439,0,476,452,460],
[432,416,415,429,443,414,0,437,427],
[452,420,423,438,447,438,453,0,476],
[433,425,436,445,438,430,463,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,413,426,461,480,428,434,447],
[438,0,417,382,465,462,420,430,418],
[477,473,0,447,473,487,440,439,489],
[464,508,443,0,491,478,474,467,456],
[429,425,417,399,0,448,417,426,433],
[410,428,403,412,442,0,419,425,412],
[462,470,450,416,473,471,0,461,457],
[456,460,451,423,464,465,429,0,455],
[443,472,401,434,457,478,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,457,448,436,425,465,447,455],
[427,0,435,414,430,446,444,437,416],
[433,455,0,413,417,457,439,433,440],
[442,476,477,0,452,472,492,459,437],
[454,460,473,438,0,470,474,447,448],
[465,444,433,418,420,0,437,384,448],
[425,446,451,398,416,453,0,429,421],
[443,453,457,431,443,506,461,0,430],
[435,474,450,453,442,442,469,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,480,445,467,445,461,454,452],
[430,0,442,416,453,442,419,438,435],
[410,448,0,458,444,432,456,435,450],
[445,474,432,0,446,436,448,463,454],
[423,437,446,444,0,437,448,459,456],
[445,448,458,454,453,0,455,454,443],
[429,471,434,442,442,435,0,452,472],
[436,452,455,427,431,436,438,0,455],
[438,455,440,436,434,447,418,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,442,457,434,459,454,439,423],
[477,0,438,476,432,475,456,461,457],
[448,452,0,487,461,464,474,475,436],
[433,414,403,0,423,457,455,441,424],
[456,458,429,467,0,463,444,450,456],
[431,415,426,433,427,0,449,440,446],
[436,434,416,435,446,441,0,471,427],
[451,429,415,449,440,450,419,0,409],
[467,433,454,466,434,444,463,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,452,449,447,452,453,442,441],
[437,0,431,452,443,462,437,451,449],
[438,459,0,467,426,444,429,457,452],
[441,438,423,0,422,457,437,447,462],
[443,447,464,468,0,466,468,460,473],
[438,428,446,433,424,0,435,453,466],
[437,453,461,453,422,455,0,452,472],
[448,439,433,443,430,437,438,0,428],
[449,441,438,428,417,424,418,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,475,444,446,426,453,479,450],
[456,0,449,444,442,450,439,445,464],
[415,441,0,436,459,435,405,459,443],
[446,446,454,0,440,452,452,474,447],
[444,448,431,450,0,433,429,437,460],
[464,440,455,438,457,0,407,451,433],
[437,451,485,438,461,483,0,459,463],
[411,445,431,416,453,439,431,0,451],
[440,426,447,443,430,457,427,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,434,389,505,422,413,440,470],
[443,0,424,437,453,446,372,461,521],
[456,466,0,465,507,454,421,497,489],
[501,453,425,0,468,422,451,494,491],
[385,437,383,422,0,437,373,443,439],
[468,444,436,468,453,0,427,470,490],
[477,518,469,439,517,463,0,427,492],
[450,429,393,396,447,420,463,0,480],
[420,369,401,399,451,400,398,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,439,431,462,458,415,455,453],
[435,0,442,461,457,470,437,461,446],
[451,448,0,456,469,461,434,466,484],
[459,429,434,0,443,451,460,469,459],
[428,433,421,447,0,443,423,463,432],
[432,420,429,439,447,0,420,430,438],
[475,453,456,430,467,470,0,466,469],
[435,429,424,421,427,460,424,0,461],
[437,444,406,431,458,452,421,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,474,498,409,445,450,452,427],
[437,0,470,448,415,422,452,443,445],
[416,420,0,435,415,399,459,446,434],
[392,442,455,0,424,426,458,441,446],
[481,475,475,466,0,438,474,483,438],
[445,468,491,464,452,0,489,483,476],
[440,438,431,432,416,401,0,427,414],
[438,447,444,449,407,407,463,0,412],
[463,445,456,444,452,414,476,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,427,427,438,428,438,415,425],
[468,0,453,447,436,462,454,443,460],
[463,437,0,429,453,451,446,433,452],
[463,443,461,0,429,461,445,421,445],
[452,454,437,461,0,441,426,453,467],
[462,428,439,429,449,0,443,447,440],
[452,436,444,445,464,447,0,445,432],
[475,447,457,469,437,443,445,0,445],
[465,430,438,445,423,450,458,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,460,429,462,445,445,436,459],
[457,0,446,425,455,446,433,438,462],
[430,444,0,407,421,423,432,399,418],
[461,465,483,0,486,446,471,439,478],
[428,435,469,404,0,445,448,422,424],
[445,444,467,444,445,0,451,407,471],
[445,457,458,419,442,439,0,453,442],
[454,452,491,451,468,483,437,0,459],
[431,428,472,412,466,419,448,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,445,456,469,423,431,435,450],
[452,0,461,485,454,467,474,472,444],
[445,429,0,465,476,421,420,454,444],
[434,405,425,0,421,434,426,434,436],
[421,436,414,469,0,433,430,438,440],
[467,423,469,456,457,0,461,472,476],
[459,416,470,464,460,429,0,471,459],
[455,418,436,456,452,418,419,0,425],
[440,446,446,454,450,414,431,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,433,470,430,484,456,428,468],
[446,0,458,491,448,473,449,443,486],
[457,432,0,468,417,457,464,441,472],
[420,399,422,0,393,473,405,392,453],
[460,442,473,497,0,485,456,445,515],
[406,417,433,417,405,0,407,430,431],
[434,441,426,485,434,483,0,440,459],
[462,447,449,498,445,460,450,0,464],
[422,404,418,437,375,459,431,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,477,511,486,448,439,467,436],
[415,0,432,465,430,413,429,434,401],
[413,458,0,484,428,443,439,444,447],
[379,425,406,0,419,408,414,397,387],
[404,460,462,471,0,441,408,443,433],
[442,477,447,482,449,0,444,475,445],
[451,461,451,476,482,446,0,455,430],
[423,456,446,493,447,415,435,0,448],
[454,489,443,503,457,445,460,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,459,415,439,436,434,455,442],
[415,0,444,427,442,451,428,434,455],
[431,446,0,415,430,448,417,434,453],
[475,463,475,0,443,460,456,464,469],
[451,448,460,447,0,436,423,456,436],
[454,439,442,430,454,0,433,436,445],
[456,462,473,434,467,457,0,459,458],
[435,456,456,426,434,454,431,0,438],
[448,435,437,421,454,445,432,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,325,467,395,286,289,360,324],
[423,0,324,320,390,248,249,282,177],
[565,566,0,602,641,355,464,456,319],
[423,570,288,0,467,285,394,355,216],
[495,500,249,423,0,355,281,318,390],
[604,642,535,605,535,0,568,497,430],
[601,641,426,496,609,322,0,350,323],
[530,608,434,535,572,393,540,0,505],
[566,713,571,674,500,460,567,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,448,455,461,439,474,443,428],
[425,0,434,447,442,438,481,437,433],
[442,456,0,450,462,435,486,441,443],
[435,443,440,0,450,456,476,457,459],
[429,448,428,440,0,436,455,439,441],
[451,452,455,434,454,0,462,437,451],
[416,409,404,414,435,428,0,437,419],
[447,453,449,433,451,453,453,0,453],
[462,457,447,431,449,439,471,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,429,444,443,430,403,419,427],
[464,0,444,434,417,439,427,410,415],
[461,446,0,444,443,417,423,385,424],
[446,456,446,0,442,446,429,420,442],
[447,473,447,448,0,426,407,393,419],
[460,451,473,444,464,0,413,448,432],
[487,463,467,461,483,477,0,457,421],
[471,480,505,470,497,442,433,0,471],
[463,475,466,448,471,458,469,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,423,447,451,444,441,472,455],
[470,0,442,456,456,457,453,464,446],
[467,448,0,453,470,428,454,461,458],
[443,434,437,0,450,422,436,465,439],
[439,434,420,440,0,442,437,455,422],
[446,433,462,468,448,0,438,442,451],
[449,437,436,454,453,452,0,485,456],
[418,426,429,425,435,448,405,0,432],
[435,444,432,451,468,439,434,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,425,387,426,425,435,393,423],
[474,0,461,464,464,466,457,440,459],
[465,429,0,433,424,469,452,439,427],
[503,426,457,0,449,479,437,475,458],
[464,426,466,441,0,481,449,450,463],
[465,424,421,411,409,0,433,455,426],
[455,433,438,453,441,457,0,458,471],
[497,450,451,415,440,435,432,0,453],
[467,431,463,432,427,464,419,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,444,466,464,452,465,462,437],
[428,0,464,467,466,425,459,440,447],
[446,426,0,433,424,435,445,423,409],
[424,423,457,0,418,444,413,438,408],
[426,424,466,472,0,461,471,471,459],
[438,465,455,446,429,0,424,467,401],
[425,431,445,477,419,466,0,442,440],
[428,450,467,452,419,423,448,0,420],
[453,443,481,482,431,489,450,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,455,429,450,417,432,453,455],
[463,0,468,445,468,467,432,469,452],
[435,422,0,430,460,447,423,447,441],
[461,445,460,0,467,472,457,466,484],
[440,422,430,423,0,427,410,422,437],
[473,423,443,418,463,0,438,460,445],
[458,458,467,433,480,452,0,496,464],
[437,421,443,424,468,430,394,0,449],
[435,438,449,406,453,445,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,440,342,346,293,396,494,393],
[545,0,693,491,594,490,594,642,444],
[450,197,0,394,446,393,447,492,344],
[548,399,496,0,450,396,448,546,494],
[544,296,444,440,0,293,594,445,394],
[597,400,497,494,597,0,597,594,542],
[494,296,443,442,296,293,0,394,444],
[396,248,398,344,445,296,496,0,295],
[497,446,546,396,496,348,446,595,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,438,443,470,456,422,507,489],
[381,0,394,481,441,430,371,417,421],
[452,496,0,510,388,471,447,479,472],
[447,409,380,0,401,477,413,443,399],
[420,449,502,489,0,466,404,460,370],
[434,460,419,413,424,0,383,401,411],
[468,519,443,477,486,507,0,523,448],
[383,473,411,447,430,489,367,0,407],
[401,469,418,491,520,479,442,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,415,466,425,454,455,462,457],
[428,0,401,447,427,418,442,464,427],
[475,489,0,473,443,473,459,499,462],
[424,443,417,0,438,449,428,457,421],
[465,463,447,452,0,441,447,470,452],
[436,472,417,441,449,0,428,466,453],
[435,448,431,462,443,462,0,468,463],
[428,426,391,433,420,424,422,0,412],
[433,463,428,469,438,437,427,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,445,431,437,420,458,422,443],
[406,0,429,420,431,430,460,433,452],
[445,461,0,420,442,438,474,417,447],
[459,470,470,0,436,456,454,452,472],
[453,459,448,454,0,417,482,415,454],
[470,460,452,434,473,0,471,421,445],
[432,430,416,436,408,419,0,407,435],
[468,457,473,438,475,469,483,0,470],
[447,438,443,418,436,445,455,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,455,486,441,430,450,447,450],
[452,0,435,454,428,447,421,448,444],
[435,455,0,466,434,432,426,454,409],
[404,436,424,0,440,425,405,439,449],
[449,462,456,450,0,431,440,419,432],
[460,443,458,465,459,0,433,452,458],
[440,469,464,485,450,457,0,446,443],
[443,442,436,451,471,438,444,0,457],
[440,446,481,441,458,432,447,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,421,479,443,432,427,485,448],
[409,0,426,445,441,482,428,474,456],
[469,464,0,485,476,454,442,460,443],
[411,445,405,0,431,423,431,444,449],
[447,449,414,459,0,480,417,460,484],
[458,408,436,467,410,0,438,420,431],
[463,462,448,459,473,452,0,488,431],
[405,416,430,446,430,470,402,0,447],
[442,434,447,441,406,459,459,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,444,464,448,444,436,464,459],
[451,0,445,469,470,486,457,459,458],
[446,445,0,448,440,446,447,461,427],
[426,421,442,0,425,445,424,427,433],
[442,420,450,465,0,446,423,460,433],
[446,404,444,445,444,0,414,454,438],
[454,433,443,466,467,476,0,451,449],
[426,431,429,463,430,436,439,0,420],
[431,432,463,457,457,452,441,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,412,454,434,522,475,431,457],
[415,0,413,457,394,522,482,389,458],
[478,477,0,412,392,544,498,412,435],
[436,433,478,0,460,412,498,476,455],
[456,496,498,430,0,518,521,454,541],
[368,368,346,478,372,0,480,430,368],
[415,408,392,392,369,410,0,343,435],
[459,501,478,414,436,460,547,0,413],
[433,432,455,435,349,522,455,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,459,464,453,468,462,442,461],
[420,0,457,447,444,458,489,464,462],
[431,433,0,420,428,434,484,445,435],
[426,443,470,0,473,469,498,484,448],
[437,446,462,417,0,431,509,453,457],
[422,432,456,421,459,0,481,440,424],
[428,401,406,392,381,409,0,433,381],
[448,426,445,406,437,450,457,0,427],
[429,428,455,442,433,466,509,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,467,421,457,454,460,477,468],
[486,0,489,477,548,512,427,478,539],
[423,401,0,436,413,406,427,475,460],
[469,413,454,0,470,434,453,491,451],
[433,342,477,420,0,464,424,449,457],
[436,378,484,456,426,0,451,454,433],
[430,463,463,437,466,439,0,467,483],
[413,412,415,399,441,436,423,0,424],
[422,351,430,439,433,457,407,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,473,484,478,473,513,455,444],
[428,0,475,480,463,447,489,421,473],
[417,415,0,444,452,453,456,435,426],
[406,410,446,0,428,436,515,440,436],
[412,427,438,462,0,443,459,417,482],
[417,443,437,454,447,0,485,448,417],
[377,401,434,375,431,405,0,380,369],
[435,469,455,450,473,442,510,0,446],
[446,417,464,454,408,473,521,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,439,420,440,447,443,446,435],
[433,0,437,440,441,466,438,418,444],
[451,453,0,445,455,498,453,452,457],
[470,450,445,0,458,486,472,448,466],
[450,449,435,432,0,436,410,422,431],
[443,424,392,404,454,0,406,417,430],
[447,452,437,418,480,484,0,431,445],
[444,472,438,442,468,473,459,0,468],
[455,446,433,424,459,460,445,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,426,447,477,448,477,413,486],
[500,0,450,462,485,443,512,411,562],
[464,440,0,426,454,429,474,466,508],
[443,428,464,0,458,455,477,503,491],
[413,405,436,432,0,450,424,395,475],
[442,447,461,435,440,0,461,445,509],
[413,378,416,413,466,429,0,416,499],
[477,479,424,387,495,445,474,0,505],
[404,328,382,399,415,381,391,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,445,442,446,426,474,461,425],
[465,0,459,462,435,458,476,451,434],
[445,431,0,461,462,460,460,443,424],
[448,428,429,0,435,461,468,441,409],
[444,455,428,455,0,467,467,466,446],
[464,432,430,429,423,0,460,432,437],
[416,414,430,422,423,430,0,436,393],
[429,439,447,449,424,458,454,0,420],
[465,456,466,481,444,453,497,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,456,441,462,441,442,475,458],
[454,0,454,457,444,458,478,473,484],
[434,436,0,455,451,421,457,470,457],
[449,433,435,0,454,444,444,443,447],
[428,446,439,436,0,418,447,445,463],
[449,432,469,446,472,0,461,460,451],
[448,412,433,446,443,429,0,466,454],
[415,417,420,447,445,430,424,0,445],
[432,406,433,443,427,439,436,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,413,446,463,417,439,412,466],
[438,0,434,385,416,407,426,421,442],
[477,456,0,437,469,468,450,462,451],
[444,505,453,0,474,464,448,461,462],
[427,474,421,416,0,447,447,460,433],
[473,483,422,426,443,0,461,486,466],
[451,464,440,442,443,429,0,441,467],
[478,469,428,429,430,404,449,0,434],
[424,448,439,428,457,424,423,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,451,413,444,426,435,462,458],
[439,0,460,444,444,453,459,436,470],
[439,430,0,424,431,422,450,436,451],
[477,446,466,0,436,448,425,458,470],
[446,446,459,454,0,438,450,444,462],
[464,437,468,442,452,0,447,476,474],
[455,431,440,465,440,443,0,439,465],
[428,454,454,432,446,414,451,0,464],
[432,420,439,420,428,416,425,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,431,458,453,465,446,460,458],
[429,0,431,438,464,451,417,437,448],
[459,459,0,489,468,477,437,473,462],
[432,452,401,0,441,435,427,460,428],
[437,426,422,449,0,446,420,431,417],
[425,439,413,455,444,0,436,436,443],
[444,473,453,463,470,454,0,455,456],
[430,453,417,430,459,454,435,0,446],
[432,442,428,462,473,447,434,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,755,663,463,627,722,493,687],
[463,0,627,597,430,628,627,427,592],
[135,263,0,236,297,394,332,265,362],
[227,293,654,0,363,359,492,293,455],
[427,460,593,527,0,493,560,428,492],
[263,262,496,531,397,0,462,398,428],
[168,263,558,398,330,428,0,231,425],
[397,463,625,597,462,492,659,0,691],
[203,298,528,435,398,462,465,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,465,445,447,438,506,433,452],
[486,0,445,473,473,454,431,477,451],
[425,445,0,419,468,438,446,442,434],
[445,417,471,0,490,499,491,454,448],
[443,417,422,400,0,389,435,390,358],
[452,436,452,391,501,0,480,438,411],
[384,459,444,399,455,410,0,397,377],
[457,413,448,436,500,452,493,0,423],
[438,439,456,442,532,479,513,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,452,419,439,477,440,452,429],
[422,0,426,408,427,421,417,422,411],
[438,464,0,432,458,468,456,452,441],
[471,482,458,0,444,454,442,461,425],
[451,463,432,446,0,474,456,459,452],
[413,469,422,436,416,0,432,448,428],
[450,473,434,448,434,458,0,446,439],
[438,468,438,429,431,442,444,0,423],
[461,479,449,465,438,462,451,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,556,460,491,615,523,494,431],
[489,0,463,485,458,522,548,339,305],
[334,427,0,397,428,429,397,309,399],
[430,405,493,0,458,554,582,339,401],
[399,432,462,432,0,643,553,373,459],
[275,368,461,336,247,0,334,245,334],
[367,342,493,308,337,556,0,278,309],
[396,551,581,551,517,645,612,0,460],
[459,585,491,489,431,556,581,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,423,441,427,434,416,429,441],
[462,0,429,470,443,474,415,480,452],
[467,461,0,477,451,461,445,449,442],
[449,420,413,0,427,452,408,422,432],
[463,447,439,463,0,463,447,459,455],
[456,416,429,438,427,0,422,442,457],
[474,475,445,482,443,468,0,498,459],
[461,410,441,468,431,448,392,0,447],
[449,438,448,458,435,433,431,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,458,437,448,456,451,468,459],
[432,0,443,432,429,420,443,478,444],
[432,447,0,449,429,431,448,463,460],
[453,458,441,0,432,450,428,479,463],
[442,461,461,458,0,451,457,476,470],
[434,470,459,440,439,0,450,475,467],
[439,447,442,462,433,440,0,457,452],
[422,412,427,411,414,415,433,0,451],
[431,446,430,427,420,423,438,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,438,456,470,446,453,432],
[434,0,451,447,433,445,440,442,463],
[448,439,0,456,449,463,465,460,451],
[452,443,434,0,440,470,432,418,440],
[434,457,441,450,0,463,452,440,439],
[420,445,427,420,427,0,430,443,457],
[444,450,425,458,438,460,0,421,446],
[437,448,430,472,450,447,469,0,440],
[458,427,439,450,451,433,444,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,434,417,446,421,435,432,438],
[438,0,436,374,430,382,464,439,452],
[456,454,0,422,426,402,467,438,453],
[473,516,468,0,428,453,479,485,490],
[444,460,464,462,0,404,441,459,453],
[469,508,488,437,486,0,503,480,494],
[455,426,423,411,449,387,0,446,473],
[458,451,452,405,431,410,444,0,439],
[452,438,437,400,437,396,417,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,488,421,492,480,449,512,487],
[437,0,442,406,495,449,428,439,423],
[402,448,0,421,487,427,373,474,415],
[469,484,469,0,483,438,391,486,432],
[398,395,403,407,0,433,348,415,407],
[410,441,463,452,457,0,446,473,458],
[441,462,517,499,542,444,0,464,451],
[378,451,416,404,475,417,426,0,417],
[403,467,475,458,483,432,439,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,346,344,265,325,382,369,415,380],
[544,0,329,344,365,466,393,471,364],
[546,561,0,449,418,507,412,523,415],
[625,546,441,0,422,514,453,510,387],
[565,525,472,468,0,473,432,505,455],
[508,424,383,376,417,0,488,471,397],
[521,497,478,437,458,402,0,495,409],
[475,419,367,380,385,419,395,0,461],
[510,526,475,503,435,493,481,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,439,456,444,447,451,452,442],
[445,0,444,449,458,459,459,456,434],
[451,446,0,478,456,460,450,471,440],
[434,441,412,0,429,453,437,443,424],
[446,432,434,461,0,453,438,438,444],
[443,431,430,437,437,0,433,424,448],
[439,431,440,453,452,457,0,446,433],
[438,434,419,447,452,466,444,0,417],
[448,456,450,466,446,442,457,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,455,490,461,441,460,468,449],
[433,0,433,445,452,433,441,471,417],
[435,457,0,415,423,422,372,482,374],
[400,445,475,0,485,436,431,451,436],
[429,438,467,405,0,415,414,476,441],
[449,457,468,454,475,0,452,492,432],
[430,449,518,459,476,438,0,472,440],
[422,419,408,439,414,398,418,0,403],
[441,473,516,454,449,458,450,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,433,426,429,447,447,462,447],
[445,0,404,436,420,465,420,459,442],
[457,486,0,446,439,453,437,480,465],
[464,454,444,0,462,468,447,454,449],
[461,470,451,428,0,465,449,469,464],
[443,425,437,422,425,0,401,456,442],
[443,470,453,443,441,489,0,471,454],
[428,431,410,436,421,434,419,0,462],
[443,448,425,441,426,448,436,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,392,388,411,397,400,433,416],
[442,0,417,440,434,399,368,460,436],
[498,473,0,464,457,414,431,470,443],
[502,450,426,0,458,423,419,465,437],
[479,456,433,432,0,415,403,433,442],
[493,491,476,467,475,0,445,490,488],
[490,522,459,471,487,445,0,504,447],
[457,430,420,425,457,400,386,0,427],
[474,454,447,453,448,402,443,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,511,370,443,443,469,465,465],
[397,0,351,444,465,352,372,393,492],
[379,539,0,328,397,430,379,423,398],
[520,446,562,0,559,518,472,445,540],
[447,425,493,331,0,449,376,401,398],
[447,538,460,372,441,0,447,466,440],
[421,518,511,418,514,443,0,423,442],
[425,497,467,445,489,424,467,0,444],
[425,398,492,350,492,450,448,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,448,469,445,436,408,455,434],
[462,0,419,442,446,447,434,438,440],
[442,471,0,467,413,431,432,421,430],
[421,448,423,0,434,417,435,443,454],
[445,444,477,456,0,428,418,457,440],
[454,443,459,473,462,0,470,473,434],
[482,456,458,455,472,420,0,470,434],
[435,452,469,447,433,417,420,0,411],
[456,450,460,436,450,456,456,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,414,451,485,432,436,445,399],
[444,0,433,457,478,407,445,430,458],
[476,457,0,461,496,429,483,454,445],
[439,433,429,0,457,419,456,417,427],
[405,412,394,433,0,377,446,408,394],
[458,483,461,471,513,0,493,442,472],
[454,445,407,434,444,397,0,429,410],
[445,460,436,473,482,448,461,0,427],
[491,432,445,463,496,418,480,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,398,463,411,455,438,423,445],
[445,0,420,442,433,445,462,441,476],
[492,470,0,461,441,470,496,461,483],
[427,448,429,0,447,496,468,434,446],
[479,457,449,443,0,462,459,441,486],
[435,445,420,394,428,0,416,430,444],
[452,428,394,422,431,474,0,456,426],
[467,449,429,456,449,460,434,0,442],
[445,414,407,444,404,446,464,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,432,446,438,437,459,445,411],
[454,0,427,464,459,442,466,465,465],
[458,463,0,457,440,455,458,460,440],
[444,426,433,0,434,444,440,458,444],
[452,431,450,456,0,439,474,460,450],
[453,448,435,446,451,0,438,453,441],
[431,424,432,450,416,452,0,434,448],
[445,425,430,432,430,437,456,0,431],
[479,425,450,446,440,449,442,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,432,446,449,459,425,469,436],
[471,0,421,446,477,456,507,421,432],
[458,469,0,433,423,438,448,430,430],
[444,444,457,0,463,460,458,435,440],
[441,413,467,427,0,448,434,458,417],
[431,434,452,430,442,0,466,439,467],
[465,383,442,432,456,424,0,412,457],
[421,469,460,455,432,451,478,0,442],
[454,458,460,450,473,423,433,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,423,418,438,416,432,404,419],
[481,0,440,472,448,431,470,464,476],
[467,450,0,481,445,435,478,474,442],
[472,418,409,0,425,466,419,428,434],
[452,442,445,465,0,406,439,439,422],
[474,459,455,424,484,0,455,479,436],
[458,420,412,471,451,435,0,443,431],
[486,426,416,462,451,411,447,0,423],
[471,414,448,456,468,454,459,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,418,525,506,479,450,504,551],
[427,0,389,463,417,448,399,506,494],
[472,501,0,487,378,476,490,456,602],
[365,427,403,0,427,416,428,402,445],
[384,473,512,463,0,392,414,417,580],
[411,442,414,474,498,0,371,442,532],
[440,491,400,462,476,519,0,504,515],
[386,384,434,488,473,448,386,0,492],
[339,396,288,445,310,358,375,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,430,380,440,446,422,422,396],
[446,0,420,376,460,472,430,457,369],
[460,470,0,440,452,465,477,457,409],
[510,514,450,0,469,450,501,444,457],
[450,430,438,421,0,419,464,446,410],
[444,418,425,440,471,0,470,415,418],
[468,460,413,389,426,420,0,420,402],
[468,433,433,446,444,475,470,0,399],
[494,521,481,433,480,472,488,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,427,423,444,446,417,410,442],
[456,0,454,435,445,451,427,445,442],
[463,436,0,429,428,464,442,415,456],
[467,455,461,0,445,470,464,441,465],
[446,445,462,445,0,448,442,421,440],
[444,439,426,420,442,0,459,418,458],
[473,463,448,426,448,431,0,439,463],
[480,445,475,449,469,472,451,0,469],
[448,448,434,425,450,432,427,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,471,440,457,447,452,451,445],
[444,0,469,468,476,466,472,453,449],
[419,421,0,441,443,418,439,438,432],
[450,422,449,0,447,440,439,457,446],
[433,414,447,443,0,448,446,450,448],
[443,424,472,450,442,0,471,453,470],
[438,418,451,451,444,419,0,451,435],
[439,437,452,433,440,437,439,0,434],
[445,441,458,444,442,420,455,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,424,362,460,387,423,408,405],
[458,0,421,420,452,417,483,382,411],
[466,469,0,430,446,409,480,445,395],
[528,470,460,0,421,470,510,468,481],
[430,438,444,469,0,449,461,425,430],
[503,473,481,420,441,0,497,431,461],
[467,407,410,380,429,393,0,423,345],
[482,508,445,422,465,459,467,0,459],
[485,479,495,409,460,429,545,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,434,596,402,431,458,460,532],
[323,0,329,406,402,379,455,324,375],
[456,561,0,537,535,484,482,402,533],
[294,484,353,0,348,377,431,324,450],
[488,488,355,542,0,408,404,437,486],
[459,511,406,513,482,0,401,405,505],
[432,435,408,459,486,489,0,353,372],
[430,566,488,566,453,485,537,0,562],
[358,515,357,440,404,385,518,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,437,502,410,449,463,405,460],
[450,0,446,507,447,472,440,440,496],
[453,444,0,479,469,455,453,437,513],
[388,383,411,0,427,423,420,390,435],
[480,443,421,463,0,470,443,446,475],
[441,418,435,467,420,0,414,402,454],
[427,450,437,470,447,476,0,419,465],
[485,450,453,500,444,488,471,0,509],
[430,394,377,455,415,436,425,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,461,434,440,438,460,471],
[436,0,416,433,410,463,424,444,448],
[435,474,0,445,439,446,460,443,438],
[429,457,445,0,407,472,457,440,455],
[456,480,451,483,0,457,425,466,446],
[450,427,444,418,433,0,407,436,428],
[452,466,430,433,465,483,0,436,446],
[430,446,447,450,424,454,454,0,466],
[419,442,452,435,444,462,444,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,457,462,441,452,453,453,449],
[430,0,433,449,429,432,455,447,439],
[433,457,0,473,440,468,450,453,450],
[428,441,417,0,454,449,449,435,435],
[449,461,450,436,0,474,454,454,456],
[438,458,422,441,416,0,456,446,445],
[437,435,440,441,436,434,0,420,427],
[437,443,437,455,436,444,470,0,443],
[441,451,440,455,434,445,463,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,479,449,498,443,455,449,460],
[465,0,478,445,495,425,477,423,445],
[411,412,0,433,488,420,425,409,445],
[441,445,457,0,472,439,434,436,458],
[392,395,402,418,0,390,433,406,420],
[447,465,470,451,500,0,455,443,497],
[435,413,465,456,457,435,0,414,456],
[441,467,481,454,484,447,476,0,464],
[430,445,445,432,470,393,434,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,429,468,422,422,423,457,441],
[445,0,416,418,418,419,437,447,415],
[461,474,0,434,457,411,449,467,435],
[422,472,456,0,433,444,449,457,421],
[468,472,433,457,0,446,439,458,444],
[468,471,479,446,444,0,420,440,450],
[467,453,441,441,451,470,0,453,484],
[433,443,423,433,432,450,437,0,425],
[449,475,455,469,446,440,406,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,429,443,428,448,447,447,459],
[441,0,438,445,432,449,453,439,434],
[461,452,0,440,431,454,472,454,444],
[447,445,450,0,453,444,443,445,458],
[462,458,459,437,0,467,483,474,434],
[442,441,436,446,423,0,443,453,462],
[443,437,418,447,407,447,0,433,441],
[443,451,436,445,416,437,457,0,437],
[431,456,446,432,456,428,449,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,415,420,360,415,400,515,447],
[456,0,368,392,447,414,393,635,502],
[475,522,0,423,517,471,409,591,520],
[470,498,467,0,530,357,462,544,473],
[530,443,373,360,0,363,406,517,519],
[475,476,419,533,527,0,462,550,561],
[490,497,481,428,484,428,0,529,518],
[375,255,299,346,373,340,361,0,413],
[443,388,370,417,371,329,372,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,455,452,451,445,465,438,475],
[459,0,447,472,451,456,478,441,458],
[435,443,0,440,456,440,471,439,465],
[438,418,450,0,434,442,477,447,448],
[439,439,434,456,0,452,474,459,458],
[445,434,450,448,438,0,461,445,454],
[425,412,419,413,416,429,0,408,441],
[452,449,451,443,431,445,482,0,471],
[415,432,425,442,432,436,449,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,430,415,451,443,449,454],
[451,0,442,432,423,453,414,443,448],
[444,448,0,448,432,460,447,438,463],
[460,458,442,0,421,455,441,455,445],
[475,467,458,469,0,474,439,476,460],
[439,437,430,435,416,0,421,420,415],
[447,476,443,449,451,469,0,448,467],
[441,447,452,435,414,470,442,0,439],
[436,442,427,445,430,475,423,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,450,456,474,447,427,458,448],
[436,0,436,421,446,432,421,433,441],
[440,454,0,451,447,452,463,462,454],
[434,469,439,0,460,443,442,470,466],
[416,444,443,430,0,456,421,433,451],
[443,458,438,447,434,0,443,454,463],
[463,469,427,448,469,447,0,467,446],
[432,457,428,420,457,436,423,0,451],
[442,449,436,424,439,427,444,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,434,421,494,476,497,487,476],
[414,0,410,434,424,440,514,471,469],
[456,480,0,414,505,503,495,433,483],
[469,456,476,0,486,513,483,436,458],
[396,466,385,404,0,436,489,453,473],
[414,450,387,377,454,0,441,429,436],
[393,376,395,407,401,449,0,423,443],
[403,419,457,454,437,461,467,0,420],
[414,421,407,432,417,454,447,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,426,426,435,434,427,474,427],
[473,0,465,456,457,475,477,473,432],
[464,425,0,436,426,444,438,446,428],
[464,434,454,0,451,461,456,468,450],
[455,433,464,439,0,476,442,460,449],
[456,415,446,429,414,0,436,462,421],
[463,413,452,434,448,454,0,454,449],
[416,417,444,422,430,428,436,0,436],
[463,458,462,440,441,469,441,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,476,442,432,450,471,449,461],
[439,0,452,465,444,442,455,476,424],
[414,438,0,414,415,425,452,445,427],
[448,425,476,0,446,442,456,467,440],
[458,446,475,444,0,455,464,484,452],
[440,448,465,448,435,0,468,472,436],
[419,435,438,434,426,422,0,447,417],
[441,414,445,423,406,418,443,0,433],
[429,466,463,450,438,454,473,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,447,454,435,438,440,480,469],
[437,0,465,459,446,425,453,418,432],
[443,425,0,442,446,425,418,447,433],
[436,431,448,0,466,425,444,440,448],
[455,444,444,424,0,450,422,435,449],
[452,465,465,465,440,0,467,446,471],
[450,437,472,446,468,423,0,433,451],
[410,472,443,450,455,444,457,0,453],
[421,458,457,442,441,419,439,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,489,490,437,447,442,480,454],
[429,0,467,465,445,451,463,465,454],
[401,423,0,453,430,413,447,465,425],
[400,425,437,0,436,430,457,495,439],
[453,445,460,454,0,458,449,482,451],
[443,439,477,460,432,0,464,492,462],
[448,427,443,433,441,426,0,489,410],
[410,425,425,395,408,398,401,0,437],
[436,436,465,451,439,428,480,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,457,453,422,419,435,451,438],
[435,0,452,452,437,437,435,454,443],
[433,438,0,442,448,427,419,422,446],
[437,438,448,0,430,438,432,440,439],
[468,453,442,460,0,447,444,455,463],
[471,453,463,452,443,0,433,437,440],
[455,455,471,458,446,457,0,446,437],
[439,436,468,450,435,453,444,0,459],
[452,447,444,451,427,450,453,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,452,446,468,461,459,453,447],
[477,0,460,438,481,450,479,468,493],
[438,430,0,429,467,445,455,420,441],
[444,452,461,0,469,416,446,443,430],
[422,409,423,421,0,438,468,427,421],
[429,440,445,474,452,0,479,435,423],
[431,411,435,444,422,411,0,399,451],
[437,422,470,447,463,455,491,0,454],
[443,397,449,460,469,467,439,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,433,456,454,439,463,451,483],
[469,0,459,466,476,438,480,451,481],
[457,431,0,451,460,427,458,430,475],
[434,424,439,0,466,436,459,437,464],
[436,414,430,424,0,434,449,437,469],
[451,452,463,454,456,0,461,434,481],
[427,410,432,431,441,429,0,425,433],
[439,439,460,453,453,456,465,0,472],
[407,409,415,426,421,409,457,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,434,437,449,413,444,452,466],
[420,0,426,418,440,418,403,429,446],
[456,464,0,426,449,448,453,463,456],
[453,472,464,0,460,433,445,452,461],
[441,450,441,430,0,421,452,445,453],
[477,472,442,457,469,0,454,458,485],
[446,487,437,445,438,436,0,464,450],
[438,461,427,438,445,432,426,0,448],
[424,444,434,429,437,405,440,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,430,451,462,452,412,453,447],
[440,0,416,428,444,432,416,402,469],
[460,474,0,480,462,440,430,444,461],
[439,462,410,0,444,433,416,419,443],
[428,446,428,446,0,424,434,421,431],
[438,458,450,457,466,0,441,450,480],
[478,474,460,474,456,449,0,444,483],
[437,488,446,471,469,440,446,0,474],
[443,421,429,447,459,410,407,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 890, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_890.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,107,102,99,105,98,106,114,110,101],
[103,0,108,94,103,90,96,111,112,106],
[108,102,0,93,103,95,91,101,99,109],
[111,116,117,0,104,105,101,115,108,100],
[105,107,107,106,0,90,96,112,109,104],
[112,120,115,105,120,0,108,121,112,116],
[104,114,119,109,114,102,0,115,114,124],
[96,99,109,95,98,89,95,0,95,102],
[100,98,111,102,101,98,96,115,0,101],
[109,104,101,110,106,94,86,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,120,101,97,107,105,113,115],
[104,0,108,105,87,104,100,108,100,113],
[101,102,0,102,109,103,101,101,106,117],
[90,105,108,0,94,101,110,102,119,114],
[109,123,101,116,0,117,124,112,118,119],
[113,106,107,109,93,0,106,104,104,106],
[103,110,109,100,86,104,0,96,103,102],
[105,102,109,108,98,106,114,0,102,116],
[97,110,104,91,92,106,107,108,0,110],
[95,97,93,96,91,104,108,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,22,99,89,96,86,82,108],
[139,0,121,97,163,181,135,149,120,192],
[132,89,0,112,139,157,150,117,139,157],
[188,113,98,0,166,146,123,149,117,131],
[111,47,71,44,0,67,114,117,92,118],
[121,29,53,64,143,0,138,80,62,97],
[114,75,60,87,96,72,0,96,78,82],
[124,61,93,61,93,130,114,0,130,159],
[128,90,71,93,118,148,132,80,0,145],
[102,18,53,79,92,113,128,51,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,130,117,109,97,114,119,107],
[91,0,88,102,103,108,97,98,98,97],
[93,122,0,116,116,112,100,107,115,115],
[80,108,94,0,111,107,95,96,113,96],
[93,107,94,99,0,97,103,93,99,103],
[101,102,98,103,113,0,87,105,100,104],
[113,113,110,115,107,123,0,93,107,114],
[96,112,103,114,117,105,117,0,100,129],
[91,112,95,97,111,110,103,110,0,101],
[103,113,95,114,107,106,96,81,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,99,97,99,105,86,95,107],
[117,0,111,102,113,105,118,110,118,112],
[109,99,0,111,109,97,102,92,90,107],
[111,108,99,0,117,111,122,110,93,112],
[113,97,101,93,0,100,119,102,95,110],
[111,105,113,99,110,0,121,105,101,116],
[105,92,108,88,91,89,0,91,90,104],
[124,100,118,100,108,105,119,0,97,111],
[115,92,120,117,115,109,120,113,0,114],
[103,98,103,98,100,94,106,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,121,89,91,87,92,94,104],
[106,0,96,118,91,93,105,82,95,94],
[101,114,0,121,92,96,89,94,83,95],
[89,92,89,0,83,88,80,82,88,95],
[121,119,118,127,0,107,103,101,110,89],
[119,117,114,122,103,0,100,107,103,112],
[123,105,121,130,107,110,0,104,111,114],
[118,128,116,128,109,103,106,0,118,105],
[116,115,127,122,100,107,99,92,0,106],
[106,116,115,115,121,98,96,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,113,98,125,142,134,107,94,112],
[63,0,108,100,97,93,81,104,95,76],
[97,102,0,144,126,107,124,93,113,116],
[112,110,66,0,121,99,126,94,97,116],
[85,113,84,89,0,90,90,97,80,100],
[68,117,103,111,120,0,106,83,113,101],
[76,129,86,84,120,104,0,91,91,106],
[103,106,117,116,113,127,119,0,110,111],
[116,115,97,113,130,97,119,100,0,111],
[98,134,94,94,110,109,104,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,96,98,114,107,97,108,104],
[107,0,104,107,99,108,113,101,98,106],
[103,106,0,94,94,121,101,102,109,108],
[114,103,116,0,100,116,110,109,109,118],
[112,111,116,110,0,117,108,111,103,105],
[96,102,89,94,93,0,92,90,91,99],
[103,97,109,100,102,118,0,108,105,110],
[113,109,108,101,99,120,102,0,110,108],
[102,112,101,101,107,119,105,100,0,116],
[106,104,102,92,105,111,100,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,117,112,107,95,126,115,111],
[88,0,112,95,100,110,101,116,107,90],
[96,98,0,86,96,89,90,108,103,92],
[93,115,124,0,99,101,89,113,116,100],
[98,110,114,111,0,102,111,128,134,108],
[103,100,121,109,108,0,108,119,117,102],
[115,109,120,121,99,102,0,132,108,103],
[84,94,102,97,82,91,78,0,99,91],
[95,103,107,94,76,93,102,111,0,89],
[99,120,118,110,102,108,107,119,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,131,109,120,107,110,109,105],
[95,0,89,96,92,93,81,92,106,91],
[109,121,0,121,104,121,119,94,94,104],
[79,114,89,0,107,105,108,98,89,81],
[101,118,106,103,0,116,109,105,99,88],
[90,117,89,105,94,0,100,88,95,81],
[103,129,91,102,101,110,0,94,107,78],
[100,118,116,112,105,122,116,0,117,103],
[101,104,116,121,111,115,103,93,0,99],
[105,119,106,129,122,129,132,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,120,113,108,121,118,115,112],
[98,0,102,104,97,106,92,102,103,97],
[109,108,0,115,117,111,97,117,118,110],
[90,106,95,0,113,102,108,105,107,103],
[97,113,93,97,0,116,110,110,113,104],
[102,104,99,108,94,0,111,112,102,99],
[89,118,113,102,100,99,0,113,114,102],
[92,108,93,105,100,98,97,0,106,97],
[95,107,92,103,97,108,96,104,0,107],
[98,113,100,107,106,111,108,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,86,78,94,98,95,79,109,71],
[129,0,102,98,95,108,99,125,128,98],
[124,108,0,113,113,118,89,107,133,107],
[132,112,97,0,122,121,116,124,142,101],
[116,115,97,88,0,107,103,107,130,84],
[112,102,92,89,103,0,95,102,113,81],
[115,111,121,94,107,115,0,117,134,104],
[131,85,103,86,103,108,93,0,121,83],
[101,82,77,68,80,97,76,89,0,75],
[139,112,103,109,126,129,106,127,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,115,109,113,101,113,106,115,94],
[119,0,116,112,104,104,115,102,116,109],
[95,94,0,100,114,92,95,86,114,99],
[101,98,110,0,111,96,102,87,105,87],
[97,106,96,99,0,95,96,96,97,85],
[109,106,118,114,115,0,106,90,106,111],
[97,95,115,108,114,104,0,93,111,97],
[104,108,124,123,114,120,117,0,113,111],
[95,94,96,105,113,104,99,97,0,96],
[116,101,111,123,125,99,113,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,105,99,100,93,80,105,102],
[99,0,113,110,93,98,109,113,113,110],
[101,97,0,105,95,83,111,95,88,87],
[105,100,105,0,95,93,92,76,106,97],
[111,117,115,115,0,91,105,91,107,108],
[110,112,127,117,119,0,126,90,127,120],
[117,101,99,118,105,84,0,88,115,112],
[130,97,115,134,119,120,122,0,118,121],
[105,97,122,104,103,83,95,92,0,87],
[108,100,123,113,102,90,98,89,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,103,93,119,89,75,84,96,114],
[119,0,105,115,114,93,87,87,110,120],
[107,105,0,81,102,90,95,87,83,102],
[117,95,129,0,117,110,95,84,117,116],
[91,96,108,93,0,89,92,80,103,115],
[121,117,120,100,121,0,101,97,109,126],
[135,123,115,115,118,109,0,98,103,112],
[126,123,123,126,130,113,112,0,102,124],
[114,100,127,93,107,101,107,108,0,114],
[96,90,108,94,95,84,98,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,73,101,101,89,98,82,98,94],
[121,0,117,110,91,110,112,112,120,115],
[137,93,0,108,107,92,97,111,120,112],
[109,100,102,0,89,105,94,98,116,85],
[109,119,103,121,0,112,122,113,114,130],
[121,100,118,105,98,0,108,123,110,120],
[112,98,113,116,88,102,0,110,113,111],
[128,98,99,112,97,87,100,0,93,93],
[112,90,90,94,96,100,97,117,0,85],
[116,95,98,125,80,90,99,117,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,103,110,111,109,98,104,110],
[105,0,104,105,110,116,112,113,105,111],
[93,106,0,96,103,102,106,96,97,102],
[107,105,114,0,94,115,114,112,102,107],
[100,100,107,116,0,104,116,98,97,111],
[99,94,108,95,106,0,106,97,96,99],
[101,98,104,96,94,104,0,94,90,98],
[112,97,114,98,112,113,116,0,96,102],
[106,105,113,108,113,114,120,114,0,111],
[100,99,108,103,99,111,112,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,104,101,105,102,106,104,110],
[100,0,103,98,115,109,107,102,105,118],
[99,107,0,103,105,104,101,104,107,115],
[106,112,107,0,108,112,104,114,106,114],
[109,95,105,102,0,103,95,102,95,101],
[105,101,106,98,107,0,105,112,107,108],
[108,103,109,106,115,105,0,114,108,113],
[104,108,106,96,108,98,96,0,103,112],
[106,105,103,104,115,103,102,107,0,106],
[100,92,95,96,109,102,97,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,119,108,114,97,103,102,122],
[106,0,103,111,104,104,95,102,103,120],
[113,107,0,111,111,105,111,103,94,124],
[91,99,99,0,101,91,79,101,94,120],
[102,106,99,109,0,99,98,103,95,115],
[96,106,105,119,111,0,103,102,112,122],
[113,115,99,131,112,107,0,110,105,124],
[107,108,107,109,107,108,100,0,98,125],
[108,107,116,116,115,98,105,112,0,127],
[88,90,86,90,95,88,86,85,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,121,109,104,106,102,101,117],
[96,0,113,97,111,91,91,103,90,97],
[94,97,0,103,101,95,98,99,93,102],
[89,113,107,0,100,106,100,103,92,116],
[101,99,109,110,0,104,98,107,99,106],
[106,119,115,104,106,0,112,110,117,112],
[104,119,112,110,112,98,0,106,108,112],
[108,107,111,107,103,100,104,0,93,103],
[109,120,117,118,111,93,102,117,0,111],
[93,113,108,94,104,98,98,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,106,104,106,115,92,104,106],
[109,0,106,113,97,104,109,100,105,106],
[107,104,0,122,111,111,118,106,118,101],
[104,97,88,0,103,98,107,95,101,103],
[106,113,99,107,0,111,114,106,103,99],
[104,106,99,112,99,0,112,93,117,97],
[95,101,92,103,96,98,0,91,97,93],
[118,110,104,115,104,117,119,0,121,105],
[106,105,92,109,107,93,113,89,0,105],
[104,104,109,107,111,113,117,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,115,131,83,102,79,99,130,129],
[125,0,132,117,110,122,99,104,136,131],
[95,78,0,124,87,76,87,105,120,122],
[79,93,86,0,61,86,101,85,73,121],
[127,100,123,149,0,130,110,115,124,148],
[108,88,134,124,80,0,108,78,120,123],
[131,111,123,109,100,102,0,115,121,121],
[111,106,105,125,95,132,95,0,117,124],
[80,74,90,137,86,90,89,93,0,120],
[81,79,88,89,62,87,89,86,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,101,100,90,97,97,118,105],
[123,0,121,110,119,112,110,105,122,121],
[112,89,0,101,112,99,104,101,129,123],
[109,100,109,0,103,109,107,97,119,113],
[110,91,98,107,0,93,100,83,114,103],
[120,98,111,101,117,0,110,104,104,123],
[113,100,106,103,110,100,0,93,109,109],
[113,105,109,113,127,106,117,0,123,129],
[92,88,81,91,96,106,101,87,0,100],
[105,89,87,97,107,87,101,81,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,105,96,103,93,107,107,94],
[106,0,105,99,103,101,101,92,101,97],
[120,105,0,118,120,111,108,105,119,100],
[105,111,92,0,117,112,115,112,115,107],
[114,107,90,93,0,93,102,90,103,92],
[107,109,99,98,117,0,92,99,100,95],
[117,109,102,95,108,118,0,107,104,99],
[103,118,105,98,120,111,103,0,105,103],
[103,109,91,95,107,110,106,105,0,101],
[116,113,110,103,118,115,111,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,108,94,108,109,105,110,105],
[102,0,109,118,103,104,109,122,119,103],
[111,101,0,99,107,115,106,108,124,112],
[102,92,111,0,109,102,105,112,116,114],
[116,107,103,101,0,118,114,123,117,117],
[102,106,95,108,92,0,97,116,107,108],
[101,101,104,105,96,113,0,120,110,103],
[105,88,102,98,87,94,90,0,103,106],
[100,91,86,94,93,103,100,107,0,96],
[105,107,98,96,93,102,107,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,95,94,83,82,87,79,113],
[118,0,95,98,113,78,86,104,114,117],
[117,115,0,104,118,85,79,128,117,81],
[115,112,106,0,116,87,71,111,102,122],
[116,97,92,94,0,67,73,90,92,102],
[127,132,125,123,143,0,105,126,125,112],
[128,124,131,139,137,105,0,128,131,128],
[123,106,82,99,120,84,82,0,93,101],
[131,96,93,108,118,85,79,117,0,98],
[97,93,129,88,108,98,82,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,100,109,113,100,104,114,98],
[106,0,114,106,107,114,100,102,119,105],
[114,96,0,100,111,115,99,113,116,113],
[110,104,110,0,103,110,97,110,116,101],
[101,103,99,107,0,106,107,109,116,105],
[97,96,95,100,104,0,93,103,116,101],
[110,110,111,113,103,117,0,107,114,110],
[106,108,97,100,101,107,103,0,113,99],
[96,91,94,94,94,94,96,97,0,92],
[112,105,97,109,105,109,100,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,104,103,95,90,101,102,116],
[116,0,115,110,106,96,102,107,99,120],
[108,95,0,101,109,99,90,102,102,111],
[106,100,109,0,109,95,96,109,96,108],
[107,104,101,101,0,99,105,112,101,119],
[115,114,111,115,111,0,101,115,113,120],
[120,108,120,114,105,109,0,116,112,126],
[109,103,108,101,98,95,94,0,93,109],
[108,111,108,114,109,97,98,117,0,124],
[94,90,99,102,91,90,84,101,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,110,106,105,102,96,103,100],
[109,0,107,102,100,109,125,113,106,107],
[93,103,0,87,78,85,93,99,104,109],
[100,108,123,0,90,111,102,101,95,99],
[104,110,132,120,0,110,105,132,116,103],
[105,101,125,99,100,0,109,114,104,115],
[108,85,117,108,105,101,0,108,98,96],
[114,97,111,109,78,96,102,0,104,110],
[107,104,106,115,94,106,112,106,0,107],
[110,103,101,111,107,95,114,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,131,159,118,142,105,136,58,93],
[109,0,140,182,135,128,103,86,49,94],
[79,70,0,120,52,83,75,75,53,96],
[51,28,90,0,80,91,31,59,48,54],
[92,75,158,130,0,123,91,113,98,127],
[68,82,127,119,87,0,53,100,51,75],
[105,107,135,179,119,157,0,141,77,110],
[74,124,135,151,97,110,69,0,54,110],
[152,161,157,162,112,159,133,156,0,98],
[117,116,114,156,83,135,100,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,116,131,122,110,106,105,105],
[99,0,107,112,110,111,100,112,100,110],
[102,103,0,116,129,119,116,103,99,99],
[94,98,94,0,128,127,102,105,99,119],
[79,100,81,82,0,114,74,93,74,89],
[88,99,91,83,96,0,80,81,78,96],
[100,110,94,108,136,130,0,102,97,113],
[104,98,107,105,117,129,108,0,93,113],
[105,110,111,111,136,132,113,117,0,122],
[105,100,111,91,121,114,97,97,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,105,97,99,76,109,86,93],
[112,0,108,128,106,102,105,119,96,93],
[118,102,0,118,121,116,113,129,100,107],
[105,82,92,0,101,88,95,102,75,99],
[113,104,89,109,0,99,98,112,107,115],
[111,108,94,122,111,0,110,122,103,108],
[134,105,97,115,112,100,0,109,108,121],
[101,91,81,108,98,88,101,0,101,100],
[124,114,110,135,103,107,102,109,0,110],
[117,117,103,111,95,102,89,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,114,111,101,126,103,103,93],
[90,0,98,102,94,97,116,88,81,89],
[110,112,0,120,113,120,121,105,104,99],
[96,108,90,0,112,107,118,97,98,103],
[99,116,97,98,0,111,121,89,94,91],
[109,113,90,103,99,0,110,93,99,90],
[84,94,89,92,89,100,0,87,88,74],
[107,122,105,113,121,117,123,0,104,102],
[107,129,106,112,116,111,122,106,0,105],
[117,121,111,107,119,120,136,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,108,106,98,99,100,102,99],
[87,0,105,106,103,95,97,97,101,104],
[98,105,0,95,109,104,96,85,95,102],
[102,104,115,0,103,89,100,98,96,95],
[104,107,101,107,0,105,90,106,100,99],
[112,115,106,121,105,0,103,94,107,106],
[111,113,114,110,120,107,0,102,109,92],
[110,113,125,112,104,116,108,0,105,105],
[108,109,115,114,110,103,101,105,0,100],
[111,106,108,115,111,104,118,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,113,92,92,120,99,87,86],
[96,0,100,122,103,99,115,111,95,95],
[106,110,0,100,103,99,109,97,93,106],
[97,88,110,0,79,83,106,93,80,92],
[118,107,107,131,0,109,125,108,100,107],
[118,111,111,127,101,0,112,112,123,109],
[90,95,101,104,85,98,0,101,77,91],
[111,99,113,117,102,98,109,0,113,97],
[123,115,117,130,110,87,133,97,0,105],
[124,115,104,118,103,101,119,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,113,105,107,112,115,115,116],
[105,0,107,115,100,105,104,96,98,113],
[87,103,0,106,99,97,98,102,98,111],
[97,95,104,0,87,101,103,95,100,112],
[105,110,111,123,0,107,110,108,101,110],
[103,105,113,109,103,0,92,112,103,110],
[98,106,112,107,100,118,0,104,101,111],
[95,114,108,115,102,98,106,0,99,107],
[95,112,112,110,109,107,109,111,0,102],
[94,97,99,98,100,100,99,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,93,116,95,106,100,112,120],
[102,0,91,104,95,90,89,106,111,107],
[95,119,0,109,100,107,101,104,111,115],
[117,106,101,0,105,104,94,109,111,110],
[94,115,110,105,0,90,85,82,104,104],
[115,120,103,106,120,0,97,110,119,131],
[104,121,109,116,125,113,0,104,117,117],
[110,104,106,101,128,100,106,0,110,116],
[98,99,99,99,106,91,93,100,0,97],
[90,103,95,100,106,79,93,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,93,102,99,93,111,99,106],
[95,0,113,117,106,98,100,112,99,96],
[102,97,0,101,100,104,101,97,104,107],
[117,93,109,0,106,103,93,106,92,99],
[108,104,110,104,0,99,96,105,105,98],
[111,112,106,107,111,0,105,108,97,101],
[117,110,109,117,114,105,0,111,102,108],
[99,98,113,104,105,102,99,0,93,107],
[111,111,106,118,105,113,108,117,0,124],
[104,114,103,111,112,109,102,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,112,115,117,99,105,105,111],
[113,0,112,120,121,109,113,107,105,108],
[100,98,0,111,107,108,111,96,111,104],
[98,90,99,0,107,98,100,95,93,100],
[95,89,103,103,0,103,95,97,91,89],
[93,101,102,112,107,0,103,98,106,102],
[111,97,99,110,115,107,0,97,93,98],
[105,103,114,115,113,112,113,0,107,103],
[105,105,99,117,119,104,117,103,0,104],
[99,102,106,110,121,108,112,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,93,92,83,82,92,107,88],
[119,0,84,126,86,100,105,115,110,107],
[119,126,0,98,119,73,81,96,82,108],
[117,84,112,0,96,77,90,74,83,105],
[118,124,91,114,0,87,100,86,86,113],
[127,110,137,133,123,0,106,108,101,114],
[128,105,129,120,110,104,0,102,115,115],
[118,95,114,136,124,102,108,0,105,103],
[103,100,128,127,124,109,95,105,0,84],
[122,103,102,105,97,96,95,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,103,111,119,92,93,102,88],
[98,0,100,89,80,104,94,92,105,98],
[95,110,0,99,95,102,99,107,102,98],
[107,121,111,0,97,109,93,102,110,124],
[99,130,115,113,0,117,107,106,114,101],
[91,106,108,101,93,0,84,93,102,95],
[118,116,111,117,103,126,0,112,103,108],
[117,118,103,108,104,117,98,0,94,111],
[108,105,108,100,96,108,107,116,0,108],
[122,112,112,86,109,115,102,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,89,120,131,93,102,116,50,100],
[145,0,122,154,134,126,105,151,108,133],
[121,88,0,106,105,91,106,138,78,97],
[90,56,104,0,98,61,103,149,99,67],
[79,76,105,112,0,95,97,164,86,125],
[117,84,119,149,115,0,91,151,94,97],
[108,105,104,107,113,119,0,97,67,89],
[94,59,72,61,46,59,113,0,45,57],
[160,102,132,111,124,116,143,165,0,89],
[110,77,113,143,85,113,121,153,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,113,105,117,110,120,127,110],
[98,0,97,104,92,116,117,112,99,107],
[104,113,0,106,110,111,105,111,115,109],
[97,106,104,0,90,107,106,101,109,102],
[105,118,100,120,0,104,111,114,122,111],
[93,94,99,103,106,0,96,96,111,97],
[100,93,105,104,99,114,0,95,113,112],
[90,98,99,109,96,114,115,0,114,103],
[83,111,95,101,88,99,97,96,0,102],
[100,103,101,108,99,113,98,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,120,102,99,102,105,99,98],
[100,0,105,122,103,119,114,129,109,109],
[118,105,0,112,97,124,122,117,91,93],
[90,88,98,0,98,128,105,122,93,98],
[108,107,113,112,0,102,116,115,100,92],
[111,91,86,82,108,0,98,86,91,111],
[108,96,88,105,94,112,0,96,96,101],
[105,81,93,88,95,124,114,0,89,100],
[111,101,119,117,110,119,114,121,0,109],
[112,101,117,112,118,99,109,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,125,106,98,110,111,105,118,112],
[92,0,112,100,104,89,100,102,104,106],
[85,98,0,107,98,102,100,94,110,101],
[104,110,103,0,118,111,105,111,112,114],
[112,106,112,92,0,96,113,96,95,113],
[100,121,108,99,114,0,103,105,111,111],
[99,110,110,105,97,107,0,96,103,108],
[105,108,116,99,114,105,114,0,116,117],
[92,106,100,98,115,99,107,94,0,107],
[98,104,109,96,97,99,102,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,82,66,94,68,89,67,76,94],
[149,0,134,101,120,112,132,102,100,111],
[128,76,0,87,106,78,103,86,93,75],
[144,109,123,0,134,103,117,119,103,136],
[116,90,104,76,0,86,104,75,92,107],
[142,98,132,107,124,0,115,100,116,119],
[121,78,107,93,106,95,0,104,91,103],
[143,108,124,91,135,110,106,0,112,114],
[134,110,117,107,118,94,119,98,0,123],
[116,99,135,74,103,91,107,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,122,113,113,127,119,105,109],
[104,0,113,123,111,106,122,120,127,113],
[93,97,0,111,102,102,108,110,113,103],
[88,87,99,0,91,102,99,104,105,101],
[97,99,108,119,0,98,116,114,106,107],
[97,104,108,108,112,0,107,116,116,109],
[83,88,102,111,94,103,0,116,105,97],
[91,90,100,106,96,94,94,0,100,98],
[105,83,97,105,104,94,105,110,0,97],
[101,97,107,109,103,101,113,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,113,103,97,106,108,103,92],
[107,0,114,120,115,113,108,117,99,109],
[110,96,0,118,109,103,107,111,107,94],
[97,90,92,0,98,93,91,101,92,91],
[107,95,101,112,0,107,105,113,100,103],
[113,97,107,117,103,0,101,112,97,102],
[104,102,103,119,105,109,0,112,91,95],
[102,93,99,109,97,98,98,0,99,94],
[107,111,103,118,110,113,119,111,0,109],
[118,101,116,119,107,108,115,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,85,111,142,68,134,116,140,111],
[76,0,83,105,125,91,95,58,96,73],
[125,127,0,95,138,108,123,119,114,105],
[99,105,115,0,110,90,103,112,93,105],
[68,85,72,100,0,57,100,92,117,86],
[142,119,102,120,153,0,130,131,125,135],
[76,115,87,107,110,80,0,109,105,93],
[94,152,91,98,118,79,101,0,99,110],
[70,114,96,117,93,85,105,111,0,101],
[99,137,105,105,124,75,117,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,83,119,120,116,83,112,97],
[105,0,112,97,107,107,126,108,108,106],
[101,98,0,79,111,108,101,79,116,95],
[127,113,131,0,131,118,128,99,122,105],
[91,103,99,79,0,95,103,83,103,101],
[90,103,102,92,115,0,107,95,112,94],
[94,84,109,82,107,103,0,86,98,98],
[127,102,131,111,127,115,124,0,118,108],
[98,102,94,88,107,98,112,92,0,103],
[113,104,115,105,109,116,112,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,107,103,110,92,117,116,96,77],
[123,0,118,112,121,92,114,122,155,95],
[103,92,0,119,111,100,142,112,136,124],
[107,98,91,0,101,99,114,127,127,93],
[100,89,99,109,0,111,112,93,131,107],
[118,118,110,111,99,0,118,81,107,139],
[93,96,68,96,98,92,0,97,104,102],
[94,88,98,83,117,129,113,0,136,121],
[114,55,74,83,79,103,106,74,0,87],
[133,115,86,117,103,71,108,89,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,100,97,95,96,103,93,107,83],
[121,0,116,115,103,122,114,108,111,120],
[110,94,0,99,92,96,103,106,111,99],
[113,95,111,0,98,121,106,99,105,108],
[115,107,118,112,0,111,117,99,122,123],
[114,88,114,89,99,0,110,85,110,96],
[107,96,107,104,93,100,0,95,104,92],
[117,102,104,111,111,125,115,0,128,114],
[103,99,99,105,88,100,106,82,0,104],
[127,90,111,102,87,114,118,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,76,90,85,96,81,99,127,101],
[124,0,107,107,144,125,93,103,116,109],
[134,103,0,117,105,121,108,97,106,114],
[120,103,93,0,113,112,116,111,109,99],
[125,66,105,97,0,100,93,96,120,115],
[114,85,89,98,110,0,97,123,116,100],
[129,117,102,94,117,113,0,132,136,113],
[111,107,113,99,114,87,78,0,103,94],
[83,94,104,101,90,94,74,107,0,88],
[109,101,96,111,95,110,97,116,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,95,108,113,110,108,86,101],
[95,0,107,93,104,101,93,104,95,101],
[103,103,0,98,108,117,97,98,101,103],
[115,117,112,0,121,130,127,115,105,124],
[102,106,102,89,0,105,112,108,112,104],
[97,109,93,80,105,0,101,110,97,102],
[100,117,113,83,98,109,0,94,93,106],
[102,106,112,95,102,100,116,0,106,108],
[124,115,109,105,98,113,117,104,0,122],
[109,109,107,86,106,108,104,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,90,84,92,102,100,86,86,117],
[116,0,113,112,98,117,99,92,98,108],
[120,97,0,102,99,105,94,109,87,113],
[126,98,108,0,100,113,102,87,89,114],
[118,112,111,110,0,109,108,98,95,112],
[108,93,105,97,101,0,108,104,95,111],
[110,111,116,108,102,102,0,107,96,117],
[124,118,101,123,112,106,103,0,115,106],
[124,112,123,121,115,115,114,95,0,133],
[93,102,97,96,98,99,93,104,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,101,104,123,110,119,110,105],
[97,0,94,92,93,106,120,101,101,89],
[92,116,0,90,102,109,110,106,102,97],
[109,118,120,0,102,114,102,100,109,91],
[106,117,108,108,0,107,114,108,115,101],
[87,104,101,96,103,0,105,110,105,96],
[100,90,100,108,96,105,0,104,110,105],
[91,109,104,110,102,100,106,0,110,103],
[100,109,108,101,95,105,100,100,0,101],
[105,121,113,119,109,114,105,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,105,104,111,107,117,105,98],
[94,0,103,107,104,92,97,113,98,101],
[97,107,0,110,111,104,103,117,112,108],
[105,103,100,0,108,102,93,106,100,103],
[106,106,99,102,0,109,90,116,102,104],
[99,118,106,108,101,0,100,117,111,105],
[103,113,107,117,120,110,0,121,114,108],
[93,97,93,104,94,93,89,0,103,99],
[105,112,98,110,108,99,96,107,0,100],
[112,109,102,107,106,105,102,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,112,104,115,113,114,119,111],
[101,0,99,95,101,88,103,91,101,95],
[96,111,0,114,101,103,110,119,108,98],
[98,115,96,0,87,100,101,97,96,107],
[106,109,109,123,0,110,116,116,105,112],
[95,122,107,110,100,0,120,113,104,115],
[97,107,100,109,94,90,0,82,103,101],
[96,119,91,113,94,97,128,0,116,100],
[91,109,102,114,105,106,107,94,0,99],
[99,115,112,103,98,95,109,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,114,95,108,130,101,107,125],
[108,0,117,106,107,119,129,110,97,115],
[94,93,0,94,90,91,110,97,83,106],
[96,104,116,0,110,105,123,112,93,97],
[115,103,120,100,0,123,124,120,113,111],
[102,91,119,105,87,0,113,111,91,114],
[80,81,100,87,86,97,0,93,76,101],
[109,100,113,98,90,99,117,0,91,104],
[103,113,127,117,97,119,134,119,0,121],
[85,95,104,113,99,96,109,106,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,93,88,98,102,96,85,81,93],
[120,0,95,103,119,116,103,91,95,99],
[117,115,0,112,118,108,98,113,93,103],
[122,107,98,0,119,114,103,113,100,116],
[112,91,92,91,0,101,93,88,91,93],
[108,94,102,96,109,0,102,87,83,99],
[114,107,112,107,117,108,0,88,94,105],
[125,119,97,97,122,123,122,0,107,115],
[129,115,117,110,119,127,116,103,0,106],
[117,111,107,94,117,111,105,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,132,117,112,107,113,109,121,122],
[106,0,118,104,103,103,92,94,107,117],
[78,92,0,105,84,88,85,80,106,104],
[93,106,105,0,94,99,95,99,106,98],
[98,107,126,116,0,111,108,108,121,115],
[103,107,122,111,99,0,98,101,110,103],
[97,118,125,115,102,112,0,105,129,115],
[101,116,130,111,102,109,105,0,112,121],
[89,103,104,104,89,100,81,98,0,116],
[88,93,106,112,95,107,95,89,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,105,109,105,97,99,108,118],
[109,0,100,113,108,112,115,101,111,108],
[115,110,0,126,113,95,101,112,111,113],
[105,97,84,0,101,94,92,99,98,94],
[101,102,97,109,0,95,91,95,101,102],
[105,98,115,116,115,0,110,117,102,100],
[113,95,109,118,119,100,0,104,97,103],
[111,109,98,111,115,93,106,0,110,108],
[102,99,99,112,109,108,113,100,0,108],
[92,102,97,116,108,110,107,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,108,117,103,119,133,105,112],
[105,0,109,116,127,102,109,109,94,104],
[97,101,0,93,112,105,111,113,95,99],
[102,94,117,0,117,98,107,109,116,107],
[93,83,98,93,0,86,100,99,88,92],
[107,108,105,112,124,0,114,109,93,105],
[91,101,99,103,110,96,0,123,98,101],
[77,101,97,101,111,101,87,0,101,90],
[105,116,115,94,122,117,112,109,0,105],
[98,106,111,103,118,105,109,120,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,103,113,103,106,103,86,106],
[100,0,107,99,94,96,101,94,95,99],
[98,103,0,106,114,110,109,117,104,119],
[107,111,104,0,117,114,106,109,109,109],
[97,116,96,93,0,100,103,94,104,97],
[107,114,100,96,110,0,87,104,98,106],
[104,109,101,104,107,123,0,105,108,115],
[107,116,93,101,116,106,105,0,112,95],
[124,115,106,101,106,112,102,98,0,103],
[104,111,91,101,113,104,95,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,108,102,101,117,109,110,105],
[93,0,97,102,99,97,106,101,103,99],
[103,113,0,111,110,110,112,104,110,108],
[102,108,99,0,98,112,116,97,113,108],
[108,111,100,112,0,122,111,118,104,112],
[109,113,100,98,88,0,110,109,106,111],
[93,104,98,94,99,100,0,96,97,98],
[101,109,106,113,92,101,114,0,96,101],
[100,107,100,97,106,104,113,114,0,104],
[105,111,102,102,98,99,112,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,112,91,50,96,84,93,70,73],
[120,0,133,92,44,136,107,109,129,98],
[98,77,0,86,59,121,94,101,97,59],
[119,118,124,0,103,119,140,112,137,116],
[160,166,151,107,0,114,152,141,119,99],
[114,74,89,91,96,0,93,80,120,104],
[126,103,116,70,58,117,0,98,107,86],
[117,101,109,98,69,130,112,0,122,91],
[140,81,113,73,91,90,103,88,0,102],
[137,112,151,94,111,106,124,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,107,110,93,102,101,109,97],
[113,0,96,99,99,91,101,86,101,94],
[103,114,0,105,103,103,111,99,97,98],
[103,111,105,0,105,107,100,89,102,99],
[100,111,107,105,0,98,109,96,104,103],
[117,119,107,103,112,0,105,105,102,104],
[108,109,99,110,101,105,0,98,103,94],
[109,124,111,121,114,105,112,0,109,116],
[101,109,113,108,106,108,107,101,0,90],
[113,116,112,111,107,106,116,94,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,111,101,111,103,93,100,100],
[102,0,108,114,112,112,107,106,118,107],
[109,102,0,106,92,100,108,98,111,103],
[99,96,104,0,101,106,103,95,100,91],
[109,98,118,109,0,110,115,98,118,116],
[99,98,110,104,100,0,118,83,110,101],
[107,103,102,107,95,92,0,86,101,111],
[117,104,112,115,112,127,124,0,114,119],
[110,92,99,110,92,100,109,96,0,105],
[110,103,107,119,94,109,99,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,100,111,102,117,74,108,80],
[98,0,103,103,102,110,86,98,108,92],
[94,107,0,102,119,108,120,91,91,90],
[110,107,108,0,107,95,108,114,96,103],
[99,108,91,103,0,110,94,67,93,96],
[108,100,102,115,100,0,82,77,101,74],
[93,124,90,102,116,128,0,98,103,106],
[136,112,119,96,143,133,112,0,109,115],
[102,102,119,114,117,109,107,101,0,95],
[130,118,120,107,114,136,104,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,120,99,111,123,99,109,104],
[107,0,116,121,102,103,106,108,103,105],
[114,94,0,116,104,105,121,101,108,99],
[90,89,94,0,97,107,105,103,101,96],
[111,108,106,113,0,116,115,112,117,105],
[99,107,105,103,94,0,113,100,113,102],
[87,104,89,105,95,97,0,109,104,95],
[111,102,109,107,98,110,101,0,110,88],
[101,107,102,109,93,97,106,100,0,92],
[106,105,111,114,105,108,115,122,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,108,103,101,110,115,121,114],
[100,0,89,95,100,84,110,100,102,94],
[86,121,0,91,104,112,106,106,101,98],
[102,115,119,0,105,107,114,111,98,108],
[107,110,106,105,0,106,116,107,121,114],
[109,126,98,103,104,0,145,98,112,100],
[100,100,104,96,94,65,0,97,115,99],
[95,110,104,99,103,112,113,0,104,87],
[89,108,109,112,89,98,95,106,0,103],
[96,116,112,102,96,110,111,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,106,98,106,108,98,91,113],
[95,0,95,103,91,100,107,97,93,95],
[108,115,0,109,109,112,109,105,107,109],
[104,107,101,0,91,107,110,104,100,100],
[112,119,101,119,0,121,108,105,105,108],
[104,110,98,103,89,0,107,101,95,103],
[102,103,101,100,102,103,0,99,99,99],
[112,113,105,106,105,109,111,0,101,113],
[119,117,103,110,105,115,111,109,0,109],
[97,115,101,110,102,107,111,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,112,113,103,105,106,104,103],
[106,0,87,106,96,102,99,95,92,85],
[108,123,0,121,115,112,105,129,108,111],
[98,104,89,0,102,88,98,102,97,103],
[97,114,95,108,0,99,103,109,106,98],
[107,108,98,122,111,0,113,111,97,108],
[105,111,105,112,107,97,0,109,103,111],
[104,115,81,108,101,99,101,0,94,98],
[106,118,102,113,104,113,107,116,0,111],
[107,125,99,107,112,102,99,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,96,89,89,125,120,108,97,111],
[123,0,115,111,87,103,120,116,119,116],
[114,95,0,106,112,112,129,109,104,112],
[121,99,104,0,86,116,105,107,121,128],
[121,123,98,124,0,126,137,123,133,124],
[85,107,98,94,84,0,104,116,114,113],
[90,90,81,105,73,106,0,121,110,95],
[102,94,101,103,87,94,89,0,98,117],
[113,91,106,89,77,96,100,112,0,110],
[99,94,98,82,86,97,115,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,105,110,106,109,118,111,113],
[98,0,104,102,98,92,101,96,101,96],
[96,106,0,87,94,100,99,103,110,105],
[105,108,123,0,109,112,108,117,111,107],
[100,112,116,101,0,112,109,119,104,112],
[104,118,110,98,98,0,121,119,109,118],
[101,109,111,102,101,89,0,111,103,105],
[92,114,107,93,91,91,99,0,100,98],
[99,109,100,99,106,101,107,110,0,109],
[97,114,105,103,98,92,105,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,129,97,118,117,84,109,101,86],
[96,0,129,86,88,93,85,109,96,111],
[81,81,0,94,87,75,75,97,96,103],
[113,124,116,0,111,111,101,124,108,126],
[92,122,123,99,0,106,105,120,106,115],
[93,117,135,99,104,0,96,113,105,104],
[126,125,135,109,105,114,0,139,130,121],
[101,101,113,86,90,97,71,0,81,96],
[109,114,114,102,104,105,80,129,0,103],
[124,99,107,84,95,106,89,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,88,97,97,101,92,93,90,97],
[116,0,92,110,96,96,102,89,93,92],
[122,118,0,124,119,119,112,100,101,109],
[113,100,86,0,105,100,102,91,92,92],
[113,114,91,105,0,98,99,86,89,93],
[109,114,91,110,112,0,114,89,104,110],
[118,108,98,108,111,96,0,97,98,91],
[117,121,110,119,124,121,113,0,104,109],
[120,117,109,118,121,106,112,106,0,102],
[113,118,101,118,117,100,119,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,89,98,114,96,102,89,94],
[107,0,110,97,91,116,99,102,98,99],
[115,100,0,102,102,112,92,104,102,102],
[121,113,108,0,104,122,96,111,98,104],
[112,119,108,106,0,122,96,111,111,104],
[96,94,98,88,88,0,82,91,92,91],
[114,111,118,114,114,128,0,118,115,105],
[108,108,106,99,99,119,92,0,101,97],
[121,112,108,112,99,118,95,109,0,108],
[116,111,108,106,106,119,105,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,90,123,134,119,111,102,112,98],
[65,0,84,88,77,102,80,83,81,66],
[120,126,0,109,120,109,119,111,97,89],
[87,122,101,0,117,109,111,65,129,74],
[76,133,90,93,0,95,79,92,75,88],
[91,108,101,101,115,0,110,96,109,78],
[99,130,91,99,131,100,0,86,101,99],
[108,127,99,145,118,114,124,0,125,113],
[98,129,113,81,135,101,109,85,0,94],
[112,144,121,136,122,132,111,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,116,110,111,109,122,121,130],
[112,0,111,104,105,103,111,119,110,124],
[96,99,0,95,105,99,105,98,103,110],
[94,106,115,0,106,111,104,107,94,105],
[100,105,105,104,0,112,105,108,102,111],
[99,107,111,99,98,0,100,107,98,107],
[101,99,105,106,105,110,0,105,110,110],
[88,91,112,103,102,103,105,0,99,119],
[89,100,107,116,108,112,100,111,0,122],
[80,86,100,105,99,103,100,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,35,31,112,104,60,94,108,60],
[117,0,127,119,92,107,84,140,119,103],
[175,83,0,139,104,111,102,113,129,125],
[179,91,71,0,150,144,127,146,183,171],
[98,118,106,60,0,144,83,117,100,73],
[106,103,99,66,66,0,62,125,100,106],
[150,126,108,83,127,148,0,140,98,90],
[116,70,97,64,93,85,70,0,79,52],
[102,91,81,27,110,110,112,131,0,131],
[150,107,85,39,137,104,120,158,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,105,103,106,104,106,110,101],
[104,0,99,94,112,108,95,92,111,99],
[110,111,0,97,108,106,113,103,112,99],
[105,116,113,0,104,111,101,99,107,103],
[107,98,102,106,0,107,106,101,112,88],
[104,102,104,99,103,0,101,102,108,104],
[106,115,97,109,104,109,0,103,110,103],
[104,118,107,111,109,108,107,0,118,107],
[100,99,98,103,98,102,100,92,0,98],
[109,111,111,107,122,106,107,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,83,146,100,109,129,129,85,106],
[103,0,112,107,104,107,129,116,103,102],
[127,98,0,131,100,113,117,131,110,128],
[64,103,79,0,95,86,101,109,74,94],
[110,106,110,115,0,113,127,120,81,101],
[101,103,97,124,97,0,138,115,78,96],
[81,81,93,109,83,72,0,116,80,90],
[81,94,79,101,90,95,94,0,86,116],
[125,107,100,136,129,132,130,124,0,117],
[104,108,82,116,109,114,120,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,113,110,107,109,117,113,103],
[106,0,110,124,102,103,125,113,113,109],
[93,100,0,109,104,96,103,98,108,94],
[97,86,101,0,91,96,109,105,100,82],
[100,108,106,119,0,101,112,105,102,93],
[103,107,114,114,109,0,107,99,108,87],
[101,85,107,101,98,103,0,109,96,99],
[93,97,112,105,105,111,101,0,112,109],
[97,97,102,110,108,102,114,98,0,105],
[107,101,116,128,117,123,111,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,112,100,104,98,101,109,109],
[93,0,101,112,115,84,81,89,115,104],
[106,109,0,114,110,97,111,93,123,117],
[98,98,96,0,105,87,109,94,113,95],
[110,95,100,105,0,102,96,97,107,95],
[106,126,113,123,108,0,121,103,122,107],
[112,129,99,101,114,89,0,94,104,108],
[109,121,117,116,113,107,116,0,111,105],
[101,95,87,97,103,88,106,99,0,101],
[101,106,93,115,115,103,102,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,118,106,105,117,105,119,115],
[95,0,106,106,110,101,114,97,113,108],
[105,104,0,103,106,107,108,100,98,106],
[92,104,107,0,99,102,108,98,105,109],
[104,100,104,111,0,107,111,89,114,110],
[105,109,103,108,103,0,105,90,111,110],
[93,96,102,102,99,105,0,96,116,106],
[105,113,110,112,121,120,114,0,118,114],
[91,97,112,105,96,99,94,92,0,104],
[95,102,104,101,100,100,104,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,125,116,138,128,127,126,127,115],
[108,0,130,116,82,168,142,84,115,96],
[85,80,0,59,82,120,59,72,118,70],
[94,94,151,0,92,122,141,104,127,84],
[72,128,128,118,0,132,129,70,116,83],
[82,42,90,88,78,0,115,80,101,92],
[83,68,151,69,81,95,0,115,140,92],
[84,126,138,106,140,130,95,0,107,72],
[83,95,92,83,94,109,70,103,0,94],
[95,114,140,126,127,118,118,138,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,101,106,118,103,130,122,108],
[94,0,103,88,112,113,91,126,96,109],
[100,107,0,115,110,108,105,115,101,112],
[109,122,95,0,106,114,102,118,112,127],
[104,98,100,104,0,113,110,113,106,105],
[92,97,102,96,97,0,87,106,90,111],
[107,119,105,108,100,123,0,113,112,101],
[80,84,95,92,97,104,97,0,95,97],
[88,114,109,98,104,120,98,115,0,101],
[102,101,98,83,105,99,109,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,128,112,96,108,116,111,114,114],
[86,0,98,104,103,93,94,92,117,112],
[82,112,0,110,124,108,109,95,111,124],
[98,106,100,0,91,108,112,103,102,102],
[114,107,86,119,0,117,69,79,110,87],
[102,117,102,102,93,0,99,104,111,122],
[94,116,101,98,141,111,0,112,104,115],
[99,118,115,107,131,106,98,0,112,122],
[96,93,99,108,100,99,106,98,0,100],
[96,98,86,108,123,88,95,88,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,103,101,96,100,105,94,95],
[112,0,117,101,106,113,107,105,96,108],
[109,93,0,100,106,101,106,107,92,104],
[107,109,110,0,105,107,106,116,92,109],
[109,104,104,105,0,95,104,98,97,100],
[114,97,109,103,115,0,108,110,98,105],
[110,103,104,104,106,102,0,117,96,110],
[105,105,103,94,112,100,93,0,90,107],
[116,114,118,118,113,112,114,120,0,105],
[115,102,106,101,110,105,100,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,110,116,104,112,115,110,112],
[108,0,102,120,108,116,100,114,110,120],
[111,108,0,114,110,109,114,102,103,108],
[100,90,96,0,97,99,96,98,89,110],
[94,102,100,113,0,98,98,105,91,101],
[106,94,101,111,112,0,89,103,110,100],
[98,110,96,114,112,121,0,105,100,105],
[95,96,108,112,105,107,105,0,99,106],
[100,100,107,121,119,100,110,111,0,108],
[98,90,102,100,109,110,105,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,89,98,100,94,97,114,113,96],
[105,0,99,106,91,114,124,124,107,109],
[121,111,0,111,113,116,104,129,112,111],
[112,104,99,0,91,115,103,121,108,111],
[110,119,97,119,0,130,116,110,111,107],
[116,96,94,95,80,0,96,123,107,106],
[113,86,106,107,94,114,0,117,93,103],
[96,86,81,89,100,87,93,0,92,94],
[97,103,98,102,99,103,117,118,0,114],
[114,101,99,99,103,104,107,116,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,118,109,105,101,121,115,112],
[105,0,104,115,107,107,106,116,117,112],
[99,106,0,107,102,107,104,110,107,97],
[92,95,103,0,110,96,103,112,108,96],
[101,103,108,100,0,107,109,110,117,110],
[105,103,103,114,103,0,117,108,110,108],
[109,104,106,107,101,93,0,107,116,108],
[89,94,100,98,100,102,103,0,116,105],
[95,93,103,102,93,100,94,94,0,102],
[98,98,113,114,100,102,102,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,93,150,130,104,86,93,85],
[99,0,114,130,130,75,123,83,101,132],
[101,96,0,84,159,111,152,95,94,101],
[117,80,126,0,130,93,86,67,112,103],
[60,80,51,80,0,94,104,80,71,60],
[80,135,99,117,116,0,101,101,110,101],
[106,87,58,124,106,109,0,108,134,74],
[124,127,115,143,130,109,102,0,121,119],
[117,109,116,98,139,100,76,89,0,86],
[125,78,109,107,150,109,136,91,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,115,93,103,111,109,105,98],
[114,0,108,115,91,122,100,111,119,103],
[116,102,0,107,104,106,97,120,108,96],
[95,95,103,0,106,101,100,98,94,94],
[117,119,106,104,0,120,112,109,107,108],
[107,88,104,109,90,0,89,119,91,96],
[99,110,113,110,98,121,0,107,87,99],
[101,99,90,112,101,91,103,0,107,97],
[105,91,102,116,103,119,123,103,0,103],
[112,107,114,116,102,114,111,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,100,111,111,126,101,109,115,117],
[92,0,95,86,95,89,95,96,95,99],
[110,115,0,100,96,110,105,106,113,120],
[99,124,110,0,97,131,93,126,104,126],
[99,115,114,113,0,134,100,122,109,118],
[84,121,100,79,76,0,90,106,104,110],
[109,115,105,117,110,120,0,113,120,128],
[101,114,104,84,88,104,97,0,104,112],
[95,115,97,106,101,106,90,106,0,117],
[93,111,90,84,92,100,82,98,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,108,98,98,98,125,112,117],
[113,0,115,101,102,102,103,117,104,113],
[104,95,0,96,109,92,88,124,95,117],
[102,109,114,0,113,98,90,123,102,104],
[112,108,101,97,0,105,81,105,115,114],
[112,108,118,112,105,0,111,131,119,134],
[112,107,122,120,129,99,0,119,94,115],
[85,93,86,87,105,79,91,0,92,106],
[98,106,115,108,95,91,116,118,0,111],
[93,97,93,106,96,76,95,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,103,118,105,112,114,116,99],
[104,0,101,104,115,93,110,90,116,92],
[106,109,0,107,119,95,111,87,113,94],
[107,106,103,0,121,96,115,104,111,98],
[92,95,91,89,0,84,95,90,107,92],
[105,117,115,114,126,0,126,97,121,109],
[98,100,99,95,115,84,0,92,112,83],
[96,120,123,106,120,113,118,0,120,103],
[94,94,97,99,103,89,98,90,0,91],
[111,118,116,112,118,101,127,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,117,102,101,115,105,123,89,106],
[114,0,135,122,126,113,114,113,103,123],
[93,75,0,90,94,87,81,106,87,79],
[108,88,120,0,105,112,95,116,110,106],
[109,84,116,105,0,111,97,115,98,100],
[95,97,123,98,99,0,102,103,110,90],
[105,96,129,115,113,108,0,103,105,102],
[87,97,104,94,95,107,107,0,104,88],
[121,107,123,100,112,100,105,106,0,103],
[104,87,131,104,110,120,108,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,101,117,109,102,111,100,110],
[97,0,92,86,123,93,99,95,104,117],
[108,118,0,98,122,114,107,111,109,121],
[109,124,112,0,125,106,108,104,111,131],
[93,87,88,85,0,87,100,89,92,99],
[101,117,96,104,123,0,99,95,114,115],
[108,111,103,102,110,111,0,104,106,118],
[99,115,99,106,121,115,106,0,103,126],
[110,106,101,99,118,96,104,107,0,120],
[100,93,89,79,111,95,92,84,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,100,101,107,107,95,105,102],
[118,0,116,116,106,108,108,103,105,97],
[99,94,0,106,95,114,102,99,102,95],
[110,94,104,0,103,108,114,100,96,95],
[109,104,115,107,0,113,109,113,118,106],
[103,102,96,102,97,0,104,94,107,91],
[103,102,108,96,101,106,0,108,102,104],
[115,107,111,110,97,116,102,0,111,95],
[105,105,108,114,92,103,108,99,0,104],
[108,113,115,115,104,119,106,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,117,93,110,102,92,99,111],
[103,0,105,114,98,92,104,103,97,114],
[95,105,0,107,79,106,99,90,92,102],
[93,96,103,0,100,103,96,103,98,105],
[117,112,131,110,0,107,105,111,111,115],
[100,118,104,107,103,0,104,110,96,125],
[108,106,111,114,105,106,0,92,102,114],
[118,107,120,107,99,100,118,0,113,117],
[111,113,118,112,99,114,108,97,0,118],
[99,96,108,105,95,85,96,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,109,99,103,103,109,108,115,109],
[117,0,111,119,103,109,115,115,131,117],
[101,99,0,98,104,99,116,100,110,102],
[111,91,112,0,113,103,110,114,118,113],
[107,107,106,97,0,101,99,113,116,107],
[107,101,111,107,109,0,126,118,128,116],
[101,95,94,100,111,84,0,119,115,115],
[102,95,110,96,97,92,91,0,114,108],
[95,79,100,92,94,82,95,96,0,97],
[101,93,108,97,103,94,95,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,84,64,90,84,116,70,81],
[90,0,100,110,88,92,72,107,82,90],
[117,110,0,104,94,92,111,102,104,133],
[126,100,106,0,114,113,82,96,83,107],
[146,122,116,96,0,124,112,117,103,152],
[120,118,118,97,86,0,111,83,110,147],
[126,138,99,128,98,99,0,137,70,118],
[94,103,108,114,93,127,73,0,87,109],
[140,128,106,127,107,100,140,123,0,122],
[129,120,77,103,58,63,92,101,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,100,96,97,95,98,105,110],
[101,0,107,103,101,97,96,106,108,107],
[112,103,0,102,100,98,98,103,113,108],
[110,107,108,0,91,98,93,98,101,99],
[114,109,110,119,0,98,105,105,108,107],
[113,113,112,112,112,0,108,103,112,109],
[115,114,112,117,105,102,0,106,114,106],
[112,104,107,112,105,107,104,0,114,111],
[105,102,97,109,102,98,96,96,0,99],
[100,103,102,111,103,101,104,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,113,117,104,102,113,117,112],
[110,0,107,92,103,101,101,106,128,121],
[92,103,0,104,105,108,98,134,97,136],
[97,118,106,0,122,109,94,120,115,131],
[93,107,105,88,0,103,107,106,98,123],
[106,109,102,101,107,0,102,114,126,116],
[108,109,112,116,103,108,0,99,112,123],
[97,104,76,90,104,96,111,0,103,105],
[93,82,113,95,112,84,98,107,0,106],
[98,89,74,79,87,94,87,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,106,105,106,109,109,118,106],
[99,0,96,103,103,101,100,110,103,101],
[108,114,0,102,111,98,112,116,117,112],
[104,107,108,0,107,106,111,112,121,105],
[105,107,99,103,0,105,104,107,107,108],
[104,109,112,104,105,0,104,112,114,103],
[101,110,98,99,106,106,0,110,115,100],
[101,100,94,98,103,98,100,0,106,98],
[92,107,93,89,103,96,95,104,0,96],
[104,109,98,105,102,107,110,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,98,97,102,103,100,98,96],
[111,0,109,101,96,95,105,115,97,115],
[119,101,0,100,105,97,103,118,96,108],
[112,109,110,0,102,98,104,106,106,110],
[113,114,105,108,0,104,111,118,102,110],
[108,115,113,112,106,0,104,113,106,117],
[107,105,107,106,99,106,0,104,111,113],
[110,95,92,104,92,97,106,0,100,105],
[112,113,114,104,108,104,99,110,0,119],
[114,95,102,100,100,93,97,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,103,111,100,110,104,99,114],
[115,0,134,87,100,101,79,89,108,115],
[107,76,0,92,112,90,109,97,91,120],
[107,123,118,0,123,101,127,118,118,124],
[99,110,98,87,0,107,103,99,96,114],
[110,109,120,109,103,0,111,110,106,130],
[100,131,101,83,107,99,0,101,111,127],
[106,121,113,92,111,100,109,0,108,129],
[111,102,119,92,114,104,99,102,0,113],
[96,95,90,86,96,80,83,81,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,107,91,106,94,87,101,99],
[108,0,80,90,95,109,100,91,104,105],
[109,130,0,103,116,115,114,111,117,110],
[103,120,107,0,104,123,110,101,113,106],
[119,115,94,106,0,105,101,101,104,111],
[104,101,95,87,105,0,91,91,87,87],
[116,110,96,100,109,119,0,97,114,101],
[123,119,99,109,109,119,113,0,105,111],
[109,106,93,97,106,123,96,105,0,97],
[111,105,100,104,99,123,109,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,85,93,103,101,84,112,97],
[113,0,110,110,108,108,113,112,116,105],
[108,100,0,100,91,107,107,94,113,94],
[125,100,110,0,102,109,106,113,118,100],
[117,102,119,108,0,111,106,111,124,97],
[107,102,103,101,99,0,95,105,110,106],
[109,97,103,104,104,115,0,106,115,101],
[126,98,116,97,99,105,104,0,120,110],
[98,94,97,92,86,100,95,90,0,96],
[113,105,116,110,113,104,109,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,137,113,114,111,110,109,124,101],
[91,0,125,100,101,90,91,91,123,85],
[73,85,0,78,78,75,76,71,73,69],
[97,110,132,0,107,96,106,93,109,91],
[96,109,132,103,0,102,91,104,110,89],
[99,120,135,114,108,0,104,125,112,105],
[100,119,134,104,119,106,0,105,107,105],
[101,119,139,117,106,85,105,0,109,84],
[86,87,137,101,100,98,103,101,0,91],
[109,125,141,119,121,105,105,126,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,106,113,100,107,114,99,111],
[110,0,112,110,104,125,122,110,113,143],
[103,98,0,98,104,101,104,84,106,119],
[104,100,112,0,115,107,110,111,113,128],
[97,106,106,95,0,104,103,106,105,100],
[110,85,109,103,106,0,117,102,89,112],
[103,88,106,100,107,93,0,88,95,110],
[96,100,126,99,104,108,122,0,117,119],
[111,97,104,97,105,121,115,93,0,105],
[99,67,91,82,110,98,100,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,119,106,100,103,107,114,116],
[116,0,107,100,116,123,113,121,113,110],
[92,103,0,104,99,103,102,106,106,99],
[91,110,106,0,95,110,101,103,111,105],
[104,94,111,115,0,108,101,122,107,98],
[110,87,107,100,102,0,129,118,117,117],
[107,97,108,109,109,81,0,108,105,124],
[103,89,104,107,88,92,102,0,111,104],
[96,97,104,99,103,93,105,99,0,111],
[94,100,111,105,112,93,86,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,99,102,97,107,96,102,97],
[90,0,94,88,96,92,101,87,99,96],
[106,116,0,98,111,122,117,94,110,108],
[111,122,112,0,100,108,118,105,111,111],
[108,114,99,110,0,112,108,106,100,108],
[113,118,88,102,98,0,98,90,108,108],
[103,109,93,92,102,112,0,91,99,106],
[114,123,116,105,104,120,119,0,113,119],
[108,111,100,99,110,102,111,97,0,97],
[113,114,102,99,102,102,104,91,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,111,100,111,103,94,117,113],
[90,0,85,81,82,91,81,81,89,80],
[107,125,0,110,115,134,114,90,120,104],
[99,129,100,0,110,121,95,102,102,107],
[110,128,95,100,0,121,112,96,107,114],
[99,119,76,89,89,0,79,87,93,89],
[107,129,96,115,98,131,0,104,108,117],
[116,129,120,108,114,123,106,0,122,100],
[93,121,90,108,103,117,102,88,0,108],
[97,130,106,103,96,121,93,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,104,105,107,106,113,120,107],
[111,0,121,128,112,110,105,107,118,121],
[113,89,0,112,112,93,102,106,112,108],
[106,82,98,0,99,100,102,101,110,110],
[105,98,98,111,0,92,119,112,111,104],
[103,100,117,110,118,0,114,112,117,116],
[104,105,108,108,91,96,0,100,113,107],
[97,103,104,109,98,98,110,0,110,113],
[90,92,98,100,99,93,97,100,0,110],
[103,89,102,100,106,94,103,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,99,101,106,106,105,112,112],
[103,0,99,93,105,99,104,95,100,107],
[96,111,0,115,109,94,106,108,109,124],
[111,117,95,0,98,104,103,95,102,102],
[109,105,101,112,0,98,116,102,105,117],
[104,111,116,106,112,0,111,114,105,114],
[104,106,104,107,94,99,0,94,96,109],
[105,115,102,115,108,96,116,0,103,111],
[98,110,101,108,105,105,114,107,0,102],
[98,103,86,108,93,96,101,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,98,101,112,104,97,114,103],
[116,0,107,101,104,111,113,102,114,112],
[117,103,0,112,100,112,114,101,115,118],
[112,109,98,0,95,103,100,93,108,104],
[109,106,110,115,0,114,102,110,113,100],
[98,99,98,107,96,0,103,93,110,107],
[106,97,96,110,108,107,0,95,112,108],
[113,108,109,117,100,117,115,0,120,120],
[96,96,95,102,97,100,98,90,0,96],
[107,98,92,106,110,103,102,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,122,105,110,115,112,106,107],
[112,0,113,108,114,104,121,108,110,105],
[99,97,0,105,106,97,111,99,113,106],
[88,102,105,0,103,105,110,101,105,99],
[105,96,104,107,0,104,111,102,99,105],
[100,106,113,105,106,0,107,105,114,99],
[95,89,99,100,99,103,0,102,107,102],
[98,102,111,109,108,105,108,0,101,102],
[104,100,97,105,111,96,103,109,0,99],
[103,105,104,111,105,111,108,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,111,110,105,106,104,107,97],
[101,0,109,123,116,111,111,125,123,100],
[96,101,0,104,105,95,96,103,105,94],
[99,87,106,0,104,97,100,106,94,86],
[100,94,105,106,0,108,95,109,108,93],
[105,99,115,113,102,0,94,105,107,106],
[104,99,114,110,115,116,0,115,109,88],
[106,85,107,104,101,105,95,0,95,97],
[103,87,105,116,102,103,101,115,0,99],
[113,110,116,124,117,104,122,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,91,85,86,86,81,95,73,96],
[139,0,99,99,109,98,112,121,108,115],
[119,111,0,98,119,83,109,103,91,111],
[125,111,112,0,110,120,112,118,102,108],
[124,101,91,100,0,97,104,110,84,100],
[124,112,127,90,113,0,118,113,108,109],
[129,98,101,98,106,92,0,112,90,102],
[115,89,107,92,100,97,98,0,95,94],
[137,102,119,108,126,102,120,115,0,123],
[114,95,99,102,110,101,108,116,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,107,83,93,115,123,118,100],
[92,0,111,106,89,80,95,105,116,97],
[109,99,0,115,111,87,103,120,107,106],
[103,104,95,0,98,90,95,103,114,98],
[127,121,99,112,0,106,113,117,126,129],
[117,130,123,120,104,0,99,126,120,117],
[95,115,107,115,97,111,0,116,114,110],
[87,105,90,107,93,84,94,0,120,98],
[92,94,103,96,84,90,96,90,0,102],
[110,113,104,112,81,93,100,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,109,99,110,118,113,105,107],
[108,0,114,107,104,105,114,111,106,98],
[101,96,0,114,98,102,108,106,101,101],
[101,103,96,0,91,98,112,107,97,99],
[111,106,112,119,0,105,116,122,123,104],
[100,105,108,112,105,0,114,110,115,112],
[92,96,102,98,94,96,0,104,97,93],
[97,99,104,103,88,100,106,0,104,97],
[105,104,109,113,87,95,113,106,0,92],
[103,112,109,111,106,98,117,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,77,103,97,100,102,100,104,92],
[105,0,101,107,111,105,110,112,105,115],
[133,109,0,107,115,106,117,98,112,104],
[107,103,103,0,108,110,115,111,102,107],
[113,99,95,102,0,103,117,104,106,109],
[110,105,104,100,107,0,115,109,114,111],
[108,100,93,95,93,95,0,101,100,88],
[110,98,112,99,106,101,109,0,108,108],
[106,105,98,108,104,96,110,102,0,101],
[118,95,106,103,101,99,122,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,101,101,116,79,87,93,110],
[121,0,109,121,114,150,121,116,88,105],
[123,101,0,120,115,156,115,119,107,129],
[109,89,90,0,93,126,103,99,88,101],
[109,96,95,117,0,129,107,116,129,104],
[94,60,54,84,81,0,83,72,68,76],
[131,89,95,107,103,127,0,120,92,105],
[123,94,91,111,94,138,90,0,93,101],
[117,122,103,122,81,142,118,117,0,117],
[100,105,81,109,106,134,105,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,121,100,100,129,108,99,108,139],
[71,0,91,88,62,78,68,81,80,90],
[89,119,0,123,85,114,103,116,123,149],
[110,122,87,0,69,97,89,97,128,102],
[110,148,125,141,0,126,106,90,127,141],
[81,132,96,113,84,0,68,86,105,157],
[102,142,107,121,104,142,0,129,132,135],
[111,129,94,113,120,124,81,0,114,99],
[102,130,87,82,83,105,78,96,0,92],
[71,120,61,108,69,53,75,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,75,95,86,114,91,78,81],
[101,0,101,78,81,93,92,85,84,87],
[118,109,0,102,61,93,134,107,93,85],
[135,132,108,0,93,99,119,81,101,88],
[115,129,149,117,0,106,124,106,92,107],
[124,117,117,111,104,0,97,74,113,129],
[96,118,76,91,86,113,0,108,90,87],
[119,125,103,129,104,136,102,0,114,113],
[132,126,117,109,118,97,120,96,0,130],
[129,123,125,122,103,81,123,97,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,109,109,116,117,105,109,108],
[94,0,106,109,107,90,107,92,102,99],
[93,104,0,108,97,109,106,93,110,108],
[101,101,102,0,107,104,111,88,114,107],
[101,103,113,103,0,99,110,96,111,105],
[94,120,101,106,111,0,115,92,101,97],
[93,103,104,99,100,95,0,87,96,99],
[105,118,117,122,114,118,123,0,110,118],
[101,108,100,96,99,109,114,100,0,103],
[102,111,102,103,105,113,111,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,141,97,97,210,97,166,134],
[113,0,109,109,210,145,178,76,145,134],
[113,101,0,44,166,101,178,76,101,69],
[69,101,166,0,166,101,166,32,101,134],
[113,0,44,44,0,76,178,76,113,69],
[113,65,109,109,134,0,178,44,69,134],
[0,32,32,44,32,32,0,32,32,0],
[113,134,134,178,134,166,178,0,69,134],
[44,65,109,109,97,141,178,141,0,65],
[76,76,141,76,141,76,210,76,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,96,87,98,88,109,127,121],
[93,0,133,119,109,105,92,70,134,131],
[101,77,0,93,99,96,74,87,111,97],
[114,91,117,0,96,119,89,98,113,105],
[123,101,111,114,0,122,105,90,142,124],
[112,105,114,91,88,0,98,82,124,120],
[122,118,136,121,105,112,0,134,130,121],
[101,140,123,112,120,128,76,0,139,119],
[83,76,99,97,68,86,80,71,0,104],
[89,79,113,105,86,90,89,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,92,97,97,91,98,119,97],
[97,0,102,109,122,104,101,97,130,76],
[103,108,0,121,130,130,102,100,126,106],
[118,101,89,0,109,133,93,118,116,93],
[113,88,80,101,0,113,69,95,115,87],
[113,106,80,77,97,0,85,89,96,82],
[119,109,108,117,141,125,0,113,118,97],
[112,113,110,92,115,121,97,0,109,89],
[91,80,84,94,95,114,92,101,0,71],
[113,134,104,117,123,128,113,121,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,128,108,112,102,118,111,127,116],
[116,0,119,108,122,110,116,113,103,107],
[82,91,0,95,108,100,116,92,113,104],
[102,102,115,0,110,116,110,116,105,118],
[98,88,102,100,0,99,104,88,100,106],
[108,100,110,94,111,0,129,97,105,105],
[92,94,94,100,106,81,0,103,96,111],
[99,97,118,94,122,113,107,0,121,115],
[83,107,97,105,110,105,114,89,0,105],
[94,103,106,92,104,105,99,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,90,109,112,87,83,102,116],
[97,0,115,76,99,84,88,78,98,99],
[100,95,0,100,93,93,82,79,108,80],
[120,134,110,0,101,93,113,99,112,105],
[101,111,117,109,0,97,89,90,106,99],
[98,126,117,117,113,0,86,93,139,101],
[123,122,128,97,121,124,0,105,123,110],
[127,132,131,111,120,117,105,0,133,114],
[108,112,102,98,104,71,87,77,0,96],
[94,111,130,105,111,109,100,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,89,104,95,101,99,93,106,102],
[118,0,112,104,115,106,100,113,114,109],
[121,98,0,99,106,115,106,100,104,107],
[106,106,111,0,111,106,112,114,113,103],
[115,95,104,99,0,105,103,97,106,107],
[109,104,95,104,105,0,105,106,103,107],
[111,110,104,98,107,105,0,107,108,103],
[117,97,110,96,113,104,103,0,108,99],
[104,96,106,97,104,107,102,102,0,98],
[108,101,103,107,103,103,107,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,103,103,106,102,101,116,93],
[92,0,98,90,84,85,86,81,95,105],
[89,112,0,87,93,93,84,88,96,92],
[107,120,123,0,106,109,105,112,122,104],
[107,126,117,104,0,105,94,114,114,113],
[104,125,117,101,105,0,102,96,113,99],
[108,124,126,105,116,108,0,114,110,112],
[109,129,122,98,96,114,96,0,112,105],
[94,115,114,88,96,97,100,98,0,112],
[117,105,118,106,97,111,98,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,119,111,119,101,100,100,116,89],
[126,0,112,113,122,98,118,114,127,101],
[91,98,0,111,126,101,107,93,109,88],
[99,97,99,0,102,101,101,94,112,84],
[91,88,84,108,0,93,98,89,97,84],
[109,112,109,109,117,0,114,108,120,95],
[110,92,103,109,112,96,0,109,119,100],
[110,96,117,116,121,102,101,0,104,107],
[94,83,101,98,113,90,91,106,0,84],
[121,109,122,126,126,115,110,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,127,124,106,114,129,90,118,127],
[82,0,112,111,92,107,74,80,103,95],
[83,98,0,86,67,73,72,89,104,96],
[86,99,124,0,94,83,111,84,103,127],
[104,118,143,116,0,103,124,130,114,140],
[96,103,137,127,107,0,105,69,89,126],
[81,136,138,99,86,105,0,85,131,109],
[120,130,121,126,80,141,125,0,129,124],
[92,107,106,107,96,121,79,81,0,105],
[83,115,114,83,70,84,101,86,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,90,105,105,107,95,103,92,123],
[96,0,91,94,68,113,97,68,87,92],
[120,119,0,114,89,107,125,101,109,120],
[105,116,96,0,91,115,117,94,109,99],
[105,142,121,119,0,124,121,111,101,114],
[103,97,103,95,86,0,96,108,111,110],
[115,113,85,93,89,114,0,93,92,103],
[107,142,109,116,99,102,117,0,93,108],
[118,123,101,101,109,99,118,117,0,115],
[87,118,90,111,96,100,107,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,140,102,157,74,102,189,140,157],
[91,0,91,140,161,91,140,140,91,161],
[70,119,0,102,108,123,172,157,123,119],
[108,70,108,0,157,59,108,157,59,157],
[53,49,102,53,0,53,102,189,53,172],
[136,119,87,151,157,0,102,136,87,157],
[108,70,38,102,108,108,0,108,108,108],
[21,70,53,53,21,74,102,0,74,70],
[70,119,87,151,157,123,102,136,0,119],
[53,49,91,53,38,53,102,140,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,106,105,110,115,108,104,116],
[98,0,106,101,95,106,112,105,107,113],
[96,104,0,95,109,121,118,105,110,118],
[104,109,115,0,104,113,117,108,112,123],
[105,115,101,106,0,106,117,99,119,114],
[100,104,89,97,104,0,115,101,108,108],
[95,98,92,93,93,95,0,98,102,105],
[102,105,105,102,111,109,112,0,104,116],
[106,103,100,98,91,102,108,106,0,121],
[94,97,92,87,96,102,105,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,106,102,116,103,115,81,105],
[92,0,103,90,94,102,108,93,83,96],
[106,107,0,102,96,124,100,110,100,115],
[104,120,108,0,91,108,109,105,101,118],
[108,116,114,119,0,129,105,111,85,111],
[94,108,86,102,81,0,98,127,91,110],
[107,102,110,101,105,112,0,113,91,115],
[95,117,100,105,99,83,97,0,105,98],
[129,127,110,109,125,119,119,105,0,109],
[105,114,95,92,99,100,95,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,96,104,106,100,106,109,114],
[98,0,111,98,113,115,118,107,105,121],
[118,99,0,106,103,120,104,94,104,119],
[114,112,104,0,120,99,106,108,118,124],
[106,97,107,90,0,115,102,111,109,117],
[104,95,90,111,95,0,102,97,107,120],
[110,92,106,104,108,108,0,93,105,99],
[104,103,116,102,99,113,117,0,108,115],
[101,105,106,92,101,103,105,102,0,100],
[96,89,91,86,93,90,111,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,137,83,92,103,89,79,115,73],
[111,0,153,86,104,95,100,75,102,99],
[73,57,0,42,64,71,66,54,82,88],
[127,124,168,0,113,106,140,99,134,111],
[118,106,146,97,0,117,96,87,119,94],
[107,115,139,104,93,0,105,83,97,104],
[121,110,144,70,114,105,0,125,124,120],
[131,135,156,111,123,127,85,0,129,117],
[95,108,128,76,91,113,86,81,0,92],
[137,111,122,99,116,106,90,93,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,104,101,132,113,110,108,122],
[99,0,89,101,77,112,109,108,94,114],
[96,121,0,119,107,123,122,109,96,116],
[106,109,91,0,112,123,111,86,94,121],
[109,133,103,98,0,109,109,102,97,113],
[78,98,87,87,101,0,91,85,81,101],
[97,101,88,99,101,119,0,94,93,106],
[100,102,101,124,108,125,116,0,98,119],
[102,116,114,116,113,129,117,112,0,114],
[88,96,94,89,97,109,104,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,107,105,95,106,110,97,102],
[104,0,90,97,98,94,101,99,88,101],
[102,120,0,103,98,102,96,100,91,112],
[103,113,107,0,101,111,108,111,103,112],
[105,112,112,109,0,98,114,118,107,114],
[115,116,108,99,112,0,112,113,98,119],
[104,109,114,102,96,98,0,109,108,107],
[100,111,110,99,92,97,101,0,97,105],
[113,122,119,107,103,112,102,113,0,109],
[108,109,98,98,96,91,103,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,106,89,111,122,109,108,90],
[115,0,116,125,96,106,113,107,116,103],
[100,94,0,95,100,117,121,88,102,97],
[104,85,115,0,93,98,106,110,101,86],
[121,114,110,117,0,140,119,120,113,99],
[99,104,93,112,70,0,104,94,111,108],
[88,97,89,104,91,106,0,92,105,95],
[101,103,122,100,90,116,118,0,129,100],
[102,94,108,109,97,99,105,81,0,82],
[120,107,113,124,111,102,115,110,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,107,91,114,98,114,119,107],
[95,0,94,100,98,97,88,99,109,103],
[98,116,0,115,106,114,94,121,126,114],
[103,110,95,0,92,113,107,119,105,107],
[119,112,104,118,0,121,97,121,123,105],
[96,113,96,97,89,0,94,117,115,97],
[112,122,116,103,113,116,0,125,120,120],
[96,111,89,91,89,93,85,0,99,96],
[91,101,84,105,87,95,90,111,0,86],
[103,107,96,103,105,113,90,114,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,133,97,124,126,130,194,160],
[108,0,77,138,97,122,77,69,156,138],
[117,133,0,183,108,158,77,101,131,160],
[77,72,27,0,83,30,79,128,100,97],
[113,113,102,127,0,102,100,99,160,135],
[86,88,52,180,108,0,54,119,131,138],
[84,133,133,131,110,156,0,105,158,191],
[80,141,109,82,111,91,105,0,128,163],
[16,54,79,110,50,79,52,82,0,148],
[50,72,50,113,75,72,19,47,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,97,96,98,105,116,96,114],
[96,0,117,109,106,96,133,115,85,111],
[110,93,0,99,108,88,108,112,84,91],
[113,101,111,0,108,96,120,116,94,100],
[114,104,102,102,0,113,117,111,84,111],
[112,114,122,114,97,0,118,105,110,100],
[105,77,102,90,93,92,0,89,76,108],
[94,95,98,94,99,105,121,0,93,107],
[114,125,126,116,126,100,134,117,0,130],
[96,99,119,110,99,110,102,103,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,101,112,119,80,77,94,106,92],
[133,0,114,99,130,96,81,122,95,97],
[109,96,0,107,116,103,98,122,99,99],
[98,111,103,0,87,103,91,101,93,109],
[91,80,94,123,0,89,58,108,92,87],
[130,114,107,107,121,0,87,108,104,90],
[133,129,112,119,152,123,0,138,104,106],
[116,88,88,109,102,102,72,0,95,95],
[104,115,111,117,118,106,106,115,0,103],
[118,113,111,101,123,120,104,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,90,101,127,112,109,106,113,112],
[84,0,88,94,122,107,85,113,99,93],
[120,122,0,94,136,127,125,115,114,131],
[109,116,116,0,132,134,111,104,103,115],
[83,88,74,78,0,87,88,107,79,92],
[98,103,83,76,123,0,93,93,77,87],
[101,125,85,99,122,117,0,108,84,108],
[104,97,95,106,103,117,102,0,95,96],
[97,111,96,107,131,133,126,115,0,108],
[98,117,79,95,118,123,102,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,76,109,93,108,84,118,122,81],
[128,0,102,111,106,122,101,133,117,106],
[134,108,0,107,116,111,112,115,131,105],
[101,99,103,0,92,96,114,110,107,92],
[117,104,94,118,0,117,95,114,103,86],
[102,88,99,114,93,0,106,99,74,111],
[126,109,98,96,115,104,0,93,118,111],
[92,77,95,100,96,111,117,0,103,104],
[88,93,79,103,107,136,92,107,0,80],
[129,104,105,118,124,99,99,106,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,99,113,109,114,114,132,108],
[113,0,102,103,121,118,105,115,121,103],
[108,108,0,96,107,96,128,103,121,101],
[111,107,114,0,119,111,104,100,125,95],
[97,89,103,91,0,100,121,92,117,101],
[101,92,114,99,110,0,113,111,133,115],
[96,105,82,106,89,97,0,92,101,101],
[96,95,107,110,118,99,118,0,115,100],
[78,89,89,85,93,77,109,95,0,82],
[102,107,109,115,109,95,109,110,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,111,106,103,115,104,106,105],
[107,0,106,94,106,90,102,106,97,102],
[90,104,0,106,99,94,106,104,100,103],
[99,116,104,0,112,88,127,107,108,109],
[104,104,111,98,0,100,108,106,114,113],
[107,120,116,122,110,0,127,113,105,100],
[95,108,104,83,102,83,0,100,80,97],
[106,104,106,103,104,97,110,0,106,98],
[104,113,110,102,96,105,130,104,0,111],
[105,108,107,101,97,110,113,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,124,105,139,126,109,128,138],
[97,0,78,151,101,85,127,104,126,105],
[103,132,0,110,94,117,107,129,128,105],
[86,59,100,0,84,107,104,94,113,99],
[105,109,116,126,0,130,126,122,133,109],
[71,125,93,103,80,0,99,128,119,110],
[84,83,103,106,84,111,0,113,123,91],
[101,106,81,116,88,82,97,0,119,100],
[82,84,82,97,77,91,87,91,0,94],
[72,105,105,111,101,100,119,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,116,106,106,113,111,109,111],
[98,0,106,97,101,93,107,104,95,94],
[105,104,0,99,99,108,96,105,95,96],
[94,113,111,0,95,104,103,111,93,108],
[104,109,111,115,0,104,109,115,100,98],
[104,117,102,106,106,0,101,105,100,102],
[97,103,114,107,101,109,0,111,94,103],
[99,106,105,99,95,105,99,0,84,99],
[101,115,115,117,110,110,116,126,0,115],
[99,116,114,102,112,108,107,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,99,106,94,97,79,96,89],
[106,0,110,103,107,105,96,99,94,109],
[115,100,0,112,100,89,92,88,90,91],
[111,107,98,0,87,107,96,95,82,91],
[104,103,110,123,0,92,103,89,112,102],
[116,105,121,103,118,0,100,108,116,111],
[113,114,118,114,107,110,0,86,95,104],
[131,111,122,115,121,102,124,0,112,108],
[114,116,120,128,98,94,115,98,0,110],
[121,101,119,119,108,99,106,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,109,94,95,106,89,107,89],
[117,0,95,95,118,109,108,123,116,99],
[113,115,0,80,100,112,112,95,102,93],
[101,115,130,0,112,124,111,120,124,111],
[116,92,110,98,0,93,114,119,85,87],
[115,101,98,86,117,0,86,118,100,91],
[104,102,98,99,96,124,0,106,116,91],
[121,87,115,90,91,92,104,0,90,83],
[103,94,108,86,125,110,94,120,0,92],
[121,111,117,99,123,119,119,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,108,105,90,85,88,97,88],
[115,0,111,101,110,109,110,109,95,94],
[101,99,0,104,99,97,98,106,99,93],
[102,109,106,0,108,114,101,110,101,102],
[105,100,111,102,0,104,89,98,91,105],
[120,101,113,96,106,0,97,107,97,115],
[125,100,112,109,121,113,0,97,106,97],
[122,101,104,100,112,103,113,0,94,96],
[113,115,111,109,119,113,104,116,0,117],
[122,116,117,108,105,95,113,114,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,83,103,118,117,87,121,99,106],
[112,0,104,103,113,94,106,113,102,114],
[127,106,0,94,108,125,101,109,85,100],
[107,107,116,0,115,112,101,105,78,108],
[92,97,102,95,0,106,80,108,96,96],
[93,116,85,98,104,0,72,119,99,86],
[123,104,109,109,130,138,0,124,106,114],
[89,97,101,105,102,91,86,0,88,107],
[111,108,125,132,114,111,104,122,0,117],
[104,96,110,102,114,124,96,103,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,83,88,87,105,103,99,104,138],
[108,0,101,95,106,120,112,119,136,134],
[127,109,0,112,101,106,112,113,108,121],
[122,115,98,0,108,106,123,115,132,142],
[123,104,109,102,0,102,106,103,131,138],
[105,90,104,104,108,0,106,104,127,125],
[107,98,98,87,104,104,0,120,115,112],
[111,91,97,95,107,106,90,0,96,119],
[106,74,102,78,79,83,95,114,0,111],
[72,76,89,68,72,85,98,91,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,86,114,91,127,100,110,102],
[101,0,119,104,113,97,96,119,124,113],
[104,91,0,75,96,92,95,89,119,95],
[124,106,135,0,129,108,91,116,142,107],
[96,97,114,81,0,89,93,104,111,85],
[119,113,118,102,121,0,101,122,133,103],
[83,114,115,119,117,109,0,120,104,97],
[110,91,121,94,106,88,90,0,114,87],
[100,86,91,68,99,77,106,96,0,73],
[108,97,115,103,125,107,113,123,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,92,97,104,90,113,94,101,91],
[91,0,79,107,96,89,94,99,106,88],
[118,131,0,116,121,114,99,129,123,115],
[113,103,94,0,108,89,96,99,101,96],
[106,114,89,102,0,79,103,96,99,73],
[120,121,96,121,131,0,102,114,111,108],
[97,116,111,114,107,108,0,102,110,99],
[116,111,81,111,114,96,108,0,111,89],
[109,104,87,109,111,99,100,99,0,84],
[119,122,95,114,137,102,111,121,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,116,115,96,112,110,106,121],
[104,0,118,109,105,108,108,107,109,119],
[95,92,0,105,99,103,104,91,105,103],
[94,101,105,0,116,102,102,106,106,117],
[95,105,111,94,0,91,99,90,86,114],
[114,102,107,108,119,0,111,98,91,129],
[98,102,106,108,111,99,0,109,103,121],
[100,103,119,104,120,112,101,0,116,129],
[104,101,105,104,124,119,107,94,0,117],
[89,91,107,93,96,81,89,81,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,104,102,106,120,108,106,104],
[107,0,125,112,90,118,99,99,98,94],
[91,85,0,94,75,76,92,90,100,93],
[106,98,116,0,100,99,107,113,91,92],
[108,120,135,110,0,105,112,124,116,108],
[104,92,134,111,105,0,112,116,109,102],
[90,111,118,103,98,98,0,93,102,84],
[102,111,120,97,86,94,117,0,99,83],
[104,112,110,119,94,101,108,111,0,82],
[106,116,117,118,102,108,126,127,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,91,90,89,80,104,83,89],
[122,0,109,104,116,98,98,112,106,110],
[102,101,0,83,93,84,88,104,86,94],
[119,106,127,0,105,108,102,118,107,111],
[120,94,117,105,0,108,95,127,99,105],
[121,112,126,102,102,0,91,115,109,104],
[130,112,122,108,115,119,0,103,107,99],
[106,98,106,92,83,95,107,0,96,91],
[127,104,124,103,111,101,103,114,0,115],
[121,100,116,99,105,106,111,119,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,143,163,128,123,153,74,98],
[107,0,162,136,166,170,89,163,73,134],
[110,48,0,122,168,167,74,122,71,115],
[67,74,88,0,122,114,100,94,64,90],
[47,44,42,88,0,79,45,56,38,73],
[82,40,43,96,131,0,83,87,65,100],
[87,121,136,110,165,127,0,109,111,160],
[57,47,88,116,154,123,101,0,57,98],
[136,137,139,146,172,145,99,153,0,152],
[112,76,95,120,137,110,50,112,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,102,107,100,111,110,104,108],
[95,0,106,109,80,101,108,109,104,119],
[106,104,0,102,111,101,114,119,102,109],
[108,101,108,0,87,101,97,97,111,111],
[103,130,99,123,0,114,119,115,121,117],
[110,109,109,109,96,0,105,109,117,112],
[99,102,96,113,91,105,0,112,110,121],
[100,101,91,113,95,101,98,0,119,104],
[106,106,108,99,89,93,100,91,0,107],
[102,91,101,99,93,98,89,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,107,113,104,99,90,114,97],
[101,0,103,98,108,98,90,106,113,115],
[105,107,0,107,122,106,99,98,109,121],
[103,112,103,0,106,95,103,99,116,113],
[97,102,88,104,0,94,85,88,103,98],
[106,112,104,115,116,0,105,106,107,107],
[111,120,111,107,125,105,0,115,108,97],
[120,104,112,111,122,104,95,0,107,109],
[96,97,101,94,107,103,102,103,0,107],
[113,95,89,97,112,103,113,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,80,94,92,107,92,82,94],
[119,0,119,97,102,103,117,109,106,105],
[98,91,0,109,112,106,112,108,101,104],
[130,113,101,0,120,114,120,123,112,108],
[116,108,98,90,0,103,105,115,103,107],
[118,107,104,96,107,0,115,113,107,103],
[103,93,98,90,105,95,0,104,113,99],
[118,101,102,87,95,97,106,0,93,108],
[128,104,109,98,107,103,97,117,0,122],
[116,105,106,102,103,107,111,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,106,117,104,120,117,111,105],
[108,0,104,94,108,99,110,111,104,107],
[92,106,0,95,101,91,107,111,98,101],
[104,116,115,0,112,111,123,124,105,113],
[93,102,109,98,0,94,114,112,100,105],
[106,111,119,99,116,0,115,114,104,111],
[90,100,103,87,96,95,0,109,97,105],
[93,99,99,86,98,96,101,0,92,105],
[99,106,112,105,110,106,113,118,0,113],
[105,103,109,97,105,99,105,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,116,115,109,113,110,102,108],
[91,0,89,101,95,86,102,98,81,95],
[100,121,0,111,119,101,113,107,99,101],
[94,109,99,0,120,99,110,104,99,99],
[95,115,91,90,0,87,103,99,92,93],
[101,124,109,111,123,0,115,107,108,95],
[97,108,97,100,107,95,0,103,89,100],
[100,112,103,106,111,103,107,0,99,108],
[108,129,111,111,118,102,121,111,0,112],
[102,115,109,111,117,115,110,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,101,100,111,106,105,97,112],
[103,0,119,115,97,109,113,109,93,112],
[101,91,0,108,105,105,101,91,99,103],
[109,95,102,0,93,98,98,101,96,101],
[110,113,105,117,0,113,107,108,99,109],
[99,101,105,112,97,0,105,110,99,107],
[104,97,109,112,103,105,0,101,109,112],
[105,101,119,109,102,100,109,0,89,112],
[113,117,111,114,111,111,101,121,0,113],
[98,98,107,109,101,103,98,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,107,97,97,111,106,104,104],
[99,0,112,98,102,108,105,114,123,109],
[91,98,0,88,92,93,101,94,94,93],
[103,112,122,0,112,111,120,115,116,112],
[113,108,118,98,0,108,112,112,121,106],
[113,102,117,99,102,0,112,116,111,99],
[99,105,109,90,98,98,0,105,109,101],
[104,96,116,95,98,94,105,0,105,104],
[106,87,116,94,89,99,101,105,0,101],
[106,101,117,98,104,111,109,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,119,116,107,118,105,104,117],
[100,0,101,115,102,105,113,105,98,110],
[106,109,0,117,100,117,114,121,106,112],
[91,95,93,0,102,97,113,103,94,101],
[94,108,110,108,0,102,118,102,94,120],
[103,105,93,113,108,0,104,121,95,108],
[92,97,96,97,92,106,0,107,98,106],
[105,105,89,107,108,89,103,0,102,108],
[106,112,104,116,116,115,112,108,0,111],
[93,100,98,109,90,102,104,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,105,112,108,116,107,100,99],
[95,0,102,93,99,85,102,103,96,98],
[96,108,0,101,110,97,104,104,99,98],
[105,117,109,0,111,107,119,114,116,107],
[98,111,100,99,0,94,99,93,95,89],
[102,125,113,103,116,0,114,107,107,109],
[94,108,106,91,111,96,0,95,103,101],
[103,107,106,96,117,103,115,0,103,106],
[110,114,111,94,115,103,107,107,0,106],
[111,112,112,103,121,101,109,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,105,108,107,112,105,105,94],
[110,0,105,102,102,104,111,101,105,103],
[109,105,0,101,95,107,108,108,104,95],
[105,108,109,0,111,111,106,107,113,107],
[102,108,115,99,0,110,109,107,97,97],
[103,106,103,99,100,0,109,109,110,97],
[98,99,102,104,101,101,0,98,107,112],
[105,109,102,103,103,101,112,0,104,101],
[105,105,106,97,113,100,103,106,0,103],
[116,107,115,103,113,113,98,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,92,104,111,121,109,149,137,122],
[97,0,104,120,113,92,104,103,68,101],
[118,106,0,100,115,88,77,130,87,100],
[106,90,110,0,109,98,107,126,79,100],
[99,97,95,101,0,99,91,135,76,106],
[89,118,122,112,111,0,88,144,102,125],
[101,106,133,103,119,122,0,115,101,104],
[61,107,80,84,75,66,95,0,84,90],
[73,142,123,131,134,108,109,126,0,131],
[88,109,110,110,104,85,106,120,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,113,48,77,51,80,83,90,70],
[117,0,130,110,85,106,94,117,122,121],
[97,80,0,40,96,34,52,49,56,59],
[162,100,170,0,93,116,145,78,156,118],
[133,125,114,117,0,106,123,76,117,97],
[159,104,176,94,104,0,100,105,151,118],
[130,116,158,65,87,110,0,88,159,91],
[127,93,161,132,134,105,122,0,131,137],
[120,88,154,54,93,59,51,79,0,113],
[140,89,151,92,113,92,119,73,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,81,99,69,66,86,134,88,94],
[105,0,110,143,96,101,110,137,123,76],
[129,100,0,128,79,91,90,112,81,77],
[111,67,82,0,74,43,110,91,58,72],
[141,114,131,136,0,91,108,102,114,75],
[144,109,119,167,119,0,147,143,91,117],
[124,100,120,100,102,63,0,101,64,59],
[76,73,98,119,108,67,109,0,100,48],
[122,87,129,152,96,119,146,110,0,98],
[116,134,133,138,135,93,151,162,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,108,100,102,100,103,108,110],
[96,0,103,99,95,111,93,106,99,93],
[96,107,0,105,111,105,101,106,102,101],
[102,111,105,0,97,106,109,107,116,99],
[110,115,99,113,0,102,106,111,109,105],
[108,99,105,104,108,0,102,106,113,97],
[110,117,109,101,104,108,0,118,109,104],
[107,104,104,103,99,104,92,0,106,98],
[102,111,108,94,101,97,101,104,0,92],
[100,117,109,111,105,113,106,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,111,118,108,104,105,114,125],
[107,0,111,113,115,108,109,106,105,112],
[102,99,0,95,103,98,107,105,101,104],
[99,97,115,0,104,88,99,103,104,114],
[92,95,107,106,0,92,100,100,98,102],
[102,102,112,122,118,0,111,116,105,120],
[106,101,103,111,110,99,0,102,99,108],
[105,104,105,107,110,94,108,0,105,117],
[96,105,109,106,112,105,111,105,0,113],
[85,98,106,96,108,90,102,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,122,112,123,114,109,101,116,111],
[88,0,95,83,100,85,95,92,102,94],
[88,115,0,109,100,109,95,105,110,98],
[98,127,101,0,109,91,114,100,118,107],
[87,110,110,101,0,90,110,106,107,117],
[96,125,101,119,120,0,117,110,119,113],
[101,115,115,96,100,93,0,102,101,100],
[109,118,105,110,104,100,108,0,112,108],
[94,108,100,92,103,91,109,98,0,110],
[99,116,112,103,93,97,110,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,119,117,116,110,102,104,115,124],
[92,0,107,108,116,103,103,102,117,105],
[91,103,0,107,110,101,89,92,108,108],
[93,102,103,0,106,105,96,100,114,106],
[94,94,100,104,0,98,91,92,110,99],
[100,107,109,105,112,0,106,95,111,106],
[108,107,121,114,119,104,0,110,116,116],
[106,108,118,110,118,115,100,0,126,107],
[95,93,102,96,100,99,94,84,0,98],
[86,105,102,104,111,104,94,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,80,130,126,83,112,115,95],
[108,0,95,116,123,138,117,132,100,97],
[94,115,0,112,134,119,97,118,85,107],
[130,94,98,0,118,106,86,119,96,118],
[80,87,76,92,0,113,84,106,87,89],
[84,72,91,104,97,0,73,99,82,101],
[127,93,113,124,126,137,0,130,103,109],
[98,78,92,91,104,111,80,0,84,90],
[95,110,125,114,123,128,107,126,0,116],
[115,113,103,92,121,109,101,120,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,105,78,100,97,105,80,100],
[97,0,74,102,87,91,90,90,79,79],
[119,136,0,119,105,114,103,105,94,109],
[105,108,91,0,82,103,98,101,96,87],
[132,123,105,128,0,115,114,105,103,103],
[110,119,96,107,95,0,91,78,105,93],
[113,120,107,112,96,119,0,96,99,101],
[105,120,105,109,105,132,114,0,106,132],
[130,131,116,114,107,105,111,104,0,107],
[110,131,101,123,107,117,109,78,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,93,91,84,87,93,90,91],
[118,0,109,105,109,95,104,101,89,103],
[119,101,0,97,82,85,92,98,88,92],
[117,105,113,0,96,96,111,111,95,102],
[119,101,128,114,0,108,113,103,104,98],
[126,115,125,114,102,0,102,111,90,104],
[123,106,118,99,97,108,0,103,106,97],
[117,109,112,99,107,99,107,0,102,100],
[120,121,122,115,106,120,104,108,0,114],
[119,107,118,108,112,106,113,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,86,92,94,92,97,100,91,98],
[119,0,118,110,120,116,120,109,116,100],
[124,92,0,107,127,126,106,81,122,99],
[118,100,103,0,110,125,128,109,113,125],
[116,90,83,100,0,107,94,90,93,103],
[118,94,84,85,103,0,98,92,120,88],
[113,90,104,82,116,112,0,89,109,96],
[110,101,129,101,120,118,121,0,124,102],
[119,94,88,97,117,90,101,86,0,88],
[112,110,111,85,107,122,114,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,116,106,109,103,115,94,117],
[96,0,98,102,92,98,101,107,93,105],
[102,112,0,107,100,119,107,112,98,106],
[94,108,103,0,99,109,106,113,94,110],
[104,118,110,111,0,117,107,108,109,121],
[101,112,91,101,93,0,102,108,101,108],
[107,109,103,104,103,108,0,113,98,102],
[95,103,98,97,102,102,97,0,95,100],
[116,117,112,116,101,109,112,115,0,108],
[93,105,104,100,89,102,108,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,98,100,114,102,109,117,100],
[101,0,95,85,114,92,99,105,117,100],
[95,115,0,88,108,92,107,95,113,122],
[112,125,122,0,121,98,113,101,121,108],
[110,96,102,89,0,102,104,101,113,108],
[96,118,118,112,108,0,107,107,123,104],
[108,111,103,97,106,103,0,96,100,101],
[101,105,115,109,109,103,114,0,95,109],
[93,93,97,89,97,87,110,115,0,95],
[110,110,88,102,102,106,109,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,80,120,92,105,123,116,115,103],
[111,0,96,112,105,108,114,120,99,112],
[130,114,0,125,89,130,101,96,130,115],
[90,98,85,0,91,86,102,93,103,108],
[118,105,121,119,0,97,122,112,129,113],
[105,102,80,124,113,0,97,108,110,100],
[87,96,109,108,88,113,0,89,118,93],
[94,90,114,117,98,102,121,0,115,95],
[95,111,80,107,81,100,92,95,0,90],
[107,98,95,102,97,110,117,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,104,109,98,104,104,92,105],
[108,0,104,109,114,104,102,108,97,114],
[107,106,0,102,106,107,98,102,95,112],
[106,101,108,0,111,111,106,101,100,104],
[101,96,104,99,0,101,91,89,90,102],
[112,106,103,99,109,0,97,96,109,102],
[106,108,112,104,119,113,0,97,89,105],
[106,102,108,109,121,114,113,0,109,114],
[118,113,115,110,120,101,121,101,0,114],
[105,96,98,106,108,108,105,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,123,129,114,113,119,124,119,105],
[94,0,122,94,106,109,118,97,100,105],
[87,88,0,93,91,90,103,96,98,87],
[81,116,117,0,83,98,97,93,87,76],
[96,104,119,127,0,92,120,103,95,98],
[97,101,120,112,118,0,100,99,111,102],
[91,92,107,113,90,110,0,104,106,85],
[86,113,114,117,107,111,106,0,121,95],
[91,110,112,123,115,99,104,89,0,99],
[105,105,123,134,112,108,125,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,113,103,91,101,104,102,98,105],
[139,0,119,117,130,103,124,121,97,130],
[97,91,0,87,87,83,93,103,81,107],
[107,93,123,0,112,110,114,110,88,112],
[119,80,123,98,0,107,117,120,113,130],
[109,107,127,100,103,0,109,98,96,111],
[106,86,117,96,93,101,0,119,120,129],
[108,89,107,100,90,112,91,0,94,98],
[112,113,129,122,97,114,90,116,0,123],
[105,80,103,98,80,99,81,112,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,130,97,116,113,117,120,84,109],
[93,0,95,94,72,110,94,103,81,118],
[80,115,0,94,106,120,102,103,113,94],
[113,116,116,0,106,140,93,113,99,101],
[94,138,104,104,0,124,109,126,98,109],
[97,100,90,70,86,0,80,90,87,83],
[93,116,108,117,101,130,0,120,101,114],
[90,107,107,97,84,120,90,0,81,92],
[126,129,97,111,112,123,109,129,0,107],
[101,92,116,109,101,127,96,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,108,94,149,105,106,124,59],
[121,0,70,118,104,134,95,93,99,123],
[106,140,0,106,102,122,114,104,74,113],
[102,92,104,0,106,120,138,80,93,101],
[116,106,108,104,0,100,103,103,76,104],
[61,76,88,90,110,0,69,89,79,92],
[105,115,96,72,107,141,0,114,81,96],
[104,117,106,130,107,121,96,0,61,92],
[86,111,136,117,134,131,129,149,0,117],
[151,87,97,109,106,118,114,118,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,117,103,104,109,101,102,119],
[108,0,130,118,99,108,99,117,108,121],
[91,80,0,93,90,77,88,95,95,90],
[93,92,117,0,91,105,97,110,107,114],
[107,111,120,119,0,108,93,112,108,110],
[106,102,133,105,102,0,91,103,105,114],
[101,111,122,113,117,119,0,114,109,123],
[109,93,115,100,98,107,96,0,108,105],
[108,102,115,103,102,105,101,102,0,113],
[91,89,120,96,100,96,87,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,117,118,104,106,101,112,119],
[107,0,118,98,107,112,94,96,119,119],
[95,92,0,101,98,84,107,98,105,106],
[93,112,109,0,111,95,103,96,111,101],
[92,103,112,99,0,100,98,90,92,110],
[106,98,126,115,110,0,107,106,99,112],
[104,116,103,107,112,103,0,108,112,114],
[109,114,112,114,120,104,102,0,99,120],
[98,91,105,99,118,111,98,111,0,111],
[91,91,104,109,100,98,96,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,124,112,110,113,116,96,122,135],
[95,0,112,106,108,109,105,104,102,126],
[86,98,0,106,90,109,118,99,118,107],
[98,104,104,0,112,111,113,94,121,107],
[100,102,120,98,0,102,104,110,106,113],
[97,101,101,99,108,0,100,96,119,112],
[94,105,92,97,106,110,0,96,135,110],
[114,106,111,116,100,114,114,0,131,119],
[88,108,92,89,104,91,75,79,0,97],
[75,84,103,103,97,98,100,91,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,101,108,98,103,104,107,106,108],
[122,0,116,114,103,104,116,116,95,100],
[109,94,0,105,101,108,102,115,103,104],
[102,96,105,0,107,95,111,111,103,99],
[112,107,109,103,0,103,112,108,107,115],
[107,106,102,115,107,0,123,119,106,113],
[106,94,108,99,98,87,0,112,95,102],
[103,94,95,99,102,91,98,0,102,104],
[104,115,107,107,103,104,115,108,0,109],
[102,110,106,111,95,97,108,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,115,75,119,112,95,79,89],
[96,0,74,130,75,134,116,107,75,90],
[110,136,0,133,103,152,141,116,77,99],
[95,80,77,0,80,99,118,84,66,76],
[135,135,107,130,0,109,145,100,104,83],
[91,76,58,111,101,0,123,54,73,90],
[98,94,69,92,65,87,0,50,67,64],
[115,103,94,126,110,156,160,0,83,142],
[131,135,133,144,106,137,143,127,0,100],
[121,120,111,134,127,120,146,68,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,100,113,107,101,110,106,103],
[109,0,110,96,109,110,101,109,104,100],
[99,100,0,102,110,100,97,99,97,102],
[110,114,108,0,118,112,106,113,101,109],
[97,101,100,92,0,92,92,94,94,99],
[103,100,110,98,118,0,103,104,104,113],
[109,109,113,104,118,107,0,110,106,106],
[100,101,111,97,116,106,100,0,96,99],
[104,106,113,109,116,106,104,114,0,104],
[107,110,108,101,111,97,104,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,106,95,102,104,97,99,101],
[103,0,102,105,105,94,102,105,106,108],
[94,108,0,88,99,102,94,103,109,95],
[104,105,122,0,101,107,102,100,100,106],
[115,105,111,109,0,107,114,112,108,110],
[108,116,108,103,103,0,95,101,101,91],
[106,108,116,108,96,115,0,111,120,98],
[113,105,107,110,98,109,99,0,104,94],
[111,104,101,110,102,109,90,106,0,108],
[109,102,115,104,100,119,112,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,102,106,110,105,116,112,108],
[89,0,103,104,96,114,95,117,104,98],
[110,107,0,110,112,117,103,120,117,108],
[108,106,100,0,111,126,101,126,112,109],
[104,114,98,99,0,112,93,115,92,93],
[100,96,93,84,98,0,85,110,102,93],
[105,115,107,109,117,125,0,120,116,118],
[94,93,90,84,95,100,90,0,100,91],
[98,106,93,98,118,108,94,110,0,102],
[102,112,102,101,117,117,92,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,100,93,104,104,89,95,107],
[117,0,101,106,112,117,110,106,105,116],
[118,109,0,94,105,117,106,103,105,124],
[110,104,116,0,108,110,122,113,100,113],
[117,98,105,102,0,109,110,102,100,119],
[106,93,93,100,101,0,102,94,104,98],
[106,100,104,88,100,108,0,101,111,104],
[121,104,107,97,108,116,109,0,106,111],
[115,105,105,110,110,106,99,104,0,123],
[103,94,86,97,91,112,106,99,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,114,95,115,97,100,92,111],
[112,0,103,94,102,120,85,123,99,105],
[102,107,0,110,105,115,97,116,103,110],
[96,116,100,0,114,119,105,134,100,97],
[115,108,105,96,0,110,102,112,106,105],
[95,90,95,91,100,0,95,105,93,96],
[113,125,113,105,108,115,0,126,109,122],
[110,87,94,76,98,105,84,0,89,91],
[118,111,107,110,104,117,101,121,0,112],
[99,105,100,113,105,114,88,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,108,89,92,111,114,111,114],
[98,0,76,120,97,88,100,82,111,120],
[105,134,0,123,129,106,108,104,118,131],
[102,90,87,0,98,86,95,81,106,92],
[121,113,81,112,0,104,114,115,108,113],
[118,122,104,124,106,0,123,111,119,141],
[99,110,102,115,96,87,0,92,114,124],
[96,128,106,129,95,99,118,0,114,119],
[99,99,92,104,102,91,96,96,0,115],
[96,90,79,118,97,69,86,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,94,91,106,70,90,99,103],
[98,0,76,91,90,102,81,97,90,95],
[114,134,0,109,110,123,103,114,113,116],
[116,119,101,0,104,113,95,111,105,102],
[119,120,100,106,0,103,89,108,99,110],
[104,108,87,97,107,0,106,94,105,103],
[140,129,107,115,121,104,0,109,111,109],
[120,113,96,99,102,116,101,0,89,91],
[111,120,97,105,111,105,99,121,0,103],
[107,115,94,108,100,107,101,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,107,114,110,113,102,99,102],
[107,0,97,102,104,113,98,95,102,94],
[111,113,0,96,116,117,116,97,110,106],
[103,108,114,0,123,122,120,108,118,110],
[96,106,94,87,0,105,101,93,103,99],
[100,97,93,88,105,0,107,85,86,84],
[97,112,94,90,109,103,0,97,103,86],
[108,115,113,102,117,125,113,0,110,102],
[111,108,100,92,107,124,107,100,0,107],
[108,116,104,100,111,126,124,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,96,94,109,108,114,108,86,111],
[87,0,86,86,90,101,96,102,93,95],
[114,124,0,105,115,110,111,102,100,111],
[116,124,105,0,109,106,110,111,93,103],
[101,120,95,101,0,105,98,109,97,105],
[102,109,100,104,105,0,97,121,99,103],
[96,114,99,100,112,113,0,103,107,95],
[102,108,108,99,101,89,107,0,95,97],
[124,117,110,117,113,111,103,115,0,116],
[99,115,99,107,105,107,115,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,104,88,93,98,102,97,102],
[107,0,106,98,92,92,95,114,89,96],
[99,104,0,104,105,102,105,94,90,96],
[106,112,106,0,103,102,104,103,99,101],
[122,118,105,107,0,97,115,109,100,106],
[117,118,108,108,113,0,97,116,98,100],
[112,115,105,106,95,113,0,108,90,106],
[108,96,116,107,101,94,102,0,96,113],
[113,121,120,111,110,112,120,114,0,101],
[108,114,114,109,104,110,104,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,108,102,106,101,108,97,105],
[105,0,108,100,93,102,102,97,99,96],
[104,102,0,100,93,95,93,99,93,94],
[102,110,110,0,91,100,104,104,103,108],
[108,117,117,119,0,108,105,113,109,109],
[104,108,115,110,102,0,112,114,112,107],
[109,108,117,106,105,98,0,106,103,103],
[102,113,111,106,97,96,104,0,100,105],
[113,111,117,107,101,98,107,110,0,102],
[105,114,116,102,101,103,107,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,88,98,84,73,123,99,86,60],
[131,0,128,86,88,100,132,98,120,107],
[122,82,0,114,81,94,101,93,117,103],
[112,124,96,0,108,81,123,90,124,117],
[126,122,129,102,0,108,143,140,128,136],
[137,110,116,129,102,0,125,102,123,112],
[87,78,109,87,67,85,0,75,109,69],
[111,112,117,120,70,108,135,0,108,91],
[124,90,93,86,82,87,101,102,0,100],
[150,103,107,93,74,98,141,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,149,89,104,57,60,69,69,120],
[122,0,127,119,131,131,122,145,96,111],
[61,83,0,65,75,67,70,97,45,144],
[121,91,145,0,83,139,119,141,152,164],
[106,79,135,127,0,140,110,119,142,171],
[153,79,143,71,70,0,60,114,61,158],
[150,88,140,91,100,150,0,119,128,130],
[141,65,113,69,91,96,91,0,74,125],
[141,114,165,58,68,149,82,136,0,157],
[90,99,66,46,39,52,80,85,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,90,98,85,100,100,96,91,110],
[122,0,92,99,94,104,101,105,93,98],
[120,118,0,109,108,106,98,104,99,118],
[112,111,101,0,110,102,113,113,105,118],
[125,116,102,100,0,99,107,113,100,122],
[110,106,104,108,111,0,107,109,116,117],
[110,109,112,97,103,103,0,116,108,112],
[114,105,106,97,97,101,94,0,106,111],
[119,117,111,105,110,94,102,104,0,125],
[100,112,92,92,88,93,98,99,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,126,125,101,115,120,123,120,110],
[83,0,116,97,104,105,108,100,107,99],
[84,94,0,92,90,89,97,92,95,104],
[85,113,118,0,92,93,108,100,112,110],
[109,106,120,118,0,112,118,105,115,101],
[95,105,121,117,98,0,115,103,115,109],
[90,102,113,102,92,95,0,94,103,107],
[87,110,118,110,105,107,116,0,108,116],
[90,103,115,98,95,95,107,102,0,105],
[100,111,106,100,109,101,103,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,95,109,109,113,125,103,98],
[102,0,120,111,107,104,110,122,104,98],
[100,90,0,97,104,105,106,120,100,106],
[115,99,113,0,115,109,113,125,112,115],
[101,103,106,95,0,104,109,114,92,106],
[101,106,105,101,106,0,114,119,101,110],
[97,100,104,97,101,96,0,112,105,98],
[85,88,90,85,96,91,98,0,85,97],
[107,106,110,98,118,109,105,125,0,101],
[112,112,104,95,104,100,112,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,113,106,100,99,94,103,104,106],
[122,0,114,116,98,103,124,112,114,104],
[97,96,0,106,101,103,104,96,102,109],
[104,94,104,0,92,91,108,94,113,103],
[110,112,109,118,0,98,104,109,105,108],
[111,107,107,119,112,0,108,104,122,113],
[116,86,106,102,106,102,0,114,106,105],
[107,98,114,116,101,106,96,0,115,116],
[106,96,108,97,105,88,104,95,0,104],
[104,106,101,107,102,97,105,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,116,113,95,104,106,117,113],
[104,0,100,116,93,103,87,102,106,117],
[97,110,0,120,95,103,108,98,107,109],
[94,94,90,0,92,92,97,103,105,113],
[97,117,115,118,0,111,99,104,108,109],
[115,107,107,118,99,0,100,106,102,107],
[106,123,102,113,111,110,0,106,116,121],
[104,108,112,107,106,104,104,0,110,121],
[93,104,103,105,102,108,94,100,0,102],
[97,93,101,97,101,103,89,89,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,109,105,111,111,118,108,111],
[97,0,106,94,111,102,99,107,99,108],
[100,104,0,93,111,105,103,113,106,99],
[101,116,117,0,107,106,105,115,102,97],
[105,99,99,103,0,96,102,95,108,99],
[99,108,105,104,114,0,96,109,107,102],
[99,111,107,105,108,114,0,112,100,111],
[92,103,97,95,115,101,98,0,111,101],
[102,111,104,108,102,103,110,99,0,108],
[99,102,111,113,111,108,99,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,86,110,105,80,107,111,109],
[98,0,108,98,111,94,103,107,119,109],
[114,102,0,92,115,114,90,115,105,115],
[124,112,118,0,133,113,103,102,116,116],
[100,99,95,77,0,104,81,118,104,96],
[105,116,96,97,106,0,83,111,110,116],
[130,107,120,107,129,127,0,103,115,115],
[103,103,95,108,92,99,107,0,124,106],
[99,91,105,94,106,100,95,86,0,99],
[101,101,95,94,114,94,95,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,122,110,99,101,110,115,115],
[98,0,110,111,116,107,116,109,119,111],
[103,100,0,108,102,98,103,116,111,101],
[88,99,102,0,101,95,105,107,97,92],
[100,94,108,109,0,106,106,124,117,109],
[111,103,112,115,104,0,99,121,105,98],
[109,94,107,105,104,111,0,110,112,98],
[100,101,94,103,86,89,100,0,94,85],
[95,91,99,113,93,105,98,116,0,97],
[95,99,109,118,101,112,112,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,101,97,106,96,94,106,117],
[102,0,103,102,89,95,90,96,98,110],
[111,107,0,104,105,102,92,103,107,112],
[109,108,106,0,103,105,97,103,114,125],
[113,121,105,107,0,116,109,111,111,116],
[104,115,108,105,94,0,98,93,105,103],
[114,120,118,113,101,112,0,114,115,117],
[116,114,107,107,99,117,96,0,118,118],
[104,112,103,96,99,105,95,92,0,113],
[93,100,98,85,94,107,93,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,92,102,105,102,126,105,120],
[116,0,97,110,113,124,122,115,122,114],
[101,113,0,103,93,97,100,104,113,110],
[118,100,107,0,105,109,93,130,134,116],
[108,97,117,105,0,114,123,120,136,109],
[105,86,113,101,96,0,103,125,120,119],
[108,88,110,117,87,107,0,116,113,108],
[84,95,106,80,90,85,94,0,110,88],
[105,88,97,76,74,90,97,100,0,84],
[90,96,100,94,101,91,102,122,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,110,105,113,115,105,109,114],
[110,0,108,120,101,120,124,108,109,118],
[105,102,0,118,107,107,113,107,101,115],
[100,90,92,0,98,105,97,98,94,108],
[105,109,103,112,0,125,111,101,100,119],
[97,90,103,105,85,0,94,88,92,113],
[95,86,97,113,99,116,0,102,104,118],
[105,102,103,112,109,122,108,0,97,113],
[101,101,109,116,110,118,106,113,0,118],
[96,92,95,102,91,97,92,97,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,115,110,109,101,107,122,111],
[98,0,110,106,109,108,104,102,103,105],
[97,100,0,94,97,100,93,92,101,90],
[95,104,116,0,115,105,110,106,110,97],
[100,101,113,95,0,105,100,98,111,105],
[101,102,110,105,105,0,98,101,110,111],
[109,106,117,100,110,112,0,108,115,114],
[103,108,118,104,112,109,102,0,116,111],
[88,107,109,100,99,100,95,94,0,99],
[99,105,120,113,105,99,96,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,110,105,103,102,109,104,102],
[108,0,92,99,101,105,94,116,103,103],
[103,118,0,101,108,104,108,118,110,111],
[100,111,109,0,107,105,99,116,114,111],
[105,109,102,103,0,98,97,111,112,100],
[107,105,106,105,112,0,102,116,106,105],
[108,116,102,111,113,108,0,127,102,110],
[101,94,92,94,99,94,83,0,93,96],
[106,107,100,96,98,104,108,117,0,97],
[108,107,99,99,110,105,100,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,101,106,102,103,106,105,102],
[108,0,112,110,110,114,104,118,114,110],
[107,98,0,91,104,119,98,114,113,100],
[109,100,119,0,111,124,116,127,106,109],
[104,100,106,99,0,116,104,113,116,110],
[108,96,91,86,94,0,92,99,103,93],
[107,106,112,94,106,118,0,110,110,108],
[104,92,96,83,97,111,100,0,106,83],
[105,96,97,104,94,107,100,104,0,98],
[108,100,110,101,100,117,102,127,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,101,115,86,84,95,99,107],
[109,0,100,102,107,98,105,95,111,110],
[114,110,0,106,121,105,109,95,124,123],
[109,108,104,0,112,99,102,101,111,117],
[95,103,89,98,0,81,95,91,113,125],
[124,112,105,111,129,0,118,106,126,135],
[126,105,101,108,115,92,0,98,127,119],
[115,115,115,109,119,104,112,0,105,116],
[111,99,86,99,97,84,83,105,0,100],
[103,100,87,93,85,75,91,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,75,100,85,102,112,105,118],
[111,0,101,97,110,93,109,95,98,113],
[110,109,0,114,107,107,113,102,121,118],
[135,113,96,0,111,105,112,107,109,114],
[110,100,103,99,0,96,105,100,110,108],
[125,117,103,105,114,0,130,109,120,117],
[108,101,97,98,105,80,0,115,99,116],
[98,115,108,103,110,101,95,0,108,107],
[105,112,89,101,100,90,111,102,0,103],
[92,97,92,96,102,93,94,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,110,120,104,118,107,113,114],
[106,0,107,103,110,108,116,101,115,113],
[107,103,0,103,113,105,114,103,109,118],
[100,107,107,0,110,116,125,105,111,113],
[90,100,97,100,0,99,108,96,106,116],
[106,102,105,94,111,0,113,91,116,116],
[92,94,96,85,102,97,0,85,107,102],
[103,109,107,105,114,119,125,0,111,116],
[97,95,101,99,104,94,103,99,0,111],
[96,97,92,97,94,94,108,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,127,122,115,103,83,117,118],
[105,0,148,115,107,124,90,96,132,82],
[96,62,0,106,86,122,79,106,72,74],
[83,95,104,0,89,96,101,87,110,89],
[88,103,124,121,0,120,124,83,113,93],
[95,86,88,114,90,0,111,90,88,82],
[107,120,131,109,86,99,0,91,94,96],
[127,114,104,123,127,120,119,0,110,128],
[93,78,138,100,97,122,116,100,0,99],
[92,128,136,121,117,128,114,82,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,90,94,53,99,90,96,89,85],
[92,0,114,93,87,84,82,95,93,98],
[120,96,0,95,72,117,92,126,107,73],
[116,117,115,0,77,89,72,94,103,91],
[157,123,138,133,0,116,105,144,127,106],
[111,126,93,121,94,0,93,125,117,72],
[120,128,118,138,105,117,0,104,123,89],
[114,115,84,116,66,85,106,0,102,79],
[121,117,103,107,83,93,87,108,0,74],
[125,112,137,119,104,138,121,131,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,117,113,102,109,111,107,102],
[92,0,104,100,99,101,89,102,89,93],
[107,106,0,107,114,112,95,96,101,101],
[93,110,103,0,112,99,86,109,99,102],
[97,111,96,98,0,94,91,105,103,108],
[108,109,98,111,116,0,98,114,114,108],
[101,121,115,124,119,112,0,112,123,122],
[99,108,114,101,105,96,98,0,112,102],
[103,121,109,111,107,96,87,98,0,104],
[108,117,109,108,102,102,88,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,105,102,108,109,112,113,98],
[97,0,91,96,97,105,97,115,120,103],
[109,119,0,106,112,108,100,106,118,100],
[105,114,104,0,115,112,113,119,118,104],
[108,113,98,95,0,100,101,113,120,94],
[102,105,102,98,110,0,99,115,113,103],
[101,113,110,97,109,111,0,116,119,108],
[98,95,104,91,97,95,94,0,108,86],
[97,90,92,92,90,97,91,102,0,100],
[112,107,110,106,116,107,102,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,82,74,86,97,83,105,62,62],
[102,0,74,105,109,115,111,102,121,115],
[128,136,0,102,105,124,106,102,108,92],
[136,105,108,0,108,99,107,78,85,73],
[124,101,105,102,0,120,101,108,93,99],
[113,95,86,111,90,0,129,112,73,79],
[127,99,104,103,109,81,0,90,67,53],
[105,108,108,132,102,98,120,0,62,91],
[148,89,102,125,117,137,143,148,0,117],
[148,95,118,137,111,131,157,119,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,106,111,92,106,100,122,119],
[103,0,107,121,118,99,111,108,112,101],
[102,103,0,101,118,104,102,92,110,103],
[104,89,109,0,118,111,113,109,121,116],
[99,92,92,92,0,86,97,102,102,106],
[118,111,106,99,124,0,113,105,132,127],
[104,99,108,97,113,97,0,97,108,107],
[110,102,118,101,108,105,113,0,117,122],
[88,98,100,89,108,78,102,93,0,92],
[91,109,107,94,104,83,103,88,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,114,116,120,111,103,105,112],
[99,0,114,115,108,126,101,101,102,103],
[99,96,0,120,107,130,107,102,98,104],
[96,95,90,0,93,105,95,91,100,97],
[94,102,103,117,0,115,107,89,102,90],
[90,84,80,105,95,0,93,87,95,89],
[99,109,103,115,103,117,0,109,108,107],
[107,109,108,119,121,123,101,0,101,102],
[105,108,112,110,108,115,102,109,0,99],
[98,107,106,113,120,121,103,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,121,99,110,98,112,118,124],
[95,0,99,103,92,96,93,102,112,99],
[103,111,0,116,101,94,96,98,111,115],
[89,107,94,0,103,99,104,95,113,110],
[111,118,109,107,0,102,102,108,123,115],
[100,114,116,111,108,0,95,106,107,103],
[112,117,114,106,108,115,0,105,113,120],
[98,108,112,115,102,104,105,0,120,111],
[92,98,99,97,87,103,97,90,0,104],
[86,111,95,100,95,107,90,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,117,91,104,92,95,95,100],
[118,0,107,109,116,112,107,114,105,106],
[119,103,0,96,114,103,110,106,103,105],
[93,101,114,0,100,107,105,109,93,98],
[119,94,96,110,0,106,96,115,92,88],
[106,98,107,103,104,0,94,111,99,103],
[118,103,100,105,114,116,0,122,105,97],
[115,96,104,101,95,99,88,0,101,98],
[115,105,107,117,118,111,105,109,0,109],
[110,104,105,112,122,107,113,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,63,63,124,27,118,57,158,117],
[117,0,114,110,106,74,165,26,201,114],
[147,96,0,74,95,108,96,113,165,96],
[147,100,136,0,134,141,148,84,165,99],
[86,104,115,76,0,43,68,43,136,67],
[183,136,102,69,167,0,168,120,167,98],
[92,45,114,62,142,42,0,62,146,76],
[153,184,97,126,167,90,148,0,184,115],
[52,9,45,45,74,43,64,26,0,99],
[93,96,114,111,143,112,134,95,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,105,107,111,98,98,114,105],
[101,0,109,108,100,110,95,105,109,109],
[114,101,0,106,111,102,110,104,107,109],
[105,102,104,0,103,108,96,110,110,99],
[103,110,99,107,0,104,89,105,108,105],
[99,100,108,102,106,0,95,105,111,107],
[112,115,100,114,121,115,0,104,119,114],
[112,105,106,100,105,105,106,0,113,96],
[96,101,103,100,102,99,91,97,0,101],
[105,101,101,111,105,103,96,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,94,109,82,97,109,93,93],
[93,0,92,73,109,90,99,99,92,104],
[110,118,0,99,116,96,97,114,111,111],
[116,137,111,0,126,105,112,128,106,119],
[101,101,94,84,0,88,79,81,97,103],
[128,120,114,105,122,0,102,132,112,109],
[113,111,113,98,131,108,0,123,96,118],
[101,111,96,82,129,78,87,0,82,101],
[117,118,99,104,113,98,114,128,0,115],
[117,106,99,91,107,101,92,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,88,94,114,110,108,102,107],
[100,0,105,101,110,106,127,102,109,120],
[102,105,0,106,113,97,123,99,108,94],
[122,109,104,0,108,111,125,112,119,99],
[116,100,97,102,0,101,125,115,84,111],
[96,104,113,99,109,0,114,88,97,97],
[100,83,87,85,85,96,0,88,94,95],
[102,108,111,98,95,122,122,0,103,97],
[108,101,102,91,126,113,116,107,0,103],
[103,90,116,111,99,113,115,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,114,104,105,105,116,104,106],
[99,0,92,116,100,104,95,104,111,96],
[100,118,0,112,117,108,115,105,109,113],
[96,94,98,0,90,106,109,85,98,106],
[106,110,93,120,0,111,106,106,108,107],
[105,106,102,104,99,0,111,105,95,93],
[105,115,95,101,104,99,0,110,103,92],
[94,106,105,125,104,105,100,0,110,99],
[106,99,101,112,102,115,107,100,0,94],
[104,114,97,104,103,117,118,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,134,100,100,111,99,78,102],
[91,0,119,98,94,90,106,85,63,104],
[107,91,0,128,108,114,113,115,105,112],
[76,112,82,0,108,98,103,80,82,99],
[110,116,102,102,0,91,97,97,82,100],
[110,120,96,112,119,0,121,115,108,109],
[99,104,97,107,113,89,0,86,80,92],
[111,125,95,130,113,95,124,0,96,118],
[132,147,105,128,128,102,130,114,0,122],
[108,106,98,111,110,101,118,92,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,120,104,107,114,100,104,93],
[105,0,108,115,107,112,109,106,104,93],
[100,102,0,110,101,108,107,92,110,101],
[90,95,100,0,112,110,96,94,97,99],
[106,103,109,98,0,104,108,94,105,99],
[103,98,102,100,106,0,100,82,98,102],
[96,101,103,114,102,110,0,106,101,99],
[110,104,118,116,116,128,104,0,104,109],
[106,106,100,113,105,112,109,106,0,111],
[117,117,109,111,111,108,111,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,87,103,104,114,116,115,113],
[93,0,117,91,83,111,101,100,77,82],
[95,93,0,90,100,113,113,109,103,103],
[123,119,120,0,105,126,128,106,101,90],
[107,127,110,105,0,126,127,98,91,107],
[106,99,97,84,84,0,106,90,89,104],
[96,109,97,82,83,104,0,111,98,93],
[94,110,101,104,112,120,99,0,93,112],
[95,133,107,109,119,121,112,117,0,122],
[97,128,107,120,103,106,117,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,130,118,124,127,117,123,125,138],
[106,0,116,120,92,134,91,106,110,119],
[80,94,0,114,104,127,105,107,113,109],
[92,90,96,0,116,121,102,123,132,120],
[86,118,106,94,0,140,112,103,119,115],
[83,76,83,89,70,0,85,88,90,91],
[93,119,105,108,98,125,0,111,136,118],
[87,104,103,87,107,122,99,0,118,120],
[85,100,97,78,91,120,74,92,0,121],
[72,91,101,90,95,119,92,90,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,100,115,104,102,102,123,103],
[109,0,104,105,115,96,109,99,121,104],
[111,106,0,113,123,97,123,97,119,113],
[110,105,97,0,114,108,104,111,118,98],
[95,95,87,96,0,80,98,86,106,87],
[106,114,113,102,130,0,112,95,130,119],
[108,101,87,106,112,98,0,96,113,99],
[108,111,113,99,124,115,114,0,125,106],
[87,89,91,92,104,80,97,85,0,86],
[107,106,97,112,123,91,111,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,111,124,91,99,104,86,105],
[99,0,109,100,104,97,106,97,81,88],
[86,101,0,104,106,82,85,102,74,74],
[99,110,106,0,119,98,85,111,89,95],
[86,106,104,91,0,88,104,98,83,90],
[119,113,128,112,122,0,109,115,101,99],
[111,104,125,125,106,101,0,106,114,111],
[106,113,108,99,112,95,104,0,92,97],
[124,129,136,121,127,109,96,118,0,94],
[105,122,136,115,120,111,99,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,94,104,99,99,101,106,102],
[111,0,120,108,97,107,112,93,109,113],
[105,90,0,98,95,105,110,95,89,93],
[116,102,112,0,100,112,112,110,108,99],
[106,113,115,110,0,120,106,96,119,113],
[111,103,105,98,90,0,94,98,101,84],
[111,98,100,98,104,116,0,113,108,113],
[109,117,115,100,114,112,97,0,115,102],
[104,101,121,102,91,109,102,95,0,107],
[108,97,117,111,97,126,97,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,85,91,110,103,112,92,103],
[107,0,108,88,84,119,104,113,104,103],
[110,102,0,90,95,108,93,106,84,102],
[125,122,120,0,83,123,110,115,105,113],
[119,126,115,127,0,111,110,130,104,131],
[100,91,102,87,99,0,114,115,91,107],
[107,106,117,100,100,96,0,116,90,114],
[98,97,104,95,80,95,94,0,89,107],
[118,106,126,105,106,119,120,121,0,121],
[107,107,108,97,79,103,96,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,97,130,115,97,98,106,121,120],
[120,0,120,103,110,71,120,101,123,108],
[113,90,0,98,110,100,107,100,111,112],
[80,107,112,0,91,101,99,66,90,102],
[95,100,100,119,0,109,105,112,112,121],
[113,139,110,109,101,0,119,89,123,125],
[112,90,103,111,105,91,0,111,91,115],
[104,109,110,144,98,121,99,0,135,121],
[89,87,99,120,98,87,119,75,0,96],
[90,102,98,108,89,85,95,89,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,108,115,92,108,102,114,100],
[100,0,121,102,115,95,111,99,115,101],
[99,89,0,97,103,93,98,111,92,99],
[102,108,113,0,120,103,123,113,116,109],
[95,95,107,90,0,74,92,97,94,97],
[118,115,117,107,136,0,112,105,113,118],
[102,99,112,87,118,98,0,103,109,111],
[108,111,99,97,113,105,107,0,106,116],
[96,95,118,94,116,97,101,104,0,96],
[110,109,111,101,113,92,99,94,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,109,118,117,100,96,118,97],
[103,0,96,92,111,87,96,93,95,92],
[96,114,0,94,117,93,101,98,88,104],
[101,118,116,0,117,119,100,106,124,103],
[92,99,93,93,0,112,97,103,94,113],
[93,123,117,91,98,0,98,108,110,106],
[110,114,109,110,113,112,0,107,107,96],
[114,117,112,104,107,102,103,0,125,105],
[92,115,122,86,116,100,103,85,0,104],
[113,118,106,107,97,104,114,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,119,93,97,77,100,97,87],
[99,0,114,105,100,93,83,101,115,75],
[98,96,0,95,95,83,75,90,104,94],
[91,105,115,0,94,88,62,93,118,73],
[117,110,115,116,0,115,104,108,118,122],
[113,117,127,122,95,0,103,107,124,95],
[133,127,135,148,106,107,0,106,110,105],
[110,109,120,117,102,103,104,0,99,110],
[113,95,106,92,92,86,100,111,0,89],
[123,135,116,137,88,115,105,100,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,100,103,92,105,95,91,117],
[99,0,135,102,103,101,113,97,111,105],
[86,75,0,85,93,89,88,81,77,105],
[110,108,125,0,103,101,114,109,104,118],
[107,107,117,107,0,79,102,99,101,97],
[118,109,121,109,131,0,109,105,120,113],
[105,97,122,96,108,101,0,89,100,110],
[115,113,129,101,111,105,121,0,109,114],
[119,99,133,106,109,90,110,101,0,112],
[93,105,105,92,113,97,100,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,91,107,109,91,100,97,88],
[118,0,111,112,117,105,104,120,101,97],
[107,99,0,109,113,104,108,119,103,96],
[119,98,101,0,115,94,111,107,101,93],
[103,93,97,95,0,93,96,95,85,87],
[101,105,106,116,117,0,100,114,110,111],
[119,106,102,99,114,110,0,112,109,97],
[110,90,91,103,115,96,98,0,100,97],
[113,109,107,109,125,100,101,110,0,101],
[122,113,114,117,123,99,113,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,79,88,93,89,86,96,97,93],
[115,0,107,98,112,92,86,94,104,100],
[131,103,0,120,114,122,108,101,108,120],
[122,112,90,0,112,111,91,101,95,100],
[117,98,96,98,0,108,80,91,96,99],
[121,118,88,99,102,0,83,92,99,95],
[124,124,102,119,130,127,0,124,117,111],
[114,116,109,109,119,118,86,0,115,105],
[113,106,102,115,114,111,93,95,0,106],
[117,110,90,110,111,115,99,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,85,98,93,94,93,92,105,89],
[109,0,104,112,101,107,96,91,105,102],
[125,106,0,122,103,118,125,107,117,116],
[112,98,88,0,103,103,115,106,103,103],
[117,109,107,107,0,105,120,106,109,109],
[116,103,92,107,105,0,112,91,112,106],
[117,114,85,95,90,98,0,108,105,101],
[118,119,103,104,104,119,102,0,117,113],
[105,105,93,107,101,98,105,93,0,114],
[121,108,94,107,101,104,109,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,116,85,102,109,117,103,104],
[100,0,110,111,91,94,95,104,93,116],
[97,100,0,108,97,83,106,109,83,103],
[94,99,102,0,92,88,96,100,80,99],
[125,119,113,118,0,114,114,130,118,102],
[108,116,127,122,96,0,109,117,111,112],
[101,115,104,114,96,101,0,113,90,103],
[93,106,101,110,80,93,97,0,102,106],
[107,117,127,130,92,99,120,108,0,109],
[106,94,107,111,108,98,107,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,85,112,81,115,86,121,127,96],
[128,0,117,122,103,124,98,131,115,105],
[125,93,0,128,95,140,109,104,105,98],
[98,88,82,0,80,109,77,111,100,92],
[129,107,115,130,0,136,95,108,112,91],
[95,86,70,101,74,0,75,87,78,87],
[124,112,101,133,115,135,0,126,108,117],
[89,79,106,99,102,123,84,0,93,120],
[83,95,105,110,98,132,102,117,0,101],
[114,105,112,118,119,123,93,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,110,117,111,96,102,123,100],
[107,0,115,102,110,124,102,111,122,107],
[98,95,0,116,106,111,90,116,114,101],
[100,108,94,0,106,118,95,112,111,98],
[93,100,104,104,0,106,104,100,109,94],
[99,86,99,92,104,0,93,104,116,99],
[114,108,120,115,106,117,0,113,116,96],
[108,99,94,98,110,106,97,0,113,101],
[87,88,96,99,101,94,94,97,0,84],
[110,103,109,112,116,111,114,109,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,105,95,118,97,96,75,117],
[93,0,116,93,109,106,90,104,82,117],
[98,94,0,91,113,118,101,107,107,128],
[105,117,119,0,114,129,99,116,119,122],
[115,101,97,96,0,113,79,114,94,107],
[92,104,92,81,97,0,80,101,76,100],
[113,120,109,111,131,130,0,97,104,116],
[114,106,103,94,96,109,113,0,95,100],
[135,128,103,91,116,134,106,115,0,115],
[93,93,82,88,103,110,94,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,99,82,110,98,104,94,96,101],
[83,0,96,90,105,87,100,96,103,106],
[111,114,0,106,108,112,112,110,95,112],
[128,120,104,0,119,108,125,118,115,126],
[100,105,102,91,0,99,116,103,103,98],
[112,123,98,102,111,0,126,111,108,114],
[106,110,98,85,94,84,0,99,91,99],
[116,114,100,92,107,99,111,0,103,116],
[114,107,115,95,107,102,119,107,0,102],
[109,104,98,84,112,96,111,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,99,100,107,100,108,103,103],
[98,0,110,94,90,111,104,98,97,86],
[101,100,0,94,107,106,113,101,102,90],
[111,116,116,0,103,111,121,120,107,112],
[110,120,103,107,0,106,105,112,102,99],
[103,99,104,99,104,0,123,103,93,96],
[110,106,97,89,105,87,0,104,102,104],
[102,112,109,90,98,107,106,0,102,86],
[107,113,108,103,108,117,108,108,0,95],
[107,124,120,98,111,114,106,124,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,80,85,111,102,106,116,90,103],
[125,0,105,98,122,132,99,127,98,118],
[130,105,0,115,115,128,109,110,110,98],
[125,112,95,0,110,122,101,107,111,92],
[99,88,95,100,0,96,120,106,107,92],
[108,78,82,88,114,0,93,112,83,85],
[104,111,101,109,90,117,0,116,88,93],
[94,83,100,103,104,98,94,0,105,98],
[120,112,100,99,103,127,122,105,0,97],
[107,92,112,118,118,125,117,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,103,101,110,108,94,97,110],
[110,0,104,107,100,113,111,102,100,106],
[118,106,0,102,102,118,111,107,116,111],
[107,103,108,0,102,104,107,105,106,107],
[109,110,108,108,0,105,115,105,106,109],
[100,97,92,106,105,0,111,102,112,106],
[102,99,99,103,95,99,0,100,104,105],
[116,108,103,105,105,108,110,0,114,110],
[113,110,94,104,104,98,106,96,0,107],
[100,104,99,103,101,104,105,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,110,101,118,95,118,88,96,94],
[119,0,111,110,130,105,121,107,109,115],
[100,99,0,109,123,104,112,97,110,117],
[109,100,101,0,121,94,112,82,92,109],
[92,80,87,89,0,88,108,85,94,98],
[115,105,106,116,122,0,105,93,106,108],
[92,89,98,98,102,105,0,88,93,105],
[122,103,113,128,125,117,122,0,111,120],
[114,101,100,118,116,104,117,99,0,116],
[116,95,93,101,112,102,105,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,96,75,104,50,51,111,37,62],
[128,0,112,121,88,92,87,123,109,127],
[114,98,0,90,77,77,76,128,77,104],
[135,89,120,0,96,113,123,103,136,124],
[106,122,133,114,0,98,93,116,77,114],
[160,118,133,97,112,0,101,111,120,108],
[159,123,134,87,117,109,0,121,125,110],
[99,87,82,107,94,99,89,0,87,64],
[173,101,133,74,133,90,85,123,0,125],
[148,83,106,86,96,102,100,146,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,110,100,124,106,115,110,109],
[108,0,102,96,94,114,110,116,107,124],
[101,108,0,94,101,105,110,101,107,114],
[100,114,116,0,107,108,95,110,101,120],
[110,116,109,103,0,108,111,109,112,109],
[86,96,105,102,102,0,99,112,84,118],
[104,100,100,115,99,111,0,111,97,116],
[95,94,109,100,101,98,99,0,90,113],
[100,103,103,109,98,126,113,120,0,120],
[101,86,96,90,101,92,94,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,92,93,88,104,79,102,91,98],
[127,0,112,107,92,108,99,117,110,106],
[118,98,0,102,74,117,81,98,94,113],
[117,103,108,0,98,121,109,126,93,109],
[122,118,136,112,0,111,109,123,119,105],
[106,102,93,89,99,0,91,98,82,93],
[131,111,129,101,101,119,0,122,111,95],
[108,93,112,84,87,112,88,0,97,96],
[119,100,116,117,91,128,99,113,0,105],
[112,104,97,101,105,117,115,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,75,95,81,75,101,94,59,107],
[95,0,91,74,80,47,104,90,44,107],
[135,119,0,109,108,94,127,112,80,131],
[115,136,101,0,101,108,126,131,104,127],
[129,130,102,109,0,82,152,144,110,134],
[135,163,116,102,128,0,145,139,105,112],
[109,106,83,84,58,65,0,111,65,98],
[116,120,98,79,66,71,99,0,70,99],
[151,166,130,106,100,105,145,140,0,146],
[103,103,79,83,76,98,112,111,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,112,110,96,114,119,112,101],
[104,0,110,95,97,90,112,127,109,104],
[105,100,0,95,90,105,106,118,108,93],
[98,115,115,0,101,111,112,129,105,114],
[100,113,120,109,0,103,104,114,120,107],
[114,120,105,99,107,0,119,114,108,107],
[96,98,104,98,106,91,0,108,109,88],
[91,83,92,81,96,96,102,0,93,99],
[98,101,102,105,90,102,101,117,0,102],
[109,106,117,96,103,103,122,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,99,105,117,113,108,100,104],
[111,0,115,113,110,106,115,113,104,103],
[111,95,0,108,93,94,100,89,99,102],
[111,97,102,0,106,111,108,99,103,94],
[105,100,117,104,0,106,111,95,105,109],
[93,104,116,99,104,0,105,103,93,101],
[97,95,110,102,99,105,0,94,96,99],
[102,97,121,111,115,107,116,0,95,111],
[110,106,111,107,105,117,114,115,0,118],
[106,107,108,116,101,109,111,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,114,109,109,107,87,122,123,99],
[91,0,120,104,105,102,97,127,116,98],
[96,90,0,78,98,122,95,99,118,103],
[101,106,132,0,110,117,111,118,103,106],
[101,105,112,100,0,115,108,97,108,106],
[103,108,88,93,95,0,113,130,123,112],
[123,113,115,99,102,97,0,92,115,123],
[88,83,111,92,113,80,118,0,126,105],
[87,94,92,107,102,87,95,84,0,102],
[111,112,107,104,104,98,87,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,101,95,104,101,96,97,104],
[106,0,102,103,107,96,94,107,93,100],
[105,108,0,109,109,114,98,111,98,108],
[109,107,101,0,97,93,102,104,96,97],
[115,103,101,113,0,103,97,106,96,102],
[106,114,96,117,107,0,96,108,95,107],
[109,116,112,108,113,114,0,101,97,109],
[114,103,99,106,104,102,109,0,105,106],
[113,117,112,114,114,115,113,105,0,108],
[106,110,102,113,108,103,101,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,110,120,114,107,115,86,92],
[99,0,105,121,120,95,106,119,88,104],
[93,105,0,108,123,88,107,116,77,98],
[100,89,102,0,99,97,98,118,95,97],
[90,90,87,111,0,94,98,94,83,79],
[96,115,122,113,116,0,108,125,101,106],
[103,104,103,112,112,102,0,123,100,99],
[95,91,94,92,116,85,87,0,105,104],
[124,122,133,115,127,109,110,105,0,116],
[118,106,112,113,131,104,111,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,97,100,104,106,116,110,101],
[101,0,108,96,97,94,89,105,99,91],
[101,102,0,98,88,83,101,111,106,98],
[113,114,112,0,109,105,109,110,113,107],
[110,113,122,101,0,91,107,110,115,102],
[106,116,127,105,119,0,116,122,129,110],
[104,121,109,101,103,94,0,113,116,105],
[94,105,99,100,100,88,97,0,101,89],
[100,111,104,97,95,81,94,109,0,90],
[109,119,112,103,108,100,105,121,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,123,126,115,109,101,109,100],
[95,0,83,108,96,88,86,88,107,97],
[101,127,0,121,107,101,105,106,109,108],
[87,102,89,0,107,88,95,86,99,84],
[84,114,103,103,0,92,98,91,108,85],
[95,122,109,122,118,0,105,108,108,97],
[101,124,105,115,112,105,0,94,127,99],
[109,122,104,124,119,102,116,0,120,99],
[101,103,101,111,102,102,83,90,0,85],
[110,113,102,126,125,113,111,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,92,106,112,102,98,86,119],
[113,0,99,103,110,112,96,116,107,96],
[116,111,0,109,122,118,105,102,98,124],
[118,107,101,0,105,125,104,108,98,106],
[104,100,88,105,0,107,90,102,89,94],
[98,98,92,85,103,0,96,90,85,92],
[108,114,105,106,120,114,0,110,108,116],
[112,94,108,102,108,120,100,0,113,115],
[124,103,112,112,121,125,102,97,0,116],
[91,114,86,104,116,118,94,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,98,100,107,114,103,107,105],
[111,0,125,106,103,114,110,119,116,104],
[108,85,0,101,102,84,103,102,101,95],
[112,104,109,0,95,95,96,107,111,102],
[110,107,108,115,0,100,113,121,102,97],
[103,96,126,115,110,0,118,111,119,102],
[96,100,107,114,97,92,0,112,95,112],
[107,91,108,103,89,99,98,0,110,92],
[103,94,109,99,108,91,115,100,0,107],
[105,106,115,108,113,108,98,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,85,113,93,114,100,72,107,117],
[117,0,93,91,105,105,81,90,83,117],
[125,117,0,107,110,126,129,95,115,129],
[97,119,103,0,118,81,115,107,107,126],
[117,105,100,92,0,103,103,104,107,122],
[96,105,84,129,107,0,113,80,110,125],
[110,129,81,95,107,97,0,61,97,104],
[138,120,115,103,106,130,149,0,129,103],
[103,127,95,103,103,100,113,81,0,117],
[93,93,81,84,88,85,106,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,103,100,94,103,109,99,120],
[101,0,97,114,102,109,95,106,97,118],
[114,113,0,118,116,111,103,116,112,124],
[107,96,92,0,100,94,102,99,107,112],
[110,108,94,110,0,100,111,96,103,115],
[116,101,99,116,110,0,109,110,97,120],
[107,115,107,108,99,101,0,110,107,116],
[101,104,94,111,114,100,100,0,102,116],
[111,113,98,103,107,113,103,108,0,120],
[90,92,86,98,95,90,94,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,71,123,78,105,94,79,87,102],
[119,0,110,131,96,115,101,79,103,90],
[139,100,0,138,108,122,131,111,120,119],
[87,79,72,0,89,91,97,77,79,98],
[132,114,102,121,0,115,131,101,99,103],
[105,95,88,119,95,0,98,78,94,98],
[116,109,79,113,79,112,0,89,86,101],
[131,131,99,133,109,132,121,0,126,124],
[123,107,90,131,111,116,124,84,0,116],
[108,120,91,112,107,112,109,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,113,81,127,115,105,113,76],
[105,0,102,115,98,106,134,94,118,117],
[106,108,0,127,98,117,109,112,120,97],
[97,95,83,0,69,112,103,96,125,94],
[129,112,112,141,0,126,130,112,147,103],
[83,104,93,98,84,0,93,82,114,87],
[95,76,101,107,80,117,0,98,122,85],
[105,116,98,114,98,128,112,0,110,115],
[97,92,90,85,63,96,88,100,0,77],
[134,93,113,116,107,123,125,95,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,67,99,98,116,87,96,111,78],
[129,0,102,119,102,132,112,101,94,100],
[143,108,0,140,95,153,87,124,97,147],
[111,91,70,0,82,78,47,83,71,82],
[112,108,115,128,0,106,95,72,84,114],
[94,78,57,132,104,0,95,87,61,100],
[123,98,123,163,115,115,0,108,91,110],
[114,109,86,127,138,123,102,0,82,89],
[99,116,113,139,126,149,119,128,0,120],
[132,110,63,128,96,110,100,121,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,107,106,87,91,90,104,101],
[106,0,104,98,105,104,87,91,110,96],
[108,106,0,120,99,107,102,93,103,106],
[103,112,90,0,98,100,93,104,118,107],
[104,105,111,112,0,94,111,94,107,94],
[123,106,103,110,116,0,93,94,110,102],
[119,123,108,117,99,117,0,116,110,106],
[120,119,117,106,116,116,94,0,120,110],
[106,100,107,92,103,100,100,90,0,108],
[109,114,104,103,116,108,104,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,110,126,88,109,98,115,135],
[100,0,92,88,95,71,81,75,90,100],
[94,118,0,113,96,103,116,87,113,154],
[100,122,97,0,105,68,99,69,81,116],
[84,115,114,105,0,75,92,46,93,110],
[122,139,107,142,135,0,128,85,93,127],
[101,129,94,111,118,82,0,87,109,142],
[112,135,123,141,164,125,123,0,103,138],
[95,120,97,129,117,117,101,107,0,134],
[75,110,56,94,100,83,68,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,116,101,115,116,124,130,102],
[94,0,96,91,97,97,103,100,108,90],
[103,114,0,90,101,109,114,117,107,102],
[94,119,120,0,110,102,113,115,126,111],
[109,113,109,100,0,102,102,121,115,115],
[95,113,101,108,108,0,114,115,106,108],
[94,107,96,97,108,96,0,117,104,101],
[86,110,93,95,89,95,93,0,106,97],
[80,102,103,84,95,104,106,104,0,106],
[108,120,108,99,95,102,109,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,62,70,80,153,141,152,113,151],
[43,0,75,0,80,130,62,122,72,55],
[148,135,0,114,124,197,101,161,96,134],
[140,210,96,0,124,201,141,161,130,151],
[130,130,86,86,0,120,86,148,112,99],
[57,80,13,9,90,0,37,97,47,21],
[69,148,109,69,124,173,0,103,81,87],
[58,88,49,49,62,113,107,0,96,62],
[97,138,114,80,98,163,129,114,0,94],
[59,155,76,59,111,189,123,148,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,98,114,111,124,114,119,103,104],
[82,0,100,90,85,116,109,107,89,99],
[112,110,0,102,120,112,112,110,109,119],
[96,120,108,0,100,110,100,107,109,104],
[99,125,90,110,0,120,118,106,110,104],
[86,94,98,100,90,0,112,110,104,96],
[96,101,98,110,92,98,0,101,95,111],
[91,103,100,103,104,100,109,0,98,104],
[107,121,101,101,100,106,115,112,0,107],
[106,111,91,106,106,114,99,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,106,99,103,109,105,118,102],
[89,0,97,94,90,93,102,96,87,97],
[103,113,0,106,105,104,112,108,114,110],
[104,116,104,0,105,99,105,102,109,94],
[111,120,105,105,0,107,113,103,111,101],
[107,117,106,111,103,0,90,107,108,104],
[101,108,98,105,97,120,0,102,90,99],
[105,114,102,108,107,103,108,0,112,114],
[92,123,96,101,99,102,120,98,0,100],
[108,113,100,116,109,106,111,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,116,124,152,135,116,114,137,146],
[121,0,112,103,131,128,119,94,96,123],
[94,98,0,124,130,113,114,113,92,146],
[86,107,86,0,111,79,113,107,116,124],
[58,79,80,99,0,98,90,80,74,85],
[75,82,97,131,112,0,93,71,77,100],
[94,91,96,97,120,117,0,100,84,111],
[96,116,97,103,130,139,110,0,119,132],
[73,114,118,94,136,133,126,91,0,113],
[64,87,64,86,125,110,99,78,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,99,109,117,102,116,101,122,136],
[81,0,91,107,101,84,103,95,97,105],
[111,119,0,101,110,105,119,105,116,114],
[101,103,109,0,112,114,103,104,114,98],
[93,109,100,98,0,101,104,112,101,112],
[108,126,105,96,109,0,116,122,129,121],
[94,107,91,107,106,94,0,90,110,126],
[109,115,105,106,98,88,120,0,101,116],
[88,113,94,96,109,81,100,109,0,100],
[74,105,96,112,98,89,84,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,113,107,106,109,116,110,117],
[105,0,111,102,116,105,102,109,107,109],
[97,99,0,104,98,97,97,106,98,103],
[97,108,106,0,106,100,101,101,104,101],
[103,94,112,104,0,95,95,105,98,104],
[104,105,113,110,115,0,114,120,108,115],
[101,108,113,109,115,96,0,113,105,107],
[94,101,104,109,105,90,97,0,101,99],
[100,103,112,106,112,102,105,109,0,119],
[93,101,107,109,106,95,103,111,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,124,106,103,101,124,102,104],
[102,0,110,117,99,81,101,87,98,103],
[104,100,0,115,106,113,99,100,111,121],
[86,93,95,0,88,90,85,85,89,80],
[104,111,104,122,0,114,104,108,109,103],
[107,129,97,120,96,0,103,102,112,104],
[109,109,111,125,106,107,0,118,86,106],
[86,123,110,125,102,108,92,0,105,111],
[108,112,99,121,101,98,124,105,0,95],
[106,107,89,130,107,106,104,99,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,103,96,100,96,92,99,93],
[105,0,82,93,84,96,92,85,94,86],
[114,128,0,106,99,111,107,92,104,97],
[107,117,104,0,98,110,108,104,110,98],
[114,126,111,112,0,117,117,104,118,114],
[110,114,99,100,93,0,105,95,102,109],
[114,118,103,102,93,105,0,93,103,100],
[118,125,118,106,106,115,117,0,107,104],
[111,116,106,100,92,108,107,103,0,95],
[117,124,113,112,96,101,110,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,99,98,101,103,109,104,108],
[111,0,107,101,92,92,117,114,100,110],
[107,103,0,97,98,100,107,104,103,105],
[111,109,113,0,111,107,114,113,108,104],
[112,118,112,99,0,101,105,113,110,110],
[109,118,110,103,109,0,102,110,100,120],
[107,93,103,96,105,108,0,111,100,110],
[101,96,106,97,97,100,99,0,92,103],
[106,110,107,102,100,110,110,118,0,112],
[102,100,105,106,100,90,100,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,86,112,102,90,115,100,106,127],
[115,0,107,96,104,101,91,103,126,123],
[124,103,0,117,101,94,99,108,111,113],
[98,114,93,0,75,83,81,91,104,107],
[108,106,109,135,0,90,88,108,131,106],
[120,109,116,127,120,0,117,101,117,125],
[95,119,111,129,122,93,0,102,126,108],
[110,107,102,119,102,109,108,0,118,106],
[104,84,99,106,79,93,84,92,0,97],
[83,87,97,103,104,85,102,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,109,85,114,97,97,109,102],
[116,0,104,133,108,119,106,103,118,129],
[108,106,0,123,101,109,109,99,116,111],
[101,77,87,0,86,116,98,96,93,97],
[125,102,109,124,0,117,118,108,111,135],
[96,91,101,94,93,0,99,112,106,104],
[113,104,101,112,92,111,0,111,100,99],
[113,107,111,114,102,98,99,0,111,125],
[101,92,94,117,99,104,110,99,0,105],
[108,81,99,113,75,106,111,85,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,119,121,107,93,105,118,105],
[97,0,101,112,115,122,112,111,118,110],
[90,109,0,98,107,88,90,96,108,87],
[91,98,112,0,103,102,108,99,117,86],
[89,95,103,107,0,99,108,98,110,84],
[103,88,122,108,111,0,93,88,114,103],
[117,98,120,102,102,117,0,104,114,96],
[105,99,114,111,112,122,106,0,106,104],
[92,92,102,93,100,96,96,104,0,85],
[105,100,123,124,126,107,114,106,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,112,109,113,104,116,111,103],
[108,0,111,92,104,111,100,91,114,94],
[90,99,0,98,98,117,93,112,94,92],
[98,118,112,0,101,104,104,101,116,107],
[101,106,112,109,0,124,93,112,116,116],
[97,99,93,106,86,0,94,99,112,105],
[106,110,117,106,117,116,0,116,112,93],
[94,119,98,109,98,111,94,0,98,106],
[99,96,116,94,94,98,98,112,0,105],
[107,116,118,103,94,105,117,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,90,106,114,108,116,116,105],
[103,0,111,89,112,105,102,104,109,91],
[103,99,0,94,107,96,106,106,119,99],
[120,121,116,0,107,107,105,112,120,108],
[104,98,103,103,0,104,91,102,112,99],
[96,105,114,103,106,0,104,113,117,96],
[102,108,104,105,119,106,0,109,116,104],
[94,106,104,98,108,97,101,0,112,100],
[94,101,91,90,98,93,94,98,0,91],
[105,119,111,102,111,114,106,110,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,160,165,148,123,175,134,138,172],
[109,0,157,139,118,155,169,91,111,124],
[50,53,0,101,51,63,99,78,52,64],
[45,71,109,0,94,75,72,72,116,80],
[62,92,159,116,0,98,115,135,104,120],
[87,55,147,135,112,0,156,96,80,127],
[35,41,111,138,95,54,0,68,123,130],
[76,119,132,138,75,114,142,0,122,133],
[72,99,158,94,106,130,87,88,0,98],
[38,86,146,130,90,83,80,77,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,94,97,99,100,92,97,95],
[123,0,120,103,119,111,99,109,101,103],
[105,90,0,91,103,101,90,87,87,83],
[116,107,119,0,114,115,100,101,104,103],
[113,91,107,96,0,105,91,82,98,104],
[111,99,109,95,105,0,98,90,103,93],
[110,111,120,110,119,112,0,96,106,104],
[118,101,123,109,128,120,114,0,105,117],
[113,109,123,106,112,107,104,105,0,108],
[115,107,127,107,106,117,106,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,127,128,128,100,118,116,131],
[94,0,108,136,116,125,108,133,107,124],
[89,102,0,93,95,110,112,113,99,111],
[83,74,117,0,98,113,113,108,115,99],
[82,94,115,112,0,121,115,109,111,100],
[82,85,100,97,89,0,100,96,102,120],
[110,102,98,97,95,110,0,112,93,109],
[92,77,97,102,101,114,98,0,93,103],
[94,103,111,95,99,108,117,117,0,107],
[79,86,99,111,110,90,101,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,111,106,100,101,110,111,114],
[99,0,102,109,116,100,109,108,120,111],
[105,108,0,103,109,97,109,115,110,107],
[99,101,107,0,105,101,104,106,104,107],
[104,94,101,105,0,101,94,116,111,108],
[110,110,113,109,109,0,115,103,102,117],
[109,101,101,106,116,95,0,102,102,107],
[100,102,95,104,94,107,108,0,111,107],
[99,90,100,106,99,108,108,99,0,107],
[96,99,103,103,102,93,103,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,137,111,109,118,116,117,109,93],
[97,0,120,123,110,102,141,92,102,100],
[73,90,0,109,78,87,94,85,89,85],
[99,87,101,0,91,98,128,91,80,102],
[101,100,132,119,0,128,122,97,101,100],
[92,108,123,112,82,0,104,97,92,86],
[94,69,116,82,88,106,0,81,96,91],
[93,118,125,119,113,113,129,0,111,106],
[101,108,121,130,109,118,114,99,0,113],
[117,110,125,108,110,124,119,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,122,84,106,115,93,74,76],
[101,0,107,117,95,97,100,73,84,77],
[104,103,0,121,101,106,104,75,100,98],
[88,93,89,0,75,99,98,89,76,73],
[126,115,109,135,0,109,111,95,109,99],
[104,113,104,111,101,0,92,91,103,109],
[95,110,106,112,99,118,0,107,93,103],
[117,137,135,121,115,119,103,0,104,110],
[136,126,110,134,101,107,117,106,0,102],
[134,133,112,137,111,101,107,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,100,106,125,110,101,99,113],
[96,0,111,111,104,104,102,101,99,108],
[91,99,0,101,96,98,106,100,95,104],
[110,99,109,0,103,122,114,113,102,108],
[104,106,114,107,0,122,119,108,114,106],
[85,106,112,88,88,0,116,89,97,98],
[100,108,104,96,91,94,0,78,95,100],
[109,109,110,97,102,121,132,0,106,106],
[111,111,115,108,96,113,115,104,0,109],
[97,102,106,102,104,112,110,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,119,105,119,116,108,103,120],
[104,0,109,118,96,122,102,106,116,113],
[101,101,0,126,107,102,101,107,118,105],
[91,92,84,0,84,103,94,108,93,99],
[105,114,103,126,0,112,116,115,127,118],
[91,88,108,107,98,0,98,94,98,103],
[94,108,109,116,94,112,0,103,108,122],
[102,104,103,102,95,116,107,0,107,119],
[107,94,92,117,83,112,102,103,0,103],
[90,97,105,111,92,107,88,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,91,96,102,92,100,99,108],
[112,0,103,112,119,110,111,105,116,121],
[111,107,0,102,101,96,111,102,108,103],
[119,98,108,0,120,117,108,108,100,108],
[114,91,109,90,0,105,107,102,103,110],
[108,100,114,93,105,0,115,98,104,103],
[118,99,99,102,103,95,0,104,105,106],
[110,105,108,102,108,112,106,0,114,120],
[111,94,102,110,107,106,105,96,0,108],
[102,89,107,102,100,107,104,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,117,96,108,112,120,119,104],
[104,0,88,109,106,97,110,103,118,99],
[101,122,0,110,114,104,115,116,109,110],
[93,101,100,0,87,100,102,115,104,100],
[114,104,96,123,0,112,111,126,126,105],
[102,113,106,110,98,0,112,111,111,100],
[98,100,95,108,99,98,0,116,110,98],
[90,107,94,95,84,99,94,0,107,89],
[91,92,101,106,84,99,100,103,0,94],
[106,111,100,110,105,110,112,121,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,74,131,98,103,81,92,90,91],
[107,0,77,125,99,79,95,90,78,108],
[136,133,0,123,115,118,94,106,123,102],
[79,85,87,0,106,85,85,87,77,78],
[112,111,95,104,0,103,104,96,102,116],
[107,131,92,125,107,0,104,109,99,105],
[129,115,116,125,106,106,0,118,112,99],
[118,120,104,123,114,101,92,0,125,111],
[120,132,87,133,108,111,98,85,0,109],
[119,102,108,132,94,105,111,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,107,110,118,106,113,115,101],
[108,0,112,111,102,107,108,112,103,101],
[93,98,0,104,110,113,108,111,107,105],
[103,99,106,0,116,110,99,109,108,106],
[100,108,100,94,0,111,102,109,100,95],
[92,103,97,100,99,0,98,113,106,97],
[104,102,102,111,108,112,0,108,99,107],
[97,98,99,101,101,97,102,0,110,99],
[95,107,103,102,110,104,111,100,0,103],
[109,109,105,104,115,113,103,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,119,120,111,113,98,98,88,93],
[106,0,148,127,134,99,125,129,129,119],
[91,62,0,95,102,83,104,114,97,97],
[90,83,115,0,104,102,85,125,96,119],
[99,76,108,106,0,110,92,116,101,110],
[97,111,127,108,100,0,109,140,112,129],
[112,85,106,125,118,101,0,134,114,117],
[112,81,96,85,94,70,76,0,81,112],
[122,81,113,114,109,98,96,129,0,132],
[117,91,113,91,100,81,93,98,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,125,127,119,121,120,93,104,114],
[113,0,143,126,116,123,127,83,76,100],
[85,67,0,102,111,83,56,80,50,76],
[83,84,108,0,97,90,104,67,81,95],
[91,94,99,113,0,132,101,106,104,103],
[89,87,127,120,78,0,81,79,104,129],
[90,83,154,106,109,129,0,86,99,120],
[117,127,130,143,104,131,124,0,114,134],
[106,134,160,129,106,106,111,96,0,120],
[96,110,134,115,107,81,90,76,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,102,83,74,98,84,96,75,103],
[132,0,123,104,107,135,86,103,73,151],
[108,87,0,106,105,110,98,112,70,136],
[127,106,104,0,79,111,116,105,94,132],
[136,103,105,131,0,120,104,107,109,124],
[112,75,100,99,90,0,87,88,93,129],
[126,124,112,94,106,123,0,114,86,129],
[114,107,98,105,103,122,96,0,96,137],
[135,137,140,116,101,117,124,114,0,145],
[107,59,74,78,86,81,81,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,133,118,103,101,109,101,117,120],
[103,0,115,111,105,89,121,108,102,109],
[77,95,0,111,93,97,106,97,95,115],
[92,99,99,0,99,95,89,106,113,118],
[107,105,117,111,0,114,114,97,111,102],
[109,121,113,115,96,0,105,113,96,112],
[101,89,104,121,96,105,0,102,112,112],
[109,102,113,104,113,97,108,0,109,104],
[93,108,115,97,99,114,98,101,0,120],
[90,101,95,92,108,98,98,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,117,105,123,114,119,109,114,94],
[90,0,101,91,105,95,104,99,104,91],
[93,109,0,97,105,87,119,105,98,105],
[105,119,113,0,118,101,128,104,102,93],
[87,105,105,92,0,89,110,102,103,92],
[96,115,123,109,121,0,127,110,107,105],
[91,106,91,82,100,83,0,96,103,85],
[101,111,105,106,108,100,114,0,115,107],
[96,106,112,108,107,103,107,95,0,96],
[116,119,105,117,118,105,125,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,110,107,99,103,110,99,99],
[112,0,92,114,102,99,108,114,102,108],
[121,118,0,126,105,112,124,122,115,118],
[100,96,84,0,92,89,105,107,103,101],
[103,108,105,118,0,101,116,107,114,108],
[111,111,98,121,109,0,122,119,108,110],
[107,102,86,105,94,88,0,100,103,110],
[100,96,88,103,103,91,110,0,98,107],
[111,108,95,107,96,102,107,112,0,102],
[111,102,92,109,102,100,100,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,111,123,105,113,98,130,112],
[96,0,92,106,105,81,100,102,107,111],
[102,118,0,102,118,108,120,110,125,119],
[99,104,108,0,94,93,102,103,110,102],
[87,105,92,116,0,100,100,98,114,110],
[105,129,102,117,110,0,127,110,132,118],
[97,110,90,108,110,83,0,93,117,112],
[112,108,100,107,112,100,117,0,118,110],
[80,103,85,100,96,78,93,92,0,95],
[98,99,91,108,100,92,98,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,90,100,98,109,95,112,120],
[114,0,101,101,91,89,115,84,115,114],
[108,109,0,109,91,121,124,90,113,111],
[120,109,101,0,109,111,118,109,121,126],
[110,119,119,101,0,114,130,110,115,128],
[112,121,89,99,96,0,119,108,111,126],
[101,95,86,92,80,91,0,94,106,116],
[115,126,120,101,100,102,116,0,125,133],
[98,95,97,89,95,99,104,85,0,101],
[90,96,99,84,82,84,94,77,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,100,119,115,113,127,71,129,77],
[85,0,119,95,89,76,74,98,108,69],
[110,91,0,98,118,93,87,71,104,64],
[91,115,112,0,99,100,79,88,95,53],
[95,121,92,111,0,79,82,83,103,78],
[97,134,117,110,131,0,103,95,119,111],
[83,136,123,131,128,107,0,113,126,93],
[139,112,139,122,127,115,97,0,117,90],
[81,102,106,115,107,91,84,93,0,75],
[133,141,146,157,132,99,117,120,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,63,118,110,86,107,58,57,136],
[123,0,97,94,142,130,123,107,79,115],
[147,113,0,102,132,102,121,105,40,117],
[92,116,108,0,129,73,67,94,126,108],
[100,68,78,81,0,107,67,91,93,131],
[124,80,108,137,103,0,87,95,84,133],
[103,87,89,143,143,123,0,91,93,127],
[152,103,105,116,119,115,119,0,123,123],
[153,131,170,84,117,126,117,87,0,111],
[74,95,93,102,79,77,83,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,102,94,106,104,104,101,98],
[105,0,94,104,104,101,102,95,100,99],
[113,116,0,110,112,109,110,111,116,99],
[108,106,100,0,87,103,105,88,102,103],
[116,106,98,123,0,110,117,96,114,111],
[104,109,101,107,100,0,103,94,93,100],
[106,108,100,105,93,107,0,100,105,100],
[106,115,99,122,114,116,110,0,105,109],
[109,110,94,108,96,117,105,105,0,103],
[112,111,111,107,99,110,110,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,81,90,81,101,96,126,99,94],
[103,0,80,87,78,71,100,111,93,98],
[129,130,0,108,86,98,103,133,98,120],
[120,123,102,0,104,100,120,126,118,125],
[129,132,124,106,0,97,126,119,114,109],
[109,139,112,110,113,0,111,125,121,105],
[114,110,107,90,84,99,0,116,97,110],
[84,99,77,84,91,85,94,0,76,100],
[111,117,112,92,96,89,113,134,0,132],
[116,112,90,85,101,105,100,110,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,107,117,101,90,112,110,105],
[99,0,115,96,118,104,106,101,108,114],
[84,95,0,82,98,96,87,85,91,89],
[103,114,128,0,123,108,97,108,115,120],
[93,92,112,87,0,98,78,91,98,101],
[109,106,114,102,112,0,100,106,102,110],
[120,104,123,113,132,110,0,105,111,113],
[98,109,125,102,119,104,105,0,100,112],
[100,102,119,95,112,108,99,110,0,112],
[105,96,121,90,109,100,97,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,96,100,105,104,116,102,110],
[117,0,101,111,101,110,110,114,121,118],
[103,109,0,86,97,96,90,109,98,106],
[114,99,124,0,101,104,93,113,109,124],
[110,109,113,109,0,103,97,110,121,120],
[105,100,114,106,107,0,106,111,116,118],
[106,100,120,117,113,104,0,111,117,126],
[94,96,101,97,100,99,99,0,108,116],
[108,89,112,101,89,94,93,102,0,110],
[100,92,104,86,90,92,84,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,104,106,98,92,115,89,112],
[118,0,111,109,106,100,107,122,101,108],
[106,99,0,99,94,95,102,106,98,106],
[106,101,111,0,97,98,92,106,106,107],
[104,104,116,113,0,105,108,122,103,113],
[112,110,115,112,105,0,99,112,113,117],
[118,103,108,118,102,111,0,117,101,115],
[95,88,104,104,88,98,93,0,106,104],
[121,109,112,104,107,97,109,104,0,119],
[98,102,104,103,97,93,95,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,123,129,117,121,117,105,106,126],
[111,0,111,124,110,115,97,101,94,125],
[87,99,0,119,94,106,107,78,118,118],
[81,86,91,0,87,78,79,70,84,117],
[93,100,116,123,0,127,100,116,107,126],
[89,95,104,132,83,0,96,95,115,114],
[93,113,103,131,110,114,0,108,107,130],
[105,109,132,140,94,115,102,0,94,131],
[104,116,92,126,103,95,103,116,0,123],
[84,85,92,93,84,96,80,79,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,73,89,72,71,98,95,88,86],
[117,0,118,107,90,92,114,101,117,112],
[137,92,0,94,97,85,101,97,98,106],
[121,103,116,0,96,115,97,103,118,96],
[138,120,113,114,0,111,110,125,111,96],
[139,118,125,95,99,0,120,118,113,102],
[112,96,109,113,100,90,0,101,105,115],
[115,109,113,107,85,92,109,0,110,103],
[122,93,112,92,99,97,105,100,0,119],
[124,98,104,114,114,108,95,107,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,122,111,94,117,111,124,127],
[87,0,90,95,104,62,91,81,97,104],
[104,120,0,99,110,75,86,82,115,107],
[88,115,111,0,120,74,102,96,120,110],
[99,106,100,90,0,91,97,90,121,102],
[116,148,135,136,119,0,105,107,134,132],
[93,119,124,108,113,105,0,98,134,117],
[99,129,128,114,120,103,112,0,128,126],
[86,113,95,90,89,76,76,82,0,97],
[83,106,103,100,108,78,93,84,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,130,155,84,106,114,112,113,96],
[103,0,122,148,100,125,94,109,118,132],
[80,88,0,98,92,93,111,111,80,85],
[55,62,112,0,93,108,105,86,96,102],
[126,110,118,117,0,133,79,128,63,107],
[104,85,117,102,77,0,77,100,102,85],
[96,116,99,105,131,133,0,120,109,130],
[98,101,99,124,82,110,90,0,71,122],
[97,92,130,114,147,108,101,139,0,119],
[114,78,125,108,103,125,80,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,89,102,109,115,102,100,93],
[107,0,95,101,109,106,119,99,116,90],
[107,115,0,108,113,115,127,116,109,102],
[121,109,102,0,109,121,122,104,111,107],
[108,101,97,101,0,113,119,103,104,91],
[101,104,95,89,97,0,109,95,99,92],
[95,91,83,88,91,101,0,98,87,87],
[108,111,94,106,107,115,112,0,104,103],
[110,94,101,99,106,111,123,106,0,99],
[117,120,108,103,119,118,123,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,107,122,112,102,86,138,81],
[102,0,114,86,104,94,87,57,112,68],
[91,96,0,94,124,91,109,88,97,95],
[103,124,116,0,106,122,121,86,103,78],
[88,106,86,104,0,91,104,107,101,82],
[98,116,119,88,119,0,123,71,123,119],
[108,123,101,89,106,87,0,89,131,88],
[124,153,122,124,103,139,121,0,128,98],
[72,98,113,107,109,87,79,82,0,69],
[129,142,115,132,128,91,122,112,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,106,115,114,125,106,116,107],
[97,0,105,99,116,104,95,97,91,99],
[113,105,0,113,116,114,105,116,119,120],
[104,111,97,0,114,104,107,108,111,97],
[95,94,94,96,0,103,112,102,107,115],
[96,106,96,106,107,0,109,101,108,105],
[85,115,105,103,98,101,0,103,93,114],
[104,113,94,102,108,109,107,0,114,117],
[94,119,91,99,103,102,117,96,0,104],
[103,111,90,113,95,105,96,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,93,93,93,86,105,87,111],
[105,0,103,102,94,100,100,104,100,104],
[114,107,0,97,102,107,94,106,100,111],
[117,108,113,0,108,102,102,117,105,118],
[117,116,108,102,0,115,111,128,112,113],
[117,110,103,108,95,0,93,112,97,99],
[124,110,116,108,99,117,0,117,108,118],
[105,106,104,93,82,98,93,0,95,105],
[123,110,110,105,98,113,102,115,0,111],
[99,106,99,92,97,111,92,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,106,114,103,98,104,103,101],
[97,0,99,104,109,82,105,89,85,106],
[93,111,0,103,107,89,90,89,94,102],
[104,106,107,0,102,99,106,94,94,104],
[96,101,103,108,0,98,91,91,93,108],
[107,128,121,111,112,0,107,102,97,135],
[112,105,120,104,119,103,0,94,115,118],
[106,121,121,116,119,108,116,0,102,124],
[107,125,116,116,117,113,95,108,0,121],
[109,104,108,106,102,75,92,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,94,90,88,94,88,109,113],
[114,0,125,119,97,115,98,110,111,115],
[101,85,0,91,87,92,92,90,99,103],
[116,91,119,0,108,109,110,117,110,124],
[120,113,123,102,0,113,115,104,116,116],
[122,95,118,101,97,0,98,109,110,108],
[116,112,118,100,95,112,0,105,117,127],
[122,100,120,93,106,101,105,0,114,117],
[101,99,111,100,94,100,93,96,0,110],
[97,95,107,86,94,102,83,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,74,118,88,35,81,87,117],
[95,0,117,76,116,78,62,110,102,143],
[93,93,0,99,121,51,41,87,86,102],
[136,134,111,0,155,94,105,79,147,128],
[92,94,89,55,0,59,81,43,100,95],
[122,132,159,116,151,0,86,61,156,111],
[175,148,169,105,129,124,0,125,137,140],
[129,100,123,131,167,149,85,0,144,116],
[123,108,124,63,110,54,73,66,0,108],
[93,67,108,82,115,99,70,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,100,89,88,96,105,112,91,93],
[131,0,120,99,112,112,124,113,112,107],
[110,90,0,97,96,98,111,111,104,88],
[121,111,113,0,108,109,129,119,114,102],
[122,98,114,102,0,108,109,117,94,100],
[114,98,112,101,102,0,107,105,105,107],
[105,86,99,81,101,103,0,105,94,89],
[98,97,99,91,93,105,105,0,99,97],
[119,98,106,96,116,105,116,111,0,103],
[117,103,122,108,110,103,121,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,149,109,103,142,101,116,111,125],
[129,0,140,104,113,137,150,127,129,126],
[61,70,0,75,82,80,61,77,62,55],
[101,106,135,0,107,112,101,135,97,128],
[107,97,128,103,0,119,122,97,100,60],
[68,73,130,98,91,0,100,86,46,113],
[109,60,149,109,88,110,0,119,91,96],
[94,83,133,75,113,124,91,0,93,88],
[99,81,148,113,110,164,119,117,0,114],
[85,84,155,82,150,97,114,122,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,86,147,147,124,111,147,147,86],
[63,0,74,109,109,73,88,74,124,63],
[124,136,0,159,159,73,111,159,149,63],
[63,101,51,0,63,38,50,15,149,63],
[63,101,51,147,0,53,111,112,111,25],
[86,137,137,172,157,0,136,137,147,122],
[99,122,99,160,99,74,0,160,135,99],
[63,136,51,195,98,73,50,0,149,63],
[63,86,61,61,99,63,75,61,0,25],
[124,147,147,147,185,88,111,147,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,102,90,105,113,83,103,96],
[118,0,103,112,105,108,103,99,113,109],
[113,107,0,117,103,96,112,99,117,112],
[108,98,93,0,88,106,104,89,107,102],
[120,105,107,122,0,105,124,108,122,116],
[105,102,114,104,105,0,105,100,108,109],
[97,107,98,106,86,105,0,93,100,91],
[127,111,111,121,102,110,117,0,112,117],
[107,97,93,103,88,102,110,98,0,108],
[114,101,98,108,94,101,119,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,103,120,117,127,112,103,118],
[108,0,117,109,120,115,123,102,113,125],
[106,93,0,102,119,118,118,104,107,100],
[107,101,108,0,128,98,113,99,91,105],
[90,90,91,82,0,92,90,65,77,88],
[93,95,92,112,118,0,107,97,107,97],
[83,87,92,97,120,103,0,82,78,86],
[98,108,106,111,145,113,128,0,106,125],
[107,97,103,119,133,103,132,104,0,99],
[92,85,110,105,122,113,124,85,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,117,108,97,107,105,109,110],
[101,0,112,115,104,102,98,97,100,106],
[100,98,0,109,94,101,103,101,115,105],
[93,95,101,0,89,99,98,89,103,99],
[102,106,116,121,0,106,110,99,126,117],
[113,108,109,111,104,0,110,104,117,109],
[103,112,107,112,100,100,0,101,113,105],
[105,113,109,121,111,106,109,0,114,111],
[101,110,95,107,84,93,97,96,0,109],
[100,104,105,111,93,101,105,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,102,104,108,85,109,101,99],
[102,0,112,113,133,126,102,124,117,89],
[102,98,0,115,72,123,113,116,97,100],
[108,97,95,0,105,102,96,100,79,86],
[106,77,138,105,0,135,104,119,125,101],
[102,84,87,108,75,0,67,109,83,73],
[125,108,97,114,106,143,0,133,125,109],
[101,86,94,110,91,101,77,0,97,63],
[109,93,113,131,85,127,85,113,0,76],
[111,121,110,124,109,137,101,147,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,109,104,105,113,113,103,120],
[93,0,107,95,95,107,109,100,101,93],
[98,103,0,96,101,113,110,114,98,102],
[101,115,114,0,100,107,130,115,105,126],
[106,115,109,110,0,102,124,104,112,113],
[105,103,97,103,108,0,99,106,105,96],
[97,101,100,80,86,111,0,100,111,104],
[97,110,96,95,106,104,110,0,111,108],
[107,109,112,105,98,105,99,99,0,99],
[90,117,108,84,97,114,106,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,98,95,80,85,85,108,76,86],
[143,0,116,110,86,117,84,129,122,88],
[112,94,0,99,90,91,88,104,99,78],
[115,100,111,0,98,108,73,102,96,92],
[130,124,120,112,0,101,121,123,102,107],
[125,93,119,102,109,0,99,139,121,93],
[125,126,122,137,89,111,0,125,104,96],
[102,81,106,108,87,71,85,0,83,87],
[134,88,111,114,108,89,106,127,0,82],
[124,122,132,118,103,117,114,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,73,67,79,90,87,107,99],
[115,0,93,96,94,90,96,104,120,90],
[116,117,0,94,99,110,112,101,141,112],
[137,114,116,0,103,109,90,101,119,90],
[143,116,111,107,0,96,110,94,122,109],
[131,120,100,101,114,0,112,95,134,107],
[120,114,98,120,100,98,0,98,122,110],
[123,106,109,109,116,115,112,0,127,101],
[103,90,69,91,88,76,88,83,0,96],
[111,120,98,120,101,103,100,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,129,119,114,105,113,120,106],
[96,0,100,115,111,102,100,91,108,99],
[98,110,0,96,92,100,98,95,101,105],
[81,95,114,0,92,95,95,102,108,98],
[91,99,118,118,0,110,99,112,99,105],
[96,108,110,115,100,0,101,115,115,110],
[105,110,112,115,111,109,0,103,106,121],
[97,119,115,108,98,95,107,0,97,101],
[90,102,109,102,111,95,104,113,0,102],
[104,111,105,112,105,100,89,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,104,102,113,107,124,115,96,116],
[74,0,80,80,96,84,83,78,83,91],
[106,130,0,111,116,88,133,109,106,118],
[108,130,99,0,128,105,120,103,102,134],
[97,114,94,82,0,90,100,113,92,112],
[103,126,122,105,120,0,133,120,120,129],
[86,127,77,90,110,77,0,101,89,115],
[95,132,101,107,97,90,109,0,99,108],
[114,127,104,108,118,90,121,111,0,118],
[94,119,92,76,98,81,95,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,100,104,96,103,106,83,85],
[106,0,98,96,104,99,109,116,95,94],
[111,112,0,91,107,114,116,127,100,97],
[110,114,119,0,119,110,113,127,112,93],
[106,106,103,91,0,105,97,110,80,85],
[114,111,96,100,105,0,101,109,86,89],
[107,101,94,97,113,109,0,109,104,105],
[104,94,83,83,100,101,101,0,98,98],
[127,115,110,98,130,124,106,112,0,98],
[125,116,113,117,125,121,105,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,99,105,105,115,100,110,95],
[113,0,122,95,111,101,115,109,115,109],
[96,88,0,95,111,102,101,102,127,91],
[111,115,115,0,109,124,121,95,112,101],
[105,99,99,101,0,106,117,108,105,100],
[105,109,108,86,104,0,118,94,124,95],
[95,95,109,89,93,92,0,110,109,96],
[110,101,108,115,102,116,100,0,116,106],
[100,95,83,98,105,86,101,94,0,89],
[115,101,119,109,110,115,114,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,96,116,94,96,92,95,107],
[106,0,110,100,113,108,105,115,101,114],
[103,100,0,95,102,92,94,108,101,112],
[114,110,115,0,119,102,112,110,107,115],
[94,97,108,91,0,90,100,100,90,97],
[116,102,118,108,120,0,110,113,103,119],
[114,105,116,98,110,100,0,112,100,106],
[118,95,102,100,110,97,98,0,85,101],
[115,109,109,103,120,107,110,125,0,107],
[103,96,98,95,113,91,104,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,117,95,106,109,113,101,102],
[101,0,101,101,104,96,116,101,98,100],
[107,109,0,101,105,97,108,104,108,115],
[93,109,109,0,99,110,107,108,100,105],
[115,106,105,111,0,113,107,116,116,108],
[104,114,113,100,97,0,102,113,104,112],
[101,94,102,103,103,108,0,112,101,106],
[97,109,106,102,94,97,98,0,94,101],
[109,112,102,110,94,106,109,116,0,102],
[108,110,95,105,102,98,104,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,96,104,98,95,101,110,114],
[96,0,110,87,110,94,91,92,112,119],
[96,100,0,95,93,93,93,87,110,107],
[114,123,115,0,123,100,116,100,115,129],
[106,100,117,87,0,116,107,92,128,128],
[112,116,117,110,94,0,115,105,127,122],
[115,119,117,94,103,95,0,99,112,120],
[109,118,123,110,118,105,111,0,103,113],
[100,98,100,95,82,83,98,107,0,93],
[96,91,103,81,82,88,90,97,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,77,95,92,102,98,95,86],
[109,0,121,92,111,115,116,110,107,115],
[113,89,0,77,98,101,100,86,85,92],
[133,118,133,0,113,128,120,114,107,104],
[115,99,112,97,0,103,108,112,99,97],
[118,95,109,82,107,0,115,101,100,106],
[108,94,110,90,102,95,0,104,85,104],
[112,100,124,96,98,109,106,0,105,109],
[115,103,125,103,111,110,125,105,0,110],
[124,95,118,106,113,104,106,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,125,155,142,115,83,105,96,132],
[93,0,159,153,129,136,96,137,113,133],
[85,51,0,127,153,109,111,104,86,135],
[55,57,83,0,116,68,99,89,89,82],
[68,81,57,94,0,92,93,80,66,98],
[95,74,101,142,118,0,116,98,77,143],
[127,114,99,111,117,94,0,86,72,168],
[105,73,106,121,130,112,124,0,88,138],
[114,97,124,121,144,133,138,122,0,130],
[78,77,75,128,112,67,42,72,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,118,104,103,112,100,110,107],
[99,0,105,115,97,97,105,92,97,99],
[101,105,0,107,101,104,108,89,94,91],
[92,95,103,0,95,91,95,88,91,87],
[106,113,109,115,0,100,110,103,101,96],
[107,113,106,119,110,0,105,98,107,106],
[98,105,102,115,100,105,0,98,97,96],
[110,118,121,122,107,112,112,0,105,107],
[100,113,116,119,109,103,113,105,0,113],
[103,111,119,123,114,104,114,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,111,111,116,113,106,113,105],
[95,0,107,109,112,108,97,104,97,100],
[95,103,0,102,106,105,100,93,95,99],
[99,101,108,0,107,119,97,109,102,101],
[99,98,104,103,0,111,103,102,104,110],
[94,102,105,91,99,0,106,97,94,97],
[97,113,110,113,107,104,0,110,99,114],
[104,106,117,101,108,113,100,0,98,105],
[97,113,115,108,106,116,111,112,0,105],
[105,110,111,109,100,113,96,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,113,107,102,108,101,104,111],
[103,0,109,106,116,95,109,98,106,109],
[101,101,0,100,95,88,109,100,98,101],
[97,104,110,0,103,101,102,96,113,110],
[103,94,115,107,0,103,98,101,107,108],
[108,115,122,109,107,0,109,107,105,109],
[102,101,101,108,112,101,0,97,110,121],
[109,112,110,114,109,103,113,0,97,107],
[106,104,112,97,103,105,100,113,0,112],
[99,101,109,100,102,101,89,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,94,94,109,85,98,95,97],
[118,0,106,106,103,103,98,99,108,122],
[111,104,0,106,96,102,94,103,104,115],
[116,104,104,0,98,103,102,101,116,97],
[116,107,114,112,0,116,102,106,106,121],
[101,107,108,107,94,0,96,93,89,110],
[125,112,116,108,108,114,0,112,98,108],
[112,111,107,109,104,117,98,0,104,116],
[115,102,106,94,104,121,112,106,0,118],
[113,88,95,113,89,100,102,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,92,105,95,75,92,85,92],
[125,0,103,112,119,98,97,106,106,120],
[128,107,0,116,119,119,108,116,103,115],
[118,98,94,0,106,101,101,96,93,100],
[105,91,91,104,0,94,96,81,95,103],
[115,112,91,109,116,0,99,110,111,107],
[135,113,102,109,114,111,0,126,105,112],
[118,104,94,114,129,100,84,0,101,116],
[125,104,107,117,115,99,105,109,0,115],
[118,90,95,110,107,103,98,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,106,120,116,110,123,106,109],
[110,0,108,105,115,115,113,114,105,106],
[95,102,0,110,107,108,109,108,106,111],
[104,105,100,0,115,103,118,109,107,112],
[90,95,103,95,0,107,91,103,99,95],
[94,95,102,107,103,0,106,100,96,106],
[100,97,101,92,119,104,0,110,105,113],
[87,96,102,101,107,110,100,0,95,107],
[104,105,104,103,111,114,105,115,0,97],
[101,104,99,98,115,104,97,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,104,103,114,108,115,101,103],
[110,0,105,104,104,102,115,111,96,108],
[105,105,0,110,109,103,123,101,102,108],
[106,106,100,0,103,97,112,92,86,107],
[107,106,101,107,0,105,117,98,95,99],
[96,108,107,113,105,0,116,102,92,111],
[102,95,87,98,93,94,0,108,89,91],
[95,99,109,118,112,108,102,0,109,102],
[109,114,108,124,115,118,121,101,0,108],
[107,102,102,103,111,99,119,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,86,101,114,88,106,100,92],
[113,0,111,97,96,116,103,120,102,97],
[111,99,0,97,79,89,91,84,92,90],
[124,113,113,0,94,126,91,91,98,100],
[109,114,131,116,0,128,119,113,118,104],
[96,94,121,84,82,0,80,91,94,89],
[122,107,119,119,91,130,0,104,98,105],
[104,90,126,119,97,119,106,0,96,106],
[110,108,118,112,92,116,112,114,0,100],
[118,113,120,110,106,121,105,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,91,94,92,121,96,108,120],
[107,0,106,104,94,100,122,106,98,112],
[111,104,0,86,85,99,104,113,91,105],
[119,106,124,0,115,101,107,137,115,124],
[116,116,125,95,0,113,126,120,117,114],
[118,110,111,109,97,0,138,115,118,124],
[89,88,106,103,84,72,0,102,97,101],
[114,104,97,73,90,95,108,0,89,109],
[102,112,119,95,93,92,113,121,0,112],
[90,98,105,86,96,86,109,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,113,112,110,92,100,103,95],
[105,0,105,107,104,102,99,103,100,94],
[101,105,0,112,111,106,104,112,104,102],
[97,103,98,0,104,104,91,103,101,95],
[98,106,99,106,0,106,96,105,103,93],
[100,108,104,106,104,0,102,108,99,101],
[118,111,106,119,114,108,0,113,111,102],
[110,107,98,107,105,102,97,0,100,104],
[107,110,106,109,107,111,99,110,0,105],
[115,116,108,115,117,109,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,150,156,150,154,150,153,174,104],
[87,0,134,115,127,121,116,128,142,123],
[60,76,0,137,81,116,111,126,143,68],
[54,95,73,0,48,119,85,105,145,73],
[60,83,129,162,0,122,112,136,138,85],
[56,89,94,91,88,0,87,139,132,85],
[60,94,99,125,98,123,0,125,153,80],
[57,82,84,105,74,71,85,0,109,73],
[36,68,67,65,72,78,57,101,0,68],
[106,87,142,137,125,125,130,137,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,100,103,105,97,112,113,107],
[107,0,105,100,87,91,97,109,110,101],
[100,105,0,95,104,102,97,116,105,116],
[110,110,115,0,102,113,103,111,106,107],
[107,123,106,108,0,105,109,118,109,109],
[105,119,108,97,105,0,111,120,96,108],
[113,113,113,107,101,99,0,115,99,103],
[98,101,94,99,92,90,95,0,96,107],
[97,100,105,104,101,114,111,114,0,99],
[103,109,94,103,101,102,107,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,105,99,99,104,104,97,96],
[108,0,115,101,101,107,109,104,106,112],
[111,95,0,102,97,95,107,102,102,95],
[105,109,108,0,95,104,115,106,102,106],
[111,109,113,115,0,100,101,112,105,104],
[111,103,115,106,110,0,107,107,108,102],
[106,101,103,95,109,103,0,107,99,99],
[106,106,108,104,98,103,103,0,99,106],
[113,104,108,108,105,102,111,111,0,106],
[114,98,115,104,106,108,111,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,144,112,125,136,133,85,120,112],
[87,0,145,114,117,136,127,94,117,80],
[66,65,0,101,73,50,93,80,83,69],
[98,96,109,0,134,104,145,113,98,85],
[85,93,137,76,0,82,115,79,94,71],
[74,74,160,106,128,0,98,108,102,73],
[77,83,117,65,95,112,0,90,88,67],
[125,116,130,97,131,102,120,0,95,84],
[90,93,127,112,116,108,122,115,0,93],
[98,130,141,125,139,137,143,126,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,32,107,59,49,69,140,69,30],
[55,0,74,107,101,93,65,142,113,74],
[178,136,0,147,91,139,130,130,92,92],
[103,103,63,0,42,91,63,130,53,103],
[151,109,119,168,0,97,69,189,111,61],
[161,117,71,119,113,0,111,151,119,71],
[141,145,80,147,141,99,0,130,109,70],
[70,68,80,80,21,59,80,0,70,20],
[141,97,118,157,99,91,101,140,0,108],
[180,136,118,107,149,139,140,190,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,90,117,100,108,110,124,110],
[102,0,106,95,105,96,112,118,128,118],
[107,104,0,115,116,111,108,124,115,124],
[120,115,95,0,107,109,123,124,124,111],
[93,105,94,103,0,112,116,96,106,106],
[110,114,99,101,98,0,106,114,126,107],
[102,98,102,87,94,104,0,97,122,104],
[100,92,86,86,114,96,113,0,121,119],
[86,82,95,86,104,84,88,89,0,97],
[100,92,86,99,104,103,106,91,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,104,117,131,130,111,118,109],
[91,0,104,102,92,112,109,107,106,103],
[88,106,0,96,103,114,106,95,101,96],
[106,108,114,0,100,127,122,96,124,101],
[93,118,107,110,0,127,123,106,121,111],
[79,98,96,83,83,0,97,86,95,92],
[80,101,104,88,87,113,0,101,102,86],
[99,103,115,114,104,124,109,0,118,103],
[92,104,109,86,89,115,108,92,0,90],
[101,107,114,109,99,118,124,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,97,105,100,106,98,110,107],
[97,0,83,89,93,96,108,89,105,108],
[119,127,0,100,106,115,107,107,112,99],
[113,121,110,0,98,112,111,100,116,101],
[105,117,104,112,0,117,103,114,125,116],
[110,114,95,98,93,0,112,93,109,118],
[104,102,103,99,107,98,0,100,109,103],
[112,121,103,110,96,117,110,0,119,116],
[100,105,98,94,85,101,101,91,0,91],
[103,102,111,109,94,92,107,94,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,105,109,108,111,100,114,109],
[94,0,103,99,102,103,109,105,118,104],
[110,107,0,112,108,112,112,104,120,106],
[105,111,98,0,107,110,117,109,122,110],
[101,108,102,103,0,107,110,96,113,114],
[102,107,98,100,103,0,104,101,109,110],
[99,101,98,93,100,106,0,103,109,100],
[110,105,106,101,114,109,107,0,108,108],
[96,92,90,88,97,101,101,102,0,99],
[101,106,104,100,96,100,110,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,97,103,103,98,103,116,105],
[103,0,99,90,94,106,105,103,104,88],
[101,111,0,101,92,100,98,109,113,93],
[113,120,109,0,107,117,112,121,108,105],
[107,116,118,103,0,111,111,116,107,113],
[107,104,110,93,99,0,92,113,96,102],
[112,105,112,98,99,118,0,110,106,108],
[107,107,101,89,94,97,100,0,103,115],
[94,106,97,102,103,114,104,107,0,100],
[105,122,117,105,97,108,102,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,113,99,103,94,98,151,144,135],
[88,0,139,107,101,78,118,99,126,105],
[97,71,0,62,50,62,67,101,115,76],
[111,103,148,0,117,119,87,125,141,123],
[107,109,160,93,0,101,142,110,155,142],
[116,132,148,91,109,0,158,101,152,144],
[112,92,143,123,68,52,0,123,134,68],
[59,111,109,85,100,109,87,0,119,89],
[66,84,95,69,55,58,76,91,0,63],
[75,105,134,87,68,66,142,121,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,108,99,102,88,110,109,104],
[110,0,108,110,105,115,110,110,125,97],
[108,102,0,118,102,114,107,97,122,110],
[102,100,92,0,93,111,103,108,115,124],
[111,105,108,117,0,117,109,97,125,106],
[108,95,96,99,93,0,83,92,113,83],
[122,100,103,107,101,127,0,127,118,111],
[100,100,113,102,113,118,83,0,115,101],
[101,85,88,95,85,97,92,95,0,99],
[106,113,100,86,104,127,99,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,100,88,99,101,89,87,95],
[116,0,107,106,93,114,113,97,99,101],
[106,103,0,98,95,101,95,83,101,87],
[110,104,112,0,105,108,107,98,95,98],
[122,117,115,105,0,119,116,104,106,104],
[111,96,109,102,91,0,106,92,93,97],
[109,97,115,103,94,104,0,91,94,101],
[121,113,127,112,106,118,119,0,112,104],
[123,111,109,115,104,117,116,98,0,108],
[115,109,123,112,106,113,109,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,111,113,105,116,105,108,107],
[104,0,119,126,119,105,124,109,104,108],
[96,91,0,122,106,99,111,94,94,102],
[99,84,88,0,95,102,121,83,96,97],
[97,91,104,115,0,106,110,102,99,100],
[105,105,111,108,104,0,114,109,104,100],
[94,86,99,89,100,96,0,87,79,91],
[105,101,116,127,108,101,123,0,93,108],
[102,106,116,114,111,106,131,117,0,107],
[103,102,108,113,110,110,119,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,99,113,107,83,108,100,104],
[108,0,125,113,121,109,105,121,108,105],
[111,85,0,104,112,113,95,115,106,85],
[111,97,106,0,108,117,103,113,96,114],
[97,89,98,102,0,93,82,99,83,93],
[103,101,97,93,117,0,77,97,111,90],
[127,105,115,107,128,133,0,115,113,122],
[102,89,95,97,111,113,95,0,97,117],
[110,102,104,114,127,99,97,113,0,111],
[106,105,125,96,117,120,88,93,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,111,104,120,128,90,114,103],
[88,0,94,76,95,96,98,88,84,95],
[103,116,0,89,91,111,112,92,116,103],
[99,134,121,0,112,107,122,113,122,116],
[106,115,119,98,0,107,109,95,97,111],
[90,114,99,103,103,0,104,96,103,107],
[82,112,98,88,101,106,0,106,97,98],
[120,122,118,97,115,114,104,0,116,114],
[96,126,94,88,113,107,113,94,0,104],
[107,115,107,94,99,103,112,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,132,137,143,125,97,124,131,128],
[85,0,117,100,123,75,77,109,93,102],
[78,93,0,133,101,88,96,112,103,95],
[73,110,77,0,94,107,92,112,107,96],
[67,87,109,116,0,79,75,84,69,88],
[85,135,122,103,131,0,114,115,141,151],
[113,133,114,118,135,96,0,108,105,120],
[86,101,98,98,126,95,102,0,126,100],
[79,117,107,103,141,69,105,84,0,108],
[82,108,115,114,122,59,90,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,86,95,97,94,74,87,100,79],
[129,0,91,110,84,81,99,93,97,85],
[124,119,0,119,119,90,107,116,110,111],
[115,100,91,0,97,94,86,104,95,74],
[113,126,91,113,0,102,111,100,102,101],
[116,129,120,116,108,0,113,104,111,104],
[136,111,103,124,99,97,0,104,121,98],
[123,117,94,106,110,106,106,0,117,91],
[110,113,100,115,108,99,89,93,0,98],
[131,125,99,136,109,106,112,119,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,105,85,95,104,111,90,106,106],
[125,0,125,114,105,120,123,103,117,119],
[105,85,0,93,91,108,107,97,111,94],
[125,96,117,0,105,114,116,106,105,105],
[115,105,119,105,0,116,120,107,120,118],
[106,90,102,96,94,0,115,105,91,99],
[99,87,103,94,90,95,0,95,97,103],
[120,107,113,104,103,105,115,0,117,114],
[104,93,99,105,90,119,113,93,0,104],
[104,91,116,105,92,111,107,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,133,114,115,135,122,112,102],
[100,0,101,122,110,96,108,111,101,103],
[88,109,0,118,103,93,105,109,90,87],
[77,88,92,0,88,87,87,100,84,78],
[96,100,107,122,0,95,124,105,95,96],
[95,114,117,123,115,0,115,119,128,110],
[75,102,105,123,86,95,0,114,103,101],
[88,99,101,110,105,91,96,0,97,90],
[98,109,120,126,115,82,107,113,0,93],
[108,107,123,132,114,100,109,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,93,99,96,102,87,106,100],
[103,0,99,94,102,99,108,96,94,107],
[114,111,0,103,101,105,120,96,108,112],
[117,116,107,0,115,109,113,101,109,109],
[111,108,109,95,0,106,107,107,102,110],
[114,111,105,101,104,0,107,101,105,111],
[108,102,90,97,103,103,0,97,105,103],
[123,114,114,109,103,109,113,0,106,108],
[104,116,102,101,108,105,105,104,0,115],
[110,103,98,101,100,99,107,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,109,102,108,92,110,104,108],
[103,0,107,105,99,108,90,112,112,114],
[112,103,0,108,103,103,100,107,111,106],
[101,105,102,0,97,109,100,114,118,107],
[108,111,107,113,0,113,101,115,110,104],
[102,102,107,101,97,0,97,107,103,97],
[118,120,110,110,109,113,0,106,118,104],
[100,98,103,96,95,103,104,0,113,108],
[106,98,99,92,100,107,92,97,0,100],
[102,96,104,103,106,113,106,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,92,104,112,103,101,92,105],
[102,0,115,105,111,110,108,106,101,104],
[109,95,0,94,108,93,98,92,101,89],
[118,105,116,0,118,116,106,102,105,109],
[106,99,102,92,0,103,89,91,110,96],
[98,100,117,94,107,0,90,98,102,90],
[107,102,112,104,121,120,0,100,115,102],
[109,104,118,108,119,112,110,0,104,110],
[118,109,109,105,100,108,95,106,0,108],
[105,106,121,101,114,120,108,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,89,102,110,93,102,100,121,104],
[98,0,95,94,99,90,92,91,120,95],
[121,115,0,113,116,110,108,100,108,106],
[108,116,97,0,108,91,100,95,106,97],
[100,111,94,102,0,106,100,98,100,88],
[117,120,100,119,104,0,113,111,121,111],
[108,118,102,110,110,97,0,97,101,95],
[110,119,110,115,112,99,113,0,103,115],
[89,90,102,104,110,89,109,107,0,101],
[106,115,104,113,122,99,115,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,87,99,97,84,113,104,103,89],
[97,0,85,76,91,108,102,92,86,72],
[123,125,0,102,119,135,122,123,118,114],
[111,134,108,0,100,116,117,108,126,102],
[113,119,91,110,0,100,132,124,110,113],
[126,102,75,94,110,0,86,119,94,89],
[97,108,88,93,78,124,0,95,112,99],
[106,118,87,102,86,91,115,0,124,85],
[107,124,92,84,100,116,98,86,0,102],
[121,138,96,108,97,121,111,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,113,105,107,109,95,88,100],
[115,0,120,109,113,104,113,111,110,98],
[98,90,0,108,105,109,103,95,94,103],
[97,101,102,0,101,95,105,98,95,98],
[105,97,105,109,0,102,103,90,94,100],
[103,106,101,115,108,0,102,95,91,95],
[101,97,107,105,107,108,0,97,93,100],
[115,99,115,112,120,115,113,0,109,108],
[122,100,116,115,116,119,117,101,0,113],
[110,112,107,112,110,115,110,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,103,102,110,103,111,105,111],
[100,0,107,105,98,101,103,111,103,103],
[100,103,0,101,99,106,101,114,104,105],
[107,105,109,0,106,105,103,106,102,109],
[108,112,111,104,0,100,108,110,99,107],
[100,109,104,105,110,0,109,107,107,109],
[107,107,109,107,102,101,0,116,104,109],
[99,99,96,104,100,103,94,0,94,95],
[105,107,106,108,111,103,106,116,0,108],
[99,107,105,101,103,101,101,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,110,103,111,93,101,109,95],
[98,0,101,93,95,101,94,93,105,94],
[105,109,0,117,103,113,108,104,112,107],
[100,117,93,0,99,91,96,100,94,97],
[107,115,107,111,0,99,103,107,100,100],
[99,109,97,119,111,0,96,93,98,95],
[117,116,102,114,107,114,0,113,102,105],
[109,117,106,110,103,117,97,0,106,105],
[101,105,98,116,110,112,108,104,0,96],
[115,116,103,113,110,115,105,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,112,83,103,108,98,105,109,105],
[118,0,116,99,104,131,111,122,123,135],
[98,94,0,80,89,105,104,98,85,105],
[127,111,130,0,114,127,103,112,116,132],
[107,106,121,96,0,132,113,105,106,120],
[102,79,105,83,78,0,85,102,103,100],
[112,99,106,107,97,125,0,115,107,131],
[105,88,112,98,105,108,95,0,108,115],
[101,87,125,94,104,107,103,102,0,116],
[105,75,105,78,90,110,79,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,104,118,96,97,96,98,115],
[97,0,106,110,119,96,104,96,109,119],
[108,104,0,115,129,110,110,103,115,109],
[106,100,95,0,115,93,105,101,98,107],
[92,91,81,95,0,84,93,86,100,95],
[114,114,100,117,126,0,110,108,105,121],
[113,106,100,105,117,100,0,99,105,110],
[114,114,107,109,124,102,111,0,121,115],
[112,101,95,112,110,105,105,89,0,104],
[95,91,101,103,115,89,100,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,124,106,115,116,107,117,96,97],
[80,0,128,106,118,109,99,126,102,107],
[86,82,0,77,101,86,84,92,84,80],
[104,104,133,0,144,111,124,143,106,99],
[95,92,109,66,0,86,85,92,82,76],
[94,101,124,99,124,0,97,122,89,85],
[103,111,126,86,125,113,0,124,105,116],
[93,84,118,67,118,88,86,0,84,69],
[114,108,126,104,128,121,105,126,0,92],
[113,103,130,111,134,125,94,141,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,112,123,99,101,106,120,108],
[95,0,79,98,102,88,91,98,98,90],
[115,131,0,119,110,109,105,120,126,109],
[98,112,91,0,122,104,102,109,107,111],
[87,108,100,88,0,86,96,97,114,95],
[111,122,101,106,124,0,114,112,111,113],
[109,119,105,108,114,96,0,105,114,123],
[104,112,90,101,113,98,105,0,112,106],
[90,112,84,103,96,99,96,98,0,96],
[102,120,101,99,115,97,87,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,94,103,100,95,99,101,97],
[117,0,111,104,100,110,106,104,104,116],
[121,99,0,108,111,105,109,102,96,104],
[116,106,102,0,111,109,98,98,105,105],
[107,110,99,99,0,109,98,111,109,110],
[110,100,105,101,101,0,103,99,102,103],
[115,104,101,112,112,107,0,105,109,124],
[111,106,108,112,99,111,105,0,114,97],
[109,106,114,105,101,108,101,96,0,103],
[113,94,106,105,100,107,86,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,100,89,116,109,100,107,86],
[102,0,97,96,95,105,116,97,110,102],
[117,113,0,99,105,130,116,109,114,105],
[110,114,111,0,96,108,126,115,112,114],
[121,115,105,114,0,133,129,103,106,108],
[94,105,80,102,77,0,100,81,94,85],
[101,94,94,84,81,110,0,79,86,84],
[110,113,101,95,107,129,131,0,114,98],
[103,100,96,98,104,116,124,96,0,107],
[124,108,105,96,102,125,126,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,106,105,102,99,111,109,97],
[109,0,105,106,115,104,96,101,101,108],
[106,105,0,104,107,102,114,109,109,110],
[104,104,106,0,107,115,126,110,115,99],
[105,95,103,103,0,95,103,104,104,108],
[108,106,108,95,115,0,103,104,112,100],
[111,114,96,84,107,107,0,108,113,105],
[99,109,101,100,106,106,102,0,114,105],
[101,109,101,95,106,98,97,96,0,103],
[113,102,100,111,102,110,105,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,108,96,95,112,96,104,109],
[107,0,108,111,104,95,108,100,108,110],
[109,102,0,117,111,91,121,103,102,111],
[102,99,93,0,96,106,104,95,92,104],
[114,106,99,114,0,105,112,93,97,113],
[115,115,119,104,105,0,114,107,114,111],
[98,102,89,106,98,96,0,97,97,89],
[114,110,107,115,117,103,113,0,117,131],
[106,102,108,118,113,96,113,93,0,115],
[101,100,99,106,97,99,121,79,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,75,108,125,113,95,76,65,108],
[134,0,89,126,125,128,122,72,105,116],
[135,121,0,144,137,132,136,118,101,137],
[102,84,66,0,87,110,101,70,78,102],
[85,85,73,123,0,125,101,87,88,93],
[97,82,78,100,85,0,131,68,66,97],
[115,88,74,109,109,79,0,61,73,83],
[134,138,92,140,123,142,149,0,107,117],
[145,105,109,132,122,144,137,103,0,131],
[102,94,73,108,117,113,127,93,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,106,99,99,110,111,107,109],
[100,0,106,96,100,100,103,94,101,99],
[99,104,0,104,99,101,106,104,103,112],
[104,114,106,0,115,108,108,115,110,113],
[111,110,111,95,0,103,102,105,103,108],
[111,110,109,102,107,0,106,102,103,107],
[100,107,104,102,108,104,0,110,111,105],
[99,116,106,95,105,108,100,0,106,106],
[103,109,107,100,107,107,99,104,0,101],
[101,111,98,97,102,103,105,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,89,82,94,97,113,84,101,92],
[125,0,110,103,107,112,120,98,112,100],
[121,100,0,98,108,109,129,104,113,108],
[128,107,112,0,114,111,134,109,114,101],
[116,103,102,96,0,108,114,111,113,106],
[113,98,101,99,102,0,111,119,94,94],
[97,90,81,76,96,99,0,101,94,90],
[126,112,106,101,99,91,109,0,117,93],
[109,98,97,96,97,116,116,93,0,94],
[118,110,102,109,104,116,120,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,47,69,69,63,98,44,90],
[138,0,101,104,110,134,137,111,74,92],
[149,109,0,94,106,103,135,119,113,128],
[163,106,116,0,92,141,143,112,120,129],
[141,100,104,118,0,129,145,100,106,116],
[141,76,107,69,81,0,91,83,81,117],
[147,73,75,67,65,119,0,88,56,72],
[112,99,91,98,110,127,122,0,102,116],
[166,136,97,90,104,129,154,108,0,92],
[120,118,82,81,94,93,138,94,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,103,108,95,100,98,107,102],
[116,0,98,117,118,111,113,105,126,103],
[117,112,0,117,118,103,105,110,116,117],
[107,93,93,0,106,99,102,90,107,98],
[102,92,92,104,0,97,98,96,101,93],
[115,99,107,111,113,0,101,104,112,99],
[110,97,105,108,112,109,0,102,117,104],
[112,105,100,120,114,106,108,0,125,104],
[103,84,94,103,109,98,93,85,0,98],
[108,107,93,112,117,111,106,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,107,104,102,97,98,92,110],
[104,0,106,113,108,96,101,107,100,100],
[110,104,0,116,96,103,112,102,103,114],
[103,97,94,0,91,99,100,102,103,109],
[106,102,114,119,0,113,102,109,109,113],
[108,114,107,111,97,0,105,109,95,109],
[113,109,98,110,108,105,0,111,111,115],
[112,103,108,108,101,101,99,0,105,103],
[118,110,107,107,101,115,99,105,0,109],
[100,110,96,101,97,101,95,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,101,87,118,86,94,97,94,100],
[133,0,116,105,124,105,107,115,105,117],
[109,94,0,95,93,94,81,98,94,109],
[123,105,115,0,125,104,94,100,96,112],
[92,86,117,85,0,96,88,98,98,96],
[124,105,116,106,114,0,91,110,109,117],
[116,103,129,116,122,119,0,119,118,105],
[113,95,112,110,112,100,91,0,100,101],
[116,105,116,114,112,101,92,110,0,104],
[110,93,101,98,114,93,105,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,95,118,116,101,94,69,124],
[96,0,90,95,93,118,103,91,102,136],
[105,120,0,99,102,110,99,82,92,110],
[115,115,111,0,93,128,111,119,123,128],
[92,117,108,117,0,133,113,113,106,120],
[94,92,100,82,77,0,111,114,84,106],
[109,107,111,99,97,99,0,100,102,106],
[116,119,128,91,97,96,110,0,89,113],
[141,108,118,87,104,126,108,121,0,136],
[86,74,100,82,90,104,104,97,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,87,93,103,78,94,95,104,92],
[93,0,101,70,95,79,88,75,60,76],
[123,109,0,94,114,92,96,113,103,100],
[117,140,116,0,111,68,104,83,93,113],
[107,115,96,99,0,78,126,93,69,109],
[132,131,118,142,132,0,108,99,124,121],
[116,122,114,106,84,102,0,94,108,109],
[115,135,97,127,117,111,116,0,104,117],
[106,150,107,117,141,86,102,106,0,107],
[118,134,110,97,101,89,101,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,91,111,93,132,94,112,90],
[99,0,95,80,107,89,118,98,88,92],
[114,115,0,89,106,86,119,80,101,84],
[119,130,121,0,121,100,136,98,102,101],
[99,103,104,89,0,94,112,97,102,91],
[117,121,124,110,116,0,136,119,104,103],
[78,92,91,74,98,74,0,63,73,60],
[116,112,130,112,113,91,147,0,105,106],
[98,122,109,108,108,106,137,105,0,93],
[120,118,126,109,119,107,150,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,86,122,121,120,123,197,194,134],
[63,0,83,92,111,107,112,168,139,139],
[124,127,0,98,104,126,138,154,172,125],
[88,118,112,0,118,112,113,160,157,111],
[89,99,106,92,0,140,80,140,165,133],
[90,103,84,98,70,0,102,119,148,85],
[87,98,72,97,130,108,0,147,149,122],
[13,42,56,50,70,91,63,0,125,73],
[16,71,38,53,45,62,61,85,0,76],
[76,71,85,99,77,125,88,137,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,108,117,109,120,104,94,120,112],
[88,0,94,103,91,101,91,88,92,101],
[102,116,0,118,117,127,106,111,129,134],
[93,107,92,0,99,87,109,67,111,109],
[101,119,93,111,0,91,106,69,137,128],
[90,109,83,123,119,0,96,107,115,119],
[106,119,104,101,104,114,0,89,80,102],
[116,122,99,143,141,103,121,0,138,157],
[90,118,81,99,73,95,130,72,0,114],
[98,109,76,101,82,91,108,53,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,98,129,83,97,129,133,117,114],
[23,0,70,66,81,83,87,67,91,120],
[112,140,0,103,109,120,157,141,68,158],
[81,144,107,0,118,98,130,121,101,167],
[127,129,101,92,0,108,116,95,121,140],
[113,127,90,112,102,0,119,110,149,170],
[81,123,53,80,94,91,0,29,102,126],
[77,143,69,89,115,100,181,0,126,129],
[93,119,142,109,89,61,108,84,0,121],
[96,90,52,43,70,40,84,81,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,121,131,104,80,26,123,104,118],
[159,0,100,103,111,102,97,102,102,133],
[89,110,0,179,84,84,82,146,84,155],
[79,107,31,0,59,0,57,135,92,112],
[106,99,126,151,0,49,106,141,182,139],
[130,108,126,210,161,0,79,162,191,139],
[184,113,128,153,104,131,0,124,153,184],
[87,108,64,75,69,48,86,0,87,106],
[106,108,126,118,28,19,57,123,0,105],
[92,77,55,98,71,71,26,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,105,90,103,121,101,103,112],
[102,0,102,97,96,108,109,99,109,103],
[110,108,0,96,94,114,115,105,121,106],
[105,113,114,0,102,100,115,93,120,102],
[120,114,116,108,0,100,120,100,110,113],
[107,102,96,110,110,0,122,101,104,104],
[89,101,95,95,90,88,0,89,101,96],
[109,111,105,117,110,109,121,0,118,109],
[107,101,89,90,100,106,109,92,0,102],
[98,107,104,108,97,106,114,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,129,112,101,122,107,105,121,99],
[102,0,117,115,116,110,103,115,124,102],
[81,93,0,94,103,98,104,84,120,97],
[98,95,116,0,90,104,95,89,112,83],
[109,94,107,120,0,102,111,108,114,114],
[88,100,112,106,108,0,94,107,115,93],
[103,107,106,115,99,116,0,117,118,99],
[105,95,126,121,102,103,93,0,118,106],
[89,86,90,98,96,95,92,92,0,89],
[111,108,113,127,96,117,111,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,109,98,100,98,100,109,115],
[101,0,100,117,101,99,95,111,115,100],
[117,110,0,124,117,110,104,111,124,126],
[101,93,86,0,100,97,99,112,94,93],
[112,109,93,110,0,112,102,104,116,118],
[110,111,100,113,98,0,101,121,109,110],
[112,115,106,111,108,109,0,114,103,106],
[110,99,99,98,106,89,96,0,100,105],
[101,95,86,116,94,101,107,110,0,103],
[95,110,84,117,92,100,104,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,74,104,85,191,74,178,178,0],
[106,0,106,125,106,106,74,106,106,106],
[136,104,0,136,117,191,85,104,178,32],
[106,85,74,0,117,191,74,159,159,106],
[125,104,93,93,0,210,74,178,93,93],
[19,104,19,19,0,0,0,19,19,19],
[136,136,125,136,136,210,0,210,210,51],
[32,104,106,51,32,191,0,0,125,32],
[32,104,32,51,117,191,0,85,0,32],
[210,104,178,104,117,191,159,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,130,106,129,119,110,113,110],
[100,0,115,104,109,109,103,106,111,102],
[105,95,0,109,98,85,87,78,97,78],
[80,106,101,0,97,98,98,106,90,102],
[104,101,112,113,0,124,124,105,90,121],
[81,101,125,112,86,0,111,105,109,93],
[91,107,123,112,86,99,0,106,104,120],
[100,104,132,104,105,105,104,0,117,118],
[97,99,113,120,120,101,106,93,0,99],
[100,108,132,108,89,117,90,92,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,101,101,95,96,95,95,108],
[96,0,105,94,97,101,103,91,107,105],
[106,105,0,94,112,100,106,106,107,100],
[109,116,116,0,109,117,114,119,98,109],
[109,113,98,101,0,102,106,94,95,101],
[115,109,110,93,108,0,107,108,96,113],
[114,107,104,96,104,103,0,105,99,109],
[115,119,104,91,116,102,105,0,99,107],
[115,103,103,112,115,114,111,111,0,113],
[102,105,110,101,109,97,101,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,106,107,103,112,104,114,102],
[102,0,93,101,110,99,110,101,112,105],
[104,117,0,110,112,121,124,104,117,106],
[104,109,100,0,111,115,112,102,111,102],
[103,100,98,99,0,110,108,100,109,102],
[107,111,89,95,100,0,107,103,102,102],
[98,100,86,98,102,103,0,103,91,98],
[106,109,106,108,110,107,107,0,111,101],
[96,98,93,99,101,108,119,99,0,92],
[108,105,104,108,108,108,112,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,103,114,114,115,110,98,123],
[108,0,119,112,112,122,112,112,105,115],
[94,91,0,99,103,118,107,117,107,108],
[107,98,111,0,108,109,109,104,104,111],
[96,98,107,102,0,116,107,112,94,113],
[96,88,92,101,94,0,98,107,91,100],
[95,98,103,101,103,112,0,112,101,116],
[100,98,93,106,98,103,98,0,96,102],
[112,105,103,106,116,119,109,114,0,123],
[87,95,102,99,97,110,94,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,72,86,76,75,70,77,78,76],
[126,0,82,109,98,81,101,103,96,105],
[138,128,0,122,115,99,113,113,105,114],
[124,101,88,0,98,95,99,113,91,94],
[134,112,95,112,0,96,95,119,100,84],
[135,129,111,115,114,0,98,118,105,115],
[140,109,97,111,115,112,0,111,107,112],
[133,107,97,97,91,92,99,0,82,93],
[132,114,105,119,110,105,103,128,0,108],
[134,105,96,116,126,95,98,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,108,111,109,106,102,103,110],
[103,0,108,104,106,106,103,105,99,111],
[101,102,0,99,112,102,107,111,115,114],
[102,106,111,0,100,107,106,108,109,107],
[99,104,98,110,0,119,110,105,109,121],
[101,104,108,103,91,0,110,111,96,115],
[104,107,103,104,100,100,0,102,107,102],
[108,105,99,102,105,99,108,0,101,112],
[107,111,95,101,101,114,103,109,0,112],
[100,99,96,103,89,95,108,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,87,108,106,89,89,122,111,105],
[101,0,93,98,91,73,100,115,89,92],
[123,117,0,115,106,108,115,119,104,117],
[102,112,95,0,88,101,98,121,96,99],
[104,119,104,122,0,117,94,123,107,109],
[121,137,102,109,93,0,119,121,118,112],
[121,110,95,112,116,91,0,116,104,122],
[88,95,91,89,87,89,94,0,98,81],
[99,121,106,114,103,92,106,112,0,100],
[105,118,93,111,101,98,88,129,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,106,107,107,104,102,113,98],
[110,0,104,105,111,107,101,112,110,98],
[101,106,0,117,107,98,102,111,105,107],
[104,105,93,0,110,100,100,103,108,90],
[103,99,103,100,0,99,114,101,102,104],
[103,103,112,110,111,0,117,107,107,100],
[106,109,108,110,96,93,0,97,115,86],
[108,98,99,107,109,103,113,0,114,101],
[97,100,105,102,108,103,95,96,0,90],
[112,112,103,120,106,110,124,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,103,106,103,102,86,114,108],
[115,0,106,106,102,117,108,104,123,123],
[115,104,0,99,102,93,100,106,114,115],
[107,104,111,0,105,96,100,87,108,117],
[104,108,108,105,0,111,106,99,115,120],
[107,93,117,114,99,0,103,94,103,107],
[108,102,110,110,104,107,0,101,109,110],
[124,106,104,123,111,116,109,0,108,117],
[96,87,96,102,95,107,101,102,0,105],
[102,87,95,93,90,103,100,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,84,104,92,109,132,105,98],
[100,0,99,107,98,120,138,138,122,105],
[91,111,0,114,104,112,112,123,97,104],
[126,103,96,0,100,109,127,118,126,94],
[106,112,106,110,0,118,121,120,119,99],
[118,90,98,101,92,0,125,112,96,68],
[101,72,98,83,89,85,0,101,92,75],
[78,72,87,92,90,98,109,0,103,96],
[105,88,113,84,91,114,118,107,0,89],
[112,105,106,116,111,142,135,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,109,97,109,100,103,113,91,110],
[142,0,104,127,159,131,145,150,113,161],
[101,106,0,103,125,133,121,101,76,112],
[113,83,107,0,139,127,121,96,70,108],
[101,51,85,71,0,113,55,92,55,121],
[110,79,77,83,97,0,88,89,76,98],
[107,65,89,89,155,122,0,112,60,105],
[97,60,109,114,118,121,98,0,60,101],
[119,97,134,140,155,134,150,150,0,156],
[100,49,98,102,89,112,105,109,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,103,101,100,94,101,95,113],
[119,0,113,119,109,105,107,112,106,125],
[109,97,0,104,107,98,94,103,101,121],
[107,91,106,0,101,101,98,99,103,105],
[109,101,103,109,0,98,112,104,101,112],
[110,105,112,109,112,0,106,104,104,122],
[116,103,116,112,98,104,0,111,113,116],
[109,98,107,111,106,106,99,0,107,110],
[115,104,109,107,109,106,97,103,0,112],
[97,85,89,105,98,88,94,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,86,106,106,108,97,99,104,122],
[90,0,100,81,100,97,83,94,87,88],
[124,110,0,98,106,106,85,110,100,98],
[104,129,112,0,100,106,92,95,110,110],
[104,110,104,110,0,107,105,91,77,109],
[102,113,104,104,103,0,89,91,102,107],
[113,127,125,118,105,121,0,117,107,117],
[111,116,100,115,119,119,93,0,118,103],
[106,123,110,100,133,108,103,92,0,119],
[88,122,112,100,101,103,93,107,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,89,110,92,76,97,88,92,89],
[119,0,105,112,104,95,101,103,104,107],
[121,105,0,121,105,99,112,100,114,109],
[100,98,89,0,101,102,97,108,118,86],
[118,106,105,109,0,114,106,121,120,109],
[134,115,111,108,96,0,103,91,110,88],
[113,109,98,113,104,107,0,93,107,103],
[122,107,110,102,89,119,117,0,111,106],
[118,106,96,92,90,100,103,99,0,95],
[121,103,101,124,101,122,107,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,100,98,108,92,109,103,117],
[104,0,106,111,99,109,98,118,104,97],
[108,104,0,106,99,107,95,114,100,105],
[110,99,104,0,107,109,106,112,108,98],
[112,111,111,103,0,107,96,118,112,101],
[102,101,103,101,103,0,88,106,101,110],
[118,112,115,104,114,122,0,123,114,118],
[101,92,96,98,92,104,87,0,95,92],
[107,106,110,102,98,109,96,115,0,103],
[93,113,105,112,109,100,92,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,141,120,111,129,109,120,133,112],
[113,0,131,112,106,168,126,115,150,84],
[69,79,0,72,78,67,72,77,97,84],
[90,98,138,0,91,128,115,99,123,112],
[99,104,132,119,0,114,108,112,123,115],
[81,42,143,82,96,0,90,87,85,92],
[101,84,138,95,102,120,0,91,114,111],
[90,95,133,111,98,123,119,0,116,106],
[77,60,113,87,87,125,96,94,0,100],
[98,126,126,98,95,118,99,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,96,134,103,123,101,113,108],
[114,0,112,116,137,121,148,91,140,114],
[103,98,0,130,136,114,127,81,119,116],
[114,94,80,0,123,122,130,90,117,134],
[76,73,74,87,0,102,103,72,83,90],
[107,89,96,88,108,0,118,106,112,95],
[87,62,83,80,107,92,0,76,89,83],
[109,119,129,120,138,104,134,0,142,129],
[97,70,91,93,127,98,121,68,0,113],
[102,96,94,76,120,115,127,81,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,139,139,91,64,120,94,97,102],
[81,0,119,121,60,67,103,69,79,69],
[71,91,0,103,66,71,106,88,85,73],
[71,89,107,0,87,68,112,57,101,92],
[119,150,144,123,0,101,104,126,129,128],
[146,143,139,142,109,0,131,103,116,124],
[90,107,104,98,106,79,0,104,107,104],
[116,141,122,153,84,107,106,0,114,93],
[113,131,125,109,81,94,103,96,0,108],
[108,141,137,118,82,86,106,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,122,90,78,101,89,107,97,92],
[121,0,130,122,97,107,122,144,114,107],
[88,80,0,92,81,113,100,99,81,100],
[120,88,118,0,98,98,120,129,89,115],
[132,113,129,112,0,113,115,130,100,112],
[109,103,97,112,97,0,109,98,103,93],
[121,88,110,90,95,101,0,105,96,70],
[103,66,111,81,80,112,105,0,71,79],
[113,96,129,121,110,107,114,139,0,99],
[118,103,110,95,98,117,140,131,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,83,87,83,101,91,95,96,100],
[127,0,98,109,105,110,103,107,104,102],
[127,112,0,116,101,116,113,114,121,114],
[123,101,94,0,101,100,106,107,112,107],
[127,105,109,109,0,119,113,116,110,107],
[109,100,94,110,91,0,105,103,104,96],
[119,107,97,104,97,105,0,108,111,108],
[115,103,96,103,94,107,102,0,110,101],
[114,106,89,98,100,106,99,100,0,97],
[110,108,96,103,103,114,102,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,104,95,100,101,101,109,92,110],
[122,0,124,106,109,119,117,111,113,99],
[106,86,0,100,99,100,105,102,95,94],
[115,104,110,0,103,113,121,112,101,104],
[110,101,111,107,0,106,99,109,104,98],
[109,91,110,97,104,0,102,110,105,100],
[109,93,105,89,111,108,0,98,110,94],
[101,99,108,98,101,100,112,0,112,105],
[118,97,115,109,106,105,100,98,0,100],
[100,111,116,106,112,110,116,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,108,94,98,104,98,108,96],
[105,0,103,96,108,91,103,86,102,111],
[105,107,0,103,105,110,110,98,100,105],
[102,114,107,0,95,104,110,96,100,98],
[116,102,105,115,0,100,92,95,94,114],
[112,119,100,106,110,0,108,111,107,106],
[106,107,100,100,118,102,0,108,97,104],
[112,124,112,114,115,99,102,0,101,111],
[102,108,110,110,116,103,113,109,0,94],
[114,99,105,112,96,104,106,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,81,82,95,77,94,80,86,65],
[118,0,97,100,96,95,114,106,96,89],
[129,113,0,103,101,98,124,120,122,103],
[128,110,107,0,107,112,105,102,117,100],
[115,114,109,103,0,90,86,98,90,103],
[133,115,112,98,120,0,112,100,123,100],
[116,96,86,105,124,98,0,105,98,107],
[130,104,90,108,112,110,105,0,97,94],
[124,114,88,93,120,87,112,113,0,89],
[145,121,107,110,107,110,103,116,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,88,88,83,107,88,89,93,98],
[138,0,113,123,124,126,104,114,111,144],
[122,97,0,114,92,115,91,99,124,134],
[122,87,96,0,102,94,83,101,110,121],
[127,86,118,108,0,105,106,97,122,143],
[103,84,95,116,105,0,98,105,105,131],
[122,106,119,127,104,112,0,109,115,121],
[121,96,111,109,113,105,101,0,108,143],
[117,99,86,100,88,105,95,102,0,101],
[112,66,76,89,67,79,89,67,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,122,110,105,123,96,100,117,136],
[117,0,131,100,97,122,89,87,102,130],
[88,79,0,109,88,117,94,93,102,111],
[100,110,101,0,93,132,107,108,119,112],
[105,113,122,117,0,126,102,114,124,131],
[87,88,93,78,84,0,70,86,76,103],
[114,121,116,103,108,140,0,119,104,112],
[110,123,117,102,96,124,91,0,98,114],
[93,108,108,91,86,134,106,112,0,116],
[74,80,99,98,79,107,98,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,92,113,107,114,110,108,116],
[106,0,105,99,107,92,116,116,110,112],
[104,105,0,104,113,104,116,112,100,107],
[118,111,106,0,121,100,110,117,113,105],
[97,103,97,89,0,97,114,106,102,94],
[103,118,106,110,113,0,111,117,107,119],
[96,94,94,100,96,99,0,99,96,99],
[100,94,98,93,104,93,111,0,92,103],
[102,100,110,97,108,103,114,118,0,117],
[94,98,103,105,116,91,111,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,108,102,108,109,121,116,115],
[98,0,81,92,85,113,103,113,109,103],
[103,129,0,112,96,111,109,124,114,115],
[102,118,98,0,105,112,104,124,125,112],
[108,125,114,105,0,120,124,121,114,117],
[102,97,99,98,90,0,97,118,103,92],
[101,107,101,106,86,113,0,116,104,110],
[89,97,86,86,89,92,94,0,106,96],
[94,101,96,85,96,107,106,104,0,110],
[95,107,95,98,93,118,100,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,82,86,77,78,86,97,53,97],
[110,0,129,114,106,114,116,86,66,98],
[128,81,0,92,79,91,90,92,76,115],
[124,96,118,0,76,86,114,75,58,106],
[133,104,131,134,0,112,104,103,63,115],
[132,96,119,124,98,0,110,112,108,106],
[124,94,120,96,106,100,0,74,57,120],
[113,124,118,135,107,98,136,0,69,105],
[157,144,134,152,147,102,153,141,0,161],
[113,112,95,104,95,104,90,105,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,89,99,105,101,95,100,90],
[106,0,85,93,77,94,97,94,88,95],
[98,125,0,90,107,98,107,104,92,90],
[121,117,120,0,105,113,119,99,111,84],
[111,133,103,105,0,111,110,117,88,103],
[105,116,112,97,99,0,103,114,92,90],
[109,113,103,91,100,107,0,109,102,97],
[115,116,106,111,93,96,101,0,107,108],
[110,122,118,99,122,118,108,103,0,105],
[120,115,120,126,107,120,113,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,78,116,109,114,69,65,100,111],
[110,0,97,124,113,120,80,94,101,110],
[132,113,0,124,122,142,110,97,129,123],
[94,86,86,0,86,96,71,84,105,96],
[101,97,88,124,0,109,96,110,102,99],
[96,90,68,114,101,0,82,90,87,117],
[141,130,100,139,114,128,0,116,117,120],
[145,116,113,126,100,120,94,0,128,123],
[110,109,81,105,108,123,93,82,0,95],
[99,100,87,114,111,93,90,87,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,118,113,114,104,101,114,113,105],
[96,0,113,113,113,109,107,112,99,106],
[92,97,0,99,109,110,106,109,110,95],
[97,97,111,0,106,87,107,104,95,108],
[96,97,101,104,0,101,101,124,104,111],
[106,101,100,123,109,0,98,117,121,114],
[109,103,104,103,109,112,0,113,106,109],
[96,98,101,106,86,93,97,0,98,96],
[97,111,100,115,106,89,104,112,0,96],
[105,104,115,102,99,96,101,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,88,127,103,91,100,106,90,88],
[114,0,122,115,109,85,137,105,78,120],
[122,88,0,113,98,84,101,96,95,92],
[83,95,97,0,89,89,102,78,80,83],
[107,101,112,121,0,88,105,96,94,72],
[119,125,126,121,122,0,120,108,95,98],
[110,73,109,108,105,90,0,91,88,79],
[104,105,114,132,114,102,119,0,95,82],
[120,132,115,130,116,115,122,115,0,100],
[122,90,118,127,138,112,131,128,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,109,113,96,93,107,107,109],
[106,0,97,103,96,112,91,100,99,95],
[109,113,0,118,104,97,104,110,102,100],
[101,107,92,0,101,92,103,97,87,97],
[97,114,106,109,0,96,102,109,104,103],
[114,98,113,118,114,0,111,112,108,110],
[117,119,106,107,108,99,0,108,89,105],
[103,110,100,113,101,98,102,0,97,103],
[103,111,108,123,106,102,121,113,0,105],
[101,115,110,113,107,100,105,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,111,95,107,108,96,94,88],
[103,0,93,104,100,93,92,80,89,83],
[116,117,0,112,111,110,102,112,93,104],
[99,106,98,0,87,90,95,97,96,85],
[115,110,99,123,0,108,97,112,107,80],
[103,117,100,120,102,0,104,118,103,81],
[102,118,108,115,113,106,0,107,100,84],
[114,130,98,113,98,92,103,0,100,100],
[116,121,117,114,103,107,110,110,0,110],
[122,127,106,125,130,129,126,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,96,94,90,104,94,87,98],
[106,0,96,107,93,93,99,101,104,97],
[123,114,0,105,114,110,127,103,124,124],
[114,103,105,0,109,108,118,105,103,109],
[116,117,96,101,0,100,107,105,111,103],
[120,117,100,102,110,0,117,113,114,111],
[106,111,83,92,103,93,0,95,106,100],
[116,109,107,105,105,97,115,0,109,125],
[123,106,86,107,99,96,104,101,0,103],
[112,113,86,101,107,99,110,85,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,95,120,103,91,106,115,101],
[111,0,110,110,116,104,106,116,111,111],
[101,100,0,101,119,106,98,109,102,109],
[115,100,109,0,111,118,100,111,113,100],
[90,94,91,99,0,89,100,118,107,103],
[107,106,104,92,121,0,99,94,102,93],
[119,104,112,110,110,111,0,116,105,100],
[104,94,101,99,92,116,94,0,108,99],
[95,99,108,97,103,108,105,102,0,105],
[109,99,101,110,107,117,110,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,146,95,44,95,59,112,114,126],
[97,0,123,64,81,143,76,69,81,123],
[64,87,0,63,32,83,53,68,98,101],
[115,146,147,0,97,108,94,36,113,140],
[166,129,178,113,0,91,99,127,149,140],
[115,67,127,102,119,0,121,59,98,177],
[151,134,157,116,111,89,0,130,128,176],
[98,141,142,174,83,151,80,0,111,159],
[96,129,112,97,61,112,82,99,0,123],
[84,87,109,70,70,33,34,51,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,106,85,127,67,103,129,116],
[103,0,129,104,90,129,92,108,107,111],
[120,81,0,88,93,99,70,83,93,85],
[104,106,122,0,91,124,103,91,110,120],
[125,120,117,119,0,132,72,86,121,126],
[83,81,111,86,78,0,66,84,97,115],
[143,118,140,107,138,144,0,102,159,126],
[107,102,127,119,124,126,108,0,121,118],
[81,103,117,100,89,113,51,89,0,116],
[94,99,125,90,84,95,84,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,103,110,108,88,108,110,96],
[114,0,128,100,98,108,100,120,117,109],
[97,82,0,110,103,93,106,102,109,109],
[107,110,100,0,103,106,97,100,114,102],
[100,112,107,107,0,99,100,101,118,98],
[102,102,117,104,111,0,106,108,109,117],
[122,110,104,113,110,104,0,130,119,120],
[102,90,108,110,109,102,80,0,112,116],
[100,93,101,96,92,101,91,98,0,104],
[114,101,101,108,112,93,90,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,105,104,100,97,104,108,104],
[107,0,107,103,102,103,96,101,116,105],
[111,103,0,94,103,104,88,99,105,98],
[105,107,116,0,122,113,99,113,123,110],
[106,108,107,88,0,95,102,96,110,93],
[110,107,106,97,115,0,94,108,114,106],
[113,114,122,111,108,116,0,113,121,104],
[106,109,111,97,114,102,97,0,115,101],
[102,94,105,87,100,96,89,95,0,99],
[106,105,112,100,117,104,106,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,97,105,118,90,103,104,101],
[106,0,93,100,108,109,95,98,101,93],
[107,117,0,102,118,130,107,101,101,106],
[113,110,108,0,113,113,111,119,97,103],
[105,102,92,97,0,114,99,106,93,97],
[92,101,80,97,96,0,92,97,87,94],
[120,115,103,99,111,118,0,115,95,120],
[107,112,109,91,104,113,95,0,109,105],
[106,109,109,113,117,123,115,101,0,101],
[109,117,104,107,113,116,90,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,93,111,98,98,104,100,98],
[106,0,113,84,82,95,96,108,79,92],
[97,97,0,78,82,94,85,97,73,82],
[117,126,132,0,94,110,128,122,105,113],
[99,128,128,116,0,87,106,122,106,107],
[112,115,116,100,123,0,99,114,117,107],
[112,114,125,82,104,111,0,111,93,102],
[106,102,113,88,88,96,99,0,99,99],
[110,131,137,105,104,93,117,111,0,123],
[112,118,128,97,103,103,108,111,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,85,92,87,93,108,85,111],
[102,0,90,88,81,82,85,94,95,120],
[118,120,0,93,97,100,109,110,109,107],
[125,122,117,0,104,117,96,122,113,109],
[118,129,113,106,0,104,113,113,118,118],
[123,128,110,93,106,0,118,115,115,129],
[117,125,101,114,97,92,0,111,112,118],
[102,116,100,88,97,95,99,0,104,109],
[125,115,101,97,92,95,98,106,0,112],
[99,90,103,101,92,81,92,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,142,109,113,129,107,88,113,127],
[109,0,113,110,99,116,95,69,78,91],
[68,97,0,108,92,148,110,108,105,108],
[101,100,102,0,120,96,111,56,107,73],
[97,111,118,90,0,107,144,78,88,96],
[81,94,62,114,103,0,104,94,115,117],
[103,115,100,99,66,106,0,72,97,102],
[122,141,102,154,132,116,138,0,122,147],
[97,132,105,103,122,95,113,88,0,92],
[83,119,102,137,114,93,108,63,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,100,127,103,95,112,100,114],
[98,0,105,111,121,85,111,105,98,116],
[111,105,0,107,122,117,102,99,116,117],
[110,99,103,0,140,101,104,103,115,113],
[83,89,88,70,0,84,76,105,87,107],
[107,125,93,109,126,0,101,125,110,133],
[115,99,108,106,134,109,0,113,122,126],
[98,105,111,107,105,85,97,0,90,97],
[110,112,94,95,123,100,88,120,0,125],
[96,94,93,97,103,77,84,113,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,110,110,89,106,118,115,127],
[110,0,122,91,114,120,92,121,113,128],
[97,88,0,101,105,120,109,103,100,126],
[100,119,109,0,101,95,101,99,106,108],
[100,96,105,109,0,115,130,116,110,125],
[121,90,90,115,95,0,90,123,105,111],
[104,118,101,109,80,120,0,96,100,94],
[92,89,107,111,94,87,114,0,106,98],
[95,97,110,104,100,105,110,104,0,121],
[83,82,84,102,85,99,116,112,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,100,101,109,95,96,104,103],
[104,0,97,101,115,118,101,111,105,106],
[105,113,0,104,108,120,105,94,108,108],
[110,109,106,0,95,120,113,109,115,102],
[109,95,102,115,0,120,101,103,114,103],
[101,92,90,90,90,0,94,93,110,97],
[115,109,105,97,109,116,0,103,107,99],
[114,99,116,101,107,117,107,0,117,109],
[106,105,102,95,96,100,103,93,0,107],
[107,104,102,108,107,113,111,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,117,113,119,105,119,110,119,136],
[80,0,103,102,98,90,106,91,95,109],
[93,107,0,105,104,97,118,91,92,110],
[97,108,105,0,112,105,122,102,100,114],
[91,112,106,98,0,102,110,94,98,117],
[105,120,113,105,108,0,111,105,100,122],
[91,104,92,88,100,99,0,84,95,114],
[100,119,119,108,116,105,126,0,120,125],
[91,115,118,110,112,110,115,90,0,116],
[74,101,100,96,93,88,96,85,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,105,106,106,107,128,107,118],
[88,0,94,85,77,102,99,95,87,80],
[96,116,0,105,107,108,115,114,96,107],
[105,125,105,0,112,120,110,108,114,107],
[104,133,103,98,0,111,126,121,103,101],
[104,108,102,90,99,0,103,123,97,108],
[103,111,95,100,84,107,0,113,106,97],
[82,115,96,102,89,87,97,0,91,101],
[103,123,114,96,107,113,104,119,0,98],
[92,130,103,103,109,102,113,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,129,95,122,109,97,107,120],
[108,0,105,130,108,128,123,105,119,127],
[105,105,0,122,126,111,123,110,114,131],
[81,80,88,0,93,79,80,84,79,112],
[115,102,84,117,0,111,116,102,98,114],
[88,82,99,131,99,0,108,103,104,105],
[101,87,87,130,94,102,0,102,98,114],
[113,105,100,126,108,107,108,0,103,128],
[103,91,96,131,112,106,112,107,0,141],
[90,83,79,98,96,105,96,82,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,101,75,120,86,126,98,124,90],
[135,0,118,98,157,108,132,117,119,108],
[109,92,0,108,155,104,112,131,120,100],
[135,112,102,0,156,93,140,135,128,94],
[90,53,55,54,0,39,104,86,87,65],
[124,102,106,117,171,0,143,133,113,98],
[84,78,98,70,106,67,0,94,99,82],
[112,93,79,75,124,77,116,0,122,84],
[86,91,90,82,123,97,111,88,0,77],
[120,102,110,116,145,112,128,126,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,133,115,113,118,107,141,126],
[107,0,100,100,109,79,124,111,91,91],
[91,110,0,109,123,99,107,110,104,126],
[77,110,101,0,116,91,112,119,125,127],
[95,101,87,94,0,107,128,115,118,113],
[97,131,111,119,103,0,118,109,106,124],
[92,86,103,98,82,92,0,100,131,116],
[103,99,100,91,95,101,110,0,122,105],
[69,119,106,85,92,104,79,88,0,111],
[84,119,84,83,97,86,94,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,96,104,112,148,106,107,92],
[82,0,82,93,103,108,109,86,101,118],
[97,128,0,109,99,112,140,105,103,106],
[114,117,101,0,112,123,121,97,102,121],
[106,107,111,98,0,108,134,111,110,90],
[98,102,98,87,102,0,147,109,112,99],
[62,101,70,89,76,63,0,62,72,76],
[104,124,105,113,99,101,148,0,105,92],
[103,109,107,108,100,98,138,105,0,98],
[118,92,104,89,120,111,134,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,116,123,112,127,101,109,118],
[101,0,89,100,116,102,121,96,103,96],
[92,121,0,102,103,110,126,95,102,112],
[94,110,108,0,105,115,132,103,92,104],
[87,94,107,105,0,95,109,96,94,105],
[98,108,100,95,115,0,119,91,94,108],
[83,89,84,78,101,91,0,100,88,96],
[109,114,115,107,114,119,110,0,101,100],
[101,107,108,118,116,116,122,109,0,107],
[92,114,98,106,105,102,114,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,126,121,111,114,109,99,111],
[92,0,111,104,110,110,98,103,98,101],
[89,99,0,95,106,88,95,100,101,91],
[84,106,115,0,107,112,96,103,103,102],
[89,100,104,103,0,103,88,106,98,94],
[99,100,122,98,107,0,107,100,102,111],
[96,112,115,114,122,103,0,104,89,102],
[101,107,110,107,104,110,106,0,96,97],
[111,112,109,107,112,108,121,114,0,97],
[99,109,119,108,116,99,108,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,115,102,109,114,110,116,118],
[105,0,108,125,118,124,107,119,111,132],
[100,102,0,116,94,111,108,96,107,126],
[95,85,94,0,86,104,95,88,94,105],
[108,92,116,124,0,116,119,114,104,121],
[101,86,99,106,94,0,101,94,99,115],
[96,103,102,115,91,109,0,105,106,119],
[100,91,114,122,96,116,105,0,103,114],
[94,99,103,116,106,111,104,107,0,121],
[92,78,84,105,89,95,91,96,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,111,124,117,117,104,102,108],
[97,0,96,114,120,103,101,92,112,109],
[102,114,0,105,124,114,109,106,110,106],
[99,96,105,0,128,107,100,98,99,113],
[86,90,86,82,0,86,92,89,79,90],
[93,107,96,103,124,0,102,106,110,88],
[93,109,101,110,118,108,0,102,107,90],
[106,118,104,112,121,104,108,0,108,103],
[108,98,100,111,131,100,103,102,0,95],
[102,101,104,97,120,122,120,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,102,122,93,103,113,105,114],
[96,0,90,104,108,83,101,106,90,92],
[107,120,0,114,134,104,114,121,108,109],
[108,106,96,0,111,96,108,116,98,106],
[88,102,76,99,0,81,96,107,88,100],
[117,127,106,114,129,0,112,124,102,112],
[107,109,96,102,114,98,0,114,101,104],
[97,104,89,94,103,86,96,0,98,108],
[105,120,102,112,122,108,109,112,0,120],
[96,118,101,104,110,98,106,102,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,109,87,69,122,127,110,73],
[113,0,130,90,88,81,86,103,68,97],
[111,80,0,91,77,95,97,105,84,103],
[101,120,119,0,71,70,120,101,95,89],
[123,122,133,139,0,109,103,155,89,132],
[141,129,115,140,101,0,133,138,77,120],
[88,124,113,90,107,77,0,119,72,85],
[83,107,105,109,55,72,91,0,74,99],
[100,142,126,115,121,133,138,136,0,110],
[137,113,107,121,78,90,125,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,121,120,112,116,117,113,105],
[102,0,105,133,91,124,114,108,108,111],
[102,105,0,118,113,116,133,120,127,112],
[89,77,92,0,99,110,95,100,97,91],
[90,119,97,111,0,129,106,120,107,102],
[98,86,94,100,81,0,113,96,91,87],
[94,96,77,115,104,97,0,101,102,85],
[93,102,90,110,90,114,109,0,94,87],
[97,102,83,113,103,119,108,116,0,105],
[105,99,98,119,108,123,125,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,105,104,109,100,97,105,104],
[103,0,108,113,100,126,112,107,112,115],
[109,102,0,112,115,120,107,101,118,103],
[105,97,98,0,102,126,103,100,116,102],
[106,110,95,108,0,123,108,98,114,109],
[101,84,90,84,87,0,87,89,104,94],
[110,98,103,107,102,123,0,98,113,107],
[113,103,109,110,112,121,112,0,111,112],
[105,98,92,94,96,106,97,99,0,97],
[106,95,107,108,101,116,103,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,107,110,115,113,124,117,111],
[97,0,105,103,116,113,108,104,111,105],
[113,105,0,106,100,112,111,105,104,98],
[103,107,104,0,109,116,109,101,103,98],
[100,94,110,101,0,105,98,96,107,100],
[95,97,98,94,105,0,105,100,107,96],
[97,102,99,101,112,105,0,97,111,90],
[86,106,105,109,114,110,113,0,106,94],
[93,99,106,107,103,103,99,104,0,105],
[99,105,112,112,110,114,120,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,130,112,100,96,106,96,127,105],
[77,0,143,118,97,67,93,123,115,89],
[80,67,0,107,86,71,97,79,119,95],
[98,92,103,0,78,85,84,83,93,96],
[110,113,124,132,0,100,97,106,119,107],
[114,143,139,125,110,0,98,105,139,105],
[104,117,113,126,113,112,0,98,114,109],
[114,87,131,127,104,105,112,0,147,136],
[83,95,91,117,91,71,96,63,0,103],
[105,121,115,114,103,105,101,74,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,79,96,92,82,88,99,92],
[119,0,87,94,99,75,95,101,116,107],
[119,123,0,98,104,106,110,105,114,131],
[131,116,112,0,108,105,115,116,131,113],
[114,111,106,102,0,95,103,117,117,98],
[118,135,104,105,115,0,117,125,113,131],
[128,115,100,95,107,93,0,104,116,124],
[122,109,105,94,93,85,106,0,118,107],
[111,94,96,79,93,97,94,92,0,91],
[118,103,79,97,112,79,86,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,86,83,126,107,93,118,128,129],
[107,0,111,125,141,87,99,132,125,137],
[124,99,0,90,116,78,98,119,107,118],
[127,85,120,0,109,79,107,95,111,120],
[84,69,94,101,0,88,84,116,81,96],
[103,123,132,131,122,0,101,126,135,131],
[117,111,112,103,126,109,0,129,102,135],
[92,78,91,115,94,84,81,0,82,113],
[82,85,103,99,129,75,108,128,0,115],
[81,73,92,90,114,79,75,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,104,102,111,118,102,104,101,114],
[83,0,97,101,115,107,80,106,104,99],
[106,113,0,115,129,121,94,106,104,100],
[108,109,95,0,119,114,98,101,98,103],
[99,95,81,91,0,102,81,89,96,97],
[92,103,89,96,108,0,103,91,97,93],
[108,130,116,112,129,107,0,119,110,105],
[106,104,104,109,121,119,91,0,113,97],
[109,106,106,112,114,113,100,97,0,97],
[96,111,110,107,113,117,105,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,97,74,92,47,27,43,77,152],
[125,0,85,85,81,85,84,100,85,99],
[113,125,0,152,118,124,105,105,143,152],
[136,125,58,0,91,122,38,38,73,137],
[118,129,92,119,0,92,118,118,91,92],
[163,125,86,88,118,0,87,64,122,137],
[183,126,105,172,92,123,0,54,112,152],
[167,110,105,172,92,146,156,0,167,160],
[133,125,67,137,119,88,98,43,0,99],
[58,111,58,73,118,73,58,50,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,105,97,94,107,100,99,107],
[109,0,97,106,102,108,108,111,106,103],
[106,113,0,106,104,107,105,111,99,107],
[105,104,104,0,112,105,103,115,106,110],
[113,108,106,98,0,104,104,102,101,112],
[116,102,103,105,106,0,111,111,107,106],
[103,102,105,107,106,99,0,102,104,111],
[110,99,99,95,108,99,108,0,96,99],
[111,104,111,104,109,103,106,114,0,117],
[103,107,103,100,98,104,99,111,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,110,103,106,99,98,109,101],
[111,0,119,113,106,112,105,104,121,129],
[93,91,0,93,82,86,97,86,105,100],
[100,97,117,0,107,99,104,94,113,106],
[107,104,128,103,0,99,106,111,118,110],
[104,98,124,111,111,0,117,107,114,118],
[111,105,113,106,104,93,0,104,121,111],
[112,106,124,116,99,103,106,0,121,113],
[101,89,105,97,92,96,89,89,0,96],
[109,81,110,104,100,92,99,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,101,114,112,112,117,90,109],
[113,0,108,90,117,117,114,117,106,114],
[109,102,0,93,108,112,116,108,88,117],
[109,120,117,0,107,111,116,108,94,121],
[96,93,102,103,0,103,110,98,96,98],
[98,93,98,99,107,0,109,91,83,94],
[98,96,94,94,100,101,0,95,79,93],
[93,93,102,102,112,119,115,0,87,99],
[120,104,122,116,114,127,131,123,0,126],
[101,96,93,89,112,116,117,111,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,94,90,100,95,106,99,96],
[98,0,96,94,98,93,94,91,92,97],
[103,114,0,97,109,102,97,92,109,116],
[116,116,113,0,112,114,103,106,111,109],
[120,112,101,98,0,98,100,106,102,105],
[110,117,108,96,112,0,97,108,97,111],
[115,116,113,107,110,113,0,119,102,115],
[104,119,118,104,104,102,91,0,104,110],
[111,118,101,99,108,113,108,106,0,110],
[114,113,94,101,105,99,95,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,117,103,100,104,104,100,103,101],
[115,0,109,96,110,105,97,100,90,103],
[93,101,0,111,105,117,96,86,91,104],
[107,114,99,0,102,115,112,106,112,119],
[110,100,105,108,0,114,113,96,99,101],
[106,105,93,95,96,0,100,93,93,105],
[106,113,114,98,97,110,0,110,102,99],
[110,110,124,104,114,117,100,0,109,123],
[107,120,119,98,111,117,108,101,0,116],
[109,107,106,91,109,105,111,87,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,111,158,113,133,129,111,102,132],
[82,0,76,102,108,112,113,85,107,119],
[99,134,0,132,98,120,136,121,123,124],
[52,108,78,0,88,115,106,97,78,105],
[97,102,112,122,0,101,125,97,102,100],
[77,98,90,95,109,0,122,105,110,134],
[81,97,74,104,85,88,0,65,106,118],
[99,125,89,113,113,105,145,0,100,100],
[108,103,87,132,108,100,104,110,0,115],
[78,91,86,105,110,76,92,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,111,96,108,98,96,104,93],
[103,0,97,108,101,104,99,98,102,100],
[104,113,0,112,104,104,105,100,112,107],
[99,102,98,0,103,98,101,100,116,100],
[114,109,106,107,0,107,107,105,117,95],
[102,106,106,112,103,0,110,114,118,109],
[112,111,105,109,103,100,0,104,111,102],
[114,112,110,110,105,96,106,0,116,104],
[106,108,98,94,93,92,99,94,0,97],
[117,110,103,110,115,101,108,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,105,155,127,119,134,102,134,144],
[119,0,106,152,120,116,114,102,159,123],
[105,104,0,131,89,113,108,108,122,89],
[55,58,79,0,111,85,89,87,102,93],
[83,90,121,99,0,112,98,110,113,109],
[91,94,97,125,98,0,83,96,119,124],
[76,96,102,121,112,127,0,102,139,115],
[108,108,102,123,100,114,108,0,123,113],
[76,51,88,108,97,91,71,87,0,129],
[66,87,121,117,101,86,95,97,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,61,98,79,94,87,98,88],
[121,0,110,80,95,109,105,91,91,96],
[125,100,0,86,121,117,76,102,126,107],
[149,130,124,0,156,103,96,111,133,156],
[112,115,89,54,0,93,84,85,95,97],
[131,101,93,107,117,0,112,124,114,125],
[116,105,134,114,126,98,0,84,108,112],
[123,119,108,99,125,86,126,0,118,121],
[112,119,84,77,115,96,102,92,0,121],
[122,114,103,54,113,85,98,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,81,131,84,95,66,94,113,126],
[134,0,101,138,111,115,133,114,108,141],
[129,109,0,132,74,76,111,109,110,128],
[79,72,78,0,61,75,92,90,82,98],
[126,99,136,149,0,113,128,98,142,159],
[115,95,134,135,97,0,100,107,100,135],
[144,77,99,118,82,110,0,105,105,122],
[116,96,101,120,112,103,105,0,111,110],
[97,102,100,128,68,110,105,99,0,117],
[84,69,82,112,51,75,88,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,110,111,126,116,105,108,114],
[106,0,113,95,109,115,116,111,112,113],
[93,97,0,101,106,107,106,98,107,114],
[100,115,109,0,122,115,129,98,105,105],
[99,101,104,88,0,108,107,100,95,98],
[84,95,103,95,102,0,98,103,100,97],
[94,94,104,81,103,112,0,108,109,110],
[105,99,112,112,110,107,102,0,103,100],
[102,98,103,105,115,110,101,107,0,105],
[96,97,96,105,112,113,100,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,125,118,122,119,102,106,113],
[92,0,107,115,117,103,102,108,113,112],
[101,103,0,118,110,102,104,98,115,106],
[85,95,92,0,99,106,98,99,99,95],
[92,93,100,111,0,100,91,96,103,115],
[88,107,108,104,110,0,104,104,108,101],
[91,108,106,112,119,106,0,96,103,106],
[108,102,112,111,114,106,114,0,112,101],
[104,97,95,111,107,102,107,98,0,105],
[97,98,104,115,95,109,104,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,90,98,93,102,102,83,89],
[101,0,102,96,85,88,107,93,80,87],
[111,108,0,108,109,97,117,113,105,101],
[120,114,102,0,102,100,115,115,99,95],
[112,125,101,108,0,95,115,114,101,96],
[117,122,113,110,115,0,116,125,100,103],
[108,103,93,95,95,94,0,101,80,87],
[108,117,97,95,96,85,109,0,97,84],
[127,130,105,111,109,110,130,113,0,112],
[121,123,109,115,114,107,123,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,126,90,115,106,130,90,108],
[103,0,119,119,136,121,124,176,120,115],
[84,91,0,113,110,103,98,151,78,125],
[84,91,97,0,69,109,83,138,87,101],
[120,74,100,141,0,127,107,154,107,78],
[95,89,107,101,83,0,98,160,91,109],
[104,86,112,127,103,112,0,140,100,100],
[80,34,59,72,56,50,70,0,62,49],
[120,90,132,123,103,119,110,148,0,109],
[102,95,85,109,132,101,110,161,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,107,117,108,121,100,102,99],
[91,0,102,99,91,110,112,83,103,110],
[92,108,0,95,106,111,120,90,102,100],
[103,111,115,0,106,110,123,115,103,107],
[93,119,104,104,0,107,114,103,108,101],
[102,100,99,100,103,0,125,102,102,114],
[89,98,90,87,96,85,0,84,91,102],
[110,127,120,95,107,108,126,0,109,112],
[108,107,108,107,102,108,119,101,0,114],
[111,100,110,103,109,96,108,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,111,125,120,130,126,129,105],
[92,0,113,98,104,106,103,100,106,78],
[86,97,0,94,99,90,107,95,100,93],
[99,112,116,0,119,103,118,105,97,97],
[85,106,111,91,0,90,106,104,100,93],
[90,104,120,107,120,0,111,103,102,93],
[80,107,103,92,104,99,0,86,108,82],
[84,110,115,105,106,107,124,0,110,94],
[81,104,110,113,110,108,102,100,0,90],
[105,132,117,113,117,117,128,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,129,105,102,93,109,123,94],
[114,0,111,121,91,83,101,111,119,99],
[114,99,0,144,110,110,113,120,129,107],
[81,89,66,0,83,93,92,111,101,92],
[105,119,100,127,0,106,98,121,124,109],
[108,127,100,117,104,0,106,112,118,103],
[117,109,97,118,112,104,0,110,122,112],
[101,99,90,99,89,98,100,0,118,95],
[87,91,81,109,86,92,88,92,0,85],
[116,111,103,118,101,107,98,115,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,105,101,107,90,102,102,99],
[117,0,111,103,97,111,99,100,113,98],
[107,99,0,108,102,106,92,110,106,95],
[105,107,102,0,97,98,104,93,110,106],
[109,113,108,113,0,111,100,106,107,98],
[103,99,104,112,99,0,90,95,111,100],
[120,111,118,106,110,120,0,105,107,108],
[108,110,100,117,104,115,105,0,111,104],
[108,97,104,100,103,99,103,99,0,101],
[111,112,115,104,112,110,102,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,27,85,62,58,75,71,23,54],
[169,0,115,149,147,80,97,134,123,139],
[183,95,0,104,130,66,82,120,59,123],
[125,61,106,0,147,106,123,129,128,125],
[148,63,80,63,0,80,97,78,48,69],
[152,130,144,104,130,0,98,120,120,105],
[135,113,128,87,113,112,0,120,72,60],
[139,76,90,81,132,90,90,0,76,110],
[187,87,151,82,162,90,138,134,0,99],
[156,71,87,85,141,105,150,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,120,116,93,97,103,123,91],
[98,0,121,111,88,90,86,102,111,79],
[106,89,0,109,92,98,98,114,117,102],
[90,99,101,0,103,72,97,85,103,89],
[94,122,118,107,0,96,83,102,133,95],
[117,120,112,138,114,0,104,122,126,99],
[113,124,112,113,127,106,0,105,114,108],
[107,108,96,125,108,88,105,0,118,87],
[87,99,93,107,77,84,96,92,0,67],
[119,131,108,121,115,111,102,123,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,106,112,116,108,104,117,102],
[92,0,97,80,104,106,95,104,103,90],
[93,113,0,94,108,103,109,111,107,93],
[104,130,116,0,109,121,117,112,121,106],
[98,106,102,101,0,112,105,100,111,93],
[94,104,107,89,98,0,98,107,109,87],
[102,115,101,93,105,112,0,103,116,104],
[106,106,99,98,110,103,107,0,113,99],
[93,107,103,89,99,101,94,97,0,89],
[108,120,117,104,117,123,106,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,122,108,102,126,115,116,120],
[95,0,103,108,97,99,103,120,102,106],
[103,107,0,111,94,101,111,119,116,115],
[88,102,99,0,95,103,106,106,102,111],
[102,113,116,115,0,107,108,122,101,115],
[108,111,109,107,103,0,109,111,111,106],
[84,107,99,104,102,101,0,110,106,105],
[95,90,91,104,88,99,100,0,101,102],
[94,108,94,108,109,99,104,109,0,113],
[90,104,95,99,95,104,105,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,96,105,95,105,132,137,77],
[91,0,60,86,73,81,105,123,87,69],
[103,150,0,128,105,88,140,144,108,98],
[114,124,82,0,75,109,98,112,92,95],
[105,137,105,135,0,79,125,114,114,119],
[115,129,122,101,131,0,138,148,157,122],
[105,105,70,112,85,72,0,121,79,88],
[78,87,66,98,96,62,89,0,89,82],
[73,123,102,118,96,53,131,121,0,74],
[133,141,112,115,91,88,122,128,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,118,116,96,140,100,115,115],
[102,0,109,110,95,104,99,106,118,103],
[107,101,0,107,108,104,120,77,102,104],
[92,100,103,0,98,109,102,94,99,93],
[94,115,102,112,0,110,120,87,106,105],
[114,106,106,101,100,0,128,111,122,110],
[70,111,90,108,90,82,0,78,95,79],
[110,104,133,116,123,99,132,0,120,120],
[95,92,108,111,104,88,115,90,0,89],
[95,107,106,117,105,100,131,90,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,105,110,100,94,117,121,104],
[109,0,102,110,124,106,108,115,124,109],
[111,108,0,109,116,109,101,120,116,103],
[105,100,101,0,115,110,101,110,113,95],
[100,86,94,95,0,103,95,110,113,94],
[110,104,101,100,107,0,101,124,115,98],
[116,102,109,109,115,109,0,118,116,99],
[93,95,90,100,100,86,92,0,108,89],
[89,86,94,97,97,95,94,102,0,79],
[106,101,107,115,116,112,111,121,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,134,126,130,95,152,119,150,126],
[38,0,59,65,101,62,107,69,91,87],
[76,151,0,82,86,95,138,127,91,81],
[84,145,128,0,87,111,134,130,106,85],
[80,109,124,123,0,62,87,104,87,75],
[115,148,115,99,148,0,117,141,103,130],
[58,103,72,76,123,93,0,121,93,107],
[91,141,83,80,106,69,89,0,100,110],
[60,119,119,104,123,107,117,110,0,89],
[84,123,129,125,135,80,103,100,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,114,102,103,102,101,99,106],
[104,0,101,118,101,115,98,105,103,107],
[98,109,0,102,98,108,110,98,102,104],
[96,92,108,0,97,110,103,97,107,107],
[108,109,112,113,0,118,114,93,106,114],
[107,95,102,100,92,0,104,95,100,103],
[108,112,100,107,96,106,0,95,94,110],
[109,105,112,113,117,115,115,0,108,110],
[111,107,108,103,104,110,116,102,0,123],
[104,103,106,103,96,107,100,100,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,88,103,76,88,78,89,102],
[122,0,93,98,111,96,111,88,91,72],
[115,117,0,102,115,102,105,96,112,99],
[122,112,108,0,99,89,98,81,99,81],
[107,99,95,111,0,94,118,91,88,94],
[134,114,108,121,116,0,138,79,110,115],
[122,99,105,112,92,72,0,73,71,96],
[132,122,114,129,119,131,137,0,101,120],
[121,119,98,111,122,100,139,109,0,117],
[108,138,111,129,116,95,114,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,89,88,100,89,90,89,96,101],
[97,0,90,87,85,78,97,97,88,103],
[121,120,0,111,112,106,108,109,106,99],
[122,123,99,0,105,107,112,105,119,113],
[110,125,98,105,0,105,102,107,103,115],
[121,132,104,103,105,0,115,102,110,103],
[120,113,102,98,108,95,0,104,106,104],
[121,113,101,105,103,108,106,0,112,98],
[114,122,104,91,107,100,104,98,0,121],
[109,107,111,97,95,107,106,112,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,105,100,92,101,99,103,103],
[110,0,125,110,118,104,108,97,118,114],
[95,85,0,95,92,90,94,89,93,95],
[105,100,115,0,104,94,96,110,112,105],
[110,92,118,106,0,95,91,95,96,110],
[118,106,120,116,115,0,100,99,109,103],
[109,102,116,114,119,110,0,106,114,113],
[111,113,121,100,115,111,104,0,118,117],
[107,92,117,98,114,101,96,92,0,103],
[107,96,115,105,100,107,97,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,77,101,112,82,102,102,123,102],
[117,0,94,102,118,113,115,104,132,115],
[133,116,0,101,137,115,142,116,127,113],
[109,108,109,0,121,111,119,103,104,115],
[98,92,73,89,0,71,97,104,74,97],
[128,97,95,99,139,0,106,108,117,109],
[108,95,68,91,113,104,0,95,94,123],
[108,106,94,107,106,102,115,0,121,103],
[87,78,83,106,136,93,116,89,0,104],
[108,95,97,95,113,101,87,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,80,102,99,101,144,104,106,96],
[127,0,138,126,73,127,113,123,128,156],
[130,72,0,135,106,104,123,78,135,174],
[108,84,75,0,111,97,103,104,132,111],
[111,137,104,99,0,118,138,107,104,138],
[109,83,106,113,92,0,106,91,115,110],
[66,97,87,107,72,104,0,49,81,109],
[106,87,132,106,103,119,161,0,120,121],
[104,82,75,78,106,95,129,90,0,83],
[114,54,36,99,72,100,101,89,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,99,109,98,111,118,117,117],
[117,0,103,114,123,106,110,109,116,115],
[107,107,0,115,114,100,105,105,114,110],
[111,96,95,0,116,102,110,114,102,106],
[101,87,96,94,0,91,98,100,98,98],
[112,104,110,108,119,0,108,112,109,114],
[99,100,105,100,112,102,0,110,98,109],
[92,101,105,96,110,98,100,0,103,107],
[93,94,96,108,112,101,112,107,0,115],
[93,95,100,104,112,96,101,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,103,99,119,120,132,131,119,125],
[83,0,82,66,92,77,106,96,100,77],
[107,128,0,103,105,117,112,104,139,114],
[111,144,107,0,127,103,128,115,129,111],
[91,118,105,83,0,101,95,121,117,79],
[90,133,93,107,109,0,116,113,121,97],
[78,104,98,82,115,94,0,106,129,72],
[79,114,106,95,89,97,104,0,117,96],
[91,110,71,81,93,89,81,93,0,83],
[85,133,96,99,131,113,138,114,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,123,111,110,120,122,113,106,115],
[109,0,115,104,111,113,107,104,117,127],
[87,95,0,91,92,97,94,100,93,105],
[99,106,119,0,118,117,105,111,106,108],
[100,99,118,92,0,103,110,95,102,109],
[90,97,113,93,107,0,105,102,84,98],
[88,103,116,105,100,105,0,100,95,109],
[97,106,110,99,115,108,110,0,111,110],
[104,93,117,104,108,126,115,99,0,115],
[95,83,105,102,101,112,101,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,102,110,124,111,122,116,108],
[89,0,114,117,111,116,107,106,106,104],
[97,96,0,104,100,119,99,104,108,113],
[108,93,106,0,104,121,93,105,112,101],
[100,99,110,106,0,127,105,108,114,115],
[86,94,91,89,83,0,86,88,103,104],
[99,103,111,117,105,124,0,112,118,113],
[88,104,106,105,102,122,98,0,114,105],
[94,104,102,98,96,107,92,96,0,104],
[102,106,97,109,95,106,97,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,91,109,99,105,86,106,107],
[111,0,99,93,106,103,111,100,118,101],
[103,111,0,98,113,86,122,98,115,106],
[119,117,112,0,113,104,119,119,122,108],
[101,104,97,97,0,96,102,86,112,95],
[111,107,124,106,114,0,102,104,127,106],
[105,99,88,91,108,108,0,96,112,101],
[124,110,112,91,124,106,114,0,123,112],
[104,92,95,88,98,83,98,87,0,94],
[103,109,104,102,115,104,109,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,120,124,124,99,138,104,144,169],
[91,0,141,127,93,119,111,75,129,125],
[90,69,0,109,103,90,131,99,124,109],
[86,83,101,0,97,80,110,93,98,101],
[86,117,107,113,0,90,134,107,123,151],
[111,91,120,130,120,0,120,121,145,115],
[72,99,79,100,76,90,0,84,127,106],
[106,135,111,117,103,89,126,0,137,122],
[66,81,86,112,87,65,83,73,0,96],
[41,85,101,109,59,95,104,88,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,107,112,107,111,119,104,94],
[99,0,97,85,103,96,105,115,110,96],
[90,113,0,93,85,96,95,119,82,96],
[103,125,117,0,110,105,117,130,104,112],
[98,107,125,100,0,109,119,126,115,100],
[103,114,114,105,101,0,105,125,108,105],
[99,105,115,93,91,105,0,110,111,95],
[91,95,91,80,84,85,100,0,97,87],
[106,100,128,106,95,102,99,113,0,110],
[116,114,114,98,110,105,115,123,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,91,112,96,107,103,97,93],
[109,0,96,109,105,99,102,106,98,93],
[115,114,0,108,116,112,106,115,104,101],
[119,101,102,0,115,100,107,107,106,111],
[98,105,94,95,0,101,100,103,98,90],
[114,111,98,110,109,0,108,102,97,96],
[103,108,104,103,110,102,0,115,98,106],
[107,104,95,103,107,108,95,0,103,98],
[113,112,106,104,112,113,112,107,0,104],
[117,117,109,99,120,114,104,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,106,111,114,109,101,102,114],
[101,0,106,106,110,113,110,116,106,117],
[110,104,0,117,106,117,119,93,106,98],
[104,104,93,0,99,110,110,89,105,96],
[99,100,104,111,0,109,113,102,98,110],
[96,97,93,100,101,0,106,83,98,104],
[101,100,91,100,97,104,0,86,93,99],
[109,94,117,121,108,127,124,0,100,104],
[108,104,104,105,112,112,117,110,0,98],
[96,93,112,114,100,106,111,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,107,118,105,92,109,99,89],
[102,0,101,95,112,107,92,101,98,92],
[103,109,0,106,111,104,104,111,97,93],
[103,115,104,0,123,107,105,116,111,100],
[92,98,99,87,0,101,95,101,93,82],
[105,103,106,103,109,0,97,102,106,96],
[118,118,106,105,115,113,0,113,107,102],
[101,109,99,94,109,108,97,0,99,95],
[111,112,113,99,117,104,103,111,0,105],
[121,118,117,110,128,114,108,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,97,111,94,96,106,109,100],
[103,0,109,105,111,106,106,103,104,106],
[94,101,0,94,105,102,105,97,101,100],
[113,105,116,0,111,103,102,101,114,107],
[99,99,105,99,0,101,106,100,97,99],
[116,104,108,107,109,0,103,106,102,106],
[114,104,105,108,104,107,0,95,110,107],
[104,107,113,109,110,104,115,0,113,106],
[101,106,109,96,113,108,100,97,0,96],
[110,104,110,103,111,104,103,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,73,96,98,84,93,97,97,100],
[114,0,92,105,101,103,99,94,102,94],
[137,118,0,105,125,111,121,108,122,121],
[114,105,105,0,102,102,101,93,119,119],
[112,109,85,108,0,95,101,101,116,105],
[126,107,99,108,115,0,113,96,118,112],
[117,111,89,109,109,97,0,98,115,116],
[113,116,102,117,109,114,112,0,120,119],
[113,108,88,91,94,92,95,90,0,102],
[110,116,89,91,105,98,94,91,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,108,99,107,100,106,101,97],
[109,0,100,123,106,117,93,123,94,110],
[107,110,0,99,101,107,106,110,102,108],
[102,87,111,0,102,107,90,110,90,102],
[111,104,109,108,0,106,99,117,114,104],
[103,93,103,103,104,0,88,108,99,93],
[110,117,104,120,111,122,0,123,107,109],
[104,87,100,100,93,102,87,0,95,90],
[109,116,108,120,96,111,103,115,0,98],
[113,100,102,108,106,117,101,120,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,83,112,98,102,83,97,115,94],
[117,0,100,110,109,111,87,110,109,101],
[127,110,0,102,109,108,101,110,119,96],
[98,100,108,0,122,115,111,116,113,110],
[112,101,101,88,0,108,100,105,113,107],
[108,99,102,95,102,0,93,106,118,104],
[127,123,109,99,110,117,0,121,122,108],
[113,100,100,94,105,104,89,0,109,93],
[95,101,91,97,97,92,88,101,0,92],
[116,109,114,100,103,106,102,117,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,100,106,112,99,119,111,110],
[112,0,119,103,108,108,105,125,105,117],
[96,91,0,97,87,99,96,103,102,98],
[110,107,113,0,101,110,101,109,110,107],
[104,102,123,109,0,104,110,116,103,118],
[98,102,111,100,106,0,102,106,118,102],
[111,105,114,109,100,108,0,104,110,109],
[91,85,107,101,94,104,106,0,106,104],
[99,105,108,100,107,92,100,104,0,107],
[100,93,112,103,92,108,101,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,91,116,127,130,107,97,106,130],
[89,0,71,91,108,77,78,87,103,81],
[119,139,0,126,119,140,107,128,105,116],
[94,119,84,0,107,121,89,106,95,122],
[83,102,91,103,0,120,68,112,96,98],
[80,133,70,89,90,0,92,110,105,113],
[103,132,103,121,142,118,0,135,112,142],
[113,123,82,104,98,100,75,0,96,98],
[104,107,105,115,114,105,98,114,0,103],
[80,129,94,88,112,97,68,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,94,100,98,98,114,102,110],
[124,0,106,103,114,107,109,118,111,122],
[109,104,0,103,105,104,107,108,102,116],
[116,107,107,0,102,107,95,115,106,122],
[110,96,105,108,0,107,108,106,107,122],
[112,103,106,103,103,0,115,107,107,117],
[112,101,103,115,102,95,0,116,105,124],
[96,92,102,95,104,103,94,0,101,109],
[108,99,108,104,103,103,105,109,0,124],
[100,88,94,88,88,93,86,101,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,97,109,110,111,116,110,104],
[102,0,115,109,101,113,108,122,105,104],
[89,95,0,112,95,100,103,107,100,97],
[113,101,98,0,98,94,102,112,104,106],
[101,109,115,112,0,100,111,123,97,114],
[100,97,110,116,110,0,109,120,101,100],
[99,102,107,108,99,101,0,112,100,103],
[94,88,103,98,87,90,98,0,87,95],
[100,105,110,106,113,109,110,123,0,104],
[106,106,113,104,96,110,107,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,93,95,102,81,99,111,94,83],
[124,0,104,94,97,101,110,116,107,113],
[117,106,0,89,112,102,109,119,116,105],
[115,116,121,0,109,97,111,116,110,102],
[108,113,98,101,0,101,118,109,107,104],
[129,109,108,113,109,0,113,107,100,103],
[111,100,101,99,92,97,0,106,92,106],
[99,94,91,94,101,103,104,0,94,93],
[116,103,94,100,103,110,118,116,0,112],
[127,97,105,108,106,107,104,117,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,108,109,104,106,99,98,119],
[113,0,109,115,110,105,110,101,99,113],
[102,101,0,114,98,101,93,102,101,114],
[102,95,96,0,100,96,101,92,105,107],
[101,100,112,110,0,112,102,99,103,112],
[106,105,109,114,98,0,107,105,113,113],
[104,100,117,109,108,103,0,99,101,109],
[111,109,108,118,111,105,111,0,108,116],
[112,111,109,105,107,97,109,102,0,113],
[91,97,96,103,98,97,101,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,125,109,110,106,110,118,120,102],
[99,0,121,111,98,95,128,121,121,103],
[85,89,0,93,94,76,98,94,99,85],
[101,99,117,0,100,89,113,115,110,94],
[100,112,116,110,0,95,115,109,115,106],
[104,115,134,121,115,0,122,117,122,114],
[100,82,112,97,95,88,0,113,107,97],
[92,89,116,95,101,93,97,0,104,95],
[90,89,111,100,95,88,103,106,0,90],
[108,107,125,116,104,96,113,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,101,94,108,108,127,111,101],
[112,0,107,119,101,115,110,120,115,111],
[107,103,0,118,95,117,111,117,118,93],
[109,91,92,0,104,110,98,110,95,92],
[116,109,115,106,0,118,100,116,109,104],
[102,95,93,100,92,0,112,108,108,87],
[102,100,99,112,110,98,0,95,99,111],
[83,90,93,100,94,102,115,0,86,86],
[99,95,92,115,101,102,111,124,0,111],
[109,99,117,118,106,123,99,124,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,107,99,111,104,115,102,103],
[103,0,90,93,94,101,91,114,98,87],
[109,120,0,117,102,127,113,122,119,103],
[103,117,93,0,107,115,100,111,104,104],
[111,116,108,103,0,130,108,122,109,109],
[99,109,83,95,80,0,92,117,108,92],
[106,119,97,110,102,118,0,116,120,102],
[95,96,88,99,88,93,94,0,95,99],
[108,112,91,106,101,102,90,115,0,102],
[107,123,107,106,101,118,108,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,97,78,103,79,103,88,89],
[104,0,108,104,88,111,105,112,95,96],
[101,102,0,96,87,107,100,101,88,91],
[113,106,114,0,95,117,104,109,101,103],
[132,122,123,115,0,123,130,128,101,114],
[107,99,103,93,87,0,101,108,93,84],
[131,105,110,106,80,109,0,112,100,95],
[107,98,109,101,82,102,98,0,104,87],
[122,115,122,109,109,117,110,106,0,101],
[121,114,119,107,96,126,115,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,101,91,93,96,95,98,99],
[109,0,106,100,98,105,111,106,99,109],
[108,104,0,116,101,107,113,109,108,104],
[109,110,94,0,99,104,105,92,102,104],
[119,112,109,111,0,111,103,108,103,113],
[117,105,103,106,99,0,110,110,101,106],
[114,99,97,105,107,100,0,98,101,110],
[115,104,101,118,102,100,112,0,110,115],
[112,111,102,108,107,109,109,100,0,104],
[111,101,106,106,97,104,100,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,106,116,106,104,98,102,112],
[102,0,100,112,116,108,109,105,105,115],
[106,110,0,114,122,103,110,111,109,122],
[104,98,96,0,113,116,109,98,103,113],
[94,94,88,97,0,103,106,86,91,104],
[104,102,107,94,107,0,105,92,93,105],
[106,101,100,101,104,105,0,93,96,116],
[112,105,99,112,124,118,117,0,114,113],
[108,105,101,107,119,117,114,96,0,119],
[98,95,88,97,106,105,94,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,120,106,116,121,112,103,104],
[100,0,96,113,111,116,121,110,113,103],
[104,114,0,123,121,130,124,116,112,114],
[90,97,87,0,109,101,110,95,94,92],
[104,99,89,101,0,104,115,106,102,102],
[94,94,80,109,106,0,106,117,89,97],
[89,89,86,100,95,104,0,100,96,93],
[98,100,94,115,104,93,110,0,97,89],
[107,97,98,116,108,121,114,113,0,110],
[106,107,96,118,108,113,117,121,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,100,129,119,114,115,102,120,111],
[83,0,89,121,96,100,98,99,110,98],
[110,121,0,127,104,95,120,113,130,109],
[81,89,83,0,87,89,100,103,100,82],
[91,114,106,123,0,106,107,100,116,101],
[96,110,115,121,104,0,112,115,126,99],
[95,112,90,110,103,98,0,99,124,97],
[108,111,97,107,110,95,111,0,110,97],
[90,100,80,110,94,84,86,100,0,85],
[99,112,101,128,109,111,113,113,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,82,91,61,130,75,125,71,112],
[82,0,116,74,86,130,43,110,59,61],
[128,94,0,74,88,134,80,134,91,99],
[119,136,136,0,119,141,79,129,82,126],
[149,124,122,91,0,152,92,127,106,115],
[80,80,76,69,58,0,73,106,68,79],
[135,167,130,131,118,137,0,145,88,100],
[85,100,76,81,83,104,65,0,51,95],
[139,151,119,128,104,142,122,159,0,111],
[98,149,111,84,95,131,110,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,103,103,115,100,95,110,94,110],
[116,0,100,103,117,108,104,109,112,120],
[107,110,0,106,103,104,97,102,106,107],
[107,107,104,0,114,107,99,94,110,118],
[95,93,107,96,0,89,93,93,91,98],
[110,102,106,103,121,0,116,102,116,115],
[115,106,113,111,117,94,0,115,106,113],
[100,101,108,116,117,108,95,0,99,106],
[116,98,104,100,119,94,104,111,0,119],
[100,90,103,92,112,95,97,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,105,114,128,124,117,111,114,120],
[83,0,97,105,102,99,100,89,93,107],
[105,113,0,104,118,109,107,113,108,112],
[96,105,106,0,119,109,105,106,99,115],
[82,108,92,91,0,91,87,84,81,95],
[86,111,101,101,119,0,86,97,96,112],
[93,110,103,105,123,124,0,99,103,111],
[99,121,97,104,126,113,111,0,111,116],
[96,117,102,111,129,114,107,99,0,113],
[90,103,98,95,115,98,99,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,116,96,106,105,115,112,98],
[103,0,112,121,107,110,109,118,106,107],
[98,98,0,111,110,107,104,116,98,100],
[94,89,99,0,100,99,93,98,105,99],
[114,103,100,110,0,113,99,106,107,110],
[104,100,103,111,97,0,98,109,107,102],
[105,101,106,117,111,112,0,120,105,109],
[95,92,94,112,104,101,90,0,97,99],
[98,104,112,105,103,103,105,113,0,101],
[112,103,110,111,100,108,101,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,120,123,127,102,125,108,103],
[92,0,115,112,118,123,93,110,108,90],
[92,95,0,113,116,115,95,111,104,107],
[90,98,97,0,92,109,93,97,91,95],
[87,92,94,118,0,133,108,90,103,88],
[83,87,95,101,77,0,91,100,73,86],
[108,117,115,117,102,119,0,106,100,104],
[85,100,99,113,120,110,104,0,103,103],
[102,102,106,119,107,137,110,107,0,113],
[107,120,103,115,122,124,106,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,111,105,117,74,121,97,104],
[117,0,115,123,119,113,107,131,124,101],
[107,95,0,111,111,98,95,112,118,92],
[99,87,99,0,82,104,89,115,118,86],
[105,91,99,128,0,106,91,119,102,104],
[93,97,112,106,104,0,78,100,102,102],
[136,103,115,121,119,132,0,115,110,112],
[89,79,98,95,91,110,95,0,93,86],
[113,86,92,92,108,108,100,117,0,94],
[106,109,118,124,106,108,98,124,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,106,96,104,111,92,101,118],
[100,0,100,105,88,92,99,82,104,107],
[110,110,0,103,104,99,102,108,98,120],
[104,105,107,0,100,98,101,97,106,129],
[114,122,106,110,0,111,113,102,115,105],
[106,118,111,112,99,0,100,94,107,111],
[99,111,108,109,97,110,0,96,104,106],
[118,128,102,113,108,116,114,0,123,123],
[109,106,112,104,95,103,106,87,0,127],
[92,103,90,81,105,99,104,87,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,101,79,95,101,82,94,107],
[114,0,98,113,94,123,107,98,100,120],
[115,112,0,98,93,112,112,100,107,120],
[109,97,112,0,86,132,86,86,89,119],
[131,116,117,124,0,141,89,111,118,123],
[115,87,98,78,69,0,82,67,97,102],
[109,103,98,124,121,128,0,105,115,141],
[128,112,110,124,99,143,105,0,81,123],
[116,110,103,121,92,113,95,129,0,126],
[103,90,90,91,87,108,69,87,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,104,102,98,109,105,120,104],
[99,0,103,102,100,108,108,100,113,104],
[106,107,0,99,94,100,103,102,109,107],
[106,108,111,0,97,97,105,103,116,110],
[108,110,116,113,0,113,103,109,120,116],
[112,102,110,113,97,0,106,105,129,106],
[101,102,107,105,107,104,0,102,111,107],
[105,110,108,107,101,105,108,0,114,114],
[90,97,101,94,90,81,99,96,0,94],
[106,106,103,100,94,104,103,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,92,87,76,124,75,83,90],
[120,0,117,126,121,105,135,100,136,110],
[116,93,0,146,97,103,128,107,115,109],
[118,84,64,0,81,96,113,92,79,88],
[123,89,113,129,0,97,124,114,116,123],
[134,105,107,114,113,0,119,110,101,97],
[86,75,82,97,86,91,0,100,76,71],
[135,110,103,118,96,100,110,0,114,105],
[127,74,95,131,94,109,134,96,0,96],
[120,100,101,122,87,113,139,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,88,87,94,92,79,95,99],
[122,0,101,111,93,94,118,108,98,104],
[115,109,0,100,90,82,102,101,104,116],
[122,99,110,0,90,89,107,98,98,104],
[123,117,120,120,0,106,105,122,116,125],
[116,116,128,121,104,0,113,118,110,129],
[118,92,108,103,105,97,0,111,98,116],
[131,102,109,112,88,92,99,0,109,104],
[115,112,106,112,94,100,112,101,0,99],
[111,106,94,106,85,81,94,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,122,80,87,59,106,110,59,110],
[116,0,112,86,131,65,153,110,86,101],
[88,98,0,92,104,94,126,154,117,103],
[130,124,118,0,119,103,138,173,84,129],
[123,79,106,91,0,107,156,143,95,116],
[151,145,116,107,103,0,150,125,61,147],
[104,57,84,72,54,60,0,106,61,91],
[100,100,56,37,67,85,104,0,48,81],
[151,124,93,126,115,149,149,162,0,127],
[100,109,107,81,94,63,119,129,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,115,110,110,114,113,113,105],
[104,0,107,101,101,107,115,114,105,104],
[93,103,0,96,107,93,98,115,97,106],
[95,109,114,0,105,112,119,121,111,110],
[100,109,103,105,0,108,103,113,112,106],
[100,103,117,98,102,0,113,114,100,103],
[96,95,112,91,107,97,0,97,98,102],
[97,96,95,89,97,96,113,0,106,94],
[97,105,113,99,98,110,112,104,0,99],
[105,106,104,100,104,107,108,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,110,98,110,77,109,112,91],
[104,0,112,110,108,111,98,97,114,107],
[113,98,0,111,105,105,97,105,116,98],
[100,100,99,0,105,112,92,99,113,98],
[112,102,105,105,0,118,103,113,113,98],
[100,99,105,98,92,0,88,103,107,94],
[133,112,113,118,107,122,0,105,124,100],
[101,113,105,111,97,107,105,0,116,108],
[98,96,94,97,97,103,86,94,0,95],
[119,103,112,112,112,116,110,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,99,99,105,100,106,97,92],
[96,0,100,83,98,97,92,100,89,87],
[103,110,0,94,98,113,106,110,92,98],
[111,127,116,0,106,122,105,105,106,102],
[111,112,112,104,0,114,104,122,104,106],
[105,113,97,88,96,0,93,106,98,86],
[110,118,104,105,106,117,0,115,112,99],
[104,110,100,105,88,104,95,0,88,96],
[113,121,118,104,106,112,98,122,0,104],
[118,123,112,108,104,124,111,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,116,87,91,90,96,84,79],
[108,0,97,107,102,94,95,90,85,90],
[123,113,0,99,108,99,105,87,89,79],
[94,103,111,0,98,94,109,83,98,100],
[123,108,102,112,0,116,108,101,100,103],
[119,116,111,116,94,0,104,95,98,100],
[120,115,105,101,102,106,0,99,96,108],
[114,120,123,127,109,115,111,0,125,105],
[126,125,121,112,110,112,114,85,0,88],
[131,120,131,110,107,110,102,105,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,100,102,108,105,99,105,98],
[102,0,104,110,106,108,106,104,103,106],
[105,106,0,102,94,97,106,103,102,100],
[110,100,108,0,94,97,98,94,96,104],
[108,104,116,116,0,104,106,97,107,102],
[102,102,113,113,106,0,103,93,113,106],
[105,104,104,112,104,107,0,106,96,114],
[111,106,107,116,113,117,104,0,104,110],
[105,107,108,114,103,97,114,106,0,104],
[112,104,110,106,108,104,96,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,99,110,104,98,117,109,93],
[102,0,102,102,115,90,89,116,100,107],
[114,108,0,120,115,101,107,133,104,115],
[111,108,90,0,122,93,103,112,107,99],
[100,95,95,88,0,99,96,116,98,107],
[106,120,109,117,111,0,99,135,122,116],
[112,121,103,107,114,111,0,125,106,103],
[93,94,77,98,94,75,85,0,94,83],
[101,110,106,103,112,88,104,116,0,89],
[117,103,95,111,103,94,107,127,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,210,123,18,192,105,105,123,123],
[105,0,105,123,18,87,0,0,123,105],
[0,105,0,105,0,87,0,0,105,0],
[87,87,105,0,18,87,87,0,123,105],
[192,192,210,192,0,192,192,192,105,192],
[18,123,123,123,18,0,105,105,123,123],
[105,210,210,123,18,105,0,123,123,210],
[105,210,210,210,18,105,87,0,123,210],
[87,87,105,87,105,87,87,87,0,105],
[87,105,210,105,18,87,0,0,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,110,124,101,117,115,127,117],
[97,0,119,102,105,105,121,122,117,105],
[90,91,0,98,103,96,106,113,113,100],
[100,108,112,0,123,118,119,104,112,102],
[86,105,107,87,0,107,97,110,112,105],
[109,105,114,92,103,0,112,117,107,107],
[93,89,104,91,113,98,0,100,115,115],
[95,88,97,106,100,93,110,0,102,99],
[83,93,97,98,98,103,95,108,0,97],
[93,105,110,108,105,103,95,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,145,134,123,128,109,122,132,123],
[112,0,118,118,133,111,121,125,109,105],
[65,92,0,110,113,110,95,89,139,115],
[76,92,100,0,109,81,94,92,118,96],
[87,77,97,101,0,67,95,75,102,103],
[82,99,100,129,143,0,95,109,126,138],
[101,89,115,116,115,115,0,112,135,109],
[88,85,121,118,135,101,98,0,113,100],
[78,101,71,92,108,84,75,97,0,92],
[87,105,95,114,107,72,101,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,119,148,103,129,133,117,118,136],
[79,0,114,127,110,113,103,101,112,123],
[91,96,0,124,92,119,104,106,95,131],
[62,83,86,0,89,82,118,95,97,108],
[107,100,118,121,0,119,127,118,119,134],
[81,97,91,128,91,0,120,97,104,108],
[77,107,106,92,83,90,0,100,94,101],
[93,109,104,115,92,113,110,0,107,123],
[92,98,115,113,91,106,116,103,0,112],
[74,87,79,102,76,102,109,87,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,96,110,107,88,108,94,112,70],
[84,0,89,109,68,104,91,86,84,76],
[114,121,0,116,103,114,103,108,96,82],
[100,101,94,0,78,91,100,104,79,81],
[103,142,107,132,0,115,122,119,102,107],
[122,106,96,119,95,0,109,97,95,84],
[102,119,107,110,88,101,0,99,94,83],
[116,124,102,106,91,113,111,0,98,95],
[98,126,114,131,108,115,116,112,0,81],
[140,134,128,129,103,126,127,115,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,119,109,105,116,113,115,122],
[87,0,111,77,104,88,110,78,90,109],
[96,99,0,96,92,80,107,93,77,83],
[91,133,114,0,115,106,137,90,108,101],
[101,106,118,95,0,97,111,93,102,100],
[105,122,130,104,113,0,136,106,108,118],
[94,100,103,73,99,74,0,78,95,80],
[97,132,117,120,117,104,132,0,112,83],
[95,120,133,102,108,102,115,98,0,111],
[88,101,127,109,110,92,130,127,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,92,130,99,103,97,96,94],
[112,0,110,95,120,92,94,103,101,102],
[102,100,0,96,106,89,84,96,98,101],
[118,115,114,0,120,100,110,112,103,100],
[80,90,104,90,0,92,88,101,94,88],
[111,118,121,110,118,0,101,106,116,121],
[107,116,126,100,122,109,0,109,119,103],
[113,107,114,98,109,104,101,0,114,116],
[114,109,112,107,116,94,91,96,0,101],
[116,108,109,110,122,89,107,94,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,109,110,109,106,117,132,116,100],
[79,0,89,88,91,83,96,108,92,84],
[101,121,0,113,106,111,111,124,120,106],
[100,122,97,0,102,119,95,124,99,98],
[101,119,104,108,0,130,101,120,117,113],
[104,127,99,91,80,0,106,117,125,106],
[93,114,99,115,109,104,0,119,116,103],
[78,102,86,86,90,93,91,0,91,83],
[94,118,90,111,93,85,94,119,0,100],
[110,126,104,112,97,104,107,127,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,115,100,92,78,95,108,104,87],
[124,0,106,122,114,94,115,103,121,113],
[95,104,0,110,87,68,92,108,102,83],
[110,88,100,0,77,71,96,92,100,89],
[118,96,123,133,0,98,101,103,101,94],
[132,116,142,139,112,0,127,117,123,98],
[115,95,118,114,109,83,0,108,108,101],
[102,107,102,118,107,93,102,0,114,101],
[106,89,108,110,109,87,102,96,0,89],
[123,97,127,121,116,112,109,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,101,118,114,90,113,112,97],
[90,0,98,96,116,110,94,103,98,103],
[110,112,0,98,117,115,95,110,113,100],
[109,114,112,0,121,121,94,107,111,117],
[92,94,93,89,0,111,80,97,101,96],
[96,100,95,89,99,0,93,103,100,99],
[120,116,115,116,130,117,0,115,108,104],
[97,107,100,103,113,107,95,0,99,97],
[98,112,97,99,109,110,102,111,0,92],
[113,107,110,93,114,111,106,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,129,119,113,116,124,92,128],
[99,0,86,115,113,93,108,102,94,121],
[115,124,0,128,126,130,120,125,103,129],
[81,95,82,0,108,87,98,102,87,128],
[91,97,84,102,0,95,93,97,86,122],
[97,117,80,123,115,0,97,107,109,129],
[94,102,90,112,117,113,0,97,97,122],
[86,108,85,108,113,103,113,0,93,122],
[118,116,107,123,124,101,113,117,0,123],
[82,89,81,82,88,81,88,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,117,103,113,114,106,120,107],
[95,0,103,102,101,108,106,104,112,106],
[109,107,0,101,107,111,106,107,116,108],
[93,108,109,0,97,110,108,104,109,103],
[107,109,103,113,0,112,100,105,114,104],
[97,102,99,100,98,0,103,102,114,104],
[96,104,104,102,110,107,0,110,110,112],
[104,106,103,106,105,108,100,0,108,100],
[90,98,94,101,96,96,100,102,0,94],
[103,104,102,107,106,106,98,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,84,100,88,101,80,126,102],
[110,0,86,84,106,86,95,95,117,99],
[108,124,0,98,125,114,96,95,123,94],
[126,126,112,0,133,133,130,105,133,109],
[110,104,85,77,0,92,103,94,101,80],
[122,124,96,77,118,0,120,108,110,103],
[109,115,114,80,107,90,0,70,98,90],
[130,115,115,105,116,102,140,0,140,100],
[84,93,87,77,109,100,112,70,0,85],
[108,111,116,101,130,107,120,110,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,108,117,106,118,116,100,105],
[95,0,104,99,114,104,107,106,103,92],
[94,106,0,105,108,102,96,109,98,93],
[102,111,105,0,110,113,113,117,110,108],
[93,96,102,100,0,95,103,105,94,88],
[104,106,108,97,115,0,106,115,98,97],
[92,103,114,97,107,104,0,99,99,91],
[94,104,101,93,105,95,111,0,84,82],
[110,107,112,100,116,112,111,126,0,97],
[105,118,117,102,122,113,119,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,101,99,112,109,104,102,99],
[110,0,113,109,112,121,113,109,105,112],
[107,97,0,103,100,107,109,109,103,106],
[109,101,107,0,107,113,109,103,99,107],
[111,98,110,103,0,105,103,111,103,113],
[98,89,103,97,105,0,106,101,98,94],
[101,97,101,101,107,104,0,103,100,105],
[106,101,101,107,99,109,107,0,100,99],
[108,105,107,111,107,112,110,110,0,112],
[111,98,104,103,97,116,105,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,103,110,115,109,108,107,123],
[103,0,103,98,95,110,119,106,109,105],
[104,107,0,100,96,94,119,109,100,98],
[107,112,110,0,104,106,119,117,110,105],
[100,115,114,106,0,97,108,118,106,106],
[95,100,116,104,113,0,121,111,106,112],
[101,91,91,91,102,89,0,98,94,97],
[102,104,101,93,92,99,112,0,81,104],
[103,101,110,100,104,104,116,129,0,101],
[87,105,112,105,104,98,113,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,137,81,101,68,76,122,39,94],
[84,0,125,92,83,105,80,113,68,128],
[73,85,0,77,94,106,80,78,83,116],
[129,118,133,0,82,114,107,105,96,122],
[109,127,116,128,0,148,119,109,76,112],
[142,105,104,96,62,0,91,85,92,74],
[134,130,130,103,91,119,0,143,116,116],
[88,97,132,105,101,125,67,0,70,106],
[171,142,127,114,134,118,94,140,0,133],
[116,82,94,88,98,136,94,104,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,111,107,103,109,111,98,96],
[96,0,94,112,102,102,106,103,89,100],
[109,116,0,126,111,103,109,105,109,105],
[99,98,84,0,98,88,98,99,88,86],
[103,108,99,112,0,94,104,96,95,89],
[107,108,107,122,116,0,113,106,95,109],
[101,104,101,112,106,97,0,100,92,102],
[99,107,105,111,114,104,110,0,106,98],
[112,121,101,122,115,115,118,104,0,118],
[114,110,105,124,121,101,108,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,106,112,110,105,107,107,103],
[95,0,108,99,104,85,102,83,110,105],
[105,102,0,95,113,97,106,95,102,100],
[104,111,115,0,110,101,114,95,105,101],
[98,106,97,100,0,93,114,94,99,87],
[100,125,113,109,117,0,118,112,116,108],
[105,108,104,96,96,92,0,87,107,91],
[103,127,115,115,116,98,123,0,123,100],
[103,100,108,105,111,94,103,87,0,94],
[107,105,110,109,123,102,119,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,101,110,105,106,104,111,101],
[112,0,106,106,113,101,113,103,112,105],
[97,104,0,91,104,97,101,106,101,96],
[109,104,119,0,115,102,104,110,106,101],
[100,97,106,95,0,90,104,104,96,101],
[105,109,113,108,120,0,111,109,109,95],
[104,97,109,106,106,99,0,107,110,97],
[106,107,104,100,106,101,103,0,107,100],
[99,98,109,104,114,101,100,103,0,98],
[109,105,114,109,109,115,113,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,91,75,94,89,93,119,152,118],
[90,0,96,81,111,75,97,111,132,109],
[119,114,0,107,127,99,115,117,164,128],
[135,129,103,0,125,120,124,138,162,124],
[116,99,83,85,0,91,114,111,132,132],
[121,135,111,90,119,0,123,128,151,140],
[117,113,95,86,96,87,0,104,138,112],
[91,99,93,72,99,82,106,0,127,115],
[58,78,46,48,78,59,72,83,0,84],
[92,101,82,86,78,70,98,95,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,109,104,123,117,130,115,112],
[100,0,87,101,99,106,117,112,109,105],
[102,123,0,106,115,118,128,127,107,113],
[101,109,104,0,99,105,123,108,108,110],
[106,111,95,111,0,105,118,117,109,101],
[87,104,92,105,105,0,129,109,105,98],
[93,93,82,87,92,81,0,100,91,91],
[80,98,83,102,93,101,110,0,101,92],
[95,101,103,102,101,105,119,109,0,99],
[98,105,97,100,109,112,119,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,110,108,109,98,108,100,112],
[89,0,119,114,103,105,92,106,109,103],
[99,91,0,101,96,106,96,108,101,109],
[100,96,109,0,96,99,99,102,96,97],
[102,107,114,114,0,108,109,111,122,111],
[101,105,104,111,102,0,88,107,104,95],
[112,118,114,111,101,122,0,104,107,112],
[102,104,102,108,99,103,106,0,106,104],
[110,101,109,114,88,106,103,104,0,97],
[98,107,101,113,99,115,98,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,100,109,103,104,109,112,92],
[108,0,94,77,102,110,93,103,90,89],
[113,116,0,78,99,103,103,113,103,99],
[110,133,132,0,114,128,117,119,102,97],
[101,108,111,96,0,126,110,106,95,95],
[107,100,107,82,84,0,72,112,102,100],
[106,117,107,93,100,138,0,112,109,111],
[101,107,97,91,104,98,98,0,96,82],
[98,120,107,108,115,108,101,114,0,134],
[118,121,111,113,115,110,99,128,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,104,90,98,87,84,97,93,105],
[124,0,117,95,120,105,105,101,109,110],
[106,93,0,89,110,96,84,96,92,111],
[120,115,121,0,121,95,110,113,119,126],
[112,90,100,89,0,96,92,97,100,99],
[123,105,114,115,114,0,99,124,111,126],
[126,105,126,100,118,111,0,124,106,126],
[113,109,114,97,113,86,86,0,102,109],
[117,101,118,91,110,99,104,108,0,110],
[105,100,99,84,111,84,84,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,126,104,112,104,100,114,130,110],
[89,0,117,110,83,123,95,138,105,123],
[84,93,0,106,70,107,88,124,92,108],
[106,100,104,0,101,109,104,100,118,114],
[98,127,140,109,0,105,118,146,127,111],
[106,87,103,101,105,0,84,121,126,119],
[110,115,122,106,92,126,0,109,140,119],
[96,72,86,110,64,89,101,0,107,101],
[80,105,118,92,83,84,70,103,0,106],
[100,87,102,96,99,91,91,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,111,113,110,110,120,114,119],
[108,0,110,115,102,115,107,113,117,108],
[100,100,0,104,98,92,102,112,106,92],
[99,95,106,0,104,104,102,110,110,108],
[97,108,112,106,0,106,114,110,110,103],
[100,95,118,106,104,0,108,109,112,111],
[100,103,108,108,96,102,0,114,117,111],
[90,97,98,100,100,101,96,0,104,101],
[96,93,104,100,100,98,93,106,0,102],
[91,102,118,102,107,99,99,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,108,108,100,119,103,104,112],
[96,0,112,103,104,111,117,99,110,99],
[98,98,0,113,109,105,120,109,106,103],
[102,107,97,0,117,116,124,100,105,101],
[102,106,101,93,0,97,121,110,107,103],
[110,99,105,94,113,0,117,102,100,96],
[91,93,90,86,89,93,0,107,88,105],
[107,111,101,110,100,108,103,0,98,112],
[106,100,104,105,103,110,122,112,0,102],
[98,111,107,109,107,114,105,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,88,105,106,108,99,107,104,106],
[122,0,99,118,94,118,105,123,99,110],
[122,111,0,110,101,117,126,124,109,106],
[105,92,100,0,96,98,99,107,95,104],
[104,116,109,114,0,109,117,112,120,118],
[102,92,93,112,101,0,93,112,109,99],
[111,105,84,111,93,117,0,106,101,100],
[103,87,86,103,98,98,104,0,94,111],
[106,111,101,115,90,101,109,116,0,119],
[104,100,104,106,92,111,110,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,123,122,131,94,124,107,104,100],
[97,0,111,98,114,112,117,107,105,96],
[87,99,0,98,101,98,110,98,85,84],
[88,112,112,0,108,104,117,107,88,102],
[79,96,109,102,0,96,108,96,99,96],
[116,98,112,106,114,0,118,117,96,105],
[86,93,100,93,102,92,0,90,88,88],
[103,103,112,103,114,93,120,0,95,100],
[106,105,125,122,111,114,122,115,0,115],
[110,114,126,108,114,105,122,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,116,88,97,93,102,78,108,98],
[110,0,121,89,102,92,116,73,119,92],
[94,89,0,90,104,88,92,87,104,90],
[122,121,120,0,117,116,112,104,116,105],
[113,108,106,93,0,100,100,99,94,101],
[117,118,122,94,110,0,99,106,123,102],
[108,94,118,98,110,111,0,113,111,109],
[132,137,123,106,111,104,97,0,114,120],
[102,91,106,94,116,87,99,96,0,112],
[112,118,120,105,109,108,101,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,108,110,112,117,110,120,109],
[110,0,115,96,106,112,113,99,99,103],
[96,95,0,101,111,102,107,95,98,99],
[102,114,109,0,110,116,115,106,111,103],
[100,104,99,100,0,110,111,103,104,98],
[98,98,108,94,100,0,105,96,98,93],
[93,97,103,95,99,105,0,96,106,104],
[100,111,115,104,107,114,114,0,109,110],
[90,111,112,99,106,112,104,101,0,90],
[101,107,111,107,112,117,106,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,94,109,108,103,90,107,112],
[116,0,109,99,104,87,111,110,127,106],
[103,101,0,109,99,103,91,93,100,97],
[116,111,101,0,111,109,99,97,112,105],
[101,106,111,99,0,114,113,78,116,108],
[102,123,107,101,96,0,92,92,103,103],
[107,99,119,111,97,118,0,103,118,101],
[120,100,117,113,132,118,107,0,125,100],
[103,83,110,98,94,107,92,85,0,103],
[98,104,113,105,102,107,109,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,102,94,105,103,95,96,98],
[109,0,84,98,101,98,99,104,95,98],
[108,126,0,112,110,111,119,117,98,104],
[108,112,98,0,96,105,99,103,99,98],
[116,109,100,114,0,110,108,110,109,105],
[105,112,99,105,100,0,94,100,96,94],
[107,111,91,111,102,116,0,106,107,100],
[115,106,93,107,100,110,104,0,98,96],
[114,115,112,111,101,114,103,112,0,101],
[112,112,106,112,105,116,110,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,101,97,107,100,106,106,103],
[117,0,105,105,100,105,109,116,112,105],
[112,105,0,114,109,118,122,121,113,97],
[109,105,96,0,103,106,105,110,96,92],
[113,110,101,107,0,112,112,127,108,107],
[103,105,92,104,98,0,109,114,104,100],
[110,101,88,105,98,101,0,108,103,101],
[104,94,89,100,83,96,102,0,97,96],
[104,98,97,114,102,106,107,113,0,96],
[107,105,113,118,103,110,109,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,133,79,124,119,123,119,75],
[106,0,135,138,80,128,140,105,130,77],
[118,75,0,113,112,110,104,108,101,120],
[77,72,97,0,77,66,92,59,104,99],
[131,130,98,133,0,124,122,124,87,101],
[86,82,100,144,86,0,107,84,63,74],
[91,70,106,118,88,103,0,32,83,86],
[87,105,102,151,86,126,178,0,118,98],
[91,80,109,106,123,147,127,92,0,130],
[135,133,90,111,109,136,124,112,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,111,90,120,104,111,107,94],
[111,0,110,89,89,112,112,115,118,94],
[106,100,0,102,92,109,105,109,117,96],
[99,121,108,0,113,125,106,105,107,100],
[120,121,118,97,0,118,108,120,115,112],
[90,98,101,85,92,0,90,87,100,82],
[106,98,105,104,102,120,0,113,108,99],
[99,95,101,105,90,123,97,0,110,97],
[103,92,93,103,95,110,102,100,0,97],
[116,116,114,110,98,128,111,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,115,111,101,110,124,103,117],
[98,0,110,100,108,119,106,107,97,88],
[114,100,0,110,115,106,106,116,110,94],
[95,110,100,0,117,117,123,107,96,98],
[99,102,95,93,0,92,118,104,97,96],
[109,91,104,93,118,0,114,116,96,104],
[100,104,104,87,92,96,0,107,79,86],
[86,103,94,103,106,94,103,0,73,83],
[107,113,100,114,113,114,131,137,0,100],
[93,122,116,112,114,106,124,127,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,133,97,89,94,87,134,109],
[106,0,102,118,102,101,87,109,127,114],
[115,108,0,99,113,133,88,120,119,122],
[77,92,111,0,107,74,75,116,130,82],
[113,108,97,103,0,119,109,109,173,138],
[121,109,77,136,91,0,73,96,133,111],
[116,123,122,135,101,137,0,129,126,116],
[123,101,90,94,101,114,81,0,126,114],
[76,83,91,80,37,77,84,84,0,96],
[101,96,88,128,72,99,94,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,48,39,115,98,53,88,51,161],
[161,0,99,124,137,165,90,126,108,174],
[162,111,0,101,133,153,114,96,115,156],
[171,86,109,0,150,165,102,150,92,151],
[95,73,77,60,0,120,102,55,114,138],
[112,45,57,45,90,0,93,79,88,123],
[157,120,96,108,108,117,0,104,113,151],
[122,84,114,60,155,131,106,0,101,149],
[159,102,95,118,96,122,97,109,0,156],
[49,36,54,59,72,87,59,61,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,113,110,107,105,101,96,111],
[116,0,120,118,123,113,108,111,105,124],
[99,90,0,104,113,108,102,113,106,103],
[97,92,106,0,102,103,89,110,102,111],
[100,87,97,108,0,103,85,109,95,95],
[103,97,102,107,107,0,99,108,104,98],
[105,102,108,121,125,111,0,111,120,121],
[109,99,97,100,101,102,99,0,113,100],
[114,105,104,108,115,106,90,97,0,111],
[99,86,107,99,115,112,89,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,113,113,103,105,108,109,114],
[105,0,111,102,108,106,114,111,101,113],
[97,99,0,100,95,95,98,101,103,112],
[97,108,110,0,112,107,103,110,110,117],
[97,102,115,98,0,103,103,99,103,104],
[107,104,115,103,107,0,104,106,101,114],
[105,96,112,107,107,106,0,116,97,105],
[102,99,109,100,111,104,94,0,114,101],
[101,109,107,100,107,109,113,96,0,112],
[96,97,98,93,106,96,105,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,101,102,111,93,104,116,97],
[111,0,114,105,109,109,109,109,118,111],
[95,96,0,100,90,101,89,99,106,100],
[109,105,110,0,97,108,94,99,107,108],
[108,101,120,113,0,108,102,103,110,106],
[99,101,109,102,102,0,99,106,112,112],
[117,101,121,116,108,111,0,105,117,120],
[106,101,111,111,107,104,105,0,122,121],
[94,92,104,103,100,98,93,88,0,90],
[113,99,110,102,104,98,90,89,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,118,122,87,78,98,62,92,97],
[114,0,113,120,104,102,125,62,110,99],
[92,97,0,149,61,87,74,76,48,66],
[88,90,61,0,55,94,108,70,67,60],
[123,106,149,155,0,96,109,69,116,111],
[132,108,123,116,114,0,107,113,105,101],
[112,85,136,102,101,103,0,113,80,68],
[148,148,134,140,141,97,97,0,103,107],
[118,100,162,143,94,105,130,107,0,111],
[113,111,144,150,99,109,142,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,107,98,100,106,110,118,106],
[105,0,100,96,96,103,95,97,110,101],
[98,110,0,96,101,107,102,96,116,107],
[103,114,114,0,99,109,109,107,117,107],
[112,114,109,111,0,108,103,109,115,104],
[110,107,103,101,102,0,110,101,112,102],
[104,115,108,101,107,100,0,106,116,105],
[100,113,114,103,101,109,104,0,115,105],
[92,100,94,93,95,98,94,95,0,98],
[104,109,103,103,106,108,105,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,95,210,180,95,180,95,180,180],
[85,0,180,115,85,85,85,85,85,85],
[115,30,0,115,115,115,115,115,85,115],
[0,95,95,0,95,0,95,95,180,85],
[30,125,95,115,0,0,115,125,180,85],
[115,125,95,210,210,0,210,125,180,85],
[30,125,95,115,95,0,0,125,180,85],
[115,125,95,115,85,85,85,0,180,85],
[30,125,125,30,30,30,30,30,0,115],
[30,125,95,125,125,125,125,125,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,106,110,110,123,120,99,122,107],
[83,0,89,77,89,95,92,79,88,97],
[104,121,0,89,96,109,104,102,118,110],
[100,133,121,0,122,109,96,99,123,118],
[100,121,114,88,0,112,92,92,108,102],
[87,115,101,101,98,0,109,103,97,126],
[90,118,106,114,118,101,0,105,120,110],
[111,131,108,111,118,107,105,0,111,104],
[88,122,92,87,102,113,90,99,0,97],
[103,113,100,92,108,84,100,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,78,110,40,50,114,139,89],
[104,0,151,96,105,63,97,88,113,81],
[104,59,0,30,78,13,14,74,131,75],
[132,114,180,0,110,66,93,114,139,85],
[100,105,132,100,0,40,84,108,103,71],
[170,147,197,144,170,0,126,161,208,105],
[160,113,196,117,126,84,0,107,152,96],
[96,122,136,96,102,49,103,0,105,71],
[71,97,79,71,107,2,58,105,0,58],
[121,129,135,125,139,105,114,139,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,102,108,101,119,101,94,103],
[110,0,106,110,106,109,115,101,107,97],
[108,104,0,106,113,107,113,115,106,108],
[108,100,104,0,110,103,107,104,109,104],
[102,104,97,100,0,102,104,99,112,98],
[109,101,103,107,108,0,108,101,97,101],
[91,95,97,103,106,102,0,97,92,98],
[109,109,95,106,111,109,113,0,105,108],
[116,103,104,101,98,113,118,105,0,99],
[107,113,102,106,112,109,112,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,96,103,107,108,97,105,102],
[111,0,97,107,97,103,105,91,116,103],
[111,113,0,115,118,105,118,111,117,111],
[114,103,95,0,110,103,110,97,116,110],
[107,113,92,100,0,102,110,103,121,95],
[103,107,105,107,108,0,119,97,112,112],
[102,105,92,100,100,91,0,90,112,100],
[113,119,99,113,107,113,120,0,119,107],
[105,94,93,94,89,98,98,91,0,97],
[108,107,99,100,115,98,110,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,86,91,110,88,71,84,91],
[109,0,109,111,116,113,101,92,103,100],
[107,101,0,109,111,129,91,80,87,114],
[124,99,101,0,123,111,81,79,91,92],
[119,94,99,87,0,107,86,67,83,79],
[100,97,81,99,103,0,75,88,87,82],
[122,109,119,129,124,135,0,88,103,104],
[139,118,130,131,143,122,122,0,105,106],
[126,107,123,119,127,123,107,105,0,107],
[119,110,96,118,131,128,106,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,118,127,97,93,81,133,111],
[87,0,129,130,139,101,105,95,115,125],
[96,81,0,93,112,93,60,106,86,94],
[92,80,117,0,101,73,86,95,99,92],
[83,71,98,109,0,95,104,83,123,96],
[113,109,117,137,115,0,92,115,108,124],
[117,105,150,124,106,118,0,122,139,128],
[129,115,104,115,127,95,88,0,135,110],
[77,95,124,111,87,102,71,75,0,91],
[99,85,116,118,114,86,82,100,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,99,106,115,107,104,116,110],
[101,0,100,98,102,113,91,98,104,102],
[103,110,0,103,106,118,109,101,107,107],
[111,112,107,0,113,120,107,107,103,111],
[104,108,104,97,0,118,101,97,100,104],
[95,97,92,90,92,0,94,88,104,98],
[103,119,101,103,109,116,0,106,121,111],
[106,112,109,103,113,122,104,0,116,113],
[94,106,103,107,110,106,89,94,0,104],
[100,108,103,99,106,112,99,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,101,128,101,110,116,83,112],
[85,0,89,87,121,100,88,94,81,79],
[106,121,0,94,128,106,123,121,96,98],
[109,123,116,0,123,102,118,118,108,111],
[82,89,82,87,0,104,74,97,65,86],
[109,110,104,108,106,0,94,102,96,94],
[100,122,87,92,136,116,0,129,96,97],
[94,116,89,92,113,108,81,0,87,105],
[127,129,114,102,145,114,114,123,0,109],
[98,131,112,99,124,116,113,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,80,94,84,88,88,81,80,91],
[117,0,98,109,98,127,98,99,116,118],
[130,112,0,113,117,124,105,117,116,111],
[116,101,97,0,112,117,113,127,106,134],
[126,112,93,98,0,124,92,103,99,114],
[122,83,86,93,86,0,86,109,100,115],
[122,112,105,97,118,124,0,132,107,125],
[129,111,93,83,107,101,78,0,112,110],
[130,94,94,104,111,110,103,98,0,100],
[119,92,99,76,96,95,85,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,121,110,102,120,121,118,107,103],
[87,0,97,94,101,111,104,101,101,105],
[89,113,0,98,97,109,102,102,87,101],
[100,116,112,0,109,116,109,104,101,105],
[108,109,113,101,0,111,113,102,106,95],
[90,99,101,94,99,0,101,89,95,95],
[89,106,108,101,97,109,0,96,92,87],
[92,109,108,106,108,121,114,0,102,102],
[103,109,123,109,104,115,118,108,0,106],
[107,105,109,105,115,115,123,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,76,99,110,125,112,122,106],
[114,0,97,117,131,110,128,113,121,129],
[113,113,0,81,126,107,119,124,123,122],
[134,93,129,0,126,106,113,118,150,111],
[111,79,84,84,0,97,105,107,110,110],
[100,100,103,104,113,0,138,96,118,99],
[85,82,91,97,105,72,0,90,124,93],
[98,97,86,92,103,114,120,0,128,103],
[88,89,87,60,100,92,86,82,0,103],
[104,81,88,99,100,111,117,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,79,111,94,82,76,90,95,64],
[119,0,85,114,126,98,106,90,114,87],
[131,125,0,102,142,110,123,113,123,101],
[99,96,108,0,115,94,104,83,112,56],
[116,84,68,95,0,81,104,75,95,75],
[128,112,100,116,129,0,127,111,93,106],
[134,104,87,106,106,83,0,85,96,79],
[120,120,97,127,135,99,125,0,113,87],
[115,96,87,98,115,117,114,97,0,80],
[146,123,109,154,135,104,131,123,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,102,111,115,117,110,102,102,109],
[82,0,107,97,98,99,93,94,101,120],
[108,103,0,110,102,116,124,106,109,120],
[99,113,100,0,106,117,105,95,106,118],
[95,112,108,104,0,116,107,91,98,106],
[93,111,94,93,94,0,94,93,81,97],
[100,117,86,105,103,116,0,104,114,111],
[108,116,104,115,119,117,106,0,102,124],
[108,109,101,104,112,129,96,108,0,112],
[101,90,90,92,104,113,99,86,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,99,100,112,107,92,101,97],
[108,0,107,91,105,121,101,110,113,103],
[96,103,0,92,92,100,106,88,106,101],
[111,119,118,0,114,107,111,101,113,109],
[110,105,118,96,0,105,107,99,109,99],
[98,89,110,103,105,0,104,88,107,99],
[103,109,104,99,103,106,0,104,108,103],
[118,100,122,109,111,122,106,0,113,103],
[109,97,104,97,101,103,102,97,0,98],
[113,107,109,101,111,111,107,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,98,115,101,102,114,108,97],
[100,0,103,104,101,109,99,102,100,103],
[98,107,0,111,114,107,101,108,113,106],
[112,106,99,0,113,102,99,105,104,101],
[95,109,96,97,0,100,107,93,103,101],
[109,101,103,108,110,0,110,102,116,103],
[108,111,109,111,103,100,0,115,111,105],
[96,108,102,105,117,108,95,0,102,98],
[102,110,97,106,107,94,99,108,0,103],
[113,107,104,109,109,107,105,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,107,100,110,119,103,124,89],
[100,0,107,100,121,107,123,115,111,114],
[109,103,0,110,112,107,132,115,125,99],
[103,110,100,0,110,124,106,95,111,98],
[110,89,98,100,0,110,117,111,110,110],
[100,103,103,86,100,0,104,105,105,100],
[91,87,78,104,93,106,0,103,114,103],
[107,95,95,115,99,105,107,0,116,103],
[86,99,85,99,100,105,96,94,0,91],
[121,96,111,112,100,110,107,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,84,94,96,104,100,87,117,90],
[94,0,79,76,93,92,83,85,113,73],
[126,131,0,115,106,124,112,105,146,107],
[116,134,95,0,117,111,117,91,126,117],
[114,117,104,93,0,105,115,93,126,98],
[106,118,86,99,105,0,114,90,128,105],
[110,127,98,93,95,96,0,97,135,104],
[123,125,105,119,117,120,113,0,127,110],
[93,97,64,84,84,82,75,83,0,93],
[120,137,103,93,112,105,106,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,88,92,105,98,94,91,113],
[117,0,104,84,85,105,94,91,84,96],
[113,106,0,108,100,106,103,105,101,119],
[122,126,102,0,96,117,119,93,97,117],
[118,125,110,114,0,99,105,98,103,106],
[105,105,104,93,111,0,116,98,88,119],
[112,116,107,91,105,94,0,105,103,111],
[116,119,105,117,112,112,105,0,107,110],
[119,126,109,113,107,122,107,103,0,122],
[97,114,91,93,104,91,99,100,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,103,105,102,105,116,100,116],
[101,0,113,97,103,106,99,109,110,113],
[109,97,0,105,110,105,108,103,86,117],
[107,113,105,0,108,112,109,111,104,123],
[105,107,100,102,0,84,103,106,104,121],
[108,104,105,98,126,0,107,117,103,115],
[105,111,102,101,107,103,0,108,105,109],
[94,101,107,99,104,93,102,0,86,104],
[110,100,124,106,106,107,105,124,0,119],
[94,97,93,87,89,95,101,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,85,79,116,77,123,183,48,59],
[95,0,144,95,134,121,164,165,62,81],
[125,66,0,51,78,77,110,140,48,33],
[131,115,159,0,148,113,123,154,81,157],
[94,76,132,62,0,120,94,116,81,76],
[133,89,133,97,90,0,122,128,97,131],
[87,46,100,87,116,88,0,95,106,69],
[27,45,70,56,94,82,115,0,75,36],
[162,148,162,129,129,113,104,135,0,131],
[151,129,177,53,134,79,141,174,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,103,125,124,120,112,119,113],
[98,0,98,101,113,94,108,99,94,97],
[105,112,0,105,132,113,123,119,109,115],
[107,109,105,0,119,101,102,107,109,116],
[85,97,78,91,0,99,90,92,98,95],
[86,116,97,109,111,0,109,96,103,107],
[90,102,87,108,120,101,0,101,97,93],
[98,111,91,103,118,114,109,0,102,105],
[91,116,101,101,112,107,113,108,0,105],
[97,113,95,94,115,103,117,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,86,106,91,90,107,76,95,118],
[117,0,134,120,104,93,135,104,118,116],
[124,76,0,96,98,81,132,98,96,92],
[104,90,114,0,100,93,113,79,107,104],
[119,106,112,110,0,119,105,105,101,125],
[120,117,129,117,91,0,126,101,113,113],
[103,75,78,97,105,84,0,95,93,92],
[134,106,112,131,105,109,115,0,102,133],
[115,92,114,103,109,97,117,108,0,114],
[92,94,118,106,85,97,118,77,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,114,102,119,105,106,109,117],
[103,0,112,121,109,112,115,115,105,119],
[107,98,0,109,96,106,104,109,110,116],
[96,89,101,0,93,105,95,97,103,96],
[108,101,114,117,0,121,114,107,115,122],
[91,98,104,105,89,0,96,98,105,102],
[105,95,106,115,96,114,0,108,116,118],
[104,95,101,113,103,112,102,0,103,119],
[101,105,100,107,95,105,94,107,0,112],
[93,91,94,114,88,108,92,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,102,85,108,91,115,100,83,97],
[130,0,109,130,98,103,130,107,108,125],
[108,101,0,107,87,99,125,120,90,117],
[125,80,103,0,98,102,113,120,94,121],
[102,112,123,112,0,113,113,121,114,111],
[119,107,111,108,97,0,132,132,112,119],
[95,80,85,97,97,78,0,94,82,101],
[110,103,90,90,89,78,116,0,66,111],
[127,102,120,116,96,98,128,144,0,128],
[113,85,93,89,99,91,109,99,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,134,132,132,154,133,100,161,124],
[62,0,67,102,104,103,127,53,119,80],
[76,143,0,130,101,116,140,116,119,111],
[78,108,80,0,94,126,83,71,114,80],
[78,106,109,116,0,108,109,74,99,102],
[56,107,94,84,102,0,92,52,92,118],
[77,83,70,127,101,118,0,56,120,117],
[110,157,94,139,136,158,154,0,140,160],
[49,91,91,96,111,118,90,70,0,83],
[86,130,99,130,108,92,93,50,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,103,102,95,89,103,97,97],
[117,0,102,111,119,109,104,109,115,110],
[114,108,0,102,113,103,94,110,111,115],
[107,99,108,0,108,99,106,105,98,97],
[108,91,97,102,0,90,89,101,102,95],
[115,101,107,111,120,0,105,103,105,107],
[121,106,116,104,121,105,0,111,116,109],
[107,101,100,105,109,107,99,0,105,108],
[113,95,99,112,108,105,94,105,0,106],
[113,100,95,113,115,103,101,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,60,62,120,117,71,80,99,84],
[105,0,106,107,118,123,86,118,110,99],
[150,104,0,109,129,119,92,104,109,105],
[148,103,101,0,125,134,129,102,117,109],
[90,92,81,85,0,121,76,85,98,92],
[93,87,91,76,89,0,86,76,82,112],
[139,124,118,81,134,124,0,110,120,108],
[130,92,106,108,125,134,100,0,118,93],
[111,100,101,93,112,128,90,92,0,107],
[126,111,105,101,118,98,102,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,90,127,130,104,105,122,117,127],
[79,0,100,107,116,88,90,111,84,148],
[120,110,0,111,150,108,84,95,81,160],
[83,103,99,0,129,115,80,103,88,156],
[80,94,60,81,0,78,83,89,74,109],
[106,122,102,95,132,0,104,116,87,155],
[105,120,126,130,127,106,0,134,125,149],
[88,99,115,107,121,94,76,0,67,144],
[93,126,129,122,136,123,85,143,0,170],
[83,62,50,54,101,55,61,66,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,97,89,108,113,94,94,90],
[105,0,101,95,73,100,100,94,88,86],
[105,109,0,83,85,100,102,99,94,88],
[113,115,127,0,97,117,106,98,93,110],
[121,137,125,113,0,127,130,104,104,102],
[102,110,110,93,83,0,109,88,88,76],
[97,110,108,104,80,101,0,103,96,106],
[116,116,111,112,106,122,107,0,94,95],
[116,122,116,117,106,122,114,116,0,103],
[120,124,122,100,108,134,104,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,100,109,106,112,107,105,85],
[108,0,104,103,109,99,107,92,96,95],
[111,106,0,102,93,107,99,95,85,84],
[110,107,108,0,104,109,108,106,101,102],
[101,101,117,106,0,105,99,96,103,102],
[104,111,103,101,105,0,124,96,100,88],
[98,103,111,102,111,86,0,111,103,102],
[103,118,115,104,114,114,99,0,108,105],
[105,114,125,109,107,110,107,102,0,93],
[125,115,126,108,108,122,108,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,87,98,97,98,91,103,82],
[111,0,102,106,105,112,110,111,112,103],
[112,108,0,98,118,107,107,98,99,96],
[123,104,112,0,114,122,113,110,112,114],
[112,105,92,96,0,101,96,103,97,92],
[113,98,103,88,109,0,112,105,103,102],
[112,100,103,97,114,98,0,105,99,98],
[119,99,112,100,107,105,105,0,97,106],
[107,98,111,98,113,107,111,113,0,107],
[128,107,114,96,118,108,112,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,106,107,98,102,115,104,104],
[93,0,99,98,105,93,107,107,102,93],
[106,111,0,101,109,111,107,112,104,109],
[104,112,109,0,105,93,110,109,111,96],
[103,105,101,105,0,99,98,114,97,96],
[112,117,99,117,111,0,104,126,108,114],
[108,103,103,100,112,106,0,108,100,103],
[95,103,98,101,96,84,102,0,93,98],
[106,108,106,99,113,102,110,117,0,92],
[106,117,101,114,114,96,107,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,99,111,103,107,115,105,111],
[98,0,98,92,96,95,107,104,96,100],
[110,112,0,107,114,102,116,119,111,122],
[111,118,103,0,112,110,110,122,109,114],
[99,114,96,98,0,121,107,105,101,105],
[107,115,108,100,89,0,100,108,113,112],
[103,103,94,100,103,110,0,107,106,124],
[95,106,91,88,105,102,103,0,92,111],
[105,114,99,101,109,97,104,118,0,114],
[99,110,88,96,105,98,86,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,101,109,107,110,110,100,103],
[107,0,117,110,107,118,100,126,96,105],
[101,93,0,104,104,108,108,109,83,101],
[109,100,106,0,104,104,99,109,106,105],
[101,103,106,106,0,101,106,105,91,97],
[103,92,102,106,109,0,88,108,86,104],
[100,110,102,111,104,122,0,110,95,112],
[100,84,101,101,105,102,100,0,89,113],
[110,114,127,104,119,124,115,121,0,116],
[107,105,109,105,113,106,98,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,97,136,133,121,118,97,134],
[93,0,117,99,107,130,106,92,112,132],
[102,93,0,97,104,103,117,92,106,122],
[113,111,113,0,127,120,114,128,90,121],
[74,103,106,83,0,89,113,96,70,116],
[77,80,107,90,121,0,82,95,74,111],
[89,104,93,96,97,128,0,103,86,119],
[92,118,118,82,114,115,107,0,79,122],
[113,98,104,120,140,136,124,131,0,139],
[76,78,88,89,94,99,91,88,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,110,104,112,124,105,96,107,105],
[85,0,107,94,100,114,98,89,85,104],
[100,103,0,109,92,114,108,86,97,98],
[106,116,101,0,92,123,117,91,92,106],
[98,110,118,118,0,120,129,102,93,103],
[86,96,96,87,90,0,89,71,76,88],
[105,112,102,93,81,121,0,92,97,92],
[114,121,124,119,108,139,118,0,97,120],
[103,125,113,118,117,134,113,113,0,118],
[105,106,112,104,107,122,118,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,102,95,105,91,112,96,106,90],
[80,0,91,89,99,89,90,85,83,76],
[108,119,0,97,113,104,110,95,113,81],
[115,121,113,0,114,101,125,89,113,101],
[105,111,97,96,0,96,106,87,99,95],
[119,121,106,109,114,0,105,108,87,83],
[98,120,100,85,104,105,0,88,101,98],
[114,125,115,121,123,102,122,0,114,105],
[104,127,97,97,111,123,109,96,0,92],
[120,134,129,109,115,127,112,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,108,102,103,109,106,115,113],
[98,0,100,97,108,107,104,105,111,98],
[102,110,0,100,107,103,112,111,122,104],
[102,113,110,0,109,109,101,109,123,105],
[108,102,103,101,0,101,108,106,108,99],
[107,103,107,101,109,0,106,111,127,109],
[101,106,98,109,102,104,0,114,110,102],
[104,105,99,101,104,99,96,0,112,103],
[95,99,88,87,102,83,100,98,0,86],
[97,112,106,105,111,101,108,107,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,119,109,108,106,108,114,130],
[100,0,93,108,97,106,98,91,100,100],
[108,117,0,120,117,114,107,104,111,105],
[91,102,90,0,98,104,97,99,99,105],
[101,113,93,112,0,94,99,100,107,114],
[102,104,96,106,116,0,104,100,111,111],
[104,112,103,113,111,106,0,110,112,110],
[102,119,106,111,110,110,100,0,115,113],
[96,110,99,111,103,99,98,95,0,110],
[80,110,105,105,96,99,100,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,87,93,98,107,96,104,84,100],
[99,0,93,105,98,114,109,100,98,110],
[123,117,0,111,108,117,120,111,105,121],
[117,105,99,0,97,99,105,99,102,110],
[112,112,102,113,0,118,117,105,101,116],
[103,96,93,111,92,0,104,110,86,102],
[114,101,90,105,93,106,0,102,92,109],
[106,110,99,111,105,100,108,0,93,109],
[126,112,105,108,109,124,118,117,0,121],
[110,100,89,100,94,108,101,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,79,90,106,96,85,92,85,90],
[132,0,120,109,129,116,122,116,119,103],
[131,90,0,88,106,108,99,97,113,99],
[120,101,122,0,122,105,106,101,110,99],
[104,81,104,88,0,91,94,96,98,96],
[114,94,102,105,119,0,107,110,103,100],
[125,88,111,104,116,103,0,108,111,98],
[118,94,113,109,114,100,102,0,96,109],
[125,91,97,100,112,107,99,114,0,107],
[120,107,111,111,114,110,112,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,104,104,113,99,110,112,102],
[99,0,103,108,98,105,97,94,110,106],
[111,107,0,108,113,115,97,105,118,111],
[106,102,102,0,105,106,99,102,113,100],
[106,112,97,105,0,111,103,104,113,104],
[97,105,95,104,99,0,95,92,107,102],
[111,113,113,111,107,115,0,116,122,103],
[100,116,105,108,106,118,94,0,112,111],
[98,100,92,97,97,103,88,98,0,98],
[108,104,99,110,106,108,107,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,83,96,125,110,141,134,119,111],
[119,0,104,96,118,103,138,137,106,78],
[127,106,0,96,115,127,105,141,110,107],
[114,114,114,0,125,110,140,131,83,108],
[85,92,95,85,0,128,111,129,96,96],
[100,107,83,100,82,0,117,123,91,72],
[69,72,105,70,99,93,0,100,97,60],
[76,73,69,79,81,87,110,0,76,95],
[91,104,100,127,114,119,113,134,0,88],
[99,132,103,102,114,138,150,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,124,115,105,115,99,119,115],
[106,0,100,114,99,110,104,109,110,111],
[90,110,0,104,90,99,107,96,109,107],
[86,96,106,0,110,110,90,103,108,103],
[95,111,120,100,0,110,99,102,111,102],
[105,100,111,100,100,0,87,108,112,121],
[95,106,103,120,111,123,0,122,113,114],
[111,101,114,107,108,102,88,0,108,101],
[91,100,101,102,99,98,97,102,0,110],
[95,99,103,107,108,89,96,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,105,112,98,105,106,112,108],
[104,0,113,109,122,108,111,104,111,110],
[99,97,0,100,103,91,99,85,103,107],
[105,101,110,0,109,108,112,106,109,107],
[98,88,107,101,0,94,95,94,110,114],
[112,102,119,102,116,0,105,106,108,122],
[105,99,111,98,115,105,0,104,112,105],
[104,106,125,104,116,104,106,0,114,117],
[98,99,107,101,100,102,98,96,0,100],
[102,100,103,103,96,88,105,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,86,116,100,116,113,140,105],
[109,0,106,105,131,108,102,128,124,102],
[103,104,0,92,112,98,91,102,125,102],
[124,105,118,0,130,109,91,137,131,125],
[94,79,98,80,0,90,63,86,97,95],
[110,102,112,101,120,0,93,133,105,113],
[94,108,119,119,147,117,0,135,143,135],
[97,82,108,73,124,77,75,0,120,100],
[70,86,85,79,113,105,67,90,0,114],
[105,108,108,85,115,97,75,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,91,111,105,106,106,104,100,108],
[95,0,112,107,105,105,105,98,99,92],
[119,98,0,115,112,121,109,95,98,111],
[99,103,95,0,116,112,100,105,101,108],
[105,105,98,94,0,108,97,97,106,111],
[104,105,89,98,102,0,94,103,106,106],
[104,105,101,110,113,116,0,116,116,101],
[106,112,115,105,113,107,94,0,114,109],
[110,111,112,109,104,104,94,96,0,108],
[102,118,99,102,99,104,109,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,111,109,109,131,92,106,116],
[92,0,77,94,101,117,142,132,138,120],
[92,133,0,124,140,130,153,145,109,141],
[99,116,86,0,102,108,137,95,94,114],
[101,109,70,108,0,118,123,97,107,92],
[101,93,80,102,92,0,111,99,85,110],
[79,68,57,73,87,99,0,84,74,90],
[118,78,65,115,113,111,126,0,99,111],
[104,72,101,116,103,125,136,111,0,105],
[94,90,69,96,118,100,120,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,93,111,94,102,102,96,103],
[115,0,103,121,117,113,123,110,112,128],
[115,107,0,114,120,111,108,107,102,114],
[117,89,96,0,109,104,99,103,101,109],
[99,93,90,101,0,93,104,101,109,108],
[116,97,99,106,117,0,101,103,110,115],
[108,87,102,111,106,109,0,116,104,103],
[108,100,103,107,109,107,94,0,109,117],
[114,98,108,109,101,100,106,101,0,117],
[107,82,96,101,102,95,107,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,92,111,103,108,118,104,116],
[96,0,109,95,118,89,104,99,110,114],
[102,101,0,94,92,86,97,100,98,106],
[118,115,116,0,105,105,116,116,125,123],
[99,92,118,105,0,101,105,107,114,115],
[107,121,124,105,109,0,120,112,113,124],
[102,106,113,94,105,90,0,104,107,110],
[92,111,110,94,103,98,106,0,105,114],
[106,100,112,85,96,97,103,105,0,105],
[94,96,104,87,95,86,100,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,112,108,88,103,89,91,101,82],
[82,0,98,103,90,88,83,80,100,90],
[98,112,0,107,98,87,93,87,102,91],
[102,107,103,0,88,88,116,80,90,76],
[122,120,112,122,0,99,105,102,92,95],
[107,122,123,122,111,0,105,92,100,107],
[121,127,117,94,105,105,0,77,111,96],
[119,130,123,130,108,118,133,0,103,100],
[109,110,108,120,118,110,99,107,0,96],
[128,120,119,134,115,103,114,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,101,102,120,111,97,134,119],
[101,0,123,109,108,115,118,113,137,93],
[91,87,0,86,94,112,94,88,116,96],
[109,101,124,0,115,109,116,103,109,104],
[108,102,116,95,0,113,98,90,110,87],
[90,95,98,101,97,0,103,78,91,83],
[99,92,116,94,112,107,0,97,127,92],
[113,97,122,107,120,132,113,0,123,97],
[76,73,94,101,100,119,83,87,0,80],
[91,117,114,106,123,127,118,113,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,123,78,99,119,60,69,78,67],
[141,0,131,79,118,156,106,70,89,74],
[87,79,0,58,40,121,73,51,31,23],
[132,131,152,0,120,184,97,89,127,131],
[111,92,170,90,0,172,79,105,122,145],
[91,54,89,26,38,0,42,54,80,23],
[150,104,137,113,131,168,0,115,121,134],
[141,140,159,121,105,156,95,0,136,111],
[132,121,179,83,88,130,89,74,0,94],
[143,136,187,79,65,187,76,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,116,123,106,93,100,95,114,113],
[115,0,124,109,122,111,94,103,110,115],
[94,86,0,99,119,92,97,93,109,87],
[87,101,111,0,111,81,91,97,104,106],
[104,88,91,99,0,64,78,99,92,94],
[117,99,118,129,146,0,109,112,117,99],
[110,116,113,119,132,101,0,125,107,103],
[115,107,117,113,111,98,85,0,97,111],
[96,100,101,106,118,93,103,113,0,102],
[97,95,123,104,116,111,107,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,107,101,115,92,106,101,92],
[115,0,101,115,108,108,103,118,97,105],
[111,109,0,111,108,124,99,122,103,102],
[103,95,99,0,103,116,101,107,98,95],
[109,102,102,107,0,113,100,109,104,93],
[95,102,86,94,97,0,98,108,95,103],
[118,107,111,109,110,112,0,120,109,98],
[104,92,88,103,101,102,90,0,91,89],
[109,113,107,112,106,115,101,119,0,102],
[118,105,108,115,117,107,112,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,115,109,112,116,85,114,113],
[109,0,121,119,122,114,118,104,119,116],
[100,89,0,110,107,120,105,108,111,118],
[95,91,100,0,101,103,101,100,103,111],
[101,88,103,109,0,111,110,114,112,111],
[98,96,90,107,99,0,99,98,108,98],
[94,92,105,109,100,111,0,96,104,97],
[125,106,102,110,96,112,114,0,110,111],
[96,91,99,107,98,102,106,100,0,107],
[97,94,92,99,99,112,113,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,82,81,105,85,118,77,114],
[115,0,126,105,72,97,114,95,93,106],
[90,84,0,86,74,98,89,95,63,100],
[128,105,124,0,89,101,83,127,93,126],
[129,138,136,121,0,105,107,132,111,114],
[105,113,112,109,105,0,99,118,93,122],
[125,96,121,127,103,111,0,124,102,140],
[92,115,115,83,78,92,86,0,95,107],
[133,117,147,117,99,117,108,115,0,127],
[96,104,110,84,96,88,70,103,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,105,111,97,100,123,88,88],
[109,0,79,93,109,90,105,109,108,95],
[110,131,0,110,101,97,111,113,115,90],
[105,117,100,0,110,109,91,107,91,97],
[99,101,109,100,0,94,100,125,100,97],
[113,120,113,101,116,0,104,116,121,88],
[110,105,99,119,110,106,0,119,101,107],
[87,101,97,103,85,94,91,0,78,90],
[122,102,95,119,110,89,109,132,0,96],
[122,115,120,113,113,122,103,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,102,101,95,135,92,83,117,115],
[87,0,90,134,91,115,92,91,81,122],
[108,120,0,108,113,112,81,89,101,116],
[109,76,102,0,84,117,65,59,86,114],
[115,119,97,126,0,169,104,77,95,151],
[75,95,98,93,41,0,42,45,79,91],
[118,118,129,145,106,168,0,112,82,142],
[127,119,121,151,133,165,98,0,114,156],
[93,129,109,124,115,131,128,96,0,157],
[95,88,94,96,59,119,68,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,111,114,114,106,97,98,119],
[119,0,112,119,144,116,130,110,105,128],
[118,98,0,112,128,129,126,110,112,140],
[99,91,98,0,106,116,113,97,110,123],
[96,66,82,104,0,98,103,97,87,102],
[96,94,81,94,112,0,98,102,109,117],
[104,80,84,97,107,112,0,99,99,108],
[113,100,100,113,113,108,111,0,95,123],
[112,105,98,100,123,101,111,115,0,113],
[91,82,70,87,108,93,102,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,115,98,113,73,105,95,127],
[115,0,113,111,100,119,95,109,97,131],
[102,97,0,119,94,104,81,110,73,123],
[95,99,91,0,76,84,84,92,82,117],
[112,110,116,134,0,118,99,112,114,135],
[97,91,106,126,92,0,95,91,103,128],
[137,115,129,126,111,115,0,111,101,148],
[105,101,100,118,98,119,99,0,78,111],
[115,113,137,128,96,107,109,132,0,123],
[83,79,87,93,75,82,62,99,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,96,97,108,118,105,113,111],
[98,0,100,102,100,102,100,96,104,100],
[107,110,0,104,101,115,115,102,110,106],
[114,108,106,0,115,116,120,103,110,109],
[113,110,109,95,0,118,122,108,111,111],
[102,108,95,94,92,0,110,106,98,91],
[92,110,95,90,88,100,0,91,88,88],
[105,114,108,107,102,104,119,0,111,98],
[97,106,100,100,99,112,122,99,0,106],
[99,110,104,101,99,119,122,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,104,97,96,97,122,101,96],
[111,0,94,101,98,97,105,109,104,109],
[117,116,0,105,120,109,111,116,112,104],
[106,109,105,0,104,97,95,110,105,102],
[113,112,90,106,0,99,97,108,103,99],
[114,113,101,113,111,0,107,118,109,108],
[113,105,99,115,113,103,0,121,115,108],
[88,101,94,100,102,92,89,0,95,96],
[109,106,98,105,107,101,95,115,0,95],
[114,101,106,108,111,102,102,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,117,118,100,103,118,120,126,113],
[82,0,107,96,92,89,111,106,91,112],
[93,103,0,105,100,96,115,109,104,108],
[92,114,105,0,106,99,116,114,101,118],
[110,118,110,104,0,105,122,107,110,115],
[107,121,114,111,105,0,120,118,111,122],
[92,99,95,94,88,90,0,113,99,99],
[90,104,101,96,103,92,97,0,105,104],
[84,119,106,109,100,99,111,105,0,109],
[97,98,102,92,95,88,111,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,126,136,112,103,111,76,114,98],
[72,0,120,92,111,109,100,94,117,99],
[84,90,0,89,88,94,82,85,120,113],
[74,118,121,0,104,114,111,83,114,92],
[98,99,122,106,0,105,101,92,117,108],
[107,101,116,96,105,0,98,109,117,108],
[99,110,128,99,109,112,0,105,134,122],
[134,116,125,127,118,101,105,0,132,106],
[96,93,90,96,93,93,76,78,0,97],
[112,111,97,118,102,102,88,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,105,106,107,99,114,114,100],
[108,0,105,102,98,101,113,110,113,105],
[102,105,0,105,102,107,108,111,116,102],
[105,108,105,0,110,99,93,107,118,95],
[104,112,108,100,0,105,102,115,117,100],
[103,109,103,111,105,0,111,112,110,104],
[111,97,102,117,108,99,0,110,111,102],
[96,100,99,103,95,98,100,0,110,101],
[96,97,94,92,93,100,99,100,0,97],
[110,105,108,115,110,106,108,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,99,97,99,101,103,94,101],
[118,0,113,115,103,118,110,114,113,115],
[105,97,0,104,103,106,96,101,101,112],
[111,95,106,0,96,103,101,108,95,102],
[113,107,107,114,0,108,101,113,112,119],
[111,92,104,107,102,0,94,107,99,107],
[109,100,114,109,109,116,0,112,119,122],
[107,96,109,102,97,103,98,0,93,108],
[116,97,109,115,98,111,91,117,0,105],
[109,95,98,108,91,103,88,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,113,97,125,140,134,154,116,115],
[65,0,107,86,146,108,129,163,108,121],
[97,103,0,107,125,111,119,129,92,101],
[113,124,103,0,132,126,136,121,93,119],
[85,64,85,78,0,92,106,107,95,99],
[70,102,99,84,118,0,115,119,95,86],
[76,81,91,74,104,95,0,123,83,94],
[56,47,81,89,103,91,87,0,87,98],
[94,102,118,117,115,115,127,123,0,132],
[95,89,109,91,111,124,116,112,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,107,111,109,96,113,109,100],
[107,0,99,109,120,108,108,116,102,109],
[105,111,0,107,114,112,110,103,111,107],
[103,101,103,0,107,97,101,104,110,106],
[99,90,96,103,0,106,97,100,103,102],
[101,102,98,113,104,0,97,100,99,95],
[114,102,100,109,113,113,0,108,117,113],
[97,94,107,106,110,110,102,0,101,97],
[101,108,99,100,107,111,93,109,0,95],
[110,101,103,104,108,115,97,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,92,111,107,102,118,107,108,114],
[86,0,61,88,79,60,81,71,103,83],
[118,149,0,93,81,109,109,107,115,99],
[99,122,117,0,100,95,79,85,83,93],
[103,131,129,110,0,76,106,103,108,114],
[108,150,101,115,134,0,108,104,147,130],
[92,129,101,131,104,102,0,93,90,115],
[103,139,103,125,107,106,117,0,104,120],
[102,107,95,127,102,63,120,106,0,92],
[96,127,111,117,96,80,95,90,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,117,103,97,113,101,108,91],
[92,0,106,115,93,84,104,79,82,76],
[103,104,0,112,110,91,108,106,118,95],
[93,95,98,0,86,96,105,89,95,79],
[107,117,100,124,0,92,97,107,104,85],
[113,126,119,114,118,0,109,103,114,107],
[97,106,102,105,113,101,0,105,94,94],
[109,131,104,121,103,107,105,0,116,122],
[102,128,92,115,106,96,116,94,0,89],
[119,134,115,131,125,103,116,88,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,102,95,91,92,86,101,94],
[108,0,102,108,100,96,94,95,106,96],
[116,108,0,106,111,109,88,90,95,97],
[108,102,104,0,119,114,94,105,109,101],
[115,110,99,91,0,100,80,95,90,107],
[119,114,101,96,110,0,88,95,109,110],
[118,116,122,116,130,122,0,99,120,119],
[124,115,120,105,115,115,111,0,120,114],
[109,104,115,101,120,101,90,90,0,112],
[116,114,113,109,103,100,91,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,104,94,117,108,114,124,116],
[94,0,115,98,105,101,100,101,119,109],
[94,95,0,89,97,104,103,88,118,108],
[106,112,121,0,94,108,107,101,127,111],
[116,105,113,116,0,106,102,114,125,121],
[93,109,106,102,104,0,101,101,122,115],
[102,110,107,103,108,109,0,99,117,114],
[96,109,122,109,96,109,111,0,126,119],
[86,91,92,83,85,88,93,84,0,93],
[94,101,102,99,89,95,96,91,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,103,108,85,95,93,95,96],
[107,0,90,104,111,99,100,99,107,107],
[117,120,0,125,118,97,116,113,110,105],
[107,106,85,0,118,90,99,92,105,106],
[102,99,92,92,0,86,95,102,88,97],
[125,111,113,120,124,0,111,97,108,112],
[115,110,94,111,115,99,0,100,109,113],
[117,111,97,118,108,113,110,0,116,106],
[115,103,100,105,122,102,101,94,0,96],
[114,103,105,104,113,98,97,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,109,121,111,113,114,100,102],
[88,0,101,93,116,100,79,94,76,105],
[103,109,0,103,135,103,92,104,86,103],
[101,117,107,0,113,120,116,120,107,120],
[89,94,75,97,0,82,92,91,88,95],
[99,110,107,90,128,0,95,112,100,116],
[97,131,118,94,118,115,0,111,93,115],
[96,116,106,90,119,98,99,0,92,100],
[110,134,124,103,122,110,117,118,0,120],
[108,105,107,90,115,94,95,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,105,124,135,127,116,105,117],
[92,0,102,84,98,105,106,99,101,80],
[100,108,0,86,111,119,125,95,105,101],
[105,126,124,0,119,124,123,113,125,105],
[86,112,99,91,0,119,111,91,104,99],
[75,105,91,86,91,0,89,82,90,81],
[83,104,85,87,99,121,0,89,106,76],
[94,111,115,97,119,128,121,0,106,91],
[105,109,105,85,106,120,104,104,0,102],
[93,130,109,105,111,129,134,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,121,103,123,131,182,187,99,51],
[140,0,115,103,145,99,166,118,29,101],
[89,95,0,99,139,100,101,128,95,95],
[107,107,111,0,79,95,107,107,63,63],
[87,65,71,131,0,86,132,77,60,101],
[79,111,110,115,124,0,144,188,111,79],
[28,44,109,103,78,66,0,111,40,61],
[23,92,82,103,133,22,99,0,40,61],
[111,181,115,147,150,99,170,170,0,117],
[159,109,115,147,109,131,149,149,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,109,101,103,106,111,104,112],
[108,0,118,105,116,105,111,103,103,100],
[105,92,0,97,88,94,103,103,87,101],
[101,105,113,0,97,101,109,106,98,114],
[109,94,122,113,0,102,109,104,97,109],
[107,105,116,109,108,0,105,108,106,107],
[104,99,107,101,101,105,0,97,100,107],
[99,107,107,104,106,102,113,0,96,105],
[106,107,123,112,113,104,110,114,0,110],
[98,110,109,96,101,103,103,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,106,100,98,96,107,99,109],
[109,0,112,108,104,111,108,102,104,120],
[104,98,0,95,93,96,99,88,105,96],
[104,102,115,0,109,103,102,96,103,119],
[110,106,117,101,0,99,103,93,106,111],
[112,99,114,107,111,0,97,90,104,104],
[114,102,111,108,107,113,0,107,102,108],
[103,108,122,114,117,120,103,0,115,117],
[111,106,105,107,104,106,108,95,0,113],
[101,90,114,91,99,106,102,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,118,89,101,103,90,123,112],
[115,0,116,112,123,129,105,100,114,132],
[122,94,0,109,121,128,105,124,109,114],
[92,98,101,0,98,109,103,84,106,88],
[121,87,89,112,0,110,100,102,90,95],
[109,81,82,101,100,0,97,106,89,103],
[107,105,105,107,110,113,0,105,94,107],
[120,110,86,126,108,104,105,0,115,125],
[87,96,101,104,120,121,116,95,0,106],
[98,78,96,122,115,107,103,85,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,79,157,129,172,75,49,126,78],
[105,0,106,141,183,180,118,103,141,89],
[131,104,0,133,129,183,75,36,128,78],
[53,69,77,0,91,104,39,36,88,42],
[81,27,81,119,0,171,66,36,92,39],
[38,30,27,106,39,0,75,36,85,78],
[135,92,135,171,144,135,0,141,105,65],
[161,107,174,174,174,174,69,0,147,53],
[84,69,82,122,118,125,105,63,0,105],
[132,121,132,168,171,132,145,157,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,92,91,100,98,93,103,105],
[95,0,107,96,109,97,100,92,110,107],
[110,103,0,103,106,109,102,101,113,108],
[118,114,107,0,124,111,120,109,102,118],
[119,101,104,86,0,110,103,105,112,105],
[110,113,101,99,100,0,115,96,113,110],
[112,110,108,90,107,95,0,92,116,110],
[117,118,109,101,105,114,118,0,114,122],
[107,100,97,108,98,97,94,96,0,96],
[105,103,102,92,105,100,100,88,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,114,104,102,102,109,107,108,110],
[85,0,105,99,82,80,106,102,92,80],
[96,105,0,101,93,95,115,94,98,88],
[106,111,109,0,79,83,99,99,93,89],
[108,128,117,131,0,122,118,106,117,99],
[108,130,115,127,88,0,142,116,114,114],
[101,104,95,111,92,68,0,83,90,90],
[103,108,116,111,104,94,127,0,89,107],
[102,118,112,117,93,96,120,121,0,104],
[100,130,122,121,111,96,120,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,127,101,92,107,105,93,99],
[110,0,106,121,114,89,91,115,113,88],
[102,104,0,125,116,103,106,124,111,100],
[83,89,85,0,82,97,94,107,104,79],
[109,96,94,128,0,93,113,138,107,99],
[118,121,107,113,117,0,100,102,108,95],
[103,119,104,116,97,110,0,117,117,111],
[105,95,86,103,72,108,93,0,94,88],
[117,97,99,106,103,102,93,116,0,95],
[111,122,110,131,111,115,99,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,89,104,85,116,69,93,82,97],
[126,0,96,121,112,129,103,115,108,103],
[121,114,0,106,120,134,106,105,113,117],
[106,89,104,0,92,101,77,98,95,93],
[125,98,90,118,0,107,95,104,108,114],
[94,81,76,109,103,0,76,81,83,90],
[141,107,104,133,115,134,0,106,110,119],
[117,95,105,112,106,129,104,0,92,103],
[128,102,97,115,102,127,100,118,0,124],
[113,107,93,117,96,120,91,107,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,76,81,80,75,74,71,75,65],
[134,0,117,116,101,101,108,88,102,110],
[134,93,0,101,120,106,101,79,106,105],
[129,94,109,0,106,114,101,69,89,92],
[130,109,90,104,0,116,104,103,111,100],
[135,109,104,96,94,0,110,81,78,98],
[136,102,109,109,106,100,0,97,118,114],
[139,122,131,141,107,129,113,0,95,117],
[135,108,104,121,99,132,92,115,0,93],
[145,100,105,118,110,112,96,93,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,104,107,109,91,114,99,112],
[103,0,112,116,112,102,106,121,81,111],
[90,98,0,106,106,93,90,97,88,110],
[106,94,104,0,104,91,97,120,94,102],
[103,98,104,106,0,98,93,112,85,106],
[101,108,117,119,112,0,94,107,88,99],
[119,104,120,113,117,116,0,121,110,108],
[96,89,113,90,98,103,89,0,75,92],
[111,129,122,116,125,122,100,135,0,119],
[98,99,100,108,104,111,102,118,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,97,105,102,105,104,126,114],
[101,0,109,117,110,97,102,110,119,110],
[105,101,0,112,95,111,109,111,129,119],
[113,93,98,0,88,102,104,106,128,111],
[105,100,115,122,0,113,107,105,116,118],
[108,113,99,108,97,0,100,110,116,118],
[105,108,101,106,103,110,0,118,130,101],
[106,100,99,104,105,100,92,0,117,101],
[84,91,81,82,94,94,80,93,0,99],
[96,100,91,99,92,92,109,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,118,111,93,122,109,115,107],
[95,0,113,116,89,88,116,117,106,93],
[94,97,0,112,108,105,101,111,106,105],
[92,94,98,0,96,89,90,117,86,101],
[99,121,102,114,0,97,117,120,117,111],
[117,122,105,121,113,0,115,126,119,106],
[88,94,109,120,93,95,0,115,108,103],
[101,93,99,93,90,84,95,0,85,93],
[95,104,104,124,93,91,102,125,0,96],
[103,117,105,109,99,104,107,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,103,104,97,102,117,107,102],
[109,0,119,107,109,110,98,112,102,116],
[95,91,0,93,109,110,91,107,110,92],
[107,103,117,0,108,108,100,102,116,101],
[106,101,101,102,0,113,106,106,113,104],
[113,100,100,102,97,0,96,105,112,104],
[108,112,119,110,104,114,0,111,116,108],
[93,98,103,108,104,105,99,0,110,93],
[103,108,100,94,97,98,94,100,0,86],
[108,94,118,109,106,106,102,117,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,115,105,109,109,117,110,117],
[103,0,97,117,114,116,111,116,120,114],
[110,113,0,115,104,114,123,133,129,120],
[95,93,95,0,100,97,102,120,104,121],
[105,96,106,110,0,99,103,121,113,107],
[101,94,96,113,111,0,111,100,111,115],
[101,99,87,108,107,99,0,115,112,116],
[93,94,77,90,89,110,95,0,107,105],
[100,90,81,106,97,99,98,103,0,100],
[93,96,90,89,103,95,94,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,90,99,86,94,96,92,86,85],
[114,0,101,95,99,91,107,101,97,99],
[120,109,0,108,105,107,111,96,108,104],
[111,115,102,0,113,105,102,103,97,101],
[124,111,105,97,0,95,113,107,105,98],
[116,119,103,105,115,0,107,107,103,100],
[114,103,99,108,97,103,0,93,92,95],
[118,109,114,107,103,103,117,0,100,108],
[124,113,102,113,105,107,118,110,0,106],
[125,111,106,109,112,110,115,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,101,83,98,101,108,93,106],
[117,0,105,114,104,97,114,112,110,104],
[109,105,0,122,103,102,110,115,109,113],
[109,96,88,0,98,98,106,108,99,108],
[127,106,107,112,0,105,106,106,118,123],
[112,113,108,112,105,0,115,101,118,127],
[109,96,100,104,104,95,0,90,100,110],
[102,98,95,102,104,109,120,0,119,120],
[117,100,101,111,92,92,110,91,0,109],
[104,106,97,102,87,83,100,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,135,136,102,141,175,148,150,134],
[89,0,132,92,101,129,154,106,112,119],
[75,78,0,94,82,118,133,116,106,116],
[74,118,116,0,81,121,123,90,104,94],
[108,109,128,129,0,104,161,101,121,140],
[69,81,92,89,106,0,135,75,112,112],
[35,56,77,87,49,75,0,81,68,85],
[62,104,94,120,109,135,129,0,105,120],
[60,98,104,106,89,98,142,105,0,118],
[76,91,94,116,70,98,125,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,141,132,113,105,83,123,109,124],
[76,0,137,112,129,81,80,110,79,140],
[69,73,0,96,84,95,54,96,66,87],
[78,98,114,0,96,81,68,93,71,103],
[97,81,126,114,0,92,85,114,83,52],
[105,129,115,129,118,0,82,90,87,114],
[127,130,156,142,125,128,0,146,88,127],
[87,100,114,117,96,120,64,0,67,90],
[101,131,144,139,127,123,122,143,0,107],
[86,70,123,107,158,96,83,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,64,128,98,111,99,109,75,86],
[90,0,78,97,103,117,100,92,87,90],
[146,132,0,135,120,132,113,136,127,104],
[82,113,75,0,88,91,86,79,100,97],
[112,107,90,122,0,141,104,102,102,97],
[99,93,78,119,69,0,111,80,99,88],
[111,110,97,124,106,99,0,93,108,113],
[101,118,74,131,108,130,117,0,98,117],
[135,123,83,110,108,111,102,112,0,96],
[124,120,106,113,113,122,97,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,102,102,104,95,106,91,99],
[112,0,113,120,108,113,128,98,102,103],
[105,97,0,107,113,99,101,113,105,97],
[108,90,103,0,104,105,99,101,92,99],
[108,102,97,106,0,99,87,88,95,100],
[106,97,111,105,111,0,104,77,109,105],
[115,82,109,111,123,106,0,100,103,107],
[104,112,97,109,122,133,110,0,112,110],
[119,108,105,118,115,101,107,98,0,103],
[111,107,113,111,110,105,103,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,104,103,100,95,101,107,98],
[117,0,112,112,103,112,104,110,104,110],
[104,98,0,116,100,112,103,101,98,104],
[106,98,94,0,107,102,99,104,98,109],
[107,107,110,103,0,103,98,113,95,99],
[110,98,98,108,107,0,95,109,111,94],
[115,106,107,111,112,115,0,108,103,106],
[109,100,109,106,97,101,102,0,96,103],
[103,106,112,112,115,99,107,114,0,120],
[112,100,106,101,111,116,104,107,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,123,115,98,117,101,112,101,99],
[87,0,113,97,99,95,97,89,94,95],
[87,97,0,104,83,97,98,102,88,88],
[95,113,106,0,99,107,102,100,93,97],
[112,111,127,111,0,115,117,107,105,97],
[93,115,113,103,95,0,92,89,91,104],
[109,113,112,108,93,118,0,100,100,98],
[98,121,108,110,103,121,110,0,99,106],
[109,116,122,117,105,119,110,111,0,102],
[111,115,122,113,113,106,112,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,50,135,95,106,70,114,69,123],
[135,0,125,174,140,135,138,179,75,79],
[160,85,0,186,97,93,135,142,95,79],
[75,36,24,0,83,69,68,62,86,59],
[115,70,113,127,0,104,126,120,71,76],
[104,75,117,141,106,0,135,114,92,103],
[140,72,75,142,84,75,0,152,97,53],
[96,31,68,148,90,96,58,0,75,79],
[141,135,115,124,139,118,113,135,0,101],
[87,131,131,151,134,107,157,131,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,118,104,112,105,103,106,93,106],
[123,0,130,116,118,105,107,121,109,106],
[92,80,0,87,98,89,80,91,85,96],
[106,94,123,0,100,99,102,103,108,111],
[98,92,112,110,0,91,98,105,103,105],
[105,105,121,111,119,0,110,106,115,111],
[107,103,130,108,112,100,0,114,98,115],
[104,89,119,107,105,104,96,0,101,108],
[117,101,125,102,107,95,112,109,0,115],
[104,104,114,99,105,99,95,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,92,113,107,108,107,98,106],
[106,0,111,102,110,101,98,104,106,99],
[113,99,0,101,116,99,100,109,101,99],
[118,108,109,0,113,104,105,121,115,114],
[97,100,94,97,0,99,94,108,106,101],
[103,109,111,106,111,0,105,116,114,107],
[102,112,110,105,116,105,0,116,109,105],
[103,106,101,89,102,94,94,0,99,106],
[112,104,109,95,104,96,101,111,0,101],
[104,111,111,96,109,103,105,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,106,107,118,110,123,99,100],
[113,0,105,110,101,114,109,129,103,105],
[96,105,0,107,109,107,113,110,109,101],
[104,100,103,0,91,113,111,127,105,99],
[103,109,101,119,0,108,104,117,105,106],
[92,96,103,97,102,0,105,120,108,97],
[100,101,97,99,106,105,0,117,102,92],
[87,81,100,83,93,90,93,0,98,91],
[111,107,101,105,105,102,108,112,0,108],
[110,105,109,111,104,113,118,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,111,113,97,94,113,104,98],
[122,0,97,102,112,122,118,99,114,103],
[105,113,0,106,117,119,99,97,106,98],
[99,108,104,0,101,122,88,114,112,105],
[97,98,93,109,0,113,85,101,101,127],
[113,88,91,88,97,0,101,80,92,90],
[116,92,111,122,125,109,0,114,104,105],
[97,111,113,96,109,130,96,0,120,110],
[106,96,104,98,109,118,106,90,0,90],
[112,107,112,105,83,120,105,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,129,124,102,106,117,101,111,126],
[69,0,107,86,104,84,100,66,80,89],
[81,103,0,88,71,70,105,85,79,95],
[86,124,122,0,114,117,108,101,114,131],
[108,106,139,96,0,88,117,88,93,131],
[104,126,140,93,122,0,129,96,118,100],
[93,110,105,102,93,81,0,90,91,92],
[109,144,125,109,122,114,120,0,87,117],
[99,130,131,96,117,92,119,123,0,120],
[84,121,115,79,79,110,118,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,102,116,113,108,99,95,107],
[96,0,102,94,89,92,98,97,92,95],
[104,108,0,98,97,94,108,102,96,102],
[108,116,112,0,107,109,114,104,104,113],
[94,121,113,103,0,108,115,99,98,111],
[97,118,116,101,102,0,103,101,105,100],
[102,112,102,96,95,107,0,101,92,105],
[111,113,108,106,111,109,109,0,102,102],
[115,118,114,106,112,105,118,108,0,114],
[103,115,108,97,99,110,105,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,110,107,104,106,104,122,132],
[105,0,126,113,96,115,117,108,101,128],
[87,84,0,94,86,95,100,86,88,105],
[100,97,116,0,106,105,107,97,97,118],
[103,114,124,104,0,117,114,105,100,123],
[106,95,115,105,93,0,93,89,95,113],
[104,93,110,103,96,117,0,99,91,108],
[106,102,124,113,105,121,111,0,111,126],
[88,109,122,113,110,115,119,99,0,116],
[78,82,105,92,87,97,102,84,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,111,112,110,104,116,112,109],
[98,0,117,117,104,111,112,108,115,112],
[101,93,0,99,94,101,98,107,100,95],
[99,93,111,0,103,101,96,110,89,112],
[98,106,116,107,0,105,113,114,107,111],
[100,99,109,109,105,0,109,102,99,105],
[106,98,112,114,97,101,0,103,98,101],
[94,102,103,100,96,108,107,0,93,111],
[98,95,110,121,103,111,112,117,0,105],
[101,98,115,98,99,105,109,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,73,92,101,90,99,98,92],
[107,0,127,97,103,105,101,108,116,119],
[104,83,0,102,98,103,94,112,118,103],
[137,113,108,0,105,119,108,119,112,115],
[118,107,112,105,0,109,110,116,115,116],
[109,105,107,91,101,0,83,114,108,118],
[120,109,116,102,100,127,0,103,117,106],
[111,102,98,91,94,96,107,0,108,110],
[112,94,92,98,95,102,93,102,0,121],
[118,91,107,95,94,92,104,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,108,113,109,114,131,103,106],
[101,0,102,117,114,115,113,122,103,105],
[100,108,0,118,105,111,110,125,100,101],
[102,93,92,0,103,92,104,114,93,108],
[97,96,105,107,0,102,108,117,102,105],
[101,95,99,118,108,0,112,120,97,97],
[96,97,100,106,102,98,0,118,95,98],
[79,88,85,96,93,90,92,0,88,87],
[107,107,110,117,108,113,115,122,0,99],
[104,105,109,102,105,113,112,123,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,110,117,110,107,104,96,103],
[108,0,95,107,113,106,95,102,94,102],
[111,115,0,118,107,115,97,118,94,106],
[100,103,92,0,104,94,95,101,94,86],
[93,97,103,106,0,93,100,106,98,102],
[100,104,95,116,117,0,91,97,100,99],
[103,115,113,115,110,119,0,118,101,108],
[106,108,92,109,104,113,92,0,94,107],
[114,116,116,116,112,110,109,116,0,104],
[107,108,104,124,108,111,102,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,107,107,95,109,112,107,115],
[112,0,101,101,110,107,108,100,117,114],
[116,109,0,107,113,109,113,99,111,111],
[103,109,103,0,111,120,121,94,112,113],
[103,100,97,99,0,105,96,94,98,108],
[115,103,101,90,105,0,102,100,107,119],
[101,102,97,89,114,108,0,99,99,115],
[98,110,111,116,116,110,111,0,110,123],
[103,93,99,98,112,103,111,100,0,125],
[95,96,99,97,102,91,95,87,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,78,77,100,94,99,98,94,86],
[114,0,88,97,109,104,101,91,90,88],
[132,122,0,94,110,111,113,115,118,103],
[133,113,116,0,104,120,117,113,119,105],
[110,101,100,106,0,114,107,101,114,99],
[116,106,99,90,96,0,107,103,93,100],
[111,109,97,93,103,103,0,110,110,120],
[112,119,95,97,109,107,100,0,92,101],
[116,120,92,91,96,117,100,118,0,97],
[124,122,107,105,111,110,90,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,101,88,103,110,104,113,121],
[108,0,90,89,79,98,95,87,92,111],
[119,120,0,103,112,91,105,110,106,117],
[109,121,107,0,96,99,128,118,113,137],
[122,131,98,114,0,106,111,96,83,131],
[107,112,119,111,104,0,113,96,110,138],
[100,115,105,82,99,97,0,93,120,105],
[106,123,100,92,114,114,117,0,116,117],
[97,118,104,97,127,100,90,94,0,124],
[89,99,93,73,79,72,105,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,113,103,113,113,117,106,120],
[110,0,99,121,105,120,104,111,108,126],
[103,111,0,108,105,114,105,110,109,115],
[97,89,102,0,102,110,103,103,93,106],
[107,105,105,108,0,107,113,106,96,117],
[97,90,96,100,103,0,109,108,97,110],
[97,106,105,107,97,101,0,106,108,111],
[93,99,100,107,104,102,104,0,105,110],
[104,102,101,117,114,113,102,105,0,114],
[90,84,95,104,93,100,99,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,86,102,90,87,116,100,101,79],
[121,0,117,101,99,107,122,123,124,108],
[124,93,0,117,108,99,110,106,111,112],
[108,109,93,0,89,88,107,105,83,91],
[120,111,102,121,0,107,91,110,81,97],
[123,103,111,122,103,0,104,115,104,115],
[94,88,100,103,119,106,0,99,107,105],
[110,87,104,105,100,95,111,0,94,93],
[109,86,99,127,129,106,103,116,0,94],
[131,102,98,119,113,95,105,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,96,98,107,109,110,103,106],
[108,0,100,99,106,101,90,105,105,103],
[106,110,0,99,87,106,91,116,110,114],
[114,111,111,0,105,100,82,114,114,94],
[112,104,123,105,0,109,104,136,112,109],
[103,109,104,110,101,0,109,128,109,106],
[101,120,119,128,106,101,0,112,114,104],
[100,105,94,96,74,82,98,0,104,94],
[107,105,100,96,98,101,96,106,0,110],
[104,107,96,116,101,104,106,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,115,109,124,126,101,107,111,135],
[90,0,95,90,94,116,92,97,94,113],
[95,115,0,120,104,124,109,111,125,123],
[101,120,90,0,98,118,99,106,112,109],
[86,116,106,112,0,120,108,110,100,126],
[84,94,86,92,90,0,79,101,83,88],
[109,118,101,111,102,131,0,123,117,118],
[103,113,99,104,100,109,87,0,114,134],
[99,116,85,98,110,127,93,96,0,122],
[75,97,87,101,84,122,92,76,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,94,111,100,120,118,125,94,94],
[86,0,80,95,78,104,95,97,86,83],
[116,130,0,104,108,120,110,122,118,98],
[99,115,106,0,104,112,121,112,109,86],
[110,132,102,106,0,113,117,136,121,102],
[90,106,90,98,97,0,93,130,100,85],
[92,115,100,89,93,117,0,123,89,86],
[85,113,88,98,74,80,87,0,97,79],
[116,124,92,101,89,110,121,113,0,107],
[116,127,112,124,108,125,124,131,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,120,106,112,99,96,115,119],
[97,0,117,123,114,109,95,99,122,111],
[101,93,0,119,93,95,90,94,102,108],
[90,87,91,0,95,92,109,96,112,99],
[104,96,117,115,0,105,105,92,100,104],
[98,101,115,118,105,0,101,108,107,108],
[111,115,120,101,105,109,0,95,111,107],
[114,111,116,114,118,102,115,0,107,103],
[95,88,108,98,110,103,99,103,0,110],
[91,99,102,111,106,102,103,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,97,107,109,106,101,96,119],
[101,0,97,82,110,121,106,83,95,103],
[99,113,0,93,97,122,85,113,85,107],
[113,128,117,0,112,121,105,117,100,123],
[103,100,113,98,0,119,88,114,98,122],
[101,89,88,89,91,0,94,89,79,114],
[104,104,125,105,122,116,0,101,107,113],
[109,127,97,93,96,121,109,0,98,116],
[114,115,125,110,112,131,103,112,0,126],
[91,107,103,87,88,96,97,94,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,109,115,116,138,109,112,104,112],
[80,0,106,88,107,73,77,93,86,75],
[101,104,0,131,120,124,113,135,104,89],
[95,122,79,0,102,124,111,131,110,124],
[94,103,90,108,0,131,121,110,91,110],
[72,137,86,86,79,0,99,86,104,103],
[101,133,97,99,89,111,0,106,110,119],
[98,117,75,79,100,124,104,0,101,116],
[106,124,106,100,119,106,100,109,0,123],
[98,135,121,86,100,107,91,94,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,100,102,100,88,110,112,107],
[111,0,122,101,111,117,106,110,115,107],
[111,88,0,96,101,101,90,105,103,94],
[110,109,114,0,110,107,110,114,113,104],
[108,99,109,100,0,96,101,105,105,104],
[110,93,109,103,114,0,107,105,109,112],
[122,104,120,100,109,103,0,107,113,116],
[100,100,105,96,105,105,103,0,101,98],
[98,95,107,97,105,101,97,109,0,106],
[103,103,116,106,106,98,94,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,103,104,97,104,102,97,99],
[114,0,123,118,124,105,116,113,110,111],
[103,87,0,97,101,89,101,88,90,90],
[107,92,113,0,103,89,101,101,88,86],
[106,86,109,107,0,94,98,97,99,91],
[113,105,121,121,116,0,117,113,94,114],
[106,94,109,109,112,93,0,99,96,98],
[108,97,122,109,113,97,111,0,101,105],
[113,100,120,122,111,116,114,109,0,107],
[111,99,120,124,119,96,112,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,124,130,110,139,119,115,97,133],
[91,0,92,87,114,123,117,80,101,122],
[86,118,0,98,100,116,105,94,105,117],
[80,123,112,0,111,116,118,71,119,125],
[100,96,110,99,0,115,109,73,111,117],
[71,87,94,94,95,0,101,77,81,121],
[91,93,105,92,101,109,0,84,104,100],
[95,130,116,139,137,133,126,0,114,142],
[113,109,105,91,99,129,106,96,0,122],
[77,88,93,85,93,89,110,68,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,110,105,100,114,101,102,108],
[97,0,110,102,106,109,115,97,94,114],
[105,100,0,113,95,100,111,98,100,105],
[100,108,97,0,91,103,105,106,93,116],
[105,104,115,119,0,105,114,113,101,119],
[110,101,110,107,105,0,112,108,95,112],
[96,95,99,105,96,98,0,93,91,113],
[109,113,112,104,97,102,117,0,118,114],
[108,116,110,117,109,115,119,92,0,119],
[102,96,105,94,91,98,97,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,98,109,99,99,103,89,91,92],
[124,0,97,111,109,105,96,103,110,119],
[112,113,0,116,105,107,121,101,109,121],
[101,99,94,0,87,84,93,102,99,101],
[111,101,105,123,0,101,115,97,124,109],
[111,105,103,126,109,0,108,93,115,114],
[107,114,89,117,95,102,0,109,100,109],
[121,107,109,108,113,117,101,0,120,111],
[119,100,101,111,86,95,110,90,0,110],
[118,91,89,109,101,96,101,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,103,111,96,110,99,116,107],
[102,0,99,101,109,107,114,100,113,123],
[110,111,0,110,110,108,121,104,123,114],
[107,109,100,0,106,106,115,104,112,118],
[99,101,100,104,0,94,106,105,115,109],
[114,103,102,104,116,0,110,102,110,111],
[100,96,89,95,104,100,0,90,104,101],
[111,110,106,106,105,108,120,0,124,113],
[94,97,87,98,95,100,106,86,0,94],
[103,87,96,92,101,99,109,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,119,94,93,103,116,106,116],
[103,0,125,122,114,100,102,109,115,110],
[106,85,0,109,102,97,86,94,93,102],
[91,88,101,0,112,90,90,91,94,100],
[116,96,108,98,0,88,93,108,86,96],
[117,110,113,120,122,0,106,115,93,108],
[107,108,124,120,117,104,0,112,93,103],
[94,101,116,119,102,95,98,0,99,95],
[104,95,117,116,124,117,117,111,0,115],
[94,100,108,110,114,102,107,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,103,103,99,104,93,103,98],
[107,0,97,108,98,104,100,103,113,98],
[107,113,0,113,99,108,109,104,122,101],
[107,102,97,0,105,104,118,100,117,95],
[107,112,111,105,0,104,113,105,112,103],
[111,106,102,106,106,0,110,111,116,110],
[106,110,101,92,97,100,0,103,113,95],
[117,107,106,110,105,99,107,0,117,100],
[107,97,88,93,98,94,97,93,0,101],
[112,112,109,115,107,100,115,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,75,103,121,65,97,101,102],
[112,0,78,81,112,125,95,78,102,97],
[112,132,0,65,130,126,71,112,106,99],
[135,129,145,0,154,163,141,98,111,145],
[107,98,80,56,0,115,77,95,94,93],
[89,85,84,47,95,0,91,80,55,77],
[145,115,139,69,133,119,0,89,90,125],
[113,132,98,112,115,130,121,0,122,111],
[109,108,104,99,116,155,120,88,0,137],
[108,113,111,65,117,133,85,99,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,91,106,120,134,164,91,101],
[122,0,110,126,100,114,120,142,98,98],
[110,100,0,111,101,120,120,124,99,106],
[119,84,99,0,99,116,99,119,106,88],
[104,110,109,111,0,129,98,111,103,99],
[90,96,90,94,81,0,88,91,80,101],
[76,90,90,111,112,122,0,105,85,112],
[46,68,86,91,99,119,105,0,64,83],
[119,112,111,104,107,130,125,146,0,104],
[109,112,104,122,111,109,98,127,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,109,93,103,102,113,106,105],
[118,0,117,114,103,121,112,120,108,109],
[110,93,0,102,104,108,115,110,106,108],
[101,96,108,0,95,108,113,105,112,101],
[117,107,106,115,0,123,120,124,105,111],
[107,89,102,102,87,0,106,116,100,105],
[108,98,95,97,90,104,0,105,96,98],
[97,90,100,105,86,94,105,0,100,99],
[104,102,104,98,105,110,114,110,0,108],
[105,101,102,109,99,105,112,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,83,83,79,78,78,91,83],
[114,0,108,83,103,90,89,97,100,103],
[115,102,0,91,87,91,96,98,96,86],
[127,127,119,0,125,111,105,122,113,118],
[127,107,123,85,0,98,98,114,100,107],
[131,120,119,99,112,0,108,108,111,114],
[132,121,114,105,112,102,0,103,97,101],
[132,113,112,88,96,102,107,0,94,95],
[119,110,114,97,110,99,113,116,0,101],
[127,107,124,92,103,96,109,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,113,107,106,103,102,102,109],
[97,0,91,95,94,104,109,98,97,99],
[110,119,0,104,101,118,102,112,110,101],
[97,115,106,0,96,111,95,98,104,99],
[103,116,109,114,0,104,108,103,102,100],
[104,106,92,99,106,0,102,97,100,94],
[107,101,108,115,102,108,0,106,101,106],
[108,112,98,112,107,113,104,0,107,106],
[108,113,100,106,108,110,109,103,0,110],
[101,111,109,111,110,116,104,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,113,100,108,107,112,109,108],
[96,0,92,97,106,99,98,111,100,101],
[110,118,0,109,105,114,100,116,112,118],
[97,113,101,0,104,99,101,105,113,103],
[110,104,105,106,0,110,108,105,103,100],
[102,111,96,111,100,0,96,103,93,104],
[103,112,110,109,102,114,0,109,101,100],
[98,99,94,105,105,107,101,0,109,108],
[101,110,98,97,107,117,109,101,0,102],
[102,109,92,107,110,106,110,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,110,115,115,102,96,110,81],
[107,0,114,116,108,103,104,111,103,106],
[99,96,0,106,96,91,97,97,109,99],
[100,94,104,0,96,88,101,110,97,95],
[95,102,114,114,0,120,101,104,93,88],
[95,107,119,122,90,0,108,116,109,104],
[108,106,113,109,109,102,0,116,101,94],
[114,99,113,100,106,94,94,0,102,104],
[100,107,101,113,117,101,109,108,0,80],
[129,104,111,115,122,106,116,106,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,115,103,111,109,111,102,118],
[105,0,109,112,101,108,108,100,105,103],
[100,101,0,110,101,111,99,92,99,111],
[95,98,100,0,97,104,98,94,98,109],
[107,109,109,113,0,112,106,104,100,111],
[99,102,99,106,98,0,106,102,96,107],
[101,102,111,112,104,104,0,104,110,116],
[99,110,118,116,106,108,106,0,95,120],
[108,105,111,112,110,114,100,115,0,121],
[92,107,99,101,99,103,94,90,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,105,106,103,101,107,109,111],
[96,0,99,107,97,102,94,93,98,109],
[98,111,0,101,99,96,109,98,107,101],
[105,103,109,0,102,104,108,99,117,107],
[104,113,111,108,0,105,101,103,112,118],
[107,108,114,106,105,0,105,93,99,100],
[109,116,101,102,109,105,0,110,109,111],
[103,117,112,111,107,117,100,0,116,113],
[101,112,103,93,98,111,101,94,0,104],
[99,101,109,103,92,110,99,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,101,91,101,107,96,106,102],
[109,0,99,103,100,104,104,95,98,100],
[113,111,0,103,106,103,113,107,109,103],
[109,107,107,0,98,107,107,107,114,109],
[119,110,104,112,0,109,118,106,119,110],
[109,106,107,103,101,0,105,107,107,102],
[103,106,97,103,92,105,0,94,100,92],
[114,115,103,103,104,103,116,0,118,113],
[104,112,101,96,91,103,110,92,0,94],
[108,110,107,101,100,108,118,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,71,153,112,79,94,133,110,61],
[79,0,86,152,94,67,123,89,143,87],
[139,124,0,166,112,125,142,139,127,76],
[57,58,44,0,92,68,101,97,108,57],
[98,116,98,118,0,73,132,101,133,99],
[131,143,85,142,137,0,199,128,160,86],
[116,87,68,109,78,11,0,116,143,69],
[77,121,71,113,109,82,94,0,81,27],
[100,67,83,102,77,50,67,129,0,127],
[149,123,134,153,111,124,141,183,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,126,116,107,117,109,112,124],
[113,0,113,144,119,106,112,110,104,112],
[108,97,0,121,103,107,104,119,106,102],
[84,66,89,0,93,79,89,98,80,88],
[94,91,107,117,0,105,102,90,102,91],
[103,104,103,131,105,0,101,106,82,108],
[93,98,106,121,108,109,0,115,114,118],
[101,100,91,112,120,104,95,0,87,103],
[98,106,104,130,108,128,96,123,0,131],
[86,98,108,122,119,102,92,107,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,90,98,100,105,117,101,115],
[114,0,112,94,108,100,103,114,106,110],
[103,98,0,97,106,93,108,105,90,102],
[120,116,113,0,121,110,117,116,101,113],
[112,102,104,89,0,98,101,104,107,119],
[110,110,117,100,112,0,96,117,98,108],
[105,107,102,93,109,114,0,116,103,110],
[93,96,105,94,106,93,94,0,83,109],
[109,104,120,109,103,112,107,127,0,112],
[95,100,108,97,91,102,100,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,120,110,105,110,102,105,100],
[114,0,120,116,103,112,101,105,104,106],
[98,90,0,115,110,105,103,106,92,93],
[90,94,95,0,93,99,88,106,92,86],
[100,107,100,117,0,107,100,106,100,91],
[105,98,105,111,103,0,94,102,92,94],
[100,109,107,122,110,116,0,104,102,98],
[108,105,104,104,104,108,106,0,101,89],
[105,106,118,118,110,118,108,109,0,116],
[110,104,117,124,119,116,112,121,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,90,94,152,42,120,111,105,146],
[140,0,142,133,159,109,115,127,94,143],
[120,68,0,91,128,74,118,136,117,116],
[116,77,119,0,124,87,108,129,102,145],
[58,51,82,86,0,51,105,96,81,84],
[168,101,136,123,159,0,123,147,120,150],
[90,95,92,102,105,87,0,95,108,120],
[99,83,74,81,114,63,115,0,93,101],
[105,116,93,108,129,90,102,117,0,121],
[64,67,94,65,126,60,90,109,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,95,107,100,121,99,114,89],
[111,0,114,120,112,103,123,106,114,94],
[95,96,0,109,125,112,117,99,127,107],
[115,90,101,0,104,114,142,130,112,117],
[103,98,85,106,0,87,116,107,102,112],
[110,107,98,96,123,0,115,129,138,97],
[89,87,93,68,94,95,0,74,94,77],
[111,104,111,80,103,81,136,0,98,91],
[96,96,83,98,108,72,116,112,0,111],
[121,116,103,93,98,113,133,119,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,101,116,117,122,113,113,108],
[93,0,105,89,98,114,103,109,102,90],
[101,105,0,103,101,98,105,96,104,96],
[109,121,107,0,104,115,116,113,117,104],
[94,112,109,106,0,112,103,114,117,106],
[93,96,112,95,98,0,97,97,104,101],
[88,107,105,94,107,113,0,100,104,97],
[97,101,114,97,96,113,110,0,106,104],
[97,108,106,93,93,106,106,104,0,90],
[102,120,114,106,104,109,113,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,93,105,103,95,97,94,104],
[108,0,99,99,108,97,97,96,93,97],
[103,111,0,111,115,104,104,93,104,85],
[117,111,99,0,113,119,102,101,92,99],
[105,102,95,97,0,102,106,95,86,89],
[107,113,106,91,108,0,104,98,93,91],
[115,113,106,108,104,106,0,111,109,100],
[113,114,117,109,115,112,99,0,116,108],
[116,117,106,118,124,117,101,94,0,106],
[106,113,125,111,121,119,110,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,107,107,99,106,102,106,115],
[105,0,114,107,109,109,104,107,109,106],
[101,96,0,107,94,92,100,106,100,96],
[103,103,103,0,109,100,98,96,105,105],
[103,101,116,101,0,103,95,113,107,106],
[111,101,118,110,107,0,104,105,109,110],
[104,106,110,112,115,106,0,103,109,111],
[108,103,104,114,97,105,107,0,107,109],
[104,101,110,105,103,101,101,103,0,104],
[95,104,114,105,104,100,99,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,106,102,108,115,103,102,98],
[111,0,104,115,110,99,123,107,111,104],
[106,106,0,99,95,102,118,114,106,111],
[104,95,111,0,97,94,119,106,112,106],
[108,100,115,113,0,105,117,104,109,107],
[102,111,108,116,105,0,126,106,120,115],
[95,87,92,91,93,84,0,97,97,103],
[107,103,96,104,106,104,113,0,113,99],
[108,99,104,98,101,90,113,97,0,106],
[112,106,99,104,103,95,107,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,115,104,119,109,118,97,120],
[98,0,103,116,108,128,99,111,107,108],
[90,107,0,128,89,88,123,97,78,129],
[95,94,82,0,90,127,133,90,98,118],
[106,102,121,120,0,125,123,108,101,126],
[91,82,122,83,85,0,86,83,86,95],
[101,111,87,77,87,124,0,106,93,105],
[92,99,113,120,102,127,104,0,89,131],
[113,103,132,112,109,124,117,121,0,129],
[90,102,81,92,84,115,105,79,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,100,116,100,111,114,102,113],
[101,0,96,102,101,102,108,104,93,102],
[97,114,0,103,107,104,104,111,103,93],
[110,108,107,0,114,111,109,108,88,110],
[94,109,103,96,0,105,115,108,98,97],
[110,108,106,99,105,0,99,115,101,107],
[99,102,106,101,95,111,0,105,105,102],
[96,106,99,102,102,95,105,0,97,100],
[108,117,107,122,112,109,105,113,0,107],
[97,108,117,100,113,103,108,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,101,109,100,103,92,110,117],
[101,0,99,97,100,91,95,99,105,108],
[102,111,0,105,110,104,107,100,114,117],
[109,113,105,0,114,105,100,96,117,122],
[101,110,100,96,0,105,103,106,105,124],
[110,119,106,105,105,0,100,97,117,111],
[107,115,103,110,107,110,0,104,110,107],
[118,111,110,114,104,113,106,0,123,117],
[100,105,96,93,105,93,100,87,0,112],
[93,102,93,88,86,99,103,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,107,112,102,101,103,103,118],
[107,0,94,104,89,92,95,100,95,104],
[117,116,0,109,108,114,98,98,105,120],
[103,106,101,0,103,107,106,93,92,105],
[98,121,102,107,0,103,110,98,108,101],
[108,118,96,103,107,0,110,113,99,109],
[109,115,112,104,100,100,0,98,110,108],
[107,110,112,117,112,97,112,0,115,116],
[107,115,105,118,102,111,100,95,0,114],
[92,106,90,105,109,101,102,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,79,90,87,78,105,106,103,109],
[122,0,114,124,106,103,127,119,99,109],
[131,96,0,104,119,97,98,104,114,115],
[120,86,106,0,88,88,105,94,112,95],
[123,104,91,122,0,106,116,108,93,123],
[132,107,113,122,104,0,121,114,97,101],
[105,83,112,105,94,89,0,99,103,97],
[104,91,106,116,102,96,111,0,122,101],
[107,111,96,98,117,113,107,88,0,110],
[101,101,95,115,87,109,113,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,90,95,107,110,96,111,104],
[140,0,106,121,100,127,122,121,136,123],
[145,104,0,117,97,130,129,110,133,113],
[120,89,93,0,87,102,103,102,111,84],
[115,110,113,123,0,119,108,87,89,115],
[103,83,80,108,91,0,127,125,126,111],
[100,88,81,107,102,83,0,107,114,97],
[114,89,100,108,123,85,103,0,113,113],
[99,74,77,99,121,84,96,97,0,136],
[106,87,97,126,95,99,113,97,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,87,121,81,120,145,127,98,91],
[127,0,118,101,75,88,115,111,105,128],
[123,92,0,106,91,65,100,114,67,101],
[89,109,104,0,115,97,114,130,109,98],
[129,135,119,95,0,85,83,147,76,106],
[90,122,145,113,125,0,74,125,77,125],
[65,95,110,96,127,136,0,116,121,127],
[83,99,96,80,63,85,94,0,93,87],
[112,105,143,101,134,133,89,117,0,114],
[119,82,109,112,104,85,83,123,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,112,99,124,111,118,107,99],
[117,0,98,97,107,116,113,117,99,104],
[100,112,0,109,99,121,113,110,109,100],
[98,113,101,0,88,106,100,110,94,93],
[111,103,111,122,0,115,114,109,107,98],
[86,94,89,104,95,0,100,100,97,93],
[99,97,97,110,96,110,0,105,103,94],
[92,93,100,100,101,110,105,0,98,97],
[103,111,101,116,103,113,107,112,0,108],
[111,106,110,117,112,117,116,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,120,109,109,89,110,86,107,164],
[119,0,147,95,117,89,105,106,102,113],
[90,63,0,80,77,33,59,72,78,77],
[101,115,130,0,113,84,115,117,75,115],
[101,93,133,97,0,78,62,57,49,120],
[121,121,177,126,132,0,73,99,87,127],
[100,105,151,95,148,137,0,124,117,117],
[124,104,138,93,153,111,86,0,56,156],
[103,108,132,135,161,123,93,154,0,119],
[46,97,133,95,90,83,93,54,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,107,98,91,93,84,96,107],
[105,0,109,99,97,101,98,93,98,107],
[111,101,0,122,96,101,105,100,105,110],
[103,111,88,0,98,100,91,92,95,106],
[112,113,114,112,0,107,104,112,114,106],
[119,109,109,110,103,0,104,99,105,116],
[117,112,105,119,106,106,0,106,111,119],
[126,117,110,118,98,111,104,0,113,118],
[114,112,105,115,96,105,99,97,0,113],
[103,103,100,104,104,94,91,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,101,101,93,95,100,95,95],
[106,0,109,95,97,86,86,93,95,96],
[101,101,0,102,96,88,103,87,88,103],
[109,115,108,0,109,96,106,94,99,99],
[109,113,114,101,0,104,113,95,96,104],
[117,124,122,114,106,0,99,99,93,117],
[115,124,107,104,97,111,0,112,97,124],
[110,117,123,116,115,111,98,0,116,118],
[115,115,122,111,114,117,113,94,0,105],
[115,114,107,111,106,93,86,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,130,108,98,98,106,128,109],
[93,0,119,117,100,106,97,87,125,106],
[101,91,0,114,98,102,94,92,115,100],
[80,93,96,0,90,90,96,83,107,88],
[102,110,112,120,0,117,107,93,123,114],
[112,104,108,120,93,0,97,105,125,106],
[112,113,116,114,103,113,0,96,127,107],
[104,123,118,127,117,105,114,0,117,107],
[82,85,95,103,87,85,83,93,0,84],
[101,104,110,122,96,104,103,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,109,105,94,94,86,96,85,69],
[123,0,106,111,116,105,86,106,87,92],
[101,104,0,112,101,88,81,114,98,82],
[105,99,98,0,104,87,97,106,89,91],
[116,94,109,106,0,105,77,105,90,94],
[116,105,122,123,105,0,75,121,98,84],
[124,124,129,113,133,135,0,122,107,104],
[114,104,96,104,105,89,88,0,81,81],
[125,123,112,121,120,112,103,129,0,106],
[141,118,128,119,116,126,106,129,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,80,92,91,71,88,86,91,84],
[121,0,90,103,104,109,105,115,109,97],
[130,120,0,116,120,106,112,105,99,102],
[118,107,94,0,111,88,101,108,102,90],
[119,106,90,99,0,101,98,114,97,90],
[139,101,104,122,109,0,125,107,116,112],
[122,105,98,109,112,85,0,114,107,97],
[124,95,105,102,96,103,96,0,99,93],
[119,101,111,108,113,94,103,111,0,91],
[126,113,108,120,120,98,113,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,125,118,95,92,120,134,85],
[99,0,117,106,127,98,94,114,116,106],
[110,93,0,124,123,112,81,114,127,100],
[85,104,86,0,133,91,99,108,119,82],
[92,83,87,77,0,83,80,115,104,84],
[115,112,98,119,127,0,107,124,108,91],
[118,116,129,111,130,103,0,142,124,104],
[90,96,96,102,95,86,68,0,103,90],
[76,94,83,91,106,102,86,107,0,105],
[125,104,110,128,126,119,106,120,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,112,94,100,109,94,103,105],
[86,0,114,86,99,100,112,106,98,95],
[101,96,0,93,87,103,107,99,95,84],
[98,124,117,0,94,108,120,103,99,105],
[116,111,123,116,0,101,123,120,110,116],
[110,110,107,102,109,0,132,109,100,120],
[101,98,103,90,87,78,0,87,75,88],
[116,104,111,107,90,101,123,0,109,110],
[107,112,115,111,100,110,135,101,0,112],
[105,115,126,105,94,90,122,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,132,107,106,107,133,117,97,113],
[116,0,127,84,120,114,137,111,106,133],
[78,83,0,83,82,83,132,99,108,110],
[103,126,127,0,105,99,133,102,121,120],
[104,90,128,105,0,98,99,109,100,146],
[103,96,127,111,112,0,139,98,121,123],
[77,73,78,77,111,71,0,92,66,89],
[93,99,111,108,101,112,118,0,105,115],
[113,104,102,89,110,89,144,105,0,94],
[97,77,100,90,64,87,121,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,101,117,104,99,106,89,108],
[107,0,106,99,116,109,108,112,117,111],
[107,104,0,100,98,102,104,112,95,98],
[109,111,110,0,122,116,103,116,101,107],
[93,94,112,88,0,95,98,101,100,111],
[106,101,108,94,115,0,110,115,101,111],
[111,102,106,107,112,100,0,109,104,110],
[104,98,98,94,109,95,101,0,98,98],
[121,93,115,109,110,109,106,112,0,122],
[102,99,112,103,99,99,100,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,134,106,126,128,108,105,124,101],
[93,0,122,98,104,108,116,107,124,108],
[76,88,0,91,100,94,99,82,109,104],
[104,112,119,0,91,111,100,93,113,104],
[84,106,110,119,0,128,98,111,121,106],
[82,102,116,99,82,0,84,102,73,89],
[102,94,111,110,112,126,0,124,112,124],
[105,103,128,117,99,108,86,0,110,100],
[86,86,101,97,89,137,98,100,0,109],
[109,102,106,106,104,121,86,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,99,93,96,97,97,93,96],
[100,0,96,102,94,105,120,88,67,85],
[112,114,0,105,99,102,111,101,97,102],
[111,108,105,0,92,110,107,103,91,112],
[117,116,111,118,0,113,117,102,104,113],
[114,105,108,100,97,0,114,103,96,103],
[113,90,99,103,93,96,0,96,105,96],
[113,122,109,107,108,107,114,0,88,119],
[117,143,113,119,106,114,105,122,0,124],
[114,125,108,98,97,107,114,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,105,106,110,119,111,119,110],
[108,0,102,112,101,112,106,113,120,107],
[105,108,0,117,101,112,120,105,112,113],
[105,98,93,0,87,98,106,103,106,99],
[104,109,109,123,0,122,112,113,121,117],
[100,98,98,112,88,0,100,96,103,96],
[91,104,90,104,98,110,0,110,100,103],
[99,97,105,107,97,114,100,0,119,97],
[91,90,98,104,89,107,110,91,0,105],
[100,103,97,111,93,114,107,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,140,156,114,144,157,74,113,81],
[133,0,133,105,89,107,132,64,111,76],
[70,77,0,135,35,61,132,49,67,61],
[54,105,75,0,80,37,124,37,37,37],
[96,121,175,130,0,107,153,105,111,76],
[66,103,149,173,103,0,132,66,156,46],
[53,78,78,86,57,78,0,71,78,53],
[136,146,161,173,105,144,139,0,144,119],
[97,99,143,173,99,54,132,66,0,14],
[129,134,149,173,134,164,157,91,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,126,115,95,125,116,132,97,160],
[87,0,117,104,75,104,80,102,106,105],
[84,93,0,93,64,88,95,106,92,97],
[95,106,117,0,80,103,98,119,110,118],
[115,135,146,130,0,108,130,104,133,132],
[85,106,122,107,102,0,106,120,105,122],
[94,130,115,112,80,104,0,111,117,119],
[78,108,104,91,106,90,99,0,117,122],
[113,104,118,100,77,105,93,93,0,107],
[50,105,113,92,78,88,91,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,85,106,90,126,104,108,101],
[100,0,99,89,106,112,127,106,115,99],
[96,111,0,95,91,97,117,87,107,81],
[125,121,115,0,129,118,121,109,121,101],
[104,104,119,81,0,109,109,109,113,113],
[120,98,113,92,101,0,131,110,125,97],
[84,83,93,89,101,79,0,100,109,82],
[106,104,123,101,101,100,110,0,109,104],
[102,95,103,89,97,85,101,101,0,88],
[109,111,129,109,97,113,128,106,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,112,115,109,115,121,91,103],
[98,0,106,103,108,101,110,113,85,96],
[100,104,0,112,104,102,109,105,92,89],
[98,107,98,0,108,105,107,101,94,99],
[95,102,106,102,0,98,110,114,100,104],
[101,109,108,105,112,0,121,116,95,105],
[95,100,101,103,100,89,0,102,90,92],
[89,97,105,109,96,94,108,0,90,103],
[119,125,118,116,110,115,120,120,0,103],
[107,114,121,111,106,105,118,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,116,97,112,117,109,103,97],
[106,0,106,113,104,117,119,97,106,109],
[108,104,0,98,100,99,116,112,99,104],
[94,97,112,0,110,115,109,103,94,106],
[113,106,110,100,0,110,120,102,86,106],
[98,93,111,95,100,0,107,94,88,98],
[93,91,94,101,90,103,0,88,98,92],
[101,113,98,107,108,116,122,0,108,103],
[107,104,111,116,124,122,112,102,0,107],
[113,101,106,104,104,112,118,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,120,80,99,106,76,62,125,118],
[90,0,94,82,97,114,77,73,111,102],
[90,116,0,121,113,101,69,103,103,121],
[130,128,89,0,98,105,85,128,125,110],
[111,113,97,112,0,114,106,82,101,109],
[104,96,109,105,96,0,76,93,109,91],
[134,133,141,125,104,134,0,125,147,119],
[148,137,107,82,128,117,85,0,137,115],
[85,99,107,85,109,101,63,73,0,76],
[92,108,89,100,101,119,91,95,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,101,101,108,92,83,99,106],
[105,0,104,100,99,116,91,98,101,102],
[114,106,0,112,94,110,96,92,109,108],
[109,110,98,0,100,118,108,108,110,113],
[109,111,116,110,0,121,106,105,116,112],
[102,94,100,92,89,0,100,95,97,106],
[118,119,114,102,104,110,0,108,110,118],
[127,112,118,102,105,115,102,0,111,105],
[111,109,101,100,94,113,100,99,0,111],
[104,108,102,97,98,104,92,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,101,116,107,133,107,105,109],
[99,0,86,99,116,83,121,116,107,95],
[106,124,0,113,124,110,131,125,97,111],
[109,111,97,0,118,96,128,121,103,110],
[94,94,86,92,0,98,109,112,96,89],
[103,127,100,114,112,0,121,122,113,113],
[77,89,79,82,101,89,0,106,82,79],
[103,94,85,89,98,88,104,0,89,97],
[105,103,113,107,114,97,128,121,0,97],
[101,115,99,100,121,97,131,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,113,112,113,104,126,131,112],
[86,0,125,101,93,126,83,107,125,95],
[96,85,0,99,99,88,103,79,102,84],
[97,109,111,0,118,106,115,95,118,81],
[98,117,111,92,0,90,113,82,123,102],
[97,84,122,104,120,0,99,109,106,92],
[106,127,107,95,97,111,0,88,123,87],
[84,103,131,115,128,101,122,0,128,80],
[79,85,108,92,87,104,87,82,0,89],
[98,115,126,129,108,118,123,130,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,108,92,88,108,113,104,100],
[114,0,109,113,96,106,108,101,102,107],
[103,101,0,100,88,112,100,97,104,115],
[102,97,110,0,89,84,110,99,100,105],
[118,114,122,121,0,111,110,113,103,124],
[122,104,98,126,99,0,113,109,98,100],
[102,102,110,100,100,97,0,99,90,107],
[97,109,113,111,97,101,111,0,88,113],
[106,108,106,110,107,112,120,122,0,93],
[110,103,95,105,86,110,103,97,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,124,103,100,100,107,108,108],
[95,0,93,99,76,82,95,87,105,94],
[101,117,0,107,88,102,95,97,89,103],
[86,111,103,0,84,98,105,78,83,95],
[107,134,122,126,0,100,122,105,110,117],
[110,128,108,112,110,0,102,109,89,118],
[110,115,115,105,88,108,0,106,96,104],
[103,123,113,132,105,101,104,0,108,118],
[102,105,121,127,100,121,114,102,0,113],
[102,116,107,115,93,92,106,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,99,103,101,111,103,98,98],
[104,0,104,93,112,104,112,106,97,107],
[110,106,0,100,111,99,107,101,94,107],
[111,117,110,0,105,115,124,114,104,100],
[107,98,99,105,0,99,104,99,96,100],
[109,106,111,95,111,0,119,111,104,104],
[99,98,103,86,106,91,0,99,86,97],
[107,104,109,96,111,99,111,0,108,101],
[112,113,116,106,114,106,124,102,0,102],
[112,103,103,110,110,106,113,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,103,112,102,101,96,96,92],
[119,0,126,112,115,94,103,100,111,108],
[98,84,0,101,100,86,88,95,100,97],
[107,98,109,0,110,93,98,108,93,98],
[98,95,110,100,0,88,98,98,98,99],
[108,116,124,117,122,0,107,103,113,113],
[109,107,122,112,112,103,0,106,102,102],
[114,110,115,102,112,107,104,0,108,103],
[114,99,110,117,112,97,108,102,0,101],
[118,102,113,112,111,97,108,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,108,115,105,102,111,101,111],
[108,0,111,117,108,100,108,121,110,118],
[98,99,0,101,109,95,93,111,100,108],
[102,93,109,0,107,104,103,112,105,109],
[95,102,101,103,0,95,99,110,103,113],
[105,110,115,106,115,0,104,118,109,118],
[108,102,117,107,111,106,0,109,108,115],
[99,89,99,98,100,92,101,0,104,107],
[109,100,110,105,107,101,102,106,0,108],
[99,92,102,101,97,92,95,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,115,107,114,105,109,82,108],
[110,0,100,117,113,110,121,119,87,96],
[96,110,0,115,107,112,117,114,89,99],
[95,93,95,0,101,97,102,105,83,81],
[103,97,103,109,0,118,108,111,106,111],
[96,100,98,113,92,0,103,98,103,105],
[105,89,93,108,102,107,0,104,88,91],
[101,91,96,105,99,112,106,0,98,98],
[128,123,121,127,104,107,122,112,0,111],
[102,114,111,129,99,105,119,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,98,112,109,101,110,104,95],
[94,0,95,98,77,111,107,111,97,98],
[96,115,0,102,96,110,95,119,111,86],
[112,112,108,0,92,114,93,130,110,111],
[98,133,114,118,0,118,103,120,122,107],
[101,99,100,96,92,0,92,111,105,89],
[109,103,115,117,107,118,0,119,117,112],
[100,99,91,80,90,99,91,0,91,81],
[106,113,99,100,88,105,93,119,0,89],
[115,112,124,99,103,121,98,129,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,105,98,122,120,109,117,101,100],
[119,0,120,133,140,130,138,143,119,104],
[105,90,0,121,129,142,111,121,103,90],
[112,77,89,0,125,121,97,121,99,107],
[88,70,81,85,0,101,98,85,67,86],
[90,80,68,89,109,0,87,95,82,89],
[101,72,99,113,112,123,0,117,97,91],
[93,67,89,89,125,115,93,0,78,75],
[109,91,107,111,143,128,113,132,0,107],
[110,106,120,103,124,121,119,135,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,97,112,101,123,129,117,111],
[100,0,111,94,99,102,126,119,106,112],
[103,99,0,99,103,101,110,119,108,103],
[113,116,111,0,99,110,128,117,109,103],
[98,111,107,111,0,86,124,126,118,104],
[109,108,109,100,124,0,134,124,126,114],
[87,84,100,82,86,76,0,100,91,90],
[81,91,91,93,84,86,110,0,93,107],
[93,104,102,101,92,84,119,117,0,109],
[99,98,107,107,106,96,120,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,87,104,113,87,96,118,107],
[102,0,83,77,89,108,99,96,106,93],
[103,127,0,103,122,114,90,112,116,123],
[123,133,107,0,131,130,105,126,129,128],
[106,121,88,79,0,92,104,106,123,97],
[97,102,96,80,118,0,100,128,109,100],
[123,111,120,105,106,110,0,116,124,116],
[114,114,98,84,104,82,94,0,110,91],
[92,104,94,81,87,101,86,100,0,105],
[103,117,87,82,113,110,94,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,92,89,71,94,99,89,83,76],
[131,0,119,116,110,105,129,115,116,116],
[118,91,0,96,89,108,111,93,94,87],
[121,94,114,0,102,110,140,105,98,106],
[139,100,121,108,0,113,127,100,96,105],
[116,105,102,100,97,0,108,92,97,128],
[111,81,99,70,83,102,0,99,84,89],
[121,95,117,105,110,118,111,0,102,110],
[127,94,116,112,114,113,126,108,0,120],
[134,94,123,104,105,82,121,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,102,96,102,95,90,102,100],
[112,0,106,113,105,105,108,109,116,112],
[100,104,0,110,100,95,94,95,112,105],
[108,97,100,0,95,109,104,101,106,108],
[114,105,110,115,0,109,101,103,104,120],
[108,105,115,101,101,0,105,100,109,102],
[115,102,116,106,109,105,0,100,108,112],
[120,101,115,109,107,110,110,0,103,109],
[108,94,98,104,106,101,102,107,0,97],
[110,98,105,102,90,108,98,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,107,94,99,96,96,111,78],
[119,0,104,117,96,122,127,104,126,126],
[113,106,0,108,109,110,118,105,118,105],
[103,93,102,0,113,110,111,117,112,96],
[116,114,101,97,0,101,109,106,112,105],
[111,88,100,100,109,0,115,97,104,94],
[114,83,92,99,101,95,0,100,116,94],
[114,106,105,93,104,113,110,0,121,97],
[99,84,92,98,98,106,94,89,0,83],
[132,84,105,114,105,116,116,113,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,89,86,93,88,92,96,97,90],
[115,0,95,93,114,103,111,113,108,103],
[121,115,0,96,112,100,113,130,100,112],
[124,117,114,0,116,108,108,113,104,114],
[117,96,98,94,0,97,115,110,105,111],
[122,107,110,102,113,0,104,113,109,96],
[118,99,97,102,95,106,0,114,112,94],
[114,97,80,97,100,97,96,0,100,98],
[113,102,110,106,105,101,98,110,0,96],
[120,107,98,96,99,114,116,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,88,84,111,95,123,90,107,92],
[124,0,122,109,123,102,125,108,131,114],
[122,88,0,94,119,89,118,91,109,117],
[126,101,116,0,108,106,129,96,114,86],
[99,87,91,102,0,89,109,90,123,105],
[115,108,121,104,121,0,130,94,125,112],
[87,85,92,81,101,80,0,72,103,107],
[120,102,119,114,120,116,138,0,130,111],
[103,79,101,96,87,85,107,80,0,87],
[118,96,93,124,105,98,103,99,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,78,114,97,92,102,92,119],
[109,0,107,117,142,121,87,113,104,113],
[121,103,0,117,129,95,108,103,116,135],
[132,93,93,0,119,102,106,112,103,101],
[96,68,81,91,0,92,93,95,99,94],
[113,89,115,108,118,0,115,95,119,117],
[118,123,102,104,117,95,0,119,113,129],
[108,97,107,98,115,115,91,0,101,102],
[118,106,94,107,111,91,97,109,0,108],
[91,97,75,109,116,93,81,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,103,106,102,87,105,109,105],
[98,0,110,86,101,95,100,103,102,109],
[104,100,0,98,106,95,89,111,106,113],
[107,124,112,0,98,110,101,112,119,114],
[104,109,104,112,0,104,109,115,104,109],
[108,115,115,100,106,0,98,114,113,112],
[123,110,121,109,101,112,0,131,113,130],
[105,107,99,98,95,96,79,0,113,111],
[101,108,104,91,106,97,97,97,0,100],
[105,101,97,96,101,98,80,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,134,119,112,118,99,107,150,128],
[82,0,120,95,91,105,80,95,109,104],
[76,90,0,84,91,87,87,95,118,93],
[91,115,126,0,113,104,109,90,132,100],
[98,119,119,97,0,101,113,91,130,98],
[92,105,123,106,109,0,89,102,102,118],
[111,130,123,101,97,121,0,116,134,129],
[103,115,115,120,119,108,94,0,123,114],
[60,101,92,78,80,108,76,87,0,93],
[82,106,117,110,112,92,81,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,108,115,113,94,105,97,97,99],
[128,0,127,104,121,105,86,95,133,109],
[102,83,0,91,104,86,73,99,99,88],
[95,106,119,0,100,90,85,92,109,93],
[97,89,106,110,0,90,86,85,111,100],
[116,105,124,120,120,0,94,97,123,113],
[105,124,137,125,124,116,0,110,124,113],
[113,115,111,118,125,113,100,0,128,101],
[113,77,111,101,99,87,86,82,0,103],
[111,101,122,117,110,97,97,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,94,102,90,95,109,87,93],
[119,0,104,101,102,111,97,114,97,106],
[111,106,0,101,113,113,100,109,96,122],
[116,109,109,0,107,112,97,107,109,108],
[108,108,97,103,0,106,96,102,93,103],
[120,99,97,98,104,0,90,104,96,107],
[115,113,110,113,114,120,0,113,103,116],
[101,96,101,103,108,106,97,0,96,101],
[123,113,114,101,117,114,107,114,0,110],
[117,104,88,102,107,103,94,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,89,85,89,95,97,88,94],
[107,0,92,88,91,91,96,90,96,97],
[117,118,0,92,89,102,98,106,102,109],
[121,122,118,0,117,98,114,109,112,111],
[125,119,121,93,0,101,124,104,113,112],
[121,119,108,112,109,0,113,109,103,102],
[115,114,112,96,86,97,0,100,104,115],
[113,120,104,101,106,101,110,0,103,110],
[122,114,108,98,97,107,106,107,0,108],
[116,113,101,99,98,108,95,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,108,84,100,109,87,106,100],
[111,0,104,123,100,106,113,95,111,117],
[107,106,0,105,99,106,102,98,108,112],
[102,87,105,0,102,101,90,92,103,95],
[126,110,111,108,0,108,117,102,120,118],
[110,104,104,109,102,0,104,97,101,108],
[101,97,108,120,93,106,0,109,106,110],
[123,115,112,118,108,113,101,0,115,113],
[104,99,102,107,90,109,104,95,0,111],
[110,93,98,115,92,102,100,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,126,106,117,105,120,87,128],
[112,0,90,86,99,80,92,104,89,118],
[110,120,0,107,116,98,105,134,122,141],
[84,124,103,0,80,77,84,89,78,101],
[104,111,94,130,0,112,132,142,117,127],
[93,130,112,133,98,0,135,113,109,110],
[105,118,105,126,78,75,0,103,83,137],
[90,106,76,121,68,97,107,0,95,128],
[123,121,88,132,93,101,127,115,0,140],
[82,92,69,109,83,100,73,82,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,124,91,95,112,112,125,113,90],
[103,0,97,101,111,104,101,108,109,119],
[86,113,0,108,107,100,125,132,118,91],
[119,109,102,0,99,103,89,133,104,94],
[115,99,103,111,0,89,100,112,112,88],
[98,106,110,107,121,0,110,131,106,109],
[98,109,85,121,110,100,0,118,103,113],
[85,102,78,77,98,79,92,0,88,92],
[97,101,92,106,98,104,107,122,0,82],
[120,91,119,116,122,101,97,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,162,100,140,175,137,145,143,111],
[100,0,141,105,182,129,93,99,128,141],
[48,69,0,59,146,140,87,105,143,147],
[110,105,151,0,182,151,151,109,119,141],
[70,28,64,28,0,70,55,53,61,95],
[35,81,70,59,140,0,68,84,143,124],
[73,117,123,59,155,142,0,72,143,114],
[65,111,105,101,157,126,138,0,185,159],
[67,82,67,91,149,67,67,25,0,67],
[99,69,63,69,115,86,96,51,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,96,91,100,82,88,105,102],
[99,0,105,83,103,105,92,101,111,112],
[115,105,0,94,97,114,97,88,105,115],
[114,127,116,0,114,106,108,103,113,117],
[119,107,113,96,0,106,113,95,111,112],
[110,105,96,104,104,0,100,93,99,105],
[128,118,113,102,97,110,0,97,107,114],
[122,109,122,107,115,117,113,0,124,104],
[105,99,105,97,99,111,103,86,0,99],
[108,98,95,93,98,105,96,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,93,73,88,97,68,114,90,96],
[97,0,87,88,112,94,92,96,105,85],
[117,123,0,117,109,96,105,107,117,102],
[137,122,93,0,113,98,82,116,101,108],
[122,98,101,97,0,90,94,111,116,99],
[113,116,114,112,120,0,76,112,104,92],
[142,118,105,128,116,134,0,130,115,112],
[96,114,103,94,99,98,80,0,83,96],
[120,105,93,109,94,106,95,127,0,114],
[114,125,108,102,111,118,98,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,91,90,90,91,138,129,105,110],
[124,0,103,122,93,114,150,122,107,101],
[119,107,0,95,146,83,149,110,74,118],
[120,88,115,0,72,94,145,155,92,88],
[120,117,64,138,0,80,156,109,118,79],
[119,96,127,116,130,0,178,137,140,126],
[72,60,61,65,54,32,0,67,65,70],
[81,88,100,55,101,73,143,0,80,109],
[105,103,136,118,92,70,145,130,0,125],
[100,109,92,122,131,84,140,101,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,98,105,96,91,98,91,102],
[112,0,108,117,107,104,104,104,104,116],
[99,102,0,104,106,103,101,100,97,108],
[112,93,106,0,99,97,97,98,94,101],
[105,103,104,111,0,91,100,108,90,106],
[114,106,107,113,119,0,108,104,105,102],
[119,106,109,113,110,102,0,97,89,101],
[112,106,110,112,102,106,113,0,103,108],
[119,106,113,116,120,105,121,107,0,109],
[108,94,102,109,104,108,109,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,105,113,111,99,104,113,101],
[106,0,95,105,116,108,101,100,110,106],
[95,115,0,99,114,106,104,96,104,106],
[105,105,111,0,111,107,99,103,100,102],
[97,94,96,99,0,103,94,95,106,92],
[99,102,104,103,107,0,95,95,101,91],
[111,109,106,111,116,115,0,101,110,106],
[106,110,114,107,115,115,109,0,116,101],
[97,100,106,110,104,109,100,94,0,103],
[109,104,104,108,118,119,104,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,103,101,107,115,98,112,107],
[98,0,106,95,97,106,106,104,98,102],
[99,104,0,99,106,103,108,104,100,102],
[107,115,111,0,99,115,110,96,111,115],
[109,113,104,111,0,112,117,106,111,126],
[103,104,107,95,98,0,110,105,107,119],
[95,104,102,100,93,100,0,93,99,105],
[112,106,106,114,104,105,117,0,113,118],
[98,112,110,99,99,103,111,97,0,108],
[103,108,108,95,84,91,105,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,143,136,112,59,113,135,112,140],
[35,0,104,40,65,41,106,102,76,134],
[67,106,0,108,104,77,129,121,53,145],
[74,170,102,0,71,78,116,101,70,126],
[98,145,106,139,0,98,103,146,84,146],
[151,169,133,132,112,0,97,113,86,161],
[97,104,81,94,107,113,0,140,79,104],
[75,108,89,109,64,97,70,0,51,139],
[98,134,157,140,126,124,131,159,0,200],
[70,76,65,84,64,49,106,71,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,91,110,95,84,95,97,105,98],
[93,0,92,101,95,95,98,94,111,111],
[119,118,0,108,104,110,109,97,107,97],
[100,109,102,0,92,94,103,97,90,96],
[115,115,106,118,0,94,106,105,97,97],
[126,115,100,116,116,0,115,114,125,114],
[115,112,101,107,104,95,0,105,98,97],
[113,116,113,113,105,96,105,0,111,117],
[105,99,103,120,113,85,112,99,0,96],
[112,99,113,114,113,96,113,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,118,107,117,103,117,125,103],
[93,0,90,97,92,82,101,103,111,97],
[103,120,0,107,106,95,106,102,126,99],
[92,113,103,0,111,86,108,111,124,98],
[103,118,104,99,0,99,97,116,108,110],
[93,128,115,124,111,0,114,110,124,106],
[107,109,104,102,113,96,0,105,119,102],
[93,107,108,99,94,100,105,0,117,95],
[85,99,84,86,102,86,91,93,0,97],
[107,113,111,112,100,104,108,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,105,98,109,105,108,107,113],
[97,0,108,89,103,101,92,94,105,92],
[96,102,0,114,104,99,96,104,106,102],
[105,121,96,0,107,112,93,105,101,105],
[112,107,106,103,0,123,108,108,99,103],
[101,109,111,98,87,0,97,89,92,109],
[105,118,114,117,102,113,0,115,107,117],
[102,116,106,105,102,121,95,0,110,104],
[103,105,104,109,111,118,103,100,0,103],
[97,118,108,105,107,101,93,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,117,90,104,115,100,101,121],
[101,0,106,100,90,117,103,98,108,122],
[102,104,0,106,111,122,103,88,84,106],
[93,110,104,0,82,108,118,78,107,106],
[120,120,99,128,0,97,110,100,113,112],
[106,93,88,102,113,0,102,99,100,106],
[95,107,107,92,100,108,0,111,113,114],
[110,112,122,132,110,111,99,0,106,118],
[109,102,126,103,97,110,97,104,0,103],
[89,88,104,104,98,104,96,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,111,94,106,99,93,124,108],
[91,0,110,86,95,87,108,91,102,94],
[94,100,0,85,96,98,104,108,103,96],
[99,124,125,0,100,107,110,97,117,101],
[116,115,114,110,0,98,115,110,120,117],
[104,123,112,103,112,0,114,113,119,120],
[111,102,106,100,95,96,0,113,113,99],
[117,119,102,113,100,97,97,0,101,85],
[86,108,107,93,90,91,97,109,0,93],
[102,116,114,109,93,90,111,125,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,104,99,103,105,97,111,99,91],
[123,0,122,111,109,112,119,117,108,104],
[106,88,0,109,103,112,108,98,109,94],
[111,99,101,0,104,107,115,108,106,97],
[107,101,107,106,0,92,114,98,106,105],
[105,98,98,103,118,0,110,91,101,104],
[113,91,102,95,96,100,0,104,86,93],
[99,93,112,102,112,119,106,0,107,100],
[111,102,101,104,104,109,124,103,0,102],
[119,106,116,113,105,106,117,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,106,97,107,106,99,114,100],
[106,0,104,102,107,100,109,103,105,102],
[109,106,0,97,97,111,99,97,102,105],
[104,108,113,0,107,123,111,94,111,107],
[113,103,113,103,0,106,104,100,105,101],
[103,110,99,87,104,0,98,99,109,98],
[104,101,111,99,106,112,0,109,106,101],
[111,107,113,116,110,111,101,0,114,103],
[96,105,108,99,105,101,104,96,0,100],
[110,108,105,103,109,112,109,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,91,126,99,111,102,111,111,97],
[105,0,88,123,113,101,130,112,96,100],
[119,122,0,134,115,114,96,122,110,116],
[84,87,76,0,91,109,78,107,90,90],
[111,97,95,119,0,109,92,94,109,104],
[99,109,96,101,101,0,122,105,108,110],
[108,80,114,132,118,88,0,107,120,99],
[99,98,88,103,116,105,103,0,80,89],
[99,114,100,120,101,102,90,130,0,114],
[113,110,94,120,106,100,111,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,104,99,114,103,109,103,113],
[96,0,108,105,99,104,103,104,105,112],
[96,102,0,101,104,103,102,106,105,114],
[106,105,109,0,107,100,98,106,114,110],
[111,111,106,103,0,114,98,111,110,107],
[96,106,107,110,96,0,103,101,103,115],
[107,107,108,112,112,107,0,107,102,109],
[101,106,104,104,99,109,103,0,103,110],
[107,105,105,96,100,107,108,107,0,105],
[97,98,96,100,103,95,101,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,86,96,115,98,94,106,103,95],
[102,0,96,93,113,100,110,114,109,90],
[124,114,0,115,130,96,126,124,129,105],
[114,117,95,0,115,116,108,118,117,95],
[95,97,80,95,0,95,100,113,102,91],
[112,110,114,94,115,0,123,117,114,113],
[116,100,84,102,110,87,0,97,98,100],
[104,96,86,92,97,93,113,0,115,90],
[107,101,81,93,108,96,112,95,0,92],
[115,120,105,115,119,97,110,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,103,104,100,107,110,109,118],
[98,0,103,98,93,99,95,97,101,109],
[111,107,0,104,99,109,105,108,112,96],
[107,112,106,0,112,120,103,110,113,108],
[106,117,111,98,0,119,104,130,113,104],
[110,111,101,90,91,0,99,123,108,93],
[103,115,105,107,106,111,0,117,104,117],
[100,113,102,100,80,87,93,0,108,116],
[101,109,98,97,97,102,106,102,0,107],
[92,101,114,102,106,117,93,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,104,105,111,119,124,97,112],
[98,0,92,97,92,109,107,116,90,100],
[101,118,0,107,103,113,118,127,100,101],
[106,113,103,0,108,104,123,111,94,108],
[105,118,107,102,0,121,123,126,109,110],
[99,101,97,106,89,0,114,113,97,102],
[91,103,92,87,87,96,0,103,82,93],
[86,94,83,99,84,97,107,0,91,94],
[113,120,110,116,101,113,128,119,0,107],
[98,110,109,102,100,108,117,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,106,101,105,107,104,95,95],
[99,0,96,110,99,115,98,108,100,105],
[105,114,0,114,112,113,98,119,107,104],
[104,100,96,0,97,99,95,106,101,104],
[109,111,98,113,0,121,103,110,101,106],
[105,95,97,111,89,0,91,103,95,101],
[103,112,112,115,107,119,0,114,104,110],
[106,102,91,104,100,107,96,0,96,96],
[115,110,103,109,109,115,106,114,0,112],
[115,105,106,106,104,109,100,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,102,100,97,100,106,111,100],
[103,0,119,104,104,104,109,119,111,106],
[117,91,0,102,105,109,118,120,113,111],
[108,106,108,0,106,100,93,121,107,106],
[110,106,105,104,0,106,113,106,119,88],
[113,106,101,110,104,0,111,111,106,106],
[110,101,92,117,97,99,0,104,101,102],
[104,91,90,89,104,99,106,0,101,95],
[99,99,97,103,91,104,109,109,0,100],
[110,104,99,104,122,104,108,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,130,117,116,128,110,119,115,103],
[84,0,87,104,103,119,115,82,96,104],
[80,123,0,109,113,121,104,76,95,85],
[93,106,101,0,115,104,122,87,105,103],
[94,107,97,95,0,99,95,85,104,107],
[82,91,89,106,111,0,88,75,74,76],
[100,95,106,88,115,122,0,103,107,118],
[91,128,134,123,125,135,107,0,96,103],
[95,114,115,105,106,136,103,114,0,110],
[107,106,125,107,103,134,92,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,116,110,103,111,109,116,106],
[94,0,95,98,98,96,98,95,102,92],
[96,115,0,113,102,100,107,108,112,107],
[94,112,97,0,96,107,97,107,112,104],
[100,112,108,114,0,113,100,102,120,105],
[107,114,110,103,97,0,103,109,120,101],
[99,112,103,113,110,107,0,113,120,114],
[101,115,102,103,108,101,97,0,108,105],
[94,108,98,98,90,90,90,102,0,94],
[104,118,103,106,105,109,96,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,105,115,116,107,113,112,99],
[94,0,97,110,102,95,102,106,104,98],
[102,113,0,100,110,108,110,111,109,111],
[105,100,110,0,107,108,105,107,106,100],
[95,108,100,103,0,92,102,100,102,96],
[94,115,102,102,118,0,107,122,116,110],
[103,108,100,105,108,103,0,115,103,103],
[97,104,99,103,110,88,95,0,101,103],
[98,106,101,104,108,94,107,109,0,107],
[111,112,99,110,114,100,107,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,122,92,133,85,101,121,114,127],
[89,0,115,109,123,85,77,122,79,133],
[88,95,0,110,104,95,106,118,70,94],
[118,101,100,0,123,110,109,111,78,104],
[77,87,106,87,0,64,82,100,55,75],
[125,125,115,100,146,0,108,119,111,139],
[109,133,104,101,128,102,0,122,108,120],
[89,88,92,99,110,91,88,0,63,104],
[96,131,140,132,155,99,102,147,0,108],
[83,77,116,106,135,71,90,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,95,147,122,119,92,120,110],
[99,0,89,84,93,96,102,84,98,84],
[93,121,0,95,122,118,119,124,125,104],
[115,126,115,0,139,135,159,128,131,101],
[63,117,88,71,0,92,110,111,90,89],
[88,114,92,75,118,0,117,103,106,73],
[91,108,91,51,100,93,0,95,108,85],
[118,126,86,82,99,107,115,0,135,87],
[90,112,85,79,120,104,102,75,0,75],
[100,126,106,109,121,137,125,123,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,120,105,96,122,108,96,111,105],
[117,0,113,117,98,116,103,104,112,111],
[90,97,0,100,99,127,92,97,106,103],
[105,93,110,0,91,124,87,102,120,102],
[114,112,111,119,0,119,101,106,129,124],
[88,94,83,86,91,0,94,104,100,99],
[102,107,118,123,109,116,0,102,112,114],
[114,106,113,108,104,106,108,0,110,117],
[99,98,104,90,81,110,98,100,0,104],
[105,99,107,108,86,111,96,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,113,103,96,106,104,113,103],
[98,0,105,99,105,96,100,102,101,102],
[110,105,0,118,109,105,112,111,102,105],
[97,111,92,0,106,94,105,113,98,106],
[107,105,101,104,0,92,109,110,99,111],
[114,114,105,116,118,0,110,120,118,117],
[104,110,98,105,101,100,0,105,111,110],
[106,108,99,97,100,90,105,0,97,103],
[97,109,108,112,111,92,99,113,0,105],
[107,108,105,104,99,93,100,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,70,103,99,91,93,101,108,122],
[99,0,91,89,76,57,106,62,97,96],
[140,119,0,121,111,105,116,134,145,138],
[107,121,89,0,114,95,129,120,93,110],
[111,134,99,96,0,96,120,129,101,155],
[119,153,105,115,114,0,126,127,148,126],
[117,104,94,81,90,84,0,130,133,136],
[109,148,76,90,81,83,80,0,132,104],
[102,113,65,117,109,62,77,78,0,84],
[88,114,72,100,55,84,74,106,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,78,91,98,104,83,87,92],
[99,0,114,101,87,98,113,107,108,103],
[116,96,0,114,102,103,107,98,106,104],
[132,109,96,0,105,105,109,96,97,91],
[119,123,108,105,0,101,122,95,107,104],
[112,112,107,105,109,0,124,112,99,113],
[106,97,103,101,88,86,0,81,90,95],
[127,103,112,114,115,98,129,0,105,105],
[123,102,104,113,103,111,120,105,0,98],
[118,107,106,119,106,97,115,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,127,102,114,107,117,105,114],
[103,0,104,122,107,109,129,121,125,116],
[120,106,0,118,102,106,91,94,111,119],
[83,88,92,0,93,107,101,88,98,103],
[108,103,108,117,0,104,110,89,105,103],
[96,101,104,103,106,0,98,115,129,108],
[103,81,119,109,100,112,0,108,114,119],
[93,89,116,122,121,95,102,0,98,108],
[105,85,99,112,105,81,96,112,0,95],
[96,94,91,107,107,102,91,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,102,99,100,101,109,105,106],
[107,0,93,105,111,102,109,105,111,107],
[113,117,0,110,119,104,118,116,107,120],
[108,105,100,0,109,110,111,111,112,113],
[111,99,91,101,0,108,104,103,108,113],
[110,108,106,100,102,0,94,107,115,115],
[109,101,92,99,106,116,0,101,102,114],
[101,105,94,99,107,103,109,0,108,112],
[105,99,103,98,102,95,108,102,0,110],
[104,103,90,97,97,95,96,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,99,90,101,91,114,108,91,103],
[90,0,92,88,93,96,110,90,103,99],
[111,118,0,114,107,100,122,103,104,112],
[120,122,96,0,106,105,121,117,116,111],
[109,117,103,104,0,110,122,116,106,108],
[119,114,110,105,100,0,122,104,110,105],
[96,100,88,89,88,88,0,96,97,101],
[102,120,107,93,94,106,114,0,106,114],
[119,107,106,94,104,100,113,104,0,112],
[107,111,98,99,102,105,109,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,98,129,120,97,117,113,93],
[91,0,98,103,127,97,110,105,97,78],
[101,112,0,112,117,113,146,98,113,110],
[112,107,98,0,139,116,144,128,129,98],
[81,83,93,71,0,102,119,108,119,81],
[90,113,97,94,108,0,104,123,100,57],
[113,100,64,66,91,106,0,94,119,66],
[93,105,112,82,102,87,116,0,94,70],
[97,113,97,81,91,110,91,116,0,83],
[117,132,100,112,129,153,144,140,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,98,96,98,106,88,95,113],
[115,0,103,105,101,112,114,106,118,115],
[120,107,0,107,108,105,109,104,111,113],
[112,105,103,0,111,103,112,100,111,103],
[114,109,102,99,0,107,113,110,112,116],
[112,98,105,107,103,0,111,106,120,114],
[104,96,101,98,97,99,0,90,104,107],
[122,104,106,110,100,104,120,0,121,116],
[115,92,99,99,98,90,106,89,0,106],
[97,95,97,107,94,96,103,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,92,110,104,98,95,95,99],
[104,0,89,105,118,90,101,95,103,86],
[112,121,0,105,119,101,110,112,102,110],
[118,105,105,0,119,107,108,103,108,96],
[100,92,91,91,0,86,98,99,96,78],
[106,120,109,103,124,0,113,118,103,103],
[112,109,100,102,112,97,0,96,88,109],
[115,115,98,107,111,92,114,0,101,96],
[115,107,108,102,114,107,122,109,0,105],
[111,124,100,114,132,107,101,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,111,106,96,98,111,103,104],
[120,0,102,118,113,101,114,114,109,115],
[116,108,0,115,108,108,103,121,116,123],
[99,92,95,0,106,104,91,121,107,114],
[104,97,102,104,0,92,91,116,96,105],
[114,109,102,106,118,0,100,109,103,110],
[112,96,107,119,119,110,0,125,115,125],
[99,96,89,89,94,101,85,0,90,92],
[107,101,94,103,114,107,95,120,0,102],
[106,95,87,96,105,100,85,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,101,93,112,106,104,108,114],
[104,0,109,94,105,104,111,114,105,106],
[97,101,0,92,106,96,98,90,108,102],
[109,116,118,0,105,112,119,111,115,107],
[117,105,104,105,0,98,114,117,103,113],
[98,106,114,98,112,0,110,96,97,99],
[104,99,112,91,96,100,0,100,102,106],
[106,96,120,99,93,114,110,0,105,106],
[102,105,102,95,107,113,108,105,0,110],
[96,104,108,103,97,111,104,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,102,115,102,117,109,115,102],
[95,0,105,85,109,97,99,108,88,97],
[108,105,0,106,105,97,105,120,113,79],
[108,125,104,0,121,103,125,124,110,108],
[95,101,105,89,0,100,107,102,92,102],
[108,113,113,107,110,0,118,110,103,83],
[93,111,105,85,103,92,0,115,95,88],
[101,102,90,86,108,100,95,0,97,84],
[95,122,97,100,118,107,115,113,0,97],
[108,113,131,102,108,127,122,126,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,100,110,113,93,105,103,102],
[97,0,105,107,105,105,101,109,105,107],
[95,105,0,99,100,100,90,109,103,106],
[110,103,111,0,107,113,101,103,104,101],
[100,105,110,103,0,105,110,109,97,111],
[97,105,110,97,105,0,106,106,105,93],
[117,109,120,109,100,104,0,113,108,109],
[105,101,101,107,101,104,97,0,101,105],
[107,105,107,106,113,105,102,109,0,106],
[108,103,104,109,99,117,101,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,119,115,125,106,133,108,104,104],
[87,0,103,92,96,105,114,94,86,90],
[91,107,0,96,115,103,108,98,100,103],
[95,118,114,0,119,104,120,103,102,109],
[85,114,95,91,0,95,112,105,99,95],
[104,105,107,106,115,0,115,109,99,102],
[77,96,102,90,98,95,0,99,85,90],
[102,116,112,107,105,101,111,0,107,106],
[106,124,110,108,111,111,125,103,0,105],
[106,120,107,101,115,108,120,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,113,126,114,110,123,116,103],
[99,0,90,107,108,106,102,100,112,108],
[104,120,0,108,114,111,103,114,121,109],
[97,103,102,0,115,101,101,105,102,104],
[84,102,96,95,0,87,87,102,103,91],
[96,104,99,109,123,0,100,103,111,103],
[100,108,107,109,123,110,0,119,108,112],
[87,110,96,105,108,107,91,0,102,90],
[94,98,89,108,107,99,102,108,0,92],
[107,102,101,106,119,107,98,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,97,86,96,101,107,97,101],
[120,0,111,117,100,108,118,122,104,109],
[110,99,0,106,111,103,111,109,102,116],
[113,93,104,0,89,103,106,113,95,108],
[124,110,99,121,0,118,120,113,111,111],
[114,102,107,107,92,0,107,107,106,106],
[109,92,99,104,90,103,0,108,108,102],
[103,88,101,97,97,103,102,0,102,105],
[113,106,108,115,99,104,102,108,0,108],
[109,101,94,102,99,104,108,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,90,77,85,86,98,75,88,81],
[136,0,99,107,115,122,121,114,119,109],
[120,111,0,95,117,120,118,116,122,108],
[133,103,115,0,117,130,121,118,120,115],
[125,95,93,93,0,129,119,100,121,107],
[124,88,90,80,81,0,100,108,99,94],
[112,89,92,89,91,110,0,104,101,102],
[135,96,94,92,110,102,106,0,92,99],
[122,91,88,90,89,111,109,118,0,96],
[129,101,102,95,103,116,108,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,107,97,115,106,114,89,110],
[122,0,103,127,128,134,130,136,126,114],
[102,107,0,98,112,137,110,137,130,108],
[103,83,112,0,124,111,124,123,113,103],
[113,82,98,86,0,99,100,129,92,97],
[95,76,73,99,111,0,101,113,101,100],
[104,80,100,86,110,109,0,109,108,101],
[96,74,73,87,81,97,101,0,93,99],
[121,84,80,97,118,109,102,117,0,112],
[100,96,102,107,113,110,109,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,109,94,105,103,106,91,109],
[103,0,100,95,100,103,103,89,99,112],
[99,110,0,86,80,89,90,100,92,114],
[101,115,124,0,106,119,113,99,92,118],
[116,110,130,104,0,115,113,119,110,117],
[105,107,121,91,95,0,107,102,84,112],
[107,107,120,97,97,103,0,96,98,106],
[104,121,110,111,91,108,114,0,111,129],
[119,111,118,118,100,126,112,99,0,124],
[101,98,96,92,93,98,104,81,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,71,137,93,111,120,144,121],
[96,0,145,104,121,146,108,107,116,114],
[94,65,0,96,112,107,116,113,145,127],
[139,106,114,0,135,99,99,114,154,127],
[73,89,98,75,0,108,100,127,125,103],
[117,64,103,111,102,0,109,110,133,86],
[99,102,94,111,110,101,0,104,129,96],
[90,103,97,96,83,100,106,0,118,78],
[66,94,65,56,85,77,81,92,0,98],
[89,96,83,83,107,124,114,132,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,105,101,95,103,107,112,108],
[115,0,103,111,112,108,115,112,122,113],
[125,107,0,104,104,102,125,104,116,107],
[105,99,106,0,95,104,109,103,122,118],
[109,98,106,115,0,110,106,107,103,107],
[115,102,108,106,100,0,111,110,120,114],
[107,95,85,101,104,99,0,86,91,83],
[103,98,106,107,103,100,124,0,110,118],
[98,88,94,88,107,90,119,100,0,110],
[102,97,103,92,103,96,127,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,97,105,100,108,108,106,106],
[101,0,83,92,83,101,94,103,99,98],
[105,127,0,90,92,102,108,110,108,112],
[113,118,120,0,108,111,112,111,100,117],
[105,127,118,102,0,110,101,113,107,108],
[110,109,108,99,100,0,94,109,106,110],
[102,116,102,98,109,116,0,131,104,119],
[102,107,100,99,97,101,79,0,92,100],
[104,111,102,110,103,104,106,118,0,99],
[104,112,98,93,102,100,91,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,105,54,170,142,46,134,56,105],
[127,0,137,162,210,173,127,175,127,70],
[105,73,0,108,84,130,36,124,84,36],
[156,48,102,0,124,142,58,88,92,70],
[40,0,126,86,0,126,43,94,51,59],
[68,37,80,68,84,0,36,88,81,8],
[164,83,174,152,167,174,0,128,164,94],
[76,35,86,122,116,122,82,0,55,54],
[154,83,126,118,159,129,46,155,0,86],
[105,140,174,140,151,202,116,156,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,130,121,101,87,116,85,118,67],
[96,0,126,112,77,65,112,115,104,120],
[80,84,0,121,106,91,135,94,131,104],
[89,98,89,0,91,86,93,81,109,68],
[109,133,104,119,0,87,113,98,85,141],
[123,145,119,124,123,0,104,112,131,115],
[94,98,75,117,97,106,0,100,117,87],
[125,95,116,129,112,98,110,0,110,111],
[92,106,79,101,125,79,93,100,0,87],
[143,90,106,142,69,95,123,99,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,112,109,120,116,104,107,112],
[98,0,103,107,103,110,97,99,101,104],
[106,107,0,110,104,115,110,106,105,113],
[98,103,100,0,98,107,121,105,102,102],
[101,107,106,112,0,107,107,109,106,115],
[90,100,95,103,103,0,110,104,94,101],
[94,113,100,89,103,100,0,101,98,103],
[106,111,104,105,101,106,109,0,96,112],
[103,109,105,108,104,116,112,114,0,110],
[98,106,97,108,95,109,107,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,108,112,110,109,99,95,112],
[115,0,108,108,113,110,109,108,105,114],
[101,102,0,104,103,109,102,104,108,115],
[102,102,106,0,111,103,93,108,96,108],
[98,97,107,99,0,104,99,102,108,112],
[100,100,101,107,106,0,103,100,106,102],
[101,101,108,117,111,107,0,114,103,124],
[111,102,106,102,108,110,96,0,102,112],
[115,105,102,114,102,104,107,108,0,118],
[98,96,95,102,98,108,86,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,112,100,87,105,99,92,105],
[118,0,107,117,112,99,117,118,111,120],
[110,103,0,113,103,110,100,108,97,109],
[98,93,97,0,105,98,98,108,93,99],
[110,98,107,105,0,88,105,115,97,111],
[123,111,100,112,122,0,118,116,110,113],
[105,93,110,112,105,92,0,96,94,106],
[111,92,102,102,95,94,114,0,99,96],
[118,99,113,117,113,100,116,111,0,120],
[105,90,101,111,99,97,104,114,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,98,109,103,93,101,94,103],
[111,0,102,94,99,95,93,104,103,103],
[108,108,0,94,116,105,101,116,111,108],
[112,116,116,0,119,104,104,110,105,97],
[101,111,94,91,0,99,101,101,88,102],
[107,115,105,106,111,0,101,98,107,104],
[117,117,109,106,109,109,0,101,99,112],
[109,106,94,100,109,112,109,0,106,105],
[116,107,99,105,122,103,111,104,0,111],
[107,107,102,113,108,106,98,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,88,97,85,74,93,102,100,104],
[129,0,115,108,91,107,106,122,127,116],
[122,95,0,97,98,89,107,115,111,108],
[113,102,113,0,93,93,104,111,126,117],
[125,119,112,117,0,105,131,121,139,117],
[136,103,121,117,105,0,129,130,138,132],
[117,104,103,106,79,81,0,113,129,120],
[108,88,95,99,89,80,97,0,117,105],
[110,83,99,84,71,72,81,93,0,109],
[106,94,102,93,93,78,90,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,103,98,102,103,91,98,100],
[104,0,117,111,105,107,110,95,105,98],
[100,93,0,96,107,115,102,90,100,86],
[107,99,114,0,103,119,96,114,109,95],
[112,105,103,107,0,105,103,100,110,96],
[108,103,95,91,105,0,109,93,98,96],
[107,100,108,114,107,101,0,97,113,95],
[119,115,120,96,110,117,113,0,121,105],
[112,105,110,101,100,112,97,89,0,99],
[110,112,124,115,114,114,115,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,115,109,114,96,105,99,121],
[104,0,102,108,103,99,83,87,96,102],
[104,108,0,106,107,112,102,88,95,112],
[95,102,104,0,105,105,89,88,94,105],
[101,107,103,105,0,114,100,96,94,114],
[96,111,98,105,96,0,107,96,86,98],
[114,127,108,121,110,103,0,98,101,123],
[105,123,122,122,114,114,112,0,110,114],
[111,114,115,116,116,124,109,100,0,116],
[89,108,98,105,96,112,87,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,103,108,95,108,109,87,77],
[120,0,117,111,111,89,117,110,102,118],
[104,93,0,85,114,112,109,95,71,84],
[107,99,125,0,135,121,128,115,109,83],
[102,99,96,75,0,99,97,99,61,85],
[115,121,98,89,111,0,116,130,98,83],
[102,93,101,82,113,94,0,88,84,82],
[101,100,115,95,111,80,122,0,74,98],
[123,108,139,101,149,112,126,136,0,131],
[133,92,126,127,125,127,128,112,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,85,91,116,92,105,107,86,110],
[123,0,127,115,128,104,136,108,125,134],
[125,83,0,104,116,99,122,110,92,102],
[119,95,106,0,127,112,114,109,122,115],
[94,82,94,83,0,102,97,101,88,101],
[118,106,111,98,108,0,116,128,99,116],
[105,74,88,96,113,94,0,103,86,106],
[103,102,100,101,109,82,107,0,96,107],
[124,85,118,88,122,111,124,114,0,124],
[100,76,108,95,109,94,104,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,97,121,96,110,98,97,98],
[109,0,118,104,111,112,111,104,117,97],
[104,92,0,95,117,113,107,100,98,100],
[113,106,115,0,116,103,114,106,94,103],
[89,99,93,94,0,84,107,99,96,96],
[114,98,97,107,126,0,104,101,102,95],
[100,99,103,96,103,106,0,95,108,102],
[112,106,110,104,111,109,115,0,116,109],
[113,93,112,116,114,108,102,94,0,104],
[112,113,110,107,114,115,108,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,111,100,110,101,106,104,102,85],
[85,0,81,79,103,101,92,93,93,79],
[99,129,0,96,113,109,102,105,115,106],
[110,131,114,0,117,102,113,119,108,106],
[100,107,97,93,0,99,90,94,101,86],
[109,109,101,108,111,0,104,98,104,97],
[104,118,108,97,120,106,0,102,111,106],
[106,117,105,91,116,112,108,0,111,95],
[108,117,95,102,109,106,99,99,0,94],
[125,131,104,104,124,113,104,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,109,84,107,90,111,116,99,131],
[87,0,107,89,109,99,111,103,89,104],
[101,103,0,113,117,82,114,115,82,112],
[126,121,97,0,104,97,97,104,101,116],
[103,101,93,106,0,91,111,111,100,102],
[120,111,128,113,119,0,117,128,118,99],
[99,99,96,113,99,93,0,120,101,116],
[94,107,95,106,99,82,90,0,91,102],
[111,121,128,109,110,92,109,119,0,131],
[79,106,98,94,108,111,94,108,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,45,112,59,120,62,48,123,56],
[98,0,87,146,117,149,120,135,173,143],
[165,123,0,152,59,149,62,149,115,99],
[98,64,58,0,59,149,120,106,173,19],
[151,93,151,151,0,165,202,98,202,40],
[90,61,61,61,45,0,112,8,123,19],
[148,90,148,90,8,98,0,87,109,48],
[162,75,61,104,112,202,123,0,123,33],
[87,37,95,37,8,87,101,87,0,37],
[154,67,111,191,170,191,162,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,66,123,107,104,105,92,82,91],
[95,0,132,136,117,95,136,122,97,111],
[144,78,0,150,123,105,137,112,135,98],
[87,74,60,0,78,60,99,84,65,51],
[103,93,87,132,0,94,121,79,75,105],
[106,115,105,150,116,0,145,118,127,96],
[105,74,73,111,89,65,0,74,86,67],
[118,88,98,126,131,92,136,0,90,104],
[128,113,75,145,135,83,124,120,0,128],
[119,99,112,159,105,114,143,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,116,112,131,117,96,119,108,127],
[88,0,97,96,122,105,97,118,114,110],
[94,113,0,106,115,106,103,113,119,129],
[98,114,104,0,121,97,107,112,105,122],
[79,88,95,89,0,101,101,103,90,108],
[93,105,104,113,109,0,111,102,118,121],
[114,113,107,103,109,99,0,104,99,133],
[91,92,97,98,107,108,106,0,113,125],
[102,96,91,105,120,92,111,97,0,118],
[83,100,81,88,102,89,77,85,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,121,106,113,106,108,107,103],
[93,0,105,97,113,105,97,99,106,102],
[99,105,0,121,120,100,92,103,110,113],
[89,113,89,0,121,92,94,101,102,102],
[104,97,90,89,0,104,78,96,93,99],
[97,105,110,118,106,0,101,93,103,103],
[104,113,118,116,132,109,0,100,121,115],
[102,111,107,109,114,117,110,0,93,115],
[103,104,100,108,117,107,89,117,0,115],
[107,108,97,108,111,107,95,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,107,108,104,103,112,107,101],
[100,0,100,102,109,95,96,114,103,96],
[110,110,0,109,116,108,104,115,110,112],
[103,108,101,0,118,118,93,107,111,87],
[102,101,94,92,0,98,87,93,92,86],
[106,115,102,92,112,0,101,120,101,99],
[107,114,106,117,123,109,0,111,103,94],
[98,96,95,103,117,90,99,0,96,88],
[103,107,100,99,118,109,107,114,0,103],
[109,114,98,123,124,111,116,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,82,58,91,85,85,66,36,50],
[170,0,104,121,137,129,106,125,144,86],
[128,106,0,106,139,139,90,116,113,111],
[152,89,104,0,107,101,106,116,96,131],
[119,73,71,103,0,74,55,83,94,57],
[125,81,71,109,136,0,55,76,101,75],
[125,104,120,104,155,155,0,134,117,116],
[144,85,94,94,127,134,76,0,106,77],
[174,66,97,114,116,109,93,104,0,113],
[160,124,99,79,153,135,94,133,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,103,95,96,101,101,99,90],
[103,0,101,116,107,100,95,102,106,98],
[118,109,0,108,108,109,105,105,109,106],
[107,94,102,0,99,109,99,110,100,104],
[115,103,102,111,0,103,103,109,102,103],
[114,110,101,101,107,0,95,102,102,94],
[109,115,105,111,107,115,0,118,110,104],
[109,108,105,100,101,108,92,0,98,89],
[111,104,101,110,108,108,100,112,0,103],
[120,112,104,106,107,116,106,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,115,97,107,105,97,117,86],
[115,0,120,115,116,111,98,111,123,98],
[106,90,0,103,102,111,98,98,120,93],
[95,95,107,0,101,112,84,97,111,93],
[113,94,108,109,0,102,97,101,118,92],
[103,99,99,98,108,0,90,94,111,89],
[105,112,112,126,113,120,0,104,120,105],
[113,99,112,113,109,116,106,0,120,100],
[93,87,90,99,92,99,90,90,0,84],
[124,112,117,117,118,121,105,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,130,99,95,97,85,94,75,113],
[118,0,118,130,107,122,96,111,108,96],
[80,92,0,88,81,93,65,74,88,91],
[111,80,122,0,122,88,95,89,99,96],
[115,103,129,88,0,71,105,117,121,124],
[113,88,117,122,139,0,89,104,95,114],
[125,114,145,115,105,121,0,115,113,94],
[116,99,136,121,93,106,95,0,100,105],
[135,102,122,111,89,115,97,110,0,115],
[97,114,119,114,86,96,116,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,94,98,95,87,90,98,110],
[110,0,114,100,114,105,89,101,105,105],
[96,96,0,85,101,88,87,78,94,99],
[116,110,125,0,115,112,101,114,125,122],
[112,96,109,95,0,109,91,98,96,106],
[115,105,122,98,101,0,89,99,101,104],
[123,121,123,109,119,121,0,98,117,106],
[120,109,132,96,112,111,112,0,113,127],
[112,105,116,85,114,109,93,97,0,114],
[100,105,111,88,104,106,104,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,91,109,100,98,95,110,106],
[111,0,122,101,110,93,103,92,109,111],
[95,88,0,108,104,94,104,97,104,100],
[119,109,102,0,108,102,112,108,121,105],
[101,100,106,102,0,93,101,97,111,105],
[110,117,116,108,117,0,105,104,114,118],
[112,107,106,98,109,105,0,106,105,109],
[115,118,113,102,113,106,104,0,114,117],
[100,101,106,89,99,96,105,96,0,99],
[104,99,110,105,105,92,101,93,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,89,108,101,88,116,111,111,87],
[107,0,103,109,112,98,108,116,100,100],
[121,107,0,110,116,104,112,131,107,119],
[102,101,100,0,92,95,99,112,105,82],
[109,98,94,118,0,88,96,105,97,93],
[122,112,106,115,122,0,109,126,116,97],
[94,102,98,111,114,101,0,122,98,94],
[99,94,79,98,105,84,88,0,95,75],
[99,110,103,105,113,94,112,115,0,93],
[123,110,91,128,117,113,116,135,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,113,120,94,89,101,105,107,87],
[127,0,129,118,121,112,100,115,121,102],
[97,81,0,106,83,100,102,104,95,79],
[90,92,104,0,122,119,123,119,134,98],
[116,89,127,88,0,114,90,120,110,97],
[121,98,110,91,96,0,88,127,104,100],
[109,110,108,87,120,122,0,117,106,120],
[105,95,106,91,90,83,93,0,99,96],
[103,89,115,76,100,106,104,111,0,98],
[123,108,131,112,113,110,90,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,88,97,108,105,105,102,111,118],
[96,0,88,95,121,115,108,112,103,109],
[122,122,0,113,134,109,121,104,112,129],
[113,115,97,0,115,98,103,110,110,117],
[102,89,76,95,0,95,94,96,90,110],
[105,95,101,112,115,0,99,100,106,121],
[105,102,89,107,116,111,0,104,92,113],
[108,98,106,100,114,110,106,0,107,121],
[99,107,98,100,120,104,118,103,0,125],
[92,101,81,93,100,89,97,89,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,115,104,107,109,114,112,105,111],
[81,0,90,79,95,91,99,91,86,99],
[95,120,0,106,110,100,105,111,97,104],
[106,131,104,0,127,104,113,119,105,124],
[103,115,100,83,0,87,108,92,86,102],
[101,119,110,106,123,0,99,103,104,96],
[96,111,105,97,102,111,0,103,96,97],
[98,119,99,91,118,107,107,0,107,107],
[105,124,113,105,124,106,114,103,0,106],
[99,111,106,86,108,114,113,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,117,101,106,96,113,112,113],
[103,0,113,103,119,104,105,113,111,105],
[99,97,0,99,104,94,96,104,96,107],
[93,107,111,0,101,91,106,102,101,106],
[109,91,106,109,0,100,105,110,103,100],
[104,106,116,119,110,0,100,116,113,113],
[114,105,114,104,105,110,0,113,112,100],
[97,97,106,108,100,94,97,0,99,106],
[98,99,114,109,107,97,98,111,0,100],
[97,105,103,104,110,97,110,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,90,105,107,93,93,105,107,95],
[132,0,96,126,123,111,94,102,93,111],
[120,114,0,99,107,106,90,107,96,107],
[105,84,111,0,114,104,111,101,113,119],
[103,87,103,96,0,91,89,99,92,82],
[117,99,104,106,119,0,83,95,106,111],
[117,116,120,99,121,127,0,111,108,114],
[105,108,103,109,111,115,99,0,92,99],
[103,117,114,97,118,104,102,118,0,106],
[115,99,103,91,128,99,96,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,105,109,130,142,112,115,135,127],
[85,0,87,103,111,93,95,125,133,120],
[105,123,0,122,119,150,103,116,113,115],
[101,107,88,0,131,82,109,108,112,109],
[80,99,91,79,0,97,92,101,106,103],
[68,117,60,128,113,0,83,85,105,110],
[98,115,107,101,118,127,0,82,115,94],
[95,85,94,102,109,125,128,0,113,79],
[75,77,97,98,104,105,95,97,0,96],
[83,90,95,101,107,100,116,131,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,83,108,119,102,106,119,123,109],
[90,0,92,89,97,95,88,91,106,89],
[127,118,0,108,122,115,103,113,117,109],
[102,121,102,0,115,108,122,112,108,105],
[91,113,88,95,0,90,91,106,105,87],
[108,115,95,102,120,0,106,112,107,88],
[104,122,107,88,119,104,0,112,108,107],
[91,119,97,98,104,98,98,0,119,96],
[87,104,93,102,105,103,102,91,0,93],
[101,121,101,105,123,122,103,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,95,85,98,101,102,87,109],
[112,0,113,106,105,114,101,120,101,129],
[110,97,0,98,78,92,102,108,106,111],
[115,104,112,0,97,93,102,111,103,116],
[125,105,132,113,0,123,120,128,123,120],
[112,96,118,117,87,0,114,100,112,109],
[109,109,108,108,90,96,0,106,95,103],
[108,90,102,99,82,110,104,0,87,106],
[123,109,104,107,87,98,115,123,0,105],
[101,81,99,94,90,101,107,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,96,97,102,84,123,107,100,94],
[123,0,87,113,119,109,120,115,89,112],
[114,123,0,112,121,112,118,115,106,105],
[113,97,98,0,133,101,127,118,88,110],
[108,91,89,77,0,78,106,102,85,88],
[126,101,98,109,132,0,125,119,107,109],
[87,90,92,83,104,85,0,99,89,87],
[103,95,95,92,108,91,111,0,95,97],
[110,121,104,122,125,103,121,115,0,121],
[116,98,105,100,122,101,123,113,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,93,102,101,105,119,104,115],
[111,0,102,91,101,94,101,107,117,101],
[98,108,0,103,97,115,105,108,102,123],
[117,119,107,0,106,100,109,119,112,122],
[108,109,113,104,0,110,107,106,107,117],
[109,116,95,110,100,0,111,112,112,125],
[105,109,105,101,103,99,0,108,90,108],
[91,103,102,91,104,98,102,0,104,111],
[106,93,108,98,103,98,120,106,0,104],
[95,109,87,88,93,85,102,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,101,112,104,105,98,116,112],
[110,0,104,99,109,101,107,107,110,108],
[112,106,0,102,115,114,109,104,115,115],
[109,111,108,0,106,97,105,109,118,105],
[98,101,95,104,0,104,96,109,111,112],
[106,109,96,113,106,0,103,108,113,113],
[105,103,101,105,114,107,0,101,120,117],
[112,103,106,101,101,102,109,0,108,110],
[94,100,95,92,99,97,90,102,0,109],
[98,102,95,105,98,97,93,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,120,104,97,113,109,93,116,93],
[124,0,115,116,103,118,105,120,121,108],
[90,95,0,102,97,112,116,111,112,108],
[106,94,108,0,128,128,103,106,123,116],
[113,107,113,82,0,121,96,104,115,114],
[97,92,98,82,89,0,85,101,91,99],
[101,105,94,107,114,125,0,112,115,108],
[117,90,99,104,106,109,98,0,112,104],
[94,89,98,87,95,119,95,98,0,97],
[117,102,102,94,96,111,102,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,115,118,137,108,127,126,106],
[89,0,99,100,92,100,104,110,97,101],
[105,111,0,107,114,130,109,117,121,106],
[95,110,103,0,114,123,97,111,107,108],
[92,118,96,96,0,119,94,110,97,95],
[73,110,80,87,91,0,90,94,97,92],
[102,106,101,113,116,120,0,125,128,112],
[83,100,93,99,100,116,85,0,96,109],
[84,113,89,103,113,113,82,114,0,97],
[104,109,104,102,115,118,98,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,120,119,114,112,99,109,97,115],
[89,0,107,111,92,101,95,98,101,89],
[90,103,0,124,95,105,87,103,104,115],
[91,99,86,0,84,87,91,95,96,92],
[96,118,115,126,0,103,101,113,103,112],
[98,109,105,123,107,0,109,109,111,105],
[111,115,123,119,109,101,0,101,106,109],
[101,112,107,115,97,101,109,0,112,110],
[113,109,106,114,107,99,104,98,0,116],
[95,121,95,118,98,105,101,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,108,101,112,112,106,112,110],
[106,0,94,97,99,105,109,103,97,105],
[118,116,0,115,104,114,115,114,106,122],
[102,113,95,0,111,119,111,114,107,117],
[109,111,106,99,0,110,105,105,120,107],
[98,105,96,91,100,0,113,105,108,110],
[98,101,95,99,105,97,0,102,97,99],
[104,107,96,96,105,105,108,0,91,108],
[98,113,104,103,90,102,113,119,0,102],
[100,105,88,93,103,100,111,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,123,95,104,106,97,100,106],
[120,0,107,130,94,117,94,129,112,112],
[110,103,0,115,99,86,113,132,114,93],
[87,80,95,0,103,90,81,88,96,118],
[115,116,111,107,0,117,99,132,120,111],
[106,93,124,120,93,0,89,141,86,118],
[104,116,97,129,111,121,0,130,105,125],
[113,81,78,122,78,69,80,0,88,107],
[110,98,96,114,90,124,105,122,0,136],
[104,98,117,92,99,92,85,103,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,113,105,117,103,115,104,100],
[105,0,103,110,113,126,118,113,109,107],
[109,107,0,108,112,120,106,112,112,99],
[97,100,102,0,108,113,110,113,111,111],
[105,97,98,102,0,100,110,107,102,94],
[93,84,90,97,110,0,107,102,96,91],
[107,92,104,100,100,103,0,102,100,97],
[95,97,98,97,103,108,108,0,97,100],
[106,101,98,99,108,114,110,113,0,102],
[110,103,111,99,116,119,113,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,84,66,55,100,88,91,52,82],
[135,0,121,95,80,109,125,117,98,114],
[126,89,0,56,59,102,101,70,77,85],
[144,115,154,0,100,121,150,127,121,111],
[155,130,151,110,0,118,152,134,96,107],
[110,101,108,89,92,0,108,85,86,94],
[122,85,109,60,58,102,0,109,86,91],
[119,93,140,83,76,125,101,0,99,95],
[158,112,133,89,114,124,124,111,0,96],
[128,96,125,99,103,116,119,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,124,102,102,125,114,108,109],
[108,0,121,108,88,117,92,103,119,92],
[90,89,0,137,106,109,104,112,104,120],
[86,102,73,0,83,119,100,107,100,116],
[108,122,104,127,0,108,111,105,115,113],
[108,93,101,91,102,0,106,78,113,118],
[85,118,106,110,99,104,0,110,93,121],
[96,107,98,103,105,132,100,0,96,98],
[102,91,106,110,95,97,117,114,0,110],
[101,118,90,94,97,92,89,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,87,97,96,116,100,87,108,106],
[92,0,82,80,90,101,102,83,89,91],
[123,128,0,99,120,122,116,110,140,111],
[113,130,111,0,83,98,119,101,119,108],
[114,120,90,127,0,115,114,89,109,106],
[94,109,88,112,95,0,98,100,106,89],
[110,108,94,91,96,112,0,88,111,110],
[123,127,100,109,121,110,122,0,120,113],
[102,121,70,91,101,104,99,90,0,95],
[104,119,99,102,104,121,100,97,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,113,110,98,116,110,108,116],
[101,0,94,109,105,96,108,101,112,109],
[103,116,0,113,108,108,117,118,118,117],
[97,101,97,0,101,97,104,103,105,90],
[100,105,102,109,0,107,112,111,101,122],
[112,114,102,113,103,0,109,113,113,108],
[94,102,93,106,98,101,0,104,96,100],
[100,109,92,107,99,97,106,0,102,105],
[102,98,92,105,109,97,114,108,0,103],
[94,101,93,120,88,102,110,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,108,99,112,99,111,105,117],
[113,0,113,105,89,107,113,106,98,115],
[100,97,0,105,101,95,107,99,88,113],
[102,105,105,0,105,98,101,103,111,113],
[111,121,109,105,0,111,116,112,108,124],
[98,103,115,112,99,0,105,110,86,112],
[111,97,103,109,94,105,0,105,92,118],
[99,104,111,107,98,100,105,0,96,110],
[105,112,122,99,102,124,118,114,0,124],
[93,95,97,97,86,98,92,100,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,120,112,105,97,110,106,111],
[106,0,115,127,113,106,97,102,108,123],
[87,95,0,109,96,88,77,83,101,101],
[90,83,101,0,100,93,69,77,103,97],
[98,97,114,110,0,86,90,90,106,97],
[105,104,122,117,124,0,107,113,109,104],
[113,113,133,141,120,103,0,116,107,116],
[100,108,127,133,120,97,94,0,110,105],
[104,102,109,107,104,101,103,100,0,103],
[99,87,109,113,113,106,94,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,101,100,112,99,104,114,106],
[102,0,99,95,103,117,107,95,109,111],
[112,111,0,119,103,115,114,107,112,103],
[109,115,91,0,109,108,105,104,104,107],
[110,107,107,101,0,107,109,97,117,105],
[98,93,95,102,103,0,97,91,96,97],
[111,103,96,105,101,113,0,94,114,107],
[106,115,103,106,113,119,116,0,120,113],
[96,101,98,106,93,114,96,90,0,102],
[104,99,107,103,105,113,103,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,88,85,110,96,88,100,97,84],
[134,0,104,110,118,124,124,113,133,108],
[122,106,0,114,116,96,101,114,111,120],
[125,100,96,0,123,119,105,115,106,96],
[100,92,94,87,0,104,93,96,102,89],
[114,86,114,91,106,0,106,110,115,110],
[122,86,109,105,117,104,0,98,115,100],
[110,97,96,95,114,100,112,0,112,102],
[113,77,99,104,108,95,95,98,0,88],
[126,102,90,114,121,100,110,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,97,101,98,83,106,90,90,105],
[130,0,126,130,106,126,134,123,122,97],
[113,84,0,103,134,104,127,116,83,89],
[109,80,107,0,101,99,93,71,79,88],
[112,104,76,109,0,114,135,115,106,103],
[127,84,106,111,96,0,114,108,112,101],
[104,76,83,117,75,96,0,109,83,91],
[120,87,94,139,95,102,101,0,98,106],
[120,88,127,131,104,98,127,112,0,95],
[105,113,121,122,107,109,119,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,118,111,94,105,106,131,103],
[91,0,99,109,88,102,111,88,110,100],
[93,111,0,98,101,100,119,112,110,103],
[92,101,112,0,97,93,102,98,115,96],
[99,122,109,113,0,105,119,103,106,97],
[116,108,110,117,105,0,109,107,125,95],
[105,99,91,108,91,101,0,92,100,90],
[104,122,98,112,107,103,118,0,114,113],
[79,100,100,95,104,85,110,96,0,90],
[107,110,107,114,113,115,120,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,125,128,132,100,116,143,125,124],
[61,0,104,100,79,84,91,112,90,98],
[85,106,0,105,104,94,120,115,95,121],
[82,110,105,0,88,101,84,133,86,75],
[78,131,106,122,0,105,136,124,113,138],
[110,126,116,109,105,0,105,137,114,116],
[94,119,90,126,74,105,0,139,100,119],
[67,98,95,77,86,73,71,0,86,87],
[85,120,115,124,97,96,110,124,0,118],
[86,112,89,135,72,94,91,123,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,115,114,104,105,115,109,116],
[88,0,84,91,101,78,92,108,91,94],
[95,126,0,117,117,105,98,114,104,117],
[95,119,93,0,107,100,99,101,103,111],
[96,109,93,103,0,93,95,120,106,106],
[106,132,105,110,117,0,101,119,111,109],
[105,118,112,111,115,109,0,115,118,129],
[95,102,96,109,90,91,95,0,102,121],
[101,119,106,107,104,99,92,108,0,89],
[94,116,93,99,104,101,81,89,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,108,123,99,102,102,118,122],
[102,0,111,95,97,98,101,94,115,106],
[109,99,0,102,106,118,98,98,112,100],
[102,115,108,0,97,97,95,100,110,105],
[87,113,104,113,0,106,99,114,112,109],
[111,112,92,113,104,0,104,107,117,111],
[108,109,112,115,111,106,0,98,120,113],
[108,116,112,110,96,103,112,0,114,111],
[92,95,98,100,98,93,90,96,0,108],
[88,104,110,105,101,99,97,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,78,75,84,51,75,94,67,29],
[118,0,44,72,101,77,99,131,116,94],
[132,166,0,90,151,111,132,156,125,94],
[135,138,120,0,121,86,89,161,130,71],
[126,109,59,89,0,112,93,158,111,92],
[159,133,99,124,98,0,71,117,124,98],
[135,111,78,121,117,139,0,148,134,116],
[116,79,54,49,52,93,62,0,58,46],
[143,94,85,80,99,86,76,152,0,55],
[181,116,116,139,118,112,94,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,116,101,126,96,113,111,128],
[96,0,102,86,81,107,94,104,97,118],
[103,108,0,115,103,143,107,117,106,139],
[94,124,95,0,77,123,97,95,95,104],
[109,129,107,133,0,105,117,116,98,130],
[84,103,67,87,105,0,84,101,71,102],
[114,116,103,113,93,126,0,118,104,117],
[97,106,93,115,94,109,92,0,101,109],
[99,113,104,115,112,139,106,109,0,114],
[82,92,71,106,80,108,93,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,105,112,104,103,101,111,109],
[120,0,104,111,119,111,113,122,122,108],
[116,106,0,113,121,114,104,117,116,108],
[105,99,97,0,117,101,99,110,106,113],
[98,91,89,93,0,90,97,100,105,96],
[106,99,96,109,120,0,104,120,108,112],
[107,97,106,111,113,106,0,119,108,102],
[109,88,93,100,110,90,91,0,100,101],
[99,88,94,104,105,102,102,110,0,99],
[101,102,102,97,114,98,108,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,108,104,98,106,97,106,102],
[110,0,103,90,103,94,86,85,99,101],
[109,107,0,106,108,106,111,94,97,117],
[102,120,104,0,115,99,107,95,101,114],
[106,107,102,95,0,94,93,97,110,93],
[112,116,104,111,116,0,109,114,115,118],
[104,124,99,103,117,101,0,96,111,106],
[113,125,116,115,113,96,114,0,116,127],
[104,111,113,109,100,95,99,94,0,97],
[108,109,93,96,117,92,104,83,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,96,102,100,105,96,81,98],
[108,0,108,92,95,106,104,94,100,101],
[108,102,0,103,104,113,110,96,91,102],
[114,118,107,0,98,121,107,98,105,103],
[108,115,106,112,0,112,103,110,101,107],
[110,104,97,89,98,0,104,95,89,93],
[105,106,100,103,107,106,0,100,110,102],
[114,116,114,112,100,115,110,0,90,102],
[129,110,119,105,109,121,100,120,0,114],
[112,109,108,107,103,117,108,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,94,96,99,106,116,101,109],
[101,0,113,102,112,96,114,114,100,116],
[98,97,0,94,101,98,104,118,92,112],
[116,108,116,0,120,106,125,131,105,113],
[114,98,109,90,0,93,112,115,101,100],
[111,114,112,104,117,0,116,120,108,120],
[104,96,106,85,98,94,0,108,92,101],
[94,96,92,79,95,90,102,0,98,93],
[109,110,118,105,109,102,118,112,0,116],
[101,94,98,97,110,90,109,117,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,112,101,86,115,96,91,108],
[122,0,99,126,111,108,123,104,98,118],
[108,111,0,98,111,99,120,97,97,103],
[98,84,112,0,95,93,102,105,89,110],
[109,99,99,115,0,94,125,111,90,120],
[124,102,111,117,116,0,138,128,129,110],
[95,87,90,108,85,72,0,92,98,109],
[114,106,113,105,99,82,118,0,92,108],
[119,112,113,121,120,81,112,118,0,114],
[102,92,107,100,90,100,101,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,111,101,107,109,109,111,102],
[105,0,107,112,106,98,101,106,108,107],
[104,103,0,103,97,104,109,101,112,107],
[99,98,107,0,106,96,98,100,112,105],
[109,104,113,104,0,100,107,103,106,105],
[103,112,106,114,110,0,114,111,112,117],
[101,109,101,112,103,96,0,105,111,104],
[101,104,109,110,107,99,105,0,107,112],
[99,102,98,98,104,98,99,103,0,102],
[108,103,103,105,105,93,106,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,144,120,98,95,94,106,85,110],
[98,0,125,95,101,102,94,109,103,88],
[66,85,0,77,73,68,70,76,57,62],
[90,115,133,0,91,88,99,110,91,84],
[112,109,137,119,0,110,133,120,107,98],
[115,108,142,122,100,0,120,111,123,106],
[116,116,140,111,77,90,0,112,96,118],
[104,101,134,100,90,99,98,0,78,83],
[125,107,153,119,103,87,114,132,0,98],
[100,122,148,126,112,104,92,127,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,106,107,95,90,105,107,104],
[102,0,116,115,101,109,98,103,108,91],
[110,94,0,105,88,98,111,95,93,99],
[104,95,105,0,97,100,103,106,105,106],
[103,109,122,113,0,114,104,104,103,99],
[115,101,112,110,96,0,109,108,114,112],
[120,112,99,107,106,101,0,103,106,109],
[105,107,115,104,106,102,107,0,108,106],
[103,102,117,105,107,96,104,102,0,101],
[106,119,111,104,111,98,101,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,88,170,102,103,109,117,114,107],
[107,0,85,134,86,120,74,106,104,109],
[122,125,0,186,144,101,132,134,129,127],
[40,76,24,0,83,38,70,106,64,82],
[108,124,66,127,0,102,95,110,94,94],
[107,90,109,172,108,0,113,117,114,103],
[101,136,78,140,115,97,0,140,111,95],
[93,104,76,104,100,93,70,0,118,119],
[96,106,81,146,116,96,99,92,0,85],
[103,101,83,128,116,107,115,91,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,120,97,107,86,104,101,94],
[101,0,106,103,112,114,103,114,98,103],
[95,104,0,110,116,107,94,107,97,92],
[90,107,100,0,106,99,78,96,85,97],
[113,98,94,104,0,93,101,103,82,87],
[103,96,103,111,117,0,93,99,96,90],
[124,107,116,132,109,117,0,119,128,80],
[106,96,103,114,107,111,91,0,114,107],
[109,112,113,125,128,114,82,96,0,97],
[116,107,118,113,123,120,130,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,108,89,104,90,96,98,101],
[107,0,113,111,92,109,97,107,104,105],
[110,97,0,113,95,105,110,112,108,108],
[102,99,97,0,99,105,94,111,94,114],
[121,118,115,111,0,109,101,117,111,117],
[106,101,105,105,101,0,99,115,109,101],
[120,113,100,116,109,111,0,124,110,110],
[114,103,98,99,93,95,86,0,111,110],
[112,106,102,116,99,101,100,99,0,104],
[109,105,102,96,93,109,100,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,116,106,101,112,109,95,115],
[103,0,100,116,100,96,97,104,100,106],
[106,110,0,112,94,112,96,110,107,121],
[94,94,98,0,96,88,100,94,86,106],
[104,110,116,114,0,102,105,105,109,111],
[109,114,98,122,108,0,109,106,98,117],
[98,113,114,110,105,101,0,100,96,114],
[101,106,100,116,105,104,110,0,99,117],
[115,110,103,124,101,112,114,111,0,112],
[95,104,89,104,99,93,96,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,113,97,103,106,114,97,103],
[107,0,109,104,111,105,110,117,115,113],
[105,101,0,101,108,103,110,111,104,108],
[97,106,109,0,110,109,110,108,102,103],
[113,99,102,100,0,107,106,108,110,105],
[107,105,107,101,103,0,102,100,102,106],
[104,100,100,100,104,108,0,117,103,105],
[96,93,99,102,102,110,93,0,105,103],
[113,95,106,108,100,108,107,105,0,104],
[107,97,102,107,105,104,105,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,105,128,94,109,125,122,112],
[104,0,107,106,126,112,95,121,113,123],
[93,103,0,86,120,108,99,117,127,107],
[105,104,124,0,135,108,89,129,112,123],
[82,84,90,75,0,82,95,109,100,99],
[116,98,102,102,128,0,114,133,118,122],
[101,115,111,121,115,96,0,124,111,136],
[85,89,93,81,101,77,86,0,105,113],
[88,97,83,98,110,92,99,105,0,102],
[98,87,103,87,111,88,74,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,107,109,112,108,92,104,100],
[97,0,112,96,115,105,100,105,102,93],
[108,98,0,102,111,100,98,107,114,88],
[103,114,108,0,118,109,105,108,105,96],
[101,95,99,92,0,107,101,102,99,97],
[98,105,110,101,103,0,97,111,115,101],
[102,110,112,105,109,113,0,109,109,110],
[118,105,103,102,108,99,101,0,109,95],
[106,108,96,105,111,95,101,101,0,91],
[110,117,122,114,113,109,100,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,98,100,103,103,107,109,102],
[89,0,114,97,97,106,93,100,99,84],
[83,96,0,78,96,97,93,94,93,100],
[112,113,132,0,105,122,121,118,108,108],
[110,113,114,105,0,104,99,105,115,88],
[107,104,113,88,106,0,104,107,104,82],
[107,117,117,89,111,106,0,111,111,101],
[103,110,116,92,105,103,99,0,98,86],
[101,111,117,102,95,106,99,112,0,103],
[108,126,110,102,122,128,109,124,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,91,97,92,107,102,100,105],
[95,0,92,101,107,90,96,101,96,106],
[114,118,0,114,94,105,115,119,116,107],
[119,109,96,0,96,93,102,105,96,114],
[113,103,116,114,0,106,107,111,111,116],
[118,120,105,117,104,0,106,116,104,120],
[103,114,95,108,103,104,0,108,102,108],
[108,109,91,105,99,94,102,0,98,96],
[110,114,94,114,99,106,108,112,0,104],
[105,104,103,96,94,90,102,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,83,94,133,77,109,113,105],
[104,0,97,93,92,111,87,96,108,93],
[102,113,0,80,80,100,90,103,103,105],
[127,117,130,0,101,130,116,122,134,106],
[116,118,130,109,0,124,103,112,125,111],
[77,99,110,80,86,0,85,101,113,80],
[133,123,120,94,107,125,0,127,122,119],
[101,114,107,88,98,109,83,0,114,107],
[97,102,107,76,85,97,88,96,0,97],
[105,117,105,104,99,130,91,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,112,113,108,114,109,97,107],
[106,0,110,104,118,114,111,118,106,109],
[106,100,0,106,111,113,117,112,107,113],
[98,106,104,0,107,112,108,108,102,102],
[97,92,99,103,0,110,110,112,95,103],
[102,96,97,98,100,0,100,102,102,97],
[96,99,93,102,100,110,0,102,104,101],
[101,92,98,102,98,108,108,0,108,102],
[113,104,103,108,115,108,106,102,0,109],
[103,101,97,108,107,113,109,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,92,85,103,105,101,103,99],
[97,0,79,95,93,93,97,91,92,90],
[101,131,0,115,104,103,94,99,115,95],
[118,115,95,0,89,94,104,103,101,93],
[125,117,106,121,0,97,102,99,118,114],
[107,117,107,116,113,0,110,101,114,112],
[105,113,116,106,108,100,0,85,105,100],
[109,119,111,107,111,109,125,0,114,103],
[107,118,95,109,92,96,105,96,0,90],
[111,120,115,117,96,98,110,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,86,60,94,102,103,110,66,75],
[139,0,88,105,130,131,149,151,79,104],
[124,122,0,83,124,127,150,118,133,113],
[150,105,127,0,151,138,155,155,96,110],
[116,80,86,59,0,85,129,107,76,88],
[108,79,83,72,125,0,125,118,111,111],
[107,61,60,55,81,85,0,76,62,76],
[100,59,92,55,103,92,134,0,77,93],
[144,131,77,114,134,99,148,133,0,127],
[135,106,97,100,122,99,134,117,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,106,112,98,107,104,112,112],
[98,0,107,95,90,102,111,96,99,106],
[101,103,0,94,101,103,107,108,106,105],
[104,115,116,0,109,110,122,106,119,113],
[98,120,109,101,0,108,109,104,108,108],
[112,108,107,100,102,0,111,112,115,110],
[103,99,103,88,101,99,0,99,97,113],
[106,114,102,104,106,98,111,0,103,109],
[98,111,104,91,102,95,113,107,0,112],
[98,104,105,97,102,100,97,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,106,116,101,99,86,106,97,103],
[89,0,118,99,87,98,98,97,103,93],
[104,92,0,106,93,94,105,101,108,100],
[94,111,104,0,103,86,85,88,101,99],
[109,123,117,107,0,101,98,102,116,104],
[111,112,116,124,109,0,103,108,114,103],
[124,112,105,125,112,107,0,121,115,120],
[104,113,109,122,108,102,89,0,115,111],
[113,107,102,109,94,96,95,95,0,101],
[107,117,110,111,106,107,90,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,115,102,112,102,128,125,108],
[106,0,118,104,94,102,102,123,123,117],
[88,92,0,98,71,100,104,109,100,99],
[95,106,112,0,90,109,112,119,124,103],
[108,116,139,120,0,125,116,134,111,102],
[98,108,110,101,85,0,113,116,122,93],
[108,108,106,98,94,97,0,127,106,98],
[82,87,101,91,76,94,83,0,94,78],
[85,87,110,86,99,88,104,116,0,113],
[102,93,111,107,108,117,112,132,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,109,111,114,102,102,107,116],
[107,0,104,115,111,119,108,103,111,109],
[103,106,0,109,102,113,86,108,116,109],
[101,95,101,0,116,117,92,102,105,109],
[99,99,108,94,0,112,100,98,115,107],
[96,91,97,93,98,0,77,95,104,93],
[108,102,124,118,110,133,0,103,121,117],
[108,107,102,108,112,115,107,0,110,113],
[103,99,94,105,95,106,89,100,0,110],
[94,101,101,101,103,117,93,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,105,104,104,95,84,104,102],
[104,0,87,106,105,101,91,100,92,96],
[109,123,0,101,113,105,101,104,114,116],
[105,104,109,0,97,99,95,94,108,106],
[106,105,97,113,0,110,81,94,108,95],
[106,109,105,111,100,0,90,101,93,111],
[115,119,109,115,129,120,0,116,122,102],
[126,110,106,116,116,109,94,0,110,115],
[106,118,96,102,102,117,88,100,0,109],
[108,114,94,104,115,99,108,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,130,106,106,99,108,100,103],
[105,0,107,106,113,119,100,106,102,92],
[103,103,0,116,96,108,86,98,91,96],
[80,104,94,0,101,101,78,102,83,90],
[104,97,114,109,0,110,95,116,111,99],
[104,91,102,109,100,0,93,117,104,103],
[111,110,124,132,115,117,0,125,108,98],
[102,104,112,108,94,93,85,0,96,84],
[110,108,119,127,99,106,102,114,0,106],
[107,118,114,120,111,107,112,126,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,96,99,119,94,84,79,103],
[122,0,102,115,109,115,109,119,85,110],
[115,108,0,105,102,137,90,94,120,95],
[114,95,105,0,114,123,107,113,122,84],
[111,101,108,96,0,122,82,107,87,94],
[91,95,73,87,88,0,67,87,75,84],
[116,101,120,103,128,143,0,101,122,120],
[126,91,116,97,103,123,109,0,76,93],
[131,125,90,88,123,135,88,134,0,111],
[107,100,115,126,116,126,90,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,89,98,92,101,99,88,90],
[112,0,118,105,109,102,108,105,100,104],
[105,92,0,104,104,92,106,90,89,92],
[121,105,106,0,104,106,100,101,93,107],
[112,101,106,106,0,108,112,95,99,92],
[118,108,118,104,102,0,115,102,109,101],
[109,102,104,110,98,95,0,100,106,96],
[111,105,120,109,115,108,110,0,101,105],
[122,110,121,117,111,101,104,109,0,106],
[120,106,118,103,118,109,114,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,94,119,99,114,110,109,94],
[91,0,92,99,119,105,109,82,65,75],
[103,118,0,115,127,92,132,107,99,115],
[116,111,95,0,130,105,110,95,116,98],
[91,91,83,80,0,86,109,54,85,104],
[111,105,118,105,124,0,115,95,95,111],
[96,101,78,100,101,95,0,76,89,74],
[100,128,103,115,156,115,134,0,104,118],
[101,145,111,94,125,115,121,106,0,114],
[116,135,95,112,106,99,136,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,80,79,66,68,99,98,112],
[105,0,98,109,101,96,109,116,108,121],
[120,112,0,108,102,85,78,108,101,120],
[130,101,102,0,95,83,87,109,113,130],
[131,109,108,115,0,110,103,113,136,141],
[144,114,125,127,100,0,110,118,120,132],
[142,101,132,123,107,100,0,140,133,127],
[111,94,102,101,97,92,70,0,102,111],
[112,102,109,97,74,90,77,108,0,123],
[98,89,90,80,69,78,83,99,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,99,97,89,110,99,94,106],
[98,0,99,98,105,86,102,95,108,112],
[115,111,0,95,113,93,118,94,106,99],
[111,112,115,0,109,105,107,107,113,103],
[113,105,97,101,0,96,109,97,99,97],
[121,124,117,105,114,0,115,107,113,108],
[100,108,92,103,101,95,0,93,103,111],
[111,115,116,103,113,103,117,0,114,104],
[116,102,104,97,111,97,107,96,0,89],
[104,98,111,107,113,102,99,106,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,111,111,99,107,117,116,109],
[100,0,93,100,109,99,107,103,108,101],
[100,117,0,108,110,106,105,114,107,111],
[99,110,102,0,105,98,115,103,103,110],
[99,101,100,105,0,101,104,100,109,101],
[111,111,104,112,109,0,111,104,105,112],
[103,103,105,95,106,99,0,102,107,109],
[93,107,96,107,110,106,108,0,102,106],
[94,102,103,107,101,105,103,108,0,108],
[101,109,99,100,109,98,101,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,102,113,100,99,100,103,97],
[108,0,111,112,119,106,108,117,108,103],
[93,99,0,96,108,86,104,101,100,90],
[108,98,114,0,115,86,104,121,100,109],
[97,91,102,95,0,96,93,101,99,95],
[110,104,124,124,114,0,111,120,118,119],
[111,102,106,106,117,99,0,123,116,99],
[110,93,109,89,109,90,87,0,107,98],
[107,102,110,110,111,92,94,103,0,104],
[113,107,120,101,115,91,111,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,82,99,90,100,117,102,93,122],
[109,0,96,101,115,104,124,115,102,116],
[128,114,0,105,119,116,120,119,109,132],
[111,109,105,0,102,112,113,116,101,103],
[120,95,91,108,0,98,120,111,97,108],
[110,106,94,98,112,0,107,107,101,121],
[93,86,90,97,90,103,0,108,90,102],
[108,95,91,94,99,103,102,0,94,114],
[117,108,101,109,113,109,120,116,0,120],
[88,94,78,107,102,89,108,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,105,99,110,109,103,116,114],
[96,0,98,93,99,104,95,103,104,113],
[111,112,0,106,100,100,96,111,126,122],
[105,117,104,0,104,101,104,115,117,127],
[111,111,110,106,0,101,103,104,105,120],
[100,106,110,109,109,0,104,100,115,123],
[101,115,114,106,107,106,0,109,114,125],
[107,107,99,95,106,110,101,0,96,117],
[94,106,84,93,105,95,96,114,0,120],
[96,97,88,83,90,87,85,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,101,107,108,101,105,91,116],
[104,0,103,99,116,101,102,103,92,116],
[111,107,0,92,109,104,102,108,103,116],
[109,111,118,0,117,109,105,114,106,128],
[103,94,101,93,0,101,93,105,98,107],
[102,109,106,101,109,0,106,118,102,123],
[109,108,108,105,117,104,0,123,97,124],
[105,107,102,96,105,92,87,0,96,112],
[119,118,107,104,112,108,113,114,0,120],
[94,94,94,82,103,87,86,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,107,110,104,110,116,116,103],
[99,0,101,110,108,100,107,115,120,106],
[95,109,0,108,101,105,107,117,125,118],
[103,100,102,0,105,110,96,114,122,99],
[100,102,109,105,0,102,99,111,110,112],
[106,110,105,100,108,0,104,110,113,112],
[100,103,103,114,111,106,0,116,108,109],
[94,95,93,96,99,100,94,0,106,111],
[94,90,85,88,100,97,102,104,0,103],
[107,104,92,111,98,98,101,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,98,97,117,118,99,107,113],
[116,0,123,99,106,120,113,102,106,122],
[105,87,0,109,110,117,118,105,109,125],
[112,111,101,0,112,129,109,112,106,117],
[113,104,100,98,0,114,111,100,109,105],
[93,90,93,81,96,0,109,88,92,104],
[92,97,92,101,99,101,0,97,101,100],
[111,108,105,98,110,122,113,0,116,118],
[103,104,101,104,101,118,109,94,0,115],
[97,88,85,93,105,106,110,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,101,100,91,101,95,98,91],
[113,0,102,101,94,99,96,100,112,104],
[112,108,0,100,105,98,101,112,107,102],
[109,109,110,0,104,110,107,107,108,111],
[110,116,105,106,0,107,103,101,112,108],
[119,111,112,100,103,0,106,117,116,100],
[109,114,109,103,107,104,0,96,101,104],
[115,110,98,103,109,93,114,0,109,113],
[112,98,103,102,98,94,109,101,0,101],
[119,106,108,99,102,110,106,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,106,106,105,120,106,108,106],
[100,0,107,103,99,96,120,91,107,111],
[101,103,0,100,100,108,118,94,115,103],
[104,107,110,0,100,111,115,102,112,107],
[104,111,110,110,0,106,118,103,110,109],
[105,114,102,99,104,0,116,115,112,112],
[90,90,92,95,92,94,0,86,89,93],
[104,119,116,108,107,95,124,0,113,110],
[102,103,95,98,100,98,121,97,0,101],
[104,99,107,103,101,98,117,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,104,107,108,96,101,96,97],
[109,0,110,110,94,103,112,93,106,95],
[100,100,0,113,107,118,92,95,107,97],
[106,100,97,0,107,98,95,100,93,90],
[103,116,103,103,0,102,105,103,108,110],
[102,107,92,112,108,0,97,100,103,93],
[114,98,118,115,105,113,0,106,111,105],
[109,117,115,110,107,110,104,0,100,97],
[114,104,103,117,102,107,99,110,0,100],
[113,115,113,120,100,117,105,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,108,99,77,123,104,111,100],
[108,0,114,119,117,101,111,111,106,96],
[101,96,0,96,105,81,101,96,101,94],
[102,91,114,0,99,89,109,110,115,86],
[111,93,105,111,0,84,100,109,107,100],
[133,109,129,121,126,0,124,116,125,105],
[87,99,109,101,110,86,0,111,117,90],
[106,99,114,100,101,94,99,0,102,94],
[99,104,109,95,103,85,93,108,0,99],
[110,114,116,124,110,105,120,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,112,113,103,85,93,105,101],
[105,0,105,104,106,98,91,93,107,116],
[113,105,0,112,110,90,93,90,113,104],
[98,106,98,0,112,98,110,90,114,121],
[97,104,100,98,0,96,86,91,96,99],
[107,112,120,112,114,0,104,102,123,121],
[125,119,117,100,124,106,0,105,115,120],
[117,117,120,120,119,108,105,0,124,115],
[105,103,97,96,114,87,95,86,0,109],
[109,94,106,89,111,89,90,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,98,101,125,106,98,120,106,92],
[89,0,103,89,106,115,92,84,99,83],
[112,107,0,102,124,81,76,105,102,94],
[109,121,108,0,118,96,112,112,109,99],
[85,104,86,92,0,90,80,80,104,87],
[104,95,129,114,120,0,103,86,72,83],
[112,118,134,98,130,107,0,115,132,116],
[90,126,105,98,130,124,95,0,105,99],
[104,111,108,101,106,138,78,105,0,116],
[118,127,116,111,123,127,94,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,101,105,93,99,101,98,98],
[100,0,89,89,92,93,100,89,85,98],
[118,121,0,118,116,100,101,100,104,105],
[109,121,92,0,113,109,105,106,103,104],
[105,118,94,97,0,103,102,104,99,98],
[117,117,110,101,107,0,110,101,101,105],
[111,110,109,105,108,100,0,94,102,108],
[109,121,110,104,106,109,116,0,106,112],
[112,125,106,107,111,109,108,104,0,106],
[112,112,105,106,112,105,102,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,130,125,104,95,91,108,90],
[109,0,105,115,93,103,99,111,110,91],
[91,105,0,114,96,98,93,104,102,83],
[80,95,96,0,103,96,77,87,79,82],
[85,117,114,107,0,102,96,108,101,84],
[106,107,112,114,108,0,116,123,92,110],
[115,111,117,133,114,94,0,138,120,109],
[119,99,106,123,102,87,72,0,83,92],
[102,100,108,131,109,118,90,127,0,85],
[120,119,127,128,126,100,101,118,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,103,106,110,116,99,94,112],
[96,0,108,114,106,103,115,98,115,120],
[94,102,0,98,99,93,104,92,103,108],
[107,96,112,0,92,113,99,102,91,100],
[104,104,111,118,0,114,115,106,94,105],
[100,107,117,97,96,0,106,102,102,108],
[94,95,106,111,95,104,0,108,97,104],
[111,112,118,108,104,108,102,0,100,100],
[116,95,107,119,116,108,113,110,0,105],
[98,90,102,110,105,102,106,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,98,101,124,101,109,90,93],
[103,0,115,101,107,127,121,100,107,121],
[102,95,0,87,102,110,98,94,102,99],
[112,109,123,0,102,129,115,112,112,101],
[109,103,108,108,0,123,111,104,110,98],
[86,83,100,81,87,0,92,93,91,94],
[109,89,112,95,99,118,0,105,97,108],
[101,110,116,98,106,117,105,0,109,99],
[120,103,108,98,100,119,113,101,0,102],
[117,89,111,109,112,116,102,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,106,107,103,107,118,113,96],
[100,0,102,93,92,87,96,90,90,75],
[106,108,0,111,122,111,114,107,113,93],
[104,117,99,0,109,101,106,104,111,97],
[103,118,88,101,0,103,104,106,114,88],
[107,123,99,109,107,0,114,101,126,105],
[103,114,96,104,106,96,0,112,104,103],
[92,120,103,106,104,109,98,0,109,90],
[97,120,97,99,96,84,106,101,0,85],
[114,135,117,113,122,105,107,120,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,122,87,53,119,53,118,87,88],
[120,0,159,89,90,121,141,154,89,124],
[88,51,0,86,88,106,88,86,86,86],
[123,121,124,0,110,68,144,119,71,89],
[157,120,122,100,0,101,157,100,66,100],
[91,89,104,142,109,0,143,155,108,142],
[157,69,122,66,53,67,0,66,35,118],
[92,56,124,91,110,55,144,0,54,89],
[123,121,124,139,144,102,175,156,0,84],
[122,86,124,121,110,68,92,121,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,109,105,123,113,114,128,112],
[116,0,112,104,111,115,102,120,116,119],
[95,98,0,104,99,107,95,114,114,112],
[101,106,106,0,94,117,103,110,118,122],
[105,99,111,116,0,121,107,111,114,120],
[87,95,103,93,89,0,91,103,126,111],
[97,108,115,107,103,119,0,122,130,117],
[96,90,96,100,99,107,88,0,118,99],
[82,94,96,92,96,84,80,92,0,106],
[98,91,98,88,90,99,93,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,98,113,101,105,96,98,102],
[110,0,110,101,108,112,105,96,106,108],
[115,100,0,100,109,96,102,100,109,100],
[112,109,110,0,118,109,116,107,113,99],
[97,102,101,92,0,96,103,95,106,103],
[109,98,114,101,114,0,98,99,103,89],
[105,105,108,94,107,112,0,105,111,105],
[114,114,110,103,115,111,105,0,110,109],
[112,104,101,97,104,107,99,100,0,102],
[108,102,110,111,107,121,105,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,111,108,111,101,97,92,102,105],
[82,0,106,102,86,91,88,94,100,101],
[99,104,0,88,91,82,91,90,93,99],
[102,108,122,0,90,110,97,99,108,101],
[99,124,119,120,0,119,120,109,105,113],
[109,119,128,100,91,0,98,109,95,108],
[113,122,119,113,90,112,0,108,124,118],
[118,116,120,111,101,101,102,0,112,114],
[108,110,117,102,105,115,86,98,0,117],
[105,109,111,109,97,102,92,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,108,78,91,79,36,88,111,95],
[135,0,150,101,121,109,113,128,108,104],
[102,60,0,68,150,80,78,89,101,57],
[132,109,142,0,157,129,99,122,122,139],
[119,89,60,53,0,105,72,102,132,80],
[131,101,130,81,105,0,101,92,124,103],
[174,97,132,111,138,109,0,130,153,127],
[122,82,121,88,108,118,80,0,146,74],
[99,102,109,88,78,86,57,64,0,70],
[115,106,153,71,130,107,83,136,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,99,105,108,97,93,94,96],
[116,0,119,115,116,115,96,101,117,108],
[102,91,0,109,111,106,99,98,106,101],
[111,95,101,0,115,123,105,110,110,107],
[105,94,99,95,0,121,92,97,94,97],
[102,95,104,87,89,0,87,82,97,95],
[113,114,111,105,118,123,0,101,106,115],
[117,109,112,100,113,128,109,0,117,114],
[116,93,104,100,116,113,104,93,0,111],
[114,102,109,103,113,115,95,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,112,107,110,100,97,104,102],
[108,0,104,103,114,122,100,106,101,108],
[107,106,0,107,114,121,100,101,112,108],
[98,107,103,0,101,112,99,104,107,100],
[103,96,96,109,0,114,115,106,101,94],
[100,88,89,98,96,0,88,96,94,91],
[110,110,110,111,95,122,0,91,115,106],
[113,104,109,106,104,114,119,0,104,107],
[106,109,98,103,109,116,95,106,0,93],
[108,102,102,110,116,119,104,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,83,95,104,95,97,108,84,96],
[106,0,89,103,97,92,102,101,88,97],
[127,121,0,109,107,119,109,121,93,118],
[115,107,101,0,110,94,121,121,89,104],
[106,113,103,100,0,88,107,107,104,104],
[115,118,91,116,122,0,109,116,94,125],
[113,108,101,89,103,101,0,111,101,111],
[102,109,89,89,103,94,99,0,96,96],
[126,122,117,121,106,116,109,114,0,103],
[114,113,92,106,106,85,99,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,113,99,105,116,112,117,89],
[106,0,104,112,102,122,121,115,118,113],
[96,106,0,110,93,105,121,112,117,106],
[97,98,100,0,97,110,89,89,97,77],
[111,108,117,113,0,125,96,91,125,99],
[105,88,105,100,85,0,111,97,104,107],
[94,89,89,121,114,99,0,91,109,90],
[98,95,98,121,119,113,119,0,121,92],
[93,92,93,113,85,106,101,89,0,90],
[121,97,104,133,111,103,120,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,103,81,86,76,91,104,87,120],
[88,0,64,92,95,71,67,86,86,93],
[107,146,0,101,90,95,80,89,96,111],
[129,118,109,0,99,100,93,117,95,126],
[124,115,120,111,0,92,122,110,127,118],
[134,139,115,110,118,0,93,126,114,113],
[119,143,130,117,88,117,0,128,122,134],
[106,124,121,93,100,84,82,0,74,91],
[123,124,114,115,83,96,88,136,0,111],
[90,117,99,84,92,97,76,119,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,108,107,96,100,107,85,94],
[96,0,96,97,98,100,84,117,69,83],
[100,114,0,93,123,90,111,112,94,118],
[102,113,117,0,131,108,113,124,110,112],
[103,112,87,79,0,93,113,119,78,77],
[114,110,120,102,117,0,124,131,91,125],
[110,126,99,97,97,86,0,124,90,112],
[103,93,98,86,91,79,86,0,79,96],
[125,141,116,100,132,119,120,131,0,107],
[116,127,92,98,133,85,98,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,97,108,100,101,97,99,91],
[114,0,98,115,118,118,112,100,106,106],
[117,112,0,116,119,108,114,101,108,108],
[113,95,94,0,115,106,105,98,113,109],
[102,92,91,95,0,106,109,103,93,96],
[110,92,102,104,104,0,108,112,95,91],
[109,98,96,105,101,102,0,100,105,104],
[113,110,109,112,107,98,110,0,106,109],
[111,104,102,97,117,115,105,104,0,111],
[119,104,102,101,114,119,106,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,101,79,102,85,88,94,78],
[112,0,99,84,120,104,82,103,115,101],
[110,111,0,93,104,85,91,105,103,97],
[109,126,117,0,119,111,84,117,124,90],
[131,90,106,91,0,103,93,116,125,76],
[108,106,125,99,107,0,100,125,117,101],
[125,128,119,126,117,110,0,131,128,105],
[122,107,105,93,94,85,79,0,96,98],
[116,95,107,86,85,93,82,114,0,79],
[132,109,113,120,134,109,105,112,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,119,89,123,115,108,102,98],
[106,0,103,108,97,110,88,93,94,96],
[101,107,0,123,101,104,94,92,90,106],
[91,102,87,0,86,110,91,96,92,93],
[121,113,109,124,0,128,110,102,99,112],
[87,100,106,100,82,0,94,91,85,105],
[95,122,116,119,100,116,0,108,107,117],
[102,117,118,114,108,119,102,0,88,113],
[108,116,120,118,111,125,103,122,0,120],
[112,114,104,117,98,105,93,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,146,95,80,112,88,88,121,118],
[61,0,76,58,28,47,70,50,55,86],
[64,134,0,68,105,88,129,83,98,114],
[115,152,142,0,110,148,114,98,108,142],
[130,182,105,100,0,100,158,113,146,140],
[98,163,122,62,110,0,143,63,97,135],
[122,140,81,96,52,67,0,96,99,98],
[122,160,127,112,97,147,114,0,109,131],
[89,155,112,102,64,113,111,101,0,111],
[92,124,96,68,70,75,112,79,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,116,103,110,103,99,131,113],
[91,0,86,106,64,103,95,87,112,99],
[97,124,0,121,100,101,108,103,115,107],
[94,104,89,0,94,94,106,102,109,105],
[107,146,110,116,0,93,111,114,136,106],
[100,107,109,116,117,0,126,118,147,106],
[107,115,102,104,99,84,0,102,131,103],
[111,123,107,108,96,92,108,0,131,96],
[79,98,95,101,74,63,79,79,0,83],
[97,111,103,105,104,104,107,114,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,108,107,106,117,105,113,105],
[99,0,110,104,101,94,113,97,116,104],
[94,100,0,96,99,90,106,95,116,113],
[102,106,114,0,112,104,120,115,110,114],
[103,109,111,98,0,104,108,99,108,106],
[104,116,120,106,106,0,125,109,111,115],
[93,97,104,90,102,85,0,99,112,102],
[105,113,115,95,111,101,111,0,112,105],
[97,94,94,100,102,99,98,98,0,108],
[105,106,97,96,104,95,108,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,110,113,116,123,120,117,111],
[108,0,100,99,109,103,101,104,108,101],
[93,110,0,106,103,105,102,117,100,101],
[100,111,104,0,111,96,106,109,110,103],
[97,101,107,99,0,104,96,103,93,114],
[94,107,105,114,106,0,109,100,103,105],
[87,109,108,104,114,101,0,110,101,98],
[90,106,93,101,107,110,100,0,91,95],
[93,102,110,100,117,107,109,119,0,97],
[99,109,109,107,96,105,112,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,104,103,114,103,110,108,102],
[92,0,104,110,104,106,107,104,103,98],
[86,106,0,97,99,112,93,95,89,89],
[106,100,113,0,95,106,94,113,100,88],
[107,106,111,115,0,112,105,109,116,97],
[96,104,98,104,98,0,97,92,104,84],
[107,103,117,116,105,113,0,113,109,108],
[100,106,115,97,101,118,97,0,102,99],
[102,107,121,110,94,106,101,108,0,91],
[108,112,121,122,113,126,102,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,105,115,108,102,112,107,115],
[103,0,98,107,105,103,101,100,109,112],
[102,112,0,107,112,111,108,98,109,111],
[105,103,103,0,104,102,96,96,108,107],
[95,105,98,106,0,103,101,96,102,105],
[102,107,99,108,107,0,102,98,102,106],
[108,109,102,114,109,108,0,112,111,107],
[98,110,112,114,114,112,98,0,105,109],
[103,101,101,102,108,108,99,105,0,116],
[95,98,99,103,105,104,103,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,87,101,98,91,89,99,97],
[110,0,107,98,101,99,92,98,110,97],
[113,103,0,90,100,112,109,107,101,110],
[123,112,120,0,120,114,113,104,103,108],
[109,109,110,90,0,112,102,101,110,107],
[112,111,98,96,98,0,100,99,113,106],
[119,118,101,97,108,110,0,102,96,101],
[121,112,103,106,109,111,108,0,113,98],
[111,100,109,107,100,97,114,97,0,94],
[113,113,100,102,103,104,109,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,99,88,102,108,117,97,109],
[106,0,112,91,79,88,94,106,86,94],
[90,98,0,102,84,99,95,87,89,115],
[111,119,108,0,103,107,109,114,91,104],
[122,131,126,107,0,106,111,130,89,107],
[108,122,111,103,104,0,98,106,105,110],
[102,116,115,101,99,112,0,112,108,102],
[93,104,123,96,80,104,98,0,110,98],
[113,124,121,119,121,105,102,100,0,112],
[101,116,95,106,103,100,108,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,97,109,99,92,112,105,119],
[106,0,118,91,109,110,100,108,112,120],
[94,92,0,94,95,97,95,99,92,103],
[113,119,116,0,107,118,105,111,109,126],
[101,101,115,103,0,114,114,109,101,117],
[111,100,113,92,96,0,93,100,97,109],
[118,110,115,105,96,117,0,119,112,112],
[98,102,111,99,101,110,91,0,106,130],
[105,98,118,101,109,113,98,104,0,116],
[91,90,107,84,93,101,98,80,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,124,103,104,97,109,106,120,102],
[102,0,105,94,99,106,106,102,103,94],
[86,105,0,114,96,98,97,94,107,97],
[107,116,96,0,95,98,117,97,110,98],
[106,111,114,115,0,107,106,94,110,108],
[113,104,112,112,103,0,113,94,123,97],
[101,104,113,93,104,97,0,74,106,96],
[104,108,116,113,116,116,136,0,121,104],
[90,107,103,100,100,87,104,89,0,92],
[108,116,113,112,102,113,114,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,107,85,116,91,105,106,107],
[114,0,100,113,97,100,117,118,113,111],
[101,110,0,109,92,103,96,116,105,104],
[103,97,101,0,94,94,87,108,102,100],
[125,113,118,116,0,120,103,123,108,121],
[94,110,107,116,90,0,106,115,98,110],
[119,93,114,123,107,104,0,125,100,117],
[105,92,94,102,87,95,85,0,104,102],
[104,97,105,108,102,112,110,106,0,99],
[103,99,106,110,89,100,93,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,117,95,92,94,92,98,110],
[113,0,109,109,99,110,115,111,123,128],
[121,101,0,100,100,90,108,99,108,120],
[93,101,110,0,105,89,91,91,99,114],
[115,111,110,105,0,108,109,108,115,119],
[118,100,120,121,102,0,130,99,125,117],
[116,95,102,119,101,80,0,104,106,106],
[118,99,111,119,102,111,106,0,106,125],
[112,87,102,111,95,85,104,104,0,101],
[100,82,90,96,91,93,104,85,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,107,109,109,102,103,108,99],
[99,0,96,102,111,111,100,106,106,113],
[104,114,0,104,119,116,109,111,112,118],
[103,108,106,0,110,116,105,110,100,114],
[101,99,91,100,0,109,102,103,102,95],
[101,99,94,94,101,0,96,108,101,96],
[108,110,101,105,108,114,0,98,101,105],
[107,104,99,100,107,102,112,0,90,105],
[102,104,98,110,108,109,109,120,0,113],
[111,97,92,96,115,114,105,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,133,95,119,106,114,115,135,115],
[84,0,119,95,108,102,97,103,118,119],
[77,91,0,94,100,93,99,99,93,81],
[115,115,116,0,110,97,100,121,128,115],
[91,102,110,100,0,103,99,110,115,104],
[104,108,117,113,107,0,103,129,123,102],
[96,113,111,110,111,107,0,120,125,123],
[95,107,111,89,100,81,90,0,115,113],
[75,92,117,82,95,87,85,95,0,100],
[95,91,129,95,106,108,87,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,98,112,120,128,92,88,100,98],
[91,0,91,93,111,104,118,95,93,80],
[112,119,0,133,136,147,133,103,109,120],
[98,117,77,0,140,157,94,121,106,116],
[90,99,74,70,0,143,85,70,89,108],
[82,106,63,53,67,0,85,74,71,69],
[118,92,77,116,125,125,0,108,111,116],
[122,115,107,89,140,136,102,0,109,108],
[110,117,101,104,121,139,99,101,0,113],
[112,130,90,94,102,141,94,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,108,109,109,96,99,106,97],
[100,0,90,92,106,115,99,97,101,94],
[102,120,0,102,108,103,115,110,116,101],
[102,118,108,0,105,104,113,98,102,95],
[101,104,102,105,0,90,106,101,99,94],
[101,95,107,106,120,0,95,100,95,87],
[114,111,95,97,104,115,0,105,98,96],
[111,113,100,112,109,110,105,0,107,120],
[104,109,94,108,111,115,112,103,0,96],
[113,116,109,115,116,123,114,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,112,105,105,101,101,113,113],
[104,0,94,108,97,110,101,92,125,112],
[110,116,0,115,122,127,103,110,118,111],
[98,102,95,0,108,124,109,100,122,120],
[105,113,88,102,0,105,110,99,120,111],
[105,100,83,86,105,0,95,92,106,112],
[109,109,107,101,100,115,0,108,105,109],
[109,118,100,110,111,118,102,0,111,116],
[97,85,92,88,90,104,105,99,0,102],
[97,98,99,90,99,98,101,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,107,94,89,99,90,92,90],
[116,0,120,107,104,107,103,120,109,112],
[102,90,0,107,103,92,113,101,105,97],
[103,103,103,0,95,91,99,96,101,100],
[116,106,107,115,0,98,119,121,106,113],
[121,103,118,119,112,0,112,113,100,107],
[111,107,97,111,91,98,0,113,101,97],
[120,90,109,114,89,97,97,0,108,96],
[118,101,105,109,104,110,109,102,0,110],
[120,98,113,110,97,103,113,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,98,115,156,119,117,143,109,118],
[90,0,75,97,115,92,88,99,98,94],
[112,135,0,114,160,113,116,135,99,109],
[95,113,96,0,136,86,95,104,90,103],
[54,95,50,74,0,67,70,84,74,79],
[91,118,97,124,143,0,103,127,107,105],
[93,122,94,115,140,107,0,117,112,115],
[67,111,75,106,126,83,93,0,83,87],
[101,112,111,120,136,103,98,127,0,113],
[92,116,101,107,131,105,95,123,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,107,102,118,113,89,98,85],
[99,0,112,110,112,105,106,92,100,98],
[104,98,0,99,97,114,103,95,93,87],
[103,100,111,0,88,109,96,95,98,84],
[108,98,113,122,0,115,115,79,94,89],
[92,105,96,101,95,0,103,91,95,96],
[97,104,107,114,95,107,0,81,102,91],
[121,118,115,115,131,119,129,0,104,109],
[112,110,117,112,116,115,108,106,0,102],
[125,112,123,126,121,114,119,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,98,91,98,99,90,97,103],
[108,0,120,110,102,112,109,111,111,121],
[112,90,0,102,92,101,111,95,110,102],
[112,100,108,0,97,100,101,94,117,97],
[119,108,118,113,0,105,110,117,117,117],
[112,98,109,110,105,0,102,107,100,110],
[111,101,99,109,100,108,0,99,100,104],
[120,99,115,116,93,103,111,0,113,102],
[113,99,100,93,93,110,110,97,0,106],
[107,89,108,113,93,100,106,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,105,118,118,111,104,87,107],
[97,0,95,96,83,107,104,81,88,99],
[98,115,0,97,99,112,116,106,106,100],
[105,114,113,0,99,109,112,89,96,116],
[92,127,111,111,0,138,122,109,95,122],
[92,103,98,101,72,0,103,99,87,90],
[99,106,94,98,88,107,0,85,90,98],
[106,129,104,121,101,111,125,0,115,114],
[123,122,104,114,115,123,120,95,0,111],
[103,111,110,94,88,120,112,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,57,133,57,115,113,134,75],
[154,0,58,115,114,75,78,113,135,114],
[152,152,0,94,132,115,94,153,172,114],
[153,95,116,0,133,114,95,171,155,132],
[77,96,78,77,0,77,75,77,135,58],
[153,135,95,96,133,0,114,132,172,134],
[95,132,116,115,135,96,0,114,135,94],
[97,97,57,39,133,78,96,0,116,116],
[76,75,38,55,75,38,75,94,0,95],
[135,96,96,78,152,76,116,94,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,111,119,122,127,114,121,105,122],
[84,0,85,95,96,97,98,85,91,103],
[99,125,0,107,109,113,109,96,98,125],
[91,115,103,0,110,112,104,96,95,114],
[88,114,101,100,0,119,98,100,102,116],
[83,113,97,98,91,0,99,88,102,101],
[96,112,101,106,112,111,0,79,91,112],
[89,125,114,114,110,122,131,0,102,124],
[105,119,112,115,108,108,119,108,0,110],
[88,107,85,96,94,109,98,86,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,104,107,104,105,108,102,105],
[106,0,103,107,110,107,108,110,95,106],
[111,107,0,102,106,103,102,114,105,106],
[106,103,108,0,106,97,105,104,99,110],
[103,100,104,104,0,111,107,109,94,106],
[106,103,107,113,99,0,104,104,94,98],
[105,102,108,105,103,106,0,112,102,108],
[102,100,96,106,101,106,98,0,97,96],
[108,115,105,111,116,116,108,113,0,108],
[105,104,104,100,104,112,102,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,95,84,112,79,71,87,86,90],
[125,0,97,116,132,106,115,107,116,129],
[115,113,0,113,121,104,113,91,110,122],
[126,94,97,0,146,97,98,91,104,127],
[98,78,89,64,0,84,100,95,91,92],
[131,104,106,113,126,0,121,95,115,103],
[139,95,97,112,110,89,0,102,95,126],
[123,103,119,119,115,115,108,0,102,124],
[124,94,100,106,119,95,115,108,0,114],
[120,81,88,83,118,107,84,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,111,112,105,92,97,97,95],
[120,0,111,122,115,115,105,113,107,103],
[105,99,0,105,103,115,89,101,115,102],
[99,88,105,0,104,104,90,103,95,93],
[98,95,107,106,0,105,90,105,95,94],
[105,95,95,106,105,0,94,98,105,93],
[118,105,121,120,120,116,0,112,115,109],
[113,97,109,107,105,112,98,0,110,97],
[113,103,95,115,115,105,95,100,0,110],
[115,107,108,117,116,117,101,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,120,109,119,114,113,130,119,101],
[81,0,98,108,83,91,113,89,109,99],
[90,112,0,121,92,94,133,92,100,83],
[101,102,89,0,77,65,132,118,109,99],
[91,127,118,133,0,130,157,135,136,117],
[96,119,116,145,80,0,128,115,107,97],
[97,97,77,78,53,82,0,99,81,70],
[80,121,118,92,75,95,111,0,90,71],
[91,101,110,101,74,103,129,120,0,92],
[109,111,127,111,93,113,140,139,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,92,113,110,84,90,85,98],
[108,0,103,87,103,126,93,105,99,94],
[108,107,0,94,105,106,88,107,110,109],
[118,123,116,0,114,124,100,109,115,106],
[97,107,105,96,0,107,82,93,98,92],
[100,84,104,86,103,0,90,98,90,98],
[126,117,122,110,128,120,0,116,110,103],
[120,105,103,101,117,112,94,0,112,99],
[125,111,100,95,112,120,100,98,0,106],
[112,116,101,104,118,112,107,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,99,103,90,96,98,105,102],
[104,0,105,94,106,97,106,106,109,105],
[117,105,0,99,106,99,95,108,112,97],
[111,116,111,0,108,102,107,111,116,112],
[107,104,104,102,0,103,96,107,108,103],
[120,113,111,108,107,0,101,112,112,118],
[114,104,115,103,114,109,0,113,117,106],
[112,104,102,99,103,98,97,0,108,104],
[105,101,98,94,102,98,93,102,0,85],
[108,105,113,98,107,92,104,106,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,107,113,113,108,113,102,111],
[100,0,96,99,99,104,104,102,116,105],
[96,114,0,101,102,113,107,114,114,103],
[103,111,109,0,104,107,115,105,105,99],
[97,111,108,106,0,100,110,89,117,111],
[97,106,97,103,110,0,113,100,105,99],
[102,106,103,95,100,97,0,90,114,100],
[97,108,96,105,121,110,120,0,118,108],
[108,94,96,105,93,105,96,92,0,99],
[99,105,107,111,99,111,110,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,82,79,87,114,91,72,105,72],
[93,0,99,96,82,98,110,89,107,110],
[128,111,0,85,97,116,110,103,108,122],
[131,114,125,0,113,111,91,85,106,113],
[123,128,113,97,0,139,111,95,134,114],
[96,112,94,99,71,0,112,79,114,94],
[119,100,100,119,99,98,0,71,117,88],
[138,121,107,125,115,131,139,0,104,126],
[105,103,102,104,76,96,93,106,0,114],
[138,100,88,97,96,116,122,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,128,124,124,107,126,104,64,124],
[103,0,126,103,81,85,85,40,60,123],
[82,84,0,126,83,126,126,61,43,82],
[86,107,84,0,105,87,64,64,64,125],
[86,129,127,105,0,107,108,127,86,146],
[103,125,84,123,103,0,125,103,84,123],
[84,125,84,146,102,85,0,83,105,144],
[106,170,149,146,83,107,127,0,106,146],
[146,150,167,146,124,126,105,104,0,167],
[86,87,128,85,64,87,66,64,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,106,103,117,111,118,111,99],
[105,0,102,104,98,116,106,114,106,101],
[96,108,0,106,97,125,115,104,105,97],
[104,106,104,0,95,122,113,105,94,97],
[107,112,113,115,0,110,111,117,108,102],
[93,94,85,88,100,0,95,99,87,92],
[99,104,95,97,99,115,0,99,98,97],
[92,96,106,105,93,111,111,0,107,108],
[99,104,105,116,102,123,112,103,0,106],
[111,109,113,113,108,118,113,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,110,91,100,104,116,95,100],
[116,0,112,103,98,100,109,127,110,104],
[103,98,0,111,88,91,101,112,103,108],
[100,107,99,0,84,92,97,107,84,86],
[119,112,122,126,0,106,108,124,89,103],
[110,110,119,118,104,0,122,100,108,111],
[106,101,109,113,102,88,0,120,108,106],
[94,83,98,103,86,110,90,0,99,88],
[115,100,107,126,121,102,102,111,0,110],
[110,106,102,124,107,99,104,122,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,95,102,95,104,89,98,100,93],
[116,0,109,120,112,102,112,101,113,98],
[115,101,0,115,113,101,104,99,93,101],
[108,90,95,0,111,97,87,98,99,87],
[115,98,97,99,0,103,86,89,89,93],
[106,108,109,113,107,0,99,103,97,110],
[121,98,106,123,124,111,0,103,98,103],
[112,109,111,112,121,107,107,0,104,114],
[110,97,117,111,121,113,112,106,0,110],
[117,112,109,123,117,100,107,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,92,103,107,116,105,94,99],
[112,0,112,105,102,100,105,115,100,90],
[104,98,0,102,103,105,105,106,106,96],
[118,105,108,0,109,115,118,113,105,98],
[107,108,107,101,0,95,114,102,88,98],
[103,110,105,95,115,0,116,122,96,94],
[94,105,105,92,96,94,0,106,96,95],
[105,95,104,97,108,88,104,0,96,91],
[116,110,104,105,122,114,114,114,0,111],
[111,120,114,112,112,116,115,119,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,122,105,111,112,103,107,112,114],
[98,0,107,112,109,101,109,103,102,113],
[88,103,0,101,92,95,98,98,94,111],
[105,98,109,0,113,115,105,106,107,118],
[99,101,118,97,0,106,109,92,99,113],
[98,109,115,95,104,0,106,104,103,103],
[107,101,112,105,101,104,0,111,101,107],
[103,107,112,104,118,106,99,0,103,114],
[98,108,116,103,111,107,109,107,0,110],
[96,97,99,92,97,107,103,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,125,144,104,146,165,102,82,125],
[127,0,125,125,123,85,166,127,103,122],
[85,85,0,145,146,126,166,85,63,125],
[66,85,65,0,107,106,125,44,64,85],
[106,87,64,103,0,83,122,42,85,83],
[64,125,84,104,127,0,123,64,107,103],
[45,44,44,85,88,87,0,23,42,45],
[108,83,125,166,168,146,187,0,62,125],
[128,107,147,146,125,103,168,148,0,146],
[85,88,85,125,127,107,165,85,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,84,92,121,106,84,117,86,88],
[118,0,95,113,120,118,107,109,110,95],
[126,115,0,105,118,130,101,110,112,114],
[118,97,105,0,121,112,91,114,106,92],
[89,90,92,89,0,105,84,90,96,77],
[104,92,80,98,105,0,91,103,101,98],
[126,103,109,119,126,119,0,112,114,93],
[93,101,100,96,120,107,98,0,103,103],
[124,100,98,104,114,109,96,107,0,95],
[122,115,96,118,133,112,117,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,81,115,117,110,106,120,109,99],
[80,0,76,73,106,96,77,107,83,74],
[129,134,0,108,139,123,101,123,119,94],
[95,137,102,0,136,111,107,113,95,100],
[93,104,71,74,0,99,103,110,107,76],
[100,114,87,99,111,0,85,121,98,72],
[104,133,109,103,107,125,0,107,127,87],
[90,103,87,97,100,89,103,0,104,59],
[101,127,91,115,103,112,83,106,0,105],
[111,136,116,110,134,138,123,151,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,128,117,113,130,103,109,101,104],
[88,0,97,87,101,105,98,99,79,88],
[82,113,0,101,98,114,107,95,89,97],
[93,123,109,0,100,140,103,98,96,94],
[97,109,112,110,0,129,94,104,107,96],
[80,105,96,70,81,0,77,103,68,89],
[107,112,103,107,116,133,0,106,101,107],
[101,111,115,112,106,107,104,0,99,93],
[109,131,121,114,103,142,109,111,0,107],
[106,122,113,116,114,121,103,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,94,97,93,92,111,96,100],
[120,0,107,105,103,111,108,115,109,131],
[116,103,0,105,102,110,110,104,115,109],
[116,105,105,0,102,105,113,110,110,112],
[113,107,108,108,0,104,102,107,107,121],
[117,99,100,105,106,0,108,113,110,111],
[118,102,100,97,108,102,0,106,105,122],
[99,95,106,100,103,97,104,0,99,108],
[114,101,95,100,103,100,105,111,0,115],
[110,79,101,98,89,99,88,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,105,109,114,111,101,107,125],
[93,0,118,105,116,91,111,97,111,110],
[91,92,0,89,99,79,101,88,84,113],
[105,105,121,0,92,107,110,110,115,117],
[101,94,111,118,0,104,111,107,97,109],
[96,119,131,103,106,0,131,108,102,124],
[99,99,109,100,99,79,0,89,104,108],
[109,113,122,100,103,102,121,0,113,117],
[103,99,126,95,113,108,106,97,0,117],
[85,100,97,93,101,86,102,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,110,102,108,104,116,93,105],
[108,0,107,109,106,101,108,119,110,112],
[97,103,0,99,103,85,93,105,102,92],
[100,101,111,0,106,111,87,114,106,111],
[108,104,107,104,0,114,99,118,107,111],
[102,109,125,99,96,0,97,116,104,104],
[106,102,117,123,111,113,0,123,110,114],
[94,91,105,96,92,94,87,0,104,93],
[117,100,108,104,103,106,100,106,0,106],
[105,98,118,99,99,106,96,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,110,96,102,102,109,110,114],
[108,0,102,112,104,101,101,97,100,97],
[102,108,0,93,81,92,88,80,83,98],
[100,98,117,0,89,108,108,106,94,115],
[114,106,129,121,0,117,100,116,114,120],
[108,109,118,102,93,0,99,113,94,114],
[108,109,122,102,110,111,0,103,96,103],
[101,113,130,104,94,97,107,0,93,111],
[100,110,127,116,96,116,114,117,0,111],
[96,113,112,95,90,96,107,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,108,100,100,111,109,106,109],
[93,0,97,96,94,95,99,92,94,94],
[95,113,0,99,95,89,108,92,83,98],
[102,114,111,0,106,108,107,100,101,103],
[110,116,115,104,0,102,105,99,105,101],
[110,115,121,102,108,0,102,111,99,111],
[99,111,102,103,105,108,0,99,94,107],
[101,118,118,110,111,99,111,0,99,98],
[104,116,127,109,105,111,116,111,0,103],
[101,116,112,107,109,99,103,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,120,100,122,118,112,125,126,119],
[91,0,110,105,111,99,108,110,113,96],
[90,100,0,93,103,107,91,103,110,96],
[110,105,117,0,113,120,104,113,110,116],
[88,99,107,97,0,111,98,105,112,106],
[92,111,103,90,99,0,111,100,99,96],
[98,102,119,106,112,99,0,104,115,112],
[85,100,107,97,105,110,106,0,111,115],
[84,97,100,100,98,111,95,99,0,96],
[91,114,114,94,104,114,98,95,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,98,80,105,99,84,78,105,112],
[130,0,93,107,118,139,100,88,122,94],
[112,117,0,115,118,107,119,105,108,113],
[130,103,95,0,130,129,114,106,117,117],
[105,92,92,80,0,111,89,71,113,105],
[111,71,103,81,99,0,96,81,111,110],
[126,110,91,96,121,114,0,81,123,124],
[132,122,105,104,139,129,129,0,133,112],
[105,88,102,93,97,99,87,77,0,103],
[98,116,97,93,105,100,86,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,113,112,100,93,104,112,108],
[100,0,120,102,98,105,86,101,113,99],
[92,90,0,101,103,87,83,91,91,102],
[97,108,109,0,105,106,83,93,105,121],
[98,112,107,105,0,93,98,91,107,105],
[110,105,123,104,117,0,108,102,116,96],
[117,124,127,127,112,102,0,128,129,119],
[106,109,119,117,119,108,82,0,109,115],
[98,97,119,105,103,94,81,101,0,108],
[102,111,108,89,105,114,91,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,100,114,114,98,98,99,110],
[115,0,102,108,110,114,95,99,106,114],
[109,108,0,108,93,107,96,103,117,117],
[110,102,102,0,106,105,96,110,109,109],
[96,100,117,104,0,100,101,103,106,114],
[96,96,103,105,110,0,97,98,96,103],
[112,115,114,114,109,113,0,104,107,117],
[112,111,107,100,107,112,106,0,113,122],
[111,104,93,101,104,114,103,97,0,121],
[100,96,93,101,96,107,93,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,109,111,119,95,116,113,96],
[104,0,109,106,115,118,101,113,118,103],
[122,101,0,121,127,125,94,109,127,110],
[101,104,89,0,116,116,98,103,109,108],
[99,95,83,94,0,97,99,98,93,116],
[91,92,85,94,113,0,96,114,119,113],
[115,109,116,112,111,114,0,112,132,104],
[94,97,101,107,112,96,98,0,114,97],
[97,92,83,101,117,91,78,96,0,100],
[114,107,100,102,94,97,106,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,98,82,108,103,107,119,102],
[100,0,91,111,97,99,95,98,100,114],
[109,119,0,99,111,116,110,111,120,118],
[112,99,111,0,94,110,103,118,115,115],
[128,113,99,116,0,118,111,116,114,123],
[102,111,94,100,92,0,100,107,108,108],
[107,115,100,107,99,110,0,106,118,115],
[103,112,99,92,94,103,104,0,114,104],
[91,110,90,95,96,102,92,96,0,114],
[108,96,92,95,87,102,95,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,102,92,93,99,104,106,112],
[105,0,97,109,99,97,95,103,107,116],
[116,113,0,117,101,115,108,119,120,125],
[108,101,93,0,99,107,99,112,89,101],
[118,111,109,111,0,101,108,113,130,121],
[117,113,95,103,109,0,106,106,114,115],
[111,115,102,111,102,104,0,110,115,124],
[106,107,91,98,97,104,100,0,94,107],
[104,103,90,121,80,96,95,116,0,115],
[98,94,85,109,89,95,86,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,122,109,113,102,117,101,114,107],
[94,0,109,100,89,101,108,108,100,103],
[88,101,0,96,113,102,90,99,109,95],
[101,110,114,0,104,107,101,121,117,107],
[97,121,97,106,0,104,119,114,107,99],
[108,109,108,103,106,0,98,116,110,117],
[93,102,120,109,91,112,0,111,101,109],
[109,102,111,89,96,94,99,0,109,105],
[96,110,101,93,103,100,109,101,0,94],
[103,107,115,103,111,93,101,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,95,110,99,109,100,97,94],
[111,0,130,116,116,91,117,118,99,109],
[96,80,0,114,95,92,121,110,96,96],
[115,94,96,0,98,95,104,112,85,80],
[100,94,115,112,0,109,117,96,91,97],
[111,119,118,115,101,0,117,117,90,105],
[101,93,89,106,93,93,0,99,74,87],
[110,92,100,98,114,93,111,0,93,85],
[113,111,114,125,119,120,136,117,0,104],
[116,101,114,130,113,105,123,125,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,107,96,100,97,105,104,107],
[107,0,111,112,108,107,98,106,122,109],
[94,99,0,92,91,105,92,102,103,105],
[103,98,118,0,104,114,104,105,112,109],
[114,102,119,106,0,113,106,113,116,112],
[110,103,105,96,97,0,92,93,102,101],
[113,112,118,106,104,118,0,114,116,115],
[105,104,108,105,97,117,96,0,107,104],
[106,88,107,98,94,108,94,103,0,100],
[103,101,105,101,98,109,95,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,84,99,101,93,97,101,120],
[100,0,96,100,104,99,94,93,101,107],
[111,114,0,99,109,110,109,99,107,118],
[126,110,111,0,117,107,109,101,117,122],
[111,106,101,93,0,97,106,102,95,110],
[109,111,100,103,113,0,110,98,103,113],
[117,116,101,101,104,100,0,93,101,115],
[113,117,111,109,108,112,117,0,100,102],
[109,109,103,93,115,107,109,110,0,122],
[90,103,92,88,100,97,95,108,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,133,91,106,102,93,104,87],
[87,0,116,114,93,66,72,87,96,90],
[104,94,0,114,128,102,97,94,89,113],
[77,96,96,0,94,96,69,74,98,79],
[119,117,82,116,0,97,80,94,102,98],
[104,144,108,114,113,0,79,115,107,114],
[108,138,113,141,130,131,0,103,103,94],
[117,123,116,136,116,95,107,0,100,134],
[106,114,121,112,108,103,107,110,0,105],
[123,120,97,131,112,96,116,76,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,104,98,121,113,109,101,106],
[96,0,108,87,88,111,100,107,102,107],
[101,102,0,107,107,117,111,114,97,99],
[106,123,103,0,118,116,101,119,115,112],
[112,122,103,92,0,118,88,121,104,108],
[89,99,93,94,92,0,93,97,100,92],
[97,110,99,109,122,117,0,118,113,114],
[101,103,96,91,89,113,92,0,106,95],
[109,108,113,95,106,110,97,104,0,103],
[104,103,111,98,102,118,96,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,94,109,96,115,110,109,99],
[92,0,107,88,105,94,105,95,111,111],
[93,103,0,102,107,111,98,94,101,108],
[116,122,108,0,111,107,106,100,108,110],
[101,105,103,99,0,101,104,100,100,120],
[114,116,99,103,109,0,106,102,112,109],
[95,105,112,104,106,104,0,100,107,108],
[100,115,116,110,110,108,110,0,115,120],
[101,99,109,102,110,98,103,95,0,114],
[111,99,102,100,90,101,102,90,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,119,110,132,112,108,116,113],
[114,0,103,108,108,114,123,107,107,108],
[98,107,0,113,107,112,96,111,108,96],
[91,102,97,0,100,113,101,101,103,94],
[100,102,103,110,0,116,94,112,107,106],
[78,96,98,97,94,0,112,100,106,105],
[98,87,114,109,116,98,0,110,110,113],
[102,103,99,109,98,110,100,0,114,96],
[94,103,102,107,103,104,100,96,0,113],
[97,102,114,116,104,105,97,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,98,104,86,86,90,95,79],
[115,0,103,97,120,103,110,104,108,102],
[120,107,0,98,109,96,111,103,106,104],
[112,113,112,0,110,90,113,103,107,116],
[106,90,101,100,0,92,100,97,96,89],
[124,107,114,120,118,0,105,115,108,107],
[124,100,99,97,110,105,0,107,94,104],
[120,106,107,107,113,95,103,0,109,97],
[115,102,104,103,114,102,116,101,0,99],
[131,108,106,94,121,103,106,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,116,112,96,103,132,120,95,143],
[86,0,112,98,98,92,109,105,87,109],
[94,98,0,105,93,91,99,100,83,122],
[98,112,105,0,108,98,120,100,82,107],
[114,112,117,102,0,106,107,102,87,114],
[107,118,119,112,104,0,120,114,112,129],
[78,101,111,90,103,90,0,109,95,120],
[90,105,110,110,108,96,101,0,77,110],
[115,123,127,128,123,98,115,133,0,133],
[67,101,88,103,96,81,90,100,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,101,94,106,93,92,100,94],
[109,0,115,107,101,104,108,103,117,97],
[99,95,0,102,104,97,86,88,94,99],
[109,103,108,0,100,105,95,105,107,100],
[116,109,106,110,0,101,102,103,114,113],
[104,106,113,105,109,0,95,102,110,100],
[117,102,124,115,108,115,0,106,134,106],
[118,107,122,105,107,108,104,0,113,112],
[110,93,116,103,96,100,76,97,0,97],
[116,113,111,110,97,110,104,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,73,73,84,92,133,72,83,115],
[107,0,81,115,98,54,60,86,83,87],
[137,129,0,108,129,117,113,117,107,99],
[137,95,102,0,84,95,90,115,102,129],
[126,112,81,126,0,53,113,118,93,99],
[118,156,93,115,157,0,134,105,128,118],
[77,150,97,120,97,76,0,108,97,118],
[138,124,93,95,92,105,102,0,107,140],
[127,127,103,108,117,82,113,103,0,104],
[95,123,111,81,111,92,92,70,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,114,102,116,106,107,100,112],
[110,0,107,119,108,117,108,110,106,102],
[101,103,0,118,106,112,106,114,110,108],
[96,91,92,0,103,104,94,98,93,96],
[108,102,104,107,0,109,113,104,104,113],
[94,93,98,106,101,0,99,99,96,108],
[104,102,104,116,97,111,0,105,110,109],
[103,100,96,112,106,111,105,0,102,103],
[110,104,100,117,106,114,100,108,0,104],
[98,108,102,114,97,102,101,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,103,115,129,146,142,104,106],
[120,0,144,132,105,105,106,145,118,106],
[104,66,0,105,117,104,107,103,104,93],
[107,78,105,0,104,91,146,117,93,134],
[95,105,93,106,0,90,106,120,106,120],
[81,105,106,119,120,0,121,108,94,95],
[64,104,103,64,104,89,0,104,79,92],
[68,65,107,93,90,102,106,0,132,81],
[106,92,106,117,104,116,131,78,0,79],
[104,104,117,76,90,115,118,129,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,116,102,101,103,92,109,116],
[103,0,134,103,95,120,99,117,114,111],
[102,76,0,108,87,105,104,91,102,115],
[94,107,102,0,90,110,108,79,106,93],
[108,115,123,120,0,113,102,91,104,113],
[109,90,105,100,97,0,121,109,88,118],
[107,111,106,102,108,89,0,99,98,133],
[118,93,119,131,119,101,111,0,111,126],
[101,96,108,104,106,122,112,99,0,98],
[94,99,95,117,97,92,77,84,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,134,135,122,122,108,165,107],
[117,0,59,149,133,119,119,133,132,101],
[118,151,0,164,164,135,135,149,179,87],
[76,61,46,0,106,91,105,62,105,74],
[75,77,46,104,0,77,107,90,135,59],
[88,91,75,119,133,0,74,119,118,72],
[88,91,75,105,103,136,0,107,106,88],
[102,77,61,148,120,91,103,0,147,118],
[45,78,31,105,75,92,104,63,0,45],
[103,109,123,136,151,138,122,92,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,116,111,105,126,129,116,103],
[96,0,71,84,77,78,95,118,94,86],
[105,139,0,89,100,108,117,129,128,108],
[94,126,121,0,108,89,103,120,120,107],
[99,133,110,102,0,109,125,151,121,116],
[105,132,102,121,101,0,127,118,116,121],
[84,115,93,107,85,83,0,119,89,94],
[81,92,81,90,59,92,91,0,99,93],
[94,116,82,90,89,94,121,111,0,100],
[107,124,102,103,94,89,116,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,114,113,106,125,108,119,103],
[105,0,116,115,106,113,109,108,110,106],
[95,94,0,104,114,98,102,104,116,103],
[96,95,106,0,104,94,104,106,107,107],
[97,104,96,106,0,96,105,111,110,106],
[104,97,112,116,114,0,110,103,112,97],
[85,101,108,106,105,100,0,94,99,93],
[102,102,106,104,99,107,116,0,108,92],
[91,100,94,103,100,98,111,102,0,96],
[107,104,107,103,104,113,117,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,137,174,210,107,176,139,210,210],
[105,0,105,69,142,142,139,105,176,142],
[73,105,0,72,108,73,142,71,142,210],
[36,141,138,0,141,73,104,71,175,175],
[0,68,102,69,0,70,104,69,104,173],
[103,68,137,137,140,0,173,103,137,210],
[34,71,68,106,106,37,0,69,71,176],
[71,105,139,139,141,107,141,0,175,175],
[0,34,68,35,106,73,139,35,0,176],
[0,68,0,35,37,0,34,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,112,119,125,109,111,104,111],
[110,0,110,129,115,109,116,103,102,107],
[98,100,0,94,107,94,92,97,91,98],
[98,81,116,0,102,87,108,88,88,93],
[91,95,103,108,0,103,103,96,99,95],
[85,101,116,123,107,0,98,111,100,110],
[101,94,118,102,107,112,0,91,93,109],
[99,107,113,122,114,99,119,0,107,109],
[106,108,119,122,111,110,117,103,0,117],
[99,103,112,117,115,100,101,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,99,103,121,129,100,148,111,111],
[130,0,92,88,136,105,125,114,116,119],
[111,118,0,115,123,121,94,143,143,120],
[107,122,95,0,113,113,93,122,113,118],
[89,74,87,97,0,114,108,113,114,101],
[81,105,89,97,96,0,77,107,98,89],
[110,85,116,117,102,133,0,142,125,129],
[62,96,67,88,97,103,68,0,94,74],
[99,94,67,97,96,112,85,116,0,107],
[99,91,90,92,109,121,81,136,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,80,130,130,80,184,159,134,132],
[52,0,106,78,79,105,131,132,105,52],
[130,104,0,156,130,131,183,158,156,130],
[80,132,54,0,106,133,158,159,81,52],
[80,131,80,104,0,133,183,132,133,131],
[130,105,79,77,77,0,131,106,104,77],
[26,79,27,52,27,79,0,53,80,25],
[51,78,52,51,78,104,157,0,105,51],
[76,105,54,129,77,106,130,105,0,104],
[78,158,80,158,79,133,185,159,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,105,95,105,108,117,109,111],
[111,0,110,114,101,113,113,114,123,118],
[111,100,0,108,95,106,114,116,105,99],
[105,96,102,0,105,102,105,112,114,102],
[115,109,115,105,0,112,119,118,115,120],
[105,97,104,108,98,0,107,125,110,116],
[102,97,96,105,91,103,0,106,111,113],
[93,96,94,98,92,85,104,0,112,103],
[101,87,105,96,95,100,99,98,0,102],
[99,92,111,108,90,94,97,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,101,110,118,113,110,117,105],
[94,0,96,90,100,119,107,101,107,96],
[91,114,0,104,98,109,105,104,92,101],
[109,120,106,0,103,120,110,106,105,97],
[100,110,112,107,0,112,107,106,102,106],
[92,91,101,90,98,0,106,92,101,109],
[97,103,105,100,103,104,0,94,101,103],
[100,109,106,104,104,118,116,0,106,109],
[93,103,118,105,108,109,109,104,0,107],
[105,114,109,113,104,101,107,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,89,86,109,93,108,114,76],
[99,0,107,111,91,114,108,126,117,105],
[111,103,0,95,91,100,116,113,94,112],
[121,99,115,0,95,117,123,130,114,93],
[124,119,119,115,0,112,111,139,118,91],
[101,96,110,93,98,0,95,109,98,92],
[117,102,94,87,99,115,0,116,102,87],
[102,84,97,80,71,101,94,0,85,82],
[96,93,116,96,92,112,108,125,0,95],
[134,105,98,117,119,118,123,128,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,104,121,111,109,126,105,98,115],
[82,0,99,106,100,104,99,103,82,105],
[106,111,0,118,117,96,95,108,106,118],
[89,104,92,0,113,108,97,112,99,107],
[99,110,93,97,0,97,101,103,82,107],
[101,106,114,102,113,0,101,123,109,108],
[84,111,115,113,109,109,0,113,95,104],
[105,107,102,98,107,87,97,0,101,111],
[112,128,104,111,128,101,115,109,0,104],
[95,105,92,103,103,102,106,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,110,93,90,94,109,106,102],
[114,0,116,104,100,87,98,111,112,111],
[110,94,0,107,96,103,103,117,113,104],
[100,106,103,0,96,103,99,106,111,107],
[117,110,114,114,0,105,118,112,120,120],
[120,123,107,107,105,0,108,118,106,109],
[116,112,107,111,92,102,0,111,132,114],
[101,99,93,104,98,92,99,0,116,95],
[104,98,97,99,90,104,78,94,0,89],
[108,99,106,103,90,101,96,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,107,112,102,106,91,110,103],
[100,0,93,97,113,106,104,100,112,100],
[109,117,0,115,136,109,123,103,120,106],
[103,113,95,0,118,98,111,103,116,108],
[98,97,74,92,0,95,105,95,105,92],
[108,104,101,112,115,0,118,99,114,108],
[104,106,87,99,105,92,0,97,114,97],
[119,110,107,107,115,111,113,0,116,102],
[100,98,90,94,105,96,96,94,0,93],
[107,110,104,102,118,102,113,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,101,91,103,89,92,94,96],
[113,0,100,115,92,124,105,109,111,106],
[105,110,0,99,101,121,104,97,105,101],
[109,95,111,0,96,118,99,100,97,89],
[119,118,109,114,0,125,105,103,108,112],
[107,86,89,92,85,0,91,90,90,87],
[121,105,106,111,105,119,0,111,94,116],
[118,101,113,110,107,120,99,0,107,101],
[116,99,105,113,102,120,116,103,0,109],
[114,104,109,121,98,123,94,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,103,105,92,97,104,109,101,102],
[127,0,109,107,105,119,119,110,122,105],
[107,101,0,100,96,110,108,104,94,113],
[105,103,110,0,99,106,106,119,112,95],
[118,105,114,111,0,109,106,118,117,114],
[113,91,100,104,101,0,107,107,106,98],
[106,91,102,104,104,103,0,109,108,95],
[101,100,106,91,92,103,101,0,101,89],
[109,88,116,98,93,104,102,109,0,97],
[108,105,97,115,96,112,115,121,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,108,100,116,117,103,104,118],
[101,0,112,97,99,117,112,110,92,112],
[87,98,0,95,86,105,105,101,95,104],
[102,113,115,0,105,118,119,101,107,114],
[110,111,124,105,0,116,126,109,114,115],
[94,93,105,92,94,0,103,95,91,92],
[93,98,105,91,84,107,0,111,98,111],
[107,100,109,109,101,115,99,0,98,107],
[106,118,115,103,96,119,112,112,0,115],
[92,98,106,96,95,118,99,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,104,111,106,115,113,120,104],
[103,0,104,111,99,113,125,110,119,118],
[97,106,0,98,83,105,106,97,102,98],
[106,99,112,0,107,111,121,107,111,110],
[99,111,127,103,0,110,121,124,117,109],
[104,97,105,99,100,0,110,112,109,96],
[95,85,104,89,89,100,0,96,100,93],
[97,100,113,103,86,98,114,0,100,86],
[90,91,108,99,93,101,110,110,0,88],
[106,92,112,100,101,114,117,124,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,112,122,106,104,118,122,118],
[90,0,98,91,88,87,102,112,109,111],
[117,112,0,119,116,103,114,129,117,126],
[98,119,91,0,124,77,93,117,95,109],
[88,122,94,86,0,89,84,103,94,124],
[104,123,107,133,121,0,107,122,111,124],
[106,108,96,117,126,103,0,103,113,126],
[92,98,81,93,107,88,107,0,95,92],
[88,101,93,115,116,99,97,115,0,126],
[92,99,84,101,86,86,84,118,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,100,125,99,95,92,103,113],
[102,0,118,107,125,122,110,103,108,127],
[104,92,0,99,123,107,93,103,107,105],
[110,103,111,0,99,123,109,118,107,143],
[85,85,87,111,0,104,85,91,110,113],
[111,88,103,87,106,0,90,113,113,115],
[115,100,117,101,125,120,0,106,122,125],
[118,107,107,92,119,97,104,0,97,129],
[107,102,103,103,100,97,88,113,0,120],
[97,83,105,67,97,95,85,81,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,104,111,114,98,108,112,116],
[101,0,100,108,98,106,106,100,104,97],
[108,110,0,114,109,121,110,115,98,109],
[106,102,96,0,98,106,100,102,97,98],
[99,112,101,112,0,106,91,109,87,105],
[96,104,89,104,104,0,96,94,95,91],
[112,104,100,110,119,114,0,115,102,101],
[102,110,95,108,101,116,95,0,109,100],
[98,106,112,113,123,115,108,101,0,120],
[94,113,101,112,105,119,109,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,121,124,110,121,104,118,99],
[98,0,119,110,130,101,112,100,116,114],
[100,91,0,113,109,107,98,98,108,104],
[89,100,97,0,118,109,118,109,128,100],
[86,80,101,92,0,91,103,95,94,86],
[100,109,103,101,119,0,111,107,107,106],
[89,98,112,92,107,99,0,95,115,98],
[106,110,112,101,115,103,115,0,122,116],
[92,94,102,82,116,103,95,88,0,93],
[111,96,106,110,124,104,112,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,95,73,98,91,91,94,98],
[116,0,120,99,115,144,120,129,125,96],
[108,90,0,92,100,103,104,111,120,107],
[115,111,118,0,95,118,117,123,121,110],
[137,95,110,115,0,122,104,118,126,90],
[112,66,107,92,88,0,97,86,98,84],
[119,90,106,93,106,113,0,101,112,104],
[119,81,99,87,92,124,109,0,99,90],
[116,85,90,89,84,112,98,111,0,106],
[112,114,103,100,120,126,106,120,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,180,136,135,162,163,166,134],
[106,0,87,164,105,135,119,121,123,121],
[92,123,0,121,124,122,106,123,109,106],
[30,46,89,0,94,62,59,92,95,76],
[74,105,86,116,0,120,87,134,104,74],
[75,75,88,148,90,0,87,107,121,76],
[48,91,104,151,123,123,0,105,136,94],
[47,89,87,118,76,103,105,0,121,105],
[44,87,101,115,106,89,74,89,0,90],
[76,89,104,134,136,134,116,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,96,107,113,124,113,130,106],
[92,0,103,103,108,101,102,102,112,96],
[98,107,0,99,88,86,113,120,115,103],
[114,107,111,0,91,112,115,125,111,94],
[103,102,122,119,0,106,119,125,106,129],
[97,109,124,98,104,0,115,119,102,95],
[86,108,97,95,91,95,0,107,99,92],
[97,108,90,85,85,91,103,0,97,96],
[80,98,95,99,104,108,111,113,0,98],
[104,114,107,116,81,115,118,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,134,88,137,100,135,124,110,165],
[111,0,122,112,146,121,101,101,114,134],
[76,88,0,77,132,100,88,66,77,88],
[122,98,133,0,132,75,98,101,102,118],
[73,64,78,78,0,87,66,79,76,108],
[110,89,110,135,123,0,87,114,101,134],
[75,109,122,112,144,123,0,112,111,134],
[86,109,144,109,131,96,98,0,111,121],
[100,96,133,108,134,109,99,99,0,108],
[45,76,122,92,102,76,76,89,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,118,92,113,111,123,123,115],
[98,0,123,111,109,116,116,119,124,116],
[102,87,0,96,90,99,100,109,112,88],
[92,99,114,0,107,115,117,115,105,115],
[118,101,120,103,0,113,117,125,114,119],
[97,94,111,95,97,0,123,105,112,97],
[99,94,110,93,93,87,0,93,106,98],
[87,91,101,95,85,105,117,0,107,104],
[87,86,98,105,96,98,104,103,0,96],
[95,94,122,95,91,113,112,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,65,80,51,96,111,111,79],
[122,0,117,88,98,112,107,139,121,127],
[102,93,0,70,89,93,77,111,111,99],
[145,122,140,0,138,110,129,142,132,102],
[130,112,121,72,0,104,140,100,112,89],
[159,98,117,100,106,0,147,129,127,126],
[114,103,133,81,70,63,0,91,120,79],
[99,71,99,68,110,81,119,0,91,86],
[99,89,99,78,98,83,90,119,0,78],
[131,83,111,108,121,84,131,124,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,109,121,100,113,111,104,118],
[95,0,101,97,110,105,92,112,96,102],
[106,109,0,102,110,98,104,107,106,114],
[101,113,108,0,111,100,90,115,107,103],
[89,100,100,99,0,92,84,104,85,91],
[110,105,112,110,118,0,92,122,96,107],
[97,118,106,120,126,118,0,112,107,111],
[99,98,103,95,106,88,98,0,101,92],
[106,114,104,103,125,114,103,109,0,104],
[92,108,96,107,119,103,99,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,110,123,114,114,104,115,118],
[101,0,112,98,113,117,99,97,106,113],
[90,98,0,102,98,105,91,95,94,100],
[100,112,108,0,107,119,93,109,114,116],
[87,97,112,103,0,104,104,107,103,108],
[96,93,105,91,106,0,96,99,96,102],
[96,111,119,117,106,114,0,113,107,112],
[106,113,115,101,103,111,97,0,100,113],
[95,104,116,96,107,114,103,110,0,109],
[92,97,110,94,102,108,98,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,89,129,109,110,112,131,105,91],
[77,0,101,152,86,97,79,77,57,75],
[121,109,0,139,89,118,122,118,104,109],
[81,58,71,0,90,56,79,69,73,67],
[101,124,121,120,0,115,115,111,113,109],
[100,113,92,154,95,0,122,100,81,86],
[98,131,88,131,95,88,0,89,69,109],
[79,133,92,141,99,110,121,0,115,99],
[105,153,106,137,97,129,141,95,0,140],
[119,135,101,143,101,124,101,111,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,96,119,100,99,118,116,96],
[113,0,106,104,111,96,100,104,106,95],
[91,104,0,111,98,86,108,102,93,104],
[114,106,99,0,109,100,105,105,95,99],
[91,99,112,101,0,86,102,120,109,96],
[110,114,124,110,124,0,98,126,121,118],
[111,110,102,105,108,112,0,94,94,107],
[92,106,108,105,90,84,116,0,111,95],
[94,104,117,115,101,89,116,99,0,102],
[114,115,106,111,114,92,103,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,117,59,58,73,90,44,103,87],
[123,0,136,136,91,152,152,121,119,89],
[93,74,0,44,75,135,77,46,103,59],
[151,74,166,0,106,151,106,121,134,117],
[152,119,135,104,0,135,121,90,133,103],
[137,58,75,59,75,0,75,29,119,57],
[120,58,133,104,89,135,0,89,162,116],
[166,89,164,89,120,181,121,0,163,102],
[107,91,107,76,77,91,48,47,0,43],
[123,121,151,93,107,153,94,108,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,94,117,114,89,123,121,105],
[91,0,94,84,110,115,88,106,120,97],
[102,116,0,102,93,93,98,110,121,110],
[116,126,108,0,109,109,87,117,112,107],
[93,100,117,101,0,108,106,108,127,104],
[96,95,117,101,102,0,96,88,118,95],
[121,122,112,123,104,114,0,130,129,125],
[87,104,100,93,102,122,80,0,110,110],
[89,90,89,98,83,92,81,100,0,86],
[105,113,100,103,106,115,85,100,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,121,103,108,105,104,118,109],
[100,0,113,113,99,104,98,110,109,91],
[92,97,0,101,95,108,98,93,105,90],
[89,97,109,0,86,102,94,93,105,88],
[107,111,115,124,0,114,102,111,107,101],
[102,106,102,108,96,0,97,97,112,101],
[105,112,112,116,108,113,0,111,114,112],
[106,100,117,117,99,113,99,0,117,96],
[92,101,105,105,103,98,96,93,0,93],
[101,119,120,122,109,109,98,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,108,78,80,83,78,134,104,108],
[132,0,110,78,132,159,78,159,103,132],
[102,100,0,50,102,102,103,154,127,131],
[132,132,160,0,159,186,104,186,130,161],
[130,78,108,51,0,81,78,134,155,135],
[127,51,108,24,129,0,76,132,128,108],
[132,132,107,106,132,134,0,159,103,107],
[76,51,56,24,76,78,51,0,128,81],
[106,107,83,80,55,82,107,82,0,107],
[102,78,79,49,75,102,103,129,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,99,105,112,98,104,123,116],
[108,0,118,101,119,112,106,127,139,131],
[101,92,0,100,104,94,97,100,120,100],
[111,109,110,0,102,109,102,117,117,111],
[105,91,106,108,0,103,100,102,119,108],
[98,98,116,101,107,0,98,100,114,104],
[112,104,113,108,110,112,0,109,126,118],
[106,83,110,93,108,110,101,0,118,106],
[87,71,90,93,91,96,84,92,0,101],
[94,79,110,99,102,106,92,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,85,104,102,115,108,105,94],
[105,0,90,105,112,110,124,112,88,104],
[102,120,0,105,111,111,117,130,81,105],
[125,105,105,0,104,105,101,119,91,100],
[106,98,99,106,0,117,115,118,81,130],
[108,100,99,105,93,0,116,106,88,109],
[95,86,93,109,95,94,0,115,81,85],
[102,98,80,91,92,104,95,0,76,85],
[105,122,129,119,129,122,129,134,0,131],
[116,106,105,110,80,101,125,125,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,119,118,118,141,107,106,118],
[112,0,106,140,118,117,150,119,95,115],
[103,104,0,122,120,108,137,97,106,94],
[91,70,88,0,109,113,143,96,87,89],
[92,92,90,101,0,96,140,102,82,84],
[92,93,102,97,114,0,152,128,104,109],
[69,60,73,67,70,58,0,77,48,57],
[103,91,113,114,108,82,133,0,94,85],
[104,115,104,123,128,106,162,116,0,102],
[92,95,116,121,126,101,153,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,85,93,94,107,104,95,94,108],
[114,0,101,94,115,127,102,112,104,116],
[125,109,0,90,96,126,107,107,96,116],
[117,116,120,0,122,139,113,103,108,124],
[116,95,114,88,0,132,104,84,96,113],
[103,83,84,71,78,0,99,94,90,91],
[106,108,103,97,106,111,0,100,100,109],
[115,98,103,107,126,116,110,0,114,107],
[116,106,114,102,114,120,110,96,0,120],
[102,94,94,86,97,119,101,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,96,98,103,102,110,109,95],
[108,0,108,115,113,102,102,106,102,107],
[97,102,0,100,107,99,94,101,100,108],
[114,95,110,0,103,98,107,97,99,100],
[112,97,103,107,0,98,101,113,103,99],
[107,108,111,112,112,0,98,124,110,107],
[108,108,116,103,109,112,0,116,109,108],
[100,104,109,113,97,86,94,0,94,95],
[101,108,110,111,107,100,101,116,0,96],
[115,103,102,110,111,103,102,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,103,110,117,102,125,113,84],
[101,0,92,106,122,95,98,110,116,100],
[95,118,0,79,109,116,96,103,104,88],
[107,104,131,0,120,105,114,117,119,104],
[100,88,101,90,0,107,89,82,86,105],
[93,115,94,105,103,0,102,107,98,105],
[108,112,114,96,121,108,0,117,102,124],
[85,100,107,93,128,103,93,0,113,101],
[97,94,106,91,124,112,108,97,0,112],
[126,110,122,106,105,105,86,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,111,108,129,109,110,101,106],
[112,0,96,116,109,128,110,108,117,95],
[116,114,0,109,102,142,119,118,122,114],
[99,94,101,0,102,121,106,111,112,109],
[102,101,108,108,0,121,104,103,111,111],
[81,82,68,89,89,0,89,82,90,82],
[101,100,91,104,106,121,0,110,113,103],
[100,102,92,99,107,128,100,0,110,107],
[109,93,88,98,99,120,97,100,0,102],
[104,115,96,101,99,128,107,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,112,113,98,115,113,116,115,106],
[83,0,74,87,79,89,87,84,90,95],
[98,136,0,126,103,109,114,118,105,116],
[97,123,84,0,102,101,106,89,103,107],
[112,131,107,108,0,97,104,109,106,116],
[95,121,101,109,113,0,105,91,89,116],
[97,123,96,104,106,105,0,94,90,115],
[94,126,92,121,101,119,116,0,108,116],
[95,120,105,107,104,121,120,102,0,125],
[104,115,94,103,94,94,95,94,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,118,108,108,111,110,111,122],
[99,0,105,111,110,97,107,101,103,109],
[106,105,0,114,109,108,104,114,100,113],
[92,99,96,0,103,102,111,110,98,108],
[102,100,101,107,0,105,116,115,106,106],
[102,113,102,108,105,0,111,115,105,104],
[99,103,106,99,94,99,0,108,103,119],
[100,109,96,100,95,95,102,0,94,106],
[99,107,110,112,104,105,107,116,0,112],
[88,101,97,102,104,106,91,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,103,106,106,117,115,114,124],
[86,0,96,98,93,94,101,112,97,109],
[96,114,0,98,102,102,113,113,90,120],
[107,112,112,0,105,117,115,128,115,123],
[104,117,108,105,0,112,108,119,108,116],
[104,116,108,93,98,0,114,121,110,118],
[93,109,97,95,102,96,0,118,96,110],
[95,98,97,82,91,89,92,0,89,107],
[96,113,120,95,102,100,114,121,0,113],
[86,101,90,87,94,92,100,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,129,139,140,109,119,130,129],
[110,0,99,90,143,101,109,116,108,121],
[111,111,0,110,122,132,130,119,132,93],
[81,120,100,0,140,132,121,129,130,102],
[71,67,88,70,0,107,86,90,85,88],
[70,109,78,78,103,0,96,98,100,101],
[101,101,80,89,124,114,0,103,115,83],
[91,94,91,81,120,112,107,0,90,87],
[80,102,78,80,125,110,95,120,0,124],
[81,89,117,108,122,109,127,123,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,104,99,105,95,105,95,99],
[109,0,100,99,107,109,115,106,106,102],
[114,110,0,114,112,118,111,109,100,101],
[106,111,96,0,116,105,105,108,109,106],
[111,103,98,94,0,109,104,107,97,101],
[105,101,92,105,101,0,99,112,98,106],
[115,95,99,105,106,111,0,116,96,104],
[105,104,101,102,103,98,94,0,93,98],
[115,104,110,101,113,112,114,117,0,102],
[111,108,109,104,109,104,106,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,105,94,103,99,108,105,101],
[115,0,113,105,105,103,115,105,106,118],
[117,97,0,97,105,106,98,125,137,108],
[105,105,113,0,116,110,109,103,118,108],
[116,105,105,94,0,109,100,98,132,102],
[107,107,104,100,101,0,115,103,123,102],
[111,95,112,101,110,95,0,120,119,107],
[102,105,85,107,112,107,90,0,121,102],
[105,104,73,92,78,87,91,89,0,89],
[109,92,102,102,108,108,103,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,133,123,121,89,110,101,101,122],
[98,0,110,122,74,88,88,88,78,88],
[77,100,0,102,89,135,112,100,67,80],
[87,88,108,0,63,66,86,66,109,89],
[89,136,121,147,0,99,120,102,101,133],
[121,122,75,144,111,0,98,92,98,101],
[100,122,98,124,90,112,0,112,89,122],
[109,122,110,144,108,118,98,0,109,112],
[109,132,143,101,109,112,121,101,0,101],
[88,122,130,121,77,109,88,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,103,93,109,125,110,94,92,106],
[124,0,119,101,109,119,113,106,104,115],
[107,91,0,99,112,107,123,97,96,112],
[117,109,111,0,115,120,126,115,105,120],
[101,101,98,95,0,110,110,101,95,115],
[85,91,103,90,100,0,97,94,86,95],
[100,97,87,84,100,113,0,100,91,101],
[116,104,113,95,109,116,110,0,100,120],
[118,106,114,105,115,124,119,110,0,126],
[104,95,98,90,95,115,109,90,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,92,70,92,101,75,62,99],
[119,0,128,100,100,103,122,87,96,105],
[118,82,0,99,79,95,110,81,93,100],
[118,110,111,0,94,114,115,96,93,111],
[140,110,131,116,0,141,136,112,103,104],
[118,107,115,96,69,0,112,77,80,112],
[109,88,100,95,74,98,0,83,93,79],
[135,123,129,114,98,133,127,0,116,114],
[148,114,117,117,107,130,117,94,0,108],
[111,105,110,99,106,98,131,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,88,92,98,97,103,98,109,89],
[99,0,106,94,102,102,84,94,100,91],
[122,104,0,105,112,100,89,85,116,101],
[118,116,105,0,115,104,106,109,105,106],
[112,108,98,95,0,113,103,104,113,105],
[113,108,110,106,97,0,90,106,116,97],
[107,126,121,104,107,120,0,97,108,95],
[112,116,125,101,106,104,113,0,113,105],
[101,110,94,105,97,94,102,97,0,101],
[121,119,109,104,105,113,115,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,105,113,100,104,109,116,104],
[98,0,101,112,113,108,101,111,94,116],
[98,109,0,102,110,103,104,110,109,100],
[105,98,108,0,118,108,120,107,110,115],
[97,97,100,92,0,105,109,105,109,111],
[110,102,107,102,105,0,106,119,112,111],
[106,109,106,90,101,104,0,92,98,115],
[101,99,100,103,105,91,118,0,113,106],
[94,116,101,100,101,98,112,97,0,106],
[106,94,110,95,99,99,95,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,98,89,100,100,83,98,97],
[116,0,106,104,106,106,103,95,104,101],
[102,104,0,97,94,104,105,90,103,102],
[112,106,113,0,103,106,110,94,106,107],
[121,104,116,107,0,119,119,104,106,108],
[110,104,106,104,91,0,110,90,105,106],
[110,107,105,100,91,100,0,88,102,99],
[127,115,120,116,106,120,122,0,111,105],
[112,106,107,104,104,105,108,99,0,102],
[113,109,108,103,102,104,111,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,105,115,114,108,115,105,92],
[100,0,101,102,95,101,94,107,100,98],
[97,109,0,112,100,111,98,105,99,96],
[105,108,98,0,98,105,97,104,99,110],
[95,115,110,112,0,105,98,103,102,102],
[96,109,99,105,105,0,101,101,101,97],
[102,116,112,113,112,109,0,123,101,103],
[95,103,105,106,107,109,87,0,104,88],
[105,110,111,111,108,109,109,106,0,99],
[118,112,114,100,108,113,107,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,86,104,92,99,121,111,119,113],
[88,0,102,114,115,102,116,100,121,105],
[124,108,0,106,104,111,116,119,108,102],
[106,96,104,0,113,86,115,99,120,94],
[118,95,106,97,0,97,115,97,127,103],
[111,108,99,124,113,0,117,110,122,111],
[89,94,94,95,95,93,0,103,121,104],
[99,110,91,111,113,100,107,0,110,86],
[91,89,102,90,83,88,89,100,0,88],
[97,105,108,116,107,99,106,124,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,86,97,104,102,125,114,124],
[115,0,116,98,101,126,110,124,112,120],
[125,94,0,99,99,128,115,102,107,128],
[124,112,111,0,122,133,100,132,133,119],
[113,109,111,88,0,126,109,121,124,130],
[106,84,82,77,84,0,94,105,113,101],
[108,100,95,110,101,116,0,123,122,118],
[85,86,108,78,89,105,87,0,108,122],
[96,98,103,77,86,97,88,102,0,94],
[86,90,82,91,80,109,92,88,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,89,98,105,98,115,108,101,99],
[104,0,106,96,114,102,113,111,91,103],
[121,104,0,111,127,116,122,117,106,103],
[112,114,99,0,113,103,115,112,108,103],
[105,96,83,97,0,88,112,112,97,95],
[112,108,94,107,122,0,112,108,101,105],
[95,97,88,95,98,98,0,103,93,94],
[102,99,93,98,98,102,107,0,97,91],
[109,119,104,102,113,109,117,113,0,102],
[111,107,107,107,115,105,116,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,100,109,112,122,140,130,122],
[95,0,106,95,109,119,130,151,126,137],
[101,104,0,95,106,103,130,134,118,127],
[110,115,115,0,104,95,121,122,143,108],
[101,101,104,106,0,82,126,135,127,101],
[98,91,107,115,128,0,121,133,125,129],
[88,80,80,89,84,89,0,130,119,106],
[70,59,76,88,75,77,80,0,97,102],
[80,84,92,67,83,85,91,113,0,100],
[88,73,83,102,109,81,104,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,84,114,120,83,95,94,127,114],
[113,0,101,130,119,122,131,109,122,123],
[126,109,0,139,105,118,120,108,113,129],
[96,80,71,0,76,91,92,85,99,123],
[90,91,105,134,0,91,117,85,120,107],
[127,88,92,119,119,0,104,108,104,107],
[115,79,90,118,93,106,0,63,101,104],
[116,101,102,125,125,102,147,0,146,112],
[83,88,97,111,90,106,109,64,0,86],
[96,87,81,87,103,103,106,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,80,57,68,91,79,102,81,90],
[131,0,118,107,96,107,71,114,118,69],
[130,92,0,105,104,92,70,81,96,82],
[153,103,105,0,93,106,127,105,142,117],
[142,114,106,117,0,107,104,102,128,94],
[119,103,118,104,103,0,81,116,130,80],
[131,139,140,83,106,129,0,139,96,81],
[108,96,129,105,108,94,71,0,73,107],
[129,92,114,68,82,80,114,137,0,68],
[120,141,128,93,116,130,129,103,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,105,103,117,96,121,110],
[106,0,99,93,92,114,93,98,111,142],
[106,111,0,94,103,105,115,117,132,122],
[109,117,116,0,102,105,110,82,117,125],
[105,118,107,108,0,98,112,108,125,131],
[107,96,105,105,112,0,119,92,115,140],
[93,117,95,100,98,91,0,112,115,130],
[114,112,93,128,102,118,98,0,106,141],
[89,99,78,93,85,95,95,104,0,118],
[100,68,88,85,79,70,80,69,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,100,100,111,98,115,105,105],
[107,0,119,101,95,111,104,110,101,100],
[98,91,0,96,90,99,96,109,93,97],
[110,109,114,0,115,108,110,116,103,117],
[110,115,120,95,0,109,110,99,98,116],
[99,99,111,102,101,0,100,108,99,115],
[112,106,114,100,100,110,0,106,99,107],
[95,100,101,94,111,102,104,0,104,98],
[105,109,117,107,112,111,111,106,0,114],
[105,110,113,93,94,95,103,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,98,104,116,101,102,123,95],
[107,0,103,109,106,112,97,104,129,105],
[117,107,0,118,118,123,103,120,127,104],
[112,101,92,0,107,116,103,116,124,110],
[106,104,92,103,0,103,105,109,118,108],
[94,98,87,94,107,0,96,112,119,90],
[109,113,107,107,105,114,0,109,124,98],
[108,106,90,94,101,98,101,0,113,89],
[87,81,83,86,92,91,86,97,0,89],
[115,105,106,100,102,120,112,121,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,105,132,107,106,103,185,128,104],
[77,0,79,132,105,102,76,78,75,78],
[105,131,0,103,80,131,103,105,155,79],
[78,78,107,0,27,105,77,78,78,27],
[103,105,130,183,0,105,77,130,128,130],
[104,108,79,105,105,0,104,105,129,106],
[107,134,107,133,133,106,0,133,78,107],
[25,132,105,132,80,105,77,0,102,104],
[82,135,55,132,82,81,132,108,0,82],
[106,132,131,183,80,104,103,106,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,115,128,60,94,103,92,128,139],
[71,0,67,93,83,93,128,90,105,115],
[95,143,0,127,131,118,120,128,118,128],
[82,117,83,0,71,81,48,91,105,83],
[150,127,79,139,0,114,117,124,150,139],
[116,117,92,129,96,0,105,90,115,104],
[107,82,90,162,93,105,0,104,105,127],
[118,120,82,119,86,120,106,0,119,97],
[82,105,92,105,60,95,105,91,0,104],
[71,95,82,127,71,106,83,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,109,108,97,105,104,114,111,108],
[121,0,123,108,140,114,128,104,123,126],
[101,87,0,79,80,82,111,97,100,95],
[102,102,131,0,105,114,124,94,124,114],
[113,70,130,105,0,98,113,106,85,99],
[105,96,128,96,112,0,99,108,122,112],
[106,82,99,86,97,111,0,99,117,85],
[96,106,113,116,104,102,111,0,97,128],
[99,87,110,86,125,88,93,113,0,92],
[102,84,115,96,111,98,125,82,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,86,88,116,102,81,109,103,103],
[133,0,99,110,138,130,111,120,108,117],
[124,111,0,105,141,102,104,131,134,134],
[122,100,105,0,135,114,113,114,127,108],
[94,72,69,75,0,62,91,78,104,116],
[108,80,108,96,148,0,108,114,117,122],
[129,99,106,97,119,102,0,139,116,126],
[101,90,79,96,132,96,71,0,102,85],
[107,102,76,83,106,93,94,108,0,115],
[107,93,76,102,94,88,84,125,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,106,104,100,107,108,103,104],
[110,0,113,106,103,95,102,105,111,109],
[98,97,0,93,108,82,106,111,113,106],
[104,104,117,0,109,97,112,93,113,106],
[106,107,102,101,0,90,110,105,96,98],
[110,115,128,113,120,0,112,117,105,108],
[103,108,104,98,100,98,0,110,109,104],
[102,105,99,117,105,93,100,0,110,112],
[107,99,97,97,114,105,101,100,0,107],
[106,101,104,104,112,102,106,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,111,109,134,110,124,97,135,98],
[80,0,91,104,107,106,97,103,108,94],
[99,119,0,107,88,108,112,105,116,118],
[101,106,103,0,109,111,97,105,97,89],
[76,103,122,101,0,91,103,122,107,108],
[100,104,102,99,119,0,115,99,104,95],
[86,113,98,113,107,95,0,99,109,117],
[113,107,105,105,88,111,111,0,115,99],
[75,102,94,113,103,106,101,95,0,113],
[112,116,92,121,102,115,93,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,111,115,104,125,107,115,93],
[97,0,101,103,100,93,110,102,113,93],
[101,109,0,116,112,96,116,95,117,106],
[99,107,94,0,99,101,112,97,105,97],
[95,110,98,111,0,102,113,90,102,106],
[106,117,114,109,108,0,128,108,108,98],
[85,100,94,98,97,82,0,97,93,83],
[103,108,115,113,120,102,113,0,113,108],
[95,97,93,105,108,102,117,97,0,92],
[117,117,104,113,104,112,127,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,111,105,108,105,102,122,91],
[103,0,80,105,78,84,93,100,109,81],
[113,130,0,98,106,127,115,120,128,113],
[99,105,112,0,92,101,109,115,125,101],
[105,132,104,118,0,110,117,127,123,115],
[102,126,83,109,100,0,109,110,109,113],
[105,117,95,101,93,101,0,111,120,103],
[108,110,90,95,83,100,99,0,109,99],
[88,101,82,85,87,101,90,101,0,84],
[119,129,97,109,95,97,107,111,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,83,111,69,118,119,79,119,85],
[120,0,78,98,99,122,132,73,116,93],
[127,132,0,129,103,114,114,112,119,105],
[99,112,81,0,102,138,110,96,108,109],
[141,111,107,108,0,129,111,91,107,107],
[92,88,96,72,81,0,99,54,77,78],
[91,78,96,100,99,111,0,64,94,92],
[131,137,98,114,119,156,146,0,142,100],
[91,94,91,102,103,133,116,68,0,94],
[125,117,105,101,103,132,118,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,210,210,210,140,140,140,140,70],
[70,0,140,140,210,140,140,140,70,140],
[0,70,0,210,210,140,70,70,70,70],
[0,70,0,0,210,140,70,70,0,70],
[0,0,0,0,0,70,0,0,0,70],
[70,70,70,70,140,0,70,70,70,70],
[70,70,140,140,210,140,0,70,70,70],
[70,70,140,140,210,140,140,0,70,70],
[70,140,140,210,210,140,140,140,0,70],
[140,70,140,140,140,140,140,140,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,87,98,91,110,103,102,104],
[91,0,101,83,87,89,109,101,112,100],
[102,109,0,100,92,100,107,111,94,98],
[123,127,110,0,106,99,107,110,115,103],
[112,123,118,104,0,109,101,121,104,121],
[119,121,110,111,101,0,125,109,113,112],
[100,101,103,103,109,85,0,99,114,114],
[107,109,99,100,89,101,111,0,104,123],
[108,98,116,95,106,97,96,106,0,115],
[106,110,112,107,89,98,96,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,124,104,84,126,84,150,64,84],
[104,0,125,105,83,150,87,107,86,128],
[86,85,0,105,85,128,85,109,85,105],
[106,105,105,0,106,147,85,171,106,125],
[126,127,125,104,0,127,83,148,82,105],
[84,60,82,63,83,0,105,85,41,86],
[126,123,125,125,127,105,0,127,84,62],
[60,103,101,39,62,125,83,0,20,84],
[146,124,125,104,128,169,126,190,0,128],
[126,82,105,85,105,124,148,126,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,124,108,106,122,120,127,105],
[99,0,99,119,110,107,109,117,109,108],
[101,111,0,115,101,110,106,121,124,108],
[86,91,95,0,99,109,92,106,100,93],
[102,100,109,111,0,108,100,105,115,104],
[104,103,100,101,102,0,101,107,110,104],
[88,101,104,118,110,109,0,110,102,100],
[90,93,89,104,105,103,100,0,103,96],
[83,101,86,110,95,100,108,107,0,105],
[105,102,102,117,106,106,110,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,128,100,128,98,125,114,127],
[111,0,105,117,119,109,110,130,94,135],
[117,105,0,124,119,102,124,138,110,124],
[82,93,86,0,75,98,88,105,81,88],
[110,91,91,135,0,96,119,109,85,106],
[82,101,108,112,114,0,94,116,103,113],
[112,100,86,122,91,116,0,114,113,134],
[85,80,72,105,101,94,96,0,91,112],
[96,116,100,129,125,107,97,119,0,162],
[83,75,86,122,104,97,76,98,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,103,107,114,91,100,104,101],
[114,0,109,118,107,122,99,101,94,99],
[97,101,0,95,98,109,89,106,95,95],
[107,92,115,0,103,119,97,97,94,98],
[103,103,112,107,0,127,100,97,99,110],
[96,88,101,91,83,0,86,89,91,100],
[119,111,121,113,110,124,0,116,105,111],
[110,109,104,113,113,121,94,0,108,104],
[106,116,115,116,111,119,105,102,0,116],
[109,111,115,112,100,110,99,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,104,103,112,95,101,113,103],
[97,0,97,95,92,109,100,108,97,99],
[115,113,0,103,97,114,103,111,112,104],
[106,115,107,0,111,116,104,111,114,110],
[107,118,113,99,0,120,115,109,121,108],
[98,101,96,94,90,0,96,103,100,97],
[115,110,107,106,95,114,0,117,111,108],
[109,102,99,99,101,107,93,0,103,100],
[97,113,98,96,89,110,99,107,0,108],
[107,111,106,100,102,113,102,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,116,106,108,97,90,106,114,117],
[114,0,126,116,121,90,114,115,106,129],
[94,84,0,98,110,90,104,95,94,104],
[104,94,112,0,97,88,99,86,106,121],
[102,89,100,113,0,81,88,104,98,116],
[113,120,120,122,129,0,99,109,116,116],
[120,96,106,111,122,111,0,106,119,126],
[104,95,115,124,106,101,104,0,114,119],
[96,104,116,104,112,94,91,96,0,104],
[93,81,106,89,94,94,84,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,105,106,104,97,116,116,114],
[87,0,110,83,90,94,101,113,98,99],
[93,100,0,82,95,96,104,99,89,113],
[105,127,128,0,101,104,96,112,125,99],
[104,120,115,109,0,124,113,130,125,125],
[106,116,114,106,86,0,109,109,103,89],
[113,109,106,114,97,101,0,133,121,107],
[94,97,111,98,80,101,77,0,99,97],
[94,112,121,85,85,107,89,111,0,93],
[96,111,97,111,85,121,103,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,97,116,118,85,110,108,97,115],
[81,0,95,90,99,88,88,105,91,88],
[113,115,0,117,108,112,100,111,111,121],
[94,120,93,0,92,96,90,117,92,110],
[92,111,102,118,0,83,77,115,88,98],
[125,122,98,114,127,0,105,112,102,125],
[100,122,110,120,133,105,0,129,107,111],
[102,105,99,93,95,98,81,0,100,113],
[113,119,99,118,122,108,103,110,0,128],
[95,122,89,100,112,85,99,97,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,95,112,94,121,103,100,102,109],
[85,0,93,98,100,104,100,95,89,89],
[115,117,0,102,105,122,103,105,93,115],
[98,112,108,0,98,129,100,105,96,111],
[116,110,105,112,0,115,102,102,110,108],
[89,106,88,81,95,0,99,89,105,91],
[107,110,107,110,108,111,0,109,103,117],
[110,115,105,105,108,121,101,0,115,115],
[108,121,117,114,100,105,107,95,0,105],
[101,121,95,99,102,119,93,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,113,115,98,113,98,118,105],
[99,0,104,102,111,95,95,110,101,105],
[105,106,0,101,112,97,107,117,117,114],
[97,108,109,0,114,103,111,107,114,108],
[95,99,98,96,0,85,99,100,104,101],
[112,115,113,107,125,0,117,103,121,116],
[97,115,103,99,111,93,0,105,101,101],
[112,100,93,103,110,107,105,0,112,108],
[92,109,93,96,106,89,109,98,0,110],
[105,105,96,102,109,94,109,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,103,96,101,104,94,112,86],
[113,0,110,109,97,106,100,110,110,88],
[111,100,0,111,105,96,97,98,121,99],
[107,101,99,0,102,112,107,115,105,96],
[114,113,105,108,0,125,115,103,110,112],
[109,104,114,98,85,0,112,99,116,95],
[106,110,113,103,95,98,0,105,99,99],
[116,100,112,95,107,111,105,0,114,105],
[98,100,89,105,100,94,111,96,0,96],
[124,122,111,114,98,115,111,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,115,101,106,105,110,125,121],
[100,0,100,117,105,105,103,109,112,114],
[103,110,0,119,101,105,104,120,113,115],
[95,93,91,0,96,101,92,104,104,114],
[109,105,109,114,0,108,98,100,116,114],
[104,105,105,109,102,0,101,104,119,115],
[105,107,106,118,112,109,0,110,123,124],
[100,101,90,106,110,106,100,0,118,111],
[85,98,97,106,94,91,87,92,0,103],
[89,96,95,96,96,95,86,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,103,114,109,98,104,98,105],
[109,0,122,112,117,109,105,108,111,116],
[100,88,0,98,107,101,90,84,109,90],
[107,98,112,0,103,108,104,98,109,92],
[96,93,103,107,0,101,102,96,108,111],
[101,101,109,102,109,0,94,95,108,107],
[112,105,120,106,108,116,0,88,112,121],
[106,102,126,112,114,115,122,0,120,113],
[112,99,101,101,102,102,98,90,0,101],
[105,94,120,118,99,103,89,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,154,104,127,130,105,118,116,176],
[83,0,96,95,70,94,82,60,109,107],
[56,114,0,93,102,117,128,104,127,151],
[106,115,117,0,81,115,118,118,105,140],
[83,140,108,129,0,116,96,107,153,117],
[80,116,93,95,94,0,118,83,95,129],
[105,128,82,92,114,92,0,95,130,150],
[92,150,106,92,103,127,115,0,117,151],
[94,101,83,105,57,115,80,93,0,94],
[34,103,59,70,93,81,60,59,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,93,123,101,74,85,114,97,112],
[126,0,85,125,136,87,109,98,104,114],
[117,125,0,106,103,98,108,90,119,122],
[87,85,104,0,94,77,87,96,99,110],
[109,74,107,116,0,115,96,116,89,97],
[136,123,112,133,95,0,104,106,134,143],
[125,101,102,123,114,106,0,106,115,133],
[96,112,120,114,94,104,104,0,125,105],
[113,106,91,111,121,76,95,85,0,133],
[98,96,88,100,113,67,77,105,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,135,121,77,91,105,104,120,122],
[104,0,135,151,61,120,60,103,103,106],
[75,75,0,135,61,104,75,88,104,90],
[89,59,75,0,62,74,75,87,58,106],
[133,149,149,148,0,103,103,87,119,120],
[119,90,106,136,107,0,120,88,74,108],
[105,150,135,135,107,90,0,104,104,122],
[106,107,122,123,123,122,106,0,105,138],
[90,107,106,152,91,136,106,105,0,121],
[88,104,120,104,90,102,88,72,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,116,99,99,102,99,119,93],
[107,0,89,104,108,108,107,101,121,104],
[113,121,0,106,104,110,103,102,128,104],
[94,106,104,0,112,109,108,99,124,101],
[111,102,106,98,0,99,101,91,108,99],
[111,102,100,101,111,0,112,112,118,104],
[108,103,107,102,109,98,0,100,112,110],
[111,109,108,111,119,98,110,0,106,120],
[91,89,82,86,102,92,98,104,0,100],
[117,106,106,109,111,106,100,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,96,107,100,100,107,104,96],
[107,0,111,127,112,110,111,123,123,98],
[99,99,0,115,104,100,91,95,112,89],
[114,83,95,0,96,87,80,101,94,93],
[103,98,106,114,0,105,91,95,99,99],
[110,100,110,123,105,0,106,118,113,104],
[110,99,119,130,119,104,0,110,104,102],
[103,87,115,109,115,92,100,0,104,108],
[106,87,98,116,111,97,106,106,0,104],
[114,112,121,117,111,106,108,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,110,109,98,99,101,117,95],
[111,0,118,120,116,101,102,111,117,108],
[102,92,0,101,93,88,105,104,110,95],
[100,90,109,0,92,93,98,96,106,88],
[101,94,117,118,0,80,102,97,110,98],
[112,109,122,117,130,0,100,120,112,103],
[111,108,105,112,108,110,0,119,120,99],
[109,99,106,114,113,90,91,0,113,103],
[93,93,100,104,100,98,90,97,0,103],
[115,102,115,122,112,107,111,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,103,109,120,118,108,96,129],
[107,0,107,113,113,110,105,104,99,112],
[100,103,0,110,104,104,106,101,103,117],
[107,97,100,0,103,121,97,108,88,116],
[101,97,106,107,0,104,105,99,104,113],
[90,100,106,89,106,0,109,96,91,104],
[92,105,104,113,105,101,0,95,102,124],
[102,106,109,102,111,114,115,0,105,123],
[114,111,107,122,106,119,108,105,0,126],
[81,98,93,94,97,106,86,87,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,104,143,106,107,122,109,129,123],
[80,0,77,99,92,81,95,87,97,92],
[106,133,0,121,116,115,116,92,117,122],
[67,111,89,0,82,95,112,67,111,86],
[104,118,94,128,0,102,113,118,107,117],
[103,129,95,115,108,0,125,109,108,111],
[88,115,94,98,97,85,0,96,114,98],
[101,123,118,143,92,101,114,0,126,117],
[81,113,93,99,103,102,96,84,0,116],
[87,118,88,124,93,99,112,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,93,91,96,127,97,99,114],
[119,0,120,88,109,95,127,108,107,104],
[104,90,0,98,118,102,124,107,101,108],
[117,122,112,0,110,121,126,103,108,104],
[119,101,92,100,0,107,112,106,96,100],
[114,115,108,89,103,0,129,105,100,96],
[83,83,86,84,98,81,0,81,90,83],
[113,102,103,107,104,105,129,0,111,105],
[111,103,109,102,114,110,120,99,0,99],
[96,106,102,106,110,114,127,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,82,89,100,107,94,97,96,98],
[104,0,82,108,108,108,96,92,91,80],
[128,128,0,122,117,112,117,116,104,115],
[121,102,88,0,107,82,110,100,85,109],
[110,102,93,103,0,98,99,100,84,107],
[103,102,98,128,112,0,98,109,103,102],
[116,114,93,100,111,112,0,103,98,94],
[113,118,94,110,110,101,107,0,107,96],
[114,119,106,125,126,107,112,103,0,101],
[112,130,95,101,103,108,116,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,88,106,106,86,98,89,86],
[117,0,122,102,112,118,111,116,105,112],
[112,88,0,86,96,105,93,108,99,101],
[122,108,124,0,118,103,105,104,109,110],
[104,98,114,92,0,112,107,112,107,97],
[104,92,105,107,98,0,95,95,96,96],
[124,99,117,105,103,115,0,102,108,107],
[112,94,102,106,98,115,108,0,95,97],
[121,105,111,101,103,114,102,115,0,112],
[124,98,109,100,113,114,103,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,121,116,114,106,105,107,109,106],
[89,0,104,109,107,103,102,89,96,103],
[89,106,0,106,94,108,108,90,98,99],
[94,101,104,0,108,106,95,97,102,109],
[96,103,116,102,0,108,92,88,99,96],
[104,107,102,104,102,0,93,92,100,109],
[105,108,102,115,118,117,0,95,109,101],
[103,121,120,113,122,118,115,0,111,121],
[101,114,112,108,111,110,101,99,0,107],
[104,107,111,101,114,101,109,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,92,119,113,104,103,98,96],
[124,0,100,135,133,150,140,140,141,117],
[109,110,0,110,120,110,119,93,109,97],
[118,75,100,0,125,112,119,117,144,117],
[91,77,90,85,0,95,113,101,89,107],
[97,60,100,98,115,0,126,102,98,103],
[106,70,91,91,97,84,0,97,82,112],
[107,70,117,93,109,108,113,0,124,107],
[112,69,101,66,121,112,128,86,0,123],
[114,93,113,93,103,107,98,103,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,113,126,116,116,109,105,115],
[94,0,126,108,106,80,102,109,110,116],
[93,84,0,87,117,68,100,93,84,109],
[97,102,123,0,127,107,123,121,111,120],
[84,104,93,83,0,82,90,100,107,81],
[94,130,142,103,128,0,117,117,107,128],
[94,108,110,87,120,93,0,91,120,106],
[101,101,117,89,110,93,119,0,104,110],
[105,100,126,99,103,103,90,106,0,100],
[95,94,101,90,129,82,104,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,94,93,98,99,92,88,98],
[115,0,113,103,101,104,106,101,106,106],
[108,97,0,96,97,98,86,88,95,97],
[116,107,114,0,96,105,100,98,116,108],
[117,109,113,114,0,115,98,102,102,103],
[112,106,112,105,95,0,101,97,98,109],
[111,104,124,110,112,109,0,107,105,113],
[118,109,122,112,108,113,103,0,102,100],
[122,104,115,94,108,112,105,108,0,106],
[112,104,113,102,107,101,97,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,111,120,113,112,111,115,96],
[99,0,118,110,115,107,106,111,120,107],
[103,92,0,100,106,105,103,107,111,94],
[99,100,110,0,105,110,106,110,114,100],
[90,95,104,105,0,112,103,104,107,101],
[97,103,105,100,98,0,107,100,109,99],
[98,104,107,104,107,103,0,101,105,103],
[99,99,103,100,106,110,109,0,113,105],
[95,90,99,96,103,101,105,97,0,91],
[114,103,116,110,109,111,107,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,115,118,118,108,109,107,103],
[114,0,96,102,94,113,89,109,111,104],
[102,114,0,99,83,108,107,100,126,97],
[95,108,111,0,85,103,95,92,109,118],
[92,116,127,125,0,142,131,135,158,131],
[92,97,102,107,68,0,98,83,126,98],
[102,121,103,115,79,112,0,81,137,120],
[101,101,110,118,75,127,129,0,122,98],
[103,99,84,101,52,84,73,88,0,81],
[107,106,113,92,79,112,90,112,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,104,107,95,103,114,119,126],
[104,0,126,97,131,114,112,139,117,138],
[93,84,0,90,100,87,90,109,94,125],
[106,113,120,0,124,95,117,133,112,146],
[103,79,110,86,0,98,100,101,100,124],
[115,96,123,115,112,0,123,112,125,135],
[107,98,120,93,110,87,0,108,115,125],
[96,71,101,77,109,98,102,0,99,122],
[91,93,116,98,110,85,95,111,0,110],
[84,72,85,64,86,75,85,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,114,100,103,107,115,90,101],
[108,0,87,75,84,99,83,103,98,95],
[115,123,0,108,102,115,117,103,116,105],
[96,135,102,0,94,95,100,106,95,90],
[110,126,108,116,0,117,119,126,104,106],
[107,111,95,115,93,0,102,114,111,106],
[103,127,93,110,91,108,0,108,110,94],
[95,107,107,104,84,96,102,0,106,102],
[120,112,94,115,106,99,100,104,0,102],
[109,115,105,120,104,104,116,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,113,117,130,99,110,107,97],
[102,0,100,102,109,114,95,96,96,89],
[100,110,0,117,117,107,98,80,93,97],
[97,108,93,0,96,103,96,86,85,85],
[93,101,93,114,0,111,86,92,88,86],
[80,96,103,107,99,0,84,93,85,88],
[111,115,112,114,124,126,0,104,101,99],
[100,114,130,124,118,117,106,0,115,106],
[103,114,117,125,122,125,109,95,0,112],
[113,121,113,125,124,122,111,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,95,96,95,103,84,97,103,94],
[121,0,116,105,127,132,110,120,120,106],
[115,94,0,101,108,125,92,109,98,98],
[114,105,109,0,115,110,106,102,112,109],
[115,83,102,95,0,109,81,99,110,101],
[107,78,85,100,101,0,82,96,93,88],
[126,100,118,104,129,128,0,115,117,103],
[113,90,101,108,111,114,95,0,109,101],
[107,90,112,98,100,117,93,101,0,93],
[116,104,112,101,109,122,107,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,94,107,110,102,106,104,109,105],
[94,0,97,106,112,104,114,99,103,117],
[116,113,0,94,126,115,98,107,94,113],
[103,104,116,0,123,99,109,101,111,105],
[100,98,84,87,0,102,95,98,97,97],
[108,106,95,111,108,0,98,98,101,97],
[104,96,112,101,115,112,0,113,108,101],
[106,111,103,109,112,112,97,0,101,99],
[101,107,116,99,113,109,102,109,0,106],
[105,93,97,105,113,113,109,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,105,110,102,108,93,114,101],
[109,0,118,86,93,98,104,77,99,91],
[104,92,0,115,98,105,110,83,107,103],
[105,124,95,0,106,114,128,93,119,103],
[100,117,112,104,0,114,112,111,132,100],
[108,112,105,96,96,0,114,90,119,105],
[102,106,100,82,98,96,0,92,117,89],
[117,133,127,117,99,120,118,0,126,106],
[96,111,103,91,78,91,93,84,0,101],
[109,119,107,107,110,105,121,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,96,99,101,107,97,107,103],
[110,0,89,111,112,106,108,104,110,111],
[113,121,0,114,105,105,106,103,113,107],
[114,99,96,0,102,102,107,107,106,111],
[111,98,105,108,0,97,116,106,118,108],
[109,104,105,108,113,0,115,100,120,102],
[103,102,104,103,94,95,0,91,98,100],
[113,106,107,103,104,110,119,0,106,105],
[103,100,97,104,92,90,112,104,0,96],
[107,99,103,99,102,108,110,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,95,97,108,89,120,112,106],
[91,0,99,101,98,105,107,111,122,110],
[105,111,0,99,99,120,102,118,118,120],
[115,109,111,0,113,119,115,128,117,102],
[113,112,111,97,0,103,100,119,115,106],
[102,105,90,91,107,0,93,117,98,116],
[121,103,108,95,110,117,0,132,116,103],
[90,99,92,82,91,93,78,0,94,88],
[98,88,92,93,95,112,94,116,0,92],
[104,100,90,108,104,94,107,122,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,116,106,74,112,105,101,105],
[95,0,103,112,112,81,119,103,101,86],
[114,107,0,105,101,86,104,107,107,104],
[94,98,105,0,98,93,101,109,98,91],
[104,98,109,112,0,100,100,123,98,103],
[136,129,124,117,110,0,117,104,129,122],
[98,91,106,109,110,93,0,107,98,101],
[105,107,103,101,87,106,103,0,92,99],
[109,109,103,112,112,81,112,118,0,111],
[105,124,106,119,107,88,109,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,86,91,87,104,92,76,97,99],
[117,0,104,115,112,129,120,112,112,102],
[124,106,0,117,116,115,127,105,116,112],
[119,95,93,0,103,110,105,113,108,95],
[123,98,94,107,0,108,105,111,109,107],
[106,81,95,100,102,0,111,109,101,85],
[118,90,83,105,105,99,0,114,113,81],
[134,98,105,97,99,101,96,0,115,103],
[113,98,94,102,101,109,97,95,0,99],
[111,108,98,115,103,125,129,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,106,118,94,89,100,100,109],
[103,0,95,88,103,91,84,92,96,97],
[99,115,0,100,109,102,109,100,106,116],
[104,122,110,0,120,104,109,101,109,129],
[92,107,101,90,0,102,104,104,96,102],
[116,119,108,106,108,0,113,112,97,118],
[121,126,101,101,106,97,0,110,107,114],
[110,118,110,109,106,98,100,0,93,107],
[110,114,104,101,114,113,103,117,0,124],
[101,113,94,81,108,92,96,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,90,94,89,109,108,105,94],
[119,0,105,101,107,106,120,119,125,122],
[103,105,0,95,115,116,117,113,122,110],
[120,109,115,0,98,121,107,109,126,118],
[116,103,95,112,0,108,108,115,120,103],
[121,104,94,89,102,0,110,101,116,101],
[101,90,93,103,102,100,0,124,120,97],
[102,91,97,101,95,109,86,0,105,94],
[105,85,88,84,90,94,90,105,0,95],
[116,88,100,92,107,109,113,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,109,107,109,96,130,96,91],
[108,0,109,116,108,104,121,118,108,123],
[119,101,0,106,118,120,117,134,114,111],
[101,94,104,0,106,107,100,130,88,97],
[103,102,92,104,0,116,106,124,105,98],
[101,106,90,103,94,0,91,115,106,100],
[114,89,93,110,104,119,0,125,111,113],
[80,92,76,80,86,95,85,0,81,78],
[114,102,96,122,105,104,99,129,0,117],
[119,87,99,113,112,110,97,132,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,102,102,108,102,110,106,95],
[109,0,108,95,115,103,100,115,95,97],
[111,102,0,91,109,91,97,100,94,98],
[108,115,119,0,112,124,100,120,112,103],
[108,95,101,98,0,96,86,99,96,92],
[102,107,119,86,114,0,100,115,109,99],
[108,110,113,110,124,110,0,117,108,104],
[100,95,110,90,111,95,93,0,101,92],
[104,115,116,98,114,101,102,109,0,105],
[115,113,112,107,118,111,106,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,100,107,102,92,111,111,106],
[101,0,105,94,99,106,99,103,111,105],
[112,105,0,104,106,103,99,110,103,112],
[110,116,106,0,107,103,90,113,114,107],
[103,111,104,103,0,104,106,97,98,111],
[108,104,107,107,106,0,104,112,109,108],
[118,111,111,120,104,106,0,118,120,120],
[99,107,100,97,113,98,92,0,106,119],
[99,99,107,96,112,101,90,104,0,100],
[104,105,98,103,99,102,90,91,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,107,122,115,106,108,111,92],
[96,0,102,113,115,113,126,105,110,97],
[97,108,0,105,110,99,107,95,91,84],
[103,97,105,0,107,99,98,95,91,91],
[88,95,100,103,0,107,101,101,101,98],
[95,97,111,111,103,0,115,103,90,104],
[104,84,103,112,109,95,0,95,94,98],
[102,105,115,115,109,107,115,0,116,106],
[99,100,119,119,109,120,116,94,0,112],
[118,113,126,119,112,106,112,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,110,105,139,144,121,87,127],
[100,0,112,108,98,107,119,125,89,109],
[90,98,0,91,80,108,101,82,78,96],
[100,102,119,0,93,107,105,101,96,112],
[105,112,130,117,0,144,122,108,98,109],
[71,103,102,103,66,0,133,123,93,80],
[66,91,109,105,88,77,0,100,104,77],
[89,85,128,109,102,87,110,0,82,107],
[123,121,132,114,112,117,106,128,0,103],
[83,101,114,98,101,130,133,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,86,93,124,101,95,111,114],
[101,0,110,95,92,112,102,89,90,103],
[98,100,0,69,83,97,86,84,69,94],
[124,115,141,0,105,128,121,109,111,124],
[117,118,127,105,0,115,112,101,114,117],
[86,98,113,82,95,0,100,94,69,108],
[109,108,124,89,98,110,0,88,95,97],
[115,121,126,101,109,116,122,0,118,125],
[99,120,141,99,96,141,115,92,0,110],
[96,107,116,86,93,102,113,85,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,84,95,87,102,96,99,96,89],
[108,0,99,98,79,103,89,108,111,95],
[126,111,0,104,130,121,113,126,122,97],
[115,112,106,0,100,116,111,117,106,83],
[123,131,80,110,0,119,111,129,114,110],
[108,107,89,94,91,0,114,102,103,108],
[114,121,97,99,99,96,0,111,91,102],
[111,102,84,93,81,108,99,0,90,104],
[114,99,88,104,96,107,119,120,0,97],
[121,115,113,127,100,102,108,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,106,116,103,114,107,113,109],
[102,0,125,96,113,108,119,92,101,103],
[87,85,0,80,103,96,115,92,95,98],
[104,114,130,0,107,102,114,98,116,115],
[94,97,107,103,0,98,106,90,112,104],
[107,102,114,108,112,0,114,101,94,115],
[96,91,95,96,104,96,0,89,93,87],
[103,118,118,112,120,109,121,0,106,124],
[97,109,115,94,98,116,117,104,0,114],
[101,107,112,95,106,95,123,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,101,108,74,96,87,91,72],
[108,0,83,99,106,92,94,92,105,78],
[113,127,0,110,94,101,103,100,97,106],
[109,111,100,0,114,94,98,101,127,96],
[102,104,116,96,0,89,86,90,93,92],
[136,118,109,116,121,0,108,102,103,103],
[114,116,107,112,124,102,0,102,104,111],
[123,118,110,109,120,108,108,0,96,97],
[119,105,113,83,117,107,106,114,0,90],
[138,132,104,114,118,107,99,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,107,109,104,98,107,93,93],
[115,0,102,119,108,99,112,114,108,111],
[100,108,0,109,112,96,111,100,101,94],
[103,91,101,0,107,99,111,89,94,100],
[101,102,98,103,0,82,98,84,95,95],
[106,111,114,111,128,0,117,103,108,112],
[112,98,99,99,112,93,0,86,97,98],
[103,96,110,121,126,107,124,0,101,93],
[117,102,109,116,115,102,113,109,0,109],
[117,99,116,110,115,98,112,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,119,109,111,106,106,103,111],
[96,0,98,106,96,96,90,99,109,109],
[111,112,0,108,103,100,95,104,102,110],
[91,104,102,0,103,96,110,104,106,120],
[101,114,107,107,0,112,106,108,108,108],
[99,114,110,114,98,0,109,104,113,121],
[104,120,115,100,104,101,0,118,121,113],
[104,111,106,106,102,106,92,0,103,113],
[107,101,108,104,102,97,89,107,0,123],
[99,101,100,90,102,89,97,97,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,87,97,68,87,85,108,90,95],
[101,0,92,91,92,85,96,106,95,105],
[123,118,0,105,99,94,88,105,95,120],
[113,119,105,0,97,85,89,110,91,94],
[142,118,111,113,0,95,114,123,120,112],
[123,125,116,125,115,0,103,123,119,103],
[125,114,122,121,96,107,0,99,98,102],
[102,104,105,100,87,87,111,0,97,104],
[120,115,115,119,90,91,112,113,0,96],
[115,105,90,116,98,107,108,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,121,110,110,131,115,105,114],
[103,0,114,113,101,111,109,109,94,94],
[91,96,0,110,92,91,101,104,87,98],
[89,97,100,0,85,96,101,103,90,88],
[100,109,118,125,0,119,116,121,103,113],
[100,99,119,114,91,0,115,119,104,99],
[79,101,109,109,94,95,0,112,95,106],
[95,101,106,107,89,91,98,0,96,98],
[105,116,123,120,107,106,115,114,0,114],
[96,116,112,122,97,111,104,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,109,118,89,106,106,109,107],
[102,0,108,109,103,103,112,100,101,87],
[98,102,0,106,105,94,117,111,100,101],
[101,101,104,0,115,104,103,104,88,96],
[92,107,105,95,0,96,98,104,89,90],
[121,107,116,106,114,0,114,110,98,100],
[104,98,93,107,112,96,0,94,99,98],
[104,110,99,106,106,100,116,0,100,100],
[101,109,110,122,121,112,111,110,0,101],
[103,123,109,114,120,110,112,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,103,89,92,106,81,109,95],
[122,0,122,102,107,96,110,92,115,111],
[115,88,0,104,102,95,105,86,108,100],
[107,108,106,0,104,109,123,93,117,114],
[121,103,108,106,0,103,108,98,116,114],
[118,114,115,101,107,0,122,107,126,119],
[104,100,105,87,102,88,0,82,102,102],
[129,118,124,117,112,103,128,0,126,125],
[101,95,102,93,94,84,108,84,0,111],
[115,99,110,96,96,91,108,85,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,77,89,106,99,105,93,90,113],
[117,0,92,112,95,132,105,99,111,123],
[133,118,0,129,125,125,104,121,130,141],
[121,98,81,0,106,129,85,92,104,131],
[104,115,85,104,0,94,116,104,119,109],
[111,78,85,81,116,0,90,99,84,113],
[105,105,106,125,94,120,0,130,96,135],
[117,111,89,118,106,111,80,0,87,126],
[120,99,80,106,91,126,114,123,0,126],
[97,87,69,79,101,97,75,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,120,120,125,143,112,123,105,127],
[114,0,116,99,124,124,113,116,132,115],
[90,94,0,91,109,121,107,98,99,96],
[90,111,119,0,123,124,121,116,117,109],
[85,86,101,87,0,114,101,109,99,112],
[67,86,89,86,96,0,93,92,89,95],
[98,97,103,89,109,117,0,106,85,103],
[87,94,112,94,101,118,104,0,99,107],
[105,78,111,93,111,121,125,111,0,98],
[83,95,114,101,98,115,107,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,109,115,89,82,103,99,92],
[113,0,113,112,112,109,93,98,103,102],
[107,97,0,105,112,116,90,101,100,105],
[101,98,105,0,104,111,81,93,104,98],
[95,98,98,106,0,104,82,92,101,103],
[121,101,94,99,106,0,105,106,91,93],
[128,117,120,129,128,105,0,111,103,106],
[107,112,109,117,118,104,99,0,114,104],
[111,107,110,106,109,119,107,96,0,106],
[118,108,105,112,107,117,104,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,105,100,111,110,117,105,102],
[103,0,99,108,106,105,110,104,114,105],
[116,111,0,107,113,111,109,104,116,117],
[105,102,103,0,102,102,110,111,96,103],
[110,104,97,108,0,111,111,108,100,105],
[99,105,99,108,99,0,104,105,90,98],
[100,100,101,100,99,106,0,115,105,96],
[93,106,106,99,102,105,95,0,100,103],
[105,96,94,114,110,120,105,110,0,109],
[108,105,93,107,105,112,114,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,105,109,116,116,105,114,122],
[100,0,102,105,105,111,106,107,117,110],
[103,108,0,106,91,104,108,92,109,106],
[105,105,104,0,109,108,109,94,111,117],
[101,105,119,101,0,104,95,95,102,107],
[94,99,106,102,106,0,104,104,107,117],
[94,104,102,101,115,106,0,100,104,106],
[105,103,118,116,115,106,110,0,106,120],
[96,93,101,99,108,103,106,104,0,111],
[88,100,104,93,103,93,104,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,135,120,109,127,114,97,113,108],
[82,0,103,80,94,100,80,81,88,80],
[75,107,0,85,71,94,90,79,104,81],
[90,130,125,0,100,113,96,102,106,105],
[101,116,139,110,0,115,105,115,117,110],
[83,110,116,97,95,0,87,91,95,99],
[96,130,120,114,105,123,0,112,108,108],
[113,129,131,108,95,119,98,0,123,90],
[97,122,106,104,93,115,102,87,0,94],
[102,130,129,105,100,111,102,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,93,140,95,45,140,117,92,70],
[139,0,140,114,94,161,165,140,161,117],
[117,70,0,139,119,93,164,139,162,115],
[70,96,71,0,119,70,119,142,116,118],
[115,116,91,91,0,115,187,139,138,114],
[165,49,117,140,95,0,118,118,116,117],
[70,45,46,91,23,92,0,93,91,68],
[93,70,71,68,71,92,117,0,91,70],
[118,49,48,94,72,94,119,119,0,48],
[140,93,95,92,96,93,142,140,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,98,90,95,107,108,102,89],
[121,0,104,107,93,100,101,114,96,101],
[104,106,0,107,95,99,96,115,112,111],
[112,103,103,0,109,108,107,116,96,100],
[120,117,115,101,0,108,114,112,110,92],
[115,110,111,102,102,0,98,117,102,108],
[103,109,114,103,96,112,0,107,115,103],
[102,96,95,94,98,93,103,0,84,95],
[108,114,98,114,100,108,95,126,0,102],
[121,109,99,110,118,102,107,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,109,100,87,84,72,87,101,106],
[134,0,119,107,102,103,110,96,128,112],
[101,91,0,97,55,107,77,79,103,79],
[110,103,113,0,112,111,118,98,119,121],
[123,108,155,98,0,107,94,123,115,111],
[126,107,103,99,103,0,112,95,96,118],
[138,100,133,92,116,98,0,92,132,109],
[123,114,131,112,87,115,118,0,118,110],
[109,82,107,91,95,114,78,92,0,117],
[104,98,131,89,99,92,101,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,124,110,116,102,102,123,105,111],
[105,0,114,98,120,103,98,105,106,103],
[86,96,0,101,107,97,88,94,83,88],
[100,112,109,0,106,107,108,114,108,96],
[94,90,103,104,0,87,93,101,88,82],
[108,107,113,103,123,0,102,113,102,100],
[108,112,122,102,117,108,0,115,108,112],
[87,105,116,96,109,97,95,0,111,98],
[105,104,127,102,122,108,102,99,0,97],
[99,107,122,114,128,110,98,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,93,92,87,86,99,97,90,104],
[126,0,105,115,110,115,117,110,121,121],
[117,105,0,113,100,93,117,114,109,112],
[118,95,97,0,95,107,105,112,93,107],
[123,100,110,115,0,112,108,104,110,122],
[124,95,117,103,98,0,101,110,112,109],
[111,93,93,105,102,109,0,111,112,109],
[113,100,96,98,106,100,99,0,104,98],
[120,89,101,117,100,98,98,106,0,110],
[106,89,98,103,88,101,101,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,121,114,119,126,108,105,109],
[110,0,126,120,111,119,138,97,112,109],
[95,84,0,103,100,102,128,98,111,87],
[89,90,107,0,94,120,123,106,97,96],
[96,99,110,116,0,120,129,104,116,114],
[91,91,108,90,90,0,120,99,93,101],
[84,72,82,87,81,90,0,87,81,72],
[102,113,112,104,106,111,123,0,113,88],
[105,98,99,113,94,117,129,97,0,102],
[101,101,123,114,96,109,138,122,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,95,103,110,105,118,90,103],
[111,0,112,107,103,95,118,101,94,101],
[106,98,0,105,120,101,104,109,103,113],
[115,103,105,0,121,111,115,112,102,126],
[107,107,90,89,0,92,107,100,88,117],
[100,115,109,99,118,0,111,99,108,104],
[105,92,106,95,103,99,0,106,86,109],
[92,109,101,98,110,111,104,0,93,108],
[120,116,107,108,122,102,124,117,0,118],
[107,109,97,84,93,106,101,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,111,109,111,107,104,99,106],
[103,0,112,110,108,100,116,112,105,90],
[105,98,0,106,93,102,104,97,101,96],
[99,100,104,0,98,110,107,87,103,106],
[101,102,117,112,0,111,101,102,111,104],
[99,110,108,100,99,0,121,108,109,110],
[103,94,106,103,109,89,0,104,92,96],
[106,98,113,123,108,102,106,0,108,95],
[111,105,109,107,99,101,118,102,0,92],
[104,120,114,104,106,100,114,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,111,105,117,100,101,108,97],
[95,0,95,95,105,98,89,88,96,98],
[95,115,0,106,92,108,89,100,95,86],
[99,115,104,0,110,106,86,99,92,89],
[105,105,118,100,0,98,92,95,92,90],
[93,112,102,104,112,0,96,98,92,86],
[110,121,121,124,118,114,0,103,98,103],
[109,122,110,111,115,112,107,0,100,94],
[102,114,115,118,118,118,112,110,0,107],
[113,112,124,121,120,124,107,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,106,106,103,107,121,116,106],
[105,0,101,100,107,106,113,109,119,111],
[103,109,0,106,111,112,114,117,109,108],
[104,110,104,0,99,98,98,111,120,103],
[104,103,99,111,0,99,99,113,116,106],
[107,104,98,112,111,0,111,123,121,109],
[103,97,96,112,111,99,0,116,114,104],
[89,101,93,99,97,87,94,0,105,97],
[94,91,101,90,94,89,96,105,0,94],
[104,99,102,107,104,101,106,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,133,130,115,109,117,104,128],
[94,0,111,121,123,97,98,121,126,121],
[92,99,0,114,105,107,100,98,98,101],
[77,89,96,0,95,84,82,86,82,90],
[80,87,105,115,0,76,90,96,86,87],
[95,113,103,126,134,0,98,111,108,109],
[101,112,110,128,120,112,0,121,109,118],
[93,89,112,124,114,99,89,0,114,96],
[106,84,112,128,124,102,101,96,0,128],
[82,89,109,120,123,101,92,114,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,108,115,109,118,102,92,101],
[108,0,100,112,107,102,105,108,88,89],
[111,110,0,114,119,104,112,102,105,99],
[102,98,96,0,103,102,94,108,90,95],
[95,103,91,107,0,100,106,103,103,91],
[101,108,106,108,110,0,111,112,97,97],
[92,105,98,116,104,99,0,102,95,97],
[108,102,108,102,107,98,108,0,87,92],
[118,122,105,120,107,113,115,123,0,111],
[109,121,111,115,119,113,113,118,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,58,58,38,57,57,38,58],
[116,0,154,96,136,113,79,114,115,96],
[116,56,0,57,117,38,116,58,58,76],
[152,114,153,0,117,56,97,77,39,95],
[152,74,93,93,0,112,76,115,56,93],
[172,97,172,154,98,0,117,134,96,135],
[153,131,94,113,134,93,0,134,74,113],
[153,96,152,133,95,76,76,0,57,96],
[172,95,152,171,154,114,136,153,0,152],
[152,114,134,115,117,75,97,114,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,93,92,104,99,101,98,101],
[107,0,113,100,91,111,108,106,106,102],
[110,97,0,103,92,106,112,104,107,102],
[117,110,107,0,93,108,108,102,104,103],
[118,119,118,117,0,108,107,101,121,115],
[106,99,104,102,102,0,102,101,97,99],
[111,102,98,102,103,108,0,102,101,96],
[109,104,106,108,109,109,108,0,102,102],
[112,104,103,106,89,113,109,108,0,100],
[109,108,108,107,95,111,114,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,112,106,119,108,103,98,107],
[101,0,95,105,101,95,110,89,94,115],
[111,115,0,105,103,109,112,120,112,119],
[98,105,105,0,99,104,104,93,94,108],
[104,109,107,111,0,117,108,107,95,107],
[91,115,101,106,93,0,106,105,97,100],
[102,100,98,106,102,104,0,105,96,97],
[107,121,90,117,103,105,105,0,113,110],
[112,116,98,116,115,113,114,97,0,120],
[103,95,91,102,103,110,113,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,100,94,106,109,112,92,93],
[109,0,116,126,110,118,107,123,108,103],
[101,94,0,113,92,99,105,109,98,96],
[110,84,97,0,103,107,118,118,98,101],
[116,100,118,107,0,121,121,130,101,119],
[104,92,111,103,89,0,101,110,89,102],
[101,103,105,92,89,109,0,115,98,107],
[98,87,101,92,80,100,95,0,90,95],
[118,102,112,112,109,121,112,120,0,106],
[117,107,114,109,91,108,103,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,129,115,113,129,141,117,125,101],
[90,0,90,89,103,111,120,120,111,91],
[81,120,0,95,107,116,110,116,109,88],
[95,121,115,0,104,105,125,108,102,104],
[97,107,103,106,0,114,110,110,92,108],
[81,99,94,105,96,0,111,113,107,111],
[69,90,100,85,100,99,0,86,111,85],
[93,90,94,102,100,97,124,0,95,79],
[85,99,101,108,118,103,99,115,0,79],
[109,119,122,106,102,99,125,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,102,100,97,113,113,103,106],
[108,0,105,97,106,101,100,97,105,104],
[91,105,0,104,110,107,114,109,99,109],
[108,113,106,0,117,109,109,102,107,107],
[110,104,100,93,0,99,97,98,94,96],
[113,109,103,101,111,0,110,105,108,109],
[97,110,96,101,113,100,0,96,105,98],
[97,113,101,108,112,105,114,0,103,102],
[107,105,111,103,116,102,105,107,0,114],
[104,106,101,103,114,101,112,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,175,210,106,106,140,141,104,104],
[69,0,105,105,105,106,70,140,69,104],
[35,105,0,141,70,106,36,70,70,104],
[0,105,69,0,35,71,36,70,0,104],
[104,105,140,175,0,106,105,104,104,139],
[104,104,104,139,104,0,105,104,69,104],
[70,140,174,174,105,105,0,140,104,139],
[69,70,140,140,106,106,70,0,69,104],
[106,141,140,210,106,141,106,141,0,104],
[106,106,106,106,71,106,71,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,113,99,74,103,91,97,80],
[110,0,91,120,109,88,97,102,99,86],
[119,119,0,121,111,93,122,112,101,100],
[97,90,89,0,93,66,96,99,92,80],
[111,101,99,117,0,97,108,107,86,116],
[136,122,117,144,113,0,136,139,97,101],
[107,113,88,114,102,74,0,103,101,111],
[119,108,98,111,103,71,107,0,105,92],
[113,111,109,118,124,113,109,105,0,95],
[130,124,110,130,94,109,99,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,128,109,101,112,98,121,114],
[105,0,134,106,100,117,120,111,116,107],
[92,76,0,87,82,101,103,85,81,84],
[82,104,123,0,102,114,109,119,109,94],
[101,110,128,108,0,118,119,117,101,93],
[109,93,109,96,92,0,93,113,93,81],
[98,90,107,101,91,117,0,100,103,105],
[112,99,125,91,93,97,110,0,99,107],
[89,94,129,101,109,117,107,111,0,87],
[96,103,126,116,117,129,105,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,109,118,102,116,103,106,112],
[105,0,120,102,110,110,115,100,108,109],
[98,90,0,88,94,101,99,98,104,100],
[101,108,122,0,108,119,108,106,109,100],
[92,100,116,102,0,105,111,99,95,97],
[108,100,109,91,105,0,106,95,110,97],
[94,95,111,102,99,104,0,101,107,101],
[107,110,112,104,111,115,109,0,106,105],
[104,102,106,101,115,100,103,104,0,97],
[98,101,110,110,113,113,109,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,97,138,138,120,149,106,138,149],
[83,0,107,138,105,75,128,104,114,116],
[113,103,0,116,115,127,136,93,125,148],
[72,72,94,0,93,83,112,73,105,114],
[72,105,95,117,0,106,116,65,128,135],
[90,135,83,127,104,0,136,93,113,126],
[61,82,74,98,94,74,0,21,105,94],
[104,106,117,137,145,117,189,0,125,147],
[72,96,85,105,82,97,105,85,0,115],
[61,94,62,96,75,84,116,63,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,112,107,129,116,102,107,120],
[100,0,113,85,99,102,104,84,91,102],
[88,97,0,92,105,96,97,89,91,92],
[98,125,118,0,103,122,83,89,102,106],
[103,111,105,107,0,107,95,87,94,116],
[81,108,114,88,103,0,84,83,94,106],
[94,106,113,127,115,126,0,117,111,104],
[108,126,121,121,123,127,93,0,106,121],
[103,119,119,108,116,116,99,104,0,109],
[90,108,118,104,94,104,106,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,84,121,111,116,98,114,92],
[100,0,126,94,107,118,112,107,113,104],
[102,84,0,90,99,107,91,93,111,112],
[126,116,120,0,119,134,104,122,128,117],
[89,103,111,91,0,120,93,105,90,115],
[99,92,103,76,90,0,84,104,100,99],
[94,98,119,106,117,126,0,112,106,110],
[112,103,117,88,105,106,98,0,128,117],
[96,97,99,82,120,110,104,82,0,106],
[118,106,98,93,95,111,100,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,102,94,104,94,97,116,90],
[115,0,109,102,111,115,113,113,104,112],
[106,101,0,115,98,116,112,104,113,104],
[108,108,95,0,102,113,117,114,119,107],
[116,99,112,108,0,115,110,108,107,113],
[106,95,94,97,95,0,98,107,112,104],
[116,97,98,93,100,112,0,98,126,106],
[113,97,106,96,102,103,112,0,106,108],
[94,106,97,91,103,98,84,104,0,96],
[120,98,106,103,97,106,104,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,118,140,92,118,130,81,95],
[116,0,94,95,140,81,96,107,103,104],
[105,116,0,106,132,117,106,118,117,116],
[92,115,104,0,103,115,118,106,80,90],
[70,70,78,107,0,81,60,83,91,68],
[118,129,93,95,129,0,106,129,128,130],
[92,114,104,92,150,104,0,103,91,126],
[80,103,92,104,127,81,107,0,68,103],
[129,107,93,130,119,82,119,142,0,140],
[115,106,94,120,142,80,84,107,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,124,99,107,108,105,110,100,105],
[109,0,105,107,100,104,112,93,113,108],
[86,105,0,87,94,96,98,99,104,97],
[111,103,123,0,98,109,105,99,109,105],
[103,110,116,112,0,111,118,108,110,105],
[102,106,114,101,99,0,105,110,114,94],
[105,98,112,105,92,105,0,86,99,107],
[100,117,111,111,102,100,124,0,114,105],
[110,97,106,101,100,96,111,96,0,117],
[105,102,113,105,105,116,103,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,115,126,111,118,102,125,135],
[99,0,124,113,125,116,114,117,124,134],
[109,86,0,118,119,118,102,103,117,115],
[95,97,92,0,113,101,92,110,98,123],
[84,85,91,97,0,100,80,80,107,114],
[99,94,92,109,110,0,79,100,108,108],
[92,96,108,118,130,131,0,102,99,127],
[108,93,107,100,130,110,108,0,111,125],
[85,86,93,112,103,102,111,99,0,92],
[75,76,95,87,96,102,83,85,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,106,113,88,109,100,105,117],
[93,0,103,94,109,91,93,106,101,106],
[112,107,0,122,123,110,108,100,116,117],
[104,116,88,0,107,101,103,92,104,118],
[97,101,87,103,0,90,108,99,104,92],
[122,119,100,109,120,0,120,109,118,128],
[101,117,102,107,102,90,0,114,112,99],
[110,104,110,118,111,101,96,0,104,102],
[105,109,94,106,106,92,98,106,0,111],
[93,104,93,92,118,82,111,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,97,106,113,74,114,109,100],
[110,0,90,105,135,106,69,89,120,115],
[105,120,0,124,128,91,115,101,145,119],
[113,105,86,0,102,84,80,90,105,121],
[104,75,82,108,0,104,54,80,100,98],
[97,104,119,126,106,0,87,96,123,118],
[136,141,95,130,156,123,0,114,126,121],
[96,121,109,120,130,114,96,0,139,138],
[101,90,65,105,110,87,84,71,0,92],
[110,95,91,89,112,92,89,72,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,89,121,103,102,102,87,108],
[113,0,124,108,109,108,81,95,106,88],
[103,86,0,95,119,109,86,104,93,105],
[121,102,115,0,119,98,88,89,80,99],
[89,101,91,91,0,96,78,90,84,104],
[107,102,101,112,114,0,98,78,75,80],
[108,129,124,122,132,112,0,97,102,123],
[108,115,106,121,120,132,113,0,96,138],
[123,104,117,130,126,135,108,114,0,115],
[102,122,105,111,106,130,87,72,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,102,100,114,94,113,116,101],
[101,0,60,100,77,95,90,98,97,79],
[116,150,0,113,113,98,114,104,133,119],
[108,110,97,0,102,86,90,114,119,108],
[110,133,97,108,0,130,124,123,117,110],
[96,115,112,124,80,0,102,99,118,93],
[116,120,96,120,86,108,0,114,104,91],
[97,112,106,96,87,111,96,0,108,100],
[94,113,77,91,93,92,106,102,0,96],
[109,131,91,102,100,117,119,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,105,92,110,102,95,107,99],
[105,0,102,103,99,107,99,98,104,97],
[99,108,0,103,85,99,95,95,96,100],
[105,107,107,0,90,105,98,100,94,98],
[118,111,125,120,0,109,123,112,116,104],
[100,103,111,105,101,0,102,96,93,96],
[108,111,115,112,87,108,0,95,91,98],
[115,112,115,110,98,114,115,0,98,111],
[103,106,114,116,94,117,119,112,0,116],
[111,113,110,112,106,114,112,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,107,94,94,106,90,95,96],
[103,0,107,111,89,97,98,100,102,90],
[106,103,0,105,91,92,102,83,97,89],
[103,99,105,0,98,105,100,97,111,93],
[116,121,119,112,0,113,101,98,107,117],
[116,113,118,105,97,0,108,106,103,101],
[104,112,108,110,109,102,0,88,107,91],
[120,110,127,113,112,104,122,0,113,107],
[115,108,113,99,103,107,103,97,0,85],
[114,120,121,117,93,109,119,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,76,78,94,98,75,56,94,75],
[115,0,97,115,136,59,113,97,97,115],
[134,113,0,115,150,117,134,75,117,98],
[132,95,95,0,132,118,94,114,76,76],
[116,74,60,78,0,40,58,78,77,60],
[112,151,93,92,170,0,109,110,111,93],
[135,97,76,116,152,101,0,57,138,95],
[154,113,135,96,132,100,153,0,118,154],
[116,113,93,134,133,99,72,92,0,75],
[135,95,112,134,150,117,115,56,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,96,110,101,101,120,105,105],
[107,0,115,105,106,104,96,110,100,103],
[106,95,0,93,103,97,85,98,108,92],
[114,105,117,0,124,117,108,123,121,119],
[100,104,107,86,0,110,95,113,112,109],
[109,106,113,93,100,0,89,109,114,108],
[109,114,125,102,115,121,0,114,118,118],
[90,100,112,87,97,101,96,0,102,107],
[105,110,102,89,98,96,92,108,0,104],
[105,107,118,91,101,102,92,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,110,105,111,104,114,106,107],
[97,0,102,97,99,104,110,102,100,106],
[92,108,0,102,96,121,100,102,104,107],
[100,113,108,0,97,115,102,103,110,115],
[105,111,114,113,0,130,111,122,101,108],
[99,106,89,95,80,0,93,102,92,90],
[106,100,110,108,99,117,0,112,104,109],
[96,108,108,107,88,108,98,0,111,112],
[104,110,106,100,109,118,106,99,0,106],
[103,104,103,95,102,120,101,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,108,95,97,112,114,105,97],
[109,0,112,112,99,94,120,108,105,107],
[92,98,0,98,88,81,109,90,82,94],
[102,98,112,0,91,98,119,107,101,88],
[115,111,122,119,0,111,121,110,106,102],
[113,116,129,112,99,0,114,117,104,109],
[98,90,101,91,89,96,0,104,95,89],
[96,102,120,103,100,93,106,0,103,96],
[105,105,128,109,104,106,115,107,0,104],
[113,103,116,122,108,101,121,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,101,108,108,116,103,106,114],
[102,0,102,102,101,111,115,105,101,103],
[112,108,0,97,107,102,112,105,110,108],
[109,108,113,0,117,104,108,103,106,111],
[102,109,103,93,0,94,111,114,102,112],
[102,99,108,106,116,0,112,112,112,119],
[94,95,98,102,99,98,0,106,105,103],
[107,105,105,107,96,98,104,0,99,105],
[104,109,100,104,108,98,105,111,0,114],
[96,107,102,99,98,91,107,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,109,88,96,95,108,114,73,96],
[127,0,140,117,108,91,92,134,106,83],
[101,70,0,106,114,86,102,119,88,95],
[122,93,104,0,97,113,113,109,103,96],
[114,102,96,113,0,104,93,125,83,102],
[115,119,124,97,106,0,99,128,102,80],
[102,118,108,97,117,111,0,134,82,88],
[96,76,91,101,85,82,76,0,87,82],
[137,104,122,107,127,108,128,123,0,111],
[114,127,115,114,108,130,122,128,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,102,93,98,104,97,85,102],
[103,0,103,98,83,86,106,98,76,96],
[97,107,0,106,99,99,110,110,93,109],
[108,112,104,0,101,106,113,109,91,115],
[117,127,111,109,0,98,108,116,108,108],
[112,124,111,104,112,0,99,109,97,112],
[106,104,100,97,102,111,0,105,85,105],
[113,112,100,101,94,101,105,0,91,110],
[125,134,117,119,102,113,125,119,0,122],
[108,114,101,95,102,98,105,100,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,87,102,84,120,92,103,100],
[117,0,94,103,108,105,115,112,99,104],
[117,116,0,106,126,95,103,104,104,118],
[123,107,104,0,119,98,125,99,110,114],
[108,102,84,91,0,88,109,84,104,116],
[126,105,115,112,122,0,127,111,113,119],
[90,95,107,85,101,83,0,90,94,110],
[118,98,106,111,126,99,120,0,109,117],
[107,111,106,100,106,97,116,101,0,107],
[110,106,92,96,94,91,100,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,116,130,101,115,104,127,118,120],
[92,0,108,98,98,109,98,104,92,112],
[94,102,0,111,108,105,101,99,107,128],
[80,112,99,0,94,104,95,103,103,109],
[109,112,102,116,0,107,103,104,104,121],
[95,101,105,106,103,0,104,107,94,117],
[106,112,109,115,107,106,0,100,100,119],
[83,106,111,107,106,103,110,0,111,115],
[92,118,103,107,106,116,110,99,0,119],
[90,98,82,101,89,93,91,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,94,108,107,103,101,104,87],
[113,0,111,101,110,103,109,120,107,107],
[100,99,0,106,102,107,101,94,105,104],
[116,109,104,0,106,113,101,102,109,114],
[102,100,108,104,0,98,106,114,103,110],
[103,107,103,97,112,0,109,100,96,92],
[107,101,109,109,104,101,0,92,103,91],
[109,90,116,108,96,110,118,0,108,102],
[106,103,105,101,107,114,107,102,0,110],
[123,103,106,96,100,118,119,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,110,99,107,107,116,115,103],
[104,0,126,109,104,106,97,124,109,101],
[91,84,0,94,91,99,83,78,108,77],
[100,101,116,0,112,118,108,103,104,100],
[111,106,119,98,0,119,89,104,118,104],
[103,104,111,92,91,0,92,99,104,86],
[103,113,127,102,121,118,0,109,117,110],
[94,86,132,107,106,111,101,0,113,107],
[95,101,102,106,92,106,93,97,0,88],
[107,109,133,110,106,124,100,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,110,99,103,109,106,111,106],
[101,0,109,100,95,103,102,92,110,100],
[89,101,0,99,98,111,96,101,102,86],
[100,110,111,0,103,104,104,102,107,98],
[111,115,112,107,0,102,106,112,113,96],
[107,107,99,106,108,0,104,94,110,92],
[101,108,114,106,104,106,0,100,103,99],
[104,118,109,108,98,116,110,0,109,100],
[99,100,108,103,97,100,107,101,0,99],
[104,110,124,112,114,118,111,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,105,108,93,100,116,110,117,110],
[85,0,103,101,106,93,118,107,106,98],
[105,107,0,112,91,106,120,112,101,95],
[102,109,98,0,97,83,125,114,112,92],
[117,104,119,113,0,119,133,118,105,108],
[110,117,104,127,91,0,122,114,109,103],
[94,92,90,85,77,88,0,95,99,86],
[100,103,98,96,92,96,115,0,105,106],
[93,104,109,98,105,101,111,105,0,99],
[100,112,115,118,102,107,124,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,110,102,105,112,97,107,125],
[107,0,110,99,99,102,102,103,120,107],
[96,100,0,103,99,95,95,95,103,111],
[100,111,107,0,105,108,102,116,118,111],
[108,111,111,105,0,110,100,109,114,121],
[105,108,115,102,100,0,105,105,106,101],
[98,108,115,108,110,105,0,109,122,118],
[113,107,115,94,101,105,101,0,104,112],
[103,90,107,92,96,104,88,106,0,105],
[85,103,99,99,89,109,92,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,132,125,122,99,127,126,131,113],
[110,0,138,122,115,103,139,137,134,114],
[78,72,0,92,97,73,104,101,105,72],
[85,88,118,0,118,83,110,110,110,91],
[88,95,113,92,0,87,118,102,113,89],
[111,107,137,127,123,0,141,121,145,93],
[83,71,106,100,92,69,0,104,110,99],
[84,73,109,100,108,89,106,0,113,87],
[79,76,105,100,97,65,100,97,0,79],
[97,96,138,119,121,117,111,123,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,110,115,105,106,109,107,102],
[101,0,108,105,112,109,104,103,97,105],
[106,102,0,109,111,117,105,104,112,109],
[100,105,101,0,122,104,108,111,111,102],
[95,98,99,88,0,100,99,99,91,100],
[105,101,93,106,110,0,98,103,92,101],
[104,106,105,102,111,112,0,103,100,97],
[101,107,106,99,111,107,107,0,102,101],
[103,113,98,99,119,118,110,108,0,109],
[108,105,101,108,110,109,113,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,137,97,117,123,124,123,119],
[94,0,120,112,106,117,113,98,108,94],
[83,90,0,110,95,96,112,105,101,89],
[73,98,100,0,83,96,91,95,95,73],
[113,104,115,127,0,122,115,121,107,91],
[93,93,114,114,88,0,120,107,117,95],
[87,97,98,119,95,90,0,102,111,90],
[86,112,105,115,89,103,108,0,103,94],
[87,102,109,115,103,93,99,107,0,94],
[91,116,121,137,119,115,120,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,91,89,111,85,96,107,97],
[119,0,114,100,106,120,105,112,120,104],
[98,96,0,90,95,104,94,106,105,96],
[119,110,120,0,101,119,94,125,98,112],
[121,104,115,109,0,96,95,104,108,96],
[99,90,106,91,114,0,93,101,108,95],
[125,105,116,116,115,117,0,126,119,99],
[114,98,104,85,106,109,84,0,90,76],
[103,90,105,112,102,102,91,120,0,107],
[113,106,114,98,114,115,111,134,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,116,117,101,112,109,117,94,103],
[115,0,134,102,100,111,112,117,108,92],
[94,76,0,84,92,108,93,93,83,79],
[93,108,126,0,112,127,87,129,109,99],
[109,110,118,98,0,119,110,100,93,88],
[98,99,102,83,91,0,91,114,92,80],
[101,98,117,123,100,119,0,114,102,89],
[93,93,117,81,110,96,96,0,89,101],
[116,102,127,101,117,118,108,121,0,108],
[107,118,131,111,122,130,121,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,107,101,97,110,104,114,107],
[93,0,110,95,109,102,102,106,105,105],
[94,100,0,91,107,100,97,99,101,98],
[103,115,119,0,102,107,109,106,106,111],
[109,101,103,108,0,103,116,101,106,102],
[113,108,110,103,107,0,111,99,108,106],
[100,108,113,101,94,99,0,103,106,112],
[106,104,111,104,109,111,107,0,106,102],
[96,105,109,104,104,102,104,104,0,105],
[103,105,112,99,108,104,98,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,91,93,105,91,105,115,113],
[111,0,94,91,89,93,102,85,104,110],
[115,116,0,93,112,105,106,108,110,121],
[119,119,117,0,126,100,103,124,117,130],
[117,121,98,84,0,97,106,99,109,115],
[105,117,105,110,113,0,104,98,116,120],
[119,108,104,107,104,106,0,106,118,118],
[105,125,102,86,111,112,104,0,116,120],
[95,106,100,93,101,94,92,94,0,120],
[97,100,89,80,95,90,92,90,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,107,102,118,120,98,104,100],
[92,0,99,91,94,102,112,112,86,93],
[102,111,0,99,95,105,118,106,76,95],
[103,119,111,0,115,111,118,114,105,106],
[108,116,115,95,0,112,126,104,88,100],
[92,108,105,99,98,0,118,111,93,95],
[90,98,92,92,84,92,0,97,87,83],
[112,98,104,96,106,99,113,0,93,86],
[106,124,134,105,122,117,123,117,0,103],
[110,117,115,104,110,115,127,124,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,78,102,113,100,88,90,86,114],
[106,0,111,111,103,120,111,108,97,122],
[132,99,0,109,102,100,104,106,94,124],
[108,99,101,0,101,116,94,106,113,112],
[97,107,108,109,0,117,81,114,95,113],
[110,90,110,94,93,0,76,85,86,113],
[122,99,106,116,129,134,0,127,127,134],
[120,102,104,104,96,125,83,0,85,114],
[124,113,116,97,115,124,83,125,0,119],
[96,88,86,98,97,97,76,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,74,89,62,75,74,100,91,117],
[104,0,102,101,114,101,102,101,88,116],
[136,108,0,120,105,132,119,93,134,136],
[121,109,90,0,96,91,83,93,95,122],
[148,96,105,114,0,128,128,91,105,120],
[135,109,78,119,82,0,77,108,94,107],
[136,108,91,127,82,133,0,107,95,108],
[110,109,117,117,119,102,103,0,119,148],
[119,122,76,115,105,116,115,91,0,118],
[93,94,74,88,90,103,102,62,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,100,102,98,115,109,101,98,120],
[73,0,100,96,100,98,89,103,89,97],
[110,110,0,111,100,105,105,96,100,101],
[108,114,99,0,109,114,108,102,90,111],
[112,110,110,101,0,112,103,109,106,111],
[95,112,105,96,98,0,87,91,90,111],
[101,121,105,102,107,123,0,107,96,102],
[109,107,114,108,101,119,103,0,95,100],
[112,121,110,120,104,120,114,115,0,106],
[90,113,109,99,99,99,108,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,129,103,108,94,97,88,97,112],
[117,0,116,106,106,107,92,115,113,117],
[81,94,0,92,108,112,120,110,97,86],
[107,104,118,0,87,126,113,118,119,112],
[102,104,102,123,0,118,104,113,105,116],
[116,103,98,84,92,0,114,98,80,125],
[113,118,90,97,106,96,0,100,97,105],
[122,95,100,92,97,112,110,0,110,101],
[113,97,113,91,105,130,113,100,0,117],
[98,93,124,98,94,85,105,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,100,94,94,108,84,99,91,113],
[126,0,111,113,118,124,108,100,118,112],
[110,99,0,114,97,107,103,98,116,100],
[116,97,96,0,111,109,104,99,106,91],
[116,92,113,99,0,122,95,107,105,116],
[102,86,103,101,88,0,89,96,112,105],
[126,102,107,106,115,121,0,110,113,118],
[111,110,112,111,103,114,100,0,122,98],
[119,92,94,104,105,98,97,88,0,93],
[97,98,110,119,94,105,92,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,113,96,113,108,118,132,90],
[102,0,84,96,89,114,92,102,116,92],
[92,126,0,115,119,118,104,122,126,109],
[97,114,95,0,81,112,80,103,99,89],
[114,121,91,129,0,117,109,126,126,104],
[97,96,92,98,93,0,93,83,102,87],
[102,118,106,130,101,117,0,130,128,103],
[92,108,88,107,84,127,80,0,115,109],
[78,94,84,111,84,108,82,95,0,80],
[120,118,101,121,106,123,107,101,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,97,98,132,161,147,96,147],
[82,0,66,97,82,85,98,114,96,101],
[97,144,0,97,113,98,129,127,96,129],
[113,113,113,0,63,132,128,130,83,97],
[112,128,97,147,0,101,128,115,99,163],
[78,125,112,78,109,0,94,125,111,94],
[49,112,81,82,82,116,0,115,80,116],
[63,96,83,80,95,85,95,0,97,130],
[114,114,114,127,111,99,130,113,0,114],
[63,109,81,113,47,116,94,80,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,119,116,104,105,119,112,117],
[86,0,98,104,90,89,86,86,96,86],
[99,112,0,110,106,97,89,113,105,95],
[91,106,100,0,96,94,81,105,91,95],
[94,120,104,114,0,99,98,103,98,104],
[106,121,113,116,111,0,99,113,98,102],
[105,124,121,129,112,111,0,109,120,94],
[91,124,97,105,107,97,101,0,95,112],
[98,114,105,119,112,112,90,115,0,102],
[93,124,115,115,106,108,116,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,116,94,118,101,115,116,101,115],
[92,0,100,96,89,66,117,95,81,92],
[94,110,0,111,118,111,106,118,99,111],
[116,114,99,0,108,96,111,131,100,111],
[92,121,92,102,0,111,121,97,108,100],
[109,144,99,114,99,0,115,98,117,107],
[95,93,104,99,89,95,0,114,76,90],
[94,115,92,79,113,112,96,0,88,109],
[109,129,111,110,102,93,134,122,0,113],
[95,118,99,99,110,103,120,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,83,76,106,127,82,98,89,92],
[112,0,84,76,95,100,78,121,90,78],
[127,126,0,114,105,130,98,113,115,99],
[134,134,96,0,106,146,125,127,114,100],
[104,115,105,104,0,116,94,108,79,95],
[83,110,80,64,94,0,81,104,75,68],
[128,132,112,85,116,129,0,122,107,108],
[112,89,97,83,102,106,88,0,95,88],
[121,120,95,96,131,135,103,115,0,85],
[118,132,111,110,115,142,102,122,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,107,109,114,113,117,117,88],
[92,0,122,90,97,109,99,126,111,92],
[96,88,0,98,95,100,111,112,120,90],
[103,120,112,0,88,122,101,127,92,92],
[101,113,115,122,0,119,129,133,135,112],
[96,101,110,88,91,0,117,124,93,101],
[97,111,99,109,81,93,0,106,97,85],
[93,84,98,83,77,86,104,0,95,94],
[93,99,90,118,75,117,113,115,0,96],
[122,118,120,118,98,109,125,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,86,111,102,99,107,111,105,108],
[102,0,100,118,94,83,102,116,110,119],
[124,110,0,127,112,94,77,98,111,123],
[99,92,83,0,80,75,80,98,90,99],
[108,116,98,130,0,83,97,116,102,120],
[111,127,116,135,127,0,89,113,111,136],
[103,108,133,130,113,121,0,128,103,141],
[99,94,112,112,94,97,82,0,98,104],
[105,100,99,120,108,99,107,112,0,114],
[102,91,87,111,90,74,69,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,117,99,106,108,109,98,106,117],
[114,0,103,101,103,99,109,94,92,130],
[93,107,0,87,101,93,100,74,118,118],
[111,109,123,0,118,100,106,109,106,125],
[104,107,109,92,0,101,105,102,111,121],
[102,111,117,110,109,0,104,105,110,130],
[101,101,110,104,105,106,0,98,106,129],
[112,116,136,101,108,105,112,0,113,122],
[104,118,92,104,99,100,104,97,0,117],
[93,80,92,85,89,80,81,88,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,105,103,109,99,118,96,114],
[108,0,115,97,98,102,96,114,107,114],
[91,95,0,81,89,92,97,91,96,90],
[105,113,129,0,107,105,110,110,104,113],
[107,112,121,103,0,96,112,118,103,104],
[101,108,118,105,114,0,105,114,104,121],
[111,114,113,100,98,105,0,123,99,112],
[92,96,119,100,92,96,87,0,95,107],
[114,103,114,106,107,106,111,115,0,117],
[96,96,120,97,106,89,98,103,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,105,111,104,107,105,103,122],
[100,0,102,109,100,107,96,109,107,112],
[111,108,0,114,103,104,106,116,113,113],
[105,101,96,0,110,106,105,115,108,103],
[99,110,107,100,0,102,101,97,112,120],
[106,103,106,104,108,0,101,103,100,118],
[103,114,104,105,109,109,0,103,104,104],
[105,101,94,95,113,107,107,0,101,106],
[107,103,97,102,98,110,106,109,0,110],
[88,98,97,107,90,92,106,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,107,127,104,102,89,93,117],
[95,0,99,106,121,98,108,90,103,96],
[103,111,0,99,120,107,105,87,97,105],
[103,104,111,0,119,92,111,89,93,102],
[83,89,90,91,0,86,100,82,91,90],
[106,112,103,118,124,0,104,108,107,116],
[108,102,105,99,110,106,0,100,101,97],
[121,120,123,121,128,102,110,0,114,116],
[117,107,113,117,119,103,109,96,0,104],
[93,114,105,108,120,94,113,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,95,97,104,87,88,87,100],
[117,0,105,108,112,116,101,97,96,104],
[116,105,0,103,102,110,99,102,89,108],
[115,102,107,0,107,116,95,89,89,96],
[113,98,108,103,0,122,105,101,99,116],
[106,94,100,94,88,0,89,89,90,107],
[123,109,111,115,105,121,0,106,107,125],
[122,113,108,121,109,121,104,0,105,123],
[123,114,121,121,111,120,103,105,0,116],
[110,106,102,114,94,103,85,87,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,111,96,107,104,109,107,94],
[112,0,126,115,104,110,102,116,114,113],
[94,84,0,105,101,91,103,105,103,96],
[99,95,105,0,96,94,106,107,108,104],
[114,106,109,114,0,101,105,108,120,108],
[103,100,119,116,109,0,116,122,114,109],
[106,108,107,104,105,94,0,108,128,114],
[101,94,105,103,102,88,102,0,112,101],
[103,96,107,102,90,96,82,98,0,91],
[116,97,114,106,102,101,96,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,115,114,107,106,101,109,96],
[103,0,110,111,114,116,104,108,111,109],
[95,100,0,104,112,109,97,112,109,103],
[95,99,106,0,103,100,101,94,97,93],
[96,96,98,107,0,101,91,85,94,91],
[103,94,101,110,109,0,96,94,97,97],
[104,106,113,109,119,114,0,105,107,111],
[109,102,98,116,125,116,105,0,109,103],
[101,99,101,113,116,113,103,101,0,101],
[114,101,107,117,119,113,99,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,89,105,123,118,104,117,111],
[103,0,106,95,102,103,111,97,98,121],
[87,104,0,88,90,110,94,98,97,108],
[121,115,122,0,102,131,137,103,126,115],
[105,108,120,108,0,131,126,113,115,122],
[87,107,100,79,79,0,111,88,97,98],
[92,99,116,73,84,99,0,95,104,102],
[106,113,112,107,97,122,115,0,118,117],
[93,112,113,84,95,113,106,92,0,107],
[99,89,102,95,88,112,108,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,102,97,109,98,112,101,106],
[108,0,114,115,96,112,112,108,106,112],
[112,96,0,103,101,111,102,113,99,114],
[108,95,107,0,95,115,111,102,104,119],
[113,114,109,115,0,110,124,104,109,111],
[101,98,99,95,100,0,106,98,107,108],
[112,98,108,99,86,104,0,103,104,101],
[98,102,97,108,106,112,107,0,98,109],
[109,104,111,106,101,103,106,112,0,101],
[104,98,96,91,99,102,109,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,95,107,103,88,89,84,88],
[108,0,100,86,105,111,96,93,93,76],
[105,110,0,92,106,116,95,93,85,77],
[115,124,118,0,122,105,113,88,102,111],
[103,105,104,88,0,102,102,94,91,89],
[107,99,94,105,108,0,84,102,92,83],
[122,114,115,97,108,126,0,116,93,101],
[121,117,117,122,116,108,94,0,110,90],
[126,117,125,108,119,118,117,100,0,99],
[122,134,133,99,121,127,109,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,92,96,99,96,113,105,113],
[96,0,94,105,99,106,89,98,88,104],
[107,116,0,122,110,91,120,115,116,101],
[118,105,88,0,89,107,98,109,98,107],
[114,111,100,121,0,105,113,112,104,109],
[111,104,119,103,105,0,102,109,113,112],
[114,121,90,112,97,108,0,118,83,109],
[97,112,95,101,98,101,92,0,101,106],
[105,122,94,112,106,97,127,109,0,113],
[97,106,109,103,101,98,101,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,111,99,109,114,101,98,93],
[114,0,118,118,119,117,116,110,105,117],
[97,92,0,110,114,104,97,98,104,107],
[99,92,100,0,109,100,108,105,100,93],
[111,91,96,101,0,108,119,114,105,109],
[101,93,106,110,102,0,109,103,102,111],
[96,94,113,102,91,101,0,96,92,106],
[109,100,112,105,96,107,114,0,105,108],
[112,105,106,110,105,108,118,105,0,106],
[117,93,103,117,101,99,104,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,118,122,107,102,103,111,102],
[98,0,104,101,107,101,95,108,104,106],
[97,106,0,93,113,97,104,100,99,91],
[92,109,117,0,105,86,98,102,100,103],
[88,103,97,105,0,93,97,99,101,96],
[103,109,113,124,117,0,96,106,105,108],
[108,115,106,112,113,114,0,109,109,98],
[107,102,110,108,111,104,101,0,118,111],
[99,106,111,110,109,105,101,92,0,97],
[108,104,119,107,114,102,112,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,104,101,106,123,121,110,145,123],
[81,0,89,87,90,92,106,84,110,107],
[106,121,0,108,116,126,114,104,123,130],
[109,123,102,0,97,111,105,111,113,106],
[104,120,94,113,0,111,117,112,125,120],
[87,118,84,99,99,0,111,95,107,110],
[89,104,96,105,93,99,0,91,111,100],
[100,126,106,99,98,115,119,0,129,116],
[65,100,87,97,85,103,99,81,0,105],
[87,103,80,104,90,100,110,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,94,96,125,115,125,109,102,130],
[94,0,97,104,107,113,136,96,84,94],
[116,113,0,91,131,143,130,98,102,105],
[114,106,119,0,110,118,131,106,98,113],
[85,103,79,100,0,96,108,102,83,105],
[95,97,67,92,114,0,120,109,98,106],
[85,74,80,79,102,90,0,84,82,83],
[101,114,112,104,108,101,126,0,107,105],
[108,126,108,112,127,112,128,103,0,114],
[80,116,105,97,105,104,127,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,117,122,108,102,108,105,107],
[98,0,105,108,100,109,89,94,104,93],
[97,105,0,114,103,109,102,109,104,84],
[93,102,96,0,105,92,88,106,98,87],
[88,110,107,105,0,99,91,89,96,97],
[102,101,101,118,111,0,106,107,101,97],
[108,121,108,122,119,104,0,111,110,101],
[102,116,101,104,121,103,99,0,100,95],
[105,106,106,112,114,109,100,110,0,97],
[103,117,126,123,113,113,109,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,95,121,112,105,103,106,109],
[99,0,106,109,105,113,119,107,117,101],
[105,104,0,100,107,113,123,113,119,115],
[115,101,110,0,89,118,117,104,102,103],
[89,105,103,121,0,113,114,104,116,113],
[98,97,97,92,97,0,87,94,92,100],
[105,91,87,93,96,123,0,98,108,104],
[107,103,97,106,106,116,112,0,107,103],
[104,93,91,108,94,118,102,103,0,112],
[101,109,95,107,97,110,106,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,92,109,113,114,113,110,104,105],
[91,0,92,101,106,106,108,101,91,101],
[118,118,0,120,123,121,109,116,101,119],
[101,109,90,0,108,97,106,105,106,102],
[97,104,87,102,0,93,105,99,98,100],
[96,104,89,113,117,0,99,97,105,102],
[97,102,101,104,105,111,0,106,100,101],
[100,109,94,105,111,113,104,0,98,104],
[106,119,109,104,112,105,110,112,0,101],
[105,109,91,108,110,108,109,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,103,77,78,103,130,77,104,51],
[79,0,79,103,78,104,52,104,105,77],
[107,131,0,77,105,157,104,131,104,78],
[133,107,133,0,79,131,79,80,106,80],
[132,132,105,131,0,130,105,132,132,131],
[107,106,53,79,80,0,106,80,79,53],
[80,158,106,131,105,104,0,105,79,78],
[133,106,79,130,78,130,105,0,132,104],
[106,105,106,104,78,131,131,78,0,105],
[159,133,132,130,79,157,132,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,120,108,100,89,92,96,106,105],
[114,0,105,119,99,115,103,113,113,123],
[90,105,0,116,109,113,110,99,111,113],
[102,91,94,0,89,110,108,102,104,106],
[110,111,101,121,0,110,100,121,116,96],
[121,95,97,100,100,0,87,112,100,95],
[118,107,100,102,110,123,0,92,111,116],
[114,97,111,108,89,98,118,0,106,105],
[104,97,99,106,94,110,99,104,0,89],
[105,87,97,104,114,115,94,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,126,104,122,114,121,113,111,126],
[112,0,115,115,117,98,108,113,101,118],
[84,95,0,96,109,86,105,98,110,106],
[106,95,114,0,100,88,111,99,112,110],
[88,93,101,110,0,93,100,87,101,100],
[96,112,124,122,117,0,118,105,120,114],
[89,102,105,99,110,92,0,104,102,101],
[97,97,112,111,123,105,106,0,93,111],
[99,109,100,98,109,90,108,117,0,101],
[84,92,104,100,110,96,109,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,114,116,130,101,121,132,117],
[102,0,110,120,122,111,90,113,114,121],
[102,100,0,126,104,127,100,118,129,120],
[96,90,84,0,106,105,108,117,107,108],
[94,88,106,104,0,103,92,105,100,109],
[80,99,83,105,107,0,90,116,101,97],
[109,120,110,102,118,120,0,114,127,98],
[89,97,92,93,105,94,96,0,114,97],
[78,96,81,103,110,109,83,96,0,106],
[93,89,90,102,101,113,112,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,95,103,93,119,105,95,99,97],
[123,0,99,106,105,105,108,111,105,105],
[115,111,0,119,107,123,111,103,110,117],
[107,104,91,0,96,110,107,102,91,104],
[117,105,103,114,0,110,103,102,101,114],
[91,105,87,100,100,0,93,83,105,92],
[105,102,99,103,107,117,0,104,106,101],
[115,99,107,108,108,127,106,0,112,114],
[111,105,100,119,109,105,104,98,0,109],
[113,105,93,106,96,118,109,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,115,107,102,98,111,104,90],
[104,0,102,107,101,95,99,107,99,95],
[117,108,0,126,117,120,91,115,118,113],
[95,103,84,0,102,103,91,100,99,94],
[103,109,93,108,0,97,86,100,102,96],
[108,115,90,107,113,0,99,113,105,97],
[112,111,119,119,124,111,0,115,112,103],
[99,103,95,110,110,97,95,0,107,99],
[106,111,92,111,108,105,98,103,0,95],
[120,115,97,116,114,113,107,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,82,104,101,121,102,109,105,110],
[101,0,110,127,120,115,113,113,107,116],
[128,100,0,138,128,144,127,137,121,122],
[106,83,72,0,112,111,92,91,98,92],
[109,90,82,98,0,121,113,105,110,105],
[89,95,66,99,89,0,96,98,107,108],
[108,97,83,118,97,114,0,107,111,109],
[101,97,73,119,105,112,103,0,98,102],
[105,103,89,112,100,103,99,112,0,99],
[100,94,88,118,105,102,101,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,101,112,100,101,98,108,105],
[112,0,104,110,118,122,120,110,118,115],
[105,106,0,113,120,114,118,107,110,116],
[109,100,97,0,110,109,109,101,109,105],
[98,92,90,100,0,93,108,96,100,97],
[110,88,96,101,117,0,109,105,110,101],
[109,90,92,101,102,101,0,98,97,104],
[112,100,103,109,114,105,112,0,109,110],
[102,92,100,101,110,100,113,101,0,100],
[105,95,94,105,113,109,106,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,97,102,102,95,100,126,91],
[89,0,95,78,82,88,91,92,99,72],
[94,115,0,90,89,85,109,98,110,111],
[113,132,120,0,97,115,103,105,126,109],
[108,128,121,113,0,113,121,117,119,100],
[108,122,125,95,97,0,101,106,124,90],
[115,119,101,107,89,109,0,107,117,93],
[110,118,112,105,93,104,103,0,112,93],
[84,111,100,84,91,86,93,98,0,79],
[119,138,99,101,110,120,117,117,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,103,98,95,100,107,100,110],
[113,0,114,112,116,105,112,111,98,107],
[113,96,0,115,114,114,117,110,101,108],
[107,98,95,0,98,106,102,105,100,106],
[112,94,96,112,0,101,99,108,94,106],
[115,105,96,104,109,0,113,104,105,102],
[110,98,93,108,111,97,0,99,99,102],
[103,99,100,105,102,106,111,0,108,102],
[110,112,109,110,116,105,111,102,0,99],
[100,103,102,104,104,108,108,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,99,103,94,92,86,95,99],
[114,0,119,113,109,113,107,117,101,109],
[111,91,0,106,97,98,101,89,104,99],
[111,97,104,0,105,121,97,101,103,108],
[107,101,113,105,0,104,100,93,105,97],
[116,97,112,89,106,0,95,97,102,111],
[118,103,109,113,110,115,0,109,110,103],
[124,93,121,109,117,113,101,0,119,113],
[115,109,106,107,105,108,100,91,0,108],
[111,101,111,102,113,99,107,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,89,97,85,93,109,96,93],
[103,0,140,112,126,100,117,134,123,108],
[104,70,0,96,88,93,69,102,103,95],
[121,98,114,0,103,88,87,107,72,92],
[113,84,122,107,0,100,93,110,86,114],
[125,110,117,122,110,0,97,122,107,110],
[117,93,141,123,117,113,0,100,102,113],
[101,76,108,103,100,88,110,0,111,93],
[114,87,107,138,124,103,108,99,0,114],
[117,102,115,118,96,100,97,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,121,93,97,99,92,79,98,103],
[85,0,106,84,93,99,101,87,77,77],
[89,104,0,89,93,82,92,92,100,80],
[117,126,121,0,117,106,128,105,108,101],
[113,117,117,93,0,102,101,86,95,89],
[111,111,128,104,108,0,106,105,117,105],
[118,109,118,82,109,104,0,91,85,91],
[131,123,118,105,124,105,119,0,108,112],
[112,133,110,102,115,93,125,102,0,112],
[107,133,130,109,121,105,119,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,103,104,87,91,97,85,99],
[111,0,114,112,112,103,112,101,101,101],
[109,96,0,111,117,117,107,110,112,111],
[107,98,99,0,117,108,86,95,96,118],
[106,98,93,93,0,98,87,93,102,108],
[123,107,93,102,112,0,100,107,105,108],
[119,98,103,124,123,110,0,111,97,117],
[113,109,100,115,117,103,99,0,100,121],
[125,109,98,114,108,105,113,110,0,117],
[111,109,99,92,102,102,93,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,97,103,112,122,125,114,102],
[106,0,95,103,100,92,119,104,124,105],
[101,115,0,108,107,123,138,122,114,122],
[113,107,102,0,116,114,135,126,117,113],
[107,110,103,94,0,84,124,115,112,116],
[98,118,87,96,126,0,123,118,108,120],
[88,91,72,75,86,87,0,95,91,82],
[85,106,88,84,95,92,115,0,90,92],
[96,86,96,93,98,102,119,120,0,97],
[108,105,88,97,94,90,128,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,99,107,110,107,100,107,102],
[104,0,109,110,107,119,97,100,110,103],
[102,101,0,101,92,110,102,96,98,85],
[111,100,109,0,113,114,114,115,105,98],
[103,103,118,97,0,112,112,103,108,103],
[100,91,100,96,98,0,95,99,101,93],
[103,113,108,96,98,115,0,98,95,98],
[110,110,114,95,107,111,112,0,102,94],
[103,100,112,105,102,109,115,108,0,109],
[108,107,125,112,107,117,112,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,87,79,105,81,78,117,91,87],
[127,0,110,95,101,95,113,117,132,102],
[123,100,0,116,112,89,84,117,117,123],
[131,115,94,0,135,110,101,110,148,131],
[105,109,98,75,0,71,94,114,97,119],
[129,115,121,100,139,0,110,123,131,144],
[132,97,126,109,116,100,0,141,139,145],
[93,93,93,100,96,87,69,0,88,110],
[119,78,93,62,113,79,71,122,0,93],
[123,108,87,79,91,66,65,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,129,157,79,157,132,104,157,159],
[78,0,78,78,103,77,78,103,78,80],
[81,132,0,80,80,80,108,106,106,107],
[53,132,130,0,78,130,105,130,131,160],
[131,107,130,132,0,105,106,158,131,134],
[53,133,130,80,105,0,105,105,81,160],
[78,132,102,105,104,105,0,103,105,159],
[106,107,104,80,52,105,107,0,78,134],
[53,132,104,79,79,129,105,132,0,134],
[51,130,103,50,76,50,51,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,109,104,102,95,110,112,127],
[114,0,104,125,112,117,105,110,105,129],
[101,106,0,113,101,112,109,120,119,112],
[101,85,97,0,93,79,80,98,94,117],
[106,98,109,117,0,110,107,114,107,111],
[108,93,98,131,100,0,111,111,123,127],
[115,105,101,130,103,99,0,141,119,136],
[100,100,90,112,96,99,69,0,102,109],
[98,105,91,116,103,87,91,108,0,115],
[83,81,98,93,99,83,74,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,101,105,101,110,110,106,110],
[104,0,106,90,102,100,116,107,103,114],
[107,104,0,106,110,106,107,115,116,118],
[109,120,104,0,121,106,111,113,118,121],
[105,108,100,89,0,103,116,107,114,110],
[109,110,104,104,107,0,114,107,108,113],
[100,94,103,99,94,96,0,109,103,109],
[100,103,95,97,103,103,101,0,105,112],
[104,107,94,92,96,102,107,105,0,112],
[100,96,92,89,100,97,101,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,107,100,98,90,92,100,97,103],
[124,0,115,107,105,99,98,102,98,103],
[103,95,0,96,91,96,97,92,89,108],
[110,103,114,0,104,104,99,119,96,110],
[112,105,119,106,0,109,114,127,109,122],
[120,111,114,106,101,0,101,106,89,108],
[118,112,113,111,96,109,0,110,100,118],
[110,108,118,91,83,104,100,0,92,105],
[113,112,121,114,101,121,110,118,0,118],
[107,107,102,100,88,102,92,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,83,103,89,97,98,98,96,102],
[104,0,100,96,89,95,96,101,95,104],
[127,110,0,116,109,105,114,112,104,107],
[107,114,94,0,91,98,113,95,105,108],
[121,121,101,119,0,116,118,118,108,114],
[113,115,105,112,94,0,110,104,106,113],
[112,114,96,97,92,100,0,98,102,95],
[112,109,98,115,92,106,112,0,103,113],
[114,115,106,105,102,104,108,107,0,101],
[108,106,103,102,96,97,115,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,122,108,110,118,102,122,122],
[98,0,108,110,115,110,115,94,129,98],
[106,102,0,117,113,124,126,107,128,98],
[88,100,93,0,106,93,105,95,128,83],
[102,95,97,104,0,110,122,85,107,83],
[100,100,86,117,100,0,101,93,100,81],
[92,95,84,105,88,109,0,88,111,96],
[108,116,103,115,125,117,122,0,121,99],
[88,81,82,82,103,110,99,89,0,87],
[88,112,112,127,127,129,114,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,94,107,108,101,87,118,114],
[111,0,116,98,101,98,111,104,123,123],
[105,94,0,95,105,106,104,100,112,118],
[116,112,115,0,109,102,107,92,116,126],
[103,109,105,101,0,112,113,106,125,113],
[102,112,104,108,98,0,104,94,119,115],
[109,99,106,103,97,106,0,96,120,111],
[123,106,110,118,104,116,114,0,128,125],
[92,87,98,94,85,91,90,82,0,108],
[96,87,92,84,97,95,99,85,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,127,126,108,122,103,117,111,115],
[98,0,106,110,97,100,90,111,105,98],
[83,104,0,120,99,103,97,113,97,100],
[84,100,90,0,93,104,79,105,109,107],
[102,113,111,117,0,124,106,115,118,107],
[88,110,107,106,86,0,103,90,107,92],
[107,120,113,131,104,107,0,115,117,104],
[93,99,97,105,95,120,95,0,108,92],
[99,105,113,101,92,103,93,102,0,103],
[95,112,110,103,103,118,106,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,114,104,114,111,98,101,100],
[101,0,102,108,100,114,105,96,110,99],
[92,108,0,118,99,108,101,101,103,97],
[96,102,92,0,101,107,102,94,93,100],
[106,110,111,109,0,115,110,101,96,95],
[96,96,102,103,95,0,105,94,95,92],
[99,105,109,108,100,105,0,102,99,93],
[112,114,109,116,109,116,108,0,98,102],
[109,100,107,117,114,115,111,112,0,105],
[110,111,113,110,115,118,117,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,97,107,97,95,106,99,95,108],
[122,0,114,109,114,101,108,110,103,106],
[113,96,0,107,94,92,100,94,102,103],
[103,101,103,0,95,95,102,98,97,96],
[113,96,116,115,0,96,116,108,109,112],
[115,109,118,115,114,0,100,100,105,115],
[104,102,110,108,94,110,0,108,103,99],
[111,100,116,112,102,110,102,0,93,105],
[115,107,108,113,101,105,107,117,0,112],
[102,104,107,114,98,95,111,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,121,109,84,106,105,100,108],
[120,0,101,129,108,114,128,112,112,113],
[103,109,0,128,113,102,110,128,124,122],
[89,81,82,0,112,79,88,93,113,88],
[101,102,97,98,0,75,99,109,104,122],
[126,96,108,131,135,0,122,124,132,121],
[104,82,100,122,111,88,0,85,117,105],
[105,98,82,117,101,86,125,0,109,96],
[110,98,86,97,106,78,93,101,0,102],
[102,97,88,122,88,89,105,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,114,107,107,103,112,107,113],
[97,0,118,113,112,123,109,108,101,102],
[93,92,0,99,104,103,101,97,98,93],
[96,97,111,0,92,100,97,106,86,92],
[103,98,106,118,0,104,106,100,100,91],
[103,87,107,110,106,0,104,102,86,105],
[107,101,109,113,104,106,0,110,94,82],
[98,102,113,104,110,108,100,0,104,109],
[103,109,112,124,110,124,116,106,0,101],
[97,108,117,118,119,105,128,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,127,107,124,112,124,102,122],
[97,0,110,96,86,103,96,107,92,93],
[96,100,0,78,77,111,86,94,86,86],
[83,114,132,0,99,119,113,96,117,102],
[103,124,133,111,0,122,104,124,99,119],
[86,107,99,91,88,0,85,104,100,106],
[98,114,124,97,106,125,0,105,107,125],
[86,103,116,114,86,106,105,0,90,113],
[108,118,124,93,111,110,103,120,0,114],
[88,117,124,108,91,104,85,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,106,100,94,107,104,106,109],
[98,0,105,112,100,101,111,118,117,105],
[97,105,0,103,106,102,109,120,109,106],
[104,98,107,0,98,98,101,105,106,106],
[110,110,104,112,0,105,110,122,117,110],
[116,109,108,112,105,0,117,120,125,123],
[103,99,101,109,100,93,0,99,108,109],
[106,92,90,105,88,90,111,0,109,91],
[104,93,101,104,93,85,102,101,0,114],
[101,105,104,104,100,87,101,119,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,82,112,99,117,118,114,96,115],
[111,0,81,106,104,125,98,115,103,117],
[128,129,0,127,100,136,95,115,113,132],
[98,104,83,0,102,119,95,99,87,121],
[111,106,110,108,0,127,97,106,106,119],
[93,85,74,91,83,0,60,110,89,103],
[92,112,115,115,113,150,0,106,104,131],
[96,95,95,111,104,100,104,0,101,113],
[114,107,97,123,104,121,106,109,0,108],
[95,93,78,89,91,107,79,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,129,100,74,99,92,99,90,101],
[118,0,122,114,110,110,106,109,119,93],
[81,88,0,82,79,75,73,95,82,75],
[110,96,128,0,108,111,102,117,108,99],
[136,100,131,102,0,96,108,119,102,94],
[111,100,135,99,114,0,101,102,108,96],
[118,104,137,108,102,109,0,115,109,105],
[111,101,115,93,91,108,95,0,91,92],
[120,91,128,102,108,102,101,119,0,92],
[109,117,135,111,116,114,105,118,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,129,107,109,95,94,122,131],
[108,0,118,126,109,132,86,100,121,120],
[93,92,0,99,100,87,78,97,96,102],
[81,84,111,0,80,92,82,86,89,96],
[103,101,110,130,0,109,108,98,101,136],
[101,78,123,118,101,0,83,81,122,98],
[115,124,132,128,102,127,0,119,134,130],
[116,110,113,124,112,129,91,0,105,112],
[88,89,114,121,109,88,76,105,0,100],
[79,90,108,114,74,112,80,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,144,94,109,112,126,143,160,143],
[81,0,97,112,111,81,96,82,162,98],
[66,113,0,95,93,65,128,111,112,97],
[116,98,115,0,63,114,144,112,161,163],
[101,99,117,147,0,117,148,117,163,133],
[98,129,145,96,93,0,176,128,192,146],
[84,114,82,66,62,34,0,50,163,117],
[67,128,99,98,93,82,160,0,194,83],
[50,48,98,49,47,18,47,16,0,34],
[67,112,113,47,77,64,93,127,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,87,139,121,99,100,99,118,128],
[120,0,123,133,123,136,120,99,120,133],
[123,87,0,150,127,109,94,111,125,120],
[71,77,60,0,69,70,73,66,76,102],
[89,87,83,141,0,107,78,77,113,129],
[111,74,101,140,103,0,92,79,104,130],
[110,90,116,137,132,118,0,115,98,140],
[111,111,99,144,133,131,95,0,115,136],
[92,90,85,134,97,106,112,95,0,128],
[82,77,90,108,81,80,70,74,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,112,109,97,96,105,92,89],
[101,0,97,104,100,88,99,102,105,92],
[103,113,0,107,91,91,109,104,100,92],
[98,106,103,0,96,94,90,93,108,99],
[101,110,119,114,0,105,99,119,108,94],
[113,122,119,116,105,0,106,114,125,112],
[114,111,101,120,111,104,0,114,115,99],
[105,108,106,117,91,96,96,0,108,100],
[118,105,110,102,102,85,95,102,0,95],
[121,118,118,111,116,98,111,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,125,119,87,116,117,107,120],
[104,0,111,114,94,98,91,99,113,110],
[89,99,0,125,93,84,103,116,97,102],
[85,96,85,0,130,101,83,94,123,108],
[91,116,117,80,0,108,97,112,113,123],
[123,112,126,109,102,0,108,119,120,122],
[94,119,107,127,113,102,0,126,118,107],
[93,111,94,116,98,91,84,0,116,103],
[103,97,113,87,97,90,92,94,0,91],
[90,100,108,102,87,88,103,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,107,118,107,113,109,103,103],
[105,0,101,114,108,108,108,112,107,103],
[98,109,0,97,113,106,112,117,103,102],
[103,96,113,0,112,109,106,102,106,110],
[92,102,97,98,0,92,93,95,96,96],
[103,102,104,101,118,0,113,106,106,105],
[97,102,98,104,117,97,0,106,111,97],
[101,98,93,108,115,104,104,0,99,101],
[107,103,107,104,114,104,99,111,0,109],
[107,107,108,100,114,105,113,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,123,145,114,117,97,107,117],
[96,0,103,86,99,83,91,74,91,91],
[108,107,0,118,117,91,116,97,115,121],
[87,124,92,0,111,91,99,78,105,102],
[65,111,93,99,0,88,99,87,107,108],
[96,127,119,119,122,0,113,109,118,122],
[93,119,94,111,111,97,0,84,110,117],
[113,136,113,132,123,101,126,0,135,125],
[103,119,95,105,103,92,100,75,0,102],
[93,119,89,108,102,88,93,85,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,120,114,124,89,88,113,104],
[103,0,97,111,102,119,97,93,111,99],
[113,113,0,123,118,115,104,111,115,120],
[90,99,87,0,109,94,97,87,105,84],
[96,108,92,101,0,105,90,99,105,101],
[86,91,95,116,105,0,90,93,95,85],
[121,113,106,113,120,120,0,101,114,104],
[122,117,99,123,111,117,109,0,117,101],
[97,99,95,105,105,115,96,93,0,99],
[106,111,90,126,109,125,106,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,111,112,99,113,111,117,106],
[98,0,110,106,116,112,120,109,99,97],
[105,100,0,107,111,99,109,110,103,92],
[99,104,103,0,113,95,111,98,89,98],
[98,94,99,97,0,100,103,87,87,94],
[111,98,111,115,110,0,125,103,107,98],
[97,90,101,99,107,85,0,97,98,100],
[99,101,100,112,123,107,113,0,95,91],
[93,111,107,121,123,103,112,115,0,100],
[104,113,118,112,116,112,110,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,109,113,119,117,118,123,100],
[91,0,107,85,107,101,106,112,111,92],
[94,103,0,93,115,112,116,110,113,99],
[101,125,117,0,123,117,119,115,117,110],
[97,103,95,87,0,106,112,114,110,102],
[91,109,98,93,104,0,102,106,125,108],
[93,104,94,91,98,108,0,106,95,100],
[92,98,100,95,96,104,104,0,97,89],
[87,99,97,93,100,85,115,113,0,97],
[110,118,111,100,108,102,110,121,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,104,123,109,121,118,108,120],
[100,0,123,102,138,117,112,99,112,97],
[89,87,0,84,115,103,115,103,97,87],
[106,108,126,0,115,115,104,115,116,113],
[87,72,95,95,0,93,92,101,83,106],
[101,93,107,95,117,0,113,98,111,101],
[89,98,95,106,118,97,0,85,101,97],
[92,111,107,95,109,112,125,0,103,113],
[102,98,113,94,127,99,109,107,0,114],
[90,113,123,97,104,109,113,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,114,98,107,116,95,104,106],
[104,0,108,115,101,107,97,103,106,100],
[109,102,0,116,110,115,125,104,106,110],
[96,95,94,0,103,98,111,99,89,106],
[112,109,100,107,0,108,107,108,81,113],
[103,103,95,112,102,0,96,96,91,99],
[94,113,85,99,103,114,0,108,85,104],
[115,107,106,111,102,114,102,0,97,114],
[106,104,104,121,129,119,125,113,0,113],
[104,110,100,104,97,111,106,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,110,118,101,86,120,89,87],
[103,0,108,115,96,96,97,116,98,83],
[107,102,0,120,113,92,94,105,90,91],
[100,95,90,0,105,111,102,104,97,94],
[92,114,97,105,0,88,110,95,89,92],
[109,114,118,99,122,0,99,114,92,114],
[124,113,116,108,100,111,0,124,106,98],
[90,94,105,106,115,96,86,0,92,103],
[121,112,120,113,121,118,104,118,0,112],
[123,127,119,116,118,96,112,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,110,106,111,121,116,107,107],
[105,0,104,104,115,112,109,108,111,108],
[102,106,0,110,112,108,115,112,111,108],
[100,106,100,0,96,102,103,107,111,103],
[104,95,98,114,0,109,106,114,111,104],
[99,98,102,108,101,0,102,110,112,103],
[89,101,95,107,104,108,0,112,103,99],
[94,102,98,103,96,100,98,0,101,105],
[103,99,99,99,99,98,107,109,0,100],
[103,102,102,107,106,107,111,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,121,101,108,107,97,112,98],
[110,0,103,118,100,90,96,90,119,113],
[111,107,0,128,106,99,101,82,121,105],
[89,92,82,0,93,90,83,69,86,76],
[109,110,104,117,0,109,98,98,115,100],
[102,120,111,120,101,0,109,97,118,112],
[103,114,109,127,112,101,0,101,119,108],
[113,120,128,141,112,113,109,0,118,105],
[98,91,89,124,95,92,91,92,0,89],
[112,97,105,134,110,98,102,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,94,91,115,97,100,104,102],
[107,0,110,91,110,112,114,103,102,114],
[102,100,0,87,91,109,111,95,105,106],
[116,119,123,0,113,115,121,116,101,113],
[119,100,119,97,0,118,118,103,109,110],
[95,98,101,95,92,0,107,100,92,104],
[113,96,99,89,92,103,0,104,107,108],
[110,107,115,94,107,110,106,0,103,105],
[106,108,105,109,101,118,103,107,0,114],
[108,96,104,97,100,106,102,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,103,101,112,94,102,100,101],
[103,0,102,109,122,113,111,108,106,103],
[117,108,0,104,104,115,111,95,101,102],
[107,101,106,0,110,113,106,101,103,107],
[109,88,106,100,0,111,102,98,106,97],
[98,97,95,97,99,0,100,96,105,97],
[116,99,99,104,108,110,0,111,104,100],
[108,102,115,109,112,114,99,0,104,103],
[110,104,109,107,104,105,106,106,0,107],
[109,107,108,103,113,113,110,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,110,111,121,103,104,115,98],
[105,0,100,109,94,111,99,106,99,90],
[115,110,0,106,101,112,100,110,108,115],
[100,101,104,0,91,117,100,109,101,110],
[99,116,109,119,0,134,111,114,121,110],
[89,99,98,93,76,0,88,105,96,102],
[107,111,110,110,99,122,0,116,121,112],
[106,104,100,101,96,105,94,0,106,96],
[95,111,102,109,89,114,89,104,0,105],
[112,120,95,100,100,108,98,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,96,96,111,95,87,92,104],
[117,0,111,93,103,128,96,99,99,100],
[110,99,0,100,105,114,95,100,90,99],
[114,117,110,0,104,121,112,116,102,109],
[114,107,105,106,0,109,96,97,100,107],
[99,82,96,89,101,0,95,82,100,99],
[115,114,115,98,114,115,0,107,100,119],
[123,111,110,94,113,128,103,0,107,103],
[118,111,120,108,110,110,110,103,0,107],
[106,110,111,101,103,111,91,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,105,109,122,92,97,105,103],
[110,0,106,109,109,116,108,106,119,104],
[120,104,0,115,110,116,102,114,115,113],
[105,101,95,0,108,117,91,99,109,105],
[101,101,100,102,0,108,96,88,108,96],
[88,94,94,93,102,0,99,98,99,94],
[118,102,108,119,114,111,0,116,109,113],
[113,104,96,111,122,112,94,0,119,98],
[105,91,95,101,102,111,101,91,0,100],
[107,106,97,105,114,116,97,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,111,116,94,111,112,104,121],
[99,0,106,100,112,99,97,115,113,109],
[106,104,0,106,122,98,108,115,108,127],
[99,110,104,0,114,107,98,105,107,116],
[94,98,88,96,0,88,96,98,103,108],
[116,111,112,103,122,0,111,113,113,120],
[99,113,102,112,114,99,0,105,100,125],
[98,95,95,105,112,97,105,0,107,115],
[106,97,102,103,107,97,110,103,0,128],
[89,101,83,94,102,90,85,95,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,126,116,121,106,108,110,101,106],
[102,0,118,112,115,108,102,116,108,96],
[84,92,0,116,109,109,84,99,109,93],
[94,98,94,0,98,96,82,101,99,96],
[89,95,101,112,0,84,87,101,97,98],
[104,102,101,114,126,0,98,105,101,100],
[102,108,126,128,123,112,0,119,114,119],
[100,94,111,109,109,105,91,0,101,101],
[109,102,101,111,113,109,96,109,0,108],
[104,114,117,114,112,110,91,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,121,110,109,125,118,109,103],
[105,0,102,113,94,121,112,106,102,105],
[105,108,0,107,97,89,119,107,100,85],
[89,97,103,0,96,104,112,113,90,107],
[100,116,113,114,0,115,117,121,104,116],
[101,89,121,106,95,0,121,119,109,122],
[85,98,91,98,93,89,0,101,93,81],
[92,104,103,97,89,91,109,0,92,98],
[101,108,110,120,106,101,117,118,0,112],
[107,105,125,103,94,88,129,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,111,105,122,142,107,103,121],
[94,0,113,79,80,106,124,93,82,113],
[102,97,0,94,94,108,114,99,79,111],
[99,131,116,0,112,109,136,116,106,128],
[105,130,116,98,0,116,138,102,95,119],
[88,104,102,101,94,0,123,83,94,83],
[68,86,96,74,72,87,0,83,82,99],
[103,117,111,94,108,127,127,0,112,115],
[107,128,131,104,115,116,128,98,0,131],
[89,97,99,82,91,127,111,95,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,94,110,107,99,107,81,105],
[97,0,97,104,114,101,102,106,99,115],
[109,113,0,105,111,103,103,110,101,110],
[116,106,105,0,112,116,97,111,92,117],
[100,96,99,98,0,94,94,107,94,111],
[103,109,107,94,116,0,108,119,100,116],
[111,108,107,113,116,102,0,119,113,110],
[103,104,100,99,103,91,91,0,94,103],
[129,111,109,118,116,110,97,116,0,129],
[105,95,100,93,99,94,100,107,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,110,113,105,94,116,84,106],
[103,0,85,105,103,110,111,115,87,93],
[118,125,0,123,121,136,134,111,112,98],
[100,105,87,0,93,113,111,107,94,96],
[97,107,89,117,0,119,115,111,91,100],
[105,100,74,97,91,0,100,110,105,98],
[116,99,76,99,95,110,0,116,91,88],
[94,95,99,103,99,100,94,0,86,81],
[126,123,98,116,119,105,119,124,0,98],
[104,117,112,114,110,112,122,129,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,106,105,105,135,105,89,91],
[118,0,102,104,104,118,132,101,105,105],
[111,108,0,106,99,132,147,104,105,111],
[104,106,104,0,91,89,115,92,96,103],
[105,106,111,119,0,121,143,115,107,112],
[105,92,78,121,89,0,123,93,102,103],
[75,78,63,95,67,87,0,65,79,75],
[105,109,106,118,95,117,145,0,104,103],
[121,105,105,114,103,108,131,106,0,101],
[119,105,99,107,98,107,135,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,71,106,73,84,84,70,73,73],
[128,0,105,145,90,91,137,122,126,113],
[139,105,0,149,103,108,117,136,116,136],
[104,65,61,0,83,82,60,95,70,61],
[137,120,107,127,0,97,87,62,107,115],
[126,119,102,128,113,0,106,103,114,104],
[126,73,93,150,123,104,0,105,103,102],
[140,88,74,115,148,107,105,0,106,104],
[137,84,94,140,103,96,107,104,0,70],
[137,97,74,149,95,106,108,106,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,115,102,110,112,99,108,101],
[103,0,107,111,114,108,94,103,117,116],
[103,103,0,106,108,105,112,104,106,111],
[95,99,104,0,110,97,102,98,103,112],
[108,96,102,100,0,99,104,96,102,112],
[100,102,105,113,111,0,95,105,103,112],
[98,116,98,108,106,115,0,113,110,115],
[111,107,106,112,114,105,97,0,119,117],
[102,93,104,107,108,107,100,91,0,110],
[109,94,99,98,98,98,95,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,128,105,118,122,115,119,117,114],
[96,0,97,107,110,106,102,89,94,104],
[82,113,0,103,103,116,97,100,112,114],
[105,103,107,0,106,105,103,105,104,124],
[92,100,107,104,0,94,99,103,86,107],
[88,104,94,105,116,0,102,103,107,117],
[95,108,113,107,111,108,0,107,111,109],
[91,121,110,105,107,107,103,0,101,113],
[93,116,98,106,124,103,99,109,0,113],
[96,106,96,86,103,93,101,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,78,110,136,120,109,151,110,118],
[82,0,81,90,104,99,79,121,109,99],
[132,129,0,130,116,100,109,152,132,139],
[100,120,80,0,93,78,80,123,88,118],
[74,106,94,117,0,109,73,127,96,107],
[90,111,110,132,101,0,136,141,110,127],
[101,131,101,130,137,74,0,123,120,140],
[59,89,58,87,83,69,87,0,76,79],
[100,101,78,122,114,100,90,134,0,121],
[92,111,71,92,103,83,70,131,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,127,111,113,110,98,112,96,118],
[104,0,128,112,122,114,98,108,115,128],
[83,82,0,92,94,91,89,93,94,107],
[99,98,118,0,116,89,117,113,116,116],
[97,88,116,94,0,108,101,94,86,114],
[100,96,119,121,102,0,106,102,99,100],
[112,112,121,93,109,104,0,104,101,124],
[98,102,117,97,116,108,106,0,106,110],
[114,95,116,94,124,111,109,104,0,118],
[92,82,103,94,96,110,86,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,99,98,100,102,102,99,101],
[111,0,104,100,102,101,101,103,91,103],
[112,106,0,124,103,107,114,106,107,101],
[111,110,86,0,95,100,103,93,101,98],
[112,108,107,115,0,98,102,106,97,108],
[110,109,103,110,112,0,115,108,95,101],
[108,109,96,107,108,95,0,113,103,101],
[108,107,104,117,104,102,97,0,93,105],
[111,119,103,109,113,115,107,117,0,104],
[109,107,109,112,102,109,109,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,94,103,99,103,96,115,91],
[103,0,107,96,110,96,103,92,106,101],
[102,103,0,99,107,106,103,98,109,103],
[116,114,111,0,116,102,104,97,112,112],
[107,100,103,94,0,92,94,88,112,99],
[111,114,104,108,118,0,106,110,115,112],
[107,107,107,106,116,104,0,103,106,103],
[114,118,112,113,122,100,107,0,128,105],
[95,104,101,98,98,95,104,82,0,99],
[119,109,107,98,111,98,107,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,111,112,108,119,105,120,106],
[104,0,134,115,111,107,125,111,121,124],
[102,76,0,96,95,91,115,92,103,105],
[99,95,114,0,108,115,126,96,110,120],
[98,99,115,102,0,103,116,96,106,109],
[102,103,119,95,107,0,118,106,109,113],
[91,85,95,84,94,92,0,92,93,108],
[105,99,118,114,114,104,118,0,110,115],
[90,89,107,100,104,101,117,100,0,105],
[104,86,105,90,101,97,102,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,180,91,119,90,90,91,149,60],
[89,0,148,120,149,89,118,150,148,118],
[30,62,0,61,60,31,59,121,119,0],
[119,90,149,0,149,59,89,149,118,88],
[91,61,150,61,0,31,61,121,59,60],
[120,121,179,151,179,0,149,150,179,89],
[120,92,151,121,149,61,0,150,179,89],
[119,60,89,61,89,60,60,0,119,89],
[61,62,91,92,151,31,31,91,0,61],
[150,92,210,122,150,121,121,121,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,105,0,210,105,105,210,0,105],
[210,0,105,105,210,105,105,210,0,105],
[105,105,0,0,210,105,105,105,0,0],
[210,105,210,0,210,105,210,210,105,105],
[0,0,0,0,0,0,0,0,0,0],
[105,105,105,105,210,0,105,210,0,105],
[105,105,105,0,210,105,0,210,0,105],
[0,0,105,0,210,0,0,0,0,105],
[210,210,210,105,210,210,210,210,0,105],
[105,105,210,105,210,105,105,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,104,95,102,106,99,95,116],
[95,0,100,102,93,95,98,109,91,109],
[105,110,0,113,110,116,109,108,101,118],
[106,108,97,0,106,109,107,113,104,108],
[115,117,100,104,0,111,110,110,90,102],
[108,115,94,101,99,0,107,103,94,90],
[104,112,101,103,100,103,0,100,85,98],
[111,101,102,97,100,107,110,0,98,102],
[115,119,109,106,120,116,125,112,0,104],
[94,101,92,102,108,120,112,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,110,112,92,95,93,98,100],
[107,0,106,103,109,98,110,103,105,107],
[109,104,0,106,120,95,114,110,111,111],
[100,107,104,0,104,106,103,109,102,106],
[98,101,90,106,0,90,98,94,98,109],
[118,112,115,104,120,0,112,112,107,118],
[115,100,96,107,112,98,0,100,105,111],
[117,107,100,101,116,98,110,0,92,111],
[112,105,99,108,112,103,105,118,0,106],
[110,103,99,104,101,92,99,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,104,108,109,107,96,96,98],
[104,0,93,110,92,97,115,97,97,88],
[105,117,0,109,103,111,124,115,101,97],
[106,100,101,0,97,104,114,107,98,94],
[102,118,107,113,0,115,115,107,109,97],
[101,113,99,106,95,0,107,100,95,85],
[103,95,86,96,95,103,0,95,100,93],
[114,113,95,103,103,110,115,0,99,94],
[114,113,109,112,101,115,110,111,0,106],
[112,122,113,116,113,125,117,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,120,102,120,112,121,109,111,92],
[88,0,124,97,121,121,129,111,112,89],
[90,86,0,102,111,110,120,98,111,84],
[108,113,108,0,105,116,121,108,110,108],
[90,89,99,105,0,99,132,97,110,94],
[98,89,100,94,111,0,124,106,106,94],
[89,81,90,89,78,86,0,91,87,70],
[101,99,112,102,113,104,119,0,111,108],
[99,98,99,100,100,104,123,99,0,83],
[118,121,126,102,116,116,140,102,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,100,85,115,101,99,115,113],
[103,0,109,112,103,90,99,118,99,105],
[112,101,0,99,98,113,111,108,112,110],
[110,98,111,0,105,102,126,101,116,120],
[125,107,112,105,0,117,110,107,119,128],
[95,120,97,108,93,0,111,101,125,124],
[109,111,99,84,100,99,0,84,117,102],
[111,92,102,109,103,109,126,0,110,118],
[95,111,98,94,91,85,93,100,0,105],
[97,105,100,90,82,86,108,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,101,126,126,109,112,116,100],
[104,0,114,107,114,116,116,101,106,94],
[94,96,0,99,101,109,100,102,119,85],
[109,103,111,0,121,105,104,115,117,99],
[84,96,109,89,0,110,103,94,108,92],
[84,94,101,105,100,0,99,103,107,96],
[101,94,110,106,107,111,0,102,112,97],
[98,109,108,95,116,107,108,0,112,106],
[94,104,91,93,102,103,98,98,0,81],
[110,116,125,111,118,114,113,104,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,90,101,107,106,97,111,105],
[114,0,104,97,96,110,119,110,115,110],
[109,106,0,101,105,108,116,116,115,104],
[120,113,109,0,105,112,123,107,116,109],
[109,114,105,105,0,110,119,106,115,110],
[103,100,102,98,100,0,109,97,111,104],
[104,91,94,87,91,101,0,94,94,102],
[113,100,94,103,104,113,116,0,115,118],
[99,95,95,94,95,99,116,95,0,94],
[105,100,106,101,100,106,108,92,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,75,93,83,113,99,110,129,102],
[129,0,108,148,115,104,107,84,103,112],
[135,102,0,112,120,103,127,90,111,119],
[117,62,98,0,98,93,97,88,90,109],
[127,95,90,112,0,103,117,91,122,122],
[97,106,107,117,107,0,104,128,100,129],
[111,103,83,113,93,106,0,112,149,116],
[100,126,120,122,119,82,98,0,127,94],
[81,107,99,120,88,110,61,83,0,91],
[108,98,91,101,88,81,94,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,94,106,82,141,94,121,83],
[89,0,94,109,85,81,100,79,80,72],
[111,116,0,90,72,91,107,87,107,80],
[116,101,120,0,105,142,102,118,109,105],
[104,125,138,105,0,123,120,86,111,95],
[128,129,119,68,87,0,114,64,100,100],
[69,110,103,108,90,96,0,90,91,84],
[116,131,123,92,124,146,120,0,121,134],
[89,130,103,101,99,110,119,89,0,99],
[127,138,130,105,115,110,126,76,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,85,69,119,79,118,123,84,109],
[110,0,84,95,100,80,136,95,103,124],
[125,126,0,99,136,115,146,130,100,117],
[141,115,111,0,108,94,146,138,112,114],
[91,110,74,102,0,75,124,107,101,109],
[131,130,95,116,135,0,137,94,94,139],
[92,74,64,64,86,73,0,90,66,88],
[87,115,80,72,103,116,120,0,66,115],
[126,107,110,98,109,116,144,144,0,118],
[101,86,93,96,101,71,122,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,94,113,113,98,113,95,95],
[96,0,114,113,56,76,78,114,134,96],
[97,96,0,115,96,112,117,133,136,135],
[116,97,95,0,77,75,97,115,97,117],
[97,154,114,133,0,94,118,132,133,155],
[97,134,98,135,116,0,118,76,98,117],
[112,132,93,113,92,92,0,113,132,113],
[97,96,77,95,78,134,97,0,98,134],
[115,76,74,113,77,112,78,112,0,152],
[115,114,75,93,55,93,97,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,118,116,112,111,118,103,112],
[103,0,106,99,102,107,107,101,109,106],
[94,104,0,101,104,98,95,100,108,101],
[92,111,109,0,103,110,100,112,107,92],
[94,108,106,107,0,125,103,100,101,107],
[98,103,112,100,85,0,96,107,102,96],
[99,103,115,110,107,114,0,105,110,113],
[92,109,110,98,110,103,105,0,109,108],
[107,101,102,103,109,108,100,101,0,103],
[98,104,109,118,103,114,97,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,111,103,102,108,102,90,104],
[114,0,119,117,107,94,102,86,97,104],
[95,91,0,103,105,88,101,79,80,107],
[99,93,107,0,106,100,90,85,77,92],
[107,103,105,104,0,92,99,75,87,100],
[108,116,122,110,118,0,118,106,100,110],
[102,108,109,120,111,92,0,89,90,105],
[108,124,131,125,135,104,121,0,111,112],
[120,113,130,133,123,110,120,99,0,128],
[106,106,103,118,110,100,105,98,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,117,103,107,110,104,97,110],
[119,0,111,123,104,119,123,115,105,124],
[106,99,0,103,99,106,105,92,95,114],
[93,87,107,0,95,93,86,92,87,95],
[107,106,111,115,0,101,95,109,93,115],
[103,91,104,117,109,0,117,93,101,107],
[100,87,105,124,115,93,0,82,97,112],
[106,95,118,118,101,117,128,0,102,123],
[113,105,115,123,117,109,113,108,0,114],
[100,86,96,115,95,103,98,87,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,107,97,105,99,90,108,101],
[111,0,100,106,95,107,105,127,112,116],
[117,110,0,119,129,118,100,121,113,114],
[103,104,91,0,81,110,123,111,109,109],
[113,115,81,129,0,94,106,100,108,117],
[105,103,92,100,116,0,104,102,93,102],
[111,105,110,87,104,106,0,116,104,106],
[120,83,89,99,110,108,94,0,99,104],
[102,98,97,101,102,117,106,111,0,106],
[109,94,96,101,93,108,104,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,116,114,114,103,105,103,107],
[89,0,108,99,82,85,101,95,97,103],
[101,102,0,101,108,102,97,107,118,118],
[94,111,109,0,97,100,98,111,100,107],
[96,128,102,113,0,111,100,102,91,107],
[96,125,108,110,99,0,103,119,110,121],
[107,109,113,112,110,107,0,106,124,100],
[105,115,103,99,108,91,104,0,96,117],
[107,113,92,110,119,100,86,114,0,105],
[103,107,92,103,103,89,110,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,114,102,98,111,96,100,103],
[100,0,99,106,85,98,98,94,92,99],
[108,111,0,110,106,104,106,103,107,112],
[96,104,100,0,87,98,109,88,97,92],
[108,125,104,123,0,106,111,107,114,114],
[112,112,106,112,104,0,105,107,102,109],
[99,112,104,101,99,105,0,97,97,111],
[114,116,107,122,103,103,113,0,111,115],
[110,118,103,113,96,108,113,99,0,112],
[107,111,98,118,96,101,99,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,107,109,83,84,96,95,94],
[112,0,124,106,116,114,105,129,123,106],
[111,86,0,98,101,106,92,116,105,102],
[103,104,112,0,134,104,102,106,107,96],
[101,94,109,76,0,86,91,95,102,93],
[127,96,104,106,124,0,94,94,112,107],
[126,105,118,108,119,116,0,112,95,122],
[114,81,94,104,115,116,98,0,115,97],
[115,87,105,103,108,98,115,95,0,90],
[116,104,108,114,117,103,88,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,103,111,109,97,107,106,112],
[103,0,85,89,88,84,95,89,101,90],
[116,125,0,112,97,106,120,109,102,113],
[107,121,98,0,101,108,103,119,103,102],
[99,122,113,109,0,115,95,100,114,105],
[101,126,104,102,95,0,100,105,101,107],
[113,115,90,107,115,110,0,101,102,110],
[103,121,101,91,110,105,109,0,109,101],
[104,109,108,107,96,109,108,101,0,108],
[98,120,97,108,105,103,100,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,110,115,115,105,116,123,112],
[100,0,106,111,114,110,99,122,114,108],
[97,104,0,102,114,113,102,115,112,114],
[100,99,108,0,115,116,106,113,111,110],
[95,96,96,95,0,108,103,112,105,103],
[95,100,97,94,102,0,93,112,102,102],
[105,111,108,104,107,117,0,120,112,108],
[94,88,95,97,98,98,90,0,101,100],
[87,96,98,99,105,108,98,109,0,105],
[98,102,96,100,107,108,102,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,112,105,116,119,134,110,123],
[117,0,118,114,103,117,115,125,119,120],
[89,92,0,102,98,95,91,117,111,111],
[98,96,108,0,95,102,105,122,107,108],
[105,107,112,115,0,119,106,121,101,105],
[94,93,115,108,91,0,107,112,105,97],
[91,95,119,105,104,103,0,111,106,114],
[76,85,93,88,89,98,99,0,96,103],
[100,91,99,103,109,105,104,114,0,113],
[87,90,99,102,105,113,96,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,89,93,114,107,97,101,112,114],
[102,0,93,86,107,120,106,91,101,117],
[121,117,0,110,113,130,101,102,115,135],
[117,124,100,0,123,121,113,114,113,127],
[96,103,97,87,0,112,97,107,115,109],
[103,90,80,89,98,0,88,98,100,124],
[113,104,109,97,113,122,0,123,105,114],
[109,119,108,96,103,112,87,0,109,124],
[98,109,95,97,95,110,105,101,0,124],
[96,93,75,83,101,86,96,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,104,100,91,97,93,105,103],
[110,0,113,126,110,105,99,106,115,113],
[103,97,0,112,101,105,112,104,110,100],
[106,84,98,0,99,108,91,88,99,103],
[110,100,109,111,0,106,107,106,108,116],
[119,105,105,102,104,0,97,87,110,101],
[113,111,98,119,103,113,0,98,105,111],
[117,104,106,122,104,123,112,0,113,114],
[105,95,100,111,102,100,105,97,0,96],
[107,97,110,107,94,109,99,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,93,102,97,105,89,104,107,96],
[122,0,107,117,107,121,112,124,104,120],
[117,103,0,105,99,117,97,109,101,112],
[108,93,105,0,101,108,96,120,93,99],
[113,103,111,109,0,118,100,118,109,118],
[105,89,93,102,92,0,97,113,93,109],
[121,98,113,114,110,113,0,122,102,118],
[106,86,101,90,92,97,88,0,90,97],
[103,106,109,117,101,117,108,120,0,111],
[114,90,98,111,92,101,92,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,94,119,109,108,100,96,111],
[93,0,102,103,106,101,96,97,87,102],
[95,108,0,99,104,94,103,109,106,97],
[116,107,111,0,118,117,110,105,94,116],
[91,104,106,92,0,104,98,95,93,112],
[101,109,116,93,106,0,94,109,93,96],
[102,114,107,100,112,116,0,98,109,121],
[110,113,101,105,115,101,112,0,94,114],
[114,123,104,116,117,117,101,116,0,125],
[99,108,113,94,98,114,89,96,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,99,93,83,121,100,104,115],
[118,0,97,120,101,100,112,99,113,109],
[116,113,0,103,110,118,131,107,115,124],
[111,90,107,0,97,97,107,88,99,102],
[117,109,100,113,0,98,123,107,108,123],
[127,110,92,113,112,0,119,107,114,117],
[89,98,79,103,87,91,0,91,95,105],
[110,111,103,122,103,103,119,0,119,128],
[106,97,95,111,102,96,115,91,0,116],
[95,101,86,108,87,93,105,82,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,163,117,93,95,140,117,139,141],
[25,0,139,24,23,25,49,94,67,71],
[47,71,0,24,47,48,48,69,46,70],
[93,186,186,0,139,117,139,162,92,140],
[117,187,163,71,0,49,140,116,116,140],
[115,185,162,93,161,0,138,137,138,115],
[70,161,162,71,70,72,0,116,114,93],
[93,116,141,48,94,73,94,0,91,119],
[71,143,164,118,94,72,96,119,0,95],
[69,139,140,70,70,95,117,91,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,110,102,104,81,91,101,87],
[110,0,101,116,103,96,99,110,111,94],
[99,109,0,114,98,104,91,93,99,88],
[100,94,96,0,93,93,90,89,97,93],
[108,107,112,117,0,102,106,96,103,94],
[106,114,106,117,108,0,90,110,101,95],
[129,111,119,120,104,120,0,109,122,102],
[119,100,117,121,114,100,101,0,114,106],
[109,99,111,113,107,109,88,96,0,98],
[123,116,122,117,116,115,108,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,95,82,103,86,97,103,101],
[116,0,99,104,104,100,95,98,93,118],
[106,111,0,99,94,110,107,93,114,108],
[115,106,111,0,101,116,86,95,105,110],
[128,106,116,109,0,126,94,106,117,105],
[107,110,100,94,84,0,103,89,98,99],
[124,115,103,124,116,107,0,118,101,113],
[113,112,117,115,104,121,92,0,112,117],
[107,117,96,105,93,112,109,98,0,112],
[109,92,102,100,105,111,97,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,99,107,119,107,100,100,97],
[116,0,113,102,104,112,113,95,103,103],
[101,97,0,96,104,105,107,95,90,93],
[111,108,114,0,116,118,109,101,103,101],
[103,106,106,94,0,107,113,102,101,96],
[91,98,105,92,103,0,109,85,102,94],
[103,97,103,101,97,101,0,100,99,97],
[110,115,115,109,108,125,110,0,112,97],
[110,107,120,107,109,108,111,98,0,107],
[113,107,117,109,114,116,113,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,104,112,107,105,112,106,94],
[111,0,88,113,120,116,121,117,109,91],
[101,122,0,128,131,121,119,141,113,122],
[106,97,82,0,101,101,104,88,90,87],
[98,90,79,109,0,104,93,98,97,86],
[103,94,89,109,106,0,109,107,101,95],
[105,89,91,106,117,101,0,108,106,108],
[98,93,69,122,112,103,102,0,104,87],
[104,101,97,120,113,109,104,106,0,94],
[116,119,88,123,124,115,102,123,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,118,97,81,87,118,88,92],
[100,0,106,115,120,109,104,116,111,114],
[114,104,0,126,109,102,104,123,119,108],
[92,95,84,0,101,83,107,118,102,86],
[113,90,101,109,0,98,106,127,108,106],
[129,101,108,127,112,0,111,130,123,120],
[123,106,106,103,104,99,0,132,99,98],
[92,94,87,92,83,80,78,0,93,92],
[122,99,91,108,102,87,111,117,0,104],
[118,96,102,124,104,90,112,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,105,114,110,104,122,117,117],
[95,0,106,101,109,104,102,97,104,101],
[101,104,0,103,105,105,102,109,101,116],
[105,109,107,0,113,109,104,111,111,121],
[96,101,105,97,0,96,96,113,97,109],
[100,106,105,101,114,0,99,107,107,114],
[106,108,108,106,114,111,0,122,103,107],
[88,113,101,99,97,103,88,0,105,103],
[93,106,109,99,113,103,107,105,0,106],
[93,109,94,89,101,96,103,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,108,82,99,120,87,82,97],
[104,0,103,97,85,106,110,75,83,92],
[103,107,0,114,100,114,126,104,106,115],
[102,113,96,0,103,125,144,100,102,96],
[128,125,110,107,0,120,118,106,86,98],
[111,104,96,85,90,0,96,79,85,95],
[90,100,84,66,92,114,0,97,95,99],
[123,135,106,110,104,131,113,0,108,111],
[128,127,104,108,124,125,115,102,0,121],
[113,118,95,114,112,115,111,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,106,111,107,86,109,100,97,114],
[85,0,92,84,91,88,87,97,86,94],
[104,118,0,103,95,90,86,93,116,105],
[99,126,107,0,99,103,92,109,99,113],
[103,119,115,111,0,107,109,119,110,99],
[124,122,120,107,103,0,126,107,120,126],
[101,123,124,118,101,84,0,99,94,123],
[110,113,117,101,91,103,111,0,102,115],
[113,124,94,111,100,90,116,108,0,121],
[96,116,105,97,111,84,87,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,108,105,98,124,106,104,103],
[97,0,99,102,100,88,114,105,102,93],
[101,111,0,97,98,101,107,98,103,105],
[102,108,113,0,97,99,113,105,102,105],
[105,110,112,113,0,106,119,108,108,118],
[112,122,109,111,104,0,112,122,98,112],
[86,96,103,97,91,98,0,101,94,89],
[104,105,112,105,102,88,109,0,109,96],
[106,108,107,108,102,112,116,101,0,104],
[107,117,105,105,92,98,121,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,107,111,120,116,105,108,99],
[102,0,97,111,112,115,97,114,102,94],
[99,113,0,97,118,106,112,123,102,92],
[103,99,113,0,119,106,113,121,106,87],
[99,98,92,91,0,99,107,108,102,85],
[90,95,104,104,111,0,109,109,91,99],
[94,113,98,97,103,101,0,101,109,86],
[105,96,87,89,102,101,109,0,93,83],
[102,108,108,104,108,119,101,117,0,107],
[111,116,118,123,125,111,124,127,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,76,93,93,78,122,123,107,108],
[120,0,62,94,76,77,78,122,78,78],
[134,148,0,104,119,91,121,164,92,151],
[117,116,106,0,136,119,105,135,105,133],
[117,134,91,74,0,105,91,137,107,121],
[132,133,119,91,105,0,105,120,90,119],
[88,132,89,105,119,105,0,137,74,122],
[87,88,46,75,73,90,73,0,61,91],
[103,132,118,105,103,120,136,149,0,106],
[102,132,59,77,89,91,88,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,83,74,77,98,110,79,96,80],
[149,0,131,108,109,133,116,119,124,105],
[127,79,0,122,104,102,109,99,121,92],
[136,102,88,0,95,141,111,99,112,90],
[133,101,106,115,0,126,129,109,128,104],
[112,77,108,69,84,0,101,87,106,83],
[100,94,101,99,81,109,0,86,97,96],
[131,91,111,111,101,123,124,0,101,78],
[114,86,89,98,82,104,113,109,0,90],
[130,105,118,120,106,127,114,132,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,101,105,99,118,110,115,99],
[106,0,116,107,106,110,118,102,122,105],
[99,94,0,101,104,87,104,100,101,87],
[109,103,109,0,110,106,118,118,116,114],
[105,104,106,100,0,96,116,102,115,109],
[111,100,123,104,114,0,107,103,118,106],
[92,92,106,92,94,103,0,90,108,99],
[100,108,110,92,108,107,120,0,115,99],
[95,88,109,94,95,92,102,95,0,96],
[111,105,123,96,101,104,111,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,91,106,116,114,104,107,101],
[102,0,105,99,105,105,99,104,108,117],
[97,105,0,112,104,100,111,101,102,120],
[119,111,98,0,109,115,115,107,123,123],
[104,105,106,101,0,97,100,108,108,105],
[94,105,110,95,113,0,98,101,101,111],
[96,111,99,95,110,112,0,110,101,94],
[106,106,109,103,102,109,100,0,103,103],
[103,102,108,87,102,109,109,107,0,113],
[109,93,90,87,105,99,116,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,116,114,133,118,127,101,117,124],
[86,0,106,91,86,85,93,101,97,85],
[94,104,0,86,84,84,102,105,100,103],
[96,119,124,0,103,126,129,105,114,92],
[77,124,126,107,0,101,102,113,101,92],
[92,125,126,84,109,0,112,105,103,98],
[83,117,108,81,108,98,0,100,93,90],
[109,109,105,105,97,105,110,0,115,103],
[93,113,110,96,109,107,117,95,0,84],
[86,125,107,118,118,112,120,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,102,114,106,107,90,111,114],
[102,0,96,79,84,122,105,98,105,98],
[108,114,0,104,103,113,107,106,113,112],
[108,131,106,0,103,120,118,98,95,118],
[96,126,107,107,0,112,133,98,111,128],
[104,88,97,90,98,0,102,105,107,113],
[103,105,103,92,77,108,0,93,96,107],
[120,112,104,112,112,105,117,0,96,130],
[99,105,97,115,99,103,114,114,0,113],
[96,112,98,92,82,97,103,80,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,98,111,101,98,123,108,104],
[97,0,110,98,107,106,94,110,91,109],
[97,100,0,112,108,106,95,111,98,103],
[112,112,98,0,120,114,101,114,109,109],
[99,103,102,90,0,99,93,113,96,99],
[109,104,104,96,111,0,106,115,99,107],
[112,116,115,109,117,104,0,125,104,107],
[87,100,99,96,97,95,85,0,94,99],
[102,119,112,101,114,111,106,116,0,109],
[106,101,107,101,111,103,103,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,106,52,106,104,105,107,122,69],
[85,0,106,87,88,105,106,125,87,87],
[104,104,0,49,89,105,104,71,69,69],
[158,123,161,0,106,174,123,105,124,124],
[104,122,121,104,0,136,103,124,103,102],
[106,105,105,36,74,0,141,89,88,67],
[105,104,106,87,107,69,0,71,105,85],
[103,85,139,105,86,121,139,0,103,87],
[88,123,141,86,107,122,105,107,0,69],
[141,123,141,86,108,143,125,123,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,118,132,114,106,105,92,80],
[100,0,126,112,127,101,92,106,104,106],
[96,84,0,91,90,86,74,86,72,83],
[92,98,119,0,109,77,86,97,87,92],
[78,83,120,101,0,108,93,108,85,92],
[96,109,124,133,102,0,94,122,89,92],
[104,118,136,124,117,116,0,137,106,105],
[105,104,124,113,102,88,73,0,81,105],
[118,106,138,123,125,121,104,129,0,97],
[130,104,127,118,118,118,105,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,91,112,78,95,127,89,91],
[95,0,106,72,91,70,118,117,103,84],
[114,104,0,68,113,68,116,114,101,93],
[119,138,142,0,151,104,129,118,116,119],
[98,119,97,59,0,81,108,117,90,82],
[132,140,142,106,129,0,118,118,114,96],
[115,92,94,81,102,92,0,90,103,106],
[83,93,96,92,93,92,120,0,104,107],
[121,107,109,94,120,96,107,106,0,99],
[119,126,117,91,128,114,104,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,108,87,91,91,93,90,106],
[108,0,109,95,100,93,90,91,101,91],
[108,101,0,92,99,106,96,109,97,98],
[102,115,118,0,98,106,96,101,96,105],
[123,110,111,112,0,105,110,107,104,107],
[119,117,104,104,105,0,96,103,113,107],
[119,120,114,114,100,114,0,107,101,118],
[117,119,101,109,103,107,103,0,113,102],
[120,109,113,114,106,97,109,97,0,104],
[104,119,112,105,103,103,92,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,113,102,111,99,124,110,98,125],
[86,0,102,104,85,97,121,95,92,108],
[97,108,0,100,91,98,98,97,93,112],
[108,106,110,0,110,96,108,114,102,121],
[99,125,119,100,0,111,113,95,103,112],
[111,113,112,114,99,0,118,105,90,123],
[86,89,112,102,97,92,0,97,89,102],
[100,115,113,96,115,105,113,0,106,119],
[112,118,117,108,107,120,121,104,0,124],
[85,102,98,89,98,87,108,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,112,104,102,115,119,112,114],
[99,0,106,106,103,101,106,109,107,105],
[106,104,0,113,106,106,112,117,113,112],
[98,104,97,0,95,94,101,103,110,106],
[106,107,104,115,0,106,109,118,114,108],
[108,109,104,116,104,0,118,121,115,122],
[95,104,98,109,101,92,0,107,103,102],
[91,101,93,107,92,89,103,0,96,103],
[98,103,97,100,96,95,107,114,0,104],
[96,105,98,104,102,88,108,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,70,76,112,124,46,103,66,82],
[114,0,78,124,107,94,77,80,100,99],
[140,132,0,130,127,124,109,102,121,116],
[134,86,80,0,125,103,57,81,94,87],
[98,103,83,85,0,113,63,95,102,104],
[86,116,86,107,97,0,63,77,77,85],
[164,133,101,153,147,147,0,116,140,113],
[107,130,108,129,115,133,94,0,91,100],
[144,110,89,116,108,133,70,119,0,122],
[128,111,94,123,106,125,97,110,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,103,96,111,102,106,109,98],
[107,0,93,105,104,112,110,114,112,92],
[109,117,0,108,100,103,105,113,115,88],
[107,105,102,0,95,106,113,120,118,107],
[114,106,110,115,0,107,104,120,104,105],
[99,98,107,104,103,0,100,109,99,106],
[108,100,105,97,106,110,0,97,109,107],
[104,96,97,90,90,101,113,0,95,91],
[101,98,95,92,106,111,101,115,0,104],
[112,118,122,103,105,104,103,119,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,105,98,104,93,85,109,94],
[114,0,106,107,105,109,102,96,107,105],
[107,104,0,100,108,120,97,101,106,106],
[105,103,110,0,99,100,91,97,101,95],
[112,105,102,111,0,125,101,105,113,98],
[106,101,90,110,85,0,93,85,109,94],
[117,108,113,119,109,117,0,108,113,102],
[125,114,109,113,105,125,102,0,120,114],
[101,103,104,109,97,101,97,90,0,89],
[116,105,104,115,112,116,108,96,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,104,107,96,113,100,93,110],
[118,0,101,106,100,100,112,98,113,102],
[117,109,0,106,129,105,115,112,123,118],
[106,104,104,0,97,97,111,87,107,105],
[103,110,81,113,0,96,110,91,103,112],
[114,110,105,113,114,0,112,101,112,122],
[97,98,95,99,100,98,0,99,84,107],
[110,112,98,123,119,109,111,0,114,129],
[117,97,87,103,107,98,126,96,0,106],
[100,108,92,105,98,88,103,81,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,113,103,109,112,106,102,110],
[104,0,120,131,118,129,119,116,127,118],
[116,90,0,110,109,111,123,101,75,126],
[97,79,100,0,97,105,94,91,77,92],
[107,92,101,113,0,127,110,118,85,105],
[101,81,99,105,83,0,81,105,105,104],
[98,91,87,116,100,129,0,114,97,96],
[104,94,109,119,92,105,96,0,90,111],
[108,83,135,133,125,105,113,120,0,109],
[100,92,84,118,105,106,114,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,113,120,139,128,116,127,99],
[100,0,111,106,105,111,121,88,115,101],
[88,99,0,92,91,113,117,89,93,90],
[97,104,118,0,98,125,103,103,114,96],
[90,105,119,112,0,115,121,106,136,109],
[71,99,97,85,95,0,96,70,112,93],
[82,89,93,107,89,114,0,77,94,96],
[94,122,121,107,104,140,133,0,123,109],
[83,95,117,96,74,98,116,87,0,105],
[111,109,120,114,101,117,114,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,89,118,103,87,112,97,99],
[102,0,104,86,103,91,87,104,96,94],
[102,106,0,81,101,99,102,110,107,96],
[121,124,129,0,125,106,125,126,102,113],
[92,107,109,85,0,106,104,91,102,79],
[107,119,111,104,104,0,118,102,112,90],
[123,123,108,85,106,92,0,125,115,101],
[98,106,100,84,119,108,85,0,95,84],
[113,114,103,108,108,98,95,115,0,94],
[111,116,114,97,131,120,109,126,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,111,94,96,99,107,109,91],
[111,0,106,104,101,101,101,99,106,101],
[103,104,0,91,102,94,120,98,109,100],
[99,106,119,0,93,107,114,108,107,119],
[116,109,108,117,0,111,112,121,114,93],
[114,109,116,103,99,0,98,102,98,97],
[111,109,90,96,98,112,0,101,108,108],
[103,111,112,102,89,108,109,0,113,107],
[101,104,101,103,96,112,102,97,0,79],
[119,109,110,91,117,113,102,103,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,119,113,115,114,105,120,104,105],
[112,0,115,115,114,109,100,108,111,108],
[91,95,0,97,113,103,93,104,96,100],
[97,95,113,0,111,113,91,112,104,99],
[95,96,97,99,0,98,95,99,87,85],
[96,101,107,97,112,0,96,103,96,103],
[105,110,117,119,115,114,0,112,102,105],
[90,102,106,98,111,107,98,0,101,103],
[106,99,114,106,123,114,108,109,0,106],
[105,102,110,111,125,107,105,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,109,103,97,97,112,113,104],
[95,0,102,113,106,95,105,106,117,104],
[98,108,0,117,95,94,106,93,114,103],
[101,97,93,0,79,94,109,102,105,95],
[107,104,115,131,0,116,114,112,109,109],
[113,115,116,116,94,0,101,109,118,105],
[113,105,104,101,96,109,0,100,106,100],
[98,104,117,108,98,101,110,0,104,103],
[97,93,96,105,101,92,104,106,0,104],
[106,106,107,115,101,105,110,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,107,101,117,109,114,114,122],
[111,0,115,103,104,115,109,103,106,110],
[98,95,0,99,103,106,105,101,110,110],
[103,107,111,0,116,119,109,104,103,120],
[109,106,107,94,0,119,103,114,102,105],
[93,95,104,91,91,0,97,96,107,105],
[101,101,105,101,107,113,0,97,103,110],
[96,107,109,106,96,114,113,0,114,121],
[96,104,100,107,108,103,107,96,0,110],
[88,100,100,90,105,105,100,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,117,109,109,100,95,102,118],
[97,0,119,121,105,110,110,109,103,114],
[105,91,0,109,102,109,104,99,102,115],
[93,89,101,0,98,96,93,91,89,100],
[101,105,108,112,0,116,112,110,99,122],
[101,100,101,114,94,0,106,96,104,109],
[110,100,106,117,98,104,0,109,116,124],
[115,101,111,119,100,114,101,0,105,110],
[108,107,108,121,111,106,94,105,0,106],
[92,96,95,110,88,101,86,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,106,99,121,99,121,104,119],
[97,0,101,106,104,108,115,133,107,108],
[99,109,0,106,120,117,104,129,103,122],
[104,104,104,0,113,126,115,111,114,120],
[111,106,90,97,0,100,119,124,118,112],
[89,102,93,84,110,0,107,119,111,97],
[111,95,106,95,91,103,0,122,112,122],
[89,77,81,99,86,91,88,0,101,100],
[106,103,107,96,92,99,98,109,0,99],
[91,102,88,90,98,113,88,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,121,92,83,87,90,85,92,98],
[116,0,96,107,88,89,91,98,104,105],
[89,114,0,77,98,98,101,88,96,100],
[118,103,133,0,97,96,114,94,98,110],
[127,122,112,113,0,113,109,100,89,116],
[123,121,112,114,97,0,111,95,106,114],
[120,119,109,96,101,99,0,109,94,108],
[125,112,122,116,110,115,101,0,109,133],
[118,106,114,112,121,104,116,101,0,106],
[112,105,110,100,94,96,102,77,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,125,167,167,125,167,167,82],
[43,0,167,82,84,124,40,82,82,82],
[43,43,0,82,84,82,40,40,42,42],
[85,128,128,0,85,168,83,168,85,84],
[43,126,126,125,0,83,83,83,83,125],
[43,86,128,42,127,0,40,40,42,42],
[85,170,170,127,127,170,0,125,127,84],
[43,128,170,42,127,170,85,0,127,42],
[43,128,168,125,127,168,83,83,0,82],
[128,128,168,126,85,168,126,168,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,95,94,107,89,97,89,101],
[104,0,91,86,89,105,96,94,93,83],
[108,119,0,107,106,107,102,104,97,89],
[115,124,103,0,87,106,106,105,109,104],
[116,121,104,123,0,116,109,112,105,109],
[103,105,103,104,94,0,97,101,93,98],
[121,114,108,104,101,113,0,110,110,114],
[113,116,106,105,98,109,100,0,103,103],
[121,117,113,101,105,117,100,107,0,90],
[109,127,121,106,101,112,96,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,112,101,112,118,114,106,108],
[96,0,98,91,92,105,98,94,106,99],
[95,112,0,87,92,108,102,104,101,97],
[98,119,123,0,107,125,118,111,105,112],
[109,118,118,103,0,114,120,119,108,118],
[98,105,102,85,96,0,104,99,91,98],
[92,112,108,92,90,106,0,96,100,105],
[96,116,106,99,91,111,114,0,93,109],
[104,104,109,105,102,119,110,117,0,114],
[102,111,113,98,92,112,105,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,109,113,100,120,101,108,108],
[104,0,110,102,107,103,104,104,112,104],
[111,100,0,111,106,103,108,96,111,106],
[101,108,99,0,105,102,106,106,108,104],
[97,103,104,105,0,95,114,104,105,104],
[110,107,107,108,115,0,111,112,108,105],
[90,106,102,104,96,99,0,103,93,91],
[109,106,114,104,106,98,107,0,105,104],
[102,98,99,102,105,102,117,105,0,100],
[102,106,104,106,106,105,119,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,54,131,52,81,52,54,27,54],
[158,0,79,157,130,107,104,105,105,106],
[156,131,0,157,132,80,103,78,105,106],
[79,53,53,0,54,80,80,54,80,80],
[158,80,78,156,0,80,103,78,105,159],
[129,103,130,130,130,0,103,104,129,157],
[158,106,107,130,107,107,0,53,80,81],
[156,105,132,156,132,106,157,0,79,159],
[183,105,105,130,105,81,130,131,0,131],
[156,104,104,130,51,53,129,51,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,100,118,108,107,112,106,103],
[101,0,98,103,112,110,95,102,113,102],
[103,112,0,105,114,113,115,111,118,110],
[110,107,105,0,118,100,102,106,117,104],
[92,98,96,92,0,105,94,99,100,96],
[102,100,97,110,105,0,103,112,112,102],
[103,115,95,108,116,107,0,108,114,106],
[98,108,99,104,111,98,102,0,99,103],
[104,97,92,93,110,98,96,111,0,104],
[107,108,100,106,114,108,104,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,106,92,82,92,105,104,111],
[120,0,112,118,101,104,105,116,98,116],
[115,98,0,96,102,93,100,108,100,102],
[104,92,114,0,95,97,107,117,103,113],
[118,109,108,115,0,106,111,111,102,114],
[128,106,117,113,104,0,112,117,117,118],
[118,105,110,103,99,98,0,103,102,112],
[105,94,102,93,99,93,107,0,114,102],
[106,112,110,107,108,93,108,96,0,114],
[99,94,108,97,96,92,98,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,93,96,99,103,99,101,81],
[116,0,114,95,97,96,108,111,101,99],
[99,96,0,96,92,87,103,93,93,89],
[117,115,114,0,105,112,123,109,103,98],
[114,113,118,105,0,103,114,112,109,107],
[111,114,123,98,107,0,123,110,109,104],
[107,102,107,87,96,87,0,105,96,90],
[111,99,117,101,98,100,105,0,101,81],
[109,109,117,107,101,101,114,109,0,110],
[129,111,121,112,103,106,120,129,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,99,110,123,105,127,104,108],
[114,0,111,116,119,130,101,114,117,104],
[105,99,0,93,93,117,83,99,96,82],
[111,94,117,0,114,121,105,127,120,104],
[100,91,117,96,0,120,104,120,101,95],
[87,80,93,89,90,0,75,95,92,85],
[105,109,127,105,106,135,0,120,104,101],
[83,96,111,83,90,115,90,0,100,97],
[106,93,114,90,109,118,106,110,0,93],
[102,106,128,106,115,125,109,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,135,130,127,127,125,137,98,107],
[73,0,108,121,108,106,87,108,72,58],
[75,102,0,116,120,77,90,88,90,73],
[80,89,94,0,79,80,110,107,70,68],
[83,102,90,131,0,106,127,99,101,104],
[83,104,133,130,104,0,99,120,113,95],
[85,123,120,100,83,111,0,103,97,78],
[73,102,122,103,111,90,107,0,86,89],
[112,138,120,140,109,97,113,124,0,97],
[103,152,137,142,106,115,132,121,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,96,115,104,98,99,97,102],
[112,0,112,115,124,120,103,107,111,109],
[113,98,0,108,121,114,106,118,103,110],
[114,95,102,0,119,109,95,113,100,109],
[95,86,89,91,0,96,88,99,103,104],
[106,90,96,101,114,0,97,101,108,110],
[112,107,104,115,122,113,0,115,107,114],
[111,103,92,97,111,109,95,0,100,105],
[113,99,107,110,107,102,103,110,0,103],
[108,101,100,101,106,100,96,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,85,84,99,99,87,98,97,96],
[128,0,95,108,121,129,112,106,115,120],
[125,115,0,105,112,124,113,118,104,98],
[126,102,105,0,120,113,107,119,115,102],
[111,89,98,90,0,103,94,99,105,93],
[111,81,86,97,107,0,78,97,99,93],
[123,98,97,103,116,132,0,130,125,122],
[112,104,92,91,111,113,80,0,96,99],
[113,95,106,95,105,111,85,114,0,113],
[114,90,112,108,117,117,88,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,99,93,97,127,91,114,108],
[95,0,99,93,89,82,109,87,106,104],
[104,111,0,99,99,99,121,100,110,104],
[111,117,111,0,102,109,113,94,111,119],
[117,121,111,108,0,116,124,105,114,114],
[113,128,111,101,94,0,106,103,114,113],
[83,101,89,97,86,104,0,82,95,93],
[119,123,110,116,105,107,128,0,111,120],
[96,104,100,99,96,96,115,99,0,98],
[102,106,106,91,96,97,117,90,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,104,123,109,105,96,103,106,122],
[74,0,86,91,101,83,77,95,81,84],
[106,124,0,98,109,102,113,117,101,87],
[87,119,112,0,102,109,109,105,105,110],
[101,109,101,108,0,110,88,97,91,112],
[105,127,108,101,100,0,94,100,99,107],
[114,133,97,101,122,116,0,118,113,122],
[107,115,93,105,113,110,92,0,96,107],
[104,129,109,105,119,111,97,114,0,124],
[88,126,123,100,98,103,88,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,107,111,109,115,122,101,103],
[105,0,96,97,84,107,111,106,100,87],
[89,114,0,98,109,95,110,109,92,98],
[103,113,112,0,121,126,118,125,98,106],
[99,126,101,89,0,106,120,103,96,95],
[101,103,115,84,104,0,104,104,86,87],
[95,99,100,92,90,106,0,93,83,88],
[88,104,101,85,107,106,117,0,94,93],
[109,110,118,112,114,124,127,116,0,100],
[107,123,112,104,115,123,122,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,128,122,86,129,107,147,116,139],
[108,0,127,116,112,112,115,100,119,115],
[82,83,0,86,64,106,83,94,104,108],
[88,94,124,0,71,100,76,96,106,111],
[124,98,146,139,0,115,113,136,143,149],
[81,98,104,110,95,0,106,116,113,133],
[103,95,127,134,97,104,0,118,129,126],
[63,110,116,114,74,94,92,0,113,120],
[94,91,106,104,67,97,81,97,0,130],
[71,95,102,99,61,77,84,90,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,103,112,112,109,103,114,99],
[102,0,109,109,114,99,110,106,96,110],
[106,101,0,106,115,92,116,106,102,113],
[107,101,104,0,98,92,106,97,109,109],
[98,96,95,112,0,104,95,101,101,108],
[98,111,118,118,106,0,114,109,116,115],
[101,100,94,104,115,96,0,100,110,116],
[107,104,104,113,109,101,110,0,107,123],
[96,114,108,101,109,94,100,103,0,108],
[111,100,97,101,102,95,94,87,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,110,111,106,113,105,112,93,98],
[119,0,114,117,114,112,94,113,113,117],
[100,96,0,111,115,109,97,99,102,106],
[99,93,99,0,100,99,95,108,95,98],
[104,96,95,110,0,102,89,94,101,103],
[97,98,101,111,108,0,108,99,116,98],
[105,116,113,115,121,102,0,96,126,115],
[98,97,111,102,116,111,114,0,112,113],
[117,97,108,115,109,94,84,98,0,107],
[112,93,104,112,107,112,95,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,113,111,132,121,119,102,108],
[105,0,98,101,90,129,113,101,87,84],
[108,112,0,124,94,138,136,77,108,107],
[97,109,86,0,112,114,109,89,104,83],
[99,120,116,98,0,106,136,105,122,91],
[78,81,72,96,104,0,110,82,107,85],
[89,97,74,101,74,100,0,97,89,78],
[91,109,133,121,105,128,113,0,121,104],
[108,123,102,106,88,103,121,89,0,87],
[102,126,103,127,119,125,132,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,117,98,105,121,102,103,105],
[102,0,120,126,109,108,111,104,128,125],
[106,90,0,103,95,109,100,107,115,90],
[93,84,107,0,88,94,113,96,113,99],
[112,101,115,122,0,113,111,127,112,116],
[105,102,101,116,97,0,109,113,105,113],
[89,99,110,97,99,101,0,101,100,106],
[108,106,103,114,83,97,109,0,107,94],
[107,82,95,97,98,105,110,103,0,95],
[105,85,120,111,94,97,104,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,88,87,90,83,104,109,84,103],
[103,0,96,93,98,87,72,111,78,107],
[122,114,0,115,97,113,102,128,114,126],
[123,117,95,0,112,104,112,138,104,111],
[120,112,113,98,0,89,126,109,91,130],
[127,123,97,106,121,0,112,139,109,122],
[106,138,108,98,84,98,0,132,91,108],
[101,99,82,72,101,71,78,0,70,98],
[126,132,96,106,119,101,119,140,0,122],
[107,103,84,99,80,88,102,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,122,127,125,130,103,85,125,102],
[111,0,121,104,70,103,93,78,112,108],
[88,89,0,111,110,92,106,106,116,121],
[83,106,99,0,88,85,75,83,89,90],
[85,140,100,122,0,110,117,82,109,118],
[80,107,118,125,100,0,94,77,117,109],
[107,117,104,135,93,116,0,117,127,117],
[125,132,104,127,128,133,93,0,102,102],
[85,98,94,121,101,93,83,108,0,101],
[108,102,89,120,92,101,93,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,107,107,99,100,111,106,110],
[104,0,98,111,118,103,95,101,106,112],
[102,112,0,105,108,124,109,116,104,113],
[103,99,105,0,111,113,104,103,93,108],
[103,92,102,99,0,90,100,95,103,107],
[111,107,86,97,120,0,94,98,110,111],
[110,115,101,106,110,116,0,119,106,126],
[99,109,94,107,115,112,91,0,103,105],
[104,104,106,117,107,100,104,107,0,119],
[100,98,97,102,103,99,84,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,109,108,111,105,108,118,103],
[110,0,117,109,114,114,102,114,123,106],
[99,93,0,105,93,122,96,93,101,95],
[101,101,105,0,104,110,103,100,116,109],
[102,96,117,106,0,113,105,98,122,102],
[99,96,88,100,97,0,96,93,109,96],
[105,108,114,107,105,114,0,108,110,101],
[102,96,117,110,112,117,102,0,109,104],
[92,87,109,94,88,101,100,101,0,96],
[107,104,115,101,108,114,109,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,116,107,121,121,113,113,113],
[90,0,99,95,100,113,121,96,91,108],
[108,111,0,110,99,118,119,96,98,113],
[94,115,100,0,99,109,115,99,99,111],
[103,110,111,111,0,124,108,105,94,111],
[89,97,92,101,86,0,108,85,96,110],
[89,89,91,95,102,102,0,87,92,114],
[97,114,114,111,105,125,123,0,109,119],
[97,119,112,111,116,114,118,101,0,119],
[97,102,97,99,99,100,96,91,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,101,108,100,108,108,95,93],
[98,0,103,105,116,93,106,100,85,103],
[97,107,0,96,110,92,102,106,90,92],
[109,105,114,0,109,107,114,119,111,103],
[102,94,100,101,0,104,94,106,88,104],
[110,117,118,103,106,0,114,107,105,105],
[102,104,108,96,116,96,0,98,96,102],
[102,110,104,91,104,103,112,0,91,99],
[115,125,120,99,122,105,114,119,0,114],
[117,107,118,107,106,105,108,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,102,110,116,98,118,100,102],
[105,0,98,105,101,101,104,116,115,111],
[102,112,0,96,104,106,104,113,110,105],
[108,105,114,0,100,110,114,126,120,108],
[100,109,106,110,0,116,111,120,116,100],
[94,109,104,100,94,0,115,118,98,100],
[112,106,106,96,99,95,0,114,105,103],
[92,94,97,84,90,92,96,0,91,91],
[110,95,100,90,94,112,105,119,0,97],
[108,99,105,102,110,110,107,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,117,102,105,116,125,105,97],
[99,0,97,113,99,112,123,117,118,95],
[108,113,0,125,103,114,123,118,119,106],
[93,97,85,0,105,96,104,106,101,91],
[108,111,107,105,0,119,127,129,134,99],
[105,98,96,114,91,0,106,122,108,99],
[94,87,87,106,83,104,0,99,98,89],
[85,93,92,104,81,88,111,0,94,94],
[105,92,91,109,76,102,112,116,0,109],
[113,115,104,119,111,111,121,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,111,99,136,122,73,121,96,116],
[71,0,95,67,99,84,90,94,82,92],
[99,115,0,95,117,102,86,100,92,85],
[111,143,115,0,117,109,74,108,114,112],
[74,111,93,93,0,99,70,89,117,92],
[88,126,108,101,111,0,72,147,105,86],
[137,120,124,136,140,138,0,127,103,136],
[89,116,110,102,121,63,83,0,97,96],
[114,128,118,96,93,105,107,113,0,90],
[94,118,125,98,118,124,74,114,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,86,91,104,93,106,100,98,125],
[107,0,79,122,106,73,106,96,112,103],
[124,131,0,120,115,109,112,107,116,98],
[119,88,90,0,103,96,108,89,105,123],
[106,104,95,107,0,84,105,109,105,126],
[117,137,101,114,126,0,121,125,143,130],
[104,104,98,102,105,89,0,87,102,94],
[110,114,103,121,101,85,123,0,108,105],
[112,98,94,105,105,67,108,102,0,111],
[85,107,112,87,84,80,116,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,117,126,99,107,138,97,114,127],
[85,0,80,112,83,81,110,79,88,125],
[93,130,0,120,105,100,129,91,109,110],
[84,98,90,0,101,73,99,70,107,116],
[111,127,105,109,0,81,137,97,96,107],
[103,129,110,137,129,0,145,108,133,125],
[72,100,81,111,73,65,0,72,78,91],
[113,131,119,140,113,102,138,0,102,145],
[96,122,101,103,114,77,132,108,0,100],
[83,85,100,94,103,85,119,65,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,110,99,115,121,111,96,98],
[101,0,86,91,118,108,120,96,94,84],
[112,124,0,122,121,129,131,106,102,99],
[100,119,88,0,107,113,124,82,116,101],
[111,92,89,103,0,111,117,95,93,92],
[95,102,81,97,99,0,114,94,102,99],
[89,90,79,86,93,96,0,70,86,64],
[99,114,104,128,115,116,140,0,114,102],
[114,116,108,94,117,108,124,96,0,106],
[112,126,111,109,118,111,146,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,103,103,99,99,101,103,97],
[117,0,109,108,112,118,107,105,115,121],
[109,101,0,111,111,106,112,103,111,110],
[107,102,99,0,107,105,87,101,112,109],
[107,98,99,103,0,113,92,102,112,99],
[111,92,104,105,97,0,99,110,106,106],
[111,103,98,123,118,111,0,108,107,113],
[109,105,107,109,108,100,102,0,106,108],
[107,95,99,98,98,104,103,104,0,103],
[113,89,100,101,111,104,97,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,88,94,96,91,94,89,92,94],
[117,0,112,114,117,107,111,110,113,103],
[122,98,0,112,120,107,120,115,107,105],
[116,96,98,0,106,100,108,100,104,103],
[114,93,90,104,0,102,106,105,100,102],
[119,103,103,110,108,0,110,107,98,95],
[116,99,90,102,104,100,0,97,100,109],
[121,100,95,110,105,103,113,0,97,105],
[118,97,103,106,110,112,110,113,0,99],
[116,107,105,107,108,115,101,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,101,109,96,99,83,77,94],
[108,0,105,111,117,114,110,103,93,109],
[122,105,0,130,126,121,129,118,104,107],
[109,99,80,0,102,86,84,115,94,83],
[101,93,84,108,0,97,84,111,87,87],
[114,96,89,124,113,0,96,111,107,105],
[111,100,81,126,126,114,0,120,120,100],
[127,107,92,95,99,99,90,0,89,71],
[133,117,106,116,123,103,90,121,0,95],
[116,101,103,127,123,105,110,139,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,97,91,102,103,90,103,103],
[102,0,91,97,99,99,104,103,108,111],
[117,119,0,111,99,115,114,105,123,116],
[113,113,99,0,102,99,103,90,108,116],
[119,111,111,108,0,105,101,105,118,110],
[108,111,95,111,105,0,113,102,115,102],
[107,106,96,107,109,97,0,99,111,102],
[120,107,105,120,105,108,111,0,117,116],
[107,102,87,102,92,95,99,93,0,104],
[107,99,94,94,100,108,108,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,111,107,119,107,108,96,115],
[99,0,101,98,112,103,103,100,93,110],
[99,109,0,112,108,106,103,100,98,117],
[99,112,98,0,111,103,102,118,108,116],
[103,98,102,99,0,103,107,112,105,109],
[91,107,104,107,107,0,102,102,95,115],
[103,107,107,108,103,108,0,111,105,117],
[102,110,110,92,98,108,99,0,99,115],
[114,117,112,102,105,115,105,111,0,122],
[95,100,93,94,101,95,93,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,114,109,113,107,104,102,102],
[107,0,120,112,126,111,118,105,118,115],
[102,90,0,113,112,100,117,101,102,106],
[96,98,97,0,116,102,96,91,103,93],
[101,84,98,94,0,103,108,84,101,97],
[97,99,110,108,107,0,103,97,110,105],
[103,92,93,114,102,107,0,92,106,104],
[106,105,109,119,126,113,118,0,101,103],
[108,92,108,107,109,100,104,109,0,109],
[108,95,104,117,113,105,106,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,107,96,115,106,113,103,101],
[106,0,114,114,107,105,105,123,112,90],
[94,96,0,100,91,100,103,100,103,81],
[103,96,110,0,97,105,112,124,109,91],
[114,103,119,113,0,114,115,129,104,106],
[95,105,110,105,96,0,102,118,93,79],
[104,105,107,98,95,108,0,108,110,96],
[97,87,110,86,81,92,102,0,93,84],
[107,98,107,101,106,117,100,117,0,98],
[109,120,129,119,104,131,114,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,100,110,108,101,129,94,89,106],
[128,0,109,113,116,123,127,108,98,115],
[110,101,0,109,101,110,120,110,94,92],
[100,97,101,0,106,108,122,92,88,87],
[102,94,109,104,0,107,113,93,86,93],
[109,87,100,102,103,0,123,93,85,86],
[81,83,90,88,97,87,0,81,97,89],
[116,102,100,118,117,117,129,0,111,114],
[121,112,116,122,124,125,113,99,0,116],
[104,95,118,123,117,124,121,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,82,96,87,86,92,103,98,96],
[118,0,108,126,115,100,110,112,110,118],
[128,102,0,120,98,103,110,117,105,108],
[114,84,90,0,94,92,105,94,84,101],
[123,95,112,116,0,107,101,97,103,114],
[124,110,107,118,103,0,106,109,95,109],
[118,100,100,105,109,104,0,112,98,118],
[107,98,93,116,113,101,98,0,100,102],
[112,100,105,126,107,115,112,110,0,125],
[114,92,102,109,96,101,92,108,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,118,100,101,101,108,104,117],
[98,0,112,121,98,104,109,106,91,114],
[105,98,0,110,85,97,87,97,90,113],
[92,89,100,0,102,121,81,90,97,99],
[110,112,125,108,0,111,99,101,96,121],
[109,106,113,89,99,0,95,93,111,107],
[109,101,123,129,111,115,0,112,111,126],
[102,104,113,120,109,117,98,0,115,119],
[106,119,120,113,114,99,99,95,0,103],
[93,96,97,111,89,103,84,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,111,107,112,103,119,105,106],
[104,0,108,95,101,90,102,123,109,85],
[104,102,0,94,113,100,118,117,103,101],
[99,115,116,0,118,115,118,124,124,98],
[103,109,97,92,0,95,93,114,115,93],
[98,120,110,95,115,0,111,127,121,117],
[107,108,92,92,117,99,0,119,107,105],
[91,87,93,86,96,83,91,0,106,77],
[105,101,107,86,95,89,103,104,0,100],
[104,125,109,112,117,93,105,133,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,108,106,99,110,103,105,116],
[110,0,122,119,120,106,104,103,109,115],
[96,88,0,95,105,89,96,92,89,113],
[102,91,115,0,114,96,106,101,99,112],
[104,90,105,96,0,91,90,96,92,105],
[111,104,121,114,119,0,109,110,99,108],
[100,106,114,104,120,101,0,114,108,105],
[107,107,118,109,114,100,96,0,107,121],
[105,101,121,111,118,111,102,103,0,113],
[94,95,97,98,105,102,105,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,91,126,88,98,91,112,115,106],
[92,0,92,103,91,98,91,111,110,83],
[119,118,0,124,106,106,102,119,114,108],
[84,107,86,0,98,99,101,105,102,98],
[122,119,104,112,0,117,125,112,127,108],
[112,112,104,111,93,0,107,108,113,107],
[119,119,108,109,85,103,0,113,115,106],
[98,99,91,105,98,102,97,0,114,105],
[95,100,96,108,83,97,95,96,0,90],
[104,127,102,112,102,103,104,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,113,112,109,111,105,96,101],
[109,0,103,98,92,112,102,112,111,111],
[101,107,0,113,116,107,113,107,109,115],
[97,112,97,0,112,102,92,104,106,96],
[98,118,94,98,0,106,94,107,102,105],
[101,98,103,108,104,0,101,114,105,109],
[99,108,97,118,116,109,0,111,110,122],
[105,98,103,106,103,96,99,0,104,114],
[114,99,101,104,108,105,100,106,0,100],
[109,99,95,114,105,101,88,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,103,110,108,99,96,103,96],
[100,0,107,111,98,115,92,98,105,100],
[101,103,0,103,97,122,96,96,98,98],
[107,99,107,0,92,115,104,94,99,98],
[100,112,113,118,0,115,101,101,96,105],
[102,95,88,95,95,0,92,91,88,90],
[111,118,114,106,109,118,0,100,108,104],
[114,112,114,116,109,119,110,0,109,98],
[107,105,112,111,114,122,102,101,0,113],
[114,110,112,112,105,120,106,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,104,117,103,114,101,102,94],
[107,0,107,103,103,99,107,96,99,95],
[99,103,0,104,104,95,110,94,95,103],
[106,107,106,0,110,108,105,109,99,104],
[93,107,106,100,0,99,112,102,103,102],
[107,111,115,102,111,0,112,108,99,99],
[96,103,100,105,98,98,0,97,97,98],
[109,114,116,101,108,102,113,0,108,106],
[108,111,115,111,107,111,113,102,0,96],
[116,115,107,106,108,111,112,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,101,115,101,114,110,103,103],
[97,0,105,102,111,102,104,105,92,105],
[108,105,0,109,98,103,107,113,101,104],
[109,108,101,0,97,109,109,106,118,101],
[95,99,112,113,0,99,116,105,109,110],
[109,108,107,101,111,0,111,94,100,107],
[96,106,103,101,94,99,0,99,98,95],
[100,105,97,104,105,116,111,0,100,100],
[107,118,109,92,101,110,112,110,0,118],
[107,105,106,109,100,103,115,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,87,98,104,105,106,105,109,118],
[99,0,109,100,93,108,113,103,108,113],
[123,101,0,113,109,89,120,126,118,132],
[112,110,97,0,105,90,111,107,114,117],
[106,117,101,105,0,99,118,110,100,110],
[105,102,121,120,111,0,111,114,98,134],
[104,97,90,99,92,99,0,109,122,119],
[105,107,84,103,100,96,101,0,99,104],
[101,102,92,96,110,112,88,111,0,106],
[92,97,78,93,100,76,91,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,115,96,107,100,125,118,86,106],
[124,0,127,105,121,110,107,115,114,105],
[95,83,0,94,90,85,101,84,94,80],
[114,105,116,0,105,102,106,103,102,84],
[103,89,120,105,0,111,112,118,110,97],
[110,100,125,108,99,0,118,91,108,97],
[85,103,109,104,98,92,0,86,100,85],
[92,95,126,107,92,119,124,0,96,112],
[124,96,116,108,100,102,110,114,0,89],
[104,105,130,126,113,113,125,98,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,110,104,109,101,97,106,111],
[98,0,117,113,104,104,102,95,113,109],
[99,93,0,113,101,108,95,93,105,109],
[100,97,97,0,92,95,96,96,94,102],
[106,106,109,118,0,112,98,100,110,112],
[101,106,102,115,98,0,107,93,111,113],
[109,108,115,114,112,103,0,106,114,114],
[113,115,117,114,110,117,104,0,119,119],
[104,97,105,116,100,99,96,91,0,99],
[99,101,101,108,98,97,96,91,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,80,97,94,66,94,99,92,88],
[121,0,103,91,102,88,123,125,97,113],
[130,107,0,108,116,112,118,134,91,99],
[113,119,102,0,108,103,113,107,100,102],
[116,108,94,102,0,97,127,118,122,116],
[144,122,98,107,113,0,116,132,117,117],
[116,87,92,97,83,94,0,98,93,85],
[111,85,76,103,92,78,112,0,82,85],
[118,113,119,110,88,93,117,128,0,125],
[122,97,111,108,94,93,125,125,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,109,122,116,111,123,109,110],
[104,0,101,104,110,108,105,117,104,96],
[107,109,0,95,117,109,105,104,109,97],
[101,106,115,0,129,117,109,119,122,101],
[88,100,93,81,0,100,95,99,91,91],
[94,102,101,93,110,0,105,95,106,98],
[99,105,105,101,115,105,0,110,116,98],
[87,93,106,91,111,115,100,0,101,105],
[101,106,101,88,119,104,94,109,0,103],
[100,114,113,109,119,112,112,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,115,95,118,108,136,108,109],
[104,0,99,101,96,118,101,113,127,117],
[98,111,0,101,89,96,88,103,108,108],
[95,109,109,0,83,113,92,108,97,94],
[115,114,121,127,0,112,105,123,105,115],
[92,92,114,97,98,0,103,84,94,95],
[102,109,122,118,105,107,0,127,124,124],
[74,97,107,102,87,126,83,0,98,95],
[102,83,102,113,105,116,86,112,0,112],
[101,93,102,116,95,115,86,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,97,102,116,99,109,107,111],
[100,0,111,98,94,102,85,107,96,105],
[92,99,0,100,95,97,92,103,97,106],
[113,112,110,0,110,108,104,111,91,126],
[108,116,115,100,0,113,102,115,110,114],
[94,108,113,102,97,0,95,104,105,116],
[111,125,118,106,108,115,0,118,103,128],
[101,103,107,99,95,106,92,0,97,103],
[103,114,113,119,100,105,107,113,0,120],
[99,105,104,84,96,94,82,107,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,95,120,110,106,106,108,110],
[102,0,102,91,121,101,99,96,114,107],
[111,108,0,97,108,103,94,108,108,98],
[115,119,113,0,131,116,119,105,106,111],
[90,89,102,79,0,100,90,88,95,88],
[100,109,107,94,110,0,94,89,94,99],
[104,111,116,91,120,116,0,111,108,102],
[104,114,102,105,122,121,99,0,106,96],
[102,96,102,104,115,116,102,104,0,102],
[100,103,112,99,122,111,108,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,113,98,115,105,102,107,97],
[98,0,105,109,91,108,102,118,103,104],
[106,105,0,104,93,116,100,105,106,103],
[97,101,106,0,92,115,93,106,95,108],
[112,119,117,118,0,115,102,115,125,121],
[95,102,94,95,95,0,100,112,106,87],
[105,108,110,117,108,110,0,101,110,105],
[108,92,105,104,95,98,109,0,105,103],
[103,107,104,115,85,104,100,105,0,82],
[113,106,107,102,89,123,105,107,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,109,101,103,114,107,112,117],
[97,0,117,106,96,103,113,95,101,110],
[89,93,0,93,85,104,107,87,95,92],
[101,104,117,0,98,111,123,105,113,114],
[109,114,125,112,0,105,119,104,117,113],
[107,107,106,99,105,0,109,95,111,115],
[96,97,103,87,91,101,0,103,102,110],
[103,115,123,105,106,115,107,0,120,116],
[98,109,115,97,93,99,108,90,0,115],
[93,100,118,96,97,95,100,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,90,107,111,101,99,99,78,91],
[87,0,101,100,98,88,92,107,91,77],
[120,109,0,110,110,110,102,103,108,102],
[103,110,100,0,102,98,99,99,93,93],
[99,112,100,108,0,104,100,104,95,89],
[109,122,100,112,106,0,122,115,108,94],
[111,118,108,111,110,88,0,115,99,90],
[111,103,107,111,106,95,95,0,102,80],
[132,119,102,117,115,102,111,108,0,106],
[119,133,108,117,121,116,120,130,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,95,103,104,98,117,107,107],
[97,0,86,101,108,97,92,95,99,96],
[113,124,0,110,122,121,105,108,121,107],
[115,109,100,0,129,109,97,100,111,103],
[107,102,88,81,0,108,95,99,89,100],
[106,113,89,101,102,0,87,89,116,90],
[112,118,105,113,115,123,0,121,101,105],
[93,115,102,110,111,121,89,0,104,100],
[103,111,89,99,121,94,109,106,0,104],
[103,114,103,107,110,120,105,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,116,115,102,111,100,109,100],
[105,0,96,111,102,118,117,107,107,99],
[107,114,0,96,104,106,103,100,115,90],
[94,99,114,0,120,112,117,112,93,93],
[95,108,106,90,0,104,118,103,99,113],
[108,92,104,98,106,0,114,104,102,94],
[99,93,107,93,92,96,0,90,94,89],
[110,103,110,98,107,106,120,0,113,96],
[101,103,95,117,111,108,116,97,0,112],
[110,111,120,117,97,116,121,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,87,118,102,47,68,66,85,79],
[102,0,93,117,79,62,103,83,90,88],
[123,117,0,108,106,98,108,88,78,67],
[92,93,102,0,109,99,93,90,84,59],
[108,131,104,101,0,92,107,81,93,91],
[163,148,112,111,118,0,115,97,85,106],
[142,107,102,117,103,95,0,67,80,83],
[144,127,122,120,129,113,143,0,121,99],
[125,120,132,126,117,125,130,89,0,91],
[131,122,143,151,119,104,127,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,111,125,119,117,105,122,107],
[102,0,122,111,126,104,112,129,127,103],
[89,88,0,95,118,104,101,110,111,93],
[99,99,115,0,121,107,108,115,113,94],
[85,84,92,89,0,95,92,105,107,84],
[91,106,106,103,115,0,92,111,113,97],
[93,98,109,102,118,118,0,103,117,105],
[105,81,100,95,105,99,107,0,105,85],
[88,83,99,97,103,97,93,105,0,85],
[103,107,117,116,126,113,105,125,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,129,130,96,102,140,115,107,121],
[75,0,84,75,64,85,83,95,82,64],
[81,126,0,117,108,135,125,119,127,99],
[80,135,93,0,96,107,127,118,76,101],
[114,146,102,114,0,116,109,131,118,115],
[108,125,75,103,94,0,143,133,83,83],
[70,127,85,83,101,67,0,103,109,103],
[95,115,91,92,79,77,107,0,101,68],
[103,128,83,134,92,127,101,109,0,113],
[89,146,111,109,95,127,107,142,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,94,101,84,116,98,90,87,102],
[93,0,105,106,92,128,99,88,100,108],
[116,105,0,116,85,120,94,84,100,120],
[109,104,94,0,92,116,89,97,103,108],
[126,118,125,118,0,131,113,105,109,118],
[94,82,90,94,79,0,76,80,79,89],
[112,111,116,121,97,134,0,112,113,124],
[120,122,126,113,105,130,98,0,105,108],
[123,110,110,107,101,131,97,105,0,115],
[108,102,90,102,92,121,86,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,109,100,97,106,99,100,102],
[113,0,112,102,103,106,112,110,105,114],
[102,98,0,102,90,102,105,105,105,104],
[101,108,108,0,98,103,100,101,106,108],
[110,107,120,112,0,111,105,122,103,112],
[113,104,108,107,99,0,107,101,100,108],
[104,98,105,110,105,103,0,107,101,103],
[111,100,105,109,88,109,103,0,108,103],
[110,105,105,104,107,110,109,102,0,109],
[108,96,106,102,98,102,107,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,102,112,117,104,113,110,115],
[103,0,100,99,112,119,102,99,107,97],
[103,110,0,107,113,109,110,107,119,102],
[108,111,103,0,113,111,98,106,116,99],
[98,98,97,97,0,104,96,95,97,98],
[93,91,101,99,106,0,86,99,106,98],
[106,108,100,112,114,124,0,93,110,107],
[97,111,103,104,115,111,117,0,112,101],
[100,103,91,94,113,104,100,98,0,99],
[95,113,108,111,112,112,103,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,111,103,156,146,137,139,120,134],
[64,0,64,97,111,94,102,99,94,99],
[99,146,0,127,143,136,136,140,129,131],
[107,113,83,0,141,120,120,105,111,140],
[54,99,67,69,0,100,76,105,91,101],
[64,116,74,90,110,0,87,93,117,103],
[73,108,74,90,134,123,0,110,90,105],
[71,111,70,105,105,117,100,0,103,127],
[90,116,81,99,119,93,120,107,0,122],
[76,111,79,70,109,107,105,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,111,108,131,133,113,140,125],
[95,0,106,125,112,115,119,92,144,97],
[105,104,0,137,121,95,125,108,132,125],
[99,85,73,0,104,85,115,75,119,109],
[102,98,89,106,0,109,105,98,135,118],
[79,95,115,125,101,0,133,106,130,115],
[77,91,85,95,105,77,0,82,116,117],
[97,118,102,135,112,104,128,0,119,125],
[70,66,78,91,75,80,94,91,0,102],
[85,113,85,101,92,95,93,85,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,122,104,109,102,131,117,108,117],
[90,0,100,97,105,97,111,119,117,102],
[88,110,0,97,113,111,118,114,113,115],
[106,113,113,0,101,113,115,113,114,124],
[101,105,97,109,0,95,129,113,109,116],
[108,113,99,97,115,0,119,111,119,108],
[79,99,92,95,81,91,0,99,100,96],
[93,91,96,97,97,99,111,0,99,99],
[102,93,97,96,101,91,110,111,0,107],
[93,108,95,86,94,102,114,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,110,90,118,123,97,113,105],
[105,0,106,115,116,118,119,117,124,110],
[106,104,0,108,113,103,119,92,118,117],
[100,95,102,0,106,110,112,89,116,109],
[120,94,97,104,0,102,115,89,126,110],
[92,92,107,100,108,0,108,95,115,91],
[87,91,91,98,95,102,0,93,91,94],
[113,93,118,121,121,115,117,0,131,124],
[97,86,92,94,84,95,119,79,0,88],
[105,100,93,101,100,119,116,86,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,88,111,103,129,110,112,118,116],
[93,0,90,102,97,94,98,110,116,109],
[122,120,0,122,100,113,127,115,123,124],
[99,108,88,0,85,106,99,102,131,99],
[107,113,110,125,0,135,102,129,126,128],
[81,116,97,104,75,0,96,88,101,95],
[100,112,83,111,108,114,0,108,101,116],
[98,100,95,108,81,122,102,0,128,104],
[92,94,87,79,84,109,109,82,0,98],
[94,101,86,111,82,115,94,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,100,125,115,105,107,118,104],
[97,0,103,93,108,97,98,95,109,89],
[90,107,0,96,114,108,94,94,105,93],
[110,117,114,0,112,108,108,103,109,104],
[85,102,96,98,0,107,91,91,96,84],
[95,113,102,102,103,0,95,90,97,98],
[105,112,116,102,119,115,0,106,114,109],
[103,115,116,107,119,120,104,0,122,116],
[92,101,105,101,114,113,96,88,0,102],
[106,121,117,106,126,112,101,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,103,107,98,120,113,110,111],
[99,0,112,100,96,96,119,123,101,101],
[99,98,0,112,101,102,117,111,108,104],
[107,110,98,0,102,104,118,97,104,97],
[103,114,109,108,0,107,119,114,104,101],
[112,114,108,106,103,0,114,100,116,101],
[90,91,93,92,91,96,0,103,93,99],
[97,87,99,113,96,110,107,0,100,107],
[100,109,102,106,106,94,117,110,0,100],
[99,109,106,113,109,109,111,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,94,105,106,107,121,117,111],
[100,0,126,121,119,111,103,104,111,114],
[86,84,0,95,98,86,93,91,101,99],
[116,89,115,0,114,93,108,112,118,101],
[105,91,112,96,0,86,115,101,107,108],
[104,99,124,117,124,0,103,94,119,111],
[103,107,117,102,95,107,0,95,115,108],
[89,106,119,98,109,116,115,0,119,109],
[93,99,109,92,103,91,95,91,0,97],
[99,96,111,109,102,99,102,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,84,91,102,81,89,81,79,67],
[160,0,71,131,120,131,109,123,109,87],
[126,139,0,92,80,101,101,110,68,98],
[119,79,118,0,130,120,116,86,87,98],
[108,90,130,80,0,127,108,99,89,88],
[129,79,109,90,83,0,118,88,88,99],
[121,101,109,94,102,92,0,87,81,80],
[129,87,100,124,111,122,123,0,101,89],
[131,101,142,123,121,122,129,109,0,108],
[143,123,112,112,122,111,130,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,161,145,97,153,182,120,153,133],
[68,0,132,95,74,120,123,104,96,93],
[49,78,0,81,72,99,100,57,99,88],
[65,115,129,0,93,128,128,83,108,100],
[113,136,138,117,0,164,149,121,146,99],
[57,90,111,82,46,0,84,57,83,92],
[28,87,110,82,61,126,0,85,83,72],
[90,106,153,127,89,153,125,0,125,115],
[57,114,111,102,64,127,127,85,0,80],
[77,117,122,110,111,118,138,95,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,126,114,119,122,97,120,78],
[102,0,131,133,131,124,132,129,139,112],
[102,79,0,97,113,101,116,92,93,73],
[84,77,113,0,117,120,117,85,103,87],
[96,79,97,93,0,84,90,87,92,89],
[91,86,109,90,126,0,125,84,95,94],
[88,78,94,93,120,85,0,74,93,89],
[113,81,118,125,123,126,136,0,122,103],
[90,71,117,107,118,115,117,88,0,80],
[132,98,137,123,121,116,121,107,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,107,103,101,93,106,107,98],
[103,0,104,99,97,99,87,85,98,104],
[90,106,0,97,98,91,96,90,105,96],
[103,111,113,0,110,98,95,103,99,107],
[107,113,112,100,0,98,97,105,109,99],
[109,111,119,112,112,0,105,112,105,100],
[117,123,114,115,113,105,0,115,109,116],
[104,125,120,107,105,98,95,0,105,96],
[103,112,105,111,101,105,101,105,0,102],
[112,106,114,103,111,110,94,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,103,117,110,106,112,108,107],
[110,0,99,116,112,113,95,112,98,98],
[107,111,0,105,105,106,109,114,106,112],
[107,94,105,0,104,112,99,108,89,93],
[93,98,105,106,0,104,109,117,90,92],
[100,97,104,98,106,0,91,120,92,99],
[104,115,101,111,101,119,0,111,99,111],
[98,98,96,102,93,90,99,0,88,102],
[102,112,104,121,120,118,111,122,0,111],
[103,112,98,117,118,111,99,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,145,130,143,93,144,119,105,117],
[52,0,120,78,90,104,77,106,93,103],
[65,90,0,64,75,104,78,67,39,64],
[80,132,146,0,92,95,106,94,82,106],
[67,120,135,118,0,106,107,94,95,119],
[117,106,106,115,104,0,117,131,91,119],
[66,133,132,104,103,93,0,132,80,77],
[91,104,143,116,116,79,78,0,67,105],
[105,117,171,128,115,119,130,143,0,145],
[93,107,146,104,91,91,133,105,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,128,107,122,128,112,100,103],
[104,0,120,129,108,111,103,111,96,121],
[88,90,0,96,113,108,81,104,102,105],
[82,81,114,0,96,94,85,94,89,91],
[103,102,97,114,0,107,95,105,93,82],
[88,99,102,116,103,0,80,94,95,91],
[82,107,129,125,115,130,0,108,119,97],
[98,99,106,116,105,116,102,0,104,103],
[110,114,108,121,117,115,91,106,0,101],
[107,89,105,119,128,119,113,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,114,109,105,111,103,93,100],
[103,0,112,114,109,124,99,111,106,100],
[96,98,0,99,99,95,98,96,90,92],
[96,96,111,0,97,108,100,101,100,104],
[101,101,111,113,0,112,102,110,97,104],
[105,86,115,102,98,0,97,94,96,101],
[99,111,112,110,108,113,0,110,104,113],
[107,99,114,109,100,116,100,0,85,103],
[117,104,120,110,113,114,106,125,0,104],
[110,110,118,106,106,109,97,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,107,108,104,107,115,102,112],
[100,0,95,103,108,100,98,111,96,105],
[101,115,0,113,115,108,111,116,99,113],
[103,107,97,0,102,101,105,117,98,109],
[102,102,95,108,0,96,97,110,99,105],
[106,110,102,109,114,0,105,118,110,110],
[103,112,99,105,113,105,0,116,96,111],
[95,99,94,93,100,92,94,0,89,100],
[108,114,111,112,111,100,114,121,0,119],
[98,105,97,101,105,100,99,110,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,86,112,104,101,100,117,109],
[108,0,103,101,118,94,94,95,116,106],
[109,107,0,109,110,96,90,103,112,106],
[124,109,101,0,129,114,103,104,104,118],
[98,92,100,81,0,87,91,80,96,94],
[106,116,114,96,123,0,100,110,113,95],
[109,116,120,107,119,110,0,106,113,102],
[110,115,107,106,130,100,104,0,101,88],
[93,94,98,106,114,97,97,109,0,93],
[101,104,104,92,116,115,108,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,169,127,82,168,43,84,84,41],
[126,0,128,127,124,125,0,84,126,83],
[41,82,0,41,82,82,41,84,41,41],
[83,83,169,0,83,84,0,84,85,83],
[128,86,128,127,0,127,86,84,169,126],
[42,85,128,126,83,0,42,85,83,42],
[167,210,169,210,124,168,0,84,167,83],
[126,126,126,126,126,125,126,0,126,42],
[126,84,169,125,41,127,43,84,0,83],
[169,127,169,127,84,168,127,168,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,84,76,107,101,108,79,85,110],
[105,0,91,99,88,112,114,94,87,102],
[126,119,0,121,114,120,112,96,105,131],
[134,111,89,0,112,124,96,100,106,123],
[103,122,96,98,0,114,115,111,101,130],
[109,98,90,86,96,0,110,79,94,121],
[102,96,98,114,95,100,0,86,117,123],
[131,116,114,110,99,131,124,0,111,131],
[125,123,105,104,109,116,93,99,0,109],
[100,108,79,87,80,89,87,79,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,109,116,102,100,94,118,99],
[117,0,122,112,110,114,110,101,110,112],
[108,88,0,99,102,110,112,115,108,107],
[101,98,111,0,101,112,95,104,114,91],
[94,100,108,109,0,99,107,109,109,83],
[108,96,100,98,111,0,107,99,97,91],
[110,100,98,115,103,103,0,113,108,117],
[116,109,95,106,101,111,97,0,109,109],
[92,100,102,96,101,113,102,101,0,82],
[111,98,103,119,127,119,93,101,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,88,111,112,111,126,107,101,109],
[110,0,106,126,97,115,120,104,100,126],
[122,104,0,134,110,121,129,111,108,119],
[99,84,76,0,97,104,108,101,107,114],
[98,113,100,113,0,104,112,106,89,108],
[99,95,89,106,106,0,105,96,96,102],
[84,90,81,102,98,105,0,86,96,98],
[103,106,99,109,104,114,124,0,96,116],
[109,110,102,103,121,114,114,114,0,112],
[101,84,91,96,102,108,112,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,118,96,106,98,114,120,110],
[95,0,74,105,90,84,88,94,107,84],
[110,136,0,124,120,113,105,108,123,114],
[92,105,86,0,95,81,80,96,110,92],
[114,120,90,115,0,94,97,118,106,104],
[104,126,97,129,116,0,119,111,120,111],
[112,122,105,130,113,91,0,113,107,109],
[96,116,102,114,92,99,97,0,104,96],
[90,103,87,100,104,90,103,106,0,84],
[100,126,96,118,106,99,101,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,101,99,99,99,103,98,95],
[104,0,110,90,101,103,94,96,101,94],
[105,100,0,97,104,120,101,105,93,106],
[109,120,113,0,96,119,103,109,112,113],
[111,109,106,114,0,109,86,100,106,110],
[111,107,90,91,101,0,109,113,90,103],
[111,116,109,107,124,101,0,104,104,117],
[107,114,105,101,110,97,106,0,100,99],
[112,109,117,98,104,120,106,110,0,116],
[115,116,104,97,100,107,93,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,105,113,112,110,121,125,128],
[94,0,93,95,100,112,100,113,104,109],
[110,117,0,108,97,123,108,92,107,112],
[105,115,102,0,117,120,125,119,104,133],
[97,110,113,93,0,107,103,109,115,113],
[98,98,87,90,103,0,101,101,121,105],
[100,110,102,85,107,109,0,117,116,123],
[89,97,118,91,101,109,93,0,109,112],
[85,106,103,106,95,89,94,101,0,108],
[82,101,98,77,97,105,87,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,95,138,118,114,84,112,122],
[101,0,113,111,127,107,99,106,119,103],
[97,97,0,115,119,100,112,95,113,118],
[115,99,95,0,105,106,110,103,110,119],
[72,83,91,105,0,91,90,88,88,100],
[92,103,110,104,119,0,111,96,115,110],
[96,111,98,100,120,99,0,87,93,95],
[126,104,115,107,122,114,123,0,125,120],
[98,91,97,100,122,95,117,85,0,98],
[88,107,92,91,110,100,115,90,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,89,101,85,98,92,108,104],
[108,0,90,102,117,98,107,115,119,100],
[117,120,0,110,121,107,101,119,117,102],
[121,108,100,0,112,99,100,109,115,106],
[109,93,89,98,0,96,111,98,123,104],
[125,112,103,111,114,0,109,114,116,107],
[112,103,109,110,99,101,0,106,130,114],
[118,95,91,101,112,96,104,0,106,102],
[102,91,93,95,87,94,80,104,0,84],
[106,110,108,104,106,103,96,108,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,119,95,110,110,107,110,122],
[98,0,107,94,105,106,110,103,106,119],
[95,103,0,98,95,106,115,109,107,112],
[91,116,112,0,101,114,122,108,111,122],
[115,105,115,109,0,106,107,94,106,121],
[100,104,104,96,104,0,97,113,109,105],
[100,100,95,88,103,113,0,106,99,108],
[103,107,101,102,116,97,104,0,105,120],
[100,104,103,99,104,101,111,105,0,120],
[88,91,98,88,89,105,102,90,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,92,88,114,103,114,99,104],
[107,0,108,92,104,121,91,113,105,98],
[107,102,0,100,102,115,88,117,105,88],
[118,118,110,0,114,130,104,105,115,110],
[122,106,108,96,0,109,94,108,101,103],
[96,89,95,80,101,0,83,98,96,94],
[107,119,122,106,116,127,0,119,111,102],
[96,97,93,105,102,112,91,0,111,100],
[111,105,105,95,109,114,99,99,0,104],
[106,112,122,100,107,116,108,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,106,105,87,107,125,82,127,127],
[149,0,128,128,127,86,105,126,66,128],
[104,82,0,102,83,104,60,61,124,103],
[105,82,108,0,128,128,105,61,87,104],
[123,83,127,82,0,125,126,83,127,82],
[103,124,106,82,85,0,126,103,106,102],
[85,105,150,105,84,84,0,126,84,63],
[128,84,149,149,127,107,84,0,107,107],
[83,144,86,123,83,104,126,103,0,124],
[83,82,107,106,128,108,147,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,116,103,117,109,107,109,104],
[110,0,119,118,126,114,115,103,105,125],
[116,91,0,113,100,99,113,106,107,118],
[94,92,97,0,98,101,108,103,97,111],
[107,84,110,112,0,103,115,97,107,106],
[93,96,111,109,107,0,104,112,118,113],
[101,95,97,102,95,106,0,105,111,120],
[103,107,104,107,113,98,105,0,113,105],
[101,105,103,113,103,92,99,97,0,103],
[106,85,92,99,104,97,90,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,116,114,111,115,105,108,124,107],
[110,0,101,99,116,105,118,113,104,110],
[94,109,0,109,105,111,126,121,114,114],
[96,111,101,0,101,110,108,109,120,101],
[99,94,105,109,0,112,116,106,109,106],
[95,105,99,100,98,0,111,110,114,105],
[105,92,84,102,94,99,0,103,112,102],
[102,97,89,101,104,100,107,0,100,87],
[86,106,96,90,101,96,98,110,0,100],
[103,100,96,109,104,105,108,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,102,102,106,114,107,107,95],
[106,0,100,100,95,102,107,110,98,104],
[103,110,0,103,107,114,116,107,105,102],
[108,110,107,0,104,104,117,122,97,107],
[108,115,103,106,0,108,112,119,108,108],
[104,108,96,106,102,0,101,112,99,105],
[96,103,94,93,98,109,0,107,97,96],
[103,100,103,88,91,98,103,0,99,92],
[103,112,105,113,102,111,113,111,0,99],
[115,106,108,103,102,105,114,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,123,126,100,114,114,119,112,112],
[99,0,128,124,102,103,113,110,110,105],
[87,82,0,115,93,97,97,108,88,99],
[84,86,95,0,79,101,102,101,103,91],
[110,108,117,131,0,112,100,113,105,112],
[96,107,113,109,98,0,104,97,96,114],
[96,97,113,108,110,106,0,100,84,106],
[91,100,102,109,97,113,110,0,90,111],
[98,100,122,107,105,114,126,120,0,113],
[98,105,111,119,98,96,104,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,88,111,86,114,107,125,111,103],
[90,0,86,112,100,100,84,108,82,99],
[122,124,0,129,100,119,129,135,122,107],
[99,98,81,0,81,100,100,109,98,95],
[124,110,110,129,0,129,122,128,104,106],
[96,110,91,110,81,0,100,125,97,90],
[103,126,81,110,88,110,0,117,107,95],
[85,102,75,101,82,85,93,0,103,93],
[99,128,88,112,106,113,103,107,0,106],
[107,111,103,115,104,120,115,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,115,115,113,106,102,105,105],
[98,0,95,100,103,97,96,108,107,111],
[106,115,0,107,114,101,118,102,115,125],
[95,110,103,0,105,102,109,121,101,113],
[95,107,96,105,0,97,105,98,94,108],
[97,113,109,108,113,0,105,109,116,110],
[104,114,92,101,105,105,0,96,101,107],
[108,102,108,89,112,101,114,0,101,103],
[105,103,95,109,116,94,109,109,0,99],
[105,99,85,97,102,100,103,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,84,99,113,95,111,115,93,103],
[95,0,91,99,107,94,103,102,89,95],
[126,119,0,110,119,112,120,127,101,124],
[111,111,100,0,114,112,117,111,106,115],
[97,103,91,96,0,102,97,97,93,105],
[115,116,98,98,108,0,118,117,101,111],
[99,107,90,93,113,92,0,112,97,99],
[95,108,83,99,113,93,98,0,97,98],
[117,121,109,104,117,109,113,113,0,110],
[107,115,86,95,105,99,111,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,122,120,104,90,111,108,94],
[102,0,87,102,107,108,114,102,115,86],
[100,123,0,127,103,132,87,100,131,90],
[88,108,83,0,130,120,101,115,118,94],
[90,103,107,80,0,89,72,96,92,92],
[106,102,78,90,121,0,97,124,114,93],
[120,96,123,109,138,113,0,111,87,110],
[99,108,110,95,114,86,99,0,87,97],
[102,95,79,92,118,96,123,123,0,72],
[116,124,120,116,118,117,100,113,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,91,104,84,106,97,90,93,98],
[106,0,103,115,102,96,108,93,90,106],
[119,107,0,118,97,112,99,82,90,104],
[106,95,92,0,97,102,90,77,98,96],
[126,108,113,113,0,119,107,98,105,114],
[104,114,98,108,91,0,100,91,97,112],
[113,102,111,120,103,110,0,91,96,122],
[120,117,128,133,112,119,119,0,99,129],
[117,120,120,112,105,113,114,111,0,125],
[112,104,106,114,96,98,88,81,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,89,116,91,103,92,95,90,97],
[89,0,81,95,81,88,90,82,81,77],
[121,129,0,120,103,126,120,119,114,112],
[94,115,90,0,92,93,109,106,106,105],
[119,129,107,118,0,100,122,104,113,110],
[107,122,84,117,110,0,105,115,106,112],
[118,120,90,101,88,105,0,93,97,112],
[115,128,91,104,106,95,117,0,100,102],
[120,129,96,104,97,104,113,110,0,110],
[113,133,98,105,100,98,98,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,102,93,104,95,107,98,100],
[113,0,104,99,105,108,96,107,105,110],
[107,106,0,109,105,99,98,113,104,107],
[108,111,101,0,105,103,105,119,112,114],
[117,105,105,105,0,108,99,115,107,112],
[106,102,111,107,102,0,95,110,113,107],
[115,114,112,105,111,115,0,113,117,111],
[103,103,97,91,95,100,97,0,98,106],
[112,105,106,98,103,97,93,112,0,109],
[110,100,103,96,98,103,99,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,90,121,118,116,119,67,106,79],
[131,0,106,107,94,144,118,107,95,118],
[120,104,0,135,107,134,145,122,160,131],
[89,103,75,0,103,88,116,64,128,101],
[92,116,103,107,0,105,129,103,119,145],
[94,66,76,122,105,0,106,52,93,92],
[91,92,65,94,81,104,0,94,94,91],
[143,103,88,146,107,158,116,0,120,116],
[104,115,50,82,91,117,116,90,0,129],
[131,92,79,109,65,118,119,94,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,103,112,112,116,117,107,110],
[87,0,90,93,93,90,93,89,96,91],
[100,120,0,98,112,99,95,114,105,104],
[107,117,112,0,114,120,100,101,120,121],
[98,117,98,96,0,105,99,102,92,98],
[98,120,111,90,105,0,97,115,106,101],
[94,117,115,110,111,113,0,123,114,111],
[93,121,96,109,108,95,87,0,110,111],
[103,114,105,90,118,104,96,100,0,111],
[100,119,106,89,112,109,99,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,105,105,210,210,210,210,105,210],
[0,0,0,105,0,105,105,105,0,105],
[105,210,0,210,105,210,210,210,105,105],
[105,105,0,0,105,210,210,210,105,105],
[0,210,105,105,0,210,210,105,105,210],
[0,105,0,0,0,0,105,0,105,105],
[0,105,0,0,0,105,0,105,0,105],
[0,105,0,0,105,210,105,0,105,105],
[105,210,105,105,105,105,210,105,0,210],
[0,105,105,105,0,105,105,105,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,94,128,124,112,98,110,96],
[93,0,107,97,111,105,102,96,122,75],
[113,103,0,102,107,102,103,95,113,91],
[116,113,108,0,113,106,108,120,123,105],
[82,99,103,97,0,114,81,93,103,98],
[86,105,108,104,96,0,127,107,116,92],
[98,108,107,102,129,83,0,95,106,86],
[112,114,115,90,117,103,115,0,115,112],
[100,88,97,87,107,94,104,95,0,74],
[114,135,119,105,112,118,124,98,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,121,101,90,89,105,87,112,111],
[126,0,134,109,92,93,106,86,117,124],
[89,76,0,81,91,94,103,80,98,112],
[109,101,129,0,108,98,101,105,113,114],
[120,118,119,102,0,117,124,104,118,127],
[121,117,116,112,93,0,117,107,111,119],
[105,104,107,109,86,93,0,96,102,108],
[123,124,130,105,106,103,114,0,115,118],
[98,93,112,97,92,99,108,95,0,107],
[99,86,98,96,83,91,102,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,112,110,112,90,108,102,115],
[104,0,100,104,103,108,93,99,99,95],
[99,110,0,104,108,119,106,124,117,106],
[98,106,106,0,110,112,97,100,88,95],
[100,107,102,100,0,101,101,103,98,101],
[98,102,91,98,109,0,96,114,101,105],
[120,117,104,113,109,114,0,121,108,119],
[102,111,86,110,107,96,89,0,93,97],
[108,111,93,122,112,109,102,117,0,103],
[95,115,104,115,109,105,91,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,98,100,109,103,111,100,100],
[111,0,97,107,105,107,109,120,117,115],
[116,113,0,99,113,115,118,112,116,103],
[112,103,111,0,115,115,116,117,114,109],
[110,105,97,95,0,105,103,108,108,97],
[101,103,95,95,105,0,106,100,106,103],
[107,101,92,94,107,104,0,112,111,102],
[99,90,98,93,102,110,98,0,115,97],
[110,93,94,96,102,104,99,95,0,99],
[110,95,107,101,113,107,108,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,99,108,105,97,94,96,116],
[108,0,105,116,114,106,105,95,107,117],
[106,105,0,105,110,97,93,89,96,109],
[111,94,105,0,107,103,102,98,103,115],
[102,96,100,103,0,96,99,100,90,110],
[105,104,113,107,114,0,99,112,108,122],
[113,105,117,108,111,111,0,109,105,121],
[116,115,121,112,110,98,101,0,100,117],
[114,103,114,107,120,102,105,110,0,122],
[94,93,101,95,100,88,89,93,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,112,97,107,118,108,106,106],
[95,0,111,108,102,111,103,104,103,101],
[93,99,0,122,100,108,105,99,106,109],
[98,102,88,0,93,96,99,94,115,99],
[113,108,110,117,0,115,120,115,120,102],
[103,99,102,114,95,0,97,89,88,91],
[92,107,105,111,90,113,0,106,104,94],
[102,106,111,116,95,121,104,0,102,102],
[104,107,104,95,90,122,106,108,0,107],
[104,109,101,111,108,119,116,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,112,111,116,110,105,117,109],
[100,0,106,105,103,114,105,113,106,117],
[97,104,0,98,101,109,101,101,97,102],
[98,105,112,0,102,108,106,111,106,107],
[99,107,109,108,0,105,111,110,115,98],
[94,96,101,102,105,0,107,97,104,106],
[100,105,109,104,99,103,0,100,94,109],
[105,97,109,99,100,113,110,0,105,109],
[93,104,113,104,95,106,116,105,0,98],
[101,93,108,103,112,104,101,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,103,103,104,116,114,99,111],
[118,0,105,114,107,110,107,116,106,124],
[115,105,0,105,104,99,108,109,107,105],
[107,96,105,0,107,91,111,99,103,108],
[107,103,106,103,0,103,108,112,100,114],
[106,100,111,119,107,0,111,110,97,116],
[94,103,102,99,102,99,0,94,95,108],
[96,94,101,111,98,100,116,0,101,112],
[111,104,103,107,110,113,115,109,0,111],
[99,86,105,102,96,94,102,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,103,95,106,97,94,108,112],
[111,0,113,105,103,92,100,99,109,107],
[98,97,0,109,87,100,89,91,105,104],
[107,105,101,0,86,100,100,95,100,103],
[115,107,123,124,0,116,104,106,123,115],
[104,118,110,110,94,0,111,100,115,106],
[113,110,121,110,106,99,0,101,119,118],
[116,111,119,115,104,110,109,0,113,114],
[102,101,105,110,87,95,91,97,0,111],
[98,103,106,107,95,104,92,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,109,91,95,107,94,108,103],
[108,0,97,105,102,116,109,91,115,109],
[116,113,0,119,106,103,110,88,107,111],
[101,105,91,0,92,96,103,100,106,109],
[119,108,104,118,0,113,103,104,129,98],
[115,94,107,114,97,0,107,106,107,103],
[103,101,100,107,107,103,0,97,101,106],
[116,119,122,110,106,104,113,0,116,120],
[102,95,103,104,81,103,109,94,0,108],
[107,101,99,101,112,107,104,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,125,95,101,105,107,105,121],
[107,0,115,121,109,101,108,104,103,125],
[99,95,0,110,85,102,95,115,96,120],
[85,89,100,0,103,108,94,98,85,109],
[115,101,125,107,0,113,97,111,108,131],
[109,109,108,102,97,0,93,103,99,111],
[105,102,115,116,113,117,0,117,104,118],
[103,106,95,112,99,107,93,0,93,98],
[105,107,114,125,102,111,106,117,0,113],
[89,85,90,101,79,99,92,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,109,103,104,93,103,106,101],
[112,0,105,115,104,113,115,103,113,122],
[119,105,0,114,106,104,109,101,115,128],
[101,95,96,0,96,106,101,105,108,100],
[107,106,104,114,0,109,106,107,113,110],
[106,97,106,104,101,0,102,102,111,117],
[117,95,101,109,104,108,0,95,106,107],
[107,107,109,105,103,108,115,0,105,114],
[104,97,95,102,97,99,104,105,0,104],
[109,88,82,110,100,93,103,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,133,94,115,112,111,124,100,122],
[103,0,120,94,105,113,110,113,107,108],
[77,90,0,84,105,104,94,102,87,109],
[116,116,126,0,119,122,114,126,102,121],
[95,105,105,91,0,113,104,105,98,110],
[98,97,106,88,97,0,109,108,99,101],
[99,100,116,96,106,101,0,112,100,115],
[86,97,108,84,105,102,98,0,94,116],
[110,103,123,108,112,111,110,116,0,121],
[88,102,101,89,100,109,95,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,116,121,126,120,105,97,108],
[96,0,97,94,109,123,102,88,91,104],
[109,113,0,107,108,100,104,98,107,96],
[94,116,103,0,112,101,112,98,88,107],
[89,101,102,98,0,108,88,81,91,101],
[84,87,110,109,102,0,98,96,85,100],
[90,108,106,98,122,112,0,99,111,115],
[105,122,112,112,129,114,111,0,112,121],
[113,119,103,122,119,125,99,98,0,115],
[102,106,114,103,109,110,95,89,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,118,92,107,95,119,116,103],
[105,0,121,123,111,108,100,112,114,105],
[109,89,0,105,108,121,91,104,110,113],
[92,87,105,0,90,97,92,110,91,107],
[118,99,102,120,0,115,103,106,119,113],
[103,102,89,113,95,0,91,110,105,95],
[115,110,119,118,107,119,0,102,105,114],
[91,98,106,100,104,100,108,0,108,100],
[94,96,100,119,91,105,105,102,0,103],
[107,105,97,103,97,115,96,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,104,107,116,105,119,105,111],
[107,0,107,112,117,114,113,112,116,97],
[102,103,0,93,104,110,108,123,98,101],
[106,98,117,0,103,120,105,131,118,116],
[103,93,106,107,0,110,106,113,104,98],
[94,96,100,90,100,0,94,107,116,105],
[105,97,102,105,104,116,0,120,128,107],
[91,98,87,79,97,103,90,0,99,103],
[105,94,112,92,106,94,82,111,0,97],
[99,113,109,94,112,105,103,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,136,123,119,92,129,97,111,100],
[79,0,77,107,111,101,96,71,95,83],
[74,133,0,104,103,85,93,87,88,85],
[87,103,106,0,90,80,81,66,103,83],
[91,99,107,120,0,65,102,103,107,69],
[118,109,125,130,145,0,118,102,101,79],
[81,114,117,129,108,92,0,95,102,84],
[113,139,123,144,107,108,115,0,100,101],
[99,115,122,107,103,109,108,110,0,116],
[110,127,125,127,141,131,126,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,118,108,151,81,97,119,105],
[83,0,80,82,86,92,69,47,74,49],
[94,130,0,107,73,117,115,96,83,94],
[92,128,103,0,82,130,89,82,119,84],
[102,124,137,128,0,152,89,92,83,130],
[59,118,93,80,58,0,45,106,94,73],
[129,141,95,121,121,165,0,121,130,156],
[113,163,114,128,118,104,89,0,93,92],
[91,136,127,91,127,116,80,117,0,106],
[105,161,116,126,80,137,54,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,96,94,103,92,104,94,106],
[118,0,123,114,109,117,103,111,100,104],
[106,87,0,103,98,97,93,105,86,102],
[114,96,107,0,102,106,102,100,113,102],
[116,101,112,108,0,121,117,110,114,117],
[107,93,113,104,89,0,101,97,100,97],
[118,107,117,108,93,109,0,103,113,119],
[106,99,105,110,100,113,107,0,114,110],
[116,110,124,97,96,110,97,96,0,112],
[104,106,108,108,93,113,91,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,96,110,113,109,140,122,122],
[94,0,99,114,116,99,99,109,121,122],
[104,111,0,93,95,104,104,126,103,126],
[114,96,117,0,131,130,102,118,144,127],
[100,94,115,79,0,105,82,125,126,121],
[97,111,106,80,105,0,97,122,114,115],
[101,111,106,108,128,113,0,124,127,123],
[70,101,84,92,85,88,86,0,117,87],
[88,89,107,66,84,96,83,93,0,103],
[88,88,84,83,89,95,87,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,155,107,138,108,140,121,104,122],
[89,0,103,143,155,108,109,122,105,124],
[55,107,0,90,84,72,106,67,67,91],
[103,67,120,0,136,87,51,103,66,103],
[72,55,126,74,0,38,90,105,69,72],
[102,102,138,123,172,0,102,103,140,122],
[70,101,104,159,120,108,0,105,71,106],
[89,88,143,107,105,107,105,0,120,89],
[106,105,143,144,141,70,139,90,0,126],
[88,86,119,107,138,88,104,121,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,118,75,105,60,119,74,74,103],
[135,0,135,120,74,104,103,105,133,104],
[92,75,0,60,60,46,76,74,74,60],
[135,90,150,0,120,90,105,104,88,72],
[105,136,150,90,0,90,90,105,119,74],
[150,106,164,120,120,0,120,150,135,105],
[91,107,134,105,120,90,0,120,104,90],
[136,105,136,106,105,60,90,0,120,88],
[136,77,136,122,91,75,106,90,0,105],
[107,106,150,138,136,105,120,122,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,130,101,120,132,109,118,117,132],
[88,0,113,111,101,107,98,124,112,99],
[80,97,0,96,92,97,106,123,104,93],
[109,99,114,0,104,127,110,120,106,123],
[90,109,118,106,0,115,104,121,93,123],
[78,103,113,83,95,0,111,119,111,108],
[101,112,104,100,106,99,0,127,106,100],
[92,86,87,90,89,91,83,0,82,95],
[93,98,106,104,117,99,104,128,0,102],
[78,111,117,87,87,102,110,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,107,90,94,99,110,104,88],
[114,0,115,111,91,109,114,109,114,100],
[104,95,0,103,94,85,114,109,102,99],
[103,99,107,0,86,97,115,119,101,83],
[120,119,116,124,0,108,133,122,121,96],
[116,101,125,113,102,0,112,115,112,107],
[111,96,96,95,77,98,0,97,104,85],
[100,101,101,91,88,95,113,0,113,94],
[106,96,108,109,89,98,106,97,0,90],
[122,110,111,127,114,103,125,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,84,96,94,107,91,105,110,116],
[111,0,107,105,113,120,96,109,119,124],
[126,103,0,107,113,123,117,117,113,116],
[114,105,103,0,113,115,109,117,112,123],
[116,97,97,97,0,112,95,104,121,111],
[103,90,87,95,98,0,116,102,110,108],
[119,114,93,101,115,94,0,120,114,124],
[105,101,93,93,106,108,90,0,104,119],
[100,91,97,98,89,100,96,106,0,117],
[94,86,94,87,99,102,86,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,122,85,96,117,113,108,125],
[108,0,108,112,85,79,100,97,87,113],
[100,102,0,95,93,79,115,112,95,117],
[88,98,115,0,96,86,122,108,78,107],
[125,125,117,114,0,92,115,132,104,132],
[114,131,131,124,118,0,120,117,94,125],
[93,110,95,88,95,90,0,104,74,108],
[97,113,98,102,78,93,106,0,94,108],
[102,123,115,132,106,116,136,116,0,106],
[85,97,93,103,78,85,102,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,106,99,111,97,93,92,115],
[120,0,105,103,108,124,118,107,115,116],
[109,105,0,109,106,123,101,102,101,117],
[104,107,101,0,113,123,110,103,121,110],
[111,102,104,97,0,117,113,110,109,119],
[99,86,87,87,93,0,97,92,100,113],
[113,92,109,100,97,113,0,109,111,110],
[117,103,108,107,100,118,101,0,111,113],
[118,95,109,89,101,110,99,99,0,112],
[95,94,93,100,91,97,100,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,101,107,103,123,87,93,107],
[104,0,116,102,112,104,129,70,130,139],
[110,94,0,119,100,108,126,90,99,84],
[109,108,91,0,80,99,107,74,87,106],
[103,98,110,130,0,105,130,78,94,115],
[107,106,102,111,105,0,142,114,115,109],
[87,81,84,103,80,68,0,71,104,75],
[123,140,120,136,132,96,139,0,113,115],
[117,80,111,123,116,95,106,97,0,128],
[103,71,126,104,95,101,135,95,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,123,110,106,103,108,109,111],
[111,0,122,126,124,120,121,105,127,120],
[94,88,0,83,99,111,107,103,101,89],
[87,84,127,0,107,106,100,97,103,109],
[100,86,111,103,0,113,108,93,119,109],
[104,90,99,104,97,0,97,96,113,109],
[107,89,103,110,102,113,0,98,122,98],
[102,105,107,113,117,114,112,0,121,105],
[101,83,109,107,91,97,88,89,0,111],
[99,90,121,101,101,101,112,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,104,112,110,119,106,97,115],
[99,0,104,92,112,90,107,94,79,110],
[102,106,0,91,102,89,102,89,73,106],
[106,118,119,0,116,104,115,93,100,114],
[98,98,108,94,0,88,94,83,82,96],
[100,120,121,106,122,0,127,92,105,110],
[91,103,108,95,116,83,0,83,99,99],
[104,116,121,117,127,118,127,0,100,122],
[113,131,137,110,128,105,111,110,0,118],
[95,100,104,96,114,100,111,88,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,95,119,105,89,112,118,107],
[106,0,104,105,121,104,107,100,103,107],
[98,106,0,108,105,91,104,100,106,113],
[115,105,102,0,118,93,106,105,103,118],
[91,89,105,92,0,93,94,95,105,97],
[105,106,119,117,117,0,118,132,104,116],
[121,103,106,104,116,92,0,120,105,123],
[98,110,110,105,115,78,90,0,102,107],
[92,107,104,107,105,106,105,108,0,109],
[103,103,97,92,113,94,87,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,119,113,100,113,101,113,113],
[96,0,101,112,108,98,101,99,106,114],
[97,109,0,102,109,108,110,113,123,113],
[91,98,108,0,103,100,110,98,109,110],
[97,102,101,107,0,102,107,103,110,117],
[110,112,102,110,108,0,114,100,111,107],
[97,109,100,100,103,96,0,105,103,112],
[109,111,97,112,107,110,105,0,109,128],
[97,104,87,101,100,99,107,101,0,103],
[97,96,97,100,93,103,98,82,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,96,106,103,106,99,98,101,117],
[108,0,107,103,104,103,103,95,102,122],
[114,103,0,118,108,104,106,92,107,112],
[104,107,92,0,113,100,107,97,104,109],
[107,106,102,97,0,102,94,93,92,106],
[104,107,106,110,108,0,105,108,99,117],
[111,107,104,103,116,105,0,99,100,116],
[112,115,118,113,117,102,111,0,111,113],
[109,108,103,106,118,111,110,99,0,111],
[93,88,98,101,104,93,94,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,108,113,124,132,117,93,131],
[103,0,95,103,106,126,116,120,91,123],
[111,115,0,95,111,118,106,106,97,115],
[102,107,115,0,111,113,118,110,110,94],
[97,104,99,99,0,116,115,107,84,111],
[86,84,92,97,94,0,109,100,91,103],
[78,94,104,92,95,101,0,97,82,100],
[93,90,104,100,103,110,113,0,82,102],
[117,119,113,100,126,119,128,128,0,126],
[79,87,95,116,99,107,110,108,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,103,114,101,101,99,115,105],
[109,0,97,97,107,106,101,108,114,106],
[99,113,0,94,127,109,109,105,111,107],
[107,113,116,0,120,101,111,109,130,120],
[96,103,83,90,0,89,91,86,107,102],
[109,104,101,109,121,0,103,114,128,111],
[109,109,101,99,119,107,0,99,121,109],
[111,102,105,101,124,96,111,0,116,113],
[95,96,99,80,103,82,89,94,0,97],
[105,104,103,90,108,99,101,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,105,115,116,109,103,112,124],
[98,0,91,88,102,107,106,101,103,111],
[101,119,0,100,112,119,108,95,114,110],
[105,122,110,0,109,112,113,108,112,114],
[95,108,98,101,0,114,110,115,109,108],
[94,103,91,98,96,0,96,99,98,95],
[101,104,102,97,100,114,0,96,108,106],
[107,109,115,102,95,111,114,0,109,116],
[98,107,96,98,101,112,102,101,0,112],
[86,99,100,96,102,115,104,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,94,108,88,99,109,116,116,104],
[87,0,116,119,91,97,111,113,113,102],
[116,94,0,95,95,111,92,101,113,95],
[102,91,115,0,90,100,110,113,96,103],
[122,119,115,120,0,115,97,113,130,124],
[111,113,99,110,95,0,112,93,100,119],
[101,99,118,100,113,98,0,88,109,96],
[94,97,109,97,97,117,122,0,98,97],
[94,97,97,114,80,110,101,112,0,118],
[106,108,115,107,86,91,114,113,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,115,110,109,93,127,117,122],
[101,0,98,100,114,107,111,124,109,102],
[113,112,0,119,117,117,96,132,121,122],
[95,110,91,0,109,110,110,126,119,99],
[100,96,93,101,0,100,94,137,112,106],
[101,103,93,100,110,0,97,128,125,107],
[117,99,114,100,116,113,0,124,126,123],
[83,86,78,84,73,82,86,0,95,105],
[93,101,89,91,98,85,84,115,0,103],
[88,108,88,111,104,103,87,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,106,114,111,95,99,109,120],
[98,0,97,91,93,110,99,97,94,108],
[117,113,0,117,121,115,112,99,113,121],
[104,119,93,0,108,111,102,118,108,104],
[96,117,89,102,0,113,100,102,117,117],
[99,100,95,99,97,0,101,100,100,109],
[115,111,98,108,110,109,0,108,99,113],
[111,113,111,92,108,110,102,0,104,116],
[101,116,97,102,93,110,111,106,0,118],
[90,102,89,106,93,101,97,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,97,105,101,105,94,94,102],
[107,0,101,91,98,107,100,95,109,93],
[101,109,0,101,111,107,109,98,117,109],
[113,119,109,0,114,111,114,101,113,107],
[105,112,99,96,0,107,99,109,100,91],
[109,103,103,99,103,0,118,102,107,106],
[105,110,101,96,111,92,0,100,110,108],
[116,115,112,109,101,108,110,0,114,109],
[116,101,93,97,110,103,100,96,0,101],
[108,117,101,103,119,104,102,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,100,119,115,115,105,108,97],
[98,0,105,105,117,126,109,95,92,88],
[85,105,0,98,117,106,85,113,102,88],
[110,105,112,0,105,94,113,105,117,100],
[91,93,93,105,0,93,101,88,96,104],
[95,84,104,116,117,0,102,87,109,96],
[95,101,125,97,109,108,0,107,118,99],
[105,115,97,105,122,123,103,0,111,97],
[102,118,108,93,114,101,92,99,0,109],
[113,122,122,110,106,114,111,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,107,108,100,72,84,101,115,104],
[131,0,152,130,102,106,111,125,146,136],
[103,58,0,103,84,68,87,92,116,95],
[102,80,107,0,77,81,108,97,108,103],
[110,108,126,133,0,112,86,108,139,125],
[138,104,142,129,98,0,111,132,146,130],
[126,99,123,102,124,99,0,126,140,125],
[109,85,118,113,102,78,84,0,127,131],
[95,64,94,102,71,64,70,83,0,90],
[106,74,115,107,85,80,85,79,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,84,107,118,94,82,102,96,86],
[105,0,93,100,130,95,116,96,107,96],
[126,117,0,116,132,103,116,111,112,105],
[103,110,94,0,123,96,93,106,111,98],
[92,80,78,87,0,89,85,97,105,105],
[116,115,107,114,121,0,125,106,101,100],
[128,94,94,117,125,85,0,112,111,95],
[108,114,99,104,113,104,98,0,111,93],
[114,103,98,99,105,109,99,99,0,103],
[124,114,105,112,105,110,115,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,96,102,115,114,86,88,128],
[117,0,86,112,78,131,131,106,93,122],
[117,124,0,99,103,132,137,108,104,141],
[114,98,111,0,108,130,135,106,113,134],
[108,132,107,102,0,147,120,115,114,125],
[95,79,78,80,63,0,94,98,60,91],
[96,79,73,75,90,116,0,100,90,112],
[124,104,102,104,95,112,110,0,89,141],
[122,117,106,97,96,150,120,121,0,133],
[82,88,69,76,85,119,98,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,121,109,120,101,113,115,121],
[105,0,109,113,108,115,101,105,107,102],
[91,101,0,106,104,108,95,104,106,110],
[89,97,104,0,100,98,98,105,105,106],
[101,102,106,110,0,103,107,114,111,123],
[90,95,102,112,107,0,95,103,101,110],
[109,109,115,112,103,115,0,114,116,111],
[97,105,106,105,96,107,96,0,107,107],
[95,103,104,105,99,109,94,103,0,100],
[89,108,100,104,87,100,99,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,134,141,129,95,117,119,111,121],
[67,0,111,94,109,97,78,109,107,89],
[76,99,0,110,90,88,90,105,91,106],
[69,116,100,0,115,113,71,96,108,104],
[81,101,120,95,0,116,73,85,108,89],
[115,113,122,97,94,0,96,102,140,118],
[93,132,120,139,137,114,0,138,125,129],
[91,101,105,114,125,108,72,0,110,123],
[99,103,119,102,102,70,85,100,0,120],
[89,121,104,106,121,92,81,87,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,105,108,101,107,108,110,100],
[102,0,106,113,92,113,107,109,116,89],
[103,104,0,109,98,89,105,107,105,87],
[105,97,101,0,103,108,106,101,100,99],
[102,118,112,107,0,108,115,112,115,103],
[109,97,121,102,102,0,112,109,104,110],
[103,103,105,104,95,98,0,108,105,93],
[102,101,103,109,98,101,102,0,101,92],
[100,94,105,110,95,106,105,109,0,91],
[110,121,123,111,107,100,117,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,96,97,118,101,107,91,129,94],
[92,0,95,95,116,112,110,94,126,108],
[114,115,0,104,111,112,99,106,128,104],
[113,115,106,0,114,115,112,98,127,102],
[92,94,99,96,0,98,90,94,109,83],
[109,98,98,95,112,0,109,93,119,90],
[103,100,111,98,120,101,0,95,124,105],
[119,116,104,112,116,117,115,0,134,105],
[81,84,82,83,101,91,86,76,0,83],
[116,102,106,108,127,120,105,105,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,91,103,83,82,92,95,93,76],
[124,0,101,101,90,87,95,102,101,101],
[119,109,0,114,100,102,110,110,113,97],
[107,109,96,0,91,99,97,112,86,91],
[127,120,110,119,0,105,121,128,108,122],
[128,123,108,111,105,0,126,126,103,96],
[118,115,100,113,89,84,0,98,100,106],
[115,108,100,98,82,84,112,0,98,79],
[117,109,97,124,102,107,110,112,0,93],
[134,109,113,119,88,114,104,131,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,99,97,110,113,107,95,80],
[118,0,90,131,107,113,95,110,105,94],
[118,120,0,99,102,112,116,99,107,111],
[111,79,111,0,104,109,102,100,112,102],
[113,103,108,106,0,120,105,124,102,98],
[100,97,98,101,90,0,107,94,100,82],
[97,115,94,108,105,103,0,105,98,109],
[103,100,111,110,86,116,105,0,96,86],
[115,105,103,98,108,110,112,114,0,93],
[130,116,99,108,112,128,101,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,117,110,90,122,107,104,89],
[119,0,109,115,108,96,126,102,122,98],
[119,101,0,117,109,97,124,112,119,103],
[93,95,93,0,87,97,108,101,110,97],
[100,102,101,123,0,111,119,89,113,103],
[120,114,113,113,99,0,126,118,116,112],
[88,84,86,102,91,84,0,100,106,93],
[103,108,98,109,121,92,110,0,118,105],
[106,88,91,100,97,94,104,92,0,96],
[121,112,107,113,107,98,117,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,87,120,136,86,72,102,148],
[108,0,120,117,122,137,106,107,101,105],
[107,90,0,103,78,91,45,60,76,91],
[123,93,107,0,91,124,91,93,109,120],
[90,88,132,119,0,134,104,72,117,103],
[74,73,119,86,76,0,43,74,90,105],
[124,104,165,119,106,167,0,74,104,117],
[138,103,150,117,138,136,136,0,100,148],
[108,109,134,101,93,120,106,110,0,106],
[62,105,119,90,107,105,93,62,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,108,96,108,106,100,99,120],
[101,0,101,120,101,105,107,97,108,111],
[112,109,0,114,105,111,121,98,106,128],
[102,90,96,0,88,93,106,94,97,106],
[114,109,105,122,0,100,113,97,100,117],
[102,105,99,117,110,0,114,106,101,119],
[104,103,89,104,97,96,0,93,101,116],
[110,113,112,116,113,104,117,0,109,117],
[111,102,104,113,110,109,109,101,0,119],
[90,99,82,104,93,91,94,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,94,101,112,93,106,95,94],
[108,0,100,105,101,114,99,97,95,94],
[118,110,0,111,111,122,108,108,103,105],
[116,105,99,0,110,113,104,103,105,98],
[109,109,99,100,0,108,95,107,101,96],
[98,96,88,97,102,0,87,96,96,94],
[117,111,102,106,115,123,0,109,108,95],
[104,113,102,107,103,114,101,0,106,93],
[115,115,107,105,109,114,102,104,0,98],
[116,116,105,112,114,116,115,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,155,158,120,113,121,104,121,124],
[93,0,120,120,102,99,111,103,89,107],
[55,90,0,103,102,75,93,76,93,104],
[52,90,107,0,98,70,93,66,84,108],
[90,108,108,112,0,79,86,67,109,89],
[97,111,135,140,131,0,113,101,115,103],
[89,99,117,117,124,97,0,84,90,84],
[106,107,134,144,143,109,126,0,86,112],
[89,121,117,126,101,95,120,124,0,113],
[86,103,106,102,121,107,126,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,113,128,106,98,87,108,112],
[108,0,94,96,118,98,94,88,82,110],
[104,116,0,105,111,104,103,101,96,113],
[97,114,105,0,105,101,99,98,99,119],
[82,92,99,105,0,101,97,88,96,102],
[104,112,106,109,109,0,96,100,100,106],
[112,116,107,111,113,114,0,110,105,124],
[123,122,109,112,122,110,100,0,104,120],
[102,128,114,111,114,110,105,106,0,103],
[98,100,97,91,108,104,86,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,109,86,121,96,133,87,122],
[88,0,80,100,96,121,108,129,76,132],
[113,130,0,95,92,105,112,126,94,112],
[101,110,115,0,108,133,95,110,84,120],
[124,114,118,102,0,147,95,156,125,145],
[89,89,105,77,63,0,98,109,85,117],
[114,102,98,115,115,112,0,144,90,113],
[77,81,84,100,54,101,66,0,56,97],
[123,134,116,126,85,125,120,154,0,120],
[88,78,98,90,65,93,97,113,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,87,69,113,95,71,70,95,140],
[130,0,103,43,85,85,71,72,110,127],
[123,107,0,95,111,80,98,97,81,168],
[141,167,115,0,112,113,99,86,111,112],
[97,125,99,98,0,84,71,111,82,139],
[115,125,130,97,126,0,85,83,83,126],
[139,139,112,111,139,125,0,97,95,151],
[140,138,113,124,99,127,113,0,153,156],
[115,100,129,99,128,127,115,57,0,141],
[70,83,42,98,71,84,59,54,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,111,106,101,106,109,115,113],
[103,0,109,124,111,108,114,111,115,119],
[101,101,0,106,112,99,95,98,107,110],
[99,86,104,0,115,103,107,97,114,107],
[104,99,98,95,0,96,91,88,105,99],
[109,102,111,107,114,0,108,108,104,103],
[104,96,115,103,119,102,0,106,103,119],
[101,99,112,113,122,102,104,0,107,119],
[95,95,103,96,105,106,107,103,0,114],
[97,91,100,103,111,107,91,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,90,100,90,94,87,105,94],
[118,0,102,108,114,110,112,110,106,109],
[120,108,0,100,112,97,100,109,119,104],
[120,102,110,0,117,103,107,113,116,110],
[110,96,98,93,0,101,92,105,101,96],
[120,100,113,107,109,0,104,106,112,104],
[116,98,110,103,118,106,0,112,113,102],
[123,100,101,97,105,104,98,0,98,95],
[105,104,91,94,109,98,97,112,0,98],
[116,101,106,100,114,106,108,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,101,83,125,145,105,147,124,168],
[67,0,149,65,109,150,87,128,85,130],
[109,61,0,84,109,170,87,128,107,109],
[127,145,126,0,129,166,128,105,147,147],
[85,101,101,81,0,145,61,124,122,166],
[65,60,40,44,65,0,84,86,105,85],
[105,123,123,82,149,126,0,166,125,146],
[63,82,82,105,86,124,44,0,86,107],
[86,125,103,63,88,105,85,124,0,84],
[42,80,101,63,44,125,64,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,107,98,101,99,113,125,113],
[108,0,108,107,103,111,109,110,125,101],
[104,102,0,98,108,106,104,106,117,104],
[103,103,112,0,107,106,107,109,125,101],
[112,107,102,103,0,100,100,111,121,112],
[109,99,104,104,110,0,106,99,118,107],
[111,101,106,103,110,104,0,102,116,108],
[97,100,104,101,99,111,108,0,116,102],
[85,85,93,85,89,92,94,94,0,95],
[97,109,106,109,98,103,102,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,99,106,98,116,106,108,108,103],
[90,0,94,97,92,99,87,101,98,97],
[111,116,0,102,97,118,104,104,108,98],
[104,113,108,0,106,105,107,106,105,102],
[112,118,113,104,0,120,107,108,104,110],
[94,111,92,105,90,0,103,107,106,96],
[104,123,106,103,103,107,0,109,109,106],
[102,109,106,104,102,103,101,0,112,102],
[102,112,102,105,106,104,101,98,0,101],
[107,113,112,108,100,114,104,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,92,113,108,103,111,112,94],
[107,0,105,98,117,110,117,117,118,99],
[103,105,0,97,120,113,97,116,113,104],
[118,112,113,0,114,108,112,115,116,103],
[97,93,90,96,0,102,92,107,105,98],
[102,100,97,102,108,0,103,113,113,106],
[107,93,113,98,118,107,0,105,99,88],
[99,93,94,95,103,97,105,0,102,96],
[98,92,97,94,105,97,111,108,0,88],
[116,111,106,107,112,104,122,114,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,81,118,100,81,80,86,82,89],
[125,0,118,134,105,118,112,121,102,103],
[129,92,0,106,113,134,85,108,96,102],
[92,76,104,0,93,108,78,87,80,79],
[110,105,97,117,0,108,103,106,101,106],
[129,92,76,102,102,0,91,87,80,97],
[130,98,125,132,107,119,0,128,100,134],
[124,89,102,123,104,123,82,0,111,91],
[128,108,114,130,109,130,110,99,0,119],
[121,107,108,131,104,113,76,119,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,109,106,158,109,133,133,182,105],
[129,0,130,155,104,132,79,103,128,104],
[101,80,0,127,76,53,51,51,73,104],
[104,55,83,0,79,28,52,52,104,52],
[52,106,134,131,0,106,76,52,52,52],
[101,78,157,182,104,0,79,103,128,76],
[77,131,159,158,134,131,0,104,105,131],
[77,107,159,158,158,107,106,0,183,104],
[28,82,137,106,158,82,105,27,0,82],
[105,106,106,158,158,134,79,106,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,98,114,119,93,111,75,96,98],
[98,0,83,100,93,91,105,85,89,96],
[112,127,0,109,111,110,136,95,102,108],
[96,110,101,0,101,86,96,74,94,89],
[91,117,99,109,0,96,120,97,102,105],
[117,119,100,124,114,0,127,110,110,101],
[99,105,74,114,90,83,0,91,89,98],
[135,125,115,136,113,100,119,0,97,114],
[114,121,108,116,108,100,121,113,0,107],
[112,114,102,121,105,109,112,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,101,109,90,104,110,107,121],
[114,0,118,114,119,92,114,118,110,121],
[109,92,0,107,102,113,110,106,113,132],
[109,96,103,0,96,107,105,105,113,131],
[101,91,108,114,0,100,101,120,112,129],
[120,118,97,103,110,0,115,117,122,129],
[106,96,100,105,109,95,0,99,115,119],
[100,92,104,105,90,93,111,0,104,117],
[103,100,97,97,98,88,95,106,0,106],
[89,89,78,79,81,81,91,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,106,104,110,114,112,124,107],
[103,0,103,103,106,96,110,110,114,92],
[108,107,0,101,110,104,109,104,124,104],
[104,107,109,0,106,98,109,107,106,102],
[106,104,100,104,0,110,104,105,116,108],
[100,114,106,112,100,0,111,106,114,106],
[96,100,101,101,106,99,0,106,112,99],
[98,100,106,103,105,104,104,0,125,99],
[86,96,86,104,94,96,98,85,0,91],
[103,118,106,108,102,104,111,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,108,87,99,75,91,73,91,56],
[129,0,150,143,144,107,126,128,110,100],
[102,60,0,115,129,83,84,94,101,85],
[123,67,95,0,115,68,96,80,121,70],
[111,66,81,95,0,74,92,83,99,66],
[135,103,127,142,136,0,108,126,117,133],
[119,84,126,114,118,102,0,129,122,104],
[137,82,116,130,127,84,81,0,97,89],
[119,100,109,89,111,93,88,113,0,101],
[154,110,125,140,144,77,106,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,103,116,101,107,106,112,110],
[117,0,101,106,106,102,106,109,112,110],
[108,109,0,101,112,100,111,103,107,116],
[107,104,109,0,104,98,115,112,112,118],
[94,104,98,106,0,109,101,110,117,111],
[109,108,110,112,101,0,101,96,111,109],
[103,104,99,95,109,109,0,101,116,110],
[104,101,107,98,100,114,109,0,115,112],
[98,98,103,98,93,99,94,95,0,97],
[100,100,94,92,99,101,100,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,111,97,104,98,93,92,109],
[105,0,101,106,113,94,100,105,109,111],
[108,109,0,108,103,118,108,98,107,111],
[99,104,102,0,110,96,95,94,106,113],
[113,97,107,100,0,97,110,91,105,113],
[106,116,92,114,113,0,107,111,115,120],
[112,110,102,115,100,103,0,108,108,109],
[117,105,112,116,119,99,102,0,116,126],
[118,101,103,104,105,95,102,94,0,114],
[101,99,99,97,97,90,101,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,110,113,111,92,98,86,114],
[107,0,106,112,102,90,96,93,99,104],
[112,104,0,121,109,108,95,98,107,129],
[100,98,89,0,107,90,79,81,94,84],
[97,108,101,103,0,98,105,101,103,105],
[99,120,102,120,112,0,92,91,86,112],
[118,114,115,131,105,118,0,103,101,111],
[112,117,112,129,109,119,107,0,94,106],
[124,111,103,116,107,124,109,116,0,105],
[96,106,81,126,105,98,99,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,114,88,104,101,93,103,104],
[97,0,90,106,94,105,100,88,101,99],
[119,120,0,123,111,110,105,105,118,109],
[96,104,87,0,93,99,89,83,96,96],
[122,116,99,117,0,111,100,102,107,117],
[106,105,100,111,99,0,100,102,97,105],
[109,110,105,121,110,110,0,96,108,118],
[117,122,105,127,108,108,114,0,111,117],
[107,109,92,114,103,113,102,99,0,108],
[106,111,101,114,93,105,92,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,99,98,108,83,110,96,119],
[110,0,98,94,111,109,99,104,107,110],
[108,112,0,114,115,93,107,107,98,107],
[111,116,96,0,116,108,109,111,105,101],
[112,99,95,94,0,95,112,102,98,122],
[102,101,117,102,115,0,105,104,100,109],
[127,111,103,101,98,105,0,117,115,107],
[100,106,103,99,108,106,93,0,105,112],
[114,103,112,105,112,110,95,105,0,99],
[91,100,103,109,88,101,103,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,99,113,120,118,117,90,105],
[112,0,123,101,122,111,119,122,116,109],
[101,87,0,95,99,104,98,93,104,107],
[111,109,115,0,113,115,121,102,112,106],
[97,88,111,97,0,102,99,99,89,97],
[90,99,106,95,108,0,110,107,102,113],
[92,91,112,89,111,100,0,99,104,97],
[93,88,117,108,111,103,111,0,91,101],
[120,94,106,98,121,108,106,119,0,99],
[105,101,103,104,113,97,113,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,92,95,101,105,114,123,115],
[98,0,104,98,98,113,111,113,103,92],
[102,106,0,95,96,103,100,108,102,107],
[118,112,115,0,103,117,120,119,119,110],
[115,112,114,107,0,108,105,118,115,110],
[109,97,107,93,102,0,99,104,92,96],
[105,99,110,90,105,111,0,105,110,108],
[96,97,102,91,92,106,105,0,99,93],
[87,107,108,91,95,118,100,111,0,112],
[95,118,103,100,100,114,102,117,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,102,118,126,112,115,116,92,105],
[64,0,79,80,105,69,90,95,90,73],
[108,131,0,126,144,101,119,108,102,85],
[92,130,84,0,129,72,96,95,115,90],
[84,105,66,81,0,51,77,101,82,79],
[98,141,109,138,159,0,127,134,119,107],
[95,120,91,114,133,83,0,112,112,95],
[94,115,102,115,109,76,98,0,118,92],
[118,120,108,95,128,91,98,92,0,83],
[105,137,125,120,131,103,115,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,73,67,87,96,77,96,81,109],
[163,0,122,119,133,146,101,135,122,125],
[137,88,0,107,113,115,112,130,98,111],
[143,91,103,0,128,128,87,121,108,112],
[123,77,97,82,0,115,76,106,89,91],
[114,64,95,82,95,0,57,104,85,117],
[133,109,98,123,134,153,0,136,117,123],
[114,75,80,89,104,106,74,0,96,107],
[129,88,112,102,121,125,93,114,0,129],
[101,85,99,98,119,93,87,103,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,106,99,119,104,95,100,108],
[90,0,82,85,94,93,76,72,90,84],
[110,128,0,103,96,101,110,92,108,89],
[104,125,107,0,106,113,110,107,111,89],
[111,116,114,104,0,122,104,101,106,102],
[91,117,109,97,88,0,115,100,101,89],
[106,134,100,100,106,95,0,101,100,87],
[115,138,118,103,109,110,109,0,121,97],
[110,120,102,99,104,109,110,89,0,91],
[102,126,121,121,108,121,123,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,103,95,108,104,92,102,103],
[113,0,115,98,101,103,109,96,103,96],
[111,95,0,102,99,105,105,88,97,98],
[107,112,108,0,110,113,107,88,111,96],
[115,109,111,100,0,119,116,118,112,108],
[102,107,105,97,91,0,102,95,101,101],
[106,101,105,103,94,108,0,102,95,97],
[118,114,122,122,92,115,108,0,110,118],
[108,107,113,99,98,109,115,100,0,99],
[107,114,112,114,102,109,113,92,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,116,95,102,96,115,122,116],
[112,0,94,96,99,115,99,99,121,112],
[110,116,0,104,93,113,95,114,123,106],
[94,114,106,0,100,117,96,115,137,115],
[115,111,117,110,0,104,117,121,125,122],
[108,95,97,93,106,0,83,105,113,108],
[114,111,115,114,93,127,0,135,124,120],
[95,111,96,95,89,105,75,0,115,96],
[88,89,87,73,85,97,86,95,0,101],
[94,98,104,95,88,102,90,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,100,108,111,105,116,112,111],
[98,0,101,104,103,96,103,104,107,99],
[99,109,0,103,111,106,102,106,111,105],
[110,106,107,0,118,105,116,112,118,112],
[102,107,99,92,0,110,107,105,111,106],
[99,114,104,105,100,0,106,98,114,109],
[105,107,108,94,103,104,0,110,109,107],
[94,106,104,98,105,112,100,0,102,104],
[98,103,99,92,99,96,101,108,0,108],
[99,111,105,98,104,101,103,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,96,101,97,89,112,112,113],
[93,0,95,93,96,94,80,107,106,104],
[109,115,0,98,124,97,107,128,110,109],
[114,117,112,0,114,112,88,116,111,116],
[109,114,86,96,0,95,93,105,97,107],
[113,116,113,98,115,0,108,130,107,107],
[121,130,103,122,117,102,0,125,127,103],
[98,103,82,94,105,80,85,0,98,76],
[98,104,100,99,113,103,83,112,0,95],
[97,106,101,94,103,103,107,134,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,94,112,107,112,99,90,107,106],
[91,0,97,114,104,105,91,92,98,103],
[116,113,0,113,102,111,109,99,106,119],
[98,96,97,0,98,103,94,100,89,105],
[103,106,108,112,0,108,109,103,101,108],
[98,105,99,107,102,0,107,92,106,111],
[111,119,101,116,101,103,0,107,114,114],
[120,118,111,110,107,118,103,0,99,117],
[103,112,104,121,109,104,96,111,0,114],
[104,107,91,105,102,99,96,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,125,131,116,102,102,120,115],
[95,0,109,125,117,111,120,120,125,106],
[101,101,0,136,126,121,98,99,111,111],
[85,85,74,0,96,102,95,85,114,95],
[79,93,84,114,0,124,102,95,112,105],
[94,99,89,108,86,0,110,96,103,105],
[108,90,112,115,108,100,0,101,118,90],
[108,90,111,125,115,114,109,0,106,101],
[90,85,99,96,98,107,92,104,0,84],
[95,104,99,115,105,105,120,109,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,125,100,125,94,141,133,128,173],
[91,0,100,95,89,90,96,118,127,122],
[85,110,0,103,105,118,102,130,114,127],
[110,115,107,0,97,78,108,121,118,120],
[85,121,105,113,0,83,114,120,141,128],
[116,120,92,132,127,0,120,107,106,144],
[69,114,108,102,96,90,0,143,145,118],
[77,92,80,89,90,103,67,0,98,95],
[82,83,96,92,69,104,65,112,0,124],
[37,88,83,90,82,66,92,115,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,83,99,93,108,88,76,129],
[119,0,120,122,142,124,107,102,104,118],
[103,90,0,98,117,122,87,99,101,112],
[127,88,112,0,136,122,104,129,106,127],
[111,68,93,74,0,107,95,89,82,108],
[117,86,88,88,103,0,99,91,86,128],
[102,103,123,106,115,111,0,110,128,132],
[122,108,111,81,121,119,100,0,120,128],
[134,106,109,104,128,124,82,90,0,134],
[81,92,98,83,102,82,78,82,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,124,89,130,124,123,108,130,112],
[93,0,119,77,125,83,104,111,120,95],
[86,91,0,91,89,79,111,91,93,85],
[121,133,119,0,111,98,128,116,98,101],
[80,85,121,99,0,72,95,78,87,83],
[86,127,131,112,138,0,127,137,124,123],
[87,106,99,82,115,83,0,101,118,85],
[102,99,119,94,132,73,109,0,110,97],
[80,90,117,112,123,86,92,100,0,98],
[98,115,125,109,127,87,125,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,96,105,98,102,101,98,106],
[109,0,102,98,96,104,97,102,96,106],
[110,108,0,106,104,113,102,115,112,104],
[114,112,104,0,114,116,101,118,108,111],
[105,114,106,96,0,112,102,104,114,104],
[112,106,97,94,98,0,99,102,105,103],
[108,113,108,109,108,111,0,113,110,98],
[109,108,95,92,106,108,97,0,101,100],
[112,114,98,102,96,105,100,109,0,103],
[104,104,106,99,106,107,112,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,105,103,98,108,113,104,107],
[102,0,106,108,110,111,105,106,108,107],
[101,104,0,98,91,105,99,108,95,106],
[105,102,112,0,98,102,104,102,97,111],
[107,100,119,112,0,107,118,99,101,109],
[112,99,105,108,103,0,108,103,101,97],
[102,105,111,106,92,102,0,97,92,101],
[97,104,102,108,111,107,113,0,94,111],
[106,102,115,113,109,109,118,116,0,112],
[103,103,104,99,101,113,109,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,103,93,111,81,99,91,109],
[118,0,111,127,108,100,99,96,128,111],
[106,99,0,110,84,99,100,93,101,103],
[107,83,100,0,94,113,91,89,92,93],
[117,102,126,116,0,93,100,95,111,101],
[99,110,111,97,117,0,99,87,111,108],
[129,111,110,119,110,111,0,108,102,111],
[111,114,117,121,115,123,102,0,120,118],
[119,82,109,118,99,99,108,90,0,88],
[101,99,107,117,109,102,99,92,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,100,100,114,100,105,89,110],
[103,0,88,97,94,113,100,99,88,102],
[118,122,0,121,119,116,102,122,111,121],
[110,113,89,0,106,120,105,111,102,113],
[110,116,91,104,0,118,117,123,108,125],
[96,97,94,90,92,0,103,109,88,98],
[110,110,108,105,93,107,0,103,89,97],
[105,111,88,99,87,101,107,0,86,103],
[121,122,99,108,102,122,121,124,0,107],
[100,108,89,97,85,112,113,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,119,108,121,116,130,116,109],
[108,0,99,128,113,111,111,126,121,107],
[122,111,0,131,109,123,110,125,122,104],
[91,82,79,0,106,117,102,117,110,87],
[102,97,101,104,0,112,118,115,129,103],
[89,99,87,93,98,0,84,95,87,90],
[94,99,100,108,92,126,0,108,116,117],
[80,84,85,93,95,115,102,0,111,102],
[94,89,88,100,81,123,94,99,0,82],
[101,103,106,123,107,120,93,108,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,120,118,108,103,98,113,111],
[107,0,95,116,106,89,100,88,103,85],
[100,115,0,107,135,116,101,117,132,111],
[90,94,103,0,107,104,99,101,113,96],
[92,104,75,103,0,98,70,86,126,97],
[102,121,94,106,112,0,105,87,104,102],
[107,110,109,111,140,105,0,93,125,95],
[112,122,93,109,124,123,117,0,147,116],
[97,107,78,97,84,106,85,63,0,108],
[99,125,99,114,113,108,115,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,117,117,91,102,96,90,133],
[102,0,90,100,101,91,77,104,79,110],
[115,120,0,119,100,110,114,108,119,128],
[93,110,91,0,121,102,91,102,104,109],
[93,109,110,89,0,88,83,94,99,117],
[119,119,100,108,122,0,106,115,103,118],
[108,133,96,119,127,104,0,117,126,123],
[114,106,102,108,116,95,93,0,110,112],
[120,131,91,106,111,107,84,100,0,124],
[77,100,82,101,93,92,87,98,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,100,92,110,98,118,97,120],
[100,0,91,99,104,91,82,119,102,124],
[120,119,0,112,112,91,105,122,114,141],
[110,111,98,0,106,106,97,125,113,116],
[118,106,98,104,0,99,107,137,113,125],
[100,119,119,104,111,0,105,118,112,123],
[112,128,105,113,103,105,0,120,111,120],
[92,91,88,85,73,92,90,0,78,104],
[113,108,96,97,97,98,99,132,0,128],
[90,86,69,94,85,87,90,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,97,96,95,108,112,116,94],
[114,0,109,93,110,103,104,111,103,97],
[110,101,0,112,102,108,108,107,122,99],
[113,117,98,0,110,112,112,109,121,106],
[114,100,108,100,0,107,114,105,115,111],
[115,107,102,98,103,0,104,111,118,101],
[102,106,102,98,96,106,0,114,118,95],
[98,99,103,101,105,99,96,0,111,96],
[94,107,88,89,95,92,92,99,0,93],
[116,113,111,104,99,109,115,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,99,103,111,113,98,107,106],
[118,0,112,101,103,118,115,101,102,98],
[102,98,0,100,98,101,105,86,101,94],
[111,109,110,0,103,120,110,100,108,102],
[107,107,112,107,0,112,106,104,101,95],
[99,92,109,90,98,0,99,99,96,100],
[97,95,105,100,104,111,0,99,99,96],
[112,109,124,110,106,111,111,0,101,105],
[103,108,109,102,109,114,111,109,0,107],
[104,112,116,108,115,110,114,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,112,102,107,108,99,115,99],
[93,0,110,106,84,98,111,84,102,98],
[109,100,0,111,114,107,108,99,112,100],
[98,104,99,0,105,95,111,94,107,100],
[108,126,96,105,0,109,112,92,104,115],
[103,112,103,115,101,0,122,109,106,106],
[102,99,102,99,98,88,0,91,103,94],
[111,126,111,116,118,101,119,0,102,106],
[95,108,98,103,106,104,107,108,0,114],
[111,112,110,110,95,104,116,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,93,110,108,101,100,107,107],
[96,0,113,119,114,103,105,107,116,117],
[97,97,0,111,84,100,81,89,92,96],
[117,91,99,0,85,95,76,98,99,107],
[100,96,126,125,0,97,91,88,100,111],
[102,107,110,115,113,0,89,104,101,108],
[109,105,129,134,119,121,0,117,113,112],
[110,103,121,112,122,106,93,0,108,106],
[103,94,118,111,110,109,97,102,0,114],
[103,93,114,103,99,102,98,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,97,114,121,103,115,100,119],
[112,0,110,106,111,118,103,128,105,120],
[99,100,0,101,115,116,102,107,98,118],
[113,104,109,0,123,118,113,112,100,121],
[96,99,95,87,0,113,98,103,88,102],
[89,92,94,92,97,0,83,97,83,102],
[107,107,108,97,112,127,0,114,94,121],
[95,82,103,98,107,113,96,0,96,109],
[110,105,112,110,122,127,116,114,0,125],
[91,90,92,89,108,108,89,101,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,95,91,84,112,93,93,102],
[104,0,100,106,99,93,116,95,94,122],
[118,110,0,111,121,112,118,102,102,121],
[115,104,99,0,89,99,103,94,105,105],
[119,111,89,121,0,107,101,99,105,107],
[126,117,98,111,103,0,125,102,112,122],
[98,94,92,107,109,85,0,91,91,102],
[117,115,108,116,111,108,119,0,97,102],
[117,116,108,105,105,98,119,113,0,99],
[108,88,89,105,103,88,108,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,71,88,124,109,37,34,107,90],
[177,0,140,103,193,108,125,85,125,109],
[139,70,0,120,174,143,107,85,141,89],
[122,107,90,0,109,109,91,106,106,91],
[86,17,36,101,0,74,73,51,88,55],
[101,102,67,101,136,0,104,101,101,104],
[173,85,103,119,137,106,0,136,122,105],
[176,125,125,104,159,109,74,0,91,74],
[103,85,69,104,122,109,88,119,0,107],
[120,101,121,119,155,106,105,136,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,89,76,82,98,88,99,70,74],
[123,0,108,80,118,105,107,108,90,94],
[121,102,0,88,110,111,102,112,90,99],
[134,130,122,0,119,113,106,127,99,103],
[128,92,100,91,0,101,92,108,89,83],
[112,105,99,97,109,0,106,112,85,106],
[122,103,108,104,118,104,0,126,105,107],
[111,102,98,83,102,98,84,0,68,102],
[140,120,120,111,121,125,105,142,0,131],
[136,116,111,107,127,104,103,108,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,105,210,105,210,105,105,210,105],
[0,0,105,210,105,210,105,0,105,0],
[105,105,0,210,210,210,105,105,210,105],
[0,0,0,0,0,0,0,0,0,0],
[105,105,0,210,0,105,105,105,105,105],
[0,0,0,210,105,0,105,0,0,0],
[105,105,105,210,105,105,0,105,105,105],
[105,210,105,210,105,210,105,0,210,105],
[0,105,0,210,105,210,105,0,0,0],
[105,210,105,210,105,210,105,105,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,91,101,97,104,95,96,106],
[108,0,102,100,104,91,107,101,104,111],
[105,108,0,101,98,109,112,97,104,102],
[119,110,109,0,119,109,114,100,105,114],
[109,106,112,91,0,104,119,108,98,107],
[113,119,101,101,106,0,129,106,111,116],
[106,103,98,96,91,81,0,89,94,101],
[115,109,113,110,102,104,121,0,102,112],
[114,106,106,105,112,99,116,108,0,110],
[104,99,108,96,103,94,109,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,105,103,112,107,109,105,114],
[100,0,99,107,103,110,115,100,98,106],
[100,111,0,105,111,109,111,109,103,107],
[105,103,105,0,103,127,105,120,94,117],
[107,107,99,107,0,113,124,112,102,121],
[98,100,101,83,97,0,104,96,102,104],
[103,95,99,105,86,106,0,106,104,110],
[101,110,101,90,98,114,104,0,113,113],
[105,112,107,116,108,108,106,97,0,111],
[96,104,103,93,89,106,100,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,83,105,103,100,82,118,110],
[106,0,79,72,77,101,98,95,106,110],
[106,131,0,93,93,112,104,101,116,108],
[127,138,117,0,101,104,108,117,134,131],
[105,133,117,109,0,113,91,105,126,110],
[107,109,98,106,97,0,104,105,99,103],
[110,112,106,102,119,106,0,103,117,122],
[128,115,109,93,105,105,107,0,110,122],
[92,104,94,76,84,111,93,100,0,92],
[100,100,102,79,100,107,88,88,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,103,108,104,97,96,98,98],
[101,0,102,92,112,101,93,95,95,98],
[103,108,0,102,119,101,98,103,100,97],
[107,118,108,0,120,110,99,104,100,108],
[102,98,91,90,0,76,90,87,96,85],
[106,109,109,100,134,0,109,96,101,108],
[113,117,112,111,120,101,0,108,102,105],
[114,115,107,106,123,114,102,0,101,102],
[112,115,110,110,114,109,108,109,0,99],
[112,112,113,102,125,102,105,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,131,122,105,113,113,108,106,118],
[99,0,124,126,105,114,99,92,118,123],
[79,86,0,109,90,92,85,96,112,102],
[88,84,101,0,89,82,80,92,91,97],
[105,105,120,121,0,122,102,107,115,108],
[97,96,118,128,88,0,101,106,111,118],
[97,111,125,130,108,109,0,110,123,124],
[102,118,114,118,103,104,100,0,121,124],
[104,92,98,119,95,99,87,89,0,111],
[92,87,108,113,102,92,86,86,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,108,101,100,96,92,113,89,103],
[123,0,119,113,107,116,112,129,99,128],
[102,91,0,100,109,92,108,127,101,104],
[109,97,110,0,113,100,103,117,93,119],
[110,103,101,97,0,105,113,124,92,113],
[114,94,118,110,105,0,110,125,97,113],
[118,98,102,107,97,100,0,109,105,109],
[97,81,83,93,86,85,101,0,87,107],
[121,111,109,117,118,113,105,123,0,129],
[107,82,106,91,97,97,101,103,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,103,110,125,117,118,105,111,117],
[84,0,100,91,104,95,121,116,97,84],
[107,110,0,99,114,128,122,127,116,101],
[100,119,111,0,117,114,118,120,114,111],
[85,106,96,93,0,112,106,107,91,85],
[93,115,82,96,98,0,109,113,112,82],
[92,89,88,92,104,101,0,98,92,78],
[105,94,83,90,103,97,112,0,105,95],
[99,113,94,96,119,98,118,105,0,103],
[93,126,109,99,125,128,132,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,119,105,88,106,108,103,94],
[112,0,95,129,110,92,107,115,98,108],
[118,115,0,119,120,113,105,102,104,108],
[91,81,91,0,97,89,95,86,100,94],
[105,100,90,113,0,105,95,104,87,99],
[122,118,97,121,105,0,115,100,98,101],
[104,103,105,115,115,95,0,102,106,103],
[102,95,108,124,106,110,108,0,105,95],
[107,112,106,110,123,112,104,105,0,110],
[116,102,102,116,111,109,107,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,96,97,79,99,101,95,93,95],
[90,0,87,74,94,82,96,95,84,95],
[114,123,0,98,93,97,119,110,88,109],
[113,136,112,0,105,89,112,102,109,98],
[131,116,117,105,0,107,108,110,104,121],
[111,128,113,121,103,0,132,125,104,107],
[109,114,91,98,102,78,0,99,85,96],
[115,115,100,108,100,85,111,0,93,99],
[117,126,122,101,106,106,125,117,0,122],
[115,115,101,112,89,103,114,111,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,111,117,112,113,111,108,102],
[87,0,87,110,107,97,107,98,113,104],
[105,123,0,110,123,101,110,121,118,101],
[99,100,100,0,116,110,105,100,101,99],
[93,103,87,94,0,99,105,101,109,102],
[98,113,109,100,111,0,113,107,116,110],
[97,103,100,105,105,97,0,99,112,105],
[99,112,89,110,109,103,111,0,121,113],
[102,97,92,109,101,94,98,89,0,86],
[108,106,109,111,108,100,105,97,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,102,94,100,106,106,105,92],
[109,0,107,94,89,91,117,96,100,104],
[110,103,0,96,89,99,103,111,110,98],
[108,116,114,0,92,96,109,107,98,98],
[116,121,121,118,0,105,108,116,112,108],
[110,119,111,114,105,0,130,116,114,103],
[104,93,107,101,102,80,0,108,103,100],
[104,114,99,103,94,94,102,0,97,99],
[105,110,100,112,98,96,107,113,0,107],
[118,106,112,112,102,107,110,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,106,109,102,117,118,104,120],
[103,0,107,107,116,107,118,119,108,120],
[97,103,0,113,95,98,106,105,96,107],
[104,103,97,0,106,101,109,105,97,110],
[101,94,115,104,0,102,117,108,104,115],
[108,103,112,109,108,0,113,111,105,107],
[93,92,104,101,93,97,0,98,93,103],
[92,91,105,105,102,99,112,0,96,107],
[106,102,114,113,106,105,117,114,0,112],
[90,90,103,100,95,103,107,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,112,100,99,99,113,104,100],
[119,0,95,112,100,97,89,101,102,99],
[119,115,0,114,111,104,101,120,98,108],
[98,98,96,0,105,96,93,92,93,98],
[110,110,99,105,0,108,102,109,105,111],
[111,113,106,114,102,0,106,107,109,98],
[111,121,109,117,108,104,0,105,111,122],
[97,109,90,118,101,103,105,0,108,110],
[106,108,112,117,105,101,99,102,0,102],
[110,111,102,112,99,112,88,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,140,106,103,86,122,70,87,104],
[158,0,123,141,121,69,88,87,105,103],
[70,87,0,71,85,68,70,52,86,70],
[104,69,139,0,121,104,69,104,51,69],
[107,89,125,89,0,88,88,36,107,88],
[124,141,142,106,122,0,122,70,88,124],
[88,122,140,141,122,88,0,105,106,104],
[140,123,158,106,174,140,105,0,140,140],
[123,105,124,159,103,122,104,70,0,140],
[106,107,140,141,122,86,106,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,110,121,94,114,122,123,135],
[103,0,126,95,116,104,99,114,106,112],
[92,84,0,77,100,81,80,91,91,104],
[100,115,133,0,123,93,93,116,107,127],
[89,94,110,87,0,83,91,84,88,102],
[116,106,129,117,127,0,101,120,109,129],
[96,111,130,117,119,109,0,105,93,144],
[88,96,119,94,126,90,105,0,99,114],
[87,104,119,103,122,101,117,111,0,120],
[75,98,106,83,108,81,66,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,117,99,116,102,108,101,102],
[101,0,103,112,101,110,99,106,107,99],
[103,107,0,119,103,110,105,107,104,102],
[93,98,91,0,84,100,105,101,97,94],
[111,109,107,126,0,115,104,114,110,99],
[94,100,100,110,95,0,97,104,95,93],
[108,111,105,105,106,113,0,108,99,108],
[102,104,103,109,96,106,102,0,94,98],
[109,103,106,113,100,115,111,116,0,106],
[108,111,108,116,111,117,102,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,95,107,95,113,120,106,104],
[102,0,105,88,91,80,96,96,86,87],
[96,105,0,83,97,82,94,116,97,92],
[115,122,127,0,104,107,119,106,126,117],
[103,119,113,106,0,102,116,100,95,89],
[115,130,128,103,108,0,127,131,114,115],
[97,114,116,91,94,83,0,113,106,91],
[90,114,94,104,110,79,97,0,86,90],
[104,124,113,84,115,96,104,124,0,108],
[106,123,118,93,121,95,119,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,110,104,100,97,122,100,99],
[108,0,112,118,108,98,129,131,111,100],
[90,98,0,111,88,91,106,103,98,97],
[100,92,99,0,85,87,102,103,94,89],
[106,102,122,125,0,118,114,121,108,103],
[110,112,119,123,92,0,112,113,111,95],
[113,81,104,108,96,98,0,115,94,99],
[88,79,107,107,89,97,95,0,97,95],
[110,99,112,116,102,99,116,113,0,112],
[111,110,113,121,107,115,111,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,73,79,115,103,88,105,97],
[107,0,97,83,72,122,113,103,102,113],
[107,113,0,91,81,113,121,128,108,101],
[137,127,119,0,111,150,121,126,103,117],
[131,138,129,99,0,113,145,132,126,116],
[95,88,97,60,97,0,97,94,91,87],
[107,97,89,89,65,113,0,97,79,90],
[122,107,82,84,78,116,113,0,108,112],
[105,108,102,107,84,119,131,102,0,101],
[113,97,109,93,94,123,120,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,98,112,87,103,104,93,104],
[115,0,108,111,108,97,96,114,104,107],
[111,102,0,110,106,111,108,101,107,109],
[112,99,100,0,105,99,105,100,104,112],
[98,102,104,105,0,101,105,96,110,106],
[123,113,99,111,109,0,107,116,110,112],
[107,114,102,105,105,103,0,103,99,102],
[106,96,109,110,114,94,107,0,109,111],
[117,106,103,106,100,100,111,101,0,101],
[106,103,101,98,104,98,108,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,97,97,107,117,100,107,88],
[113,0,100,100,107,94,105,100,110,93],
[104,110,0,110,105,102,118,105,112,108],
[113,110,100,0,105,97,123,97,108,96],
[113,103,105,105,0,106,115,104,114,96],
[103,116,108,113,104,0,118,106,108,101],
[93,105,92,87,95,92,0,89,103,84],
[110,110,105,113,106,104,121,0,113,103],
[103,100,98,102,96,102,107,97,0,90],
[122,117,102,114,114,109,126,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,145,96,108,152,92,138,134,134],
[80,0,75,85,76,111,92,100,82,102],
[65,135,0,71,80,107,86,125,79,86],
[114,125,139,0,89,132,100,138,116,117],
[102,134,130,121,0,134,115,115,119,132],
[58,99,103,78,76,0,90,114,84,106],
[118,118,124,110,95,120,0,134,103,119],
[72,110,85,72,95,96,76,0,95,64],
[76,128,131,94,91,126,107,115,0,91],
[76,108,124,93,78,104,91,146,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,94,108,101,102,102,99,109],
[106,0,102,102,107,116,103,107,108,124],
[113,108,0,107,103,103,105,109,110,125],
[116,108,103,0,103,120,115,110,104,129],
[102,103,107,107,0,103,101,98,98,115],
[109,94,107,90,107,0,105,98,98,124],
[108,107,105,95,109,105,0,103,99,118],
[108,103,101,100,112,112,107,0,108,129],
[111,102,100,106,112,112,111,102,0,124],
[101,86,85,81,95,86,92,81,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,86,108,92,98,102,92,101],
[110,0,104,110,117,105,106,112,102,112],
[107,106,0,102,117,93,108,110,101,98],
[124,100,108,0,129,107,110,113,103,115],
[102,93,93,81,0,98,73,87,92,102],
[118,105,117,103,112,0,91,114,105,97],
[112,104,102,100,137,119,0,110,106,108],
[108,98,100,97,123,96,100,0,98,93],
[118,108,109,107,118,105,104,112,0,106],
[109,98,112,95,108,113,102,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,100,89,126,104,108,105,96],
[104,0,114,111,108,116,118,113,107,97],
[91,96,0,98,93,112,99,112,100,109],
[110,99,112,0,96,124,110,111,102,112],
[121,102,117,114,0,132,99,107,117,109],
[84,94,98,86,78,0,109,98,100,97],
[106,92,111,100,111,101,0,114,104,95],
[102,97,98,99,103,112,96,0,97,95],
[105,103,110,108,93,110,106,113,0,103],
[114,113,101,98,101,113,115,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,89,98,96,104,95,95,90],
[99,0,111,93,92,102,94,98,98,103],
[109,99,0,98,93,95,97,99,97,102],
[121,117,112,0,105,106,106,104,104,105],
[112,118,117,105,0,110,103,108,109,112],
[114,108,115,104,100,0,102,95,100,104],
[106,116,113,104,107,108,0,105,107,102],
[115,112,111,106,102,115,105,0,105,100],
[115,112,113,106,101,110,103,105,0,111],
[120,107,108,105,98,106,108,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,112,96,114,94,96,98,98],
[97,0,103,108,110,114,100,106,91,99],
[105,107,0,101,94,114,105,93,100,101],
[98,102,109,0,89,109,90,84,95,77],
[114,100,116,121,0,120,110,111,113,95],
[96,96,96,101,90,0,90,88,85,90],
[116,110,105,120,100,120,0,103,102,105],
[114,104,117,126,99,122,107,0,101,109],
[112,119,110,115,97,125,108,109,0,86],
[112,111,109,133,115,120,105,101,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,109,116,102,135,113,101,127],
[97,0,84,97,100,96,110,104,95,106],
[92,126,0,107,118,98,118,110,88,109],
[101,113,103,0,108,117,125,109,103,129],
[94,110,92,102,0,100,113,115,85,122],
[108,114,112,93,110,0,126,108,110,110],
[75,100,92,85,97,84,0,91,80,108],
[97,106,100,101,95,102,119,0,98,112],
[109,115,122,107,125,100,130,112,0,127],
[83,104,101,81,88,100,102,98,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,104,91,97,108,93,108,108],
[112,0,111,102,102,100,111,91,111,99],
[97,99,0,100,70,76,96,75,97,81],
[106,108,110,0,85,88,113,94,98,97],
[119,108,140,125,0,96,111,95,108,100],
[113,110,134,122,114,0,118,96,101,118],
[102,99,114,97,99,92,0,97,115,96],
[117,119,135,116,115,114,113,0,110,101],
[102,99,113,112,102,109,95,100,0,83],
[102,111,129,113,110,92,114,109,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,84,97,71,103,97,93,101],
[108,0,107,97,112,84,101,105,113,101],
[117,103,0,88,104,88,108,100,94,108],
[126,113,122,0,127,102,106,106,107,110],
[113,98,106,83,0,84,109,97,90,113],
[139,126,122,108,126,0,115,105,122,108],
[107,109,102,104,101,95,0,99,97,86],
[113,105,110,104,113,105,111,0,103,114],
[117,97,116,103,120,88,113,107,0,95],
[109,109,102,100,97,102,124,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,115,104,134,130,96,116,132],
[112,0,112,132,104,137,150,101,112,125],
[110,98,0,129,106,119,139,126,127,131],
[95,78,81,0,95,94,78,83,68,102],
[106,106,104,115,0,107,111,103,72,110],
[76,73,91,116,103,0,112,92,90,124],
[80,60,71,132,99,98,0,87,93,110],
[114,109,84,127,107,118,123,0,74,131],
[94,98,83,142,138,120,117,136,0,122],
[78,85,79,108,100,86,100,79,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,97,85,110,85,99,103,111],
[110,0,91,90,100,100,82,103,91,107],
[120,119,0,113,105,110,92,99,106,111],
[113,120,97,0,101,112,101,106,106,109],
[125,110,105,109,0,117,106,122,103,132],
[100,110,100,98,93,0,82,107,92,105],
[125,128,118,109,104,128,0,115,103,132],
[111,107,111,104,88,103,95,0,92,118],
[107,119,104,104,107,118,107,118,0,125],
[99,103,99,101,78,105,78,92,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,108,92,73,99,94,81,87,109],
[129,0,121,127,110,99,124,108,116,120],
[102,89,0,103,86,103,97,110,108,108],
[118,83,107,0,94,95,108,111,112,109],
[137,100,124,116,0,126,128,112,111,138],
[111,111,107,115,84,0,110,100,110,113],
[116,86,113,102,82,100,0,107,96,112],
[129,102,100,99,98,110,103,0,116,95],
[123,94,102,98,99,100,114,94,0,113],
[101,90,102,101,72,97,98,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,79,104,97,100,91,103,84,89],
[117,0,104,97,99,113,74,115,96,80],
[131,106,0,119,112,109,93,131,104,72],
[106,113,91,0,94,133,98,119,107,88],
[113,111,98,116,0,134,118,126,117,107],
[110,97,101,77,76,0,89,120,100,70],
[119,136,117,112,92,121,0,118,102,93],
[107,95,79,91,84,90,92,0,89,79],
[126,114,106,103,93,110,108,121,0,90],
[121,130,138,122,103,140,117,131,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,108,100,95,109,112,91,101],
[97,0,105,104,109,101,109,108,108,100],
[106,105,0,101,116,105,113,114,109,104],
[102,106,109,0,101,97,110,108,113,99],
[110,101,94,109,0,95,111,117,100,98],
[115,109,105,113,115,0,121,114,106,112],
[101,101,97,100,99,89,0,114,98,94],
[98,102,96,102,93,96,96,0,102,99],
[119,102,101,97,110,104,112,108,0,97],
[109,110,106,111,112,98,116,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,111,107,103,107,124,105,97],
[118,0,105,129,111,122,119,109,116,96],
[106,105,0,131,120,127,118,132,106,102],
[99,81,79,0,84,107,104,102,90,101],
[103,99,90,126,0,107,108,105,90,111],
[107,88,83,103,103,0,117,106,105,100],
[103,91,92,106,102,93,0,95,89,98],
[86,101,78,108,105,104,115,0,97,100],
[105,94,104,120,120,105,121,113,0,104],
[113,114,108,109,99,110,112,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,114,110,112,102,96,98,110,89],
[116,0,101,116,133,101,91,94,101,79],
[96,109,0,99,106,102,91,106,117,93],
[100,94,111,0,118,92,102,86,105,84],
[98,77,104,92,0,93,74,102,93,85],
[108,109,108,118,117,0,104,105,114,116],
[114,119,119,108,136,106,0,129,126,105],
[112,116,104,124,108,105,81,0,113,100],
[100,109,93,105,117,96,84,97,0,97],
[121,131,117,126,125,94,105,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,104,109,111,120,111,143,127],
[100,0,111,91,95,111,93,86,141,80],
[99,99,0,89,129,102,82,115,132,132],
[106,119,121,0,111,146,101,119,142,140],
[101,115,81,99,0,89,91,98,149,140],
[99,99,108,64,121,0,76,118,124,116],
[90,117,128,109,119,134,0,140,141,148],
[99,124,95,91,112,92,70,0,124,123],
[67,69,78,68,61,86,69,86,0,89],
[83,130,78,70,70,94,62,87,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,114,106,102,108,108,114,102],
[103,0,114,112,104,101,111,100,105,104],
[104,96,0,106,100,98,109,88,106,100],
[96,98,104,0,105,86,105,94,92,100],
[104,106,110,105,0,93,115,108,93,115],
[108,109,112,124,117,0,128,117,104,110],
[102,99,101,105,95,82,0,102,104,99],
[102,110,122,116,102,93,108,0,117,107],
[96,105,104,118,117,106,106,93,0,109],
[108,106,110,110,95,100,111,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,113,104,96,98,98,105,112],
[97,0,90,103,86,106,94,108,100,104],
[112,120,0,111,115,118,108,104,113,118],
[97,107,99,0,103,101,108,110,103,105],
[106,124,95,107,0,108,115,111,121,103],
[114,104,92,109,102,0,100,104,109,112],
[112,116,102,102,95,110,0,116,102,111],
[112,102,106,100,99,106,94,0,98,116],
[105,110,97,107,89,101,108,112,0,115],
[98,106,92,105,107,98,99,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,118,104,105,99,78,116,108],
[111,0,120,129,98,115,123,111,126,114],
[110,90,0,118,116,108,122,89,128,113],
[92,81,92,0,75,103,92,86,93,93],
[106,112,94,135,0,111,115,97,109,100],
[105,95,102,107,99,0,107,86,106,94],
[111,87,88,118,95,103,0,103,110,105],
[132,99,121,124,113,124,107,0,127,133],
[94,84,82,117,101,104,100,83,0,99],
[102,96,97,117,110,116,105,77,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,125,128,128,84,168,210,124,128],
[42,0,126,129,85,83,169,82,85,85],
[85,84,0,87,126,126,210,125,84,126],
[82,81,123,0,83,83,210,123,124,126],
[82,125,84,127,0,123,210,82,124,126],
[126,127,84,127,87,0,127,169,127,87],
[42,41,0,0,0,83,0,42,43,85],
[0,128,85,87,128,41,168,0,84,84],
[86,125,126,86,86,83,167,126,0,170],
[82,125,84,84,84,123,125,126,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,108,127,103,108,115,107,112],
[101,0,82,88,137,112,83,117,109,105],
[119,128,0,100,137,131,127,136,115,108],
[102,122,110,0,123,116,109,145,143,118],
[83,73,73,87,0,101,91,106,83,74],
[107,98,79,94,109,0,81,132,90,98],
[102,127,83,101,119,129,0,148,120,119],
[95,93,74,65,104,78,62,0,90,96],
[103,101,95,67,127,120,90,120,0,117],
[98,105,102,92,136,112,91,114,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,116,125,129,113,125,113,95],
[95,0,110,110,96,103,106,106,84,96],
[91,100,0,99,133,121,126,104,109,113],
[94,100,111,0,104,148,121,127,101,91],
[85,114,77,106,0,117,113,126,115,103],
[81,107,89,62,93,0,92,89,104,92],
[97,104,84,89,97,118,0,99,82,87],
[85,104,106,83,84,121,111,0,98,96],
[97,126,101,109,95,106,128,112,0,107],
[115,114,97,119,107,118,123,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,116,114,120,129,109,122,104,108],
[85,0,103,96,102,108,85,99,90,88],
[94,107,0,98,112,101,84,109,92,76],
[96,114,112,0,111,110,93,115,86,107],
[90,108,98,99,0,109,103,107,98,98],
[81,102,109,100,101,0,98,90,89,98],
[101,125,126,117,107,112,0,113,99,107],
[88,111,101,95,103,120,97,0,94,92],
[106,120,118,124,112,121,111,116,0,100],
[102,122,134,103,112,112,103,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,106,90,104,119,102,110,107],
[100,0,94,94,100,105,124,99,106,109],
[95,116,0,97,109,108,109,103,106,94],
[104,116,113,0,105,101,129,105,111,107],
[120,110,101,105,0,104,108,94,96,106],
[106,105,102,109,106,0,107,97,114,100],
[91,86,101,81,102,103,0,85,96,100],
[108,111,107,105,116,113,125,0,98,106],
[100,104,104,99,114,96,114,112,0,101],
[103,101,116,103,104,110,110,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,99,99,101,110,92,105,94],
[110,0,104,102,103,103,123,102,128,120],
[111,106,0,105,97,99,109,87,109,99],
[111,108,105,0,109,99,103,113,118,97],
[111,107,113,101,0,105,112,105,114,112],
[109,107,111,111,105,0,108,105,108,107],
[100,87,101,107,98,102,0,95,103,104],
[118,108,123,97,105,105,115,0,116,112],
[105,82,101,92,96,102,107,94,0,103],
[116,90,111,113,98,103,106,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,106,107,113,94,118,111,118],
[102,0,117,92,99,107,94,105,105,117],
[87,93,0,92,94,94,88,100,86,103],
[104,118,118,0,102,100,87,113,111,121],
[103,111,116,108,0,112,105,111,105,119],
[97,103,116,110,98,0,107,119,113,116],
[116,116,122,123,105,103,0,109,109,124],
[92,105,110,97,99,91,101,0,94,116],
[99,105,124,99,105,97,101,116,0,118],
[92,93,107,89,91,94,86,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,117,112,118,115,142,113,102,109],
[77,0,96,95,103,113,102,106,81,81],
[93,114,0,105,111,116,110,103,93,100],
[98,115,105,0,122,130,123,118,111,117],
[92,107,99,88,0,121,107,109,85,113],
[95,97,94,80,89,0,106,95,74,97],
[68,108,100,87,103,104,0,91,84,98],
[97,104,107,92,101,115,119,0,78,111],
[108,129,117,99,125,136,126,132,0,117],
[101,129,110,93,97,113,112,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,120,84,112,123,74,113,109],
[105,0,127,115,119,127,138,125,121,118],
[89,83,0,94,75,111,92,86,92,107],
[90,95,116,0,82,92,132,85,80,109],
[126,91,135,128,0,129,142,109,115,126],
[98,83,99,118,81,0,131,80,117,113],
[87,72,118,78,68,79,0,42,82,100],
[136,85,124,125,101,130,168,0,108,113],
[97,89,118,130,95,93,128,102,0,101],
[101,92,103,101,84,97,110,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,106,99,121,126,122,127,105],
[90,0,110,88,86,101,104,110,109,105],
[98,100,0,95,96,112,110,97,113,100],
[104,122,115,0,107,111,119,113,123,112],
[111,124,114,103,0,109,112,108,124,111],
[89,109,98,99,101,0,115,106,115,99],
[84,106,100,91,98,95,0,101,116,102],
[88,100,113,97,102,104,109,0,118,113],
[83,101,97,87,86,95,94,92,0,94],
[105,105,110,98,99,111,108,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,78,95,115,96,78,95,37,58],
[116,0,116,154,154,154,98,78,115,135],
[132,94,0,114,114,113,58,113,113,94],
[115,56,96,0,134,133,58,95,95,95],
[95,56,96,76,0,151,58,56,93,75],
[114,56,97,77,59,0,78,56,74,58],
[132,112,152,152,152,132,0,112,112,94],
[115,132,97,115,154,154,98,0,95,116],
[173,95,97,115,117,136,98,115,0,78],
[152,75,116,115,135,152,116,94,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,123,92,91,106,114,102,93],
[94,0,98,110,115,96,105,105,98,77],
[83,112,0,119,113,98,137,123,120,114],
[87,100,91,0,111,83,118,116,99,90],
[118,95,97,99,0,107,119,114,110,82],
[119,114,112,127,103,0,126,118,114,86],
[104,105,73,92,91,84,0,97,107,97],
[96,105,87,94,96,92,113,0,87,76],
[108,112,90,111,100,96,103,123,0,95],
[117,133,96,120,128,124,113,134,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,111,120,107,110,117,113,102],
[100,0,109,107,103,99,106,121,92,103],
[93,101,0,96,101,96,99,96,81,91],
[99,103,114,0,101,113,86,102,109,101],
[90,107,109,109,0,101,91,107,99,98],
[103,111,114,97,109,0,117,110,90,106],
[100,104,111,124,119,93,0,116,105,95],
[93,89,114,108,103,100,94,0,91,95],
[97,118,129,101,111,120,105,119,0,104],
[108,107,119,109,112,104,115,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,124,92,60,91,87,71,95],
[118,0,113,147,88,105,85,78,65,103],
[105,97,0,133,88,77,104,98,84,93],
[86,63,77,0,68,62,68,59,59,70],
[118,122,122,142,0,102,140,113,116,99],
[150,105,133,148,108,0,102,87,86,105],
[119,125,106,142,70,108,0,95,76,99],
[123,132,112,151,97,123,115,0,100,112],
[139,145,126,151,94,124,134,110,0,96],
[115,107,117,140,111,105,111,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,84,92,88,109,94,102,90,99],
[112,0,105,117,112,120,116,126,118,112],
[126,105,0,115,97,116,109,120,117,115],
[118,93,95,0,111,113,115,118,105,104],
[122,98,113,99,0,116,104,121,114,106],
[101,90,94,97,94,0,100,107,100,99],
[116,94,101,95,106,110,0,111,107,96],
[108,84,90,92,89,103,99,0,98,95],
[120,92,93,105,96,110,103,112,0,99],
[111,98,95,106,104,111,114,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,113,99,108,93,106,96,113,107],
[122,0,120,109,92,110,120,103,125,112],
[97,90,0,108,95,106,107,107,109,104],
[111,101,102,0,109,95,95,101,118,100],
[102,118,115,101,0,93,105,102,112,99],
[117,100,104,115,117,0,117,117,117,109],
[104,90,103,115,105,93,0,93,93,115],
[114,107,103,109,108,93,117,0,118,96],
[97,85,101,92,98,93,117,92,0,92],
[103,98,106,110,111,101,95,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,117,125,124,114,108,99,106],
[112,0,114,115,122,110,119,104,108,115],
[101,96,0,102,102,109,108,102,96,106],
[93,95,108,0,121,112,101,102,97,100],
[85,88,108,89,0,93,107,85,85,95],
[86,100,101,98,117,0,99,96,83,98],
[96,91,102,109,103,111,0,106,87,120],
[102,106,108,108,125,114,104,0,93,102],
[111,102,114,113,125,127,123,117,0,118],
[104,95,104,110,115,112,90,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,92,111,111,116,112,106,100],
[107,0,116,101,118,105,115,102,110,117],
[108,94,0,97,108,104,109,100,98,113],
[118,109,113,0,119,113,113,102,108,104],
[99,92,102,91,0,100,101,90,96,102],
[99,105,106,97,110,0,105,100,100,105],
[94,95,101,97,109,105,0,97,90,100],
[98,108,110,108,120,110,113,0,103,112],
[104,100,112,102,114,110,120,107,0,112],
[110,93,97,106,108,105,110,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,84,79,82,82,98,97,94,91],
[103,0,91,88,102,104,108,101,100,99],
[126,119,0,96,119,109,126,98,124,111],
[131,122,114,0,115,89,116,119,121,106],
[128,108,91,95,0,101,121,106,111,90],
[128,106,101,121,109,0,100,110,108,98],
[112,102,84,94,89,110,0,98,101,95],
[113,109,112,91,104,100,112,0,112,96],
[116,110,86,89,99,102,109,98,0,108],
[119,111,99,104,120,112,115,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,98,109,97,107,97,97,94],
[107,0,103,107,96,93,86,100,96,92],
[100,107,0,110,104,97,99,109,100,108],
[112,103,100,0,111,104,111,106,106,103],
[101,114,106,99,0,97,111,102,109,108],
[113,117,113,106,113,0,117,123,120,96],
[103,124,111,99,99,93,0,115,116,99],
[113,110,101,104,108,87,95,0,107,102],
[113,114,110,104,101,90,94,103,0,89],
[116,118,102,107,102,114,111,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,127,119,98,102,86,85,111],
[115,0,105,132,123,105,104,93,122,111],
[109,105,0,89,120,120,97,89,110,100],
[83,78,121,0,112,110,96,80,90,81],
[91,87,90,98,0,107,98,67,107,101],
[112,105,90,100,103,0,90,100,104,102],
[108,106,113,114,112,120,0,99,109,106],
[124,117,121,130,143,110,111,0,116,101],
[125,88,100,120,103,106,101,94,0,103],
[99,99,110,129,109,108,104,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,116,99,111,98,90,83,92],
[100,0,96,111,111,112,102,100,98,105],
[103,114,0,107,104,108,106,93,100,101],
[94,99,103,0,103,107,116,94,98,95],
[111,99,106,107,0,111,96,88,108,108],
[99,98,102,103,99,0,99,91,99,96],
[112,108,104,94,114,111,0,88,98,108],
[120,110,117,116,122,119,122,0,101,109],
[127,112,110,112,102,111,112,109,0,101],
[118,105,109,115,102,114,102,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,99,110,104,105,96,95,97],
[117,0,118,109,111,116,98,112,100,105],
[104,92,0,90,108,101,96,99,98,100],
[111,101,120,0,109,112,103,96,99,111],
[100,99,102,101,0,99,95,90,104,95],
[106,94,109,98,111,0,94,95,95,99],
[105,112,114,107,115,116,0,101,100,112],
[114,98,111,114,120,115,109,0,105,109],
[115,110,112,111,106,115,110,105,0,107],
[113,105,110,99,115,111,98,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,119,98,102,125,104,90,107,112],
[115,0,115,114,96,110,117,103,109,110],
[91,95,0,98,90,100,82,97,104,101],
[112,96,112,0,95,118,95,82,102,110],
[108,114,120,115,0,106,120,104,105,104],
[85,100,110,92,104,0,87,88,106,101],
[106,93,128,115,90,123,0,114,96,109],
[120,107,113,128,106,122,96,0,113,114],
[103,101,106,108,105,104,114,97,0,90],
[98,100,109,100,106,109,101,96,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,123,102,112,100,105,104,106],
[100,0,104,109,105,101,95,110,112,97],
[106,106,0,117,107,101,110,106,115,102],
[87,101,93,0,89,94,96,101,97,88],
[108,105,103,121,0,120,103,112,110,97],
[98,109,109,116,90,0,101,104,101,96],
[110,115,100,114,107,109,0,113,96,94],
[105,100,104,109,98,106,97,0,99,98],
[106,98,95,113,100,109,114,111,0,95],
[104,113,108,122,113,114,116,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,114,99,98,92,102,101,84],
[113,0,78,117,94,109,88,99,109,85],
[112,132,0,118,105,122,107,118,120,104],
[96,93,92,0,94,96,83,87,101,82],
[111,116,105,116,0,105,91,101,115,99],
[112,101,88,114,105,0,79,124,113,110],
[118,122,103,127,119,131,0,116,132,107],
[108,111,92,123,109,86,94,0,103,87],
[109,101,90,109,95,97,78,107,0,107],
[126,125,106,128,111,100,103,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,103,108,103,101,111,103,90],
[115,0,104,99,112,100,110,112,100,96],
[111,106,0,103,114,107,104,108,105,97],
[107,111,107,0,105,108,110,108,108,108],
[102,98,96,105,0,89,102,102,93,97],
[107,110,103,102,121,0,98,121,104,107],
[109,100,106,100,108,112,0,105,110,104],
[99,98,102,102,108,89,105,0,96,96],
[107,110,105,102,117,106,100,114,0,101],
[120,114,113,102,113,103,106,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,96,91,100,104,113,110,103],
[105,0,81,94,90,97,106,104,114,109],
[112,129,0,102,107,107,127,117,120,119],
[114,116,108,0,105,115,117,124,127,117],
[119,120,103,105,0,119,132,122,124,112],
[110,113,103,95,91,0,116,123,119,102],
[106,104,83,93,78,94,0,100,104,97],
[97,106,93,86,88,87,110,0,105,104],
[100,96,90,83,86,91,106,105,0,101],
[107,101,91,93,98,108,113,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,118,103,122,114,111,110,107],
[92,0,95,106,82,101,121,98,92,97],
[90,115,0,101,106,98,111,99,92,110],
[92,104,109,0,103,109,115,103,106,103],
[107,128,104,107,0,119,102,104,109,101],
[88,109,112,101,91,0,110,101,99,110],
[96,89,99,95,108,100,0,105,93,102],
[99,112,111,107,106,109,105,0,96,101],
[100,118,118,104,101,111,117,114,0,107],
[103,113,100,107,109,100,108,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,107,103,112,121,118,96,106],
[104,0,85,90,90,85,95,96,92,86],
[100,125,0,107,125,115,124,116,98,107],
[103,120,103,0,116,103,130,112,89,106],
[107,120,85,94,0,116,109,105,107,98],
[98,125,95,107,94,0,114,117,91,97],
[89,115,86,80,101,96,0,107,92,84],
[92,114,94,98,105,93,103,0,88,98],
[114,118,112,121,103,119,118,122,0,106],
[104,124,103,104,112,113,126,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,102,130,104,110,115,113,119],
[101,0,105,102,104,79,93,92,97,101],
[89,105,0,92,106,99,100,105,98,102],
[108,108,118,0,129,112,115,121,99,130],
[80,106,104,81,0,79,91,105,87,108],
[106,131,111,98,131,0,109,120,114,127],
[100,117,110,95,119,101,0,107,93,105],
[95,118,105,89,105,90,103,0,111,113],
[97,113,112,111,123,96,117,99,0,111],
[91,109,108,80,102,83,105,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,105,116,115,114,124,126,110],
[93,0,98,86,101,92,107,111,117,111],
[101,112,0,100,112,110,123,114,127,104],
[105,124,110,0,120,100,121,127,132,133],
[94,109,98,90,0,105,105,113,110,109],
[95,118,100,110,105,0,116,125,122,122],
[96,103,87,89,105,94,0,113,109,103],
[86,99,96,83,97,85,97,0,108,106],
[84,93,83,78,100,88,101,102,0,91],
[100,99,106,77,101,88,107,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,115,92,113,102,112,109,94],
[93,0,92,96,92,105,88,99,93,91],
[101,118,0,108,107,123,97,110,114,107],
[95,114,102,0,106,109,104,97,104,104],
[118,118,103,104,0,114,106,104,109,97],
[97,105,87,101,96,0,90,92,100,96],
[108,122,113,106,104,120,0,106,109,108],
[98,111,100,113,106,118,104,0,110,106],
[101,117,96,106,101,110,101,100,0,101],
[116,119,103,106,113,114,102,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,93,93,102,116,105,105,99],
[98,0,89,92,107,86,110,111,114,111],
[104,121,0,110,117,103,118,127,106,116],
[117,118,100,0,116,118,116,125,120,113],
[117,103,93,94,0,103,119,123,105,103],
[108,124,107,92,107,0,111,129,106,115],
[94,100,92,94,91,99,0,111,97,109],
[105,99,83,85,87,81,99,0,102,104],
[105,96,104,90,105,104,113,108,0,104],
[111,99,94,97,107,95,101,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,122,98,113,99,105,124,118],
[113,0,102,121,93,121,119,102,116,118],
[113,108,0,112,112,130,109,98,130,116],
[88,89,98,0,93,116,115,94,110,97],
[112,117,98,117,0,117,109,84,112,112],
[97,89,80,94,93,0,108,98,101,111],
[111,91,101,95,101,102,0,95,107,102],
[105,108,112,116,126,112,115,0,114,115],
[86,94,80,100,98,109,103,96,0,106],
[92,92,94,113,98,99,108,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,108,120,109,117,107,103,111],
[102,0,125,111,112,107,103,108,121,109],
[98,85,0,80,97,87,88,96,120,106],
[102,99,130,0,115,106,110,110,115,101],
[90,98,113,95,0,88,83,105,100,88],
[101,103,123,104,122,0,98,107,116,105],
[93,107,122,100,127,112,0,135,121,123],
[103,102,114,100,105,103,75,0,127,102],
[107,89,90,95,110,94,89,83,0,80],
[99,101,104,109,122,105,87,108,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,106,111,120,112,109,106,124],
[105,0,103,110,100,107,112,115,120,104],
[97,107,0,114,109,109,102,107,104,105],
[104,100,96,0,105,114,111,115,106,100],
[99,110,101,105,0,108,101,109,104,107],
[90,103,101,96,102,0,102,107,111,99],
[98,98,108,99,109,108,0,120,112,101],
[101,95,103,95,101,103,90,0,105,96],
[104,90,106,104,106,99,98,105,0,81],
[86,106,105,110,103,111,109,114,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,93,120,136,114,110,101,96],
[102,0,130,111,123,117,104,103,105,97],
[94,80,0,92,101,110,104,87,92,88],
[117,99,118,0,105,124,125,94,98,111],
[90,87,109,105,0,116,115,96,102,94],
[74,93,100,86,94,0,101,84,93,79],
[96,106,106,85,95,109,0,95,94,95],
[100,107,123,116,114,126,115,0,105,93],
[109,105,118,112,108,117,116,105,0,98],
[114,113,122,99,116,131,115,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,81,112,101,86,94,120,98,98],
[105,0,84,119,104,94,95,119,97,102],
[129,126,0,133,106,123,123,118,103,105],
[98,91,77,0,81,103,69,103,90,91],
[109,106,104,129,0,113,105,120,96,94],
[124,116,87,107,97,0,99,126,103,104],
[116,115,87,141,105,111,0,122,99,100],
[90,91,92,107,90,84,88,0,86,84],
[112,113,107,120,114,107,111,124,0,87],
[112,108,105,119,116,106,110,126,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,112,141,121,119,127,114,108],
[118,0,98,116,127,116,124,120,120,125],
[113,112,0,115,108,102,116,129,133,145],
[98,94,95,0,117,91,85,127,99,121],
[69,83,102,93,0,93,102,117,126,109],
[89,94,108,119,117,0,117,131,103,111],
[91,86,94,125,108,93,0,97,95,86],
[83,90,81,83,93,79,113,0,80,95],
[96,90,77,111,84,107,115,130,0,124],
[102,85,65,89,101,99,124,115,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,120,124,115,119,124,112,103,103],
[84,0,104,112,98,123,109,100,98,105],
[90,106,0,116,107,108,113,94,101,96],
[86,98,94,0,107,103,105,104,96,88],
[95,112,103,103,0,120,104,102,103,96],
[91,87,102,107,90,0,107,94,97,96],
[86,101,97,105,106,103,0,101,90,90],
[98,110,116,106,108,116,109,0,97,94],
[107,112,109,114,107,113,120,113,0,94],
[107,105,114,122,114,114,120,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,99,108,95,97,114,97,90],
[99,0,95,99,105,109,101,99,90,95],
[108,115,0,96,107,107,125,115,92,117],
[111,111,114,0,116,112,102,111,105,108],
[102,105,103,94,0,109,91,99,107,107],
[115,101,103,98,101,0,89,102,87,104],
[113,109,85,108,119,121,0,109,105,103],
[96,111,95,99,111,108,101,0,97,98],
[113,120,118,105,103,123,105,113,0,110],
[120,115,93,102,103,106,107,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,120,116,127,129,101,105,111],
[105,0,99,102,115,111,111,108,100,110],
[109,111,0,120,121,127,114,104,110,106],
[90,108,90,0,96,113,108,92,94,92],
[94,95,89,114,0,117,98,103,97,112],
[83,99,83,97,93,0,89,85,89,103],
[81,99,96,102,112,121,0,102,90,116],
[109,102,106,118,107,125,108,0,109,97],
[105,110,100,116,113,121,120,101,0,112],
[99,100,104,118,98,107,94,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,102,99,110,105,103,103,115],
[118,0,125,113,100,119,101,111,111,111],
[100,85,0,103,95,97,97,107,101,93],
[108,97,107,0,87,107,95,110,96,98],
[111,110,115,123,0,111,114,116,119,105],
[100,91,113,103,99,0,96,106,102,99],
[105,109,113,115,96,114,0,120,106,110],
[107,99,103,100,94,104,90,0,94,105],
[107,99,109,114,91,108,104,116,0,104],
[95,99,117,112,105,111,100,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,127,108,97,110,113,97,108,105],
[111,0,131,107,122,108,116,104,105,106],
[83,79,0,109,102,102,76,108,91,94],
[102,103,101,0,119,113,114,121,115,111],
[113,88,108,91,0,98,91,110,101,99],
[100,102,108,97,112,0,96,91,92,101],
[97,94,134,96,119,114,0,100,112,97],
[113,106,102,89,100,119,110,0,104,90],
[102,105,119,95,109,118,98,106,0,96],
[105,104,116,99,111,109,113,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,130,112,110,114,80,96,114],
[97,0,128,130,114,96,96,114,65,114],
[98,82,0,82,96,78,116,80,80,82],
[80,80,128,0,94,93,98,62,81,114],
[98,96,114,116,0,78,115,30,66,98],
[100,114,132,117,132,0,164,84,132,116],
[96,114,94,112,95,46,0,95,63,96],
[130,96,130,148,180,126,115,0,99,164],
[114,145,130,129,144,78,147,111,0,131],
[96,96,128,96,112,94,114,46,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,99,117,130,92,107,123,106],
[102,0,104,98,102,114,108,94,113,84],
[103,106,0,92,96,114,100,108,122,97],
[111,112,118,0,101,114,103,94,109,99],
[93,108,114,109,0,123,83,111,118,110],
[80,96,96,96,87,0,92,95,121,88],
[118,102,110,107,127,118,0,114,104,106],
[103,116,102,116,99,115,96,0,113,97],
[87,97,88,101,92,89,106,97,0,95],
[104,126,113,111,100,122,104,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,106,121,108,108,117,108,107],
[107,0,110,105,116,104,111,114,102,98],
[110,100,0,106,112,103,103,108,95,102],
[104,105,104,0,119,108,106,110,102,96],
[89,94,98,91,0,102,92,105,99,92],
[102,106,107,102,108,0,105,119,115,103],
[102,99,107,104,118,105,0,107,112,99],
[93,96,102,100,105,91,103,0,103,90],
[102,108,115,108,111,95,98,107,0,96],
[103,112,108,114,118,107,111,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,106,93,90,109,113,122,106],
[106,0,103,95,101,94,95,104,118,102],
[93,107,0,101,86,85,91,108,88,107],
[104,115,109,0,81,95,81,104,104,125],
[117,109,124,129,0,97,99,119,120,125],
[120,116,125,115,113,0,97,129,114,119],
[101,115,119,129,111,113,0,120,104,116],
[97,106,102,106,91,81,90,0,100,105],
[88,92,122,106,90,96,106,110,0,116],
[104,108,103,85,85,91,94,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,104,103,105,90,94,95,96],
[110,0,121,114,110,119,95,94,111,110],
[96,89,0,102,88,108,93,99,105,97],
[106,96,108,0,99,110,112,110,116,100],
[107,100,122,111,0,118,93,95,108,103],
[105,91,102,100,92,0,94,106,107,98],
[120,115,117,98,117,116,0,105,122,102],
[116,116,111,100,115,104,105,0,118,101],
[115,99,105,94,102,103,88,92,0,103],
[114,100,113,110,107,112,108,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,114,113,112,110,91,113,108],
[90,0,103,125,109,111,96,103,122,115],
[117,107,0,110,112,114,108,99,114,109],
[96,85,100,0,102,102,93,82,95,103],
[97,101,98,108,0,110,100,100,99,123],
[98,99,96,108,100,0,93,88,114,121],
[100,114,102,117,110,117,0,102,112,118],
[119,107,111,128,110,122,108,0,100,113],
[97,88,96,115,111,96,98,110,0,106],
[102,95,101,107,87,89,92,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,108,89,95,120,95,106,104],
[106,0,101,102,109,105,122,95,108,111],
[96,109,0,112,107,113,114,97,95,117],
[102,108,98,0,109,104,103,93,123,102],
[121,101,103,101,0,107,108,101,122,110],
[115,105,97,106,103,0,134,112,123,112],
[90,88,96,107,102,76,0,88,111,89],
[115,115,113,117,109,98,122,0,131,121],
[104,102,115,87,88,87,99,79,0,92],
[106,99,93,108,100,98,121,89,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,96,109,118,104,109,99,103],
[106,0,106,104,104,125,98,123,93,115],
[109,104,0,105,104,109,118,109,99,101],
[114,106,105,0,118,133,105,126,104,105],
[101,106,106,92,0,121,97,112,101,110],
[92,85,101,77,89,0,103,103,94,95],
[106,112,92,105,113,107,0,104,96,112],
[101,87,101,84,98,107,106,0,105,91],
[111,117,111,106,109,116,114,105,0,112],
[107,95,109,105,100,115,98,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,132,132,104,117,108,109,101],
[94,0,116,130,127,99,100,114,108,103],
[98,94,0,132,122,93,96,106,103,85],
[78,80,78,0,98,89,74,86,75,85],
[78,83,88,112,0,78,85,83,89,93],
[106,111,117,121,132,0,96,108,109,94],
[93,110,114,136,125,114,0,108,98,108],
[102,96,104,124,127,102,102,0,83,77],
[101,102,107,135,121,101,112,127,0,98],
[109,107,125,125,117,116,102,133,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,120,112,103,115,105,96,96],
[104,0,115,109,116,89,119,105,105,107],
[91,95,0,101,98,86,99,111,87,93],
[90,101,109,0,102,95,102,100,91,101],
[98,94,112,108,0,94,96,114,89,98],
[107,121,124,115,116,0,107,119,96,108],
[95,91,111,108,114,103,0,106,96,102],
[105,105,99,110,96,91,104,0,106,106],
[114,105,123,119,121,114,114,104,0,121],
[114,103,117,109,112,102,108,104,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,105,106,111,114,111,102,98],
[98,0,98,94,93,103,106,101,102,94],
[95,112,0,111,109,109,114,99,113,106],
[105,116,99,0,115,109,105,118,115,111],
[104,117,101,95,0,102,97,106,105,109],
[99,107,101,101,108,0,102,97,98,106],
[96,104,96,105,113,108,0,113,119,111],
[99,109,111,92,104,113,97,0,102,94],
[108,108,97,95,105,112,91,108,0,91],
[112,116,104,99,101,104,99,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,141,120,72,50,70,118,74,46],
[142,0,143,119,97,122,98,120,98,122],
[69,67,0,94,98,98,94,69,98,94],
[90,91,116,0,95,50,93,69,73,69],
[138,113,112,115,0,94,93,138,24,115],
[160,88,112,160,116,0,115,92,118,93],
[140,112,116,117,117,95,0,139,74,92],
[92,90,141,141,72,118,71,0,72,68],
[136,112,112,137,186,92,136,138,0,116],
[164,88,116,141,95,117,118,142,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,80,108,103,112,115,87,101,92],
[95,0,97,88,94,110,107,91,103,87],
[130,113,0,106,114,129,141,121,103,114],
[102,122,104,0,120,135,127,109,105,129],
[107,116,96,90,0,110,106,103,98,106],
[98,100,81,75,100,0,111,90,91,97],
[95,103,69,83,104,99,0,87,90,95],
[123,119,89,101,107,120,123,0,93,114],
[109,107,107,105,112,119,120,117,0,111],
[118,123,96,81,104,113,115,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,90,94,96,106,88,89,101],
[110,0,124,97,98,98,112,104,96,108],
[106,86,0,93,101,94,92,99,103,113],
[120,113,117,0,109,114,113,105,96,110],
[116,112,109,101,0,96,103,106,88,111],
[114,112,116,96,114,0,122,117,102,109],
[104,98,118,97,107,88,0,100,98,101],
[122,106,111,105,104,93,110,0,108,122],
[121,114,107,114,122,108,112,102,0,119],
[109,102,97,100,99,101,109,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,117,98,109,98,103,119,93,122],
[83,0,93,55,72,70,78,83,93,98],
[93,117,0,97,107,82,92,127,110,124],
[112,155,113,0,105,110,105,122,104,120],
[101,138,103,105,0,116,117,120,113,141],
[112,140,128,100,94,0,103,111,108,121],
[107,132,118,105,93,107,0,117,106,116],
[91,127,83,88,90,99,93,0,98,114],
[117,117,100,106,97,102,104,112,0,108],
[88,112,86,90,69,89,94,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,125,111,108,131,107,109,127],
[90,0,101,98,99,92,93,92,79,116],
[106,109,0,117,120,97,123,78,96,103],
[85,112,93,0,109,104,113,86,96,102],
[99,111,90,101,0,96,117,95,107,106],
[102,118,113,106,114,0,109,84,107,116],
[79,117,87,97,93,101,0,96,99,72],
[103,118,132,124,115,126,114,0,104,100],
[101,131,114,114,103,103,111,106,0,97],
[83,94,107,108,104,94,138,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,103,101,100,107,98,89,100],
[109,0,104,110,115,100,122,111,109,104],
[118,106,0,100,111,104,115,109,106,110],
[107,100,110,0,108,104,110,108,90,106],
[109,95,99,102,0,98,107,95,96,102],
[110,110,106,106,112,0,119,115,108,105],
[103,88,95,100,103,91,0,99,88,90],
[112,99,101,102,115,95,111,0,97,101],
[121,101,104,120,114,102,122,113,0,103],
[110,106,100,104,108,105,120,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,104,106,111,104,105,116,99],
[104,0,102,102,103,103,118,101,117,98],
[108,108,0,101,107,101,108,102,113,100],
[106,108,109,0,107,104,104,97,106,102],
[104,107,103,103,0,103,108,105,106,96],
[99,107,109,106,107,0,119,103,108,106],
[106,92,102,106,102,91,0,104,109,96],
[105,109,108,113,105,107,106,0,106,94],
[94,93,97,104,104,102,101,104,0,96],
[111,112,110,108,114,104,114,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,120,97,101,121,110,93,110,97],
[109,0,102,97,94,122,107,91,116,117],
[90,108,0,89,95,128,105,93,102,95],
[113,113,121,0,120,138,123,107,111,103],
[109,116,115,90,0,123,109,94,114,102],
[89,88,82,72,87,0,92,80,91,71],
[100,103,105,87,101,118,0,84,107,95],
[117,119,117,103,116,130,126,0,100,115],
[100,94,108,99,96,119,103,110,0,103],
[113,93,115,107,108,139,115,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,85,139,69,121,138,103,157,103],
[90,0,70,106,71,87,124,87,90,106],
[125,140,0,90,122,106,157,105,125,157],
[71,104,120,0,140,104,120,103,71,138],
[141,139,88,70,0,140,105,105,123,88],
[89,123,104,106,70,0,103,103,105,104],
[72,86,53,90,105,107,0,105,90,103],
[107,123,105,107,105,107,105,0,107,105],
[53,120,85,139,87,105,120,103,0,103],
[107,104,53,72,122,106,107,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,87,93,82,102,90,85,96],
[120,0,103,97,109,100,99,105,109,100],
[114,107,0,100,110,97,115,109,106,97],
[123,113,110,0,108,106,119,99,110,111],
[117,101,100,102,0,110,104,103,106,104],
[128,110,113,104,100,0,108,102,109,102],
[108,111,95,91,106,102,0,109,101,96],
[120,105,101,111,107,108,101,0,99,92],
[125,101,104,100,104,101,109,111,0,101],
[114,110,113,99,106,108,114,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,83,92,98,89,86,111,94],
[109,0,105,107,120,103,101,93,112,112],
[121,105,0,99,120,104,119,112,126,115],
[127,103,111,0,120,111,113,98,138,112],
[118,90,90,90,0,103,90,95,110,86],
[112,107,106,99,107,0,99,107,122,99],
[121,109,91,97,120,111,0,106,118,101],
[124,117,98,112,115,103,104,0,122,93],
[99,98,84,72,100,88,92,88,0,82],
[116,98,95,98,124,111,109,117,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,101,110,105,102,120,105,104],
[106,0,100,100,103,109,111,115,94,112],
[107,110,0,101,110,102,110,117,100,114],
[109,110,109,0,108,114,106,109,108,105],
[100,107,100,102,0,107,98,120,109,104],
[105,101,108,96,103,0,101,122,104,99],
[108,99,100,104,112,109,0,113,109,111],
[90,95,93,101,90,88,97,0,89,87],
[105,116,110,102,101,106,101,121,0,114],
[106,98,96,105,106,111,99,123,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,109,105,105,96,103,101,92],
[111,0,107,109,105,112,103,93,107,111],
[111,103,0,107,100,111,97,92,103,101],
[101,101,103,0,108,104,99,94,107,109],
[105,105,110,102,0,106,104,105,108,112],
[105,98,99,106,104,0,95,108,113,99],
[114,107,113,111,106,115,0,105,115,103],
[107,117,118,116,105,102,105,0,102,98],
[109,103,107,103,102,97,95,108,0,110],
[118,99,109,101,98,111,107,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,68,111,77,96,67,78,87,84],
[103,0,67,64,52,59,61,51,60,71],
[142,143,0,118,90,118,102,103,87,110],
[99,146,92,0,98,125,71,99,96,117],
[133,158,120,112,0,101,121,82,112,111],
[114,151,92,85,109,0,104,105,122,106],
[143,149,108,139,89,106,0,91,121,131],
[132,159,107,111,128,105,119,0,128,150],
[123,150,123,114,98,88,89,82,0,100],
[126,139,100,93,99,104,79,60,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,101,109,105,104,107,103,99],
[109,0,108,93,106,97,107,109,110,101],
[115,102,0,92,99,103,111,119,104,97],
[109,117,118,0,116,111,128,114,112,102],
[101,104,111,94,0,104,104,110,99,98],
[105,113,107,99,106,0,120,120,110,106],
[106,103,99,82,106,90,0,110,109,90],
[103,101,91,96,100,90,100,0,98,97],
[107,100,106,98,111,100,101,112,0,104],
[111,109,113,108,112,104,120,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,119,125,116,99,103,103,132,121],
[83,0,102,98,100,71,106,100,115,117],
[91,108,0,104,86,89,84,85,101,127],
[85,112,106,0,84,86,118,110,118,125],
[94,110,124,126,0,79,128,126,127,132],
[111,139,121,124,131,0,102,124,136,130],
[107,104,126,92,82,108,0,106,105,120],
[107,110,125,100,84,86,104,0,100,127],
[78,95,109,92,83,74,105,110,0,124],
[89,93,83,85,78,80,90,83,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,106,105,110,103,108,112,106],
[106,0,114,100,104,103,106,113,103,110],
[107,96,0,109,96,104,98,105,99,110],
[104,110,101,0,111,107,97,112,108,111],
[105,106,114,99,0,107,97,101,112,107],
[100,107,106,103,103,0,105,108,114,107],
[107,104,112,113,113,105,0,113,115,103],
[102,97,105,98,109,102,97,0,111,105],
[98,107,111,102,98,96,95,99,0,113],
[104,100,100,99,103,103,107,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,94,112,111,118,112,108,106],
[104,0,108,95,91,101,99,95,114,96],
[92,102,0,81,104,99,107,101,97,94],
[116,115,129,0,108,104,134,123,123,110],
[98,119,106,102,0,102,118,110,117,96],
[99,109,111,106,108,0,120,114,99,101],
[92,111,103,76,92,90,0,93,98,97],
[98,115,109,87,100,96,117,0,110,105],
[102,96,113,87,93,111,112,100,0,85],
[104,114,116,100,114,109,113,105,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,103,121,100,123,90,109,96],
[100,0,110,100,110,96,113,108,108,102],
[108,100,0,100,124,106,120,106,101,106],
[107,110,110,0,123,113,128,102,126,97],
[89,100,86,87,0,105,120,96,98,95],
[110,114,104,97,105,0,115,114,102,103],
[87,97,90,82,90,95,0,97,89,90],
[120,102,104,108,114,96,113,0,111,97],
[101,102,109,84,112,108,121,99,0,111],
[114,108,104,113,115,107,120,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,91,94,86,99,103,113,106],
[115,0,100,104,97,96,98,101,115,109],
[104,110,0,109,94,103,104,99,113,106],
[119,106,101,0,109,97,102,99,106,105],
[116,113,116,101,0,107,105,99,114,103],
[124,114,107,113,103,0,109,110,122,110],
[111,112,106,108,105,101,0,111,114,122],
[107,109,111,111,111,100,99,0,111,110],
[97,95,97,104,96,88,96,99,0,103],
[104,101,104,105,107,100,88,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,122,100,102,103,101,105,106],
[95,0,107,107,104,106,101,98,99,106],
[94,103,0,108,105,100,109,92,103,105],
[88,103,102,0,101,96,100,94,97,101],
[110,106,105,109,0,105,108,100,105,107],
[108,104,110,114,105,0,102,102,102,103],
[107,109,101,110,102,108,0,104,102,110],
[109,112,118,116,110,108,106,0,105,110],
[105,111,107,113,105,108,108,105,0,105],
[104,104,105,109,103,107,100,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,106,119,107,110,114,111,105,109],
[88,0,108,123,113,115,106,105,104,109],
[104,102,0,125,111,101,107,103,107,108],
[91,87,85,0,101,97,85,76,87,95],
[103,97,99,109,0,104,92,84,114,104],
[100,95,109,113,106,0,113,103,100,101],
[96,104,103,125,118,97,0,97,104,99],
[99,105,107,134,126,107,113,0,105,113],
[105,106,103,123,96,110,106,105,0,108],
[101,101,102,115,106,109,111,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,85,110,99,110,102,104,104,111],
[93,0,108,99,90,90,94,105,106,97],
[125,102,0,119,112,119,112,117,114,113],
[100,111,91,0,101,105,95,104,105,103],
[111,120,98,109,0,114,100,111,102,103],
[100,120,91,105,96,0,109,115,109,100],
[108,116,98,115,110,101,0,111,118,96],
[106,105,93,106,99,95,99,0,93,90],
[106,104,96,105,108,101,92,117,0,96],
[99,113,97,107,107,110,114,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,123,101,113,102,93,97,110],
[110,0,107,121,97,117,115,88,105,101],
[98,103,0,114,95,113,95,108,101,106],
[87,89,96,0,86,98,88,96,94,103],
[109,113,115,124,0,114,106,114,102,119],
[97,93,97,112,96,0,102,90,109,119],
[108,95,115,122,104,108,0,104,100,96],
[117,122,102,114,96,120,106,0,109,101],
[113,105,109,116,108,101,110,101,0,107],
[100,109,104,107,91,91,114,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,94,102,97,98,106,111,95],
[118,0,110,119,121,124,124,124,101,106],
[118,100,0,113,122,126,113,119,121,94],
[116,91,97,0,115,112,111,109,115,106],
[108,89,88,95,0,114,98,111,108,86],
[113,86,84,98,96,0,97,102,83,99],
[112,86,97,99,112,113,0,111,97,93],
[104,86,91,101,99,108,99,0,104,95],
[99,109,89,95,102,127,113,106,0,91],
[115,104,116,104,124,111,117,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,86,118,59,88,118,87,58,118],
[93,0,151,58,122,118,89,121,121,89],
[124,59,0,89,62,89,89,58,58,89],
[92,152,121,0,92,180,150,179,120,121],
[151,88,148,118,0,119,149,149,89,119],
[122,92,121,30,91,0,121,121,93,59],
[92,121,121,60,61,89,0,179,61,89],
[123,89,152,31,61,89,31,0,61,89],
[152,89,152,90,121,117,149,149,0,89],
[92,121,121,89,91,151,121,121,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,125,110,121,126,114,109,114],
[87,0,95,108,95,101,108,98,87,105],
[105,115,0,119,114,125,123,116,110,115],
[85,102,91,0,104,116,103,104,97,96],
[100,115,96,106,0,108,130,110,104,113],
[89,109,85,94,102,0,119,98,94,111],
[84,102,87,107,80,91,0,97,90,90],
[96,112,94,106,100,112,113,0,87,117],
[101,123,100,113,106,116,120,123,0,118],
[96,105,95,114,97,99,120,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,100,98,107,98,114,108,113],
[105,0,100,94,87,107,89,109,98,102],
[105,110,0,115,98,112,107,114,116,124],
[110,116,95,0,96,97,88,106,108,108],
[112,123,112,114,0,108,96,118,115,112],
[103,103,98,113,102,0,112,115,119,109],
[112,121,103,122,114,98,0,116,113,114],
[96,101,96,104,92,95,94,0,95,105],
[102,112,94,102,95,91,97,115,0,107],
[97,108,86,102,98,101,96,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,100,98,109,91,94,92,102],
[114,0,94,109,104,112,95,92,102,100],
[110,116,0,119,109,110,107,102,107,105],
[110,101,91,0,114,123,97,101,103,101],
[112,106,101,96,0,121,104,101,116,102],
[101,98,100,87,89,0,96,89,109,98],
[119,115,103,113,106,114,0,109,120,118],
[116,118,108,109,109,121,101,0,113,111],
[118,108,103,107,94,101,90,97,0,97],
[108,110,105,109,108,112,92,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,108,107,104,99,117,100,114],
[98,0,97,106,106,106,93,99,103,96],
[93,113,0,107,106,106,115,107,107,111],
[102,104,103,0,118,98,99,90,104,98],
[103,104,104,92,0,96,98,92,112,106],
[106,104,104,112,114,0,96,104,106,103],
[111,117,95,111,112,114,0,95,113,108],
[93,111,103,120,118,106,115,0,113,101],
[110,107,103,106,98,104,97,97,0,103],
[96,114,99,112,104,107,102,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,85,103,105,85,93,91,97,89],
[120,0,107,103,106,108,109,103,110,119],
[125,103,0,112,106,102,120,105,110,116],
[107,107,98,0,107,100,101,109,110,99],
[105,104,104,103,0,95,102,96,97,105],
[125,102,108,110,115,0,116,108,119,127],
[117,101,90,109,108,94,0,102,96,107],
[119,107,105,101,114,102,108,0,117,114],
[113,100,100,100,113,91,114,93,0,100],
[121,91,94,111,105,83,103,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,106,90,97,96,98,113,107],
[116,0,99,116,119,105,112,114,113,104],
[111,111,0,114,112,108,110,111,105,107],
[104,94,96,0,104,97,105,101,102,92],
[120,91,98,106,0,110,106,105,96,111],
[113,105,102,113,100,0,106,108,98,101],
[114,98,100,105,104,104,0,98,101,102],
[112,96,99,109,105,102,112,0,101,102],
[97,97,105,108,114,112,109,109,0,101],
[103,106,103,118,99,109,108,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,104,98,102,108,123,105,104],
[105,0,89,109,99,106,103,113,118,94],
[120,121,0,111,107,107,112,124,131,104],
[106,101,99,0,115,105,122,122,103,105],
[112,111,103,95,0,106,111,103,111,103],
[108,104,103,105,104,0,117,126,118,115],
[102,107,98,88,99,93,0,110,110,94],
[87,97,86,88,107,84,100,0,101,98],
[105,92,79,107,99,92,100,109,0,92],
[106,116,106,105,107,95,116,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,107,96,115,136,113,120,89,105],
[122,0,116,129,130,105,120,139,117,104],
[103,94,0,114,115,140,123,126,100,94],
[114,81,96,0,124,122,117,120,101,103],
[95,80,95,86,0,117,98,116,83,86],
[74,105,70,88,93,0,120,103,82,57],
[97,90,87,93,112,90,0,101,97,82],
[90,71,84,90,94,107,109,0,89,79],
[121,93,110,109,127,128,113,121,0,91],
[105,106,116,107,124,153,128,131,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,105,34,69,105,140,34,69],
[176,0,140,106,69,70,140,106,69,69],
[175,70,0,70,70,34,106,105,34,34],
[105,104,140,0,104,140,210,140,69,105],
[176,141,140,106,0,106,174,142,105,105],
[141,140,176,70,104,0,175,105,34,106],
[105,70,104,0,36,35,0,106,0,69],
[70,104,105,70,68,105,104,0,34,105],
[176,141,176,141,105,176,210,176,0,175],
[141,141,176,105,105,104,141,105,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,102,112,138,103,115,112,108],
[96,0,91,90,97,131,116,110,105,105],
[97,119,0,100,110,119,110,123,110,112],
[108,120,110,0,105,118,118,125,110,102],
[98,113,100,105,0,119,109,113,106,100],
[72,79,91,92,91,0,104,98,94,83],
[107,94,100,92,101,106,0,111,85,105],
[95,100,87,85,97,112,99,0,96,103],
[98,105,100,100,104,116,125,114,0,110],
[102,105,98,108,110,127,105,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,103,98,110,100,92,91,97],
[102,0,93,109,95,106,97,90,94,97],
[98,117,0,114,96,107,98,99,103,107],
[107,101,96,0,96,108,98,105,103,94],
[112,115,114,114,0,113,106,109,106,105],
[100,104,103,102,97,0,88,88,85,102],
[110,113,112,112,104,122,0,105,105,105],
[118,120,111,105,101,122,105,0,107,100],
[119,116,107,107,104,125,105,103,0,103],
[113,113,103,116,105,108,105,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,99,104,112,96,92,105,109],
[98,0,104,92,95,104,94,92,104,103],
[99,106,0,103,102,119,94,93,102,100],
[111,118,107,0,116,115,105,100,106,119],
[106,115,108,94,0,107,100,97,87,96],
[98,106,91,95,103,0,100,89,103,101],
[114,116,116,105,110,110,0,96,111,107],
[118,118,117,110,113,121,114,0,105,128],
[105,106,108,104,123,107,99,105,0,94],
[101,107,110,91,114,109,103,82,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,109,104,108,107,107,92,109],
[103,0,98,112,98,100,102,105,87,97],
[94,112,0,103,96,99,100,118,88,103],
[101,98,107,0,104,110,101,102,107,102],
[106,112,114,106,0,108,104,111,102,110],
[102,110,111,100,102,0,104,118,97,98],
[103,108,110,109,106,106,0,108,97,92],
[103,105,92,108,99,92,102,0,97,96],
[118,123,122,103,108,113,113,113,0,104],
[101,113,107,108,100,112,118,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,112,112,117,109,89,112,104],
[98,0,97,114,107,115,91,89,100,81],
[108,113,0,115,118,112,91,92,111,103],
[98,96,95,0,93,112,99,99,105,100],
[98,103,92,117,0,115,113,107,108,103],
[93,95,98,98,95,0,98,89,100,84],
[101,119,119,111,97,112,0,108,118,104],
[121,121,118,111,103,121,102,0,113,116],
[98,110,99,105,102,110,92,97,0,94],
[106,129,107,110,107,126,106,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,105,104,99,94,103,100,109],
[103,0,107,110,109,94,107,106,117,118],
[113,103,0,119,99,100,100,103,104,101],
[105,100,91,0,95,96,93,89,102,97],
[106,101,111,115,0,97,106,106,117,109],
[111,116,110,114,113,0,112,105,116,127],
[116,103,110,117,104,98,0,100,121,105],
[107,104,107,121,104,105,110,0,111,120],
[110,93,106,108,93,94,89,99,0,92],
[101,92,109,113,101,83,105,90,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,118,152,104,113,110,121,129],
[96,0,103,94,122,108,108,102,113,94],
[93,107,0,78,106,93,94,102,77,99],
[92,116,132,0,123,92,117,132,117,96],
[58,88,104,87,0,89,92,103,81,84],
[106,102,117,118,121,0,121,108,102,102],
[97,102,116,93,118,89,0,94,92,94],
[100,108,108,78,107,102,116,0,96,95],
[89,97,133,93,129,108,118,114,0,113],
[81,116,111,114,126,108,116,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,102,93,102,86,106,103,103],
[108,0,92,114,105,101,111,114,107,107],
[107,118,0,112,99,114,104,125,103,111],
[108,96,98,0,100,102,98,111,99,113],
[117,105,111,110,0,106,104,131,112,117],
[108,109,96,108,104,0,105,115,103,110],
[124,99,106,112,106,105,0,111,107,112],
[104,96,85,99,79,95,99,0,106,97],
[107,103,107,111,98,107,103,104,0,107],
[107,103,99,97,93,100,98,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,95,118,99,85,76,70,118,60],
[88,0,103,91,120,84,83,75,113,84],
[115,107,0,109,101,80,85,78,114,88],
[92,119,101,0,107,99,92,66,120,101],
[111,90,109,103,0,98,64,81,114,81],
[125,126,130,111,112,0,101,97,124,94],
[134,127,125,118,146,109,0,105,126,129],
[140,135,132,144,129,113,105,0,117,115],
[92,97,96,90,96,86,84,93,0,86],
[150,126,122,109,129,116,81,95,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,108,100,112,111,104,111,97],
[106,0,115,105,97,102,110,104,104,107],
[101,95,0,115,86,104,97,98,111,93],
[102,105,95,0,94,96,102,106,106,107],
[110,113,124,116,0,112,107,102,113,107],
[98,108,106,114,98,0,107,105,106,105],
[99,100,113,108,103,103,0,99,99,108],
[106,106,112,104,108,105,111,0,102,109],
[99,106,99,104,97,104,111,108,0,106],
[113,103,117,103,103,105,102,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,107,104,102,100,110,99,106],
[103,0,90,104,97,104,100,105,105,100],
[108,120,0,114,111,116,114,112,101,114],
[103,106,96,0,96,100,95,109,90,99],
[106,113,99,114,0,103,102,105,96,107],
[108,106,94,110,107,0,105,104,109,105],
[110,110,96,115,108,105,0,116,106,108],
[100,105,98,101,105,106,94,0,92,103],
[111,105,109,120,114,101,104,118,0,113],
[104,110,96,111,103,105,102,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,112,105,111,88,102,97,102],
[108,0,121,120,107,108,103,94,106,97],
[98,89,0,99,98,98,82,91,107,72],
[98,90,111,0,91,97,78,92,92,83],
[105,103,112,119,0,93,100,104,95,88],
[99,102,112,113,117,0,101,112,115,97],
[122,107,128,132,110,109,0,112,117,103],
[108,116,119,118,106,98,98,0,113,105],
[113,104,103,118,115,95,93,97,0,91],
[108,113,138,127,122,113,107,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,85,108,101,103,112,109,105],
[105,0,97,98,107,105,110,114,109,111],
[111,113,0,101,106,107,110,122,116,115],
[125,112,109,0,109,103,106,113,113,121],
[102,103,104,101,0,101,102,110,102,103],
[109,105,103,107,109,0,109,123,106,111],
[107,100,100,104,108,101,0,110,109,100],
[98,96,88,97,100,87,100,0,97,94],
[101,101,94,97,108,104,101,113,0,97],
[105,99,95,89,107,99,110,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,111,101,102,102,106,117,111],
[94,0,97,93,99,96,82,94,104,103],
[105,113,0,95,92,95,93,92,105,97],
[99,117,115,0,112,103,100,104,111,107],
[109,111,118,98,0,111,100,101,108,119],
[108,114,115,107,99,0,100,94,113,122],
[108,128,117,110,110,110,0,96,117,119],
[104,116,118,106,109,116,114,0,110,119],
[93,106,105,99,102,97,93,100,0,114],
[99,107,113,103,91,88,91,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,113,108,109,106,107,109,105,106],
[121,0,103,110,127,111,111,108,111,99],
[97,107,0,112,100,97,110,95,107,108],
[102,100,98,0,105,102,99,102,98,109],
[101,83,110,105,0,89,110,103,89,100],
[104,99,113,108,121,0,109,107,99,101],
[103,99,100,111,100,101,0,91,90,103],
[101,102,115,108,107,103,119,0,104,105],
[105,99,103,112,121,111,120,106,0,110],
[104,111,102,101,110,109,107,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,99,107,117,115,112,113,117,95],
[75,0,102,92,95,104,108,96,90,92],
[111,108,0,117,126,104,106,106,116,104],
[103,118,93,0,101,108,93,99,97,105],
[93,115,84,109,0,88,92,89,101,101],
[95,106,106,102,122,0,98,97,96,97],
[98,102,104,117,118,112,0,98,97,92],
[97,114,104,111,121,113,112,0,116,113],
[93,120,94,113,109,114,113,94,0,112],
[115,118,106,105,109,113,118,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,115,117,117,115,122,120,108],
[109,0,121,111,94,114,107,116,105,97],
[92,89,0,99,96,113,103,109,96,93],
[95,99,111,0,90,113,91,104,108,95],
[93,116,114,120,0,111,98,109,104,101],
[93,96,97,97,99,0,98,109,97,79],
[95,103,107,119,112,112,0,119,120,93],
[88,94,101,106,101,101,91,0,95,83],
[90,105,114,102,106,113,90,115,0,97],
[102,113,117,115,109,131,117,127,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,120,131,113,104,104,107,107],
[99,0,93,111,120,94,98,93,87,97],
[91,117,0,106,128,99,115,114,80,106],
[90,99,104,0,116,110,104,99,89,105],
[79,90,82,94,0,109,109,83,84,97],
[97,116,111,100,101,0,107,111,106,103],
[106,112,95,106,101,103,0,106,108,112],
[106,117,96,111,127,99,104,0,86,103],
[103,123,130,121,126,104,102,124,0,120],
[103,113,104,105,113,107,98,107,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,109,106,109,107,114,116,113],
[110,0,93,90,101,83,90,107,96,104],
[109,117,0,103,116,131,118,128,108,114],
[101,120,107,0,107,94,105,113,109,107],
[104,109,94,103,0,114,99,110,112,101],
[101,127,79,116,96,0,98,113,110,99],
[103,120,92,105,111,112,0,130,115,101],
[96,103,82,97,100,97,80,0,104,82],
[94,114,102,101,98,100,95,106,0,93],
[97,106,96,103,109,111,109,128,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,112,115,103,95,91,88,110,87],
[132,0,115,117,103,101,115,99,110,108],
[98,95,0,106,105,93,100,91,105,103],
[95,93,104,0,103,103,83,95,96,96],
[107,107,105,107,0,103,105,100,100,111],
[115,109,117,107,107,0,111,105,106,110],
[119,95,110,127,105,99,0,105,111,108],
[122,111,119,115,110,105,105,0,119,119],
[100,100,105,114,110,104,99,91,0,107],
[123,102,107,114,99,100,102,91,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,139,132,148,101,118,144,119,130],
[91,0,128,100,100,104,91,118,83,107],
[71,82,0,84,87,94,77,109,90,83],
[78,110,126,0,86,120,83,123,101,108],
[62,110,123,124,0,98,101,130,56,107],
[109,106,116,90,112,0,117,122,94,93],
[92,119,133,127,109,93,0,136,109,112],
[66,92,101,87,80,88,74,0,101,90],
[91,127,120,109,154,116,101,109,0,99],
[80,103,127,102,103,117,98,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,121,111,105,101,116,111,117],
[103,0,102,104,109,105,99,106,101,116],
[99,108,0,110,109,107,99,109,112,124],
[89,106,100,0,107,101,102,102,103,104],
[99,101,101,103,0,97,98,106,96,112],
[105,105,103,109,113,0,108,109,119,121],
[109,111,111,108,112,102,0,115,107,109],
[94,104,101,108,104,101,95,0,96,105],
[99,109,98,107,114,91,103,114,0,111],
[93,94,86,106,98,89,101,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,111,113,112,100,105,101,107],
[102,0,104,86,106,119,89,112,101,99],
[101,106,0,112,103,130,113,121,109,94],
[99,124,98,0,107,128,110,111,102,94],
[97,104,107,103,0,113,103,104,98,109],
[98,91,80,82,97,0,95,98,88,87],
[110,121,97,100,107,115,0,97,106,102],
[105,98,89,99,106,112,113,0,115,89],
[109,109,101,108,112,122,104,95,0,98],
[103,111,116,116,101,123,108,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,99,104,99,97,107,100,105],
[105,0,97,101,103,96,103,96,97,103],
[116,113,0,111,111,110,113,105,104,100],
[111,109,99,0,112,94,103,113,107,104],
[106,107,99,98,0,109,108,118,102,100],
[111,114,100,116,101,0,110,117,112,108],
[113,107,97,107,102,100,0,114,99,103],
[103,114,105,97,92,93,96,0,101,104],
[110,113,106,103,108,98,111,109,0,97],
[105,107,110,106,110,102,107,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,104,101,107,112,98,120,106],
[117,0,104,113,105,109,113,109,114,113],
[102,106,0,107,98,106,105,100,113,106],
[106,97,103,0,106,98,103,97,106,101],
[109,105,112,104,0,108,103,113,118,104],
[103,101,104,112,102,0,110,101,117,106],
[98,97,105,107,107,100,0,100,112,111],
[112,101,110,113,97,109,110,0,112,107],
[90,96,97,104,92,93,98,98,0,97],
[104,97,104,109,106,104,99,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,108,112,102,117,100,113,105],
[109,0,113,104,119,112,125,102,120,110],
[102,97,0,101,102,101,111,98,106,108],
[102,106,109,0,103,107,115,105,117,108],
[98,91,108,107,0,107,120,98,113,107],
[108,98,109,103,103,0,111,96,107,103],
[93,85,99,95,90,99,0,97,90,95],
[110,108,112,105,112,114,113,0,115,108],
[97,90,104,93,97,103,120,95,0,100],
[105,100,102,102,103,107,115,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,105,91,85,116,90,101,95,104],
[132,0,97,95,111,113,110,105,98,99],
[105,113,0,102,106,110,117,116,97,117],
[119,115,108,0,105,111,113,110,107,117],
[125,99,104,105,0,112,128,122,101,104],
[94,97,100,99,98,0,110,105,93,97],
[120,100,93,97,82,100,0,104,96,103],
[109,105,94,100,88,105,106,0,96,106],
[115,112,113,103,109,117,114,114,0,122],
[106,111,93,93,106,113,107,104,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,98,100,101,115,106,116,110],
[93,0,99,91,94,100,113,97,96,97],
[100,111,0,100,101,111,99,105,103,98],
[112,119,110,0,105,113,118,114,112,104],
[110,116,109,105,0,116,120,112,108,103],
[109,110,99,97,94,0,121,94,97,95],
[95,97,111,92,90,89,0,92,100,90],
[104,113,105,96,98,116,118,0,96,97],
[94,114,107,98,102,113,110,114,0,109],
[100,113,112,106,107,115,120,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,104,117,115,102,123,99,119],
[105,0,107,101,112,102,103,105,108,108],
[110,103,0,121,105,128,106,117,112,136],
[106,109,89,0,120,111,106,112,118,130],
[93,98,105,90,0,89,91,119,99,118],
[95,108,82,99,121,0,87,115,97,110],
[108,107,104,104,119,123,0,120,106,128],
[87,105,93,98,91,95,90,0,81,140],
[111,102,98,92,111,113,104,129,0,143],
[91,102,74,80,92,100,82,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,114,103,110,102,117,101,101],
[97,0,103,101,118,109,104,103,89,102],
[94,107,0,109,106,123,98,89,90,97],
[96,109,101,0,103,111,103,93,103,99],
[107,92,104,107,0,98,96,91,100,98],
[100,101,87,99,112,0,114,79,81,90],
[108,106,112,107,114,96,0,108,100,108],
[93,107,121,117,119,131,102,0,102,105],
[109,121,120,107,110,129,110,108,0,102],
[109,108,113,111,112,120,102,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,104,96,104,106,101,102,105,123],
[123,0,105,100,116,120,96,107,113,108],
[106,105,0,97,111,107,107,100,96,112],
[114,110,113,0,107,108,104,94,98,121],
[106,94,99,103,0,111,106,104,98,108],
[104,90,103,102,99,0,106,91,103,108],
[109,114,103,106,104,104,0,99,98,104],
[108,103,110,116,106,119,111,0,107,123],
[105,97,114,112,112,107,112,103,0,124],
[87,102,98,89,102,102,106,87,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,123,103,86,81,122,97,114],
[113,0,100,108,93,86,104,116,99,114],
[105,110,0,120,110,96,85,99,87,100],
[87,102,90,0,98,78,88,90,69,96],
[107,117,100,112,0,105,94,100,91,112],
[124,124,114,132,105,0,116,117,120,121],
[129,106,125,122,116,94,0,124,97,119],
[88,94,111,120,110,93,86,0,84,117],
[113,111,123,141,119,90,113,126,0,144],
[96,96,110,114,98,89,91,93,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,108,104,112,104,103,104,107],
[110,0,115,110,105,110,114,108,115,109],
[117,95,0,100,109,105,112,107,106,112],
[102,100,110,0,104,112,112,107,108,116],
[106,105,101,106,0,106,107,112,103,116],
[98,100,105,98,104,0,108,96,104,105],
[106,96,98,98,103,102,0,100,111,111],
[107,102,103,103,98,114,110,0,114,110],
[106,95,104,102,107,106,99,96,0,105],
[103,101,98,94,94,105,99,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,98,91,100,93,88,95,74],
[110,0,123,121,100,125,112,107,114,101],
[112,87,0,97,96,106,97,91,102,80],
[112,89,113,0,95,118,102,100,122,84],
[119,110,114,115,0,121,115,97,120,91],
[110,85,104,92,89,0,113,76,98,80],
[117,98,113,108,95,97,0,103,109,100],
[122,103,119,110,113,134,107,0,120,111],
[115,96,108,88,90,112,101,90,0,84],
[136,109,130,126,119,130,110,99,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,95,87,114,95,100,114,102],
[106,0,98,100,99,111,103,96,112,113],
[103,112,0,94,98,118,100,100,106,103],
[115,110,116,0,109,112,112,105,115,113],
[123,111,112,101,0,122,115,111,127,116],
[96,99,92,98,88,0,106,89,96,103],
[115,107,110,98,95,104,0,89,110,108],
[110,114,110,105,99,121,121,0,105,115],
[96,98,104,95,83,114,100,105,0,109],
[108,97,107,97,94,107,102,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,100,96,111,104,106,98,103],
[109,0,109,106,102,108,103,111,102,105],
[112,101,0,101,96,108,100,112,94,102],
[110,104,109,0,96,114,103,120,96,109],
[114,108,114,114,0,118,106,114,104,118],
[99,102,102,96,92,0,93,108,82,97],
[106,107,110,107,104,117,0,125,109,111],
[104,99,98,90,96,102,85,0,93,100],
[112,108,116,114,106,128,101,117,0,111],
[107,105,108,101,92,113,99,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,108,118,107,109,96,118,121],
[91,0,107,87,106,95,100,94,100,119],
[103,103,0,105,114,102,94,103,118,108],
[102,123,105,0,118,99,117,110,123,114],
[92,104,96,92,0,85,88,86,100,105],
[103,115,108,111,125,0,104,96,114,116],
[101,110,116,93,122,106,0,98,125,107],
[114,116,107,100,124,114,112,0,108,118],
[92,110,92,87,110,96,85,102,0,109],
[89,91,102,96,105,94,103,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,116,105,109,108,105,105,103],
[109,0,117,104,105,90,112,98,94,96],
[100,93,0,106,93,100,109,105,109,105],
[94,106,104,0,87,98,106,99,100,94],
[105,105,117,123,0,114,121,130,121,113],
[101,120,110,112,96,0,124,118,125,114],
[102,98,101,104,89,86,0,104,99,97],
[105,112,105,111,80,92,106,0,112,97],
[105,116,101,110,89,85,111,98,0,91],
[107,114,105,116,97,96,113,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,114,105,111,108,113,121,102],
[105,0,104,107,116,105,110,103,108,109],
[92,106,0,106,110,111,111,117,116,105],
[96,103,104,0,93,97,112,102,109,104],
[105,94,100,117,0,101,107,106,119,110],
[99,105,99,113,109,0,105,100,116,95],
[102,100,99,98,103,105,0,107,112,106],
[97,107,93,108,104,110,103,0,119,106],
[89,102,94,101,91,94,98,91,0,83],
[108,101,105,106,100,115,104,104,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,101,97,107,106,111,115,102],
[105,0,110,96,95,89,105,103,97,97],
[94,100,0,97,95,106,101,106,110,97],
[109,114,113,0,95,95,111,111,89,104],
[113,115,115,115,0,99,105,113,111,101],
[103,121,104,115,111,0,106,114,104,113],
[104,105,109,99,105,104,0,121,112,110],
[99,107,104,99,97,96,89,0,96,94],
[95,113,100,121,99,106,98,114,0,102],
[108,113,113,106,109,97,100,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,115,111,96,98,105,103,102],
[113,0,107,124,118,99,111,104,106,111],
[106,103,0,108,109,97,101,96,103,114],
[95,86,102,0,115,75,88,93,97,105],
[99,92,101,95,0,90,91,95,94,100],
[114,111,113,135,120,0,103,115,108,109],
[112,99,109,122,119,107,0,114,107,106],
[105,106,114,117,115,95,96,0,109,106],
[107,104,107,113,116,102,103,101,0,112],
[108,99,96,105,110,101,104,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,127,101,109,117,111,120,98],
[108,0,115,115,98,130,120,117,111,115],
[91,95,0,114,89,108,97,104,92,86],
[83,95,96,0,109,98,93,90,97,83],
[109,112,121,101,0,121,116,110,122,99],
[101,80,102,112,89,0,93,84,94,79],
[93,90,113,117,94,117,0,103,122,104],
[99,93,106,120,100,126,107,0,90,93],
[90,99,118,113,88,116,88,120,0,96],
[112,95,124,127,111,131,106,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,77,107,100,116,112,128,91,104],
[109,0,110,102,78,108,82,112,107,74],
[133,100,0,98,105,123,108,128,127,124],
[103,108,112,0,91,137,114,112,99,129],
[110,132,105,119,0,119,108,133,126,119],
[94,102,87,73,91,0,86,116,92,75],
[98,128,102,96,102,124,0,129,109,103],
[82,98,82,98,77,94,81,0,79,96],
[119,103,83,111,84,118,101,131,0,93],
[106,136,86,81,91,135,107,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,108,117,102,105,95,99,101],
[98,0,107,102,107,100,104,111,103,103],
[106,103,0,118,116,105,97,122,96,105],
[102,108,92,0,101,102,99,97,96,90],
[93,103,94,109,0,90,95,110,100,85],
[108,110,105,108,120,0,119,103,113,102],
[105,106,113,111,115,91,0,105,116,109],
[115,99,88,113,100,107,105,0,93,105],
[111,107,114,114,110,97,94,117,0,104],
[109,107,105,120,125,108,101,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,104,107,111,110,100,99,117],
[104,0,98,82,101,97,86,100,108,116],
[108,112,0,95,119,109,96,108,101,117],
[106,128,115,0,111,113,123,100,110,103],
[103,109,91,99,0,114,102,102,99,112],
[99,113,101,97,96,0,99,93,123,106],
[100,124,114,87,108,111,0,96,110,112],
[110,110,102,110,108,117,114,0,113,122],
[111,102,109,100,111,87,100,97,0,110],
[93,94,93,107,98,104,98,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,107,93,92,96,104,119,111],
[116,0,110,99,118,98,119,128,120,107],
[99,100,0,99,92,99,95,116,107,99],
[103,111,111,0,94,102,96,94,120,107],
[117,92,118,116,0,111,97,113,138,110],
[118,112,111,108,99,0,105,122,124,116],
[114,91,115,114,113,105,0,130,119,97],
[106,82,94,116,97,88,80,0,107,90],
[91,90,103,90,72,86,91,103,0,91],
[99,103,111,103,100,94,113,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,96,99,105,106,95,95,104],
[104,0,104,83,102,98,97,91,112,109],
[112,106,0,96,106,99,100,98,104,104],
[114,127,114,0,115,111,105,107,112,114],
[111,108,104,95,0,98,101,92,99,98],
[105,112,111,99,112,0,111,113,101,113],
[104,113,110,105,109,99,0,97,108,107],
[115,119,112,103,118,97,113,0,111,113],
[115,98,106,98,111,109,102,99,0,98],
[106,101,106,96,112,97,103,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,109,113,122,102,131,109,114,113],
[76,0,91,101,93,86,86,80,87,83],
[101,119,0,117,110,104,100,98,110,97],
[97,109,93,0,107,83,103,103,97,101],
[88,117,100,103,0,106,109,105,99,114],
[108,124,106,127,104,0,123,98,107,114],
[79,124,110,107,101,87,0,91,92,99],
[101,130,112,107,105,112,119,0,98,114],
[96,123,100,113,111,103,118,112,0,122],
[97,127,113,109,96,96,111,96,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,127,113,88,98,155,72,70],
[110,0,154,126,126,85,84,139,140,85],
[93,56,0,140,82,84,96,110,84,55],
[83,84,70,0,82,56,113,82,57,70],
[97,84,128,128,0,102,127,114,112,84],
[122,125,126,154,108,0,139,140,126,82],
[112,126,114,97,83,71,0,124,112,112],
[55,71,100,128,96,70,86,0,113,97],
[138,70,126,153,98,84,98,97,0,99],
[140,125,155,140,126,128,98,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,119,111,104,114,116,106,109],
[97,0,100,102,102,100,102,111,90,92],
[107,110,0,106,109,107,108,118,99,108],
[91,108,104,0,92,101,111,114,89,94],
[99,108,101,118,0,110,116,117,99,102],
[106,110,103,109,100,0,116,113,99,102],
[96,108,102,99,94,94,0,113,91,96],
[94,99,92,96,93,97,97,0,85,89],
[104,120,111,121,111,111,119,125,0,106],
[101,118,102,116,108,108,114,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,85,123,91,103,92,105,97,97],
[108,0,100,124,87,97,104,102,124,90],
[125,110,0,123,107,112,106,107,107,104],
[87,86,87,0,90,78,71,88,97,86],
[119,123,103,120,0,106,116,120,120,101],
[107,113,98,132,104,0,103,111,105,109],
[118,106,104,139,94,107,0,119,112,95],
[105,108,103,122,90,99,91,0,116,104],
[113,86,103,113,90,105,98,94,0,93],
[113,120,106,124,109,101,115,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,131,164,98,131,112,115,114,129],
[96,0,112,164,147,146,161,98,115,111],
[79,98,0,130,82,80,80,66,49,64],
[46,46,80,0,46,65,63,47,32,47],
[112,63,128,164,0,113,113,131,96,112],
[79,64,130,145,97,0,95,80,96,112],
[98,49,130,147,97,115,0,82,65,97],
[95,112,144,163,79,130,128,0,80,95],
[96,95,161,178,114,114,145,130,0,95],
[81,99,146,163,98,98,113,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,128,103,114,120,108,109,115],
[107,0,120,127,104,113,126,116,132,136],
[111,90,0,137,124,103,129,119,126,106],
[82,83,73,0,80,84,118,94,90,103],
[107,106,86,130,0,119,139,115,123,110],
[96,97,107,126,91,0,113,111,96,112],
[90,84,81,92,71,97,0,103,95,94],
[102,94,91,116,95,99,107,0,107,116],
[101,78,84,120,87,114,115,103,0,120],
[95,74,104,107,100,98,116,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,123,131,106,123,117,106,97,122],
[100,0,111,122,108,106,106,106,100,114],
[87,99,0,105,105,105,107,106,89,108],
[79,88,105,0,86,97,90,94,82,96],
[104,102,105,124,0,105,103,104,114,123],
[87,104,105,113,105,0,99,96,107,103],
[93,104,103,120,107,111,0,119,107,117],
[104,104,104,116,106,114,91,0,106,122],
[113,110,121,128,96,103,103,104,0,110],
[88,96,102,114,87,107,93,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,96,116,102,117,113,116,103],
[101,0,93,105,97,92,107,88,114,81],
[100,117,0,108,106,110,114,95,114,103],
[114,105,102,0,113,99,110,104,105,95],
[94,113,104,97,0,105,106,93,107,100],
[108,118,100,111,105,0,104,106,104,111],
[93,103,96,100,104,106,0,105,102,95],
[97,122,115,106,117,104,105,0,113,107],
[94,96,96,105,103,106,108,97,0,95],
[107,129,107,115,110,99,115,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,112,97,102,123,83,97,85],
[101,0,103,115,94,104,117,86,110,97],
[100,107,0,117,112,110,125,88,124,95],
[98,95,93,0,92,107,119,91,120,73],
[113,116,98,118,0,108,128,96,116,98],
[108,106,100,103,102,0,130,105,124,106],
[87,93,85,91,82,80,0,69,88,69],
[127,124,122,119,114,105,141,0,111,110],
[113,100,86,90,94,86,122,99,0,94],
[125,113,115,137,112,104,141,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,94,103,100,103,114,98,108],
[103,0,99,89,105,100,104,120,98,100],
[100,111,0,94,88,97,104,109,95,99],
[116,121,116,0,106,118,105,115,104,104],
[107,105,122,104,0,107,106,122,103,106],
[110,110,113,92,103,0,96,114,98,100],
[107,106,106,105,104,114,0,112,107,106],
[96,90,101,95,88,96,98,0,88,93],
[112,112,115,106,107,112,103,122,0,107],
[102,110,111,106,104,110,104,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,106,94,106,117,100,111,105],
[108,0,111,97,102,109,108,109,117,115],
[108,99,0,96,96,97,108,97,100,106],
[104,113,114,0,109,107,111,102,107,106],
[116,108,114,101,0,111,115,119,119,116],
[104,101,113,103,99,0,110,104,108,109],
[93,102,102,99,95,100,0,105,115,101],
[110,101,113,108,91,106,105,0,108,104],
[99,93,110,103,91,102,95,102,0,102],
[105,95,104,104,94,101,109,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,116,114,118,110,105,118,120],
[95,0,113,112,103,109,107,91,100,109],
[96,97,0,105,102,112,98,97,99,97],
[94,98,105,0,108,104,103,97,111,109],
[96,107,108,102,0,103,99,92,105,103],
[92,101,98,106,107,0,101,80,84,99],
[100,103,112,107,111,109,0,101,106,111],
[105,119,113,113,118,130,109,0,99,110],
[92,110,111,99,105,126,104,111,0,104],
[90,101,113,101,107,111,99,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,84,85,90,111,109,92,97,91],
[114,0,113,94,101,112,105,98,87,112],
[126,97,0,90,100,117,110,84,78,105],
[125,116,120,0,102,134,125,100,100,109],
[120,109,110,108,0,119,113,90,111,115],
[99,98,93,76,91,0,90,79,81,88],
[101,105,100,85,97,120,0,89,84,93],
[118,112,126,110,120,131,121,0,97,113],
[113,123,132,110,99,129,126,113,0,118],
[119,98,105,101,95,122,117,97,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,94,88,104,113,108,105,106],
[113,0,119,116,105,117,129,116,114,111],
[98,91,0,111,105,100,122,103,108,108],
[116,94,99,0,95,91,118,106,91,98],
[122,105,105,115,0,109,136,122,114,112],
[106,93,110,119,101,0,123,98,104,108],
[97,81,88,92,74,87,0,87,90,91],
[102,94,107,104,88,112,123,0,99,109],
[105,96,102,119,96,106,120,111,0,104],
[104,99,102,112,98,102,119,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,87,78,70,77,87,81,87,98],
[126,0,101,115,108,103,114,119,126,120],
[123,109,0,110,106,104,98,110,124,103],
[132,95,100,0,86,92,112,111,107,113],
[140,102,104,124,0,108,113,112,125,120],
[133,107,106,118,102,0,100,108,118,115],
[123,96,112,98,97,110,0,112,124,120],
[129,91,100,99,98,102,98,0,124,99],
[123,84,86,103,85,92,86,86,0,100],
[112,90,107,97,90,95,90,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,111,104,100,110,100,97,103],
[118,0,104,113,118,103,110,103,110,106],
[113,106,0,116,113,106,111,105,118,110],
[99,97,94,0,96,91,112,106,106,108],
[106,92,97,114,0,97,108,101,102,104],
[110,107,104,119,113,0,116,104,112,109],
[100,100,99,98,102,94,0,89,98,93],
[110,107,105,104,109,106,121,0,117,110],
[113,100,92,104,108,98,112,93,0,107],
[107,104,100,102,106,101,117,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,115,118,99,123,98,104,107],
[106,0,104,111,119,92,118,105,132,120],
[108,106,0,102,100,88,109,100,105,100],
[95,99,108,0,112,94,107,109,119,125],
[92,91,110,98,0,109,120,107,106,104],
[111,118,122,116,101,0,105,108,120,118],
[87,92,101,103,90,105,0,97,100,93],
[112,105,110,101,103,102,113,0,110,119],
[106,78,105,91,104,90,110,100,0,97],
[103,90,110,85,106,92,117,91,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,105,101,102,98,108,99,99],
[113,0,101,99,116,109,95,113,104,97],
[109,109,0,109,111,122,105,122,111,109],
[105,111,101,0,107,104,111,98,93,104],
[109,94,99,103,0,98,96,120,107,99],
[108,101,88,106,112,0,95,109,93,99],
[112,115,105,99,114,115,0,115,111,110],
[102,97,88,112,90,101,95,0,106,103],
[111,106,99,117,103,117,99,104,0,97],
[111,113,101,106,111,111,100,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,137,104,109,98,96,94,98,110],
[100,0,112,97,112,89,93,100,102,101],
[73,98,0,98,112,92,74,89,101,113],
[106,113,112,0,99,103,108,104,93,115],
[101,98,98,111,0,83,109,88,87,105],
[112,121,118,107,127,0,105,116,119,122],
[114,117,136,102,101,105,0,89,118,106],
[116,110,121,106,122,94,121,0,109,116],
[112,108,109,117,123,91,92,101,0,120],
[100,109,97,95,105,88,104,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,108,101,110,109,105,97,115],
[102,0,115,106,101,109,104,105,111,95],
[97,95,0,99,99,106,92,92,100,104],
[102,104,111,0,95,110,102,105,103,100],
[109,109,111,115,0,108,110,116,102,112],
[100,101,104,100,102,0,100,100,102,95],
[101,106,118,108,100,110,0,112,105,94],
[105,105,118,105,94,110,98,0,96,99],
[113,99,110,107,108,108,105,114,0,104],
[95,115,106,110,98,115,116,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,114,139,108,112,119,111,121],
[101,0,95,115,88,103,103,96,106,110],
[118,115,0,108,124,105,120,104,117,108],
[96,95,102,0,111,94,100,109,100,93],
[71,122,86,99,0,112,121,97,86,122],
[102,107,105,116,98,0,102,93,86,98],
[98,107,90,110,89,108,0,97,80,93],
[91,114,106,101,113,117,113,0,92,106],
[99,104,93,110,124,124,130,118,0,102],
[89,100,102,117,88,112,117,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,114,122,110,109,112,113,116],
[89,0,108,100,100,90,108,97,104,98],
[105,102,0,122,117,103,113,97,110,116],
[96,110,88,0,97,95,111,90,96,100],
[88,110,93,113,0,102,110,99,100,108],
[100,120,107,115,108,0,115,115,106,93],
[101,102,97,99,100,95,0,97,99,102],
[98,113,113,120,111,95,113,0,113,112],
[97,106,100,114,110,104,111,97,0,107],
[94,112,94,110,102,117,108,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,123,99,111,97,78,77,68],
[120,0,121,142,98,76,119,113,122,110],
[110,89,0,134,131,100,120,123,98,121],
[87,68,76,0,100,67,89,57,79,90],
[111,112,79,110,0,92,102,102,101,90],
[99,134,110,143,118,0,131,122,121,111],
[113,91,90,121,108,79,0,113,76,77],
[132,97,87,153,108,88,97,0,97,96],
[133,88,112,131,109,89,134,113,0,109],
[142,100,89,120,120,99,133,114,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,118,107,85,98,84,97,101],
[120,0,117,124,119,117,121,105,125,102],
[105,93,0,118,103,116,97,97,111,116],
[92,86,92,0,84,96,90,98,95,90],
[103,91,107,126,0,98,96,93,96,98],
[125,93,94,114,112,0,112,94,115,101],
[112,89,113,120,114,98,0,97,116,109],
[126,105,113,112,117,116,113,0,108,106],
[113,85,99,115,114,95,94,102,0,94],
[109,108,94,120,112,109,101,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,105,96,102,112,99,96,100],
[99,0,99,98,85,104,91,97,81,99],
[114,111,0,117,102,109,98,97,96,105],
[105,112,93,0,83,104,95,92,90,94],
[114,125,108,127,0,105,109,122,105,110],
[108,106,101,106,105,0,102,107,101,104],
[98,119,112,115,101,108,0,104,101,102],
[111,113,113,118,88,103,106,0,97,107],
[114,129,114,120,105,109,109,113,0,102],
[110,111,105,116,100,106,108,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,100,104,94,105,121,111,109],
[112,0,116,110,127,96,110,110,110,106],
[102,94,0,103,103,86,108,115,106,95],
[110,100,107,0,126,101,108,113,117,107],
[106,83,107,84,0,103,94,108,117,100],
[116,114,124,109,107,0,99,105,108,114],
[105,100,102,102,116,111,0,116,111,109],
[89,100,95,97,102,105,94,0,102,102],
[99,100,104,93,93,102,99,108,0,112],
[101,104,115,103,110,96,101,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,129,110,112,112,114,97,112],
[96,0,104,122,112,103,112,102,105,107],
[99,106,0,123,116,105,108,88,93,122],
[81,88,87,0,106,85,99,76,86,95],
[100,98,94,104,0,108,105,98,104,96],
[98,107,105,125,102,0,112,89,97,103],
[98,98,102,111,105,98,0,83,107,101],
[96,108,122,134,112,121,127,0,109,117],
[113,105,117,124,106,113,103,101,0,104],
[98,103,88,115,114,107,109,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,105,104,96,92,112,119,96],
[120,0,104,124,99,105,101,126,121,105],
[109,106,0,108,102,100,110,121,118,106],
[105,86,102,0,100,94,94,114,116,88],
[106,111,108,110,0,103,95,109,120,109],
[114,105,110,116,107,0,97,109,128,108],
[118,109,100,116,115,113,0,116,131,106],
[98,84,89,96,101,101,94,0,109,92],
[91,89,92,94,90,82,79,101,0,71],
[114,105,104,122,101,102,104,118,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,103,99,103,100,96,94,89],
[111,0,134,106,105,113,120,119,111,103],
[107,76,0,92,98,110,94,106,99,99],
[107,104,118,0,92,111,97,113,113,108],
[111,105,112,118,0,110,107,103,114,106],
[107,97,100,99,100,0,97,105,110,105],
[110,90,116,113,103,113,0,117,111,97],
[114,91,104,97,107,105,93,0,105,105],
[116,99,111,97,96,100,99,105,0,110],
[121,107,111,102,104,105,113,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,107,103,102,89,113,107,104],
[108,0,108,112,105,123,97,112,121,108],
[98,102,0,104,96,97,109,117,111,94],
[103,98,106,0,101,123,104,103,126,113],
[107,105,114,109,0,101,108,114,115,105],
[108,87,113,87,109,0,122,106,105,103],
[121,113,101,106,102,88,0,119,119,91],
[97,98,93,107,96,104,91,0,112,94],
[103,89,99,84,95,105,91,98,0,90],
[106,102,116,97,105,107,119,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,105,101,113,116,105,107,117],
[95,0,111,98,94,96,90,99,95,98],
[103,99,0,94,92,98,98,98,85,91],
[105,112,116,0,107,119,112,107,96,114],
[109,116,118,103,0,105,103,99,106,106],
[97,114,112,91,105,0,102,106,94,101],
[94,120,112,98,107,108,0,103,103,110],
[105,111,112,103,111,104,107,0,103,108],
[103,115,125,114,104,116,107,107,0,104],
[93,112,119,96,104,109,100,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,97,107,115,106,103,100,109],
[95,0,99,105,106,114,105,100,105,98],
[110,111,0,115,106,105,105,111,114,108],
[113,105,95,0,104,111,114,99,110,106],
[103,104,104,106,0,107,113,99,103,97],
[95,96,105,99,103,0,94,99,101,102],
[104,105,105,96,97,116,0,97,114,99],
[107,110,99,111,111,111,113,0,118,112],
[110,105,96,100,107,109,96,92,0,103],
[101,112,102,104,113,108,111,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,99,97,97,102,100,98,97],
[120,0,122,116,120,104,115,111,124,113],
[105,88,0,105,102,96,107,105,98,106],
[111,94,105,0,107,94,107,114,102,109],
[113,90,108,103,0,101,107,106,109,98],
[113,106,114,116,109,0,105,113,111,115],
[108,95,103,103,103,105,0,104,98,103],
[110,99,105,96,104,97,106,0,107,100],
[112,86,112,108,101,99,112,103,0,98],
[113,97,104,101,112,95,107,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,156,130,158,104,131,131,158,158],
[54,0,26,78,80,53,132,132,133,80],
[54,184,0,158,133,132,158,132,159,107],
[80,132,52,0,106,52,54,133,132,80],
[52,130,77,104,0,79,52,105,132,158],
[106,157,78,158,131,0,105,158,184,132],
[79,78,52,156,158,105,0,131,132,106],
[79,78,78,77,105,52,79,0,105,79],
[52,77,51,78,78,26,78,105,0,79],
[52,130,103,130,52,78,104,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,98,116,122,93,99,103,112],
[100,0,106,106,107,101,115,101,108,88],
[105,104,0,112,110,112,91,96,119,94],
[112,104,98,0,124,136,97,91,109,111],
[94,103,100,86,0,123,92,98,96,101],
[88,109,98,74,87,0,92,66,97,99],
[117,95,119,113,118,118,0,83,108,104],
[111,109,114,119,112,144,127,0,92,101],
[107,102,91,101,114,113,102,118,0,102],
[98,122,116,99,109,111,106,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,83,92,85,81,87,99,97],
[114,0,98,99,92,94,113,103,108,99],
[119,112,0,94,108,103,115,118,111,108],
[127,111,116,0,118,104,106,114,109,126],
[118,118,102,92,0,110,110,104,114,112],
[125,116,107,106,100,0,99,112,100,103],
[129,97,95,104,100,111,0,97,96,114],
[123,107,92,96,106,98,113,0,100,127],
[111,102,99,101,96,110,114,110,0,123],
[113,111,102,84,98,107,96,83,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,76,84,87,88,80,75,89,95],
[111,0,85,93,121,110,103,90,107,103],
[134,125,0,109,130,118,97,129,105,115],
[126,117,101,0,109,94,97,115,103,118],
[123,89,80,101,0,100,95,85,101,106],
[122,100,92,116,110,0,92,101,104,104],
[130,107,113,113,115,118,0,110,105,113],
[135,120,81,95,125,109,100,0,91,95],
[121,103,105,107,109,106,105,119,0,110],
[115,107,95,92,104,106,97,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,109,94,115,98,106,114,113],
[107,0,113,107,109,106,103,103,123,104],
[113,97,0,103,103,105,93,101,111,115],
[101,103,107,0,95,107,101,95,123,114],
[116,101,107,115,0,110,107,118,115,113],
[95,104,105,103,100,0,112,96,110,113],
[112,107,117,109,103,98,0,101,127,124],
[104,107,109,115,92,114,109,0,122,131],
[96,87,99,87,95,100,83,88,0,105],
[97,106,95,96,97,97,86,79,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,104,97,101,93,98,105,100],
[114,0,114,109,105,113,112,108,109,105],
[110,96,0,104,104,89,108,104,103,93],
[106,101,106,0,104,96,103,107,97,103],
[113,105,106,106,0,111,108,104,110,101],
[109,97,121,114,99,0,119,112,112,99],
[117,98,102,107,102,91,0,107,104,97],
[112,102,106,103,106,98,103,0,102,101],
[105,101,107,113,100,98,106,108,0,97],
[110,105,117,107,109,111,113,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,101,95,96,112,129,97,123],
[97,0,107,113,95,126,120,120,114,107],
[94,103,0,103,86,102,99,115,82,97],
[109,97,107,0,100,108,118,119,95,99],
[115,115,124,110,0,128,118,115,105,113],
[114,84,108,102,82,0,114,98,92,94],
[98,90,111,92,92,96,0,112,104,89],
[81,90,95,91,95,112,98,0,101,95],
[113,96,128,115,105,118,106,109,0,106],
[87,103,113,111,97,116,121,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,94,99,93,89,100,103,104,104],
[109,0,115,112,97,108,103,111,105,99],
[116,95,0,103,103,103,92,106,97,101],
[111,98,107,0,97,102,102,106,96,114],
[117,113,107,113,0,110,120,100,112,101],
[121,102,107,108,100,0,90,104,98,96],
[110,107,118,108,90,120,0,104,106,103],
[107,99,104,104,110,106,106,0,105,113],
[106,105,113,114,98,112,104,105,0,116],
[106,111,109,96,109,114,107,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,105,101,117,100,101,118,106],
[104,0,99,108,108,123,102,105,117,101],
[99,111,0,107,103,110,96,111,105,93],
[105,102,103,0,109,125,104,115,117,104],
[109,102,107,101,0,110,104,105,116,105],
[93,87,100,85,100,0,92,88,95,98],
[110,108,114,106,106,118,0,110,110,100],
[109,105,99,95,105,122,100,0,111,103],
[92,93,105,93,94,115,100,99,0,94],
[104,109,117,106,105,112,110,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,91,105,94,103,78,84,91,85],
[134,0,99,102,118,109,114,102,110,109],
[119,111,0,123,131,133,109,94,111,117],
[105,108,87,0,102,102,77,79,84,84],
[116,92,79,108,0,89,87,87,92,91],
[107,101,77,108,121,0,87,76,102,105],
[132,96,101,133,123,123,0,100,104,97],
[126,108,116,131,123,134,110,0,115,96],
[119,100,99,126,118,108,106,95,0,99],
[125,101,93,126,119,105,113,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,98,104,108,97,88,108,98,95],
[129,0,107,114,109,105,105,115,101,109],
[112,103,0,113,111,115,112,130,120,104],
[106,96,97,0,104,106,112,109,103,91],
[102,101,99,106,0,105,93,96,102,92],
[113,105,95,104,105,0,108,105,112,99],
[122,105,98,98,117,102,0,109,96,91],
[102,95,80,101,114,105,101,0,92,82],
[112,109,90,107,108,98,114,118,0,93],
[115,101,106,119,118,111,119,128,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,119,107,119,116,102,118,118,103],
[91,0,107,93,103,105,96,101,99,94],
[91,103,0,102,101,99,98,106,114,98],
[103,117,108,0,104,112,117,113,112,112],
[91,107,109,106,0,106,106,97,105,100],
[94,105,111,98,104,0,98,106,104,89],
[108,114,112,93,104,112,0,113,115,116],
[92,109,104,97,113,104,97,0,103,102],
[92,111,96,98,105,106,95,107,0,92],
[107,116,112,98,110,121,94,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,93,112,105,107,105,100,98],
[100,0,100,109,117,100,114,100,106,107],
[104,110,0,106,109,97,110,110,108,96],
[117,101,104,0,113,109,111,101,99,105],
[98,93,101,97,0,99,99,101,98,94],
[105,110,113,101,111,0,116,107,99,105],
[103,96,100,99,111,94,0,107,97,107],
[105,110,100,109,109,103,103,0,103,108],
[110,104,102,111,112,111,113,107,0,101],
[112,103,114,105,116,105,103,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,146,104,110,120,109,136,125,122],
[112,0,127,93,102,120,114,114,123,104],
[64,83,0,86,91,85,81,88,103,95],
[106,117,124,0,107,123,121,143,129,94],
[100,108,119,103,0,111,109,109,111,114],
[90,90,125,87,99,0,98,98,127,106],
[101,96,129,89,101,112,0,133,136,109],
[74,96,122,67,101,112,77,0,100,92],
[85,87,107,81,99,83,74,110,0,83],
[88,106,115,116,96,104,101,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,127,105,93,85,99,89,98,85],
[112,0,125,112,120,98,109,115,106,111],
[83,85,0,119,111,97,101,86,92,112],
[105,98,91,0,94,85,96,95,89,90],
[117,90,99,116,0,107,88,99,94,95],
[125,112,113,125,103,0,84,116,99,90],
[111,101,109,114,122,126,0,121,102,106],
[121,95,124,115,111,94,89,0,124,99],
[112,104,118,121,116,111,108,86,0,95],
[125,99,98,120,115,120,104,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,120,119,110,102,105,114,109,115],
[95,0,110,112,108,107,91,107,114,96],
[90,100,0,103,107,91,89,106,102,100],
[91,98,107,0,99,91,97,109,117,89],
[100,102,103,111,0,99,99,101,103,92],
[108,103,119,119,111,0,95,122,105,109],
[105,119,121,113,111,115,0,115,115,116],
[96,103,104,101,109,88,95,0,107,96],
[101,96,108,93,107,105,95,103,0,96],
[95,114,110,121,118,101,94,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,97,111,101,113,106,105,107],
[110,0,104,112,110,100,111,109,108,106],
[107,106,0,97,115,95,116,106,105,95],
[113,98,113,0,104,102,119,115,116,98],
[99,100,95,106,0,90,91,91,116,105],
[109,110,115,108,120,0,101,107,111,112],
[97,99,94,91,119,109,0,116,105,111],
[104,101,104,95,119,103,94,0,108,114],
[105,102,105,94,94,99,105,102,0,94],
[103,104,115,112,105,98,99,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,111,103,117,111,106,101,94,115],
[80,0,106,104,101,92,74,86,88,84],
[99,104,0,106,114,116,100,92,93,110],
[107,106,104,0,104,118,106,102,102,105],
[93,109,96,106,0,93,86,96,84,105],
[99,118,94,92,117,0,102,86,106,115],
[104,136,110,104,124,108,0,111,119,122],
[109,124,118,108,114,124,99,0,110,106],
[116,122,117,108,126,104,91,100,0,108],
[95,126,100,105,105,95,88,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,100,99,104,111,100,99,95],
[99,0,103,124,104,103,118,100,98,100],
[115,107,0,125,100,110,107,108,102,103],
[110,86,85,0,96,90,99,103,94,101],
[111,106,110,114,0,109,114,109,103,97],
[106,107,100,120,101,0,116,113,105,98],
[99,92,103,111,96,94,0,97,95,97],
[110,110,102,107,101,97,113,0,100,95],
[111,112,108,116,107,105,115,110,0,107],
[115,110,107,109,113,112,113,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,98,109,104,102,103,93,96,105],
[92,0,88,111,99,93,84,97,95,99],
[112,122,0,114,110,103,105,97,107,116],
[101,99,96,0,106,94,98,112,107,112],
[106,111,100,104,0,87,93,109,104,112],
[108,117,107,116,123,0,106,125,104,116],
[107,126,105,112,117,104,0,101,110,104],
[117,113,113,98,101,85,109,0,109,100],
[114,115,103,103,106,106,100,101,0,110],
[105,111,94,98,98,94,106,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,105,108,102,108,79,92,92,105],
[81,0,55,50,81,86,58,93,81,69],
[105,155,0,109,109,111,107,142,130,121],
[102,160,101,0,137,105,78,102,102,102],
[108,129,101,73,0,110,83,69,105,92],
[102,124,99,105,100,0,79,114,124,90],
[131,152,103,132,127,131,0,138,125,130],
[118,117,68,108,141,96,72,0,107,103],
[118,129,80,108,105,86,85,103,0,94],
[105,141,89,108,118,120,80,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,89,114,91,98,103,103,104,104],
[116,0,84,116,94,107,108,106,94,107],
[121,126,0,122,104,113,125,120,121,125],
[96,94,88,0,95,101,110,93,96,99],
[119,116,106,115,0,109,98,114,113,129],
[112,103,97,109,101,0,122,96,103,108],
[107,102,85,100,112,88,0,103,109,106],
[107,104,90,117,96,114,107,0,105,101],
[106,116,89,114,97,107,101,105,0,117],
[106,103,85,111,81,102,104,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,100,114,112,108,104,111,95],
[118,0,107,97,111,89,99,111,103,96],
[108,103,0,93,124,112,120,80,105,93],
[110,113,117,0,112,98,113,112,111,103],
[96,99,86,98,0,100,91,96,97,86],
[98,121,98,112,110,0,113,108,92,106],
[102,111,90,97,119,97,0,107,105,99],
[106,99,130,98,114,102,103,0,109,97],
[99,107,105,99,113,118,105,101,0,89],
[115,114,117,107,124,104,111,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,97,100,102,93,106,85,98,94],
[121,0,105,110,111,108,111,102,99,102],
[113,105,0,119,109,98,107,101,108,89],
[110,100,91,0,123,90,112,101,115,104],
[108,99,101,87,0,103,95,90,91,106],
[117,102,112,120,107,0,104,121,108,103],
[104,99,103,98,115,106,0,95,98,100],
[125,108,109,109,120,89,115,0,99,112],
[112,111,102,95,119,102,112,111,0,103],
[116,108,121,106,104,107,110,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,114,113,109,112,102,116,113],
[118,0,124,109,106,111,111,109,96,117],
[106,86,0,103,87,100,104,93,97,100],
[96,101,107,0,100,108,95,104,94,98],
[97,104,123,110,0,100,125,114,94,107],
[101,99,110,102,110,0,126,114,109,109],
[98,99,106,115,85,84,0,106,100,110],
[108,101,117,106,96,96,104,0,86,108],
[94,114,113,116,116,101,110,124,0,123],
[97,93,110,112,103,101,100,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,88,133,120,101,87,109,92],
[105,0,106,82,144,136,92,100,112,100],
[109,104,0,101,145,105,114,118,131,93],
[122,128,109,0,144,131,92,103,144,109],
[77,66,65,66,0,88,57,71,94,69],
[90,74,105,79,122,0,91,97,86,87],
[109,118,96,118,153,119,0,98,125,107],
[123,110,92,107,139,113,112,0,127,111],
[101,98,79,66,116,124,85,83,0,87],
[118,110,117,101,141,123,103,99,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,97,99,109,116,106,121,111],
[114,0,109,115,105,122,105,119,118,124],
[95,101,0,114,102,113,112,112,116,110],
[113,95,96,0,103,105,101,103,111,111],
[111,105,108,107,0,113,112,113,114,101],
[101,88,97,105,97,0,114,108,118,111],
[94,105,98,109,98,96,0,107,110,110],
[104,91,98,107,97,102,103,0,108,111],
[89,92,94,99,96,92,100,102,0,99],
[99,86,100,99,109,99,100,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,93,105,114,113,97,93,105,101],
[99,0,92,97,105,102,98,91,96,106],
[117,118,0,107,111,116,101,103,101,102],
[105,113,103,0,114,115,107,100,105,101],
[96,105,99,96,0,110,89,97,92,95],
[97,108,94,95,100,0,90,91,104,98],
[113,112,109,103,121,120,0,110,114,105],
[117,119,107,110,113,119,100,0,111,124],
[105,114,109,105,118,106,96,99,0,115],
[109,104,108,109,115,112,105,86,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,107,111,117,117,112,110,110],
[109,0,105,106,109,123,110,117,112,114],
[101,105,0,110,106,112,114,112,106,108],
[103,104,100,0,100,105,112,110,105,101],
[99,101,104,110,0,104,103,113,105,114],
[93,87,98,105,106,0,112,106,95,101],
[93,100,96,98,107,98,0,102,94,102],
[98,93,98,100,97,104,108,0,110,105],
[100,98,104,105,105,115,116,100,0,109],
[100,96,102,109,96,109,108,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,91,101,94,75,89,86,111,103],
[143,0,98,142,112,125,118,109,147,136],
[119,112,0,122,103,107,97,105,123,117],
[109,68,88,0,96,84,92,94,111,100],
[116,98,107,114,0,113,98,107,127,113],
[135,85,103,126,97,0,87,94,125,127],
[121,92,113,118,112,123,0,122,129,134],
[124,101,105,116,103,116,88,0,130,113],
[99,63,87,99,83,85,81,80,0,99],
[107,74,93,110,97,83,76,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,73,96,100,85,113,110,81],
[108,0,93,107,133,109,114,112,80,93],
[109,117,0,97,125,108,101,137,92,92],
[137,103,113,0,91,117,95,125,106,105],
[114,77,85,119,0,113,104,106,90,99],
[110,101,102,93,97,0,109,141,107,105],
[125,96,109,115,106,101,0,137,105,102],
[97,98,73,85,104,69,73,0,87,67],
[100,130,118,104,120,103,105,123,0,110],
[129,117,118,105,111,105,108,143,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,92,91,96,101,113,96,89],
[112,0,120,90,111,112,111,115,97,109],
[101,90,0,93,90,101,97,105,96,92],
[118,120,117,0,97,121,124,120,104,114],
[119,99,120,113,0,115,109,112,107,114],
[114,98,109,89,95,0,105,103,96,88],
[109,99,113,86,101,105,0,106,102,99],
[97,95,105,90,98,107,104,0,96,85],
[114,113,114,106,103,114,108,114,0,105],
[121,101,118,96,96,122,111,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,101,104,105,105,103,99,100],
[117,0,106,93,107,94,99,95,102,102],
[94,104,0,95,102,95,98,107,98,100],
[109,117,115,0,102,110,105,101,109,113],
[106,103,108,108,0,110,101,100,102,107],
[105,116,115,100,100,0,102,98,100,100],
[105,111,112,105,109,108,0,111,95,108],
[107,115,103,109,110,112,99,0,105,97],
[111,108,112,101,108,110,115,105,0,103],
[110,108,110,97,103,110,102,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,106,99,104,121,133,118,105],
[92,0,108,97,60,92,95,120,94,66],
[111,102,0,103,95,123,112,136,108,97],
[104,113,107,0,95,119,88,123,98,79],
[111,150,115,115,0,130,121,120,122,97],
[106,118,87,91,80,0,97,109,104,62],
[89,115,98,122,89,113,0,116,100,74],
[77,90,74,87,90,101,94,0,89,75],
[92,116,102,112,88,106,110,121,0,63],
[105,144,113,131,113,148,136,135,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,108,98,93,85,107,110,91,100],
[84,0,86,72,88,49,83,86,90,88],
[102,124,0,78,70,60,92,95,94,113],
[112,138,132,0,111,100,131,104,122,127],
[117,122,140,99,0,76,107,112,108,113],
[125,161,150,110,134,0,134,90,143,125],
[103,127,118,79,103,76,0,71,111,100],
[100,124,115,106,98,120,139,0,121,120],
[119,120,116,88,102,67,99,89,0,121],
[110,122,97,83,97,85,110,90,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,94,94,103,101,94,105,93],
[109,0,103,97,93,108,104,99,107,88],
[108,107,0,104,99,115,109,100,110,105],
[116,113,106,0,95,102,102,105,103,93],
[116,117,111,115,0,125,124,114,114,105],
[107,102,95,108,85,0,109,105,90,100],
[109,106,101,108,86,101,0,103,105,106],
[116,111,110,105,96,105,107,0,100,105],
[105,103,100,107,96,120,105,110,0,102],
[117,122,105,117,105,110,104,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,48,79,68,74,70,61,69,108],
[150,0,127,85,95,139,110,107,116,125],
[162,83,0,130,98,134,120,110,88,148],
[131,125,80,0,111,120,100,111,138,96],
[142,115,112,99,0,114,89,81,107,109],
[136,71,76,90,96,0,69,97,108,117],
[140,100,90,110,121,141,0,120,118,128],
[149,103,100,99,129,113,90,0,109,107],
[141,94,122,72,103,102,92,101,0,119],
[102,85,62,114,101,93,82,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,113,105,113,109,100,102,102],
[107,0,110,98,100,99,108,101,95,90],
[96,100,0,106,111,107,109,104,99,94],
[97,112,104,0,102,107,106,102,102,113],
[105,110,99,108,0,107,112,116,109,103],
[97,111,103,103,103,0,97,93,113,105],
[101,102,101,104,98,113,0,103,101,97],
[110,109,106,108,94,117,107,0,92,103],
[108,115,111,108,101,97,109,118,0,117],
[108,120,116,97,107,105,113,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,103,129,125,112,118,113,130,108],
[116,0,123,118,123,102,108,129,126,119],
[107,87,0,117,116,93,124,115,136,116],
[81,92,93,0,127,74,107,101,98,104],
[85,87,94,83,0,72,92,87,96,89],
[98,108,117,136,138,0,125,118,118,101],
[92,102,86,103,118,85,0,109,107,124],
[97,81,95,109,123,92,101,0,91,105],
[80,84,74,112,114,92,103,119,0,104],
[102,91,94,106,121,109,86,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,120,123,94,111,113,105,111],
[99,0,104,108,110,93,109,105,104,101],
[91,106,0,108,103,107,125,95,96,102],
[90,102,102,0,102,90,101,82,99,101],
[87,100,107,108,0,90,104,99,104,110],
[116,117,103,120,120,0,121,95,113,110],
[99,101,85,109,106,89,0,83,100,89],
[97,105,115,128,111,115,127,0,113,109],
[105,106,114,111,106,97,110,97,0,108],
[99,109,108,109,100,100,121,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,123,95,96,116,83,114,97,125],
[114,0,122,104,107,119,112,92,106,111],
[87,88,0,85,89,102,101,91,90,107],
[115,106,125,0,102,134,113,120,112,136],
[114,103,121,108,0,107,92,96,112,109],
[94,91,108,76,103,0,103,106,105,130],
[127,98,109,97,118,107,0,103,90,122],
[96,118,119,90,114,104,107,0,95,102],
[113,104,120,98,98,105,120,115,0,129],
[85,99,103,74,101,80,88,108,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,113,102,114,108,107,92,108],
[104,0,101,111,118,104,110,102,101,99],
[112,109,0,107,106,101,110,95,105,105],
[97,99,103,0,89,97,100,84,90,93],
[108,92,104,121,0,98,109,109,106,105],
[96,106,109,113,112,0,115,104,103,104],
[102,100,100,110,101,95,0,89,102,95],
[103,108,115,126,101,106,121,0,104,98],
[118,109,105,120,104,107,108,106,0,110],
[102,111,105,117,105,106,115,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,96,89,97,101,101,97,95],
[100,0,100,102,96,100,108,108,101,89],
[104,110,0,99,92,103,100,101,101,98],
[114,108,111,0,100,114,113,116,104,101],
[121,114,118,110,0,113,108,114,105,108],
[113,110,107,96,97,0,105,111,109,99],
[109,102,110,97,102,105,0,104,90,93],
[109,102,109,94,96,99,106,0,101,95],
[113,109,109,106,105,101,120,109,0,98],
[115,121,112,109,102,111,117,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,95,106,128,116,102,93,109],
[106,0,114,89,98,126,112,94,111,97],
[101,96,0,109,95,109,108,113,103,95],
[115,121,101,0,104,120,119,98,117,114],
[104,112,115,106,0,130,135,108,125,116],
[82,84,101,90,80,0,99,99,88,80],
[94,98,102,91,75,111,0,100,96,86],
[108,116,97,112,102,111,110,0,114,90],
[117,99,107,93,85,122,114,96,0,102],
[101,113,115,96,94,130,124,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,101,104,76,87,88,112,106],
[98,0,127,110,104,87,96,102,106,110],
[100,83,0,102,85,89,99,101,98,100],
[109,100,108,0,107,98,113,92,99,103],
[106,106,125,103,0,104,106,105,117,105],
[134,123,121,112,106,0,114,119,102,110],
[123,114,111,97,104,96,0,102,122,100],
[122,108,109,118,105,91,108,0,118,108],
[98,104,112,111,93,108,88,92,0,100],
[104,100,110,107,105,100,110,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,93,61,43,104,92,75,56,73],
[137,0,110,109,77,94,138,106,108,125],
[117,100,0,76,74,136,103,107,87,90],
[149,101,134,0,106,103,119,122,104,93],
[167,133,136,104,0,91,149,148,105,121],
[106,116,74,107,119,0,118,120,119,121],
[118,72,107,91,61,92,0,122,88,135],
[135,104,103,88,62,90,88,0,105,89],
[154,102,123,106,105,91,122,105,0,119],
[137,85,120,117,89,89,75,121,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,112,98,114,106,91,104,104],
[116,0,103,123,102,109,118,111,118,120],
[100,107,0,116,90,105,101,93,107,121],
[98,87,94,0,90,103,100,91,105,104],
[112,108,120,120,0,111,116,105,113,120],
[96,101,105,107,99,0,106,99,103,105],
[104,92,109,110,94,104,0,93,102,108],
[119,99,117,119,105,111,117,0,120,103],
[106,92,103,105,97,107,108,90,0,111],
[106,90,89,106,90,105,102,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,84,75,92,90,104,94,108,88],
[116,0,89,107,101,104,88,110,105,96],
[126,121,0,95,77,112,95,108,117,98],
[135,103,115,0,112,98,104,109,124,117],
[118,109,133,98,0,115,97,114,120,101],
[120,106,98,112,95,0,102,123,115,115],
[106,122,115,106,113,108,0,118,135,105],
[116,100,102,101,96,87,92,0,123,98],
[102,105,93,86,90,95,75,87,0,87],
[122,114,112,93,109,95,105,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,105,151,105,137,120,135,122],
[107,0,75,91,121,47,108,138,121,91],
[108,135,0,120,149,77,93,91,137,106],
[105,119,90,0,137,47,91,91,107,108],
[59,89,61,73,0,47,62,92,92,94],
[105,163,133,163,163,0,137,148,180,150],
[73,102,117,119,148,73,0,116,163,119],
[90,72,119,119,118,62,94,0,119,120],
[75,89,73,103,118,30,47,91,0,92],
[88,119,104,102,116,60,91,90,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,34,68,85,34,17,87,68,52],
[140,0,87,69,87,53,70,104,123,88],
[176,123,0,87,122,53,34,140,106,124],
[142,141,123,0,121,105,88,122,123,140],
[125,123,88,89,0,35,87,160,159,125],
[176,157,157,105,175,0,140,210,140,142],
[193,140,176,122,123,70,0,158,175,142],
[123,106,70,88,50,0,52,0,88,53],
[142,87,104,87,51,70,35,122,0,106],
[158,122,86,70,85,68,68,157,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,210,0,105,105,105,210,0,105],
[210,0,210,105,105,105,210,210,0,105],
[0,0,0,0,0,0,105,210,0,105],
[210,105,210,0,210,105,210,210,105,105],
[105,105,210,0,0,105,210,210,0,105],
[105,105,210,105,105,0,210,210,105,210],
[105,0,105,0,0,0,0,210,0,0],
[0,0,0,0,0,0,0,0,0,0],
[210,210,210,105,210,105,210,210,0,105],
[105,105,105,105,105,0,210,210,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,85,96,76,75,81,92,90,110],
[143,0,108,132,111,111,102,126,109,125],
[125,102,0,119,104,93,104,129,114,114],
[114,78,91,0,114,93,95,123,109,108],
[134,99,106,96,0,100,124,139,97,120],
[135,99,117,117,110,0,126,132,150,132],
[129,108,106,115,86,84,0,129,113,132],
[118,84,81,87,71,78,81,0,97,99],
[120,101,96,101,113,60,97,113,0,101],
[100,85,96,102,90,78,78,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,104,104,87,97,104,75,103,103],
[128,0,129,121,90,113,143,111,115,129],
[106,81,0,113,84,96,109,95,101,107],
[106,89,97,0,98,106,115,87,93,120],
[123,120,126,112,0,107,127,110,107,103],
[113,97,114,104,103,0,109,101,103,116],
[106,67,101,95,83,101,0,90,96,96],
[135,99,115,123,100,109,120,0,107,122],
[107,95,109,117,103,107,114,103,0,118],
[107,81,103,90,107,94,114,88,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,99,85,104,83,97,106,106],
[110,0,109,78,102,110,90,79,96,94],
[118,101,0,103,103,92,75,128,88,98],
[111,132,107,0,112,115,107,125,101,99],
[125,108,107,98,0,137,104,126,126,116],
[106,100,118,95,73,0,86,110,98,89],
[127,120,135,103,106,124,0,126,107,128],
[113,131,82,85,84,100,84,0,73,104],
[104,114,122,109,84,112,103,137,0,98],
[104,116,112,111,94,121,82,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,121,112,118,96,123,107,105],
[98,0,120,115,116,116,91,118,101,99],
[89,90,0,105,105,107,108,111,93,104],
[89,95,105,0,87,112,91,121,84,95],
[98,94,105,123,0,115,105,114,101,100],
[92,94,103,98,95,0,91,110,80,86],
[114,119,102,119,105,119,0,125,120,120],
[87,92,99,89,96,100,85,0,87,87],
[103,109,117,126,109,130,90,123,0,106],
[105,111,106,115,110,124,90,123,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,103,93,105,80,114,74,104,90],
[133,0,112,112,109,100,107,96,134,114],
[107,98,0,112,87,99,118,96,93,89],
[117,98,98,0,77,91,107,119,116,100],
[105,101,123,133,0,113,109,97,105,106],
[130,110,111,119,97,0,129,99,105,106],
[96,103,92,103,101,81,0,107,126,93],
[136,114,114,91,113,111,103,0,112,114],
[106,76,117,94,105,105,84,98,0,80],
[120,96,121,110,104,104,117,96,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,96,96,105,106,104,104,87],
[115,0,108,105,112,110,112,109,111,103],
[107,102,0,100,102,113,100,104,112,103],
[114,105,110,0,109,118,112,104,118,110],
[114,98,108,101,0,110,98,106,106,94],
[105,100,97,92,100,0,112,110,109,92],
[104,98,110,98,112,98,0,96,105,100],
[106,101,106,106,104,100,114,0,104,98],
[106,99,98,92,104,101,105,106,0,90],
[123,107,107,100,116,118,110,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,124,96,115,110,113,102,104,112],
[108,0,125,100,112,110,118,95,114,110],
[86,85,0,94,87,98,102,102,90,102],
[114,110,116,0,104,103,119,113,105,129],
[95,98,123,106,0,97,121,105,96,122],
[100,100,112,107,113,0,112,107,100,112],
[97,92,108,91,89,98,0,99,100,104],
[108,115,108,97,105,103,111,0,107,115],
[106,96,120,105,114,110,110,103,0,105],
[98,100,108,81,88,98,106,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,111,96,97,111,107,108,97],
[85,0,105,100,92,81,99,99,91,89],
[106,105,0,108,105,92,108,104,110,102],
[99,110,102,0,99,84,114,104,99,92],
[114,118,105,111,0,109,125,119,104,111],
[113,129,118,126,101,0,120,126,120,100],
[99,111,102,96,85,90,0,102,89,88],
[103,111,106,106,91,84,108,0,93,102],
[102,119,100,111,106,90,121,117,0,104],
[113,121,108,118,99,110,122,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,110,90,72,80,87,74,87,85],
[124,0,121,105,107,103,124,109,107,105],
[100,89,0,84,89,81,105,71,92,101],
[120,105,126,0,106,105,116,119,114,119],
[138,103,121,104,0,91,112,122,106,112],
[130,107,129,105,119,0,110,112,104,114],
[123,86,105,94,98,100,0,84,85,117],
[136,101,139,91,88,98,126,0,109,123],
[123,103,118,96,104,106,125,101,0,120],
[125,105,109,91,98,96,93,87,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,110,102,116,115,111,105,109],
[103,0,110,113,111,113,106,114,109,106],
[105,100,0,103,101,104,106,105,101,98],
[100,97,107,0,96,109,97,105,98,107],
[108,99,109,114,0,108,109,121,109,118],
[94,97,106,101,102,0,105,97,100,108],
[95,104,104,113,101,105,0,113,101,100],
[99,96,105,105,89,113,97,0,99,95],
[105,101,109,112,101,110,109,111,0,110],
[101,104,112,103,92,102,110,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,99,112,109,115,123,107,114],
[94,0,110,110,103,110,107,98,87,93],
[108,100,0,100,98,105,102,105,97,117],
[111,100,110,0,105,99,99,104,105,106],
[98,107,112,105,0,108,111,114,98,114],
[101,100,105,111,102,0,113,104,87,108],
[95,103,108,111,99,97,0,110,93,105],
[87,112,105,106,96,106,100,0,85,119],
[103,123,113,105,112,123,117,125,0,124],
[96,117,93,104,96,102,105,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,75,127,115,121,114,84,110],
[99,0,111,82,127,85,105,111,93,123],
[95,99,0,93,110,110,113,77,94,92],
[135,128,117,0,118,115,126,111,95,132],
[83,83,100,92,0,90,95,108,78,102],
[95,125,100,95,120,0,105,101,110,115],
[89,105,97,84,115,105,0,97,99,103],
[96,99,133,99,102,109,113,0,87,102],
[126,117,116,115,132,100,111,123,0,101],
[100,87,118,78,108,95,107,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,84,92,107,85,61,100,104,72],
[97,0,99,112,126,81,90,108,98,90],
[126,111,0,112,117,76,105,112,92,102],
[118,98,98,0,117,80,62,115,114,100],
[103,84,93,93,0,90,41,103,84,82],
[125,129,134,130,120,0,98,129,104,125],
[149,120,105,148,169,112,0,138,116,114],
[110,102,98,95,107,81,72,0,71,86],
[106,112,118,96,126,106,94,139,0,110],
[138,120,108,110,128,85,96,124,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,111,88,95,95,108,95,106,107],
[123,0,110,106,107,115,115,96,123,123],
[99,100,0,96,101,93,102,86,102,108],
[122,104,114,0,115,109,115,104,113,106],
[115,103,109,95,0,103,103,100,123,116],
[115,95,117,101,107,0,109,106,117,111],
[102,95,108,95,107,101,0,104,99,107],
[115,114,124,106,110,104,106,0,117,126],
[104,87,108,97,87,93,111,93,0,103],
[103,87,102,104,94,99,103,84,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,101,123,95,128,108,111,116],
[102,0,93,127,96,108,113,101,97,114],
[104,117,0,132,106,104,122,106,107,107],
[109,83,78,0,105,95,107,95,76,101],
[87,114,104,105,0,94,120,110,94,107],
[115,102,106,115,116,0,131,117,103,108],
[82,97,88,103,90,79,0,96,72,81],
[102,109,104,115,100,93,114,0,110,107],
[99,113,103,134,116,107,138,100,0,104],
[94,96,103,109,103,102,129,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,97,106,112,99,100,103,106],
[104,0,107,104,105,106,107,108,105,102],
[103,103,0,98,97,102,100,99,99,104],
[113,106,112,0,111,98,108,106,108,116],
[104,105,113,99,0,102,103,106,99,110],
[98,104,108,112,108,0,98,102,106,102],
[111,103,110,102,107,112,0,104,100,108],
[110,102,111,104,104,108,106,0,107,108],
[107,105,111,102,111,104,110,103,0,105],
[104,108,106,94,100,108,102,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,108,101,104,110,103,103,102],
[120,0,106,118,119,97,118,104,111,96],
[105,104,0,92,85,101,104,112,110,96],
[102,92,118,0,92,95,99,99,107,96],
[109,91,125,118,0,97,107,105,116,109],
[106,113,109,115,113,0,110,102,116,94],
[100,92,106,111,103,100,0,103,104,104],
[107,106,98,111,105,108,107,0,108,110],
[107,99,100,103,94,94,106,102,0,104],
[108,114,114,114,101,116,106,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,102,103,107,86,103,100,117],
[98,0,105,95,101,116,100,107,122,99],
[104,105,0,107,101,110,114,114,96,107],
[108,115,103,0,101,114,94,104,99,110],
[107,109,109,109,0,108,106,96,121,110],
[103,94,100,96,102,0,104,96,129,106],
[124,110,96,116,104,106,0,110,100,110],
[107,103,96,106,114,114,100,0,118,101],
[110,88,114,111,89,81,110,92,0,93],
[93,111,103,100,100,104,100,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,118,119,105,109,106,105,104],
[98,0,107,120,109,92,106,110,109,111],
[104,103,0,121,108,113,114,105,106,107],
[92,90,89,0,112,109,93,89,86,106],
[91,101,102,98,0,107,94,104,107,117],
[105,118,97,101,103,0,100,91,105,108],
[101,104,96,117,116,110,0,92,109,106],
[104,100,105,121,106,119,118,0,112,120],
[105,101,104,124,103,105,101,98,0,107],
[106,99,103,104,93,102,104,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,128,101,117,113,101,112,114,119],
[85,0,76,83,102,92,91,115,95,108],
[82,134,0,104,110,105,86,95,120,114],
[109,127,106,0,124,104,106,132,125,125],
[93,108,100,86,0,98,115,96,109,101],
[97,118,105,106,112,0,125,117,116,123],
[109,119,124,104,95,85,0,99,124,98],
[98,95,115,78,114,93,111,0,117,100],
[96,115,90,85,101,94,86,93,0,114],
[91,102,96,85,109,87,112,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,112,106,102,94,88,110,109],
[118,0,127,116,118,124,100,97,125,117],
[104,83,0,110,85,117,91,106,111,112],
[98,94,100,0,112,127,103,118,118,104],
[104,92,125,98,0,123,117,104,120,109],
[108,86,93,83,87,0,94,95,117,107],
[116,110,119,107,93,116,0,101,127,124],
[122,113,104,92,106,115,109,0,118,94],
[100,85,99,92,90,93,83,92,0,105],
[101,93,98,106,101,103,86,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,86,83,103,89,90,91,95,98],
[105,0,104,85,94,93,104,99,97,91],
[124,106,0,101,111,103,99,105,109,95],
[127,125,109,0,110,94,113,112,111,100],
[107,116,99,100,0,85,111,106,102,106],
[121,117,107,116,125,0,104,114,111,103],
[120,106,111,97,99,106,0,109,109,105],
[119,111,105,98,104,96,101,0,95,99],
[115,113,101,99,108,99,101,115,0,98],
[112,119,115,110,104,107,105,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,119,101,113,118,113,112,112],
[97,0,114,108,94,105,97,112,94,116],
[100,96,0,111,109,101,101,109,98,108],
[91,102,99,0,95,103,103,100,93,109],
[109,116,101,115,0,118,108,111,110,125],
[97,105,109,107,92,0,97,102,107,118],
[92,113,109,107,102,113,0,114,107,113],
[97,98,101,110,99,108,96,0,104,101],
[98,116,112,117,100,103,103,106,0,108],
[98,94,102,101,85,92,97,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,106,96,105,115,92,109,91],
[108,0,98,100,114,117,97,103,105,93],
[106,112,0,103,107,112,102,104,108,96],
[104,110,107,0,105,113,99,109,101,105],
[114,96,103,105,0,121,101,102,112,100],
[105,93,98,97,89,0,92,93,102,88],
[95,113,108,111,109,118,0,105,112,98],
[118,107,106,101,108,117,105,0,110,93],
[101,105,102,109,98,108,98,100,0,93],
[119,117,114,105,110,122,112,117,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,95,89,122,96,91,89,89],
[111,0,107,75,97,117,83,87,93,85],
[97,103,0,103,86,102,72,69,77,101],
[115,135,107,0,88,114,63,79,113,89],
[121,113,124,122,0,125,123,112,111,94],
[88,93,108,96,85,0,81,84,94,91],
[114,127,138,147,87,129,0,97,115,104],
[119,123,141,131,98,126,113,0,129,106],
[121,117,133,97,99,116,95,81,0,90],
[121,125,109,121,116,119,106,104,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,115,105,112,106,124,131,114,116],
[92,0,112,97,98,104,119,108,102,102],
[95,98,0,106,109,107,109,124,105,107],
[105,113,104,0,114,103,113,111,111,113],
[98,112,101,96,0,111,106,113,106,115],
[104,106,103,107,99,0,108,107,106,110],
[86,91,101,97,104,102,0,107,103,102],
[79,102,86,99,97,103,103,0,93,104],
[96,108,105,99,104,104,107,117,0,117],
[94,108,103,97,95,100,108,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,122,118,103,104,120,108,122,102],
[109,0,103,98,103,104,117,106,119,108],
[88,107,0,99,102,103,120,120,95,101],
[92,112,111,0,124,116,118,111,105,103],
[107,107,108,86,0,95,96,99,104,108],
[106,106,107,94,115,0,106,103,99,108],
[90,93,90,92,114,104,0,99,101,99],
[102,104,90,99,111,107,111,0,97,96],
[88,91,115,105,106,111,109,113,0,102],
[108,102,109,107,102,102,111,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,117,105,113,105,107,115,109],
[103,0,94,100,93,103,89,100,109,102],
[107,116,0,103,101,110,104,116,116,106],
[93,110,107,0,91,100,94,100,100,100],
[105,117,109,119,0,112,103,114,121,104],
[97,107,100,110,98,0,103,107,111,107],
[105,121,106,116,107,107,0,116,112,121],
[103,110,94,110,96,103,94,0,112,93],
[95,101,94,110,89,99,98,98,0,94],
[101,108,104,110,106,103,89,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,106,114,112,100,110,98,104],
[111,0,111,108,113,111,111,100,106,100],
[102,99,0,112,119,103,104,110,119,101],
[104,102,98,0,112,115,106,107,108,106],
[96,97,91,98,0,108,105,101,106,93],
[98,99,107,95,102,0,100,109,99,112],
[110,99,106,104,105,110,0,110,104,105],
[100,110,100,103,109,101,100,0,98,105],
[112,104,91,102,104,111,106,112,0,112],
[106,110,109,104,117,98,105,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,97,104,117,108,94,106,116,93],
[94,0,95,110,103,107,94,93,107,104],
[113,115,0,109,119,109,105,115,114,110],
[106,100,101,0,120,108,97,107,107,109],
[93,107,91,90,0,99,85,87,102,85],
[102,103,101,102,111,0,104,98,115,99],
[116,116,105,113,125,106,0,106,124,110],
[104,117,95,103,123,112,104,0,112,102],
[94,103,96,103,108,95,86,98,0,94],
[117,106,100,101,125,111,100,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,91,91,111,104,96,101,92],
[104,0,92,85,90,104,94,99,105,90],
[114,118,0,105,103,116,114,102,112,104],
[119,125,105,0,109,125,114,107,114,113],
[119,120,107,101,0,115,101,99,120,104],
[99,106,94,85,95,0,92,89,103,95],
[106,116,96,96,109,118,0,103,113,106],
[114,111,108,103,111,121,107,0,105,113],
[109,105,98,96,90,107,97,105,0,98],
[118,120,106,97,106,115,104,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,105,113,101,110,101,107,109],
[96,0,113,113,108,95,100,102,92,97],
[96,97,0,107,86,86,85,106,75,93],
[105,97,103,0,100,95,94,99,91,103],
[97,102,124,110,0,92,102,90,97,98],
[109,115,124,115,118,0,112,118,113,104],
[100,110,125,116,108,98,0,106,102,97],
[109,108,104,111,120,92,104,0,103,100],
[103,118,135,119,113,97,108,107,0,111],
[101,113,117,107,112,106,113,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,123,102,110,118,115,111,132,98],
[114,0,112,111,103,101,121,113,121,108],
[87,98,0,102,98,95,127,86,109,104],
[108,99,108,0,125,115,101,99,93,85],
[100,107,112,85,0,121,118,96,108,100],
[92,109,115,95,89,0,121,102,113,101],
[95,89,83,109,92,89,0,85,103,94],
[99,97,124,111,114,108,125,0,120,103],
[78,89,101,117,102,97,107,90,0,107],
[112,102,106,125,110,109,116,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,109,124,120,127,110,99,143],
[89,0,103,76,103,105,113,98,110,96],
[93,107,0,88,99,114,120,98,112,140],
[101,134,122,0,113,132,130,106,121,123],
[86,107,111,97,0,120,130,117,117,141],
[90,105,96,78,90,0,124,104,123,107],
[83,97,90,80,80,86,0,90,95,115],
[100,112,112,104,93,106,120,0,122,140],
[111,100,98,89,93,87,115,88,0,114],
[67,114,70,87,69,103,95,70,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,114,112,117,110,96,109,106],
[107,0,101,109,114,106,98,100,105,106],
[98,109,0,107,92,109,115,95,114,93],
[96,101,103,0,106,87,94,95,103,100],
[98,96,118,104,0,98,108,106,101,100],
[93,104,101,123,112,0,112,92,104,104],
[100,112,95,116,102,98,0,109,97,106],
[114,110,115,115,104,118,101,0,115,99],
[101,105,96,107,109,106,113,95,0,112],
[104,104,117,110,110,106,104,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,115,105,99,109,111,115,97,112],
[122,0,121,111,83,116,123,114,109,118],
[95,89,0,117,90,87,108,119,110,118],
[105,99,93,0,104,110,131,116,87,113],
[111,127,120,106,0,105,124,130,117,144],
[101,94,123,100,105,0,112,121,101,106],
[99,87,102,79,86,98,0,119,88,108],
[95,96,91,94,80,89,91,0,91,101],
[113,101,100,123,93,109,122,119,0,130],
[98,92,92,97,66,104,102,109,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,119,97,108,113,111,120,88,119],
[122,0,124,114,97,128,105,135,103,128],
[91,86,0,93,102,102,90,113,89,103],
[113,96,117,0,109,117,109,114,106,103],
[102,113,108,101,0,106,108,110,109,109],
[97,82,108,93,104,0,100,106,94,94],
[99,105,120,101,102,110,0,108,98,107],
[90,75,97,96,100,104,102,0,89,94],
[122,107,121,104,101,116,112,121,0,113],
[91,82,107,107,101,116,103,116,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,108,113,114,108,109,103,130],
[85,0,108,84,89,85,96,106,113,95],
[88,102,0,97,80,96,100,99,88,99],
[102,126,113,0,103,105,110,109,116,115],
[97,121,130,107,0,109,120,99,120,121],
[96,125,114,105,101,0,119,120,116,105],
[102,114,110,100,90,91,0,106,111,101],
[101,104,111,101,111,90,104,0,107,95],
[107,97,122,94,90,94,99,103,0,96],
[80,115,111,95,89,105,109,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,108,100,106,104,122,99,111],
[110,0,102,100,95,96,87,101,96,118],
[114,108,0,109,96,88,85,95,92,105],
[102,110,101,0,85,95,97,110,109,113],
[110,115,114,125,0,100,84,104,97,126],
[104,114,122,115,110,0,122,108,116,132],
[106,123,125,113,126,88,0,104,100,119],
[88,109,115,100,106,102,106,0,116,110],
[111,114,118,101,113,94,110,94,0,119],
[99,92,105,97,84,78,91,100,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,114,117,109,101,90,94,105],
[105,0,105,110,109,97,94,89,91,96],
[116,105,0,104,112,108,102,96,71,108],
[96,100,106,0,99,99,103,87,96,93],
[93,101,98,111,0,107,97,105,83,107],
[101,113,102,111,103,0,113,98,88,114],
[109,116,108,107,113,97,0,91,102,101],
[120,121,114,123,105,112,119,0,110,129],
[116,119,139,114,127,122,108,100,0,114],
[105,114,102,117,103,96,109,81,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,159,105,105,102,108,105,108,105],
[156,0,159,105,105,156,54,105,105,159],
[51,51,0,51,51,51,105,51,105,105],
[105,105,159,0,51,102,108,156,54,156],
[105,105,159,159,0,102,108,159,159,159],
[108,54,159,108,108,0,108,108,108,108],
[102,156,105,102,102,102,0,102,102,156],
[105,105,159,54,51,102,108,0,54,159],
[102,105,105,156,51,102,108,156,0,156],
[105,51,105,54,51,102,54,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,89,85,62,123,81,81,69,116],
[121,0,116,94,112,87,79,108,94,102],
[121,94,0,107,98,115,95,112,99,112],
[125,116,103,0,93,128,102,107,81,125],
[148,98,112,117,0,107,105,94,103,123],
[87,123,95,82,103,0,83,100,71,100],
[129,131,115,108,105,127,0,131,109,134],
[129,102,98,103,116,110,79,0,115,115],
[141,116,111,129,107,139,101,95,0,133],
[94,108,98,85,87,110,76,95,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,92,94,126,106,118,93,118],
[101,0,102,89,93,110,90,93,82,97],
[113,108,0,99,90,111,103,104,94,111],
[118,121,111,0,102,129,131,118,114,120],
[116,117,120,108,0,120,113,117,100,121],
[84,100,99,81,90,0,98,101,89,99],
[104,120,107,79,97,112,0,107,93,120],
[92,117,106,92,93,109,103,0,100,109],
[117,128,116,96,110,121,117,110,0,125],
[92,113,99,90,89,111,90,101,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,113,105,103,94,101,106,95],
[114,0,105,117,120,114,114,110,118,104],
[112,105,0,107,118,107,107,97,111,100],
[97,93,103,0,104,98,102,100,107,92],
[105,90,92,106,0,96,99,92,96,92],
[107,96,103,112,114,0,102,103,115,105],
[116,96,103,108,111,108,0,100,106,101],
[109,100,113,110,118,107,110,0,114,109],
[104,92,99,103,114,95,104,96,0,91],
[115,106,110,118,118,105,109,101,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,125,113,112,120,111,101,99],
[110,0,89,113,114,91,100,103,90,100],
[92,121,0,112,101,104,100,113,96,106],
[85,97,98,0,118,102,113,114,95,87],
[97,96,109,92,0,108,98,90,95,90],
[98,119,106,108,102,0,105,111,95,87],
[90,110,110,97,112,105,0,117,106,105],
[99,107,97,96,120,99,93,0,98,98],
[109,120,114,115,115,115,104,112,0,114],
[111,110,104,123,120,123,105,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,115,121,104,110,109,105,101],
[106,0,102,111,120,103,128,102,116,113],
[100,108,0,105,117,96,107,97,99,96],
[95,99,105,0,115,102,116,106,86,104],
[89,90,93,95,0,80,111,92,92,98],
[106,107,114,108,130,0,103,109,102,107],
[100,82,103,94,99,107,0,93,96,98],
[101,108,113,104,118,101,117,0,104,106],
[105,94,111,124,118,108,114,106,0,107],
[109,97,114,106,112,103,112,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,116,104,111,100,109,103,113],
[99,0,94,107,101,101,103,99,98,104],
[112,116,0,117,111,111,107,113,97,112],
[94,103,93,0,95,101,105,94,95,97],
[106,109,99,115,0,103,100,113,96,116],
[99,109,99,109,107,0,112,111,107,112],
[110,107,103,105,110,98,0,106,101,113],
[101,111,97,116,97,99,104,0,96,101],
[107,112,113,115,114,103,109,114,0,114],
[97,106,98,113,94,98,97,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,122,109,95,105,116,93,118],
[92,0,113,108,89,64,95,93,82,120],
[104,97,0,98,95,79,92,94,85,119],
[88,102,112,0,95,76,108,98,97,125],
[101,121,115,115,0,86,107,103,95,109],
[115,146,131,134,124,0,108,101,113,121],
[105,115,118,102,103,102,0,93,96,110],
[94,117,116,112,107,109,117,0,106,126],
[117,128,125,113,115,97,114,104,0,124],
[92,90,91,85,101,89,100,84,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,103,102,107,108,118,118,93],
[89,0,86,83,80,97,90,93,95,81],
[105,124,0,108,112,105,106,102,108,97],
[107,127,102,0,97,116,109,100,104,101],
[108,130,98,113,0,111,113,108,120,111],
[103,113,105,94,99,0,94,101,95,102],
[102,120,104,101,97,116,0,89,119,106],
[92,117,108,110,102,109,121,0,116,105],
[92,115,102,106,90,115,91,94,0,98],
[117,129,113,109,99,108,104,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,105,128,99,98,126,81,106],
[97,0,77,98,84,78,91,113,61,76],
[103,133,0,144,133,145,128,164,116,149],
[105,112,66,0,93,105,80,122,75,91],
[82,126,77,117,0,109,83,112,95,102],
[111,132,65,105,101,0,104,138,102,120],
[112,119,82,130,127,106,0,137,104,137],
[84,97,46,88,98,72,73,0,50,77],
[129,149,94,135,115,108,106,160,0,107],
[104,134,61,119,108,90,73,133,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,96,90,125,79,96,121,78,86],
[85,0,95,84,101,85,77,112,76,70],
[114,115,0,112,117,87,95,140,99,98],
[120,126,98,0,134,89,109,152,110,103],
[85,109,93,76,0,70,70,118,92,87],
[131,125,123,121,140,0,98,126,92,130],
[114,133,115,101,140,112,0,127,80,124],
[89,98,70,58,92,84,83,0,92,83],
[132,134,111,100,118,118,130,118,0,126],
[124,140,112,107,123,80,86,127,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,100,103,98,96,124,107,112],
[89,0,89,98,107,81,90,104,90,97],
[107,121,0,117,119,104,111,124,123,110],
[110,112,93,0,106,92,101,113,89,109],
[107,103,91,104,0,92,99,110,95,103],
[112,129,106,118,118,0,104,107,106,112],
[114,120,99,109,111,106,0,117,98,98],
[86,106,86,97,100,103,93,0,99,105],
[103,120,87,121,115,104,112,111,0,125],
[98,113,100,101,107,98,112,105,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,114,119,99,123,117,96,101],
[98,0,120,117,115,98,147,104,93,99],
[97,90,0,108,89,96,112,89,82,97],
[96,93,102,0,117,103,101,98,86,95],
[91,95,121,93,0,100,133,78,96,105],
[111,112,114,107,110,0,127,95,124,113],
[87,63,98,109,77,83,0,78,69,89],
[93,106,121,112,132,115,132,0,92,102],
[114,117,128,124,114,86,141,118,0,95],
[109,111,113,115,105,97,121,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,99,94,100,94,84,94,96],
[108,0,92,106,107,104,93,96,97,104],
[117,118,0,109,106,103,98,105,87,110],
[111,104,101,0,100,97,109,87,95,97],
[116,103,104,110,0,105,101,103,98,108],
[110,106,107,113,105,0,92,93,103,102],
[116,117,112,101,109,118,0,90,96,102],
[126,114,105,123,107,117,120,0,107,113],
[116,113,123,115,112,107,114,103,0,98],
[114,106,100,113,102,108,108,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,95,110,116,97,104,103,88],
[109,0,123,90,114,108,119,95,110,97],
[99,87,0,96,103,99,104,103,93,96],
[115,120,114,0,109,99,104,98,83,113],
[100,96,107,101,0,109,90,89,95,116],
[94,102,111,111,101,0,110,98,92,94],
[113,91,106,106,120,100,0,105,91,96],
[106,115,107,112,121,112,105,0,101,122],
[107,100,117,127,115,118,119,109,0,124],
[122,113,114,97,94,116,114,88,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,104,108,97,93,113,96,108],
[95,0,110,106,92,89,99,88,88,101],
[115,100,0,115,95,97,105,95,109,102],
[106,104,95,0,106,89,95,103,100,96],
[102,118,115,104,0,94,109,113,105,104],
[113,121,113,121,116,0,115,121,103,115],
[117,111,105,115,101,95,0,101,96,101],
[97,122,115,107,97,89,109,0,107,94],
[114,122,101,110,105,107,114,103,0,108],
[102,109,108,114,106,95,109,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,109,117,102,113,109,112,113],
[98,0,99,103,106,94,100,109,100,95],
[99,111,0,104,113,99,106,111,100,108],
[101,107,106,0,109,102,96,109,105,111],
[93,104,97,101,0,104,102,103,106,108],
[108,116,111,108,106,0,108,97,99,113],
[97,110,104,114,108,102,0,111,101,106],
[101,101,99,101,107,113,99,0,102,108],
[98,110,110,105,104,111,109,108,0,115],
[97,115,102,99,102,97,104,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,89,115,109,107,115,92,111],
[94,0,86,98,78,77,82,78,74,104],
[98,124,0,105,109,108,113,121,110,135],
[121,112,105,0,98,94,105,100,86,106],
[95,132,101,112,0,97,116,127,82,94],
[101,133,102,116,113,0,87,115,90,114],
[103,128,97,105,94,123,0,134,96,123],
[95,132,89,110,83,95,76,0,71,109],
[118,136,100,124,128,120,114,139,0,121],
[99,106,75,104,116,96,87,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,108,117,102,102,109,91,106],
[120,0,122,109,127,118,103,114,109,103],
[103,88,0,114,124,113,101,109,103,118],
[102,101,96,0,124,101,95,102,103,102],
[93,83,86,86,0,100,95,97,105,109],
[108,92,97,109,110,0,92,96,100,94],
[108,107,109,115,115,118,0,114,99,114],
[101,96,101,108,113,114,96,0,112,95],
[119,101,107,107,105,110,111,98,0,99],
[104,107,92,108,101,116,96,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,95,110,141,96,108,105,115,88],
[88,0,86,74,89,99,102,89,99,86],
[115,124,0,101,109,109,123,92,120,96],
[100,136,109,0,115,110,122,119,126,127],
[69,121,101,95,0,130,127,98,108,93],
[114,111,101,100,80,0,123,104,127,96],
[102,108,87,88,83,87,0,71,93,88],
[105,121,118,91,112,106,139,0,110,114],
[95,111,90,84,102,83,117,100,0,104],
[122,124,114,83,117,114,122,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,107,103,79,79,93,84,75,98],
[135,0,115,118,100,93,118,116,105,113],
[103,95,0,107,95,91,112,104,94,104],
[107,92,103,0,92,92,101,104,91,97],
[131,110,115,118,0,102,114,112,103,111],
[131,117,119,118,108,0,125,119,104,115],
[117,92,98,109,96,85,0,103,83,110],
[126,94,106,106,98,91,107,0,93,103],
[135,105,116,119,107,106,127,117,0,123],
[112,97,106,113,99,95,100,107,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,101,110,98,100,94,114,94],
[115,0,108,99,106,107,108,100,119,101],
[114,102,0,113,112,113,108,107,102,108],
[109,111,97,0,115,103,111,98,120,111],
[100,104,98,95,0,111,109,94,101,98],
[112,103,97,107,99,0,109,108,108,105],
[110,102,102,99,101,101,0,95,106,102],
[116,110,103,112,116,102,115,0,124,104],
[96,91,108,90,109,102,104,86,0,98],
[116,109,102,99,112,105,108,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,129,129,88,94,107,101,111],
[104,0,98,111,96,90,78,97,77,98],
[103,112,0,134,83,75,75,96,82,98],
[81,99,76,0,90,71,63,85,77,103],
[81,114,127,120,0,100,91,126,83,116],
[122,120,135,139,110,0,117,129,104,109],
[116,132,135,147,119,93,0,133,112,123],
[103,113,114,125,84,81,77,0,107,103],
[109,133,128,133,127,106,98,103,0,102],
[99,112,112,107,94,101,87,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,91,108,113,62,94,103,95,98],
[126,0,123,113,115,108,97,108,107,113],
[119,87,0,98,92,66,82,101,101,88],
[102,97,112,0,107,85,96,97,112,89],
[97,95,118,103,0,80,87,99,86,93],
[148,102,144,125,130,0,122,106,122,123],
[116,113,128,114,123,88,0,115,110,124],
[107,102,109,113,111,104,95,0,79,103],
[115,103,109,98,124,88,100,131,0,117],
[112,97,122,121,117,87,86,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,98,97,88,101,100,95,107],
[123,0,116,106,124,109,107,133,116,99],
[109,94,0,105,115,105,89,123,100,97],
[112,104,105,0,107,99,105,120,84,111],
[113,86,95,103,0,98,104,106,84,95],
[122,101,105,111,112,0,107,108,106,100],
[109,103,121,105,106,103,0,123,109,101],
[110,77,87,90,104,102,87,0,102,79],
[115,94,110,126,126,104,101,108,0,109],
[103,111,113,99,115,110,109,131,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,130,129,112,118,135,123,100,125],
[93,0,119,108,101,106,113,116,93,108],
[80,91,0,95,74,74,110,107,69,81],
[81,102,115,0,94,95,115,112,73,95],
[98,109,136,116,0,99,139,118,112,119],
[92,104,136,115,111,0,123,127,80,118],
[75,97,100,95,71,87,0,103,89,96],
[87,94,103,98,92,83,107,0,92,81],
[110,117,141,137,98,130,121,118,0,114],
[85,102,129,115,91,92,114,129,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,101,96,108,110,108,109,114],
[97,0,96,97,105,90,98,110,107,107],
[102,114,0,107,104,97,108,106,108,104],
[109,113,103,0,109,97,119,116,117,120],
[114,105,106,101,0,104,124,122,119,119],
[102,120,113,113,106,0,113,123,112,115],
[100,112,102,91,86,97,0,112,107,107],
[102,100,104,94,88,87,98,0,108,104],
[101,103,102,93,91,98,103,102,0,105],
[96,103,106,90,91,95,103,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,116,88,111,114,109,105,111,107],
[116,0,142,104,116,147,129,129,136,111],
[94,68,0,88,79,101,97,88,94,92],
[122,106,122,0,98,146,110,125,108,115],
[99,94,131,112,0,133,102,101,108,94],
[96,63,109,64,77,0,85,93,93,79],
[101,81,113,100,108,125,0,114,124,96],
[105,81,122,85,109,117,96,0,112,89],
[99,74,116,102,102,117,86,98,0,91],
[103,99,118,95,116,131,114,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,98,98,106,95,103,104,101],
[111,0,107,103,112,101,118,116,101,85],
[98,103,0,103,115,101,98,115,100,99],
[112,107,107,0,113,102,90,119,110,101],
[112,98,95,97,0,103,96,122,100,102],
[104,109,109,108,107,0,96,109,106,94],
[115,92,112,120,114,114,0,121,112,108],
[107,94,95,91,88,101,89,0,87,88],
[106,109,110,100,110,104,98,123,0,93],
[109,125,111,109,108,116,102,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,117,95,111,110,112,114,108],
[106,0,105,98,101,101,103,105,111,120],
[102,105,0,109,108,112,109,115,106,112],
[93,112,101,0,87,108,97,102,109,108],
[115,109,102,123,0,113,113,118,118,126],
[99,109,98,102,97,0,110,102,101,111],
[100,107,101,113,97,100,0,99,106,107],
[98,105,95,108,92,108,111,0,105,104],
[96,99,104,101,92,109,104,105,0,107],
[102,90,98,102,84,99,103,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,97,92,96,99,112,90,108,107],
[128,0,97,113,134,116,124,123,127,121],
[113,113,0,115,126,125,136,119,108,98],
[118,97,95,0,104,120,116,90,128,98],
[114,76,84,106,0,105,108,92,119,101],
[111,94,85,90,105,0,100,84,116,89],
[98,86,74,94,102,110,0,107,102,93],
[120,87,91,120,118,126,103,0,117,98],
[102,83,102,82,91,94,108,93,0,94],
[103,89,112,112,109,121,117,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,117,91,73,98,89,96,99],
[105,0,87,111,90,74,80,110,92,96],
[117,123,0,102,108,93,91,107,92,118],
[93,99,108,0,93,81,77,86,92,92],
[119,120,102,117,0,88,107,83,100,108],
[137,136,117,129,122,0,110,101,119,128],
[112,130,119,133,103,100,0,101,97,118],
[121,100,103,124,127,109,109,0,94,99],
[114,118,118,118,110,91,113,116,0,123],
[111,114,92,118,102,82,92,111,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,107,91,99,102,112,115,115],
[97,0,104,118,102,100,96,100,112,82],
[100,106,0,125,98,110,88,113,123,94],
[103,92,85,0,86,101,90,98,121,91],
[119,108,112,124,0,117,95,110,135,109],
[111,110,100,109,93,0,93,104,105,93],
[108,114,122,120,115,117,0,116,124,95],
[98,110,97,112,100,106,94,0,115,96],
[95,98,87,89,75,105,86,95,0,92],
[95,128,116,119,101,117,115,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,93,102,101,99,95,100,106],
[114,0,104,102,114,111,115,100,116,119],
[112,106,0,106,95,102,105,111,107,114],
[117,108,104,0,112,115,97,113,114,106],
[108,96,115,98,0,108,101,106,114,110],
[109,99,108,95,102,0,104,103,107,115],
[111,95,105,113,109,106,0,117,118,113],
[115,110,99,97,104,107,93,0,101,101],
[110,94,103,96,96,103,92,109,0,100],
[104,91,96,104,100,95,97,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,97,112,84,98,96,101,92,95],
[121,0,117,124,116,117,127,95,127,119],
[113,93,0,101,95,120,119,102,102,106],
[98,86,109,0,94,102,118,100,116,122],
[126,94,115,116,0,108,128,110,105,126],
[112,93,90,108,102,0,104,102,94,108],
[114,83,91,92,82,106,0,99,89,112],
[109,115,108,110,100,108,111,0,98,112],
[118,83,108,94,105,116,121,112,0,115],
[115,91,104,88,84,102,98,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,98,131,130,129,131,147,147,95],
[49,0,67,34,66,66,50,65,96,32],
[112,143,0,113,160,160,113,143,160,95],
[79,176,97,0,114,145,112,111,161,111],
[80,144,50,96,0,113,81,96,129,47],
[81,144,50,65,97,0,80,112,129,32],
[79,160,97,98,129,130,0,127,177,64],
[63,145,67,99,114,98,83,0,129,80],
[63,114,50,49,81,81,33,81,0,63],
[115,178,115,99,163,178,146,130,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,124,112,108,95,103,107,97],
[107,0,116,109,122,110,93,104,94,99],
[86,94,0,105,109,106,80,86,105,90],
[86,101,105,0,102,112,89,93,94,92],
[98,88,101,108,0,97,89,91,86,95],
[102,100,104,98,113,0,89,111,94,99],
[115,117,130,121,121,121,0,107,113,101],
[107,106,124,117,119,99,103,0,111,98],
[103,116,105,116,124,116,97,99,0,110],
[113,111,120,118,115,111,109,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,90,97,98,106,98,87,93],
[121,0,118,118,110,116,105,115,108,119],
[107,92,0,101,118,108,93,95,105,104],
[120,92,109,0,114,97,105,92,109,93],
[113,100,92,96,0,111,105,95,96,97],
[112,94,102,113,99,0,111,100,96,93],
[104,105,117,105,105,99,0,104,96,105],
[112,95,115,118,115,110,106,0,93,108],
[123,102,105,101,114,114,114,117,0,110],
[117,91,106,117,113,117,105,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,133,77,91,91,86,99,119,123],
[144,0,147,109,121,98,118,97,141,143],
[77,63,0,87,55,67,63,63,84,89],
[133,101,123,0,101,113,107,109,130,155],
[119,89,155,109,0,99,86,96,128,122],
[119,112,143,97,111,0,109,85,118,133],
[124,92,147,103,124,101,0,87,145,148],
[111,113,147,101,114,125,123,0,165,123],
[91,69,126,80,82,92,65,45,0,135],
[87,67,121,55,88,77,62,87,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,122,101,108,110,118,101,102],
[94,0,113,109,116,116,111,112,109,101],
[91,97,0,105,105,103,94,104,102,105],
[88,101,105,0,102,108,107,95,99,102],
[109,94,105,108,0,100,102,101,89,98],
[102,94,107,102,110,0,111,98,94,88],
[100,99,116,103,108,99,0,111,110,107],
[92,98,106,115,109,112,99,0,96,89],
[109,101,108,111,121,116,100,114,0,103],
[108,109,105,108,112,122,103,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,81,82,84,62,44,84,85,147],
[127,0,104,84,107,106,87,106,85,190],
[129,106,0,85,87,63,87,85,128,149],
[128,126,125,0,85,106,65,85,107,149],
[126,103,123,125,0,63,127,104,127,126],
[148,104,147,104,147,0,128,127,127,168],
[166,123,123,145,83,82,0,83,125,166],
[126,104,125,125,106,83,127,0,85,168],
[125,125,82,103,83,83,85,125,0,168],
[63,20,61,61,84,42,44,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,105,0,0,210,0,0,105],
[210,0,210,105,210,105,210,105,210,105],
[210,0,0,105,105,105,210,105,210,105],
[105,105,105,0,105,105,210,105,105,210],
[210,0,105,105,0,105,210,105,210,105],
[210,105,105,105,105,0,210,105,105,105],
[0,0,0,0,0,0,0,0,0,0],
[210,105,105,105,105,105,210,0,210,105],
[210,0,0,105,0,105,210,0,0,105],
[105,105,105,0,105,105,210,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,107,126,108,99,107,96,114],
[104,0,95,109,96,97,88,107,93,92],
[98,115,0,113,115,99,104,113,107,99],
[103,101,97,0,94,102,87,99,89,100],
[84,114,95,116,0,110,104,96,98,109],
[102,113,111,108,100,0,93,122,86,110],
[111,122,106,123,106,117,0,115,94,118],
[103,103,97,111,114,88,95,0,81,97],
[114,117,103,121,112,124,116,129,0,121],
[96,118,111,110,101,100,92,113,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,104,157,105,52,210,104,52,157],
[53,0,52,157,53,0,210,52,0,157],
[106,158,0,157,53,105,210,210,105,157],
[53,53,53,0,0,0,105,53,0,53],
[105,157,157,210,0,157,210,157,157,210],
[158,210,105,210,53,0,210,105,0,210],
[0,0,0,105,0,0,0,52,0,0],
[106,158,0,157,53,105,158,0,53,105],
[158,210,105,210,53,210,210,157,0,210],
[53,53,53,157,0,0,210,105,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,110,106,111,105,108,102,97],
[103,0,111,118,118,106,108,108,104,94],
[118,99,0,120,122,91,118,117,94,96],
[100,92,90,0,108,104,115,106,95,86],
[104,92,88,102,0,97,97,100,99,92],
[99,104,119,106,113,0,117,104,114,96],
[105,102,92,95,113,93,0,98,100,97],
[102,102,93,104,110,106,112,0,100,94],
[108,106,116,115,111,96,110,110,0,106],
[113,116,114,124,118,114,113,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,110,99,120,106,115,115,113],
[112,0,92,133,111,91,130,115,108,116],
[117,118,0,124,101,114,140,125,147,139],
[100,77,86,0,77,103,99,91,112,97],
[111,99,109,133,0,115,127,119,129,110],
[90,119,96,107,95,0,110,111,118,116],
[104,80,70,111,83,100,0,83,103,92],
[95,95,85,119,91,99,127,0,116,109],
[95,102,63,98,81,92,107,94,0,95],
[97,94,71,113,100,94,118,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,99,107,97,83,98,102,100],
[113,0,106,115,112,118,106,94,103,118],
[107,104,0,116,114,106,100,103,108,103],
[111,95,94,0,111,104,91,90,97,109],
[103,98,96,99,0,106,80,93,99,111],
[113,92,104,106,104,0,89,100,100,103],
[127,104,110,119,130,121,0,105,117,117],
[112,116,107,120,117,110,105,0,111,112],
[108,107,102,113,111,110,93,99,0,117],
[110,92,107,101,99,107,93,98,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,96,94,96,104,102,106,104],
[105,0,114,108,97,109,111,104,109,106],
[100,96,0,102,101,115,95,104,96,106],
[114,102,108,0,102,101,98,111,105,109],
[116,113,109,108,0,117,116,112,102,124],
[114,101,95,109,93,0,105,107,95,111],
[106,99,115,112,94,105,0,113,110,116],
[108,106,106,99,98,103,97,0,111,100],
[104,101,114,105,108,115,100,99,0,112],
[106,104,104,101,86,99,94,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,113,103,108,96,114,98,107],
[98,0,95,105,102,91,98,96,96,106],
[113,115,0,113,104,111,112,109,115,115],
[97,105,97,0,104,99,94,109,110,99],
[107,108,106,106,0,99,99,106,102,106],
[102,119,99,111,111,0,111,108,108,110],
[114,112,98,116,111,99,0,117,109,118],
[96,114,101,101,104,102,93,0,96,112],
[112,114,95,100,108,102,101,114,0,110],
[103,104,95,111,104,100,92,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,130,126,96,91,75,85,103,98],
[99,0,132,108,100,128,98,89,108,102],
[80,78,0,116,69,76,94,79,104,85],
[84,102,94,0,92,88,81,74,95,89],
[114,110,141,118,0,93,81,84,103,109],
[119,82,134,122,117,0,95,91,99,115],
[135,112,116,129,129,115,0,98,132,119],
[125,121,131,136,126,119,112,0,105,120],
[107,102,106,115,107,111,78,105,0,104],
[112,108,125,121,101,95,91,90,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,109,112,129,105,119,119,115],
[106,0,113,102,104,122,120,109,107,116],
[95,97,0,108,102,127,107,107,99,108],
[101,108,102,0,104,115,114,106,105,112],
[98,106,108,106,0,113,117,109,103,94],
[81,88,83,95,97,0,95,95,88,83],
[105,90,103,96,93,115,0,107,96,103],
[91,101,103,104,101,115,103,0,104,98],
[91,103,111,105,107,122,114,106,0,106],
[95,94,102,98,116,127,107,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,111,112,110,119,108,125,103],
[102,0,99,105,110,100,108,92,110,99],
[100,111,0,117,101,120,106,113,120,120],
[99,105,93,0,106,93,109,107,100,99],
[98,100,109,104,0,96,122,101,130,102],
[100,110,90,117,114,0,108,99,114,95],
[91,102,104,101,88,102,0,104,94,107],
[102,118,97,103,109,111,106,0,114,104],
[85,100,90,110,80,96,116,96,0,94],
[107,111,90,111,108,115,103,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,109,99,80,87,81,73,82,114],
[120,0,111,129,86,101,88,74,102,119],
[101,99,0,101,86,77,62,81,79,98],
[111,81,109,0,74,87,79,79,95,107],
[130,124,124,136,0,126,105,104,105,131],
[123,109,133,123,84,0,98,108,112,124],
[129,122,148,131,105,112,0,111,116,143],
[137,136,129,131,106,102,99,0,115,146],
[128,108,131,115,105,98,94,95,0,126],
[96,91,112,103,79,86,67,64,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,102,118,101,119,116,105,111],
[104,0,104,93,116,98,101,100,109,106],
[109,106,0,101,111,98,92,105,111,105],
[108,117,109,0,124,114,105,118,131,110],
[92,94,99,86,0,93,90,100,102,103],
[109,112,112,96,117,0,100,103,109,107],
[91,109,118,105,120,110,0,116,100,110],
[94,110,105,92,110,107,94,0,104,100],
[105,101,99,79,108,101,110,106,0,109],
[99,104,105,100,107,103,100,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,100,89,91,89,100,100,98,93],
[127,0,124,113,98,101,105,100,111,104],
[110,86,0,93,99,97,112,86,105,88],
[121,97,117,0,103,107,92,104,116,92],
[119,112,111,107,0,103,113,109,114,103],
[121,109,113,103,107,0,113,108,119,98],
[110,105,98,118,97,97,0,94,108,104],
[110,110,124,106,101,102,116,0,116,111],
[112,99,105,94,96,91,102,94,0,88],
[117,106,122,118,107,112,106,99,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,105,100,109,102,98,113,101],
[106,0,101,91,90,93,88,95,104,99],
[98,109,0,89,90,95,97,100,115,95],
[105,119,121,0,112,114,108,112,141,112],
[110,120,120,98,0,106,105,99,120,115],
[101,117,115,96,104,0,104,100,121,100],
[108,122,113,102,105,106,0,108,110,110],
[112,115,110,98,111,110,102,0,118,95],
[97,106,95,69,90,89,100,92,0,95],
[109,111,115,98,95,110,100,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,113,124,107,116,98,122,109,88],
[120,0,121,121,107,117,102,128,135,102],
[97,89,0,104,113,124,92,118,112,96],
[86,89,106,0,105,118,91,115,115,110],
[103,103,97,105,0,111,111,108,116,96],
[94,93,86,92,99,0,95,117,98,86],
[112,108,118,119,99,115,0,119,124,119],
[88,82,92,95,102,93,91,0,104,99],
[101,75,98,95,94,112,86,106,0,110],
[122,108,114,100,114,124,91,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 210, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_210.csv", index=False, header=False)
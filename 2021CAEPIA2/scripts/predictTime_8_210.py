
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,101,96,95,94,105,101,107],
[109,0,115,107,100,110,107,103],
[114,95,0,103,89,108,114,105],
[115,103,107,0,103,116,110,112],
[116,110,121,107,0,112,113,102],
[105,100,102,94,98,0,117,109],
[109,103,96,100,97,93,0,107],
[103,107,105,98,108,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,69,56,91,65,74,103],
[120,0,84,96,107,83,96,101],
[141,126,0,91,141,105,110,120],
[154,114,119,0,126,91,131,114],
[119,103,69,84,0,79,68,134],
[145,127,105,119,131,0,95,112],
[136,114,100,79,142,115,0,119],
[107,109,90,96,76,98,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,121,131,102,125,127],
[108,0,93,144,130,134,122,130],
[96,117,0,130,136,145,136,153],
[89,66,80,0,87,97,116,85],
[79,80,74,123,0,111,104,122],
[108,76,65,113,99,0,100,107],
[85,88,74,94,106,110,0,121],
[83,80,57,125,88,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,98,118,105,117,107],
[96,0,110,106,90,91,102,104],
[97,100,0,96,104,97,102,104],
[112,104,114,0,102,107,97,104],
[92,120,106,108,0,114,118,110],
[105,119,113,103,96,0,107,104],
[93,108,108,113,92,103,0,100],
[103,106,106,106,100,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,115,105,100,123,116,102],
[79,0,79,87,96,96,103,86],
[95,131,0,101,117,125,133,111],
[105,123,109,0,115,108,105,104],
[110,114,93,95,0,97,110,100],
[87,114,85,102,113,0,115,102],
[94,107,77,105,100,95,0,95],
[108,124,99,106,110,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,102,113,108,106,107],
[110,0,110,118,110,109,108,102],
[107,100,0,115,101,100,101,89],
[108,92,95,0,106,91,102,92],
[97,100,109,104,0,98,104,103],
[102,101,110,119,112,0,107,110],
[104,102,109,108,106,103,0,100],
[103,108,121,118,107,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,126,119,107,99,106,105],
[124,0,137,108,99,128,125,116],
[84,73,0,101,88,76,127,91],
[91,102,109,0,111,81,110,84],
[103,111,122,99,0,102,117,92],
[111,82,134,129,108,0,123,92],
[104,85,83,100,93,87,0,99],
[105,94,119,126,118,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,79,84,94,88,92,88],
[123,0,106,105,112,113,98,101],
[131,104,0,111,135,116,108,110],
[126,105,99,0,120,101,104,106],
[116,98,75,90,0,97,85,90],
[122,97,94,109,113,0,100,109],
[118,112,102,106,125,110,0,111],
[122,109,100,104,120,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,106,121,117,133,112],
[107,0,112,101,111,106,126,114],
[106,98,0,100,106,106,125,103],
[104,109,110,0,109,114,131,117],
[89,99,104,101,0,103,128,103],
[93,104,104,96,107,0,117,110],
[77,84,85,79,82,93,0,94],
[98,96,107,93,107,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,96,96,98,90,97],
[115,0,119,106,123,98,115,93],
[103,91,0,90,111,107,89,96],
[114,104,120,0,112,110,109,104],
[114,87,99,98,0,95,108,100],
[112,112,103,100,115,0,104,108],
[120,95,121,101,102,106,0,104],
[113,117,114,106,110,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,98,115,110,118,107],
[106,0,113,102,97,117,119,110],
[88,97,0,107,106,107,108,90],
[112,108,103,0,112,78,105,99],
[95,113,104,98,0,108,107,114],
[100,93,103,132,102,0,127,110],
[92,91,102,105,103,83,0,97],
[103,100,120,111,96,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,96,91,93,109,109],
[104,0,91,119,105,101,110,112],
[99,119,0,101,102,100,96,125],
[114,91,109,0,86,94,81,115],
[119,105,108,124,0,111,104,144],
[117,109,110,116,99,0,113,125],
[101,100,114,129,106,97,0,103],
[101,98,85,95,66,85,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,79,87,82,86,104],
[118,0,94,84,105,96,121,102],
[120,116,0,125,82,109,93,139],
[131,126,85,0,102,82,84,85],
[123,105,128,108,0,102,97,111],
[128,114,101,128,108,0,117,87],
[124,89,117,126,113,93,0,123],
[106,108,71,125,99,123,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,99,101,106,97,92],
[108,0,111,112,109,105,98,97],
[109,99,0,110,110,107,103,93],
[111,98,100,0,106,109,89,90],
[109,101,100,104,0,102,90,93],
[104,105,103,101,108,0,101,105],
[113,112,107,121,120,109,0,98],
[118,113,117,120,117,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,105,99,121,87,110],
[119,0,111,111,121,102,110,120],
[101,99,0,123,94,109,82,99],
[105,99,87,0,79,89,80,94],
[111,89,116,131,0,102,96,103],
[89,108,101,121,108,0,89,101],
[123,100,128,130,114,121,0,125],
[100,90,111,116,107,109,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,119,103,110,113,108],
[106,0,104,123,110,106,119,104],
[102,106,0,111,110,101,125,103],
[91,87,99,0,114,93,93,100],
[107,100,100,96,0,94,96,93],
[100,104,109,117,116,0,115,114],
[97,91,85,117,114,95,0,87],
[102,106,107,110,117,96,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,116,105,119,122,116,109],
[110,0,112,113,115,129,101,110],
[94,98,0,105,114,118,96,107],
[105,97,105,0,113,120,102,101],
[91,95,96,97,0,100,93,90],
[88,81,92,90,110,0,96,95],
[94,109,114,108,117,114,0,104],
[101,100,103,109,120,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,111,109,145,109,127,101],
[117,0,105,116,136,110,130,121],
[99,105,0,99,110,103,121,111],
[101,94,111,0,119,97,125,113],
[65,74,100,91,0,87,94,83],
[101,100,107,113,123,0,127,116],
[83,80,89,85,116,83,0,99],
[109,89,99,97,127,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,105,97,98,104,100],
[117,0,117,102,108,109,111,113],
[109,93,0,96,110,106,105,114],
[105,108,114,0,111,104,111,109],
[113,102,100,99,0,94,99,99],
[112,101,104,106,116,0,105,112],
[106,99,105,99,111,105,0,99],
[110,97,96,101,111,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,96,107,105,115,112],
[111,0,106,97,123,101,115,114],
[96,104,0,106,106,87,114,118],
[114,113,104,0,123,118,98,117],
[103,87,104,87,0,94,107,103],
[105,109,123,92,116,0,109,119],
[95,95,96,112,103,101,0,112],
[98,96,92,93,107,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,121,135,132,126,119],
[113,0,116,88,114,122,112,125],
[97,94,0,109,136,131,124,134],
[89,122,101,0,128,141,113,136],
[75,96,74,82,0,117,105,109],
[78,88,79,69,93,0,113,102],
[84,98,86,97,105,97,0,120],
[91,85,76,74,101,108,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,81,94,91,97,98],
[113,0,109,95,93,108,106,102],
[121,101,0,98,109,100,106,107],
[129,115,112,0,105,105,119,103],
[116,117,101,105,0,114,108,111],
[119,102,110,105,96,0,113,102],
[113,104,104,91,102,97,0,94],
[112,108,103,107,99,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,98,107,113,102,109],
[101,0,115,88,99,104,100,110],
[100,95,0,97,98,109,89,93],
[112,122,113,0,99,113,112,108],
[103,111,112,111,0,113,96,116],
[97,106,101,97,97,0,92,97],
[108,110,121,98,114,118,0,117],
[101,100,117,102,94,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,97,106,92,100,100],
[104,0,101,102,114,108,120,104],
[106,109,0,103,113,98,114,102],
[113,108,107,0,115,101,112,105],
[104,96,97,95,0,89,92,98],
[118,102,112,109,121,0,109,101],
[110,90,96,98,118,101,0,98],
[110,106,108,105,112,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,112,117,114,124,111],
[106,0,104,115,113,115,112,103],
[98,106,0,106,103,113,118,105],
[98,95,104,0,108,111,119,97],
[93,97,107,102,0,110,113,106],
[96,95,97,99,100,0,111,89],
[86,98,92,91,97,99,0,91],
[99,107,105,113,104,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,140,119,109,107,104],
[91,0,109,114,116,121,125,109],
[100,101,0,133,104,110,93,96],
[70,96,77,0,100,60,85,80],
[91,94,106,110,0,82,72,80],
[101,89,100,150,128,0,119,105],
[103,85,117,125,138,91,0,119],
[106,101,114,130,130,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,103,111,119,116,111],
[94,0,112,110,103,109,122,108],
[100,98,0,100,91,108,102,118],
[107,100,110,0,102,112,102,115],
[99,107,119,108,0,111,109,105],
[91,101,102,98,99,0,103,103],
[94,88,108,108,101,107,0,111],
[99,102,92,95,105,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,104,110,103,119,116],
[117,0,127,104,124,108,135,121],
[89,83,0,90,112,88,113,100],
[106,106,120,0,112,105,109,114],
[100,86,98,98,0,95,100,102],
[107,102,122,105,115,0,122,123],
[91,75,97,101,110,88,0,96],
[94,89,110,96,108,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,107,103,116,113,113],
[95,0,89,97,113,95,113,107],
[104,121,0,108,122,108,112,121],
[103,113,102,0,100,102,102,108],
[107,97,88,110,0,95,108,116],
[94,115,102,108,115,0,110,120],
[97,97,98,108,102,100,0,101],
[97,103,89,102,94,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,108,102,102,100,104],
[113,0,97,120,118,106,107,102],
[110,113,0,119,111,97,107,104],
[102,90,91,0,97,99,94,110],
[108,92,99,113,0,103,93,97],
[108,104,113,111,107,0,108,116],
[110,103,103,116,117,102,0,112],
[106,108,106,100,113,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,88,92,98,76,84,87],
[135,0,101,129,115,117,102,116],
[122,109,0,127,121,111,120,97],
[118,81,83,0,105,77,81,96],
[112,95,89,105,0,86,97,110],
[134,93,99,133,124,0,101,110],
[126,108,90,129,113,109,0,117],
[123,94,113,114,100,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,135,140,98,111,121,178],
[89,0,83,106,68,86,130,63],
[75,127,0,141,135,110,146,103],
[70,104,69,0,108,62,118,74],
[112,142,75,102,0,103,84,117],
[99,124,100,148,107,0,142,116],
[89,80,64,92,126,68,0,81],
[32,147,107,136,93,94,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,101,115,110,104,108],
[97,0,103,105,107,114,106,118],
[113,107,0,102,120,115,105,119],
[109,105,108,0,125,121,100,109],
[95,103,90,85,0,104,104,100],
[100,96,95,89,106,0,98,99],
[106,104,105,110,106,112,0,116],
[102,92,91,101,110,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,114,115,111,126,99],
[100,0,103,109,100,104,115,109],
[102,107,0,119,107,105,121,100],
[96,101,91,0,100,105,104,103],
[95,110,103,110,0,107,96,122],
[99,106,105,105,103,0,118,94],
[84,95,89,106,114,92,0,100],
[111,101,110,107,88,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,113,98,118,115,99],
[100,0,110,115,118,125,121,126],
[99,100,0,127,124,115,108,116],
[97,95,83,0,100,115,101,95],
[112,92,86,110,0,119,114,90],
[92,85,95,95,91,0,109,95],
[95,89,102,109,96,101,0,93],
[111,84,94,115,120,115,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,138,135,144,106,131,130],
[113,0,109,121,137,97,118,93],
[72,101,0,106,150,88,108,98],
[75,89,104,0,110,97,90,120],
[66,73,60,100,0,78,94,109],
[104,113,122,113,132,0,109,116],
[79,92,102,120,116,101,0,132],
[80,117,112,90,101,94,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,115,117,107,106,119],
[96,0,107,109,105,102,97,96],
[105,103,0,106,116,107,105,109],
[95,101,104,0,117,93,101,103],
[93,105,94,93,0,104,99,101],
[103,108,103,117,106,0,97,100],
[104,113,105,109,111,113,0,118],
[91,114,101,107,109,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,99,103,106,117,110],
[101,0,89,86,89,112,96,104],
[106,121,0,105,112,121,110,118],
[111,124,105,0,111,111,119,121],
[107,121,98,99,0,107,112,111],
[104,98,89,99,103,0,104,102],
[93,114,100,91,98,106,0,108],
[100,106,92,89,99,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,115,107,98,106,118],
[115,0,134,108,122,106,102,112],
[90,76,0,100,100,93,93,102],
[95,102,110,0,111,97,102,106],
[103,88,110,99,0,85,101,99],
[112,104,117,113,125,0,100,117],
[104,108,117,108,109,110,0,110],
[92,98,108,104,111,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,108,91,105,104,109,89],
[127,0,137,105,118,117,131,113],
[102,73,0,73,89,98,88,91],
[119,105,137,0,96,131,129,113],
[105,92,121,114,0,108,113,109],
[106,93,112,79,102,0,113,105],
[101,79,122,81,97,97,0,88],
[121,97,119,97,101,105,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,108,106,97,101,102],
[107,0,104,94,115,109,110,107],
[117,106,0,102,118,105,101,115],
[102,116,108,0,113,104,113,107],
[104,95,92,97,0,103,103,103],
[113,101,105,106,107,0,113,114],
[109,100,109,97,107,97,0,108],
[108,103,95,103,107,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,93,87,131,110,103],
[93,0,92,88,102,121,93,116],
[92,118,0,106,126,127,105,116],
[117,122,104,0,106,131,112,116],
[123,108,84,104,0,134,97,105],
[79,89,83,79,76,0,71,88],
[100,117,105,98,113,139,0,117],
[107,94,94,94,105,122,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,96,112,103,105,108],
[107,0,99,104,109,104,113,121],
[109,111,0,111,113,104,102,102],
[114,106,99,0,116,107,107,108],
[98,101,97,94,0,101,96,102],
[107,106,106,103,109,0,109,108],
[105,97,108,103,114,101,0,106],
[102,89,108,102,108,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,99,89,91,100,103],
[109,0,112,106,93,101,107,108],
[97,98,0,87,90,91,90,102],
[111,104,123,0,96,98,99,101],
[121,117,120,114,0,105,115,115],
[119,109,119,112,105,0,96,113],
[110,103,120,111,95,114,0,117],
[107,102,108,109,95,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,137,102,162,133,144,122],
[119,0,92,121,158,142,137,123],
[73,118,0,97,148,107,119,117],
[108,89,113,0,174,160,152,106],
[48,52,62,36,0,76,79,97],
[77,68,103,50,134,0,115,96],
[66,73,91,58,131,95,0,118],
[88,87,93,104,113,114,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,99,120,110,92,110],
[101,0,91,104,101,95,100,98],
[106,119,0,122,123,124,103,108],
[111,106,88,0,97,108,96,98],
[90,109,87,113,0,99,86,85],
[100,115,86,102,111,0,91,91],
[118,110,107,114,124,119,0,103],
[100,112,102,112,125,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,95,103,100,99,101],
[113,0,94,111,107,109,105,97],
[117,116,0,118,118,115,96,112],
[115,99,92,0,99,102,90,108],
[107,103,92,111,0,107,94,103],
[110,101,95,108,103,0,109,111],
[111,105,114,120,116,101,0,111],
[109,113,98,102,107,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,105,93,111,112,110],
[98,0,116,89,88,113,97,117],
[108,94,0,109,118,114,110,126],
[105,121,101,0,104,119,100,115],
[117,122,92,106,0,127,110,111],
[99,97,96,91,83,0,101,111],
[98,113,100,110,100,109,0,115],
[100,93,84,95,99,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,73,93,86,78,101,134],
[131,0,94,137,106,103,139,139],
[137,116,0,125,97,125,119,132],
[117,73,85,0,93,129,141,132],
[124,104,113,117,0,117,127,139],
[132,107,85,81,93,0,93,116],
[109,71,91,69,83,117,0,121],
[76,71,78,78,71,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,107,114,107,108,102],
[93,0,111,100,103,101,94,105],
[96,99,0,94,103,97,96,102],
[103,110,116,0,112,114,104,119],
[96,107,107,98,0,103,99,104],
[103,109,113,96,107,0,98,99],
[102,116,114,106,111,112,0,104],
[108,105,108,91,106,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,129,103,84,128,118,114],
[101,0,101,113,86,105,124,70],
[81,109,0,89,86,94,128,68],
[107,97,121,0,102,111,145,99],
[126,124,124,108,0,120,125,93],
[82,105,116,99,90,0,113,101],
[92,86,82,65,85,97,0,93],
[96,140,142,111,117,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,67,111,103,98,82],
[104,0,116,90,135,130,108,100],
[97,94,0,92,139,127,101,101],
[143,120,118,0,119,146,95,117],
[99,75,71,91,0,122,101,97],
[107,80,83,64,88,0,77,82],
[112,102,109,115,109,133,0,111],
[128,110,109,93,113,128,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,99,70,104,107,100],
[106,0,88,91,97,82,105,81],
[106,122,0,105,96,98,107,94],
[111,119,105,0,114,101,129,107],
[140,113,114,96,0,101,109,112],
[106,128,112,109,109,0,128,96],
[103,105,103,81,101,82,0,97],
[110,129,116,103,98,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,99,98,115,98,96],
[119,0,112,109,102,118,105,102],
[104,98,0,99,103,111,101,104],
[111,101,111,0,113,114,108,107],
[112,108,107,97,0,111,101,90],
[95,92,99,96,99,0,92,93],
[112,105,109,102,109,118,0,103],
[114,108,106,103,120,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,96,114,112,105,104],
[109,0,118,116,113,116,121,103],
[96,92,0,102,111,98,105,112],
[114,94,108,0,111,96,109,105],
[96,97,99,99,0,107,100,98],
[98,94,112,114,103,0,110,95],
[105,89,105,101,110,100,0,96],
[106,107,98,105,112,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,102,99,118,115,109],
[109,0,105,113,109,110,119,117],
[102,105,0,115,113,103,102,109],
[108,97,95,0,110,104,108,117],
[111,101,97,100,0,113,105,101],
[92,100,107,106,97,0,109,104],
[95,91,108,102,105,101,0,97],
[101,93,101,93,109,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,110,106,105,107,94],
[102,0,117,122,97,108,89,105],
[89,93,0,97,87,88,87,98],
[100,88,113,0,102,97,105,93],
[104,113,123,108,0,108,98,110],
[105,102,122,113,102,0,109,120],
[103,121,123,105,112,101,0,124],
[116,105,112,117,100,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,99,102,102,111,117],
[99,0,111,98,107,87,108,132],
[103,99,0,101,102,94,126,137],
[111,112,109,0,107,104,135,139],
[108,103,108,103,0,115,104,142],
[108,123,116,106,95,0,89,114],
[99,102,84,75,106,121,0,117],
[93,78,73,71,68,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,120,118,110,112,105],
[91,0,90,91,110,78,85,93],
[100,120,0,109,111,105,112,106],
[90,119,101,0,103,96,102,97],
[92,100,99,107,0,96,106,83],
[100,132,105,114,114,0,120,110],
[98,125,98,108,104,90,0,92],
[105,117,104,113,127,100,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,106,113,98,118,112],
[93,0,113,82,99,85,111,109],
[90,97,0,91,85,95,104,97],
[104,128,119,0,122,109,122,118],
[97,111,125,88,0,97,107,109],
[112,125,115,101,113,0,111,111],
[92,99,106,88,103,99,0,108],
[98,101,113,92,101,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,89,89,112,103,121],
[108,0,95,101,99,135,105,116],
[117,115,0,90,97,123,112,101],
[121,109,120,0,113,133,105,110],
[121,111,113,97,0,116,109,111],
[98,75,87,77,94,0,82,84],
[107,105,98,105,101,128,0,97],
[89,94,109,100,99,126,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,82,115,90,108,91,106],
[84,0,94,84,85,94,85,87],
[128,116,0,108,110,123,96,96],
[95,126,102,0,109,106,109,104],
[120,125,100,101,0,111,98,110],
[102,116,87,104,99,0,94,84],
[119,125,114,101,112,116,0,104],
[104,123,114,106,100,126,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,101,96,110,115,105,115],
[84,0,91,87,101,92,86,87],
[109,119,0,119,129,112,99,115],
[114,123,91,0,113,114,111,110],
[100,109,81,97,0,85,97,88],
[95,118,98,96,125,0,90,100],
[105,124,111,99,113,120,0,109],
[95,123,95,100,122,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,97,104,114,105,105],
[93,0,88,100,90,108,103,94],
[115,122,0,119,113,112,126,105],
[113,110,91,0,101,122,111,102],
[106,120,97,109,0,123,108,121],
[96,102,98,88,87,0,109,95],
[105,107,84,99,102,101,0,92],
[105,116,105,108,89,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,111,120,121,107,97],
[116,0,101,104,129,102,111,105],
[106,109,0,100,107,84,93,90],
[99,106,110,0,103,98,119,107],
[90,81,103,107,0,106,111,108],
[89,108,126,112,104,0,103,103],
[103,99,117,91,99,107,0,90],
[113,105,120,103,102,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,103,101,101,93,109],
[110,0,90,93,99,110,92,110],
[105,120,0,94,106,109,99,113],
[107,117,116,0,109,122,101,123],
[109,111,104,101,0,119,117,124],
[109,100,101,88,91,0,101,109],
[117,118,111,109,93,109,0,115],
[101,100,97,87,86,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,61,99,117,102,92],
[118,0,97,62,100,101,111,82],
[118,113,0,139,152,134,104,119],
[149,148,71,0,117,136,138,126],
[111,110,58,93,0,118,81,117],
[93,109,76,74,92,0,82,98],
[108,99,106,72,129,128,0,105],
[118,128,91,84,93,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,111,104,104,94,93],
[97,0,98,100,98,105,102,96],
[101,112,0,107,112,105,111,100],
[99,110,103,0,97,115,87,99],
[106,112,98,113,0,115,105,105],
[106,105,105,95,95,0,105,93],
[116,108,99,123,105,105,0,100],
[117,114,110,111,105,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,117,82,114,92,90,92],
[122,0,127,120,145,100,117,95],
[93,83,0,97,111,86,116,85],
[128,90,113,0,128,111,117,120],
[96,65,99,82,0,94,71,61],
[118,110,124,99,116,0,128,101],
[120,93,94,93,139,82,0,94],
[118,115,125,90,149,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,119,105,123,122,120],
[92,0,93,101,90,97,90,92],
[93,117,0,106,86,97,115,107],
[91,109,104,0,100,92,95,93],
[105,120,124,110,0,114,108,114],
[87,113,113,118,96,0,104,118],
[88,120,95,115,102,106,0,117],
[90,118,103,117,96,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,69,80,132,89,81],
[106,0,138,88,97,106,92,114],
[88,72,0,94,128,123,111,122],
[141,122,116,0,136,133,81,125],
[130,113,82,74,0,110,105,118],
[78,104,87,77,100,0,106,103],
[121,118,99,129,105,104,0,111],
[129,96,88,85,92,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,94,110,90,99,86],
[124,0,103,112,114,119,103,104],
[111,107,0,109,113,107,104,102],
[116,98,101,0,105,106,96,108],
[100,96,97,105,0,105,86,101],
[120,91,103,104,105,0,108,107],
[111,107,106,114,124,102,0,102],
[124,106,108,102,109,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,99,90,102,92,81],
[98,0,103,106,108,100,102,100],
[118,107,0,101,90,99,111,97],
[111,104,109,0,101,116,106,114],
[120,102,120,109,0,109,114,99],
[108,110,111,94,101,0,104,83],
[118,108,99,104,96,106,0,100],
[129,110,113,96,111,127,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,102,91,102,92,100],
[112,0,101,95,90,98,88,81],
[107,109,0,95,89,98,82,68],
[108,115,115,0,111,95,112,100],
[119,120,121,99,0,92,110,107],
[108,112,112,115,118,0,104,87],
[118,122,128,98,100,106,0,93],
[110,129,142,110,103,123,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,106,113,113,100,104],
[104,0,122,116,115,116,113,106],
[95,88,0,101,109,100,85,98],
[104,94,109,0,112,106,96,96],
[97,95,101,98,0,105,84,94],
[97,94,110,104,105,0,87,95],
[110,97,125,114,126,123,0,113],
[106,104,112,114,116,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,119,109,99,101,98,111],
[119,0,117,103,105,117,103,117],
[91,93,0,88,93,100,97,101],
[101,107,122,0,110,107,105,126],
[111,105,117,100,0,113,105,120],
[109,93,110,103,97,0,104,115],
[112,107,113,105,105,106,0,106],
[99,93,109,84,90,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,108,104,108,102,103],
[100,0,95,95,87,95,97,86],
[108,115,0,105,108,102,105,107],
[102,115,105,0,102,108,96,107],
[106,123,102,108,0,107,103,107],
[102,115,108,102,103,0,106,100],
[108,113,105,114,107,104,0,108],
[107,124,103,103,103,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,104,115,134,114,109],
[97,0,104,103,101,124,95,114],
[96,106,0,125,113,120,91,99],
[106,107,85,0,110,95,110,112],
[95,109,97,100,0,110,110,94],
[76,86,90,115,100,0,92,79],
[96,115,119,100,100,118,0,126],
[101,96,111,98,116,131,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,96,117,108,98,105,112],
[96,0,95,103,102,95,93,101],
[114,115,0,108,117,115,105,119],
[93,107,102,0,112,100,104,111],
[102,108,93,98,0,94,100,115],
[112,115,95,110,116,0,112,111],
[105,117,105,106,110,98,0,119],
[98,109,91,99,95,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,125,124,109,75,100,117],
[94,0,83,95,123,82,105,116],
[85,127,0,119,117,79,110,97],
[86,115,91,0,91,78,122,95],
[101,87,93,119,0,99,117,134],
[135,128,131,132,111,0,105,119],
[110,105,100,88,93,105,0,109],
[93,94,113,115,76,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,113,95,110,107,107],
[107,0,103,111,108,106,99,109],
[98,107,0,116,106,114,98,110],
[97,99,94,0,89,92,93,101],
[115,102,104,121,0,110,99,128],
[100,104,96,118,100,0,100,113],
[103,111,112,117,111,110,0,117],
[103,101,100,109,82,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,98,103,99,103,92],
[101,0,113,97,103,87,103,91],
[107,97,0,104,109,100,104,80],
[112,113,106,0,112,90,102,97],
[107,107,101,98,0,92,99,89],
[111,123,110,120,118,0,105,107],
[107,107,106,108,111,105,0,102],
[118,119,130,113,121,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,104,99,103,128,101],
[93,0,83,101,96,94,105,84],
[113,127,0,107,105,104,121,121],
[106,109,103,0,114,107,121,97],
[111,114,105,96,0,89,111,102],
[107,116,106,103,121,0,122,96],
[82,105,89,89,99,88,0,91],
[109,126,89,113,108,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,104,95,119,109,95],
[93,0,87,98,106,105,100,97],
[108,123,0,106,104,121,108,109],
[106,112,104,0,96,104,108,103],
[115,104,106,114,0,128,108,109],
[91,105,89,106,82,0,89,100],
[101,110,102,102,102,121,0,99],
[115,113,101,107,101,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,126,106,104,118,107,109],
[88,0,104,90,96,102,99,101],
[84,106,0,101,80,98,109,83],
[104,120,109,0,90,111,113,110],
[106,114,130,120,0,120,113,104],
[92,108,112,99,90,0,103,104],
[103,111,101,97,97,107,0,110],
[101,109,127,100,106,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,112,118,99,104,118],
[105,0,91,92,105,103,102,97],
[111,119,0,116,85,117,99,118],
[98,118,94,0,99,103,99,113],
[92,105,125,111,0,129,108,114],
[111,107,93,107,81,0,91,109],
[106,108,111,111,102,119,0,101],
[92,113,92,97,96,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,88,93,103,95,110],
[105,0,98,98,103,98,104,115],
[107,112,0,109,102,97,97,107],
[122,112,101,0,99,105,100,115],
[117,107,108,111,0,91,97,112],
[107,112,113,105,119,0,108,117],
[115,106,113,110,113,102,0,115],
[100,95,103,95,98,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,125,127,100,104,97],
[103,0,96,135,119,96,103,92],
[120,114,0,122,126,97,92,99],
[85,75,88,0,98,87,66,76],
[83,91,84,112,0,89,88,101],
[110,114,113,123,121,0,100,118],
[106,107,118,144,122,110,0,96],
[113,118,111,134,109,92,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,119,95,100,107,117],
[109,0,105,116,111,95,92,99],
[117,105,0,133,117,129,108,116],
[91,94,77,0,88,83,85,84],
[115,99,93,122,0,97,90,99],
[110,115,81,127,113,0,101,99],
[103,118,102,125,120,109,0,108],
[93,111,94,126,111,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,104,115,110,109,106],
[103,0,123,104,109,107,105,101],
[102,87,0,94,92,94,97,103],
[106,106,116,0,107,99,93,92],
[95,101,118,103,0,96,100,101],
[100,103,116,111,114,0,108,112],
[101,105,113,117,110,102,0,118],
[104,109,107,118,109,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,104,120,112,117,111,98],
[88,0,106,107,109,114,110,110],
[106,104,0,119,123,117,121,120],
[90,103,91,0,92,100,110,100],
[98,101,87,118,0,111,95,101],
[93,96,93,110,99,0,94,89],
[99,100,89,100,115,116,0,98],
[112,100,90,110,109,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,91,100,104,105,101,94],
[104,0,93,97,108,95,88,90],
[119,117,0,112,115,113,105,109],
[110,113,98,0,109,101,105,93],
[106,102,95,101,0,108,95,97],
[105,115,97,109,102,0,106,107],
[109,122,105,105,115,104,0,87],
[116,120,101,117,113,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,101,102,107,115,97],
[108,0,106,104,110,104,110,99],
[102,104,0,102,97,106,113,98],
[109,106,108,0,103,114,105,91],
[108,100,113,107,0,115,116,105],
[103,106,104,96,95,0,108,102],
[95,100,97,105,94,102,0,90],
[113,111,112,119,105,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,96,90,111,116,94],
[99,0,94,99,107,110,97,99],
[105,116,0,109,110,114,115,113],
[114,111,101,0,109,108,106,93],
[120,103,100,101,0,107,111,105],
[99,100,96,102,103,0,107,95],
[94,113,95,104,99,103,0,98],
[116,111,97,117,105,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,94,116,109,100,108,98],
[100,0,100,99,94,90,96,95],
[116,110,0,100,108,111,109,113],
[94,111,110,0,116,111,97,109],
[101,116,102,94,0,97,114,101],
[110,120,99,99,113,0,109,100],
[102,114,101,113,96,101,0,103],
[112,115,97,101,109,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,101,109,100,94,104],
[118,0,96,109,104,104,104,108],
[114,114,0,98,113,106,106,117],
[109,101,112,0,108,101,100,111],
[101,106,97,102,0,102,99,106],
[110,106,104,109,108,0,106,112],
[116,106,104,110,111,104,0,110],
[106,102,93,99,104,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,105,106,103,103,113,107],
[78,0,68,101,101,83,86,68],
[105,142,0,121,112,104,130,123],
[104,109,89,0,97,104,110,102],
[107,109,98,113,0,75,113,100],
[107,127,106,106,135,0,132,93],
[97,124,80,100,97,78,0,74],
[103,142,87,108,110,117,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,89,114,102,94,101],
[110,0,114,125,121,123,104,96],
[108,96,0,119,129,108,104,125],
[121,85,91,0,131,116,107,77],
[96,89,81,79,0,92,75,76],
[108,87,102,94,118,0,86,87],
[116,106,106,103,135,124,0,108],
[109,114,85,133,134,123,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,112,94,104,112,99],
[108,0,114,107,99,95,111,106],
[115,96,0,100,108,107,103,111],
[98,103,110,0,109,103,112,103],
[116,111,102,101,0,100,109,108],
[106,115,103,107,110,0,118,105],
[98,99,107,98,101,92,0,88],
[111,104,99,107,102,105,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,107,92,105,103,95],
[89,0,98,125,113,99,111,109],
[103,112,0,119,111,101,115,107],
[103,85,91,0,86,92,81,92],
[118,97,99,124,0,99,111,96],
[105,111,109,118,111,0,111,108],
[107,99,95,129,99,99,0,103],
[115,101,103,118,114,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,83,120,120,94,106,101],
[106,0,87,114,115,85,100,102],
[127,123,0,133,115,107,128,99],
[90,96,77,0,110,104,100,90],
[90,95,95,100,0,93,89,92],
[116,125,103,106,117,0,122,110],
[104,110,82,110,121,88,0,105],
[109,108,111,120,118,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,105,102,104,118,97],
[107,0,99,100,97,99,111,98],
[110,111,0,93,102,99,117,107],
[105,110,117,0,111,110,117,110],
[108,113,108,99,0,113,126,108],
[106,111,111,100,97,0,120,107],
[92,99,93,93,84,90,0,92],
[113,112,103,100,102,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,124,110,115,111,104],
[98,0,110,109,109,112,110,101],
[100,100,0,100,102,92,92,98],
[86,101,110,0,102,105,102,107],
[100,101,108,108,0,103,102,104],
[95,98,118,105,107,0,98,113],
[99,100,118,108,108,112,0,106],
[106,109,112,103,106,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,109,91,99,103,78],
[116,0,112,84,113,113,127,78],
[102,98,0,95,92,111,115,77],
[101,126,115,0,107,108,120,79],
[119,97,118,103,0,123,121,110],
[111,97,99,102,87,0,108,100],
[107,83,95,90,89,102,0,83],
[132,132,133,131,100,110,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,94,82,106,93,93],
[120,0,109,100,94,106,112,92],
[103,101,0,95,88,102,105,101],
[116,110,115,0,98,123,102,107],
[128,116,122,112,0,107,111,105],
[104,104,108,87,103,0,108,99],
[117,98,105,108,99,102,0,106],
[117,118,109,103,105,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,91,107,100,84,119,123],
[125,0,101,127,102,101,110,121],
[119,109,0,112,113,95,95,120],
[103,83,98,0,98,85,67,113],
[110,108,97,112,0,80,111,139],
[126,109,115,125,130,0,103,137],
[91,100,115,143,99,107,0,142],
[87,89,90,97,71,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,126,110,114,115,121],
[102,0,98,126,118,117,135,117],
[105,112,0,126,108,127,130,123],
[84,84,84,0,95,103,114,93],
[100,92,102,115,0,103,124,117],
[96,93,83,107,107,0,103,109],
[95,75,80,96,86,107,0,100],
[89,93,87,117,93,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,120,96,106,112,98],
[99,0,119,106,98,101,99,83],
[89,91,0,107,95,97,92,95],
[90,104,103,0,86,84,89,83],
[114,112,115,124,0,112,103,106],
[104,109,113,126,98,0,97,87],
[98,111,118,121,107,113,0,101],
[112,127,115,127,104,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,89,87,85,115,86,81],
[124,0,118,101,109,114,114,89],
[121,92,0,91,141,136,122,113],
[123,109,119,0,123,123,105,104],
[125,101,69,87,0,120,92,98],
[95,96,74,87,90,0,86,67],
[124,96,88,105,118,124,0,98],
[129,121,97,106,112,143,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,97,104,102,87,105],
[99,0,95,108,109,115,107,119],
[111,115,0,108,110,105,106,115],
[113,102,102,0,121,113,99,116],
[106,101,100,89,0,101,97,104],
[108,95,105,97,109,0,114,106],
[123,103,104,111,113,96,0,106],
[105,91,95,94,106,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,106,105,97,116,103],
[96,0,104,108,109,98,106,103],
[99,106,0,101,103,98,104,101],
[104,102,109,0,101,99,104,102],
[105,101,107,109,0,106,110,108],
[113,112,112,111,104,0,108,106],
[94,104,106,106,100,102,0,104],
[107,107,109,108,102,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,131,72,92,120,87,117],
[94,0,145,120,160,156,132,155],
[79,65,0,47,58,61,59,99],
[138,90,163,0,123,132,139,160],
[118,50,152,87,0,89,78,142],
[90,54,149,78,121,0,78,144],
[123,78,151,71,132,132,0,129],
[93,55,111,50,68,66,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,109,127,114,99,121],
[87,0,85,95,96,89,88,94],
[95,125,0,114,116,101,89,110],
[101,115,96,0,107,108,113,101],
[83,114,94,103,0,92,72,93],
[96,121,109,102,118,0,76,106],
[111,122,121,97,138,134,0,119],
[89,116,100,109,117,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,127,101,105,99,99,101],
[110,0,121,98,87,111,115,104],
[83,89,0,87,88,80,95,81],
[109,112,123,0,99,103,106,107],
[105,123,122,111,0,122,123,117],
[111,99,130,107,88,0,129,105],
[111,95,115,104,87,81,0,90],
[109,106,129,103,93,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,102,100,106,102,116],
[115,0,95,111,105,108,103,107],
[112,115,0,115,110,105,111,113],
[108,99,95,0,112,107,109,113],
[110,105,100,98,0,111,118,100],
[104,102,105,103,99,0,95,104],
[108,107,99,101,92,115,0,104],
[94,103,97,97,110,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,111,101,113,118,106],
[108,0,99,113,103,111,117,104],
[97,111,0,109,109,101,104,95],
[99,97,101,0,103,102,101,97],
[109,107,101,107,0,108,116,103],
[97,99,109,108,102,0,108,99],
[92,93,106,109,94,102,0,100],
[104,106,115,113,107,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,111,111,108,115,119],
[111,0,115,116,123,102,114,127],
[102,95,0,110,117,108,114,114],
[99,94,100,0,106,99,106,107],
[99,87,93,104,0,103,107,108],
[102,108,102,111,107,0,119,118],
[95,96,96,104,103,91,0,110],
[91,83,96,103,102,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,78,92,93,119,85,92],
[103,0,74,102,85,111,84,70],
[132,136,0,119,109,116,100,115],
[118,108,91,0,96,111,85,100],
[117,125,101,114,0,132,107,98],
[91,99,94,99,78,0,70,98],
[125,126,110,125,103,140,0,118],
[118,140,95,110,112,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,105,106,92,101,105],
[105,0,99,93,101,101,98,96],
[98,111,0,110,105,102,100,100],
[105,117,100,0,120,94,110,111],
[104,109,105,90,0,103,87,118],
[118,109,108,116,107,0,105,114],
[109,112,110,100,123,105,0,115],
[105,114,110,99,92,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,95,89,124,99,106],
[112,0,102,100,105,142,118,103],
[120,108,0,90,99,131,128,113],
[115,110,120,0,98,100,121,119],
[121,105,111,112,0,133,104,101],
[86,68,79,110,77,0,120,110],
[111,92,82,89,106,90,0,106],
[104,107,97,91,109,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,122,114,117,113,118],
[107,0,102,115,108,106,105,119],
[95,108,0,118,103,118,114,109],
[88,95,92,0,91,99,101,119],
[96,102,107,119,0,108,109,112],
[93,104,92,111,102,0,111,118],
[97,105,96,109,101,99,0,106],
[92,91,101,91,98,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,134,117,112,125,124],
[93,0,116,114,113,98,115,103],
[115,94,0,108,97,96,119,105],
[76,96,102,0,97,83,110,100],
[93,97,113,113,0,90,110,108],
[98,112,114,127,120,0,123,125],
[85,95,91,100,100,87,0,86],
[86,107,105,110,102,85,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,98,100,106,81,96],
[117,0,94,101,102,90,92,92],
[107,116,0,106,110,103,102,102],
[112,109,104,0,109,111,106,107],
[110,108,100,101,0,95,91,100],
[104,120,107,99,115,0,105,103],
[129,118,108,104,119,105,0,96],
[114,118,108,103,110,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,110,101,77,124,119,102],
[70,0,75,84,65,62,92,109],
[100,135,0,97,102,79,105,151],
[109,126,113,0,126,92,101,139],
[133,145,108,84,0,83,109,91],
[86,148,131,118,127,0,140,121],
[91,118,105,109,101,70,0,106],
[108,101,59,71,119,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,145,143,87,80,109,122],
[117,0,116,120,79,78,106,101],
[65,94,0,102,95,69,71,98],
[67,90,108,0,94,81,57,91],
[123,131,115,116,0,88,125,125],
[130,132,141,129,122,0,111,96],
[101,104,139,153,85,99,0,131],
[88,109,112,119,85,114,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,108,124,102,113,98],
[90,0,100,117,106,107,109,95],
[108,110,0,112,101,96,117,102],
[102,93,98,0,94,99,112,97],
[86,104,109,116,0,107,128,106],
[108,103,114,111,103,0,114,98],
[97,101,93,98,82,96,0,84],
[112,115,108,113,104,112,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,81,122,85,102,76,70],
[72,0,88,114,104,77,102,93],
[129,122,0,134,113,95,110,120],
[88,96,76,0,101,76,74,78],
[125,106,97,109,0,92,91,105],
[108,133,115,134,118,0,121,101],
[134,108,100,136,119,89,0,130],
[140,117,90,132,105,109,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,111,92,97,106,107],
[99,0,101,109,102,107,100,105],
[107,109,0,109,93,105,108,106],
[99,101,101,0,104,100,99,108],
[118,108,117,106,0,105,119,116],
[113,103,105,110,105,0,114,125],
[104,110,102,111,91,96,0,102],
[103,105,104,102,94,85,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,98,112,116,120,96],
[105,0,92,101,102,105,119,106],
[106,118,0,93,90,95,115,95],
[112,109,117,0,126,105,122,105],
[98,108,120,84,0,98,111,97],
[94,105,115,105,112,0,113,91],
[90,91,95,88,99,97,0,92],
[114,104,115,105,113,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,99,105,94,98,99],
[108,0,102,111,105,107,98,108],
[100,108,0,106,103,103,97,105],
[111,99,104,0,103,94,105,100],
[105,105,107,107,0,102,100,113],
[116,103,107,116,108,0,104,114],
[112,112,113,105,110,106,0,116],
[111,102,105,110,97,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,126,117,138,119,97,90],
[108,0,119,87,123,73,77,108],
[84,91,0,115,121,71,77,97],
[93,123,95,0,128,100,87,91],
[72,87,89,82,0,69,80,67],
[91,137,139,110,141,0,112,77],
[113,133,133,123,130,98,0,90],
[120,102,113,119,143,133,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,112,101,107,111,102],
[92,0,92,94,89,99,89,79],
[96,118,0,106,115,119,103,109],
[98,116,104,0,91,115,104,98],
[109,121,95,119,0,111,101,107],
[103,111,91,95,99,0,96,96],
[99,121,107,106,109,114,0,107],
[108,131,101,112,103,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,92,91,76,73,99],
[119,0,124,96,106,89,116,105],
[118,86,0,110,94,98,92,104],
[118,114,100,0,90,90,112,119],
[119,104,116,120,0,112,94,123],
[134,121,112,120,98,0,113,111],
[137,94,118,98,116,97,0,105],
[111,105,106,91,87,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,90,100,117,123,113,111],
[113,0,99,108,111,116,117,117],
[120,111,0,113,144,117,95,102],
[110,102,97,0,119,111,86,100],
[93,99,66,91,0,91,103,95],
[87,94,93,99,119,0,106,120],
[97,93,115,124,107,104,0,108],
[99,93,108,110,115,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,90,105,88,111,106],
[107,0,125,113,111,103,113,132],
[96,85,0,82,101,91,105,119],
[120,97,128,0,102,104,112,117],
[105,99,109,108,0,105,113,121],
[122,107,119,106,105,0,112,121],
[99,97,105,98,97,98,0,105],
[104,78,91,93,89,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,108,111,118,106,100],
[101,0,97,100,109,111,104,105],
[109,113,0,110,94,106,110,104],
[102,110,100,0,107,123,112,99],
[99,101,116,103,0,97,97,102],
[92,99,104,87,113,0,97,97],
[104,106,100,98,113,113,0,108],
[110,105,106,111,108,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,110,117,113,104,122],
[107,0,114,120,121,112,98,121],
[90,96,0,91,90,100,102,113],
[100,90,119,0,112,103,94,112],
[93,89,120,98,0,82,96,113],
[97,98,110,107,128,0,110,128],
[106,112,108,116,114,100,0,121],
[88,89,97,98,97,82,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,106,102,100,107,104],
[109,0,101,102,101,96,99,107],
[110,109,0,110,108,112,104,98],
[104,108,100,0,103,101,99,98],
[108,109,102,107,0,107,101,102],
[110,114,98,109,103,0,100,103],
[103,111,106,111,109,110,0,104],
[106,103,112,112,108,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,111,96,94,101,91],
[104,0,93,106,109,105,108,100],
[113,117,0,116,125,110,118,101],
[99,104,94,0,106,99,108,110],
[114,101,85,104,0,97,96,103],
[116,105,100,111,113,0,109,108],
[109,102,92,102,114,101,0,100],
[119,110,109,100,107,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,99,114,94,115,105],
[96,0,98,108,116,98,113,104],
[101,112,0,97,117,108,115,90],
[111,102,113,0,115,102,116,91],
[96,94,93,95,0,91,88,92],
[116,112,102,108,119,0,110,113],
[95,97,95,94,122,100,0,87],
[105,106,120,119,118,97,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,106,111,110,117,104],
[91,0,94,98,95,101,104,92],
[102,116,0,110,110,107,111,112],
[104,112,100,0,115,98,104,99],
[99,115,100,95,0,102,106,93],
[100,109,103,112,108,0,112,109],
[93,106,99,106,104,98,0,91],
[106,118,98,111,117,101,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,116,110,115,125,91],
[110,0,104,109,108,111,109,97],
[108,106,0,125,110,110,97,103],
[94,101,85,0,97,112,108,102],
[100,102,100,113,0,85,108,90],
[95,99,100,98,125,0,117,108],
[85,101,113,102,102,93,0,80],
[119,113,107,108,120,102,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,107,98,107,104,105],
[100,0,102,101,108,108,113,92],
[113,108,0,99,99,134,115,100],
[103,109,111,0,106,110,104,107],
[112,102,111,104,0,112,105,97],
[103,102,76,100,98,0,97,93],
[106,97,95,106,105,113,0,102],
[105,118,110,103,113,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,114,111,106,105,109],
[97,0,107,99,101,103,105,109],
[108,103,0,112,104,101,96,100],
[96,111,98,0,104,110,97,108],
[99,109,106,106,0,112,103,102],
[104,107,109,100,98,0,107,108],
[105,105,114,113,107,103,0,110],
[101,101,110,102,108,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,109,102,97,109,100],
[112,0,113,111,99,105,114,99],
[102,97,0,105,102,99,116,104],
[101,99,105,0,99,97,106,106],
[108,111,108,111,0,104,102,114],
[113,105,111,113,106,0,112,110],
[101,96,94,104,108,98,0,106],
[110,111,106,104,96,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,124,121,120,116,108],
[89,0,96,105,109,94,104,86],
[107,114,0,120,110,114,103,95],
[86,105,90,0,108,95,105,94],
[89,101,100,102,0,104,98,99],
[90,116,96,115,106,0,108,102],
[94,106,107,105,112,102,0,90],
[102,124,115,116,111,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,114,107,76,125,107],
[93,0,89,105,106,73,98,95],
[102,121,0,118,114,106,122,117],
[96,105,92,0,113,93,93,113],
[103,104,96,97,0,86,105,114],
[134,137,104,117,124,0,121,121],
[85,112,88,117,105,89,0,107],
[103,115,93,97,96,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,96,101,99,93,106],
[102,0,95,86,93,98,92,112],
[116,115,0,101,97,96,105,115],
[114,124,109,0,107,104,105,114],
[109,117,113,103,0,107,99,113],
[111,112,114,106,103,0,90,110],
[117,118,105,105,111,120,0,116],
[104,98,95,96,97,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,103,104,110,105,113],
[94,0,120,101,103,100,120,107],
[82,90,0,90,78,88,94,91],
[107,109,120,0,105,113,116,101],
[106,107,132,105,0,114,102,101],
[100,110,122,97,96,0,104,98],
[105,90,116,94,108,106,0,101],
[97,103,119,109,109,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,87,84,90,83,107,88],
[115,0,91,77,95,92,120,112],
[123,119,0,91,105,102,121,113],
[126,133,119,0,105,123,143,121],
[120,115,105,105,0,103,114,120],
[127,118,108,87,107,0,124,103],
[103,90,89,67,96,86,0,81],
[122,98,97,89,90,107,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,97,98,85,85,90],
[116,0,89,105,111,85,109,85],
[105,121,0,109,101,110,95,106],
[113,105,101,0,105,93,100,101],
[112,99,109,105,0,91,101,103],
[125,125,100,117,119,0,112,94],
[125,101,115,110,109,98,0,96],
[120,125,104,109,107,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,112,111,106,101,100],
[99,0,106,104,100,114,108,100],
[106,104,0,130,102,109,112,93],
[98,106,80,0,102,108,107,99],
[99,110,108,108,0,113,119,105],
[104,96,101,102,97,0,105,102],
[109,102,98,103,91,105,0,102],
[110,110,117,111,105,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,99,116,93,89,97],
[109,0,104,101,120,105,102,104],
[110,106,0,108,103,111,100,105],
[111,109,102,0,110,118,104,109],
[94,90,107,100,0,105,95,95],
[117,105,99,92,105,0,101,99],
[121,108,110,106,115,109,0,101],
[113,106,105,101,115,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,109,110,104,98,100],
[111,0,109,104,99,104,111,106],
[100,101,0,98,93,93,112,96],
[101,106,112,0,105,103,111,103],
[100,111,117,105,0,111,109,101],
[106,106,117,107,99,0,101,107],
[112,99,98,99,101,109,0,107],
[110,104,114,107,109,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,110,120,109,100,114],
[105,0,107,113,110,114,108,111],
[104,103,0,116,118,108,110,119],
[100,97,94,0,109,103,93,99],
[90,100,92,101,0,107,92,99],
[101,96,102,107,103,0,103,109],
[110,102,100,117,118,107,0,111],
[96,99,91,111,111,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,106,87,93,95,96],
[105,0,108,108,96,94,122,99],
[92,102,0,95,96,92,95,90],
[104,102,115,0,92,98,102,103],
[123,114,114,118,0,116,121,98],
[117,116,118,112,94,0,108,105],
[115,88,115,108,89,102,0,93],
[114,111,120,107,112,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,110,118,109,112,100],
[99,0,109,107,97,103,120,103],
[94,101,0,101,92,107,107,100],
[100,103,109,0,94,93,107,95],
[92,113,118,116,0,115,124,115],
[101,107,103,117,95,0,108,103],
[98,90,103,103,86,102,0,87],
[110,107,110,115,95,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,108,105,116,110,136,111],
[85,0,99,85,105,112,104,91],
[102,111,0,93,110,103,116,84],
[105,125,117,0,122,123,136,92],
[94,105,100,88,0,92,97,73],
[100,98,107,87,118,0,111,81],
[74,106,94,74,113,99,0,73],
[99,119,126,118,137,129,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,95,114,108,102,96],
[103,0,103,99,118,100,109,104],
[103,107,0,104,109,104,98,93],
[115,111,106,0,106,106,109,104],
[96,92,101,104,0,102,100,95],
[102,110,106,104,108,0,103,103],
[108,101,112,101,110,107,0,106],
[114,106,117,106,115,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,123,93,95,110,92,115],
[121,0,118,118,119,89,95,126],
[87,92,0,64,89,86,89,103],
[117,92,146,0,106,132,119,112],
[115,91,121,104,0,99,105,105],
[100,121,124,78,111,0,136,106],
[118,115,121,91,105,74,0,111],
[95,84,107,98,105,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,96,117,104,104,108],
[102,0,101,106,110,110,89,89],
[107,109,0,96,104,108,101,105],
[114,104,114,0,117,101,104,100],
[93,100,106,93,0,99,96,103],
[106,100,102,109,111,0,104,104],
[106,121,109,106,114,106,0,99],
[102,121,105,110,107,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,107,103,99,97,93],
[107,0,99,98,108,112,88,93],
[109,111,0,99,102,106,101,109],
[103,112,111,0,107,104,105,98],
[107,102,108,103,0,103,92,105],
[111,98,104,106,107,0,99,98],
[113,122,109,105,118,111,0,117],
[117,117,101,112,105,112,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,113,132,103,109,111,107],
[84,0,117,97,111,97,71,105],
[97,93,0,90,82,86,89,108],
[78,113,120,0,96,98,99,87],
[107,99,128,114,0,116,108,95],
[101,113,124,112,94,0,102,106],
[99,139,121,111,102,108,0,95],
[103,105,102,123,115,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,110,110,114,115,101],
[103,0,100,109,102,108,121,108],
[115,110,0,112,110,114,115,101],
[100,101,98,0,104,109,112,97],
[100,108,100,106,0,110,116,104],
[96,102,96,101,100,0,119,99],
[95,89,95,98,94,91,0,102],
[109,102,109,113,106,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,117,111,106,105,108],
[101,0,108,106,112,108,109,109],
[101,102,0,105,101,101,103,100],
[93,104,105,0,100,107,104,94],
[99,98,109,110,0,107,108,101],
[104,102,109,103,103,0,99,100],
[105,101,107,106,102,111,0,94],
[102,101,110,116,109,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,104,100,99,96,106],
[107,0,102,102,98,102,104,103],
[104,108,0,102,102,108,101,94],
[106,108,108,0,110,96,106,108],
[110,112,108,100,0,118,107,94],
[111,108,102,114,92,0,109,103],
[114,106,109,104,103,101,0,101],
[104,107,116,102,116,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,104,107,107,93,92],
[114,0,122,111,111,113,104,104],
[107,88,0,98,96,121,108,101],
[106,99,112,0,99,120,112,98],
[103,99,114,111,0,116,110,95],
[103,97,89,90,94,0,88,99],
[117,106,102,98,100,122,0,105],
[118,106,109,112,115,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,102,99,116,123,94],
[107,0,101,94,104,103,122,113],
[118,109,0,118,102,113,130,122],
[108,116,92,0,87,119,120,95],
[111,106,108,123,0,100,129,110],
[94,107,97,91,110,0,103,96],
[87,88,80,90,81,107,0,96],
[116,97,88,115,100,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,95,101,100,108,93],
[107,0,112,107,108,103,97,96],
[102,98,0,96,89,98,93,95],
[115,103,114,0,104,102,102,105],
[109,102,121,106,0,100,102,88],
[110,107,112,108,110,0,105,102],
[102,113,117,108,108,105,0,97],
[117,114,115,105,122,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,144,121,116,99,121],
[100,0,113,138,130,107,111,107],
[96,97,0,111,122,98,123,102],
[66,72,99,0,95,93,86,70],
[89,80,88,115,0,75,115,106],
[94,103,112,117,135,0,128,120],
[111,99,87,124,95,82,0,102],
[89,103,108,140,104,90,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,91,108,110,126,126],
[105,0,114,99,98,117,120,108],
[98,96,0,86,97,103,114,98],
[119,111,124,0,105,114,123,110],
[102,112,113,105,0,119,124,105],
[100,93,107,96,91,0,110,112],
[84,90,96,87,86,100,0,102],
[84,102,112,100,105,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,96,102,101,98,99],
[106,0,109,96,113,102,109,109],
[112,101,0,105,117,108,115,113],
[114,114,105,0,117,111,111,120],
[108,97,93,93,0,100,92,100],
[109,108,102,99,110,0,102,102],
[112,101,95,99,118,108,0,101],
[111,101,97,90,110,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,92,118,116,99,98,103],
[92,0,101,96,100,97,103,115],
[118,109,0,124,104,115,104,112],
[92,114,86,0,114,100,105,104],
[94,110,106,96,0,93,98,103],
[111,113,95,110,117,0,110,115],
[112,107,106,105,112,100,0,119],
[107,95,98,106,107,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,89,101,113,100,107],
[115,0,101,106,104,120,112,110],
[119,109,0,110,104,119,98,114],
[121,104,100,0,109,116,98,99],
[109,106,106,101,0,117,117,110],
[97,90,91,94,93,0,100,103],
[110,98,112,112,93,110,0,105],
[103,100,96,111,100,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,108,101,113,111,118],
[110,0,104,111,96,108,106,119],
[99,106,0,109,100,104,108,111],
[102,99,101,0,103,101,104,108],
[109,114,110,107,0,115,103,112],
[97,102,106,109,95,0,101,115],
[99,104,102,106,107,109,0,109],
[92,91,99,102,98,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,113,114,118,112,102],
[106,0,116,107,118,117,113,105],
[103,94,0,97,93,106,106,90],
[97,103,113,0,107,112,105,98],
[96,92,117,103,0,110,114,101],
[92,93,104,98,100,0,108,97],
[98,97,104,105,96,102,0,97],
[108,105,120,112,109,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,103,107,107,108,100],
[110,0,107,100,100,107,111,110],
[114,103,0,98,105,115,104,111],
[107,110,112,0,100,106,104,119],
[103,110,105,110,0,130,81,97],
[103,103,95,104,80,0,90,108],
[102,99,106,106,129,120,0,109],
[110,100,99,91,113,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,83,85,95,80,108,103],
[102,0,97,88,99,95,130,101],
[127,113,0,109,104,117,111,110],
[125,122,101,0,106,109,128,108],
[115,111,106,104,0,110,120,105],
[130,115,93,101,100,0,119,115],
[102,80,99,82,90,91,0,89],
[107,109,100,102,105,95,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,137,149,142,141,103,131],
[105,0,106,116,127,133,105,122],
[73,104,0,119,114,113,92,85],
[61,94,91,0,125,107,78,90],
[68,83,96,85,0,113,64,89],
[69,77,97,103,97,0,70,65],
[107,105,118,132,146,140,0,94],
[79,88,125,120,121,145,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,130,118,107,99,135,174],
[85,0,144,133,69,127,105,116],
[80,66,0,90,93,79,96,106],
[92,77,120,0,79,100,134,129],
[103,141,117,131,0,97,111,134],
[111,83,131,110,113,0,108,124],
[75,105,114,76,99,102,0,116],
[36,94,104,81,76,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,79,109,96,105,116],
[106,0,94,107,105,108,115,120],
[117,116,0,105,122,113,116,130],
[131,103,105,0,135,124,123,124],
[101,105,88,75,0,92,102,117],
[114,102,97,86,118,0,109,128],
[105,95,94,87,108,101,0,106],
[94,90,80,86,93,82,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,110,104,103,107,99],
[99,0,127,109,107,109,103,116],
[116,83,0,105,89,96,85,105],
[100,101,105,0,100,94,95,107],
[106,103,121,110,0,118,100,105],
[107,101,114,116,92,0,95,107],
[103,107,125,115,110,115,0,101],
[111,94,105,103,105,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,108,111,102,107,101],
[105,0,107,105,105,104,100,100],
[109,103,0,105,104,95,103,107],
[102,105,105,0,102,97,94,97],
[99,105,106,108,0,102,110,97],
[108,106,115,113,108,0,107,96],
[103,110,107,116,100,103,0,101],
[109,110,103,113,113,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,110,105,102,103,112],
[107,0,106,103,116,99,98,112],
[123,104,0,106,114,105,109,120],
[100,107,104,0,101,104,95,103],
[105,94,96,109,0,99,104,102],
[108,111,105,106,111,0,118,120],
[107,112,101,115,106,92,0,113],
[98,98,90,107,108,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,114,122,117,113,105,110],
[114,0,130,143,129,101,112,134],
[96,80,0,122,108,94,84,109],
[88,67,88,0,89,74,94,90],
[93,81,102,121,0,91,95,109],
[97,109,116,136,119,0,99,110],
[105,98,126,116,115,111,0,96],
[100,76,101,120,101,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,88,98,122,88,107],
[99,0,126,104,109,124,94,108],
[97,84,0,74,90,102,96,101],
[122,106,136,0,96,128,110,112],
[112,101,120,114,0,120,93,119],
[88,86,108,82,90,0,88,115],
[122,116,114,100,117,122,0,111],
[103,102,109,98,91,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,112,109,106,115,99,127],
[118,0,104,125,109,119,105,125],
[98,106,0,94,109,101,97,114],
[101,85,116,0,95,110,99,117],
[104,101,101,115,0,102,101,117],
[95,91,109,100,108,0,108,117],
[111,105,113,111,109,102,0,126],
[83,85,96,93,93,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,62,78,73,94,117,87],
[109,0,138,111,106,99,118,120],
[148,72,0,99,99,97,153,108],
[132,99,111,0,74,94,113,89],
[137,104,111,136,0,123,131,124],
[116,111,113,116,87,0,127,133],
[93,92,57,97,79,83,0,92],
[123,90,102,121,86,77,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,121,91,105,89,98],
[110,0,100,113,82,102,96,117],
[108,110,0,117,90,123,95,114],
[89,97,93,0,84,90,88,89],
[119,128,120,126,0,127,105,137],
[105,108,87,120,83,0,94,115],
[121,114,115,122,105,116,0,126],
[112,93,96,121,73,95,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,118,103,110,120,106],
[102,0,105,116,109,114,116,107],
[93,105,0,91,109,105,119,103],
[92,94,119,0,92,102,97,99],
[107,101,101,118,0,103,130,112],
[100,96,105,108,107,0,105,99],
[90,94,91,113,80,105,0,98],
[104,103,107,111,98,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,125,97,119,102,136],
[99,0,90,113,109,111,100,123],
[96,120,0,135,117,112,100,130],
[85,97,75,0,103,86,95,110],
[113,101,93,107,0,103,91,126],
[91,99,98,124,107,0,117,119],
[108,110,110,115,119,93,0,114],
[74,87,80,100,84,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,109,102,115,89,101],
[100,0,104,102,90,101,84,89],
[106,106,0,99,90,110,94,105],
[101,108,111,0,90,111,96,93],
[108,120,120,120,0,122,99,106],
[95,109,100,99,88,0,93,105],
[121,126,116,114,111,117,0,99],
[109,121,105,117,104,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,101,112,123,121,108],
[89,0,125,88,111,129,106,109],
[101,85,0,64,67,108,99,61],
[109,122,146,0,91,134,114,92],
[98,99,143,119,0,137,123,127],
[87,81,102,76,73,0,104,80],
[89,104,111,96,87,106,0,103],
[102,101,149,118,83,130,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,128,106,113,103,107],
[104,0,122,112,85,116,95,105],
[94,88,0,101,77,98,98,94],
[82,98,109,0,94,108,95,94],
[104,125,133,116,0,117,107,125],
[97,94,112,102,93,0,95,92],
[107,115,112,115,103,115,0,100],
[103,105,116,116,85,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,76,115,101,120,93,94],
[116,0,101,99,118,110,100,99],
[134,109,0,105,125,122,122,131],
[95,111,105,0,120,110,115,97],
[109,92,85,90,0,88,94,72],
[90,100,88,100,122,0,86,83],
[117,110,88,95,116,124,0,128],
[116,111,79,113,138,127,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,99,101,107,100,110],
[108,0,106,108,104,104,100,101],
[111,104,0,106,102,114,100,104],
[111,102,104,0,105,109,101,109],
[109,106,108,105,0,107,108,105],
[103,106,96,101,103,0,106,108],
[110,110,110,109,102,104,0,108],
[100,109,106,101,105,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,99,110,94,106,95],
[97,0,114,100,101,103,96,102],
[94,96,0,94,99,94,92,91],
[111,110,116,0,108,88,94,103],
[100,109,111,102,0,85,102,109],
[116,107,116,122,125,0,104,102],
[104,114,118,116,108,106,0,107],
[115,108,119,107,101,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,121,124,118,118,101],
[99,0,104,91,122,119,111,103],
[101,106,0,110,116,108,108,105],
[89,119,100,0,109,108,110,101],
[86,88,94,101,0,101,99,90],
[92,91,102,102,109,0,96,110],
[92,99,102,100,111,114,0,101],
[109,107,105,109,120,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,67,123,128,83,123,111],
[128,0,86,151,103,102,118,114],
[143,124,0,144,135,107,102,107],
[87,59,66,0,66,66,51,75],
[82,107,75,144,0,144,99,127],
[127,108,103,144,66,0,109,113],
[87,92,108,159,111,101,0,143],
[99,96,103,135,83,97,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,92,102,118,112,104,95],
[92,0,94,99,96,101,85,93],
[118,116,0,117,105,123,115,101],
[108,111,93,0,116,109,98,106],
[92,114,105,94,0,103,92,87],
[98,109,87,101,107,0,98,103],
[106,125,95,112,118,112,0,99],
[115,117,109,104,123,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,85,86,107,90,119,90],
[126,0,104,119,125,139,158,120],
[125,106,0,93,127,115,105,85],
[124,91,117,0,118,106,107,92],
[103,85,83,92,0,97,96,79],
[120,71,95,104,113,0,111,91],
[91,52,105,103,114,99,0,91],
[120,90,125,118,131,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,107,110,106,106,96],
[115,0,106,110,113,100,116,119],
[100,104,0,93,101,103,93,98],
[103,100,117,0,102,108,98,101],
[100,97,109,108,0,99,91,105],
[104,110,107,102,111,0,107,99],
[104,94,117,112,119,103,0,105],
[114,91,112,109,105,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,99,96,95,101,95],
[97,0,97,100,103,94,105,97],
[105,113,0,91,92,87,106,101],
[111,110,119,0,107,97,111,99],
[114,107,118,103,0,101,103,105],
[115,116,123,113,109,0,102,115],
[109,105,104,99,107,108,0,118],
[115,113,109,111,105,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,104,112,113,110,114],
[106,0,104,110,108,104,102,112],
[97,106,0,102,102,103,108,105],
[106,100,108,0,98,106,104,111],
[98,102,108,112,0,112,106,111],
[97,106,107,104,98,0,104,111],
[100,108,102,106,104,106,0,116],
[96,98,105,99,99,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,108,105,103,103,107],
[100,0,94,95,99,99,109,89],
[101,116,0,97,108,98,122,104],
[102,115,113,0,116,106,109,98],
[105,111,102,94,0,108,109,106],
[107,111,112,104,102,0,115,104],
[107,101,88,101,101,95,0,93],
[103,121,106,112,104,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,100,99,104,105,128,102],
[87,0,101,75,102,84,99,109],
[110,109,0,73,120,93,114,119],
[111,135,137,0,126,103,136,124],
[106,108,90,84,0,93,128,102],
[105,126,117,107,117,0,124,105],
[82,111,96,74,82,86,0,98],
[108,101,91,86,108,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,108,100,112,116,105],
[103,0,108,112,92,111,109,98],
[92,102,0,110,106,111,114,110],
[102,98,100,0,101,116,113,113],
[110,118,104,109,0,116,115,121],
[98,99,99,94,94,0,93,105],
[94,101,96,97,95,117,0,97],
[105,112,100,97,89,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,95,97,111,132,109,103],
[129,0,95,123,103,111,108,121],
[115,115,0,127,128,120,105,123],
[113,87,83,0,89,93,89,84],
[99,107,82,121,0,80,74,91],
[78,99,90,117,130,0,108,113],
[101,102,105,121,136,102,0,117],
[107,89,87,126,119,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,123,102,113,101,115],
[99,0,104,130,102,109,109,118],
[101,106,0,124,107,112,102,114],
[87,80,86,0,82,82,77,92],
[108,108,103,128,0,110,94,117],
[97,101,98,128,100,0,95,118],
[109,101,108,133,116,115,0,136],
[95,92,96,118,93,92,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,128,115,105,129,114,102],
[86,0,87,111,95,88,99,76],
[82,123,0,121,126,101,84,91],
[95,99,89,0,66,95,76,90],
[105,115,84,144,0,122,105,116],
[81,122,109,115,88,0,92,111],
[96,111,126,134,105,118,0,113],
[108,134,119,120,94,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,112,110,101,104,91],
[109,0,113,97,122,95,109,106],
[119,97,0,102,124,97,97,114],
[98,113,108,0,116,106,109,96],
[100,88,86,94,0,99,107,91],
[109,115,113,104,111,0,112,98],
[106,101,113,101,103,98,0,110],
[119,104,96,114,119,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,113,105,105,119,115],
[93,0,94,97,87,98,103,95],
[102,116,0,115,97,94,121,107],
[97,113,95,0,110,94,126,107],
[105,123,113,100,0,106,111,103],
[105,112,116,116,104,0,112,104],
[91,107,89,84,99,98,0,94],
[95,115,103,103,107,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,88,83,110,98,99,84],
[112,0,122,111,118,124,134,101],
[122,88,0,102,99,115,110,103],
[127,99,108,0,126,118,115,110],
[100,92,111,84,0,110,92,93],
[112,86,95,92,100,0,105,86],
[111,76,100,95,118,105,0,94],
[126,109,107,100,117,124,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,93,96,107,100,89],
[106,0,102,99,102,109,100,111],
[104,108,0,96,104,98,93,113],
[117,111,114,0,104,121,104,121],
[114,108,106,106,0,114,103,94],
[103,101,112,89,96,0,107,107],
[110,110,117,106,107,103,0,104],
[121,99,97,89,116,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,119,116,95,125,116],
[101,0,140,131,126,135,152,128],
[92,70,0,93,101,84,105,122],
[91,79,117,0,100,113,110,106],
[94,84,109,110,0,102,122,107],
[115,75,126,97,108,0,120,126],
[85,58,105,100,88,90,0,109],
[94,82,88,104,103,84,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,107,104,99,106,102],
[97,0,100,99,87,93,98,89],
[106,110,0,106,110,99,108,104],
[103,111,104,0,98,100,97,101],
[106,123,100,112,0,103,99,94],
[111,117,111,110,107,0,107,104],
[104,112,102,113,111,103,0,105],
[108,121,106,109,116,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,110,112,109,102,108],
[108,0,107,112,98,103,102,109],
[94,103,0,109,106,100,103,106],
[100,98,101,0,104,87,99,101],
[98,112,104,106,0,106,119,104],
[101,107,110,123,104,0,110,108],
[108,108,107,111,91,100,0,111],
[102,101,104,109,106,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,105,105,111,111,101],
[87,0,108,97,100,96,93,97],
[105,102,0,92,110,96,88,94],
[105,113,118,0,114,103,112,102],
[105,110,100,96,0,95,106,98],
[99,114,114,107,115,0,100,105],
[99,117,122,98,104,110,0,100],
[109,113,116,108,112,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,123,106,113,146,122,98],
[112,0,110,122,127,136,120,105],
[87,100,0,117,114,120,131,106],
[104,88,93,0,106,117,134,90],
[97,83,96,104,0,132,121,103],
[64,74,90,93,78,0,100,73],
[88,90,79,76,89,110,0,102],
[112,105,104,120,107,137,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,98,89,110,99,102],
[118,0,102,119,113,110,115,103],
[116,108,0,116,120,99,107,119],
[112,91,94,0,107,98,100,97],
[121,97,90,103,0,90,110,110],
[100,100,111,112,120,0,120,103],
[111,95,103,110,100,90,0,107],
[108,107,91,113,100,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,107,123,119,101,102],
[102,0,115,111,123,118,106,108],
[95,95,0,91,94,103,89,82],
[103,99,119,0,120,113,108,102],
[87,87,116,90,0,100,92,98],
[91,92,107,97,110,0,99,93],
[109,104,121,102,118,111,0,104],
[108,102,128,108,112,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,99,112,107,117,116],
[95,0,95,90,110,98,106,110],
[105,115,0,111,121,114,122,128],
[111,120,99,0,110,108,113,114],
[98,100,89,100,0,99,98,97],
[103,112,96,102,111,0,112,120],
[93,104,88,97,112,98,0,109],
[94,100,82,96,113,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,40,42,67,3,116],
[140,0,79,104,78,106,64,118],
[140,131,0,141,113,101,99,113],
[170,106,69,0,79,67,67,81],
[168,132,97,131,0,139,105,180],
[143,104,109,143,71,0,77,180],
[207,146,111,143,105,133,0,180],
[94,92,97,129,30,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,115,108,116,104,105],
[92,0,98,94,101,89,93,93],
[101,112,0,119,109,106,95,106],
[95,116,91,0,101,93,93,92],
[102,109,101,109,0,94,96,107],
[94,121,104,117,116,0,112,109],
[106,117,115,117,114,98,0,107],
[105,117,104,118,103,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,123,108,109,102,93,107],
[109,0,119,118,102,99,106,104],
[87,91,0,90,93,84,82,97],
[102,92,120,0,80,95,96,102],
[101,108,117,130,0,105,96,93],
[108,111,126,115,105,0,94,100],
[117,104,128,114,114,116,0,113],
[103,106,113,108,117,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,91,112,89,111,128,113],
[98,0,102,114,106,114,103,106],
[119,108,0,100,101,113,125,119],
[98,96,110,0,100,105,115,114],
[121,104,109,110,0,109,130,119],
[99,96,97,105,101,0,120,111],
[82,107,85,95,80,90,0,96],
[97,104,91,96,91,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,109,119,108,104,110],
[94,0,109,121,113,116,117,112],
[92,101,0,108,111,103,110,115],
[101,89,102,0,106,98,119,111],
[91,97,99,104,0,103,104,96],
[102,94,107,112,107,0,115,105],
[106,93,100,91,106,95,0,105],
[100,98,95,99,114,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,122,110,105,114,101,108],
[102,0,109,108,100,93,105,99],
[88,101,0,103,105,95,104,94],
[100,102,107,0,103,105,105,85],
[105,110,105,107,0,105,113,99],
[96,117,115,105,105,0,109,96],
[109,105,106,105,97,101,0,100],
[102,111,116,125,111,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,118,93,102,76,85],
[106,0,110,122,80,87,82,91],
[95,100,0,111,89,101,90,85],
[92,88,99,0,86,100,89,78],
[117,130,121,124,0,113,107,95],
[108,123,109,110,97,0,99,94],
[134,128,120,121,103,111,0,105],
[125,119,125,132,115,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,106,92,108,90,96],
[104,0,106,106,100,108,97,109],
[106,104,0,103,97,113,98,98],
[104,104,107,0,89,111,99,99],
[118,110,113,121,0,116,110,103],
[102,102,97,99,94,0,97,103],
[120,113,112,111,100,113,0,105],
[114,101,112,111,107,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,111,104,109,107,110],
[102,0,94,116,114,99,100,104],
[112,116,0,120,124,112,101,120],
[99,94,90,0,100,92,86,104],
[106,96,86,110,0,92,87,98],
[101,111,98,118,118,0,102,118],
[103,110,109,124,123,108,0,106],
[100,106,90,106,112,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,195,98,195,121,149],
[52,0,134,149,98,149,67,149],
[61,76,0,61,113,167,82,167],
[15,61,149,0,113,164,67,149],
[112,112,97,97,0,164,136,149],
[15,61,43,46,46,0,67,106],
[89,143,128,143,74,143,0,143],
[61,61,43,61,61,104,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,115,93,95,82,94,96],
[120,0,102,88,70,98,83,70],
[95,108,0,98,91,96,90,101],
[117,122,112,0,93,82,82,101],
[115,140,119,117,0,127,101,106],
[128,112,114,128,83,0,110,102],
[116,127,120,128,109,100,0,103],
[114,140,109,109,104,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,123,123,106,104,114,124],
[85,0,102,83,102,102,82,99],
[87,108,0,92,96,104,91,94],
[87,127,118,0,116,107,96,117],
[104,108,114,94,0,97,109,110],
[106,108,106,103,113,0,108,120],
[96,128,119,114,101,102,0,96],
[86,111,116,93,100,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,125,123,105,145,141,131],
[72,0,127,100,114,146,133,120],
[85,83,0,82,77,112,110,103],
[87,110,128,0,104,119,133,98],
[105,96,133,106,0,133,129,102],
[65,64,98,91,77,0,115,76],
[69,77,100,77,81,95,0,88],
[79,90,107,112,108,134,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,85,99,105,92,93,112],
[134,0,81,91,102,94,101,109],
[125,129,0,116,125,101,119,118],
[111,119,94,0,105,106,104,118],
[105,108,85,105,0,93,116,111],
[118,116,109,104,117,0,118,139],
[117,109,91,106,94,92,0,113],
[98,101,92,92,99,71,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,119,107,117,95,107],
[110,0,101,116,100,111,104,117],
[117,109,0,117,102,114,107,103],
[91,94,93,0,100,101,103,101],
[103,110,108,110,0,110,107,112],
[93,99,96,109,100,0,102,105],
[115,106,103,107,103,108,0,121],
[103,93,107,109,98,105,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,54,79,88,91,62,50],
[146,0,51,60,67,93,92,77],
[156,159,0,100,119,129,139,87],
[131,150,110,0,98,95,158,79],
[122,143,91,112,0,130,166,127],
[119,117,81,115,80,0,148,99],
[148,118,71,52,44,62,0,95],
[160,133,123,131,83,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,104,117,118,109,102],
[108,0,106,113,111,103,102,105],
[102,104,0,103,106,112,107,119],
[106,97,107,0,106,99,106,113],
[93,99,104,104,0,109,92,117],
[92,107,98,111,101,0,99,115],
[101,108,103,104,118,111,0,107],
[108,105,91,97,93,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,80,110,108,105,94],
[96,0,81,101,88,99,95,89],
[107,129,0,97,103,107,116,96],
[130,109,113,0,109,112,114,96],
[100,122,107,101,0,127,119,109],
[102,111,103,98,83,0,99,84],
[105,115,94,96,91,111,0,93],
[116,121,114,114,101,126,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,98,87,96,111,102,102],
[91,0,102,81,95,101,98,103],
[112,108,0,87,88,103,108,104],
[123,129,123,0,105,122,127,116],
[114,115,122,105,0,120,108,120],
[99,109,107,88,90,0,109,96],
[108,112,102,83,102,101,0,110],
[108,107,106,94,90,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,112,101,89,90,106],
[101,0,104,107,92,107,101,99],
[113,106,0,102,116,99,111,110],
[98,103,108,0,92,96,105,85],
[109,118,94,118,0,97,81,114],
[121,103,111,114,113,0,112,116],
[120,109,99,105,129,98,0,118],
[104,111,100,125,96,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,103,107,88,86,101],
[117,0,106,127,129,113,125,102],
[113,104,0,121,109,86,109,107],
[107,83,89,0,100,83,88,80],
[103,81,101,110,0,97,95,80],
[122,97,124,127,113,0,93,109],
[124,85,101,122,115,117,0,96],
[109,108,103,130,130,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,197,117,107,117,207,89],
[100,0,108,28,18,28,155,127],
[13,102,0,65,3,31,140,92],
[93,182,145,0,3,145,130,127],
[103,192,207,207,0,155,207,189],
[93,182,179,65,55,0,192,182],
[3,55,70,80,3,18,0,89],
[121,83,118,83,21,28,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,89,110,102,110,109],
[103,0,104,106,101,109,106,107],
[103,106,0,98,97,105,105,94],
[121,104,112,0,122,106,117,103],
[100,109,113,88,0,102,111,95],
[108,101,105,104,108,0,98,101],
[100,104,105,93,99,112,0,102],
[101,103,116,107,115,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,89,118,85,92,46],
[117,0,87,91,159,113,85,93],
[119,123,0,107,157,127,121,89],
[121,119,103,0,147,117,84,133],
[92,51,53,63,0,69,56,37],
[125,97,83,93,141,0,109,69],
[118,125,89,126,154,101,0,128],
[164,117,121,77,173,141,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,95,107,97,107,90],
[106,0,102,100,94,97,100,92],
[103,108,0,87,102,102,113,88],
[115,110,123,0,104,104,124,101],
[103,116,108,106,0,107,107,94],
[113,113,108,106,103,0,122,107],
[103,110,97,86,103,88,0,96],
[120,118,122,109,116,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,112,89,93,109,91],
[113,0,114,114,104,109,125,113],
[107,96,0,94,78,89,107,99],
[98,96,116,0,87,107,114,109],
[121,106,132,123,0,109,121,103],
[117,101,121,103,101,0,124,114],
[101,85,103,96,89,86,0,91],
[119,97,111,101,107,96,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,115,112,104,95,108,102],
[117,0,109,108,101,99,106,98],
[95,101,0,106,105,96,102,108],
[98,102,104,0,102,114,100,110],
[106,109,105,108,0,100,103,105],
[115,111,114,96,110,0,109,107],
[102,104,108,110,107,101,0,111],
[108,112,102,100,105,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,111,108,107,106,117],
[110,0,110,99,112,108,115,112],
[100,100,0,99,107,98,106,101],
[99,111,111,0,100,103,106,102],
[102,98,103,110,0,105,110,97],
[103,102,112,107,105,0,102,110],
[104,95,104,104,100,108,0,99],
[93,98,109,108,113,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,116,83,105,101,96],
[121,0,105,106,92,95,107,99],
[106,105,0,118,98,103,104,108],
[94,104,92,0,95,92,101,105],
[127,118,112,115,0,105,125,113],
[105,115,107,118,105,0,127,117],
[109,103,106,109,85,83,0,110],
[114,111,102,105,97,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,123,105,115,107,117],
[104,0,116,125,110,120,118,100],
[95,94,0,114,105,105,117,101],
[87,85,96,0,94,103,90,96],
[105,100,105,116,0,108,101,92],
[95,90,105,107,102,0,98,96],
[103,92,93,120,109,112,0,85],
[93,110,109,114,118,114,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,112,115,111,104,109],
[89,0,96,96,99,106,98,100],
[96,114,0,108,112,108,109,101],
[98,114,102,0,99,108,102,112],
[95,111,98,111,0,102,94,103],
[99,104,102,102,108,0,108,106],
[106,112,101,108,116,102,0,109],
[101,110,109,98,107,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,118,101,119,104,131,114],
[81,0,103,115,117,107,118,110],
[92,107,0,105,108,104,119,116],
[109,95,105,0,116,93,112,115],
[91,93,102,94,0,90,117,105],
[106,103,106,117,120,0,117,108],
[79,92,91,98,93,93,0,100],
[96,100,94,95,105,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,130,126,115,112,131,144],
[111,0,104,150,119,126,135,138],
[80,106,0,106,87,93,113,91],
[84,60,104,0,89,70,109,108],
[95,91,123,121,0,98,124,126],
[98,84,117,140,112,0,142,124],
[79,75,97,101,86,68,0,99],
[66,72,119,102,84,86,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,105,105,106,118,92],
[91,0,103,100,78,98,104,103],
[102,107,0,98,79,107,110,92],
[105,110,112,0,89,98,122,104],
[105,132,131,121,0,115,118,106],
[104,112,103,112,95,0,108,101],
[92,106,100,88,92,102,0,83],
[118,107,118,106,104,109,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,103,114,104,125,112],
[96,0,109,120,98,96,90,96],
[97,101,0,119,101,108,120,108],
[107,90,91,0,103,84,83,91],
[96,112,109,107,0,84,110,96],
[106,114,102,126,126,0,109,114],
[85,120,90,127,100,101,0,101],
[98,114,102,119,114,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,100,95,103,89,110],
[106,0,92,106,102,105,78,104],
[116,118,0,116,110,121,105,122],
[110,104,94,0,106,105,97,109],
[115,108,100,104,0,97,104,116],
[107,105,89,105,113,0,85,115],
[121,132,105,113,106,125,0,120],
[100,106,88,101,94,95,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,79,96,104,77,98,88],
[122,0,108,120,117,105,116,102],
[131,102,0,112,120,94,122,116],
[114,90,98,0,93,80,100,89],
[106,93,90,117,0,95,119,92],
[133,105,116,130,115,0,123,113],
[112,94,88,110,91,87,0,100],
[122,108,94,121,118,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,112,123,107,123,99],
[102,0,90,100,115,89,106,88],
[104,120,0,110,117,107,117,105],
[98,110,100,0,127,91,110,102],
[87,95,93,83,0,92,102,89],
[103,121,103,119,118,0,112,113],
[87,104,93,100,108,98,0,103],
[111,122,105,108,121,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,97,111,102,126,105],
[102,0,97,90,105,94,97,107],
[102,113,0,104,99,103,103,96],
[113,120,106,0,115,102,111,109],
[99,105,111,95,0,111,110,112],
[108,116,107,108,99,0,118,100],
[84,113,107,99,100,92,0,102],
[105,103,114,101,98,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,124,120,107,123,104,117],
[89,0,102,126,87,100,100,113],
[86,108,0,99,99,102,81,116],
[90,84,111,0,101,114,105,93],
[103,123,111,109,0,111,119,103],
[87,110,108,96,99,0,94,98],
[106,110,129,105,91,116,0,105],
[93,97,94,117,107,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,100,90,105,103,94],
[106,0,108,95,89,109,111,96],
[104,102,0,94,94,108,97,92],
[110,115,116,0,103,108,117,105],
[120,121,116,107,0,116,118,101],
[105,101,102,102,94,0,102,92],
[107,99,113,93,92,108,0,90],
[116,114,118,105,109,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,119,114,107,95,96],
[103,0,110,114,111,116,103,118],
[117,100,0,114,118,105,105,100],
[91,96,96,0,105,117,95,91],
[96,99,92,105,0,87,93,98],
[103,94,105,93,123,0,97,112],
[115,107,105,115,117,113,0,108],
[114,92,110,119,112,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,106,108,117,103],
[106,0,104,99,105,108,106,113],
[106,106,0,102,101,95,116,91],
[109,111,108,0,112,114,119,104],
[104,105,109,98,0,97,111,99],
[102,102,115,96,113,0,112,103],
[93,104,94,91,99,98,0,102],
[107,97,119,106,111,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,105,114,114,106],
[106,0,105,110,102,105,110,111],
[106,105,0,96,97,112,105,94],
[109,100,114,0,108,114,114,100],
[105,108,113,102,0,112,106,107],
[96,105,98,96,98,0,102,102],
[96,100,105,96,104,108,0,96],
[104,99,116,110,103,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,88,95,102,98,89,99],
[116,0,105,108,113,112,101,107],
[122,105,0,110,112,111,93,106],
[115,102,100,0,98,104,101,109],
[108,97,98,112,0,94,109,106],
[112,98,99,106,116,0,95,111],
[121,109,117,109,101,115,0,105],
[111,103,104,101,104,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,93,98,102,91,100],
[102,0,97,84,87,88,97,94],
[109,113,0,101,109,107,121,110],
[117,126,109,0,102,114,107,109],
[112,123,101,108,0,120,114,98],
[108,122,103,96,90,0,98,103],
[119,113,89,103,96,112,0,112],
[110,116,100,101,112,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,102,105,106,108,108,120],
[86,0,101,85,92,96,105,99],
[108,109,0,94,92,99,96,103],
[105,125,116,0,99,103,104,110],
[104,118,118,111,0,101,120,133],
[102,114,111,107,109,0,100,123],
[102,105,114,106,90,110,0,105],
[90,111,107,100,77,87,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,96,70,84,98,92,104],
[142,0,113,105,128,144,109,140],
[114,97,0,81,91,124,95,107],
[140,105,129,0,123,154,141,143],
[126,82,119,87,0,125,110,121],
[112,66,86,56,85,0,111,102],
[118,101,115,69,100,99,0,121],
[106,70,103,67,89,108,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,114,120,46,61,120,118],
[80,0,135,173,92,45,132,131],
[96,75,0,141,76,71,117,94],
[90,37,69,0,49,46,103,70],
[164,118,134,161,0,90,137,134],
[149,165,139,164,120,0,138,98],
[90,78,93,107,73,72,0,62],
[92,79,116,140,76,112,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,120,144,106,124,110,102],
[78,0,94,114,82,103,91,101],
[90,116,0,138,85,100,100,95],
[66,96,72,0,56,84,97,73],
[104,128,125,154,0,121,111,129],
[86,107,110,126,89,0,100,106],
[100,119,110,113,99,110,0,106],
[108,109,115,137,81,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,97,111,104,99,96],
[93,0,113,111,99,107,106,96],
[99,97,0,99,89,103,92,90],
[113,99,111,0,107,99,99,108],
[99,111,121,103,0,118,114,106],
[106,103,107,111,92,0,115,101],
[111,104,118,111,96,95,0,105],
[114,114,120,102,104,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,117,105,104,98,92],
[98,0,106,115,107,105,91,114],
[105,104,0,116,107,106,119,121],
[93,95,94,0,113,121,111,119],
[105,103,103,97,0,106,97,106],
[106,105,104,89,104,0,103,89],
[112,119,91,99,113,107,0,117],
[118,96,89,91,104,121,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,100,116,114,104,120],
[109,0,105,106,115,117,106,117],
[98,105,0,114,116,122,102,112],
[110,104,96,0,114,105,98,113],
[94,95,94,96,0,110,93,107],
[96,93,88,105,100,0,97,107],
[106,104,108,112,117,113,0,121],
[90,93,98,97,103,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,107,115,108,103,94],
[100,0,96,103,111,96,95,96],
[98,114,0,102,111,94,104,97],
[103,107,108,0,103,102,104,86],
[95,99,99,107,0,106,100,93],
[102,114,116,108,104,0,111,110],
[107,115,106,106,110,99,0,109],
[116,114,113,124,117,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,132,127,94,134,124,102],
[84,0,117,115,82,126,101,117],
[78,93,0,109,109,121,123,93],
[83,95,101,0,88,105,90,126],
[116,128,101,122,0,131,97,117],
[76,84,89,105,79,0,115,101],
[86,109,87,120,113,95,0,93],
[108,93,117,84,93,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,118,107,104,106,112],
[112,0,111,106,105,127,90,96],
[105,99,0,100,112,106,97,99],
[92,104,110,0,101,110,88,98],
[103,105,98,109,0,102,94,116],
[106,83,104,100,108,0,88,104],
[104,120,113,122,116,122,0,113],
[98,114,111,112,94,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,99,108,101,120,107],
[101,0,101,95,95,92,84,88],
[95,109,0,92,63,77,93,97],
[111,115,118,0,108,95,95,97],
[102,115,147,102,0,109,99,125],
[109,118,133,115,101,0,104,106],
[90,126,117,115,111,106,0,111],
[103,122,113,113,85,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,134,100,124,111,104,112],
[103,0,114,100,100,97,113,89],
[76,96,0,95,100,106,97,93],
[110,110,115,0,95,102,104,94],
[86,110,110,115,0,127,122,93],
[99,113,104,108,83,0,104,106],
[106,97,113,106,88,106,0,93],
[98,121,117,116,117,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,94,102,107,111,99],
[107,0,111,95,104,105,97,115],
[102,99,0,97,108,102,105,104],
[116,115,113,0,111,115,100,117],
[108,106,102,99,0,110,105,116],
[103,105,108,95,100,0,110,110],
[99,113,105,110,105,100,0,113],
[111,95,106,93,94,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,108,105,122,99,97,93],
[124,0,110,123,131,118,111,101],
[102,100,0,100,110,104,92,93],
[105,87,110,0,102,101,98,94],
[88,79,100,108,0,90,92,80],
[111,92,106,109,120,0,94,97],
[113,99,118,112,118,116,0,107],
[117,109,117,116,130,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,101,89,107,91,96,109],
[126,0,114,105,110,103,117,112],
[109,96,0,90,105,97,98,106],
[121,105,120,0,117,107,113,119],
[103,100,105,93,0,102,103,109],
[119,107,113,103,108,0,114,114],
[114,93,112,97,107,96,0,105],
[101,98,104,91,101,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,115,108,111,115,103],
[96,0,91,100,108,109,101,93],
[94,119,0,107,115,120,119,107],
[95,110,103,0,97,103,116,91],
[102,102,95,113,0,111,109,86],
[99,101,90,107,99,0,101,101],
[95,109,91,94,101,109,0,89],
[107,117,103,119,124,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,100,115,73,106,101],
[111,0,150,134,114,115,147,99],
[99,60,0,84,123,60,88,93],
[110,76,126,0,141,74,118,106],
[95,96,87,69,0,71,100,87],
[137,95,150,136,139,0,128,117],
[104,63,122,92,110,82,0,106],
[109,111,117,104,123,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,98,106,141,114,105,124],
[136,0,141,152,94,95,141,125],
[112,69,0,87,84,64,76,146],
[104,58,123,0,133,110,69,124],
[69,116,126,77,0,87,107,107],
[96,115,146,100,123,0,100,143],
[105,69,134,141,103,110,0,146],
[86,85,64,86,103,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,105,98,101,93,90],
[102,0,109,103,86,124,112,117],
[111,101,0,102,84,98,105,107],
[105,107,108,0,103,117,98,106],
[112,124,126,107,0,124,104,123],
[109,86,112,93,86,0,97,95],
[117,98,105,112,106,113,0,113],
[120,93,103,104,87,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,96,108,123,96,115],
[108,0,105,115,115,120,102,112],
[112,105,0,104,109,114,113,118],
[114,95,106,0,104,106,94,111],
[102,95,101,106,0,109,105,98],
[87,90,96,104,101,0,98,97],
[114,108,97,116,105,112,0,116],
[95,98,92,99,112,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,100,101,109,100,103],
[105,0,105,101,109,113,100,98],
[110,105,0,100,110,108,104,101],
[110,109,110,0,111,121,107,105],
[109,101,100,99,0,108,96,105],
[101,97,102,89,102,0,98,103],
[110,110,106,103,114,112,0,97],
[107,112,109,105,105,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,100,99,77,127,85,99],
[141,0,122,119,97,137,107,97],
[110,88,0,125,105,136,94,91],
[111,91,85,0,116,105,82,86],
[133,113,105,94,0,106,97,112],
[83,73,74,105,104,0,81,93],
[125,103,116,128,113,129,0,80],
[111,113,119,124,98,117,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,50,76,127,131,44],
[120,0,152,104,121,117,171,102],
[124,58,0,101,32,73,112,126],
[160,106,109,0,80,117,150,42],
[134,89,178,130,0,141,193,128],
[83,93,137,93,69,0,133,85],
[79,39,98,60,17,77,0,81],
[166,108,84,168,82,125,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,95,40,48,21,98,55],
[168,0,132,99,89,82,134,99],
[115,78,0,47,117,49,131,101],
[170,111,163,0,74,94,114,84],
[162,121,93,136,0,108,152,109],
[189,128,161,116,102,0,135,88],
[112,76,79,96,58,75,0,55],
[155,111,109,126,101,122,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,113,113,114,108,108],
[110,0,102,106,104,108,124,114],
[108,108,0,105,113,110,121,112],
[97,104,105,0,114,104,118,113],
[97,106,97,96,0,100,126,111],
[96,102,100,106,110,0,111,107],
[102,86,89,92,84,99,0,88],
[102,96,98,97,99,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,107,103,88,101,100],
[108,0,97,122,89,110,114,103],
[115,113,0,112,109,106,119,95],
[103,88,98,0,102,103,95,99],
[107,121,101,108,0,111,111,106],
[122,100,104,107,99,0,100,102],
[109,96,91,115,99,110,0,104],
[110,107,115,111,104,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,122,121,109,90,126],
[126,0,101,131,126,134,121,114],
[115,109,0,111,136,134,101,128],
[88,79,99,0,131,103,95,107],
[89,84,74,79,0,99,105,101],
[101,76,76,107,111,0,91,111],
[120,89,109,115,105,119,0,115],
[84,96,82,103,109,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,93,101,94,101,114],
[111,0,105,99,105,109,106,116],
[111,105,0,101,100,104,100,107],
[117,111,109,0,115,104,111,118],
[109,105,110,95,0,111,100,97],
[116,101,106,106,99,0,106,103],
[109,104,110,99,110,104,0,116],
[96,94,103,92,113,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,107,99,120,110,119],
[104,0,110,109,106,109,119,108],
[112,100,0,113,95,104,118,112],
[103,101,97,0,84,112,117,107],
[111,104,115,126,0,108,114,130],
[90,101,106,98,102,0,98,109],
[100,91,92,93,96,112,0,119],
[91,102,98,103,80,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,107,100,114,121,128],
[100,0,122,115,107,131,115,104],
[105,88,0,90,107,115,99,103],
[103,95,120,0,111,113,109,111],
[110,103,103,99,0,116,111,107],
[96,79,95,97,94,0,91,104],
[89,95,111,101,99,119,0,104],
[82,106,107,99,103,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,104,89,106,118,110],
[112,0,106,108,101,102,110,102],
[96,104,0,89,100,101,98,98],
[106,102,121,0,99,104,105,101],
[121,109,110,111,0,112,109,102],
[104,108,109,106,98,0,109,105],
[92,100,112,105,101,101,0,104],
[100,108,112,109,108,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,115,92,126,113,149],
[110,0,92,140,126,107,128,152],
[113,118,0,133,121,97,132,128],
[95,70,77,0,97,89,82,101],
[118,84,89,113,0,101,88,119],
[84,103,113,121,109,0,105,124],
[97,82,78,128,122,105,0,125],
[61,58,82,109,91,86,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,101,92,122,117,105],
[112,0,115,94,109,117,118,114],
[111,95,0,91,109,102,104,105],
[109,116,119,0,88,117,121,106],
[118,101,101,122,0,122,138,123],
[88,93,108,93,88,0,103,105],
[93,92,106,89,72,107,0,108],
[105,96,105,104,87,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,112,110,111,98,104],
[103,0,99,116,108,116,105,109],
[107,111,0,118,117,108,105,118],
[98,94,92,0,108,107,87,111],
[100,102,93,102,0,105,94,96],
[99,94,102,103,105,0,87,103],
[112,105,105,123,116,123,0,115],
[106,101,92,99,114,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,99,103,118,109,98],
[101,0,112,100,97,106,101,88],
[108,98,0,117,111,108,95,112],
[111,110,93,0,99,111,107,95],
[107,113,99,111,0,106,101,84],
[92,104,102,99,104,0,91,100],
[101,109,115,103,109,119,0,109],
[112,122,98,115,126,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,104,96,96,118,118],
[99,0,90,119,84,108,97,121],
[91,120,0,99,95,98,94,115],
[106,91,111,0,95,93,103,113],
[114,126,115,115,0,89,100,121],
[114,102,112,117,121,0,110,124],
[92,113,116,107,110,100,0,126],
[92,89,95,97,89,86,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,111,100,132,107,107,98],
[74,0,91,102,112,109,93,104],
[99,119,0,84,133,122,105,107],
[110,108,126,0,123,116,109,96],
[78,98,77,87,0,87,89,85],
[103,101,88,94,123,0,101,99],
[103,117,105,101,121,109,0,108],
[112,106,103,114,125,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,100,86,71,104,78],
[113,0,93,108,91,99,103,74],
[115,117,0,113,98,96,98,93],
[110,102,97,0,100,96,83,96],
[124,119,112,110,0,96,103,93],
[139,111,114,114,114,0,109,95],
[106,107,112,127,107,101,0,106],
[132,136,117,114,117,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,107,118,112,110,115],
[110,0,100,93,118,111,102,115],
[104,110,0,109,118,104,99,115],
[103,117,101,0,112,107,107,106],
[92,92,92,98,0,95,95,107],
[98,99,106,103,115,0,101,105],
[100,108,111,103,115,109,0,112],
[95,95,95,104,103,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,116,114,109,105,117],
[93,0,108,97,96,99,96,101],
[98,102,0,102,102,108,108,101],
[94,113,108,0,106,100,112,100],
[96,114,108,104,0,104,112,105],
[101,111,102,110,106,0,101,105],
[105,114,102,98,98,109,0,106],
[93,109,109,110,105,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,102,103,92,112,109],
[89,0,109,104,95,96,98,112],
[96,101,0,100,114,89,104,112],
[108,106,110,0,101,104,109,102],
[107,115,96,109,0,101,89,111],
[118,114,121,106,109,0,99,107],
[98,112,106,101,121,111,0,105],
[101,98,98,108,99,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,119,128,107,123,105],
[99,0,103,116,114,96,119,105],
[104,107,0,113,122,100,121,105],
[91,94,97,0,109,84,120,111],
[82,96,88,101,0,85,109,87],
[103,114,110,126,125,0,120,117],
[87,91,89,90,101,90,0,98],
[105,105,105,99,123,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,102,107,108,109,108],
[99,0,118,105,112,107,113,111],
[101,92,0,82,107,105,109,102],
[108,105,128,0,120,113,118,116],
[103,98,103,90,0,92,107,101],
[102,103,105,97,118,0,104,100],
[101,97,101,92,103,106,0,100],
[102,99,108,94,109,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,104,111,105,99,115],
[104,0,94,109,124,103,105,105],
[107,116,0,109,121,120,105,111],
[106,101,101,0,103,104,100,107],
[99,86,89,107,0,98,95,101],
[105,107,90,106,112,0,100,106],
[111,105,105,110,115,110,0,113],
[95,105,99,103,109,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,120,120,120,118,103,141],
[67,0,117,92,104,79,84,115],
[90,93,0,96,98,87,80,92],
[90,118,114,0,93,94,91,109],
[90,106,112,117,0,101,105,112],
[92,131,123,116,109,0,109,141],
[107,126,130,119,105,101,0,134],
[69,95,118,101,98,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,117,101,105,98,92],
[111,0,115,118,106,102,101,108],
[100,95,0,118,94,94,92,101],
[93,92,92,0,79,77,94,89],
[109,104,116,131,0,95,113,114],
[105,108,116,133,115,0,107,107],
[112,109,118,116,97,103,0,112],
[118,102,109,121,96,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,122,127,101,116,129,107],
[95,0,101,108,100,103,109,99],
[88,109,0,111,105,112,100,101],
[83,102,99,0,86,94,108,105],
[109,110,105,124,0,108,112,94],
[94,107,98,116,102,0,107,100],
[81,101,110,102,98,103,0,94],
[103,111,109,105,116,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,93,103,98,112,102],
[118,0,97,103,111,105,94,103],
[117,113,0,105,109,109,124,118],
[117,107,105,0,118,110,129,100],
[107,99,101,92,0,104,108,105],
[112,105,101,100,106,0,116,110],
[98,116,86,81,102,94,0,102],
[108,107,92,110,105,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,114,108,106,104,112],
[95,0,91,102,96,104,88,92],
[99,119,0,109,114,111,109,105],
[96,108,101,0,100,111,109,99],
[102,114,96,110,0,107,103,106],
[104,106,99,99,103,0,105,102],
[106,122,101,101,107,105,0,96],
[98,118,105,111,104,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,117,168,117,79,79,76],
[59,0,44,93,41,118,20,17],
[93,166,0,127,132,94,89,166],
[42,117,83,0,83,76,42,42],
[93,169,78,127,0,94,129,168],
[131,92,116,134,116,0,95,92],
[131,190,121,168,81,115,0,172],
[134,193,44,168,42,118,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,98,102,92,111,101],
[113,0,101,102,117,108,112,102],
[118,109,0,98,107,107,108,106],
[112,108,112,0,120,105,112,106],
[108,93,103,90,0,94,107,92],
[118,102,103,105,116,0,110,102],
[99,98,102,98,103,100,0,93],
[109,108,104,104,118,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,101,99,92,109,84],
[106,0,96,102,93,96,104,94],
[107,114,0,103,105,112,117,115],
[109,108,107,0,101,92,112,101],
[111,117,105,109,0,95,108,110],
[118,114,98,118,115,0,112,110],
[101,106,93,98,102,98,0,115],
[126,116,95,109,100,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,119,117,102,112,102,91],
[129,0,86,136,110,122,101,89],
[91,124,0,149,116,105,117,107],
[93,74,61,0,61,61,61,61],
[108,100,94,149,0,99,91,89],
[98,88,105,149,111,0,110,87],
[108,109,93,149,119,100,0,87],
[119,121,103,149,121,123,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,83,109,91,96,90,108],
[129,0,111,116,110,112,116,95],
[127,99,0,109,112,123,94,116],
[101,94,101,0,95,114,91,89],
[119,100,98,115,0,116,111,98],
[114,98,87,96,94,0,84,91],
[120,94,116,119,99,126,0,92],
[102,115,94,121,112,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,96,114,102,95,107,97],
[108,0,99,99,111,95,109,108],
[114,111,0,113,97,109,105,112],
[96,111,97,0,110,103,104,104],
[108,99,113,100,0,95,107,99],
[115,115,101,107,115,0,111,103],
[103,101,105,106,103,99,0,113],
[113,102,98,106,111,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,110,103,113,91,112],
[103,0,102,111,115,108,115,107],
[104,108,0,115,120,119,111,107],
[100,99,95,0,111,116,102,108],
[107,95,90,99,0,109,97,94],
[97,102,91,94,101,0,106,107],
[119,95,99,108,113,104,0,110],
[98,103,103,102,116,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,83,111,106,99,111,99],
[101,0,108,106,106,111,111,116],
[127,102,0,108,112,123,117,105],
[99,104,102,0,117,98,115,79],
[104,104,98,93,0,114,103,90],
[111,99,87,112,96,0,116,111],
[99,99,93,95,107,94,0,97],
[111,94,105,131,120,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,117,118,109,110,106],
[108,0,106,104,99,111,101,118],
[92,104,0,104,97,93,106,123],
[93,106,106,0,90,100,98,113],
[92,111,113,120,0,107,115,121],
[101,99,117,110,103,0,113,104],
[100,109,104,112,95,97,0,111],
[104,92,87,97,89,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,93,98,88,84,97,96],
[125,0,107,124,113,110,101,104],
[117,103,0,122,84,100,99,114],
[112,86,88,0,97,90,88,99],
[122,97,126,113,0,113,108,119],
[126,100,110,120,97,0,94,104],
[113,109,111,122,102,116,0,101],
[114,106,96,111,91,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,79,115,118,107,101,95],
[91,0,82,96,89,115,102,85],
[131,128,0,123,104,114,134,105],
[95,114,87,0,86,121,119,86],
[92,121,106,124,0,112,118,106],
[103,95,96,89,98,0,104,89],
[109,108,76,91,92,106,0,99],
[115,125,105,124,104,121,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,108,93,100,109,105],
[105,0,102,110,100,105,106,99],
[103,108,0,113,97,90,118,106],
[102,100,97,0,103,94,111,91],
[117,110,113,107,0,107,103,102],
[110,105,120,116,103,0,120,118],
[101,104,92,99,107,90,0,93],
[105,111,104,119,108,92,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,97,95,100,105,88],
[113,0,106,109,117,113,114,100],
[111,104,0,111,106,108,94,94],
[113,101,99,0,95,98,102,81],
[115,93,104,115,0,97,99,97],
[110,97,102,112,113,0,100,108],
[105,96,116,108,111,110,0,93],
[122,110,116,129,113,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,117,111,105,115,109],
[96,0,111,106,103,113,107,103],
[94,99,0,108,103,108,99,107],
[93,104,102,0,100,109,94,106],
[99,107,107,110,0,106,104,98],
[105,97,102,101,104,0,109,103],
[95,103,111,116,106,101,0,97],
[101,107,103,104,112,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,101,111,99,109,99],
[117,0,107,103,106,101,118,119],
[102,103,0,115,108,103,113,122],
[109,107,95,0,108,107,112,112],
[99,104,102,102,0,92,109,110],
[111,109,107,103,118,0,115,121],
[101,92,97,98,101,95,0,111],
[111,91,88,98,100,89,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,107,115,113,105,108],
[97,0,92,96,101,101,95,95],
[107,118,0,105,127,113,112,106],
[103,114,105,0,121,106,105,100],
[95,109,83,89,0,104,90,84],
[97,109,97,104,106,0,105,91],
[105,115,98,105,120,105,0,93],
[102,115,104,110,126,119,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,124,103,120,105,107,119],
[101,0,101,82,99,99,100,101],
[86,109,0,84,101,88,103,106],
[107,128,126,0,103,104,105,117],
[90,111,109,107,0,92,106,98],
[105,111,122,106,118,0,117,115],
[103,110,107,105,104,93,0,100],
[91,109,104,93,112,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,170,92,121,166,103,105],
[105,0,156,129,161,157,141,113],
[40,54,0,42,71,76,84,71],
[118,81,168,0,106,144,166,97],
[89,49,139,104,0,104,144,87],
[44,53,134,66,106,0,81,53],
[107,69,126,44,66,129,0,72],
[105,97,139,113,123,157,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,111,93,90,100,115,108],
[122,0,95,100,87,91,100,109],
[99,115,0,102,104,112,112,109],
[117,110,108,0,109,104,111,92],
[120,123,106,101,0,99,106,96],
[110,119,98,106,111,0,113,107],
[95,110,98,99,104,97,0,94],
[102,101,101,118,114,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,103,95,96,99,101],
[110,0,108,110,107,96,104,105],
[98,102,0,94,97,88,88,97],
[107,100,116,0,106,108,112,103],
[115,103,113,104,0,107,103,99],
[114,114,122,102,103,0,110,102],
[111,106,122,98,107,100,0,100],
[109,105,113,107,111,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,85,82,82,98,89],
[110,0,120,97,93,90,107,106],
[109,90,0,89,75,74,100,87],
[125,113,121,0,103,93,116,97],
[128,117,135,107,0,93,127,118],
[128,120,136,117,117,0,104,148],
[112,103,110,94,83,106,0,108],
[121,104,123,113,92,62,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,104,101,102,100,110],
[95,0,107,108,110,99,100,112],
[114,103,0,118,112,106,108,125],
[106,102,92,0,101,111,102,111],
[109,100,98,109,0,112,105,114],
[108,111,104,99,98,0,98,106],
[110,110,102,108,105,112,0,113],
[100,98,85,99,96,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,83,95,72,112,118,72],
[112,0,97,103,106,107,121,91],
[127,113,0,100,102,112,96,98],
[115,107,110,0,104,116,131,100],
[138,104,108,106,0,119,140,122],
[98,103,98,94,91,0,118,95],
[92,89,114,79,70,92,0,83],
[138,119,112,110,88,115,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,103,106,103,105,112],
[103,0,112,107,109,115,107,113],
[108,98,0,99,98,99,95,106],
[107,103,111,0,98,100,98,107],
[104,101,112,112,0,103,98,103],
[107,95,111,110,107,0,101,104],
[105,103,115,112,112,109,0,104],
[98,97,104,103,107,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,119,105,113,123,107],
[102,0,114,120,89,108,100,97],
[94,96,0,109,90,100,86,98],
[91,90,101,0,87,90,93,98],
[105,121,120,123,0,100,108,110],
[97,102,110,120,110,0,88,109],
[87,110,124,117,102,122,0,109],
[103,113,112,112,100,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,109,101,109,100,101],
[114,0,102,101,109,105,107,110],
[108,108,0,110,113,96,109,114],
[101,109,100,0,107,103,94,99],
[109,101,97,103,0,104,97,97],
[101,105,114,107,106,0,102,95],
[110,103,101,116,113,108,0,99],
[109,100,96,111,113,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,115,97,117,110,106],
[101,0,95,98,108,107,115,106],
[93,115,0,118,100,112,102,110],
[95,112,92,0,90,109,100,101],
[113,102,110,120,0,108,118,111],
[93,103,98,101,102,0,104,88],
[100,95,108,110,92,106,0,115],
[104,104,100,109,99,122,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,102,115,113,100,113],
[95,0,99,95,115,98,92,110],
[102,111,0,96,118,100,92,110],
[108,115,114,0,115,103,105,111],
[95,95,92,95,0,100,90,105],
[97,112,110,107,110,0,103,121],
[110,118,118,105,120,107,0,122],
[97,100,100,99,105,89,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,102,131,99,151,82,83],
[124,0,125,113,142,139,121,64],
[108,85,0,48,80,133,68,41],
[79,97,162,0,116,142,80,109],
[111,68,130,94,0,157,97,76],
[59,71,77,68,53,0,86,58],
[128,89,142,130,113,124,0,74],
[127,146,169,101,134,152,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,114,111,97,109,108],
[104,0,102,106,104,84,94,113],
[98,108,0,98,99,93,92,114],
[96,104,112,0,103,92,97,101],
[99,106,111,107,0,108,100,103],
[113,126,117,118,102,0,118,129],
[101,116,118,113,110,92,0,121],
[102,97,96,109,107,81,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,82,135,100,116,123,125],
[83,0,83,110,115,109,92,133],
[128,127,0,127,104,148,135,111],
[75,100,83,0,101,104,142,126],
[110,95,106,109,0,106,130,111],
[94,101,62,106,104,0,122,120],
[87,118,75,68,80,88,0,117],
[85,77,99,84,99,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,106,104,109,103,109],
[101,0,88,94,89,105,89,93],
[108,122,0,109,109,101,93,114],
[104,116,101,0,103,99,92,107],
[106,121,101,107,0,111,107,104],
[101,105,109,111,99,0,99,107],
[107,121,117,118,103,111,0,119],
[101,117,96,103,106,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,88,90,79,105,92,90],
[122,0,113,113,107,106,102,90],
[122,97,0,96,89,99,91,103],
[120,97,114,0,91,111,115,108],
[131,103,121,119,0,111,113,99],
[105,104,111,99,99,0,102,78],
[118,108,119,95,97,108,0,95],
[120,120,107,102,111,132,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,120,110,110,101,111],
[103,0,102,107,100,110,104,103],
[105,108,0,106,91,110,105,108],
[90,103,104,0,95,108,108,115],
[100,110,119,115,0,113,106,115],
[100,100,100,102,97,0,102,108],
[109,106,105,102,104,108,0,102],
[99,107,102,95,95,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,98,94,100,104,99],
[109,0,111,109,103,105,112,104],
[117,99,0,107,107,106,111,107],
[112,101,103,0,92,103,117,95],
[116,107,103,118,0,108,106,110],
[110,105,104,107,102,0,97,104],
[106,98,99,93,104,113,0,103],
[111,106,103,115,100,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,93,107,101,111,123],
[100,0,94,108,95,109,108,112],
[104,116,0,98,98,108,113,105],
[117,102,112,0,98,91,116,111],
[103,115,112,112,0,117,108,127],
[109,101,102,119,93,0,99,116],
[99,102,97,94,102,111,0,120],
[87,98,105,99,83,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,95,99,93,93,99],
[113,0,109,111,109,112,102,109],
[107,101,0,104,99,103,96,103],
[115,99,106,0,103,102,101,109],
[111,101,111,107,0,99,99,110],
[117,98,107,108,111,0,107,104],
[117,108,114,109,111,103,0,119],
[111,101,107,101,100,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,116,109,104,120,119,116],
[110,0,108,116,101,105,112,117],
[94,102,0,110,115,105,117,111],
[101,94,100,0,93,93,114,108],
[106,109,95,117,0,97,112,108],
[90,105,105,117,113,0,115,120],
[91,98,93,96,98,95,0,91],
[94,93,99,102,102,90,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,105,103,98,110,111],
[112,0,99,98,107,97,111,103],
[105,111,0,104,107,111,117,103],
[105,112,106,0,119,113,117,109],
[107,103,103,91,0,97,100,102],
[112,113,99,97,113,0,107,111],
[100,99,93,93,110,103,0,78],
[99,107,107,101,108,99,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,92,97,92,100,97],
[104,0,100,99,100,109,111,102],
[111,110,0,101,110,110,113,109],
[118,111,109,0,104,101,109,115],
[113,110,100,106,0,99,110,104],
[118,101,100,109,111,0,104,101],
[110,99,97,101,100,106,0,100],
[113,108,101,95,106,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,58,94,112,110,83,82],
[132,0,106,103,115,115,106,107],
[152,104,0,134,146,149,119,126],
[116,107,76,0,124,145,96,128],
[98,95,64,86,0,132,97,77],
[100,95,61,65,78,0,72,91],
[127,104,91,114,113,138,0,124],
[128,103,84,82,133,119,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,91,106,88,106,81,101],
[94,0,93,107,104,90,79,103],
[119,117,0,130,103,104,116,119],
[104,103,80,0,103,111,84,110],
[122,106,107,107,0,111,78,113],
[104,120,106,99,99,0,93,112],
[129,131,94,126,132,117,0,118],
[109,107,91,100,97,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,109,110,97,84,106],
[119,0,103,107,106,116,88,113],
[114,107,0,110,118,120,97,118],
[101,103,100,0,98,94,90,121],
[100,104,92,112,0,113,98,108],
[113,94,90,116,97,0,105,107],
[126,122,113,120,112,105,0,121],
[104,97,92,89,102,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,98,110,83,103,99],
[117,0,112,102,112,98,101,106],
[120,98,0,106,119,106,118,110],
[112,108,104,0,134,103,116,109],
[100,98,91,76,0,93,94,79],
[127,112,104,107,117,0,106,108],
[107,109,92,94,116,104,0,109],
[111,104,100,101,131,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,107,107,123,110,98],
[109,0,99,103,97,106,102,92],
[115,111,0,113,103,115,113,110],
[103,107,97,0,108,116,105,93],
[103,113,107,102,0,127,100,94],
[87,104,95,94,83,0,97,90],
[100,108,97,105,110,113,0,90],
[112,118,100,117,116,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,100,113,114,107,110],
[90,0,100,75,100,83,94,81],
[92,110,0,81,96,91,90,93],
[110,135,129,0,118,100,111,102],
[97,110,114,92,0,90,105,100],
[96,127,119,110,120,0,103,104],
[103,116,120,99,105,107,0,106],
[100,129,117,108,110,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,109,104,101,108,107],
[101,0,103,110,100,100,102,102],
[107,107,0,104,111,103,113,108],
[101,100,106,0,86,99,90,98],
[106,110,99,124,0,111,104,101],
[109,110,107,111,99,0,101,96],
[102,108,97,120,106,109,0,105],
[103,108,102,112,109,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,144,106,86,168,96],
[90,0,134,116,137,110,117,108],
[99,76,0,123,150,112,156,112],
[66,94,87,0,96,117,116,118],
[104,73,60,114,0,79,89,110],
[124,100,98,93,131,0,137,91],
[42,93,54,94,121,73,0,78],
[114,102,98,92,100,119,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,107,100,107,126,109],
[102,0,84,96,108,98,98,116],
[100,126,0,114,99,117,111,134],
[103,114,96,0,106,101,105,126],
[110,102,111,104,0,125,96,109],
[103,112,93,109,85,0,104,119],
[84,112,99,105,114,106,0,122],
[101,94,76,84,101,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,86,83,102,98,93,93],
[130,0,93,112,126,106,117,99],
[124,117,0,96,124,107,90,105],
[127,98,114,0,139,103,109,104],
[108,84,86,71,0,90,95,98],
[112,104,103,107,120,0,119,127],
[117,93,120,101,115,91,0,116],
[117,111,105,106,112,83,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,106,78,120,107,98,116],
[89,0,97,79,87,79,107,89],
[104,113,0,98,102,87,89,100],
[132,131,112,0,107,89,116,111],
[90,123,108,103,0,105,128,101],
[103,131,123,121,105,0,129,92],
[112,103,121,94,82,81,0,94],
[94,121,110,99,109,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,111,102,94,108,103],
[121,0,116,104,117,114,122,116],
[99,94,0,98,106,106,108,101],
[99,106,112,0,108,106,119,111],
[108,93,104,102,0,102,113,110],
[116,96,104,104,108,0,113,102],
[102,88,102,91,97,97,0,93],
[107,94,109,99,100,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,103,96,106,98,108],
[121,0,110,113,114,109,115,104],
[106,100,0,112,106,106,115,112],
[107,97,98,0,95,98,101,106],
[114,96,104,115,0,97,99,110],
[104,101,104,112,113,0,98,106],
[112,95,95,109,111,112,0,110],
[102,106,98,104,100,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,113,103,124,120,104],
[91,0,91,112,98,127,110,83],
[107,119,0,120,110,130,122,84],
[97,98,90,0,102,114,124,95],
[107,112,100,108,0,125,105,110],
[86,83,80,96,85,0,95,81],
[90,100,88,86,105,115,0,90],
[106,127,126,115,100,129,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,92,98,110,106,113],
[105,0,100,111,100,101,99,103],
[98,110,0,114,107,112,102,107],
[118,99,96,0,103,120,109,96],
[112,110,103,107,0,112,107,108],
[100,109,98,90,98,0,98,94],
[104,111,108,101,103,112,0,100],
[97,107,103,114,102,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,87,92,93,109,108],
[110,0,114,114,100,101,109,105],
[100,96,0,91,94,103,108,107],
[123,96,119,0,90,107,103,100],
[118,110,116,120,0,103,104,109],
[117,109,107,103,107,0,117,104],
[101,101,102,107,106,93,0,92],
[102,105,103,110,101,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,98,87,118,77,112],
[100,0,92,118,94,115,102,55],
[110,118,0,90,93,119,100,110],
[112,92,120,0,111,140,109,99],
[123,116,117,99,0,119,132,105],
[92,95,91,70,91,0,96,82],
[133,108,110,101,78,114,0,130],
[98,155,100,111,105,128,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,97,111,106,108,119],
[106,0,94,108,106,102,105,108],
[112,116,0,111,103,102,101,107],
[113,102,99,0,106,109,107,115],
[99,104,107,104,0,100,103,109],
[104,108,108,101,110,0,100,111],
[102,105,109,103,107,110,0,111],
[91,102,103,95,101,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,83,121,113,109,129,113],
[108,0,94,106,109,128,150,122],
[127,116,0,108,104,97,126,102],
[89,104,102,0,117,101,129,121],
[97,101,106,93,0,93,109,120],
[101,82,113,109,117,0,120,110],
[81,60,84,81,101,90,0,107],
[97,88,108,89,90,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,110,133,103,99,126],
[86,0,130,117,99,109,125,125],
[101,80,0,98,149,103,134,152],
[100,93,112,0,120,122,102,134],
[77,111,61,90,0,115,129,121],
[107,101,107,88,95,0,144,135],
[111,85,76,108,81,66,0,81],
[84,85,58,76,89,75,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,153,143,103,96,131,113],
[96,0,141,110,106,79,94,84],
[57,69,0,98,58,61,68,56],
[67,100,112,0,89,66,97,85],
[107,104,152,121,0,106,97,70],
[114,131,149,144,104,0,122,113],
[79,116,142,113,113,88,0,107],
[97,126,154,125,140,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,112,101,114,117,101],
[109,0,122,101,109,107,112,113],
[106,88,0,87,83,95,92,96],
[98,109,123,0,111,107,105,115],
[109,101,127,99,0,111,111,106],
[96,103,115,103,99,0,100,108],
[93,98,118,105,99,110,0,108],
[109,97,114,95,104,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,98,71,85,90,92,94],
[128,0,133,93,99,99,110,111],
[112,77,0,89,92,89,94,101],
[139,117,121,0,118,119,103,115],
[125,111,118,92,0,105,108,91],
[120,111,121,91,105,0,89,115],
[118,100,116,107,102,121,0,111],
[116,99,109,95,119,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,99,101,111,92,100],
[104,0,102,106,96,98,93,107],
[106,108,0,105,101,110,103,114],
[111,104,105,0,109,100,103,107],
[109,114,109,101,0,106,95,106],
[99,112,100,110,104,0,96,113],
[118,117,107,107,115,114,0,105],
[110,103,96,103,104,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,88,109,119,78,41],
[142,0,132,135,121,120,111,99],
[140,78,0,123,111,120,102,80],
[122,75,87,0,105,127,115,82],
[101,89,99,105,0,78,99,108],
[91,90,90,83,132,0,74,71],
[132,99,108,95,111,136,0,88],
[169,111,130,128,102,139,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,125,108,109,104,126,113],
[94,0,123,108,102,111,115,126],
[85,87,0,90,82,94,99,105],
[102,102,120,0,103,91,121,112],
[101,108,128,107,0,97,118,125],
[106,99,116,119,113,0,125,134],
[84,95,111,89,92,85,0,91],
[97,84,105,98,85,76,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,93,100,107,106,105,107],
[95,0,99,99,107,99,96,98],
[117,111,0,115,99,113,100,124],
[110,111,95,0,109,103,99,110],
[103,103,111,101,0,111,94,99],
[104,111,97,107,99,0,106,113],
[105,114,110,111,116,104,0,102],
[103,112,86,100,111,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,98,119,116,112,96,104],
[90,0,100,100,107,110,97,87],
[112,110,0,97,119,123,112,108],
[91,110,113,0,102,99,101,81],
[94,103,91,108,0,102,83,83],
[98,100,87,111,108,0,104,95],
[114,113,98,109,127,106,0,84],
[106,123,102,129,127,115,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,100,99,98,94,102],
[119,0,96,87,86,93,93,95],
[109,114,0,105,97,92,105,106],
[110,123,105,0,106,104,100,103],
[111,124,113,104,0,117,106,118],
[112,117,118,106,93,0,110,118],
[116,117,105,110,104,100,0,115],
[108,115,104,107,92,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,97,115,167,114,93,68],
[128,0,86,122,128,103,81,62],
[113,124,0,107,120,125,92,113],
[95,88,103,0,150,120,106,81],
[43,82,90,60,0,108,71,63],
[96,107,85,90,102,0,66,87],
[117,129,118,104,139,144,0,103],
[142,148,97,129,147,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,103,95,101,82,101,93],
[116,0,108,85,106,104,100,109],
[107,102,0,97,108,97,90,99],
[115,125,113,0,109,111,107,99],
[109,104,102,101,0,101,89,104],
[128,106,113,99,109,0,104,112],
[109,110,120,103,121,106,0,98],
[117,101,111,111,106,98,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,124,112,128,108,116],
[113,0,108,96,92,134,113,125],
[98,102,0,93,107,110,86,103],
[86,114,117,0,60,130,89,117],
[98,118,103,150,0,117,106,119],
[82,76,100,80,93,0,80,82],
[102,97,124,121,104,130,0,106],
[94,85,107,93,91,128,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,124,119,96,102,109,105],
[106,0,109,123,99,87,82,101],
[86,101,0,104,93,93,88,95],
[91,87,106,0,97,83,80,90],
[114,111,117,113,0,104,110,99],
[108,123,117,127,106,0,102,112],
[101,128,122,130,100,108,0,110],
[105,109,115,120,111,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,98,100,98,108,95],
[109,0,109,105,98,102,107,96],
[115,101,0,101,107,98,105,95],
[112,105,109,0,100,106,105,107],
[110,112,103,110,0,98,99,99],
[112,108,112,104,112,0,101,107],
[102,103,105,105,111,109,0,106],
[115,114,115,103,111,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,83,81,109,76,83,100],
[101,0,87,97,116,89,91,102],
[127,123,0,108,129,114,95,119],
[129,113,102,0,134,116,105,121],
[101,94,81,76,0,86,85,93],
[134,121,96,94,124,0,86,89],
[127,119,115,105,125,124,0,122],
[110,108,91,89,117,121,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,104,110,104,110,109],
[114,0,109,108,113,105,109,107],
[105,101,0,106,113,109,119,106],
[106,102,104,0,106,108,108,108],
[100,97,97,104,0,113,111,100],
[106,105,101,102,97,0,107,107],
[100,101,91,102,99,103,0,99],
[101,103,104,102,110,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,107,113,114,101,107],
[99,0,103,105,93,112,98,92],
[102,107,0,95,100,108,90,95],
[103,105,115,0,110,111,105,107],
[97,117,110,100,0,115,93,98],
[96,98,102,99,95,0,108,98],
[109,112,120,105,117,102,0,108],
[103,118,115,103,112,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,102,116,114,110,104],
[101,0,104,93,99,122,102,97],
[106,106,0,97,115,129,101,102],
[108,117,113,0,108,123,106,102],
[94,111,95,102,0,107,105,106],
[96,88,81,87,103,0,103,104],
[100,108,109,104,105,107,0,99],
[106,113,108,108,104,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,96,105,96,108,102,108],
[92,0,108,102,92,115,102,102],
[114,102,0,105,96,108,103,88],
[105,108,105,0,99,98,95,104],
[114,118,114,111,0,115,122,103],
[102,95,102,112,95,0,100,110],
[108,108,107,115,88,110,0,106],
[102,108,122,106,107,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,99,121,113,126,113],
[101,0,97,130,112,113,120,116],
[108,113,0,109,114,107,116,103],
[111,80,101,0,127,106,111,101],
[89,98,96,83,0,100,119,102],
[97,97,103,104,110,0,114,108],
[84,90,94,99,91,96,0,87],
[97,94,107,109,108,102,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,95,94,95,89,88,120],
[132,0,118,97,118,114,115,136],
[115,92,0,96,113,85,104,114],
[116,113,114,0,113,109,103,142],
[115,92,97,97,0,126,96,117],
[121,96,125,101,84,0,113,139],
[122,95,106,107,114,97,0,105],
[90,74,96,68,93,71,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,109,108,110,93,100],
[95,0,92,93,92,95,76,89],
[105,118,0,105,105,107,105,114],
[101,117,105,0,100,96,96,101],
[102,118,105,110,0,106,99,104],
[100,115,103,114,104,0,94,105],
[117,134,105,114,111,116,0,105],
[110,121,96,109,106,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,106,104,106,99,108,98],
[131,0,121,122,105,111,107,120],
[104,89,0,105,101,102,114,92],
[106,88,105,0,101,114,104,93],
[104,105,109,109,0,95,111,100],
[111,99,108,96,115,0,113,110],
[102,103,96,106,99,97,0,102],
[112,90,118,117,110,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,85,105,107,112,123,106],
[108,0,108,108,111,130,116,98],
[125,102,0,110,104,129,110,94],
[105,102,100,0,101,120,108,108],
[103,99,106,109,0,117,108,110],
[98,80,81,90,93,0,98,87],
[87,94,100,102,102,112,0,101],
[104,112,116,102,100,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,85,103,91,92,94],
[118,0,98,101,106,114,95,95],
[119,112,0,96,112,115,101,101],
[125,109,114,0,110,132,108,95],
[107,104,98,100,0,110,89,102],
[119,96,95,78,100,0,93,98],
[118,115,109,102,121,117,0,119],
[116,115,109,115,108,112,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,104,103,94,94,86],
[111,0,108,107,116,100,109,104],
[111,102,0,103,103,94,97,100],
[106,103,107,0,112,107,101,95],
[107,94,107,98,0,113,102,99],
[116,110,116,103,97,0,112,100],
[116,101,113,109,108,98,0,106],
[124,106,110,115,111,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,101,108,107,111,109],
[107,0,106,111,121,105,106,105],
[106,104,0,121,120,109,95,101],
[109,99,89,0,104,103,102,104],
[102,89,90,106,0,81,87,95],
[103,105,101,107,129,0,97,106],
[99,104,115,108,123,113,0,114],
[101,105,109,106,115,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,87,94,97,107,103],
[111,0,113,90,87,97,103,98],
[104,97,0,98,90,95,103,106],
[123,120,112,0,117,114,124,105],
[116,123,120,93,0,98,123,129],
[113,113,115,96,112,0,126,122],
[103,107,107,86,87,84,0,96],
[107,112,104,105,81,88,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,105,106,109,109,116],
[90,0,108,95,101,101,101,109],
[97,102,0,94,99,100,97,110],
[105,115,116,0,103,110,113,121],
[104,109,111,107,0,101,113,99],
[101,109,110,100,109,0,107,112],
[101,109,113,97,97,103,0,108],
[94,101,100,89,111,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,107,95,86,112,83,88],
[128,0,109,88,111,89,94,88],
[103,101,0,98,99,108,102,111],
[115,122,112,0,101,111,112,103],
[124,99,111,109,0,126,107,111],
[98,121,102,99,84,0,128,120],
[127,116,108,98,103,82,0,103],
[122,122,99,107,99,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,108,122,86,105,116,105],
[88,0,97,120,103,50,46,75],
[102,113,0,141,146,115,99,115],
[88,90,69,0,69,80,64,77],
[124,107,64,141,0,76,88,104],
[105,160,95,130,134,0,87,99],
[94,164,111,146,122,123,0,128],
[105,135,95,133,106,111,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,108,107,102,109,122],
[110,0,106,99,116,103,113,112],
[106,104,0,113,111,98,103,107],
[102,111,97,0,119,107,120,117],
[103,94,99,91,0,90,103,102],
[108,107,112,103,120,0,120,122],
[101,97,107,90,107,90,0,101],
[88,98,103,93,108,88,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,111,110,114,100,98],
[111,0,116,111,120,111,119,98],
[102,94,0,99,93,97,106,91],
[99,99,111,0,118,107,99,115],
[100,90,117,92,0,96,89,101],
[96,99,113,103,114,0,90,98],
[110,91,104,111,121,120,0,109],
[112,112,119,95,109,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,92,108,135,126,136,124],
[60,0,79,70,114,92,93,99],
[118,131,0,100,129,119,127,110],
[102,140,110,0,120,110,103,110],
[75,96,81,90,0,108,84,95],
[84,118,91,100,102,0,113,89],
[74,117,83,107,126,97,0,104],
[86,111,100,100,115,121,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,132,76,132,76,102],
[109,0,103,119,107,146,75,133],
[97,107,0,135,76,123,74,85],
[78,91,75,0,72,113,73,61],
[134,103,134,138,0,147,113,119],
[78,64,87,97,63,0,63,86],
[134,135,136,137,97,147,0,111],
[108,77,125,149,91,124,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,113,109,110,105,111],
[110,0,100,104,117,97,111,107],
[109,110,0,108,115,102,107,113],
[97,106,102,0,112,107,105,108],
[101,93,95,98,0,98,96,98],
[100,113,108,103,112,0,106,120],
[105,99,103,105,114,104,0,107],
[99,103,97,102,112,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,110,106,107,113,112,97],
[84,0,88,108,81,104,80,84],
[100,122,0,107,109,119,102,122],
[104,102,103,0,105,105,108,93],
[103,129,101,105,0,121,95,99],
[97,106,91,105,89,0,85,89],
[98,130,108,102,115,125,0,105],
[113,126,88,117,111,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,103,111,75,88,81,110],
[136,0,174,103,91,103,128,108],
[107,36,0,80,57,46,87,79],
[99,107,130,0,105,114,100,119],
[135,119,153,105,0,74,102,111],
[122,107,164,96,136,0,113,139],
[129,82,123,110,108,97,0,123],
[100,102,131,91,99,71,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,101,97,98,109,98],
[114,0,104,109,110,111,121,114],
[114,106,0,102,113,110,112,107],
[109,101,108,0,106,104,106,101],
[113,100,97,104,0,107,101,102],
[112,99,100,106,103,0,104,112],
[101,89,98,104,109,106,0,102],
[112,96,103,109,108,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,134,115,123,116,99,102],
[62,0,102,63,117,125,110,74],
[76,108,0,78,118,114,86,35],
[95,147,132,0,126,135,79,83],
[87,93,92,84,0,128,56,59],
[94,85,96,75,82,0,56,39],
[111,100,124,131,154,154,0,111],
[108,136,175,127,151,171,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,107,95,105,115,102],
[109,0,124,109,101,111,104,97],
[100,86,0,100,97,94,89,102],
[103,101,110,0,104,110,98,106],
[115,109,113,106,0,114,115,104],
[105,99,116,100,96,0,104,106],
[95,106,121,112,95,106,0,98],
[108,113,108,104,106,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,129,107,121,96,113],
[105,0,104,110,120,116,111,114],
[98,106,0,115,111,114,107,104],
[81,100,95,0,98,93,110,90],
[103,90,99,112,0,116,110,97],
[89,94,96,117,94,0,103,98],
[114,99,103,100,100,107,0,113],
[97,96,106,120,113,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,108,113,101,114,120],
[101,0,103,102,103,86,102,104],
[95,107,0,103,98,100,91,112],
[102,108,107,0,117,112,94,101],
[97,107,112,93,0,96,100,113],
[109,124,110,98,114,0,107,111],
[96,108,119,116,110,103,0,106],
[90,106,98,109,97,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,116,90,123,130,99],
[122,0,84,136,99,113,137,104],
[105,126,0,116,109,132,139,114],
[94,74,94,0,83,98,120,104],
[120,111,101,127,0,115,137,91],
[87,97,78,112,95,0,123,103],
[80,73,71,90,73,87,0,63],
[111,106,96,106,119,107,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,111,112,111,117,101],
[98,0,105,111,96,107,114,105],
[97,105,0,107,103,105,113,101],
[99,99,103,0,95,108,101,104],
[98,114,107,115,0,112,114,99],
[99,103,105,102,98,0,110,91],
[93,96,97,109,96,100,0,102],
[109,105,109,106,111,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,86,107,90,96,102],
[101,0,111,93,98,96,106,102],
[105,99,0,89,104,103,114,104],
[124,117,121,0,96,101,115,114],
[103,112,106,114,0,107,109,106],
[120,114,107,109,103,0,105,112],
[114,104,96,95,101,105,0,103],
[108,108,106,96,104,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,150,127,85,126,122,150],
[69,0,138,86,89,113,110,111],
[60,72,0,96,67,84,61,83],
[83,124,114,0,113,128,105,120],
[125,121,143,97,0,124,114,123],
[84,97,126,82,86,0,99,115],
[88,100,149,105,96,111,0,138],
[60,99,127,90,87,95,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,110,109,101,98,103],
[111,0,104,106,106,110,107,102],
[105,106,0,105,116,106,111,117],
[100,104,105,0,99,108,97,105],
[101,104,94,111,0,101,104,107],
[109,100,104,102,109,0,111,104],
[112,103,99,113,106,99,0,113],
[107,108,93,105,103,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,110,104,105,112,107],
[101,0,96,96,105,96,97,97],
[113,114,0,106,109,102,101,111],
[100,114,104,0,113,106,100,112],
[106,105,101,97,0,109,105,98],
[105,114,108,104,101,0,107,105],
[98,113,109,110,105,103,0,100],
[103,113,99,98,112,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,125,109,94,99,90,94],
[116,0,105,102,114,118,112,101],
[85,105,0,87,100,82,103,103],
[101,108,123,0,120,98,110,128],
[116,96,110,90,0,93,100,86],
[111,92,128,112,117,0,99,96],
[120,98,107,100,110,111,0,113],
[116,109,107,82,124,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,109,129,114,111,120],
[85,0,105,90,98,97,95,91],
[106,105,0,99,119,118,106,104],
[101,120,111,0,131,117,108,122],
[81,112,91,79,0,94,97,90],
[96,113,92,93,116,0,99,117],
[99,115,104,102,113,111,0,116],
[90,119,106,88,120,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,91,108,86,126,97,106],
[107,0,95,112,85,107,88,97],
[119,115,0,127,106,127,115,102],
[102,98,83,0,76,110,83,94],
[124,125,104,134,0,129,107,114],
[84,103,83,100,81,0,78,90],
[113,122,95,127,103,132,0,99],
[104,113,108,116,96,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,109,128,78,139,128],
[126,0,120,106,115,98,112,103],
[115,90,0,101,118,69,111,85],
[101,104,109,0,110,103,123,105],
[82,95,92,100,0,100,114,91],
[132,112,141,107,110,0,142,90],
[71,98,99,87,96,68,0,76],
[82,107,125,105,119,120,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,106,115,119,108,107],
[116,0,117,102,113,120,110,112],
[101,93,0,107,106,112,105,102],
[104,108,103,0,107,120,108,104],
[95,97,104,103,0,113,108,102],
[91,90,98,90,97,0,94,89],
[102,100,105,102,102,116,0,98],
[103,98,108,106,108,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,79,94,156,96,149,78],
[78,0,61,53,150,85,117,67],
[131,149,0,117,139,95,141,120],
[116,157,93,0,134,111,150,94],
[54,60,71,76,0,98,92,80],
[114,125,115,99,112,0,151,119],
[61,93,69,60,118,59,0,61],
[132,143,90,116,130,91,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,70,125,92,126,69],
[136,0,64,70,125,77,141,99],
[135,146,0,167,105,158,125,117],
[140,140,43,0,113,94,156,82],
[85,85,105,97,0,78,60,98],
[118,133,52,116,132,0,134,126],
[84,69,85,54,150,76,0,54],
[141,111,93,128,112,84,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,113,105,105,136,135,120],
[80,0,102,93,74,107,106,92],
[97,108,0,86,98,112,102,97],
[105,117,124,0,124,114,123,118],
[105,136,112,86,0,112,116,102],
[74,103,98,96,98,0,88,86],
[75,104,108,87,94,122,0,91],
[90,118,113,92,108,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,110,109,100,99,112],
[119,0,111,106,105,101,106,100],
[104,99,0,106,101,95,98,106],
[100,104,104,0,100,97,101,111],
[101,105,109,110,0,98,107,115],
[110,109,115,113,112,0,102,106],
[111,104,112,109,103,108,0,108],
[98,110,104,99,95,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,102,101,100,106,100],
[106,0,105,100,107,100,94,102],
[108,105,0,108,99,107,100,106],
[108,110,102,0,113,113,108,112],
[109,103,111,97,0,110,105,107],
[110,110,103,97,100,0,103,110],
[104,116,110,102,105,107,0,103],
[110,108,104,98,103,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,105,114,118,120,126],
[108,0,98,99,113,105,117,115],
[115,112,0,103,124,94,127,120],
[105,111,107,0,117,111,108,109],
[96,97,86,93,0,104,99,117],
[92,105,116,99,106,0,111,114],
[90,93,83,102,111,99,0,104],
[84,95,90,101,93,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,129,116,89,98,110,109],
[85,0,116,96,77,81,91,99],
[81,94,0,90,85,78,91,76],
[94,114,120,0,96,96,103,92],
[121,133,125,114,0,101,97,133],
[112,129,132,114,109,0,95,108],
[100,119,119,107,113,115,0,124],
[101,111,134,118,77,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,98,164,116,114,113],
[114,0,136,112,166,114,122,94],
[103,74,0,109,135,130,114,97],
[112,98,101,0,149,127,125,104],
[46,44,75,61,0,62,64,57],
[94,96,80,83,148,0,119,69],
[96,88,96,85,146,91,0,97],
[97,116,113,106,153,141,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,132,116,108,119,123,91],
[69,0,80,73,63,84,101,88],
[78,130,0,79,68,84,107,88],
[94,137,131,0,93,109,117,119],
[102,147,142,117,0,118,125,104],
[91,126,126,101,92,0,120,94],
[87,109,103,93,85,90,0,85],
[119,122,122,91,106,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,116,93,93,100,100,105],
[119,0,101,97,96,96,110,108],
[94,109,0,81,89,114,130,98],
[117,113,129,0,112,115,125,104],
[117,114,121,98,0,96,111,100],
[110,114,96,95,114,0,111,85],
[110,100,80,85,99,99,0,85],
[105,102,112,106,110,125,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,98,104,91,98,113],
[108,0,125,112,118,91,112,116],
[100,85,0,94,113,83,82,107],
[112,98,116,0,110,82,107,112],
[106,92,97,100,0,78,98,112],
[119,119,127,128,132,0,104,126],
[112,98,128,103,112,106,0,114],
[97,94,103,98,98,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,103,110,128,121,101,130],
[81,0,94,86,107,104,105,125],
[107,116,0,104,110,122,111,118],
[100,124,106,0,103,94,98,115],
[82,103,100,107,0,102,86,122],
[89,106,88,116,108,0,103,127],
[109,105,99,112,124,107,0,121],
[80,85,92,95,88,83,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,210,113,113,67,164,113],
[97,0,143,113,67,67,164,46],
[0,67,0,67,67,67,67,46],
[97,97,143,0,97,0,164,46],
[97,143,143,113,0,67,164,46],
[143,143,143,210,143,0,164,46],
[46,46,143,46,46,46,0,46],
[97,164,164,164,164,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,110,107,106,100,97],
[113,0,109,101,108,101,119,94],
[113,101,0,101,102,102,100,100],
[100,109,109,0,109,105,115,106],
[103,102,108,101,0,96,108,111],
[104,109,108,105,114,0,125,103],
[110,91,110,95,102,85,0,92],
[113,116,110,104,99,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,87,115,66,84,117,109],
[147,0,126,120,105,89,128,132],
[123,84,0,126,91,81,117,109],
[95,90,84,0,71,74,116,92],
[144,105,119,139,0,114,141,135],
[126,121,129,136,96,0,142,111],
[93,82,93,94,69,68,0,100],
[101,78,101,118,75,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,113,111,109,114,112],
[98,0,101,109,104,107,109,106],
[105,109,0,112,108,110,108,110],
[97,101,98,0,110,102,106,108],
[99,106,102,100,0,107,108,111],
[101,103,100,108,103,0,104,104],
[96,101,102,104,102,106,0,112],
[98,104,100,102,99,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,121,132,121,94,130,111],
[84,0,85,91,94,71,101,88],
[89,125,0,116,112,119,104,109],
[78,119,94,0,90,92,121,97],
[89,116,98,120,0,105,112,95],
[116,139,91,118,105,0,123,112],
[80,109,106,89,98,87,0,101],
[99,122,101,113,115,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,91,100,108,103,108,104],
[86,0,80,96,101,98,93,81],
[119,130,0,121,112,123,119,102],
[110,114,89,0,118,105,98,91],
[102,109,98,92,0,98,98,89],
[107,112,87,105,112,0,102,105],
[102,117,91,112,112,108,0,111],
[106,129,108,119,121,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,91,85,97,95,85,95],
[135,0,122,101,103,118,118,116],
[119,88,0,83,89,92,87,103],
[125,109,127,0,102,101,105,88],
[113,107,121,108,0,100,113,123],
[115,92,118,109,110,0,107,99],
[125,92,123,105,97,103,0,111],
[115,94,107,122,87,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,135,122,118,157,127,100],
[98,0,73,110,94,83,88,72],
[75,137,0,111,121,93,91,95],
[88,100,99,0,85,114,135,78],
[92,116,89,125,0,65,74,65],
[53,127,117,96,145,0,98,106],
[83,122,119,75,136,112,0,112],
[110,138,115,132,145,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,100,97,112,102,99],
[118,0,105,102,108,108,101,106],
[108,105,0,106,111,114,103,113],
[110,108,104,0,107,123,117,104],
[113,102,99,103,0,115,108,105],
[98,102,96,87,95,0,99,105],
[108,109,107,93,102,111,0,112],
[111,104,97,106,105,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,101,92,98,98,115],
[106,0,121,109,105,106,99,121],
[104,89,0,105,98,98,99,103],
[109,101,105,0,98,108,109,104],
[118,105,112,112,0,101,107,123],
[112,104,112,102,109,0,113,131],
[112,111,111,101,103,97,0,113],
[95,89,107,106,87,79,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,104,94,111,99,93],
[116,0,113,104,115,127,124,104],
[102,97,0,92,103,102,93,100],
[106,106,118,0,104,117,112,104],
[116,95,107,106,0,103,109,107],
[99,83,108,93,107,0,104,106],
[111,86,117,98,101,106,0,92],
[117,106,110,106,103,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,68,93,110,116,115,126],
[96,0,79,71,109,132,80,116],
[142,131,0,104,116,133,117,168],
[117,139,106,0,129,118,97,141],
[100,101,94,81,0,105,84,125],
[94,78,77,92,105,0,105,140],
[95,130,93,113,126,105,0,108],
[84,94,42,69,85,70,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,105,98,107,91,98],
[112,0,90,120,107,107,114,97],
[117,120,0,107,104,115,96,97],
[105,90,103,0,97,113,93,109],
[112,103,106,113,0,108,114,105],
[103,103,95,97,102,0,80,82],
[119,96,114,117,96,130,0,114],
[112,113,113,101,105,128,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,95,105,117,90,104],
[110,0,107,114,108,117,99,107],
[107,103,0,111,109,117,111,110],
[115,96,99,0,120,124,106,100],
[105,102,101,90,0,117,97,100],
[93,93,93,86,93,0,89,96],
[120,111,99,104,113,121,0,107],
[106,103,100,110,110,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,108,97,108,106,97],
[108,0,102,111,110,109,116,103],
[108,108,0,105,102,109,104,102],
[102,99,105,0,95,107,102,91],
[113,100,108,115,0,126,110,113],
[102,101,101,103,84,0,104,102],
[104,94,106,108,100,106,0,97],
[113,107,108,119,97,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,79,103,104,109,88,97],
[105,0,107,104,110,123,105,108],
[131,103,0,112,100,129,102,107],
[107,106,98,0,94,116,75,104],
[106,100,110,116,0,122,106,100],
[101,87,81,94,88,0,77,90],
[122,105,108,135,104,133,0,97],
[113,102,103,106,110,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,85,75,88,99,118],
[108,0,107,114,64,62,122,96],
[121,103,0,101,82,92,104,106],
[125,96,109,0,77,105,130,125],
[135,146,128,133,0,105,135,121],
[122,148,118,105,105,0,162,163],
[111,88,106,80,75,48,0,81],
[92,114,104,85,89,47,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,115,109,103,109,103,105],
[117,0,116,122,120,105,111,109],
[95,94,0,104,109,97,107,100],
[101,88,106,0,95,96,97,93],
[107,90,101,115,0,105,93,100],
[101,105,113,114,105,0,103,103],
[107,99,103,113,117,107,0,103],
[105,101,110,117,110,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,118,115,116,102,124],
[90,0,103,97,104,92,83,117],
[97,107,0,100,103,106,97,118],
[92,113,110,0,106,110,100,120],
[95,106,107,104,0,104,100,108],
[94,118,104,100,106,0,110,110],
[108,127,113,110,110,100,0,126],
[86,93,92,90,102,100,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,179,98,179,111,126,111],
[112,0,138,177,169,111,169,31],
[31,72,0,54,126,54,31,54],
[112,33,156,0,156,54,46,31],
[31,41,84,54,0,54,31,54],
[99,99,156,156,156,0,156,130],
[84,41,179,164,179,54,0,72],
[99,179,156,179,156,80,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,85,85,77,75,76,69],
[103,0,103,107,97,120,93,101],
[125,107,0,82,98,93,101,108],
[125,103,128,0,115,113,109,133],
[133,113,112,95,0,107,104,114],
[135,90,117,97,103,0,89,120],
[134,117,109,101,106,121,0,112],
[141,109,102,77,96,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,133,104,127,96,142,149],
[77,0,64,71,103,65,149,112],
[77,146,0,110,116,109,172,132],
[106,139,100,0,118,112,146,108],
[83,107,94,92,0,67,152,125],
[114,145,101,98,143,0,134,162],
[68,61,38,64,58,76,0,101],
[61,98,78,102,85,48,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,101,105,121,108,136],
[109,0,104,111,106,119,113,108],
[113,106,0,121,115,112,102,115],
[109,99,89,0,94,117,107,101],
[105,104,95,116,0,121,107,116],
[89,91,98,93,89,0,106,107],
[102,97,108,103,103,104,0,108],
[74,102,95,109,94,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,119,79,111,100,88],
[105,0,86,106,108,102,151,108],
[117,124,0,125,88,125,139,106],
[91,104,85,0,77,95,116,95],
[131,102,122,133,0,110,141,86],
[99,108,85,115,100,0,122,57],
[110,59,71,94,69,88,0,52],
[122,102,104,115,124,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,97,112,113,112,95],
[116,0,108,117,112,125,101,105],
[116,102,0,133,125,121,123,118],
[113,93,77,0,96,123,107,110],
[98,98,85,114,0,122,129,79],
[97,85,89,87,88,0,94,75],
[98,109,87,103,81,116,0,98],
[115,105,92,100,131,135,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,98,101,97,97,92],
[117,0,108,106,107,107,107,94],
[103,102,0,92,96,104,98,98],
[112,104,118,0,102,99,101,105],
[109,103,114,108,0,102,98,89],
[113,103,106,111,108,0,106,104],
[113,103,112,109,112,104,0,104],
[118,116,112,105,121,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,114,103,100,94,102],
[100,0,96,106,98,94,94,95],
[112,114,0,106,115,115,105,113],
[96,104,104,0,98,88,93,103],
[107,112,95,112,0,105,106,115],
[110,116,95,122,105,0,107,109],
[116,116,105,117,104,103,0,108],
[108,115,97,107,95,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,158,107,177,88,154,116],
[96,0,108,45,177,94,143,143],
[52,102,0,24,102,38,121,66],
[103,165,186,0,158,141,174,153],
[33,33,108,52,0,38,52,40],
[122,116,172,69,172,0,116,116],
[56,67,89,36,158,94,0,19],
[94,67,144,57,170,94,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,106,109,118,104,121],
[102,0,112,98,109,99,107,99],
[90,98,0,92,102,100,93,102],
[104,112,118,0,135,127,115,115],
[101,101,108,75,0,101,112,114],
[92,111,110,83,109,0,92,101],
[106,103,117,95,98,118,0,128],
[89,111,108,95,96,109,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,114,101,111,117,102],
[97,0,93,97,100,107,106,95],
[100,117,0,110,108,106,111,103],
[96,113,100,0,105,98,107,100],
[109,110,102,105,0,107,102,106],
[99,103,104,112,103,0,110,99],
[93,104,99,103,108,100,0,91],
[108,115,107,110,104,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,106,103,98,105,102],
[100,0,101,103,114,97,98,98],
[109,109,0,109,117,96,105,101],
[104,107,101,0,109,92,110,109],
[107,96,93,101,0,91,97,96],
[112,113,114,118,119,0,104,114],
[105,112,105,100,113,106,0,111],
[108,112,109,101,114,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,65,124,82,90,89,95],
[123,0,76,127,99,107,77,104],
[145,134,0,145,131,102,108,128],
[86,83,65,0,78,83,80,113],
[128,111,79,132,0,93,101,117],
[120,103,108,127,117,0,101,99],
[121,133,102,130,109,109,0,108],
[115,106,82,97,93,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,116,104,97,105,115],
[100,0,94,102,105,96,80,107],
[86,116,0,120,105,94,113,103],
[94,108,90,0,98,102,77,110],
[106,105,105,112,0,101,94,97],
[113,114,116,108,109,0,99,116],
[105,130,97,133,116,111,0,109],
[95,103,107,100,113,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,97,97,95,91,103],
[109,0,101,97,98,94,80,98],
[101,109,0,92,97,97,92,113],
[113,113,118,0,106,105,92,121],
[113,112,113,104,0,108,98,115],
[115,116,113,105,102,0,105,112],
[119,130,118,118,112,105,0,123],
[107,112,97,89,95,98,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,123,105,115,115,126,110],
[133,0,125,120,123,124,121,105],
[87,85,0,68,104,95,111,108],
[105,90,142,0,115,81,122,107],
[95,87,106,95,0,98,123,97],
[95,86,115,129,112,0,112,111],
[84,89,99,88,87,98,0,96],
[100,105,102,103,113,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,86,100,105,119,115,98],
[94,0,101,88,112,104,103,104],
[124,109,0,108,110,96,111,100],
[110,122,102,0,126,122,105,108],
[105,98,100,84,0,95,99,87],
[91,106,114,88,115,0,104,91],
[95,107,99,105,111,106,0,99],
[112,106,110,102,123,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,51,90,75,84,87,81],
[121,0,94,104,107,91,87,107],
[159,116,0,125,171,130,99,94],
[120,106,85,0,105,98,109,82],
[135,103,39,105,0,80,89,65],
[126,119,80,112,130,0,96,111],
[123,123,111,101,121,114,0,109],
[129,103,116,128,145,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,117,107,110,112,123],
[105,0,100,124,117,116,119,127],
[96,110,0,111,104,110,106,106],
[93,86,99,0,105,113,101,102],
[103,93,106,105,0,107,108,112],
[100,94,100,97,103,0,107,103],
[98,91,104,109,102,103,0,100],
[87,83,104,108,98,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,123,100,114,106,116],
[98,0,102,101,102,104,97,96],
[103,108,0,111,98,98,99,109],
[87,109,99,0,94,109,93,98],
[110,108,112,116,0,100,100,112],
[96,106,112,101,110,0,102,101],
[104,113,111,117,110,108,0,120],
[94,114,101,112,98,109,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,94,100,112,111,125],
[102,0,100,99,106,119,121,113],
[110,110,0,98,107,114,118,102],
[116,111,112,0,104,117,122,117],
[110,104,103,106,0,116,110,116],
[98,91,96,93,94,0,106,105],
[99,89,92,88,100,104,0,97],
[85,97,108,93,94,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,105,103,106,106,105],
[111,0,107,104,120,110,119,114],
[108,103,0,110,119,118,110,107],
[105,106,100,0,113,116,115,115],
[107,90,91,97,0,105,110,106],
[104,100,92,94,105,0,108,113],
[104,91,100,95,100,102,0,107],
[105,96,103,95,104,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,116,96,95,118,109],
[103,0,114,111,113,105,122,107],
[97,96,0,115,100,96,115,108],
[94,99,95,0,102,95,103,92],
[114,97,110,108,0,104,113,109],
[115,105,114,115,106,0,122,106],
[92,88,95,107,97,88,0,96],
[101,103,102,118,101,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,123,116,98,102,100,100],
[90,0,81,111,115,97,105,85],
[87,129,0,100,98,104,101,99],
[94,99,110,0,92,101,100,81],
[112,95,112,118,0,114,112,110],
[108,113,106,109,96,0,97,90],
[110,105,109,110,98,113,0,101],
[110,125,111,129,100,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,87,113,109,99,117,107],
[102,0,108,110,100,114,107,114],
[123,102,0,113,107,117,124,120],
[97,100,97,0,109,100,106,110],
[101,110,103,101,0,119,113,116],
[111,96,93,110,91,0,108,101],
[93,103,86,104,97,102,0,116],
[103,96,90,100,94,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,102,111,92,87,106],
[120,0,122,116,113,115,105,120],
[99,88,0,107,99,97,90,103],
[108,94,103,0,101,98,92,101],
[99,97,111,109,0,98,103,110],
[118,95,113,112,112,0,107,116],
[123,105,120,118,107,103,0,111],
[104,90,107,109,100,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,121,119,119,122,105,114],
[76,0,84,75,89,87,75,74],
[89,126,0,88,111,108,94,99],
[91,135,122,0,128,117,95,120],
[91,121,99,82,0,98,98,93],
[88,123,102,93,112,0,116,110],
[105,135,116,115,112,94,0,93],
[96,136,111,90,117,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,137,124,86,74,97,90],
[85,0,95,82,83,45,89,59],
[73,115,0,73,49,81,87,86],
[86,128,137,0,70,91,112,89],
[124,127,161,140,0,106,147,102],
[136,165,129,119,104,0,143,134],
[113,121,123,98,63,67,0,87],
[120,151,124,121,108,76,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,100,106,116,107,107],
[114,0,100,132,125,104,104,107],
[110,110,0,77,121,98,92,112],
[110,78,133,0,131,116,105,107],
[104,85,89,79,0,115,73,78],
[94,106,112,94,95,0,102,93],
[103,106,118,105,137,108,0,113],
[103,103,98,103,132,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,107,107,108,103,94],
[101,0,100,110,108,100,103,101],
[102,110,0,114,111,106,106,95],
[103,100,96,0,114,100,94,95],
[103,102,99,96,0,110,109,96],
[102,110,104,110,100,0,101,108],
[107,107,104,116,101,109,0,101],
[116,109,115,115,114,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,93,102,109,104,103],
[118,0,115,112,110,109,100,105],
[105,95,0,91,95,109,95,104],
[117,98,119,0,104,114,98,107],
[108,100,115,106,0,111,105,100],
[101,101,101,96,99,0,96,96],
[106,110,115,112,105,114,0,100],
[107,105,106,103,110,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,98,104,100,104,102],
[102,0,123,98,106,98,98,104],
[99,87,0,90,88,89,85,90],
[112,112,120,0,106,107,109,98],
[106,104,122,104,0,108,105,112],
[110,112,121,103,102,0,103,104],
[106,112,125,101,105,107,0,93],
[108,106,120,112,98,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,57,82,81,68,77],
[133,0,79,87,82,155,112,106],
[145,131,0,146,131,131,101,86],
[153,123,64,0,78,111,108,91],
[128,128,79,132,0,103,73,92],
[129,55,79,99,107,0,84,93],
[142,98,109,102,137,126,0,92],
[133,104,124,119,118,117,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,116,105,117,111,113],
[101,0,107,112,113,103,94,101],
[103,103,0,104,97,98,103,100],
[94,98,106,0,102,84,95,93],
[105,97,113,108,0,93,118,104],
[93,107,112,126,117,0,108,107],
[99,116,107,115,92,102,0,98],
[97,109,110,117,106,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,91,111,97,100,108],
[117,0,108,108,115,113,104,121],
[112,102,0,105,114,120,109,119],
[119,102,105,0,118,104,99,122],
[99,95,96,92,0,97,97,108],
[113,97,90,106,113,0,104,109],
[110,106,101,111,113,106,0,124],
[102,89,91,88,102,101,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,113,106,103,103,91],
[107,0,105,104,126,113,109,91],
[109,105,0,99,117,96,99,108],
[97,106,111,0,118,91,102,94],
[104,84,93,92,0,102,97,109],
[107,97,114,119,108,0,103,95],
[107,101,111,108,113,107,0,92],
[119,119,102,116,101,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,125,99,114,113,114],
[100,0,109,111,122,115,113,109],
[106,101,0,119,110,120,103,109],
[85,99,91,0,107,96,113,120],
[111,88,100,103,0,101,101,100],
[96,95,90,114,109,0,103,98],
[97,97,107,97,109,107,0,100],
[96,101,101,90,110,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,93,98,108,110,92,103],
[94,0,97,104,102,105,93,100],
[117,113,0,105,125,103,115,107],
[112,106,105,0,106,104,103,103],
[102,108,85,104,0,106,100,97],
[100,105,107,106,104,0,104,100],
[118,117,95,107,110,106,0,105],
[107,110,103,107,113,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,117,110,111,98,113],
[110,0,107,106,104,116,101,109],
[92,103,0,94,100,100,94,103],
[93,104,116,0,110,111,109,96],
[100,106,110,100,0,101,104,107],
[99,94,110,99,109,0,96,99],
[112,109,116,101,106,114,0,110],
[97,101,107,114,103,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,126,98,93,106,107],
[97,0,119,124,95,109,98,106],
[97,91,0,112,91,96,96,89],
[84,86,98,0,91,96,89,75],
[112,115,119,119,0,100,115,111],
[117,101,114,114,110,0,113,110],
[104,112,114,121,95,97,0,116],
[103,104,121,135,99,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,113,117,108,131,123],
[92,0,93,77,119,84,103,115],
[106,117,0,100,118,91,111,106],
[97,133,110,0,117,88,118,116],
[93,91,92,93,0,88,97,98],
[102,126,119,122,122,0,126,128],
[79,107,99,92,113,84,0,102],
[87,95,104,94,112,82,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,107,115,102,106,94],
[112,0,114,121,116,102,102,111],
[105,96,0,124,94,95,92,76],
[103,89,86,0,97,77,74,97],
[95,94,116,113,0,99,108,101],
[108,108,115,133,111,0,97,127],
[104,108,118,136,102,113,0,98],
[116,99,134,113,109,83,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,102,107,110,98,111],
[112,0,113,104,118,122,107,112],
[98,97,0,92,100,97,103,106],
[108,106,118,0,105,116,109,108],
[103,92,110,105,0,100,103,114],
[100,88,113,94,110,0,113,106],
[112,103,107,101,107,97,0,103],
[99,98,104,102,96,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,116,100,115,107,117],
[104,0,102,125,115,111,114,126],
[102,108,0,110,107,122,105,136],
[94,85,100,0,80,92,88,117],
[110,95,103,130,0,112,124,133],
[95,99,88,118,98,0,95,103],
[103,96,105,122,86,115,0,114],
[93,84,74,93,77,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,102,101,100,95,108],
[105,0,122,114,85,111,95,111],
[116,88,0,103,94,71,93,96],
[108,96,107,0,108,109,124,131],
[109,125,116,102,0,120,118,121],
[110,99,139,101,90,0,109,114],
[115,115,117,86,92,101,0,101],
[102,99,114,79,89,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,109,101,103,105,107],
[100,0,100,101,96,88,95,102],
[107,110,0,100,103,101,103,112],
[101,109,110,0,104,95,104,93],
[109,114,107,106,0,100,113,104],
[107,122,109,115,110,0,104,106],
[105,115,107,106,97,106,0,98],
[103,108,98,117,106,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,104,107,108,104,112],
[108,0,105,113,115,121,114,108],
[97,105,0,104,103,112,117,115],
[106,97,106,0,111,112,116,116],
[103,95,107,99,0,104,117,112],
[102,89,98,98,106,0,100,88],
[106,96,93,94,93,110,0,103],
[98,102,95,94,98,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,122,113,117,105,114],
[102,0,102,121,115,121,117,121],
[115,108,0,106,111,101,115,106],
[88,89,104,0,104,100,99,107],
[97,95,99,106,0,111,104,128],
[93,89,109,110,99,0,99,113],
[105,93,95,111,106,111,0,108],
[96,89,104,103,82,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,100,133,148,105,113],
[88,0,107,93,104,126,93,72],
[101,103,0,93,97,102,104,88],
[110,117,117,0,108,118,101,91],
[77,106,113,102,0,114,88,102],
[62,84,108,92,96,0,102,90],
[105,117,106,109,122,108,0,112],
[97,138,122,119,108,120,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,109,90,104,107,111],
[111,0,117,108,108,100,106,93],
[103,93,0,105,97,87,101,92],
[101,102,105,0,94,84,101,99],
[120,102,113,116,0,99,107,104],
[106,110,123,126,111,0,114,103],
[103,104,109,109,103,96,0,95],
[99,117,118,111,106,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,102,73,106,115,77],
[115,0,87,113,119,124,150,92],
[122,123,0,107,103,129,136,96],
[108,97,103,0,113,124,130,108],
[137,91,107,97,0,109,105,98],
[104,86,81,86,101,0,111,115],
[95,60,74,80,105,99,0,60],
[133,118,114,102,112,95,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,97,123,139,113,113],
[97,0,95,100,104,105,118,117],
[92,115,0,91,114,117,106,103],
[113,110,119,0,131,111,92,114],
[87,106,96,79,0,111,95,95],
[71,105,93,99,99,0,94,93],
[97,92,104,118,115,116,0,115],
[97,93,107,96,115,117,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,102,107,86,102,101,98],
[119,0,124,110,98,121,124,106],
[108,86,0,114,88,117,101,101],
[103,100,96,0,95,105,106,91],
[124,112,122,115,0,118,122,99],
[108,89,93,105,92,0,95,79],
[109,86,109,104,88,115,0,81],
[112,104,109,119,111,131,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,105,103,103,111,120],
[98,0,95,98,105,112,119,120],
[115,115,0,95,118,123,117,126],
[105,112,115,0,110,121,116,119],
[107,105,92,100,0,116,121,107],
[107,98,87,89,94,0,114,124],
[99,91,93,94,89,96,0,114],
[90,90,84,91,103,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,108,105,110,115,110],
[98,0,107,117,103,101,96,102],
[93,103,0,111,101,110,100,105],
[102,93,99,0,94,108,92,98],
[105,107,109,116,0,112,108,104],
[100,109,100,102,98,0,100,98],
[95,114,110,118,102,110,0,101],
[100,108,105,112,106,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,104,105,115,111,116],
[94,0,105,94,109,121,120,105],
[91,105,0,100,100,97,111,96],
[106,116,110,0,109,102,113,96],
[105,101,110,101,0,97,107,97],
[95,89,113,108,113,0,117,107],
[99,90,99,97,103,93,0,98],
[94,105,114,114,113,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,102,102,114,113,120],
[102,0,105,110,98,108,123,104],
[99,105,0,100,106,111,109,100],
[108,100,110,0,111,112,118,115],
[108,112,104,99,0,108,116,110],
[96,102,99,98,102,0,113,98],
[97,87,101,92,94,97,0,92],
[90,106,110,95,100,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,82,126,125,105,106],
[99,0,107,100,106,116,84,104],
[101,103,0,101,125,127,112,106],
[128,110,109,0,132,131,110,95],
[84,104,85,78,0,113,94,85],
[85,94,83,79,97,0,87,79],
[105,126,98,100,116,123,0,93],
[104,106,104,115,125,131,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,100,114,130,117,82,92],
[82,0,92,115,103,85,86,101],
[110,118,0,104,102,111,123,120],
[96,95,106,0,113,115,114,101],
[80,107,108,97,0,120,79,79],
[93,125,99,95,90,0,101,92],
[128,124,87,96,131,109,0,105],
[118,109,90,109,131,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,85,116,120,97,99,108],
[113,0,94,107,105,109,94,98],
[125,116,0,102,115,105,108,113],
[94,103,108,0,105,94,102,103],
[90,105,95,105,0,100,92,101],
[113,101,105,116,110,0,117,119],
[111,116,102,108,118,93,0,118],
[102,112,97,107,109,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,113,98,112,100,105],
[111,0,102,106,111,114,112,126],
[112,108,0,117,104,114,101,117],
[97,104,93,0,96,102,98,102],
[112,99,106,114,0,109,103,116],
[98,96,96,108,101,0,93,112],
[110,98,109,112,107,117,0,107],
[105,84,93,108,94,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,104,112,109,103,109],
[101,0,98,101,97,100,95,100],
[108,112,0,106,114,108,93,113],
[106,109,104,0,114,106,105,104],
[98,113,96,96,0,101,96,100],
[101,110,102,104,109,0,100,103],
[107,115,117,105,114,110,0,110],
[101,110,97,106,110,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,106,106,92,113,110],
[104,0,97,105,91,112,91,103],
[99,113,0,105,109,106,111,103],
[104,105,105,0,106,96,119,116],
[104,119,101,104,0,106,113,95],
[118,98,104,114,104,0,119,105],
[97,119,99,91,97,91,0,96],
[100,107,107,94,115,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,144,89,123,101,125],
[90,0,100,103,87,114,95,103],
[92,110,0,129,107,92,90,110],
[66,107,81,0,75,81,89,95],
[121,123,103,135,0,120,114,123],
[87,96,118,129,90,0,108,111],
[109,115,120,121,96,102,0,109],
[85,107,100,115,87,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,121,109,116,104,106],
[102,0,99,118,104,108,108,96],
[105,111,0,116,103,110,107,100],
[89,92,94,0,98,102,100,91],
[101,106,107,112,0,112,113,99],
[94,102,100,108,98,0,107,92],
[106,102,103,110,97,103,0,95],
[104,114,110,119,111,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,91,96,109,106,92,105],
[100,0,87,102,100,105,94,97],
[119,123,0,107,102,120,109,111],
[114,108,103,0,106,103,98,115],
[101,110,108,104,0,109,96,111],
[104,105,90,107,101,0,83,103],
[118,116,101,112,114,127,0,112],
[105,113,99,95,99,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,109,109,112,111,108],
[105,0,109,113,109,110,103,108],
[93,101,0,103,94,105,100,90],
[101,97,107,0,108,105,108,103],
[101,101,116,102,0,102,109,107],
[98,100,105,105,108,0,98,102],
[99,107,110,102,101,112,0,105],
[102,102,120,107,103,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,99,111,118,92,131],
[96,0,95,104,102,102,96,114],
[90,115,0,95,97,125,104,110],
[111,106,115,0,106,122,105,129],
[99,108,113,104,0,123,97,119],
[92,108,85,88,87,0,96,111],
[118,114,106,105,113,114,0,105],
[79,96,100,81,91,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,121,109,100,99,107],
[117,0,118,120,109,105,114,122],
[113,92,0,108,89,104,86,97],
[89,90,102,0,120,101,104,102],
[101,101,121,90,0,101,103,104],
[110,105,106,109,109,0,115,103],
[111,96,124,106,107,95,0,113],
[103,88,113,108,106,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,123,108,128,101,101],
[97,0,104,124,119,119,107,122],
[96,106,0,118,98,104,104,95],
[87,86,92,0,88,91,98,90],
[102,91,112,122,0,122,120,105],
[82,91,106,119,88,0,122,108],
[109,103,106,112,90,88,0,97],
[109,88,115,120,105,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,86,94,94,77,67,107],
[102,0,93,115,114,107,99,140],
[124,117,0,114,122,96,109,128],
[116,95,96,0,102,91,112,112],
[116,96,88,108,0,102,111,112],
[133,103,114,119,108,0,98,119],
[143,111,101,98,99,112,0,118],
[103,70,82,98,98,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,124,135,100,115,111,117],
[95,0,122,126,132,116,112,108],
[86,88,0,150,70,90,120,94],
[75,84,60,0,89,108,111,106],
[110,78,140,121,0,124,132,107],
[95,94,120,102,86,0,121,139],
[99,98,90,99,78,89,0,100],
[93,102,116,104,103,71,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,118,105,102,107,107],
[107,0,117,119,98,95,117,103],
[100,93,0,109,90,93,105,91],
[92,91,101,0,93,94,106,96],
[105,112,120,117,0,98,113,106],
[108,115,117,116,112,0,114,99],
[103,93,105,104,97,96,0,96],
[103,107,119,114,104,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,94,105,92,94,99],
[108,0,97,105,120,107,114,97],
[107,113,0,99,121,102,102,106],
[116,105,111,0,106,101,109,114],
[105,90,89,104,0,103,102,101],
[118,103,108,109,107,0,106,104],
[116,96,108,101,108,104,0,106],
[111,113,104,96,109,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,127,96,100,110,111],
[96,0,107,91,100,92,91,114],
[115,103,0,109,92,119,96,106],
[83,119,101,0,108,110,90,103],
[114,110,118,102,0,102,92,113],
[110,118,91,100,108,0,98,108],
[100,119,114,120,118,112,0,119],
[99,96,104,107,97,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,70,88,105,104,92,94],
[105,0,103,122,108,105,124,113],
[140,107,0,136,140,118,108,102],
[122,88,74,0,132,110,111,114],
[105,102,70,78,0,89,75,90],
[106,105,92,100,121,0,86,106],
[118,86,102,99,135,124,0,111],
[116,97,108,96,120,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,131,113,123,120,135,104],
[94,0,109,128,115,91,109,109],
[79,101,0,102,96,93,105,98],
[97,82,108,0,109,112,123,84],
[87,95,114,101,0,89,112,78],
[90,119,117,98,121,0,116,95],
[75,101,105,87,98,94,0,84],
[106,101,112,126,132,115,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,107,106,107,103,106],
[100,0,103,106,97,100,97,96],
[107,107,0,109,113,108,109,93],
[103,104,101,0,108,104,111,111],
[104,113,97,102,0,95,105,100],
[103,110,102,106,115,0,115,110],
[107,113,101,99,105,95,0,108],
[104,114,117,99,110,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,108,94,116,116,106],
[102,0,92,91,109,97,115,64],
[119,118,0,104,130,108,124,103],
[102,119,106,0,110,136,131,97],
[116,101,80,100,0,98,115,73],
[94,113,102,74,112,0,123,77],
[94,95,86,79,95,87,0,87],
[104,146,107,113,137,133,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,100,109,84,106,102],
[98,0,127,119,104,101,119,104],
[100,83,0,87,89,80,78,83],
[110,91,123,0,124,103,135,82],
[101,106,121,86,0,88,116,110],
[126,109,130,107,122,0,112,89],
[104,91,132,75,94,98,0,67],
[108,106,127,128,100,121,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,94,106,97,92,97],
[103,0,108,94,103,102,92,103],
[103,102,0,93,103,106,98,101],
[116,116,117,0,117,106,103,110],
[104,107,107,93,0,102,98,98],
[113,108,104,104,108,0,102,101],
[118,118,112,107,112,108,0,104],
[113,107,109,100,112,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,104,107,105,116,123],
[100,0,96,90,98,91,96,122],
[107,114,0,98,113,104,115,130],
[106,120,112,0,104,101,108,121],
[103,112,97,106,0,102,107,123],
[105,119,106,109,108,0,111,135],
[94,114,95,102,103,99,0,128],
[87,88,80,89,87,75,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,110,108,111,95,116,114],
[127,0,110,103,114,107,110,114],
[100,100,0,96,100,92,89,103],
[102,107,114,0,117,105,129,117],
[99,96,110,93,0,98,106,102],
[115,103,118,105,112,0,97,108],
[94,100,121,81,104,113,0,97],
[96,96,107,93,108,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,104,113,90,91,111,118],
[65,0,103,100,96,107,107,109],
[106,107,0,92,103,74,97,97],
[97,110,118,0,95,111,88,98],
[120,114,107,115,0,123,98,109],
[119,103,136,99,87,0,145,109],
[99,103,113,122,112,65,0,116],
[92,101,113,112,101,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,108,109,105,124,115],
[108,0,101,101,119,102,109,110],
[101,109,0,104,109,105,109,108],
[102,109,106,0,116,99,114,112],
[101,91,101,94,0,84,112,101],
[105,108,105,111,126,0,115,116],
[86,101,101,96,98,95,0,94],
[95,100,102,98,109,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,75,94,96,97,113,94],
[109,0,97,116,80,107,136,114],
[135,113,0,109,106,96,163,106],
[116,94,101,0,78,96,136,91],
[114,130,104,132,0,109,130,124],
[113,103,114,114,101,0,142,86],
[97,74,47,74,80,68,0,99],
[116,96,104,119,86,124,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,106,119,104,117,108],
[101,0,103,99,106,103,100,115],
[105,107,0,111,121,95,100,107],
[104,111,99,0,117,98,99,103],
[91,104,89,93,0,96,92,101],
[106,107,115,112,114,0,105,99],
[93,110,110,111,118,105,0,105],
[102,95,103,107,109,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,93,85,104,96,107],
[117,0,105,114,112,110,106,105],
[114,105,0,106,91,103,110,117],
[117,96,104,0,111,108,98,112],
[125,98,119,99,0,104,105,106],
[106,100,107,102,106,0,94,118],
[114,104,100,112,105,116,0,103],
[103,105,93,98,104,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,80,83,76,92,90,99],
[117,0,103,106,100,109,101,115],
[130,107,0,100,99,100,111,116],
[127,104,110,0,98,107,109,108],
[134,110,111,112,0,103,104,119],
[118,101,110,103,107,0,93,123],
[120,109,99,101,106,117,0,97],
[111,95,94,102,91,87,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,123,106,106,115,110,113],
[111,0,105,89,100,106,110,134],
[87,105,0,75,93,87,97,107],
[104,121,135,0,120,119,124,129],
[104,110,117,90,0,112,110,126],
[95,104,123,91,98,0,123,125],
[100,100,113,86,100,87,0,119],
[97,76,103,81,84,85,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,121,108,98,121,118,117],
[93,0,121,107,109,123,109,128],
[89,89,0,83,93,118,98,105],
[102,103,127,0,105,132,103,116],
[112,101,117,105,0,124,122,114],
[89,87,92,78,86,0,91,84],
[92,101,112,107,88,119,0,98],
[93,82,105,94,96,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,137,176,49,130,109,197],
[73,0,13,73,62,94,73,94],
[73,197,0,140,49,143,73,130],
[34,137,70,0,49,70,0,70],
[161,148,161,161,0,161,73,161],
[80,116,67,140,49,0,60,127],
[101,137,137,210,137,150,0,137],
[13,116,80,140,49,83,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,111,103,113,111,117],
[106,0,105,103,110,107,111,106],
[99,105,0,107,103,117,107,99],
[99,107,103,0,106,110,105,106],
[107,100,107,104,0,112,102,107],
[97,103,93,100,98,0,108,93],
[99,99,103,105,108,102,0,97],
[93,104,111,104,103,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,118,115,122,105,112],
[101,0,111,111,112,112,95,111],
[94,99,0,107,105,102,92,104],
[92,99,103,0,105,97,84,107],
[95,98,105,105,0,121,94,99],
[88,98,108,113,89,0,93,101],
[105,115,118,126,116,117,0,109],
[98,99,106,103,111,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,99,100,106,112,88],
[114,0,113,105,104,117,122,107],
[109,97,0,111,108,120,112,103],
[111,105,99,0,113,117,116,108],
[110,106,102,97,0,120,116,109],
[104,93,90,93,90,0,108,88],
[98,88,98,94,94,102,0,90],
[122,103,107,102,101,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,93,115,94,99,104],
[107,0,110,103,122,114,98,96],
[104,100,0,99,115,95,89,88],
[117,107,111,0,113,111,92,90],
[95,88,95,97,0,92,99,93],
[116,96,115,99,118,0,108,107],
[111,112,121,118,111,102,0,121],
[106,114,122,120,117,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,124,120,107,122,116],
[89,0,101,117,101,116,109,112],
[110,109,0,115,107,120,104,108],
[86,93,95,0,102,101,114,108],
[90,109,103,108,0,114,101,117],
[103,94,90,109,96,0,106,108],
[88,101,106,96,109,104,0,105],
[94,98,102,102,93,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,130,78,112,129,89],
[113,0,68,124,102,102,127,113],
[104,142,0,117,96,101,130,101],
[80,86,93,0,101,112,101,111],
[132,108,114,109,0,100,117,116],
[98,108,109,98,110,0,107,128],
[81,83,80,109,93,103,0,90],
[121,97,109,99,94,82,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,114,117,96,98,94,109],
[119,0,117,108,105,111,110,114],
[96,93,0,99,91,109,93,87],
[93,102,111,0,98,90,91,102],
[114,105,119,112,0,106,105,113],
[112,99,101,120,104,0,105,101],
[116,100,117,119,105,105,0,102],
[101,96,123,108,97,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,124,95,92,91,106],
[110,0,114,121,114,92,97,101],
[118,96,0,125,109,97,103,107],
[86,89,85,0,69,77,85,72],
[115,96,101,141,0,109,109,116],
[118,118,113,133,101,0,85,90],
[119,113,107,125,101,125,0,101],
[104,109,103,138,94,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,55,112,86,82,64,109],
[124,0,73,105,142,82,85,123],
[155,137,0,178,154,108,59,98],
[98,105,32,0,105,98,57,90],
[124,68,56,105,0,70,42,100],
[128,128,102,112,140,0,109,95],
[146,125,151,153,168,101,0,178],
[101,87,112,120,110,115,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,97,114,121,125,110,69],
[87,0,103,103,127,122,96,78],
[113,107,0,74,102,123,104,87],
[96,107,136,0,121,122,104,96],
[89,83,108,89,0,108,94,99],
[85,88,87,88,102,0,82,80],
[100,114,106,106,116,128,0,109],
[141,132,123,114,111,130,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,115,111,127,106,105],
[106,0,109,102,101,110,99,106],
[98,101,0,116,106,113,115,98],
[95,108,94,0,109,110,107,99],
[99,109,104,101,0,94,93,100],
[83,100,97,100,116,0,95,108],
[104,111,95,103,117,115,0,105],
[105,104,112,111,110,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,97,121,105,119,101],
[112,0,100,106,113,100,115,99],
[107,110,0,100,118,105,110,99],
[113,104,110,0,125,107,121,101],
[89,97,92,85,0,84,95,88],
[105,110,105,103,126,0,118,105],
[91,95,100,89,115,92,0,93],
[109,111,111,109,122,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,102,111,109,104,119],
[103,0,92,99,114,102,96,98],
[111,118,0,114,124,98,105,116],
[108,111,96,0,118,88,116,109],
[99,96,86,92,0,96,86,85],
[101,108,112,122,114,0,118,124],
[106,114,105,94,124,92,0,133],
[91,112,94,101,125,86,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,210,49,85,85,49,134],
[76,0,76,49,85,0,0,85],
[0,134,0,49,85,85,0,134],
[161,161,161,0,85,85,0,161],
[125,125,125,125,0,76,125,125],
[125,210,125,125,134,0,49,210],
[161,210,210,210,85,161,0,210],
[76,125,76,49,85,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,105,114,102,112,102],
[92,0,101,95,113,98,114,103],
[104,109,0,104,119,112,106,111],
[105,115,106,0,108,94,98,95],
[96,97,91,102,0,82,111,91],
[108,112,98,116,128,0,119,88],
[98,96,104,112,99,91,0,92],
[108,107,99,115,119,122,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,93,94,89,105,96],
[108,0,98,97,111,99,110,106],
[109,112,0,84,101,101,117,113],
[117,113,126,0,108,105,110,122],
[116,99,109,102,0,105,120,109],
[121,111,109,105,105,0,114,121],
[105,100,93,100,90,96,0,103],
[114,104,97,88,101,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,99,109,120,104,107],
[109,0,113,103,114,120,90,99],
[97,97,0,92,103,100,89,90],
[111,107,118,0,105,110,95,102],
[101,96,107,105,0,111,95,100],
[90,90,110,100,99,0,99,100],
[106,120,121,115,115,111,0,103],
[103,111,120,108,110,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,123,108,106,123,110,101],
[112,0,111,128,105,119,119,105],
[87,99,0,109,89,110,96,90],
[102,82,101,0,87,119,106,101],
[104,105,121,123,0,114,119,94],
[87,91,100,91,96,0,101,93],
[100,91,114,104,91,109,0,101],
[109,105,120,109,116,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,120,103,96,107,115],
[100,0,98,124,100,96,102,101],
[105,112,0,124,98,84,106,95],
[90,86,86,0,91,76,89,97],
[107,110,112,119,0,100,117,103],
[114,114,126,134,110,0,113,105],
[103,108,104,121,93,97,0,103],
[95,109,115,113,107,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,112,101,123,113,99],
[97,0,115,101,93,110,94,95],
[110,95,0,132,108,116,112,110],
[98,109,78,0,98,106,90,111],
[109,117,102,112,0,129,105,124],
[87,100,94,104,81,0,89,94],
[97,116,98,120,105,121,0,96],
[111,115,100,99,86,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,91,82,104,118,111,104],
[99,0,90,94,96,100,108,112],
[119,120,0,98,110,110,115,109],
[128,116,112,0,107,112,107,105],
[106,114,100,103,0,112,103,109],
[92,110,100,98,98,0,112,99],
[99,102,95,103,107,98,0,97],
[106,98,101,105,101,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,120,133,132,128,103,128],
[117,0,113,115,118,123,94,118],
[90,97,0,116,105,114,106,115],
[77,95,94,0,95,119,101,103],
[78,92,105,115,0,114,99,111],
[82,87,96,91,96,0,81,99],
[107,116,104,109,111,129,0,114],
[82,92,95,107,99,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,119,112,124,115,118],
[107,0,98,127,110,116,108,113],
[99,112,0,114,109,123,115,112],
[91,83,96,0,94,111,111,98],
[98,100,101,116,0,114,109,97],
[86,94,87,99,96,0,94,91],
[95,102,95,99,101,116,0,94],
[92,97,98,112,113,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,85,90,90,81,80,91],
[131,0,98,114,102,118,100,114],
[125,112,0,94,119,117,120,104],
[120,96,116,0,108,102,97,98],
[120,108,91,102,0,104,97,105],
[129,92,93,108,106,0,99,107],
[130,110,90,113,113,111,0,131],
[119,96,106,112,105,103,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,81,118,117,115,109,117],
[122,0,105,129,111,142,94,123],
[129,105,0,119,110,116,105,116],
[92,81,91,0,114,105,119,116],
[93,99,100,96,0,109,101,111],
[95,68,94,105,101,0,84,117],
[101,116,105,91,109,126,0,134],
[93,87,94,94,99,93,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,122,122,116,111,105,110],
[80,0,109,113,116,108,105,103],
[88,101,0,113,104,99,101,88],
[88,97,97,0,103,100,101,94],
[94,94,106,107,0,93,94,104],
[99,102,111,110,117,0,105,96],
[105,105,109,109,116,105,0,98],
[100,107,122,116,106,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,110,105,108,91,127],
[106,0,100,103,105,99,115,139],
[115,110,0,104,87,87,109,139],
[100,107,106,0,95,76,123,119],
[105,105,123,115,0,103,109,132],
[102,111,123,134,107,0,106,119],
[119,95,101,87,101,104,0,113],
[83,71,71,91,78,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,96,105,94,97,106,87],
[125,0,118,123,99,108,112,94],
[114,92,0,105,96,99,108,92],
[105,87,105,0,108,122,93,77],
[116,111,114,102,0,102,112,105],
[113,102,111,88,108,0,109,94],
[104,98,102,117,98,101,0,107],
[123,116,118,133,105,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,96,105,107,105,94],
[110,0,105,103,99,108,100,96],
[107,105,0,101,112,96,108,102],
[114,107,109,0,105,97,100,94],
[105,111,98,105,0,93,94,88],
[103,102,114,113,117,0,115,102],
[105,110,102,110,116,95,0,105],
[116,114,108,116,122,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,84,88,82,93,88],
[118,0,117,107,105,106,108,93],
[114,93,0,98,95,97,108,96],
[126,103,112,0,97,106,117,108],
[122,105,115,113,0,113,115,110],
[128,104,113,104,97,0,114,105],
[117,102,102,93,95,96,0,106],
[122,117,114,102,100,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,103,113,113,112,106],
[108,0,108,110,117,116,103,116],
[122,102,0,127,123,117,106,104],
[107,100,83,0,112,122,126,119],
[97,93,87,98,0,107,88,104],
[97,94,93,88,103,0,88,95],
[98,107,104,84,122,122,0,121],
[104,94,106,91,106,115,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,113,103,102,100,92],
[100,0,91,101,113,109,125,116],
[120,119,0,98,105,118,110,107],
[97,109,112,0,100,125,123,97],
[107,97,105,110,0,129,102,104],
[108,101,92,85,81,0,107,93],
[110,85,100,87,108,103,0,107],
[118,94,103,113,106,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,115,103,98,111,103],
[93,0,109,105,100,99,100,105],
[92,101,0,104,97,89,108,103],
[95,105,106,0,103,99,100,99],
[107,110,113,107,0,106,112,103],
[112,111,121,111,104,0,109,109],
[99,110,102,110,98,101,0,109],
[107,105,107,111,107,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,81,95,101,88,102,99],
[115,0,93,114,112,118,108,111],
[129,117,0,101,113,121,108,118],
[115,96,109,0,108,106,96,101],
[109,98,97,102,0,106,101,105],
[122,92,89,104,104,0,94,111],
[108,102,102,114,109,116,0,106],
[111,99,92,109,105,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,112,105,95,114,114],
[97,0,101,109,101,104,110,104],
[101,109,0,109,104,99,113,119],
[98,101,101,0,98,100,109,112],
[105,109,106,112,0,111,115,118],
[115,106,111,110,99,0,113,121],
[96,100,97,101,95,97,0,109],
[96,106,91,98,92,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,99,99,107,90,101],
[104,0,96,100,77,86,90,78],
[106,114,0,107,98,86,95,92],
[111,110,103,0,96,103,101,95],
[111,133,112,114,0,104,108,110],
[103,124,124,107,106,0,104,99],
[120,120,115,109,102,106,0,102],
[109,132,118,115,100,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,105,118,107,115,110],
[96,0,78,90,105,100,96,98],
[100,132,0,105,110,92,101,103],
[105,120,105,0,110,105,110,97],
[92,105,100,100,0,89,118,96],
[103,110,118,105,121,0,112,102],
[95,114,109,100,92,98,0,95],
[100,112,107,113,114,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,92,94,92,97,101],
[111,0,96,96,99,80,114,85],
[112,114,0,105,85,87,118,90],
[118,114,105,0,119,110,114,109],
[116,111,125,91,0,87,118,89],
[118,130,123,100,123,0,126,96],
[113,96,92,96,92,84,0,103],
[109,125,120,101,121,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,104,97,98,95,87],
[119,0,110,109,102,111,102,105],
[101,100,0,96,107,101,94,92],
[106,101,114,0,104,102,99,107],
[113,108,103,106,0,104,99,98],
[112,99,109,108,106,0,92,103],
[115,108,116,111,111,118,0,103],
[123,105,118,103,112,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,115,103,104,110,120],
[96,0,112,109,102,106,108,95],
[96,98,0,127,104,91,107,90],
[95,101,83,0,88,87,95,94],
[107,108,106,122,0,109,105,97],
[106,104,119,123,101,0,107,110],
[100,102,103,115,105,103,0,106],
[90,115,120,116,113,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,74,82,101,71,95,102],
[117,0,117,104,102,92,113,107],
[136,93,0,92,105,93,105,109],
[128,106,118,0,109,97,108,108],
[109,108,105,101,0,106,103,93],
[139,118,117,113,104,0,121,118],
[115,97,105,102,107,89,0,107],
[108,103,101,102,117,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,113,105,97,95,90],
[115,0,120,120,132,93,93,137],
[100,90,0,104,96,118,110,93],
[97,90,106,0,112,79,64,93],
[105,78,114,98,0,68,83,82],
[113,117,92,131,142,0,112,106],
[115,117,100,146,127,98,0,83],
[120,73,117,117,128,104,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,57,132,27,93,105,134],
[80,0,89,83,80,173,131,134],
[153,121,0,114,53,146,148,146],
[78,127,96,0,105,153,156,141],
[183,130,157,105,0,144,157,189],
[117,37,64,57,66,0,64,134],
[105,79,62,54,53,146,0,116],
[76,76,64,69,21,76,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,93,92,98,90,99],
[114,0,109,113,111,112,103,120],
[104,101,0,97,106,112,112,96],
[117,97,113,0,105,114,102,106],
[118,99,104,105,0,106,95,109],
[112,98,98,96,104,0,105,95],
[120,107,98,108,115,105,0,108],
[111,90,114,104,101,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,104,87,102,102,91],
[116,0,95,104,92,104,107,106],
[124,115,0,112,92,116,97,99],
[106,106,98,0,92,112,110,98],
[123,118,118,118,0,115,123,102],
[108,106,94,98,95,0,102,95],
[108,103,113,100,87,108,0,96],
[119,104,111,112,108,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,98,113,101,111,93,100],
[124,0,105,128,108,127,116,98],
[112,105,0,121,111,120,115,107],
[97,82,89,0,98,106,78,93],
[109,102,99,112,0,100,97,99],
[99,83,90,104,110,0,101,91],
[117,94,95,132,113,109,0,95],
[110,112,103,117,111,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,131,109,108,107,112,112],
[108,0,121,106,109,109,105,101],
[79,89,0,93,93,95,94,88],
[101,104,117,0,105,104,116,109],
[102,101,117,105,0,107,106,102],
[103,101,115,106,103,0,111,101],
[98,105,116,94,104,99,0,109],
[98,109,122,101,108,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,76,102,106,103,90],
[116,0,130,80,100,127,97,98],
[112,80,0,82,105,107,107,88],
[134,130,128,0,103,128,123,126],
[108,110,105,107,0,106,110,98],
[104,83,103,82,104,0,104,87],
[107,113,103,87,100,106,0,96],
[120,112,122,84,112,123,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,116,76,95,99,97,112],
[123,0,135,127,103,119,116,119],
[94,75,0,78,91,97,83,96],
[134,83,132,0,105,120,90,115],
[115,107,119,105,0,116,99,121],
[111,91,113,90,94,0,94,103],
[113,94,127,120,111,116,0,117],
[98,91,114,95,89,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,108,103,117,105,112],
[98,0,100,109,113,108,105,109],
[107,110,0,99,118,114,105,108],
[102,101,111,0,107,104,99,109],
[107,97,92,103,0,104,89,96],
[93,102,96,106,106,0,93,105],
[105,105,105,111,121,117,0,105],
[98,101,102,101,114,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,94,113,121,121,108,116],
[89,0,102,112,93,104,98,112],
[116,108,0,108,111,123,98,108],
[97,98,102,0,95,98,100,109],
[89,117,99,115,0,114,107,115],
[89,106,87,112,96,0,88,118],
[102,112,112,110,103,122,0,116],
[94,98,102,101,95,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,99,88,81,96,87,89],
[125,0,102,109,84,108,98,85],
[111,108,0,103,75,90,96,87],
[122,101,107,0,93,108,116,106],
[129,126,135,117,0,119,123,102],
[114,102,120,102,91,0,98,95],
[123,112,114,94,87,112,0,101],
[121,125,123,104,108,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,126,106,101,103,107,104],
[98,0,109,98,108,101,98,96],
[84,101,0,102,97,96,104,101],
[104,112,108,0,95,95,113,103],
[109,102,113,115,0,96,117,93],
[107,109,114,115,114,0,102,109],
[103,112,106,97,93,108,0,112],
[106,114,109,107,117,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,89,107,98,110,104,104],
[107,0,105,109,100,106,105,102],
[121,105,0,123,100,119,105,104],
[103,101,87,0,93,97,94,92],
[112,110,110,117,0,117,116,105],
[100,104,91,113,93,0,101,104],
[106,105,105,116,94,109,0,90],
[106,108,106,118,105,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,127,101,105,106,130],
[101,0,130,115,126,111,130,116],
[93,80,0,102,89,90,95,111],
[83,95,108,0,91,81,138,107],
[109,84,121,119,0,89,124,108],
[105,99,120,129,121,0,121,105],
[104,80,115,72,86,89,0,92],
[80,94,99,103,102,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,109,123,108,112,121],
[92,0,91,98,124,114,108,108],
[108,119,0,110,135,111,98,116],
[101,112,100,0,119,112,102,113],
[87,86,75,91,0,87,97,99],
[102,96,99,98,123,0,99,121],
[98,102,112,108,113,111,0,128],
[89,102,94,97,111,89,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,94,100,91,85,86,89],
[132,0,112,110,118,108,103,106],
[116,98,0,112,111,102,97,97],
[110,100,98,0,117,107,100,99],
[119,92,99,93,0,94,103,85],
[125,102,108,103,116,0,102,101],
[124,107,113,110,107,108,0,102],
[121,104,113,111,125,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,86,105,89,110,108,91],
[111,0,91,103,102,99,95,105],
[124,119,0,108,96,127,122,102],
[105,107,102,0,118,103,101,105],
[121,108,114,92,0,101,113,97],
[100,111,83,107,109,0,114,95],
[102,115,88,109,97,96,0,105],
[119,105,108,105,113,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,94,96,90,97,90,94],
[128,0,98,97,103,106,99,113],
[116,112,0,85,88,104,96,110],
[114,113,125,0,105,108,109,115],
[120,107,122,105,0,113,121,115],
[113,104,106,102,97,0,110,116],
[120,111,114,101,89,100,0,102],
[116,97,100,95,95,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,89,113,106,99,96],
[111,0,101,87,121,111,91,94],
[107,109,0,100,108,120,118,115],
[121,123,110,0,127,119,105,117],
[97,89,102,83,0,100,91,97],
[104,99,90,91,110,0,101,94],
[111,119,92,105,119,109,0,104],
[114,116,95,93,113,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,100,112,112,101,106],
[105,0,102,104,112,108,101,111],
[109,108,0,100,110,110,107,112],
[110,106,110,0,121,100,104,108],
[98,98,100,89,0,105,93,107],
[98,102,100,110,105,0,97,99],
[109,109,103,106,117,113,0,111],
[104,99,98,102,103,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,104,122,119,108,113],
[97,0,104,103,118,112,101,107],
[102,106,0,98,115,114,95,106],
[106,107,112,0,112,104,107,114],
[88,92,95,98,0,98,100,104],
[91,98,96,106,112,0,103,114],
[102,109,115,103,110,107,0,100],
[97,103,104,96,106,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,109,105,100,116,98],
[110,0,103,110,105,111,109,89],
[100,107,0,117,109,108,113,117],
[101,100,93,0,112,99,108,92],
[105,105,101,98,0,104,102,95],
[110,99,102,111,106,0,105,96],
[94,101,97,102,108,105,0,96],
[112,121,93,118,115,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,102,110,98,108,108],
[108,0,98,104,99,104,109,114],
[109,112,0,102,118,108,107,117],
[108,106,108,0,110,105,107,108],
[100,111,92,100,0,100,102,108],
[112,106,102,105,110,0,105,108],
[102,101,103,103,108,105,0,123],
[102,96,93,102,102,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,86,108,112,111,128],
[104,0,88,111,105,105,102,118],
[110,122,0,112,103,110,99,120],
[124,99,98,0,101,109,101,110],
[102,105,107,109,0,105,97,111],
[98,105,100,101,105,0,98,119],
[99,108,111,109,113,112,0,119],
[82,92,90,100,99,91,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,92,89,72,70,94],
[115,0,101,111,80,68,106,91],
[120,109,0,109,95,99,84,107],
[118,99,101,0,116,94,89,104],
[121,130,115,94,0,116,108,132],
[138,142,111,116,94,0,95,118],
[140,104,126,121,102,115,0,110],
[116,119,103,106,78,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,100,96,98,103,100],
[115,0,115,111,109,107,99,107],
[109,95,0,108,96,96,105,95],
[110,99,102,0,92,99,104,96],
[114,101,114,118,0,112,111,111],
[112,103,114,111,98,0,108,112],
[107,111,105,106,99,102,0,112],
[110,103,115,114,99,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,101,89,94,96,106,94],
[122,0,98,108,104,105,121,105],
[109,112,0,91,106,103,114,98],
[121,102,119,0,116,116,128,99],
[116,106,104,94,0,107,118,102],
[114,105,107,94,103,0,115,103],
[104,89,96,82,92,95,0,84],
[116,105,112,111,108,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,129,102,99,105,98],
[90,0,101,95,93,90,99,91],
[97,109,0,132,102,106,113,105],
[81,115,78,0,91,98,105,104],
[108,117,108,119,0,103,112,100],
[111,120,104,112,107,0,106,108],
[105,111,97,105,98,104,0,88],
[112,119,105,106,110,102,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,78,88,98,112,91,100],
[109,0,97,78,95,111,94,103],
[132,113,0,111,111,101,107,113],
[122,132,99,0,123,111,103,123],
[112,115,99,87,0,86,96,111],
[98,99,109,99,124,0,104,115],
[119,116,103,107,114,106,0,123],
[110,107,97,87,99,95,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,96,103,103,82,94,99],
[127,0,106,111,109,95,105,106],
[114,104,0,106,95,103,104,99],
[107,99,104,0,93,87,98,99],
[107,101,115,117,0,95,119,103],
[128,115,107,123,115,0,104,123],
[116,105,106,112,91,106,0,96],
[111,104,111,111,107,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,102,138,116,107,119],
[82,0,97,96,112,104,91,115],
[97,113,0,92,103,106,109,129],
[108,114,118,0,113,105,108,121],
[72,98,107,97,0,107,95,98],
[94,106,104,105,103,0,94,100],
[103,119,101,102,115,116,0,124],
[91,95,81,89,112,110,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,117,109,101,56,63,82],
[137,0,143,105,130,115,107,127],
[93,67,0,72,106,87,89,98],
[101,105,138,0,130,93,97,119],
[109,80,104,80,0,116,70,117],
[154,95,123,117,94,0,97,145],
[147,103,121,113,140,113,0,105],
[128,83,112,91,93,65,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,92,61,111,75,73,47],
[148,0,78,107,79,100,132,129],
[118,132,0,114,108,89,93,107],
[149,103,96,0,132,146,118,102],
[99,131,102,78,0,106,109,74],
[135,110,121,64,104,0,121,110],
[137,78,117,92,101,89,0,89],
[163,81,103,108,136,100,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,86,110,91,82,91],
[95,0,76,70,65,76,61,32],
[110,134,0,106,96,103,105,91],
[124,140,104,0,98,97,98,81],
[100,145,114,112,0,116,124,111],
[119,134,107,113,94,0,99,86],
[128,149,105,112,86,111,0,100],
[119,178,119,129,99,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,120,113,114,113,110],
[93,0,99,102,103,106,100,89],
[105,111,0,112,112,108,109,107],
[90,108,98,0,98,94,95,93],
[97,107,98,112,0,108,104,117],
[96,104,102,116,102,0,101,97],
[97,110,101,115,106,109,0,113],
[100,121,103,117,93,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,101,119,119,97,108,109],
[87,0,103,100,119,107,94,90],
[109,107,0,104,111,114,106,101],
[91,110,106,0,108,109,123,104],
[91,91,99,102,0,93,89,83],
[113,103,96,101,117,0,87,98],
[102,116,104,87,121,123,0,91],
[101,120,109,106,127,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,124,88,108,89,82,51],
[103,0,130,110,95,91,82,108],
[86,80,0,100,78,84,78,82],
[122,100,110,0,70,116,63,88],
[102,115,132,140,0,117,107,86],
[121,119,126,94,93,0,63,80],
[128,128,132,147,103,147,0,117],
[159,102,128,122,124,130,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,106,112,105,94,93],
[96,0,118,108,99,104,102,100],
[103,92,0,84,87,86,93,88],
[104,102,126,0,100,92,92,103],
[98,111,123,110,0,100,118,101],
[105,106,124,118,110,0,115,121],
[116,108,117,118,92,95,0,113],
[117,110,122,107,109,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,93,105,99,103,104],
[108,0,109,91,109,96,110,110],
[100,101,0,90,90,96,105,104],
[117,119,120,0,115,105,114,123],
[105,101,120,95,0,95,112,112],
[111,114,114,105,115,0,114,121],
[107,100,105,96,98,96,0,107],
[106,100,106,87,98,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,122,98,104,83,101,101],
[66,0,119,78,108,103,110,106],
[88,91,0,91,79,113,88,114],
[112,132,119,0,146,95,114,120],
[106,102,131,64,0,104,115,98],
[127,107,97,115,106,0,137,126],
[109,100,122,96,95,73,0,126],
[109,104,96,90,112,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,89,90,88,92,85,87],
[114,0,92,94,99,95,100,99],
[121,118,0,116,110,105,115,109],
[120,116,94,0,97,99,94,109],
[122,111,100,113,0,105,98,104],
[118,115,105,111,105,0,109,102],
[125,110,95,116,112,101,0,104],
[123,111,101,101,106,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,101,110,88,80,99],
[117,0,71,104,112,92,81,116],
[113,139,0,132,128,109,102,104],
[109,106,78,0,125,109,80,105],
[100,98,82,85,0,84,79,108],
[122,118,101,101,126,0,89,93],
[130,129,108,130,131,121,0,87],
[111,94,106,105,102,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,119,120,114,112,94],
[97,0,101,118,115,104,99,103],
[115,109,0,111,111,110,102,105],
[91,92,99,0,106,96,86,89],
[90,95,99,104,0,106,96,83],
[96,106,100,114,104,0,105,101],
[98,111,108,124,114,105,0,96],
[116,107,105,121,127,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,108,87,102,97,100],
[95,0,112,102,106,117,107,102],
[93,98,0,94,83,111,89,101],
[102,108,116,0,86,110,111,101],
[123,104,127,124,0,136,105,99],
[108,93,99,100,74,0,100,85],
[113,103,121,99,105,110,0,105],
[110,108,109,109,111,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,157,105,101,128,100,99],
[138,0,153,136,103,151,105,125],
[53,57,0,82,107,68,87,86],
[105,74,128,0,121,86,80,107],
[109,107,103,89,0,135,118,92],
[82,59,142,124,75,0,72,96],
[110,105,123,130,92,138,0,94],
[111,85,124,103,118,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,109,115,105,105,105],
[102,0,107,101,107,95,95,102],
[93,103,0,101,97,94,95,91],
[101,109,109,0,119,107,108,107],
[95,103,113,91,0,96,87,92],
[105,115,116,103,114,0,97,93],
[105,115,115,102,123,113,0,100],
[105,108,119,103,118,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,115,89,86,113,110],
[116,0,116,110,126,105,130,113],
[116,94,0,95,100,94,108,97],
[95,100,115,0,107,99,116,105],
[121,84,110,103,0,95,116,110],
[124,105,116,111,115,0,119,109],
[97,80,102,94,94,91,0,102],
[100,97,113,105,100,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,110,99,112,102,106],
[115,0,110,116,105,119,106,110],
[107,100,0,116,115,118,103,109],
[100,94,94,0,101,106,101,101],
[111,105,95,109,0,117,101,103],
[98,91,92,104,93,0,96,104],
[108,104,107,109,109,114,0,103],
[104,100,101,109,107,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,123,105,120,125,128],
[82,0,93,103,85,66,74,116],
[80,117,0,90,91,102,95,112],
[87,107,120,0,86,85,90,119],
[105,125,119,124,0,117,117,138],
[90,144,108,125,93,0,113,125],
[85,136,115,120,93,97,0,115],
[82,94,98,91,72,85,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,100,71,58,87,76],
[111,0,97,108,79,74,88,86],
[112,113,0,106,85,92,97,105],
[110,102,104,0,83,74,86,82],
[139,131,125,127,0,98,118,90],
[152,136,118,136,112,0,126,102],
[123,122,113,124,92,84,0,98],
[134,124,105,128,120,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,118,99,121,118,109],
[96,0,86,98,108,99,94,87],
[106,124,0,127,110,129,104,97],
[92,112,83,0,91,107,111,89],
[111,102,100,119,0,124,101,111],
[89,111,81,103,86,0,112,92],
[92,116,106,99,109,98,0,74],
[101,123,113,121,99,118,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,113,97,86,117,90,88],
[117,0,122,118,98,110,109,100],
[97,88,0,97,89,97,89,95],
[113,92,113,0,87,106,97,100],
[124,112,121,123,0,114,108,104],
[93,100,113,104,96,0,93,93],
[120,101,121,113,102,117,0,107],
[122,110,115,110,106,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,96,102,108,97,95],
[98,0,92,107,90,111,88,82],
[104,118,0,112,110,112,103,99],
[114,103,98,0,100,104,108,100],
[108,120,100,110,0,120,108,106],
[102,99,98,106,90,0,105,98],
[113,122,107,102,102,105,0,103],
[115,128,111,110,104,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,98,122,114,97,112],
[104,0,117,101,126,119,106,123],
[104,93,0,109,107,102,110,130],
[112,109,101,0,123,122,109,124],
[88,84,103,87,0,105,92,112],
[96,91,108,88,105,0,113,111],
[113,104,100,101,118,97,0,119],
[98,87,80,86,98,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,101,106,111,101,101],
[108,0,112,99,95,107,107,103],
[108,98,0,93,110,102,95,99],
[109,111,117,0,90,101,102,96],
[104,115,100,120,0,105,106,102],
[99,103,108,109,105,0,98,117],
[109,103,115,108,104,112,0,111],
[109,107,111,114,108,93,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,93,103,99,111,94],
[112,0,97,105,115,100,120,109],
[112,113,0,114,119,107,115,105],
[117,105,96,0,105,106,114,105],
[107,95,91,105,0,103,109,97],
[111,110,103,104,107,0,106,99],
[99,90,95,96,101,104,0,102],
[116,101,105,105,113,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,79,61,122,80,67,66],
[125,0,62,91,75,70,80,80],
[131,148,0,102,126,112,76,54],
[149,119,108,0,133,114,82,62],
[88,135,84,77,0,105,122,84],
[130,140,98,96,105,0,85,78],
[143,130,134,128,88,125,0,115],
[144,130,156,148,126,132,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,106,106,91,89,123,109],
[124,0,107,107,100,104,123,116],
[104,103,0,115,95,101,133,104],
[104,103,95,0,99,107,130,105],
[119,110,115,111,0,92,123,133],
[121,106,109,103,118,0,117,114],
[87,87,77,80,87,93,0,89],
[101,94,106,105,77,96,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,85,43,51,106,43,106],
[201,0,139,98,103,97,147,106],
[125,71,0,10,71,73,71,73],
[167,112,200,0,103,158,147,167],
[159,107,139,107,0,98,107,107],
[104,113,137,52,112,0,113,9],
[167,63,139,63,103,97,0,72],
[104,104,137,43,103,201,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,112,101,103,84,92],
[112,0,93,110,113,119,107,107],
[114,117,0,94,121,97,80,91],
[98,100,116,0,103,88,97,106],
[109,97,89,107,0,85,81,94],
[107,91,113,122,125,0,96,105],
[126,103,130,113,129,114,0,108],
[118,103,119,104,116,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,105,93,98,104,96],
[111,0,123,100,100,106,102,105],
[94,87,0,96,67,95,92,96],
[105,110,114,0,90,120,108,113],
[117,110,143,120,0,119,102,123],
[112,104,115,90,91,0,118,101],
[106,108,118,102,108,92,0,112],
[114,105,114,97,87,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,97,97,93,110,102],
[112,0,104,103,96,106,110,111],
[103,106,0,111,104,100,106,104],
[113,107,99,0,97,98,104,112],
[113,114,106,113,0,101,99,109],
[117,104,110,112,109,0,118,117],
[100,100,104,106,111,92,0,108],
[108,99,106,98,101,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,111,96,96,96,97],
[120,0,115,121,111,105,106,112],
[103,95,0,112,98,117,108,101],
[99,89,98,0,106,95,94,91],
[114,99,112,104,0,100,101,103],
[114,105,93,115,110,0,108,99],
[114,104,102,116,109,102,0,103],
[113,98,109,119,107,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,110,100,95,102,91],
[114,0,117,113,115,102,102,103],
[115,93,0,105,109,99,108,107],
[100,97,105,0,114,101,99,102],
[110,95,101,96,0,85,96,92],
[115,108,111,109,125,0,109,96],
[108,108,102,111,114,101,0,95],
[119,107,103,108,118,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,98,111,106,96,100],
[106,0,116,98,96,98,106,108],
[104,94,0,91,105,100,106,104],
[112,112,119,0,98,108,105,101],
[99,114,105,112,0,101,99,121],
[104,112,110,102,109,0,98,108],
[114,104,104,105,111,112,0,104],
[110,102,106,109,89,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,113,109,101,104,114],
[108,0,101,104,99,92,108,99],
[109,109,0,118,105,99,120,114],
[97,106,92,0,94,81,108,108],
[101,111,105,116,0,108,115,112],
[109,118,111,129,102,0,122,117],
[106,102,90,102,95,88,0,100],
[96,111,96,102,98,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,132,123,99,113,104,104],
[98,0,129,120,107,108,103,109],
[78,81,0,101,85,104,90,84],
[87,90,109,0,89,105,108,93],
[111,103,125,121,0,120,118,104],
[97,102,106,105,90,0,99,101],
[106,107,120,102,92,111,0,101],
[106,101,126,117,106,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,97,99,114,109,102],
[108,0,95,101,103,103,102,105],
[107,115,0,110,99,117,114,111],
[113,109,100,0,113,117,112,108],
[111,107,111,97,0,111,108,114],
[96,107,93,93,99,0,113,107],
[101,108,96,98,102,97,0,101],
[108,105,99,102,96,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,113,98,106,106,112],
[100,0,96,100,100,110,88,102],
[106,114,0,112,111,109,93,120],
[97,110,98,0,105,100,86,108],
[112,110,99,105,0,105,87,118],
[104,100,101,110,105,0,93,119],
[104,122,117,124,123,117,0,121],
[98,108,90,102,92,91,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,111,100,99,106,95],
[103,0,121,114,111,102,112,107],
[101,89,0,92,113,108,93,102],
[99,96,118,0,95,100,98,95],
[110,99,97,115,0,97,93,102],
[111,108,102,110,113,0,112,110],
[104,98,117,112,117,98,0,105],
[115,103,108,115,108,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,76,82,98,82,63,78],
[155,0,118,156,140,110,148,83],
[134,92,0,84,122,66,114,100],
[128,54,126,0,154,74,97,79],
[112,70,88,56,0,64,99,89],
[128,100,144,136,146,0,124,115],
[147,62,96,113,111,86,0,56],
[132,127,110,131,121,95,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,86,102,104,102,102],
[113,0,86,104,94,106,103,96],
[110,124,0,102,102,119,112,112],
[124,106,108,0,93,114,109,110],
[108,116,108,117,0,114,101,106],
[106,104,91,96,96,0,85,97],
[108,107,98,101,109,125,0,103],
[108,114,98,100,104,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,104,101,107,114,96],
[106,0,107,105,104,106,113,106],
[118,103,0,114,108,104,120,106],
[106,105,96,0,107,111,112,103],
[109,106,102,103,0,108,102,99],
[103,104,106,99,102,0,113,104],
[96,97,90,98,108,97,0,98],
[114,104,104,107,111,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,100,97,91,102,99],
[110,0,100,97,107,96,105,105],
[113,110,0,112,127,105,115,108],
[110,113,98,0,113,96,111,108],
[113,103,83,97,0,93,109,101],
[119,114,105,114,117,0,115,110],
[108,105,95,99,101,95,0,97],
[111,105,102,102,109,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,97,120,110,123,114,108],
[83,0,93,104,102,104,96,103],
[113,117,0,115,109,105,114,108],
[90,106,95,0,97,108,91,95],
[100,108,101,113,0,105,105,100],
[87,106,105,102,105,0,96,101],
[96,114,96,119,105,114,0,101],
[102,107,102,115,110,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,112,98,101,109,110],
[104,0,104,119,108,104,111,124],
[117,106,0,123,105,117,121,112],
[98,91,87,0,92,97,98,111],
[112,102,105,118,0,90,116,105],
[109,106,93,113,120,0,104,114],
[101,99,89,112,94,106,0,97],
[100,86,98,99,105,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,128,114,106,128,113,109],
[112,0,129,120,112,130,103,114],
[82,81,0,99,90,95,83,97],
[96,90,111,0,95,112,92,93],
[104,98,120,115,0,114,111,114],
[82,80,115,98,96,0,84,101],
[97,107,127,118,99,126,0,113],
[101,96,113,117,96,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,107,103,102,121,130],
[98,0,107,110,116,114,120,126],
[89,103,0,98,88,102,113,106],
[103,100,112,0,119,102,119,122],
[107,94,122,91,0,100,114,117],
[108,96,108,108,110,0,119,123],
[89,90,97,91,96,91,0,105],
[80,84,104,88,93,87,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,111,88,99,95,89],
[109,0,107,106,97,87,102,109],
[106,103,0,105,89,93,106,92],
[99,104,105,0,93,111,113,98],
[122,113,121,117,0,105,126,99],
[111,123,117,99,105,0,109,110],
[115,108,104,97,84,101,0,97],
[121,101,118,112,111,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,108,116,108,115,97],
[96,0,99,98,118,121,114,107],
[104,111,0,102,123,110,111,101],
[102,112,108,0,105,105,108,105],
[94,92,87,105,0,96,106,91],
[102,89,100,105,114,0,109,110],
[95,96,99,102,104,101,0,95],
[113,103,109,105,119,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,108,107,106,102,105],
[102,0,108,101,106,113,110,103],
[100,102,0,94,100,116,114,105],
[102,109,116,0,102,107,102,96],
[103,104,110,108,0,112,110,113],
[104,97,94,103,98,0,94,95],
[108,100,96,108,100,116,0,106],
[105,107,105,114,97,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,116,114,108,109,122],
[116,0,116,137,93,98,122,89],
[109,94,0,118,104,102,75,117],
[94,73,92,0,77,69,68,72],
[96,117,106,133,0,119,86,113],
[102,112,108,141,91,0,88,114],
[101,88,135,142,124,122,0,101],
[88,121,93,138,97,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,121,108,104,102,109],
[104,0,118,111,114,98,105,109],
[88,92,0,109,91,96,107,105],
[89,99,101,0,91,91,93,96],
[102,96,119,119,0,111,98,116],
[106,112,114,119,99,0,95,118],
[108,105,103,117,112,115,0,106],
[101,101,105,114,94,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,99,119,108,103,114],
[96,0,108,101,104,114,111,105],
[106,102,0,92,105,102,114,102],
[111,109,118,0,109,96,87,101],
[91,106,105,101,0,106,83,97],
[102,96,108,114,104,0,84,102],
[107,99,96,123,127,126,0,119],
[96,105,108,109,113,108,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,92,112,86,111,88,92],
[133,0,113,145,136,87,130,157],
[118,97,0,144,98,97,106,129],
[98,65,66,0,94,71,102,126],
[124,74,112,116,0,120,112,130],
[99,123,113,139,90,0,95,127],
[122,80,104,108,98,115,0,114],
[118,53,81,84,80,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,105,106,114,98,108],
[110,0,100,99,115,108,105,104],
[113,110,0,104,104,125,100,113],
[105,111,106,0,119,115,103,106],
[104,95,106,91,0,106,103,103],
[96,102,85,95,104,0,97,102],
[112,105,110,107,107,113,0,109],
[102,106,97,104,107,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,103,98,103,97,101],
[107,0,108,111,104,111,100,107],
[101,102,0,95,94,103,102,100],
[107,99,115,0,104,106,89,94],
[112,106,116,106,0,121,99,103],
[107,99,107,104,89,0,97,97],
[113,110,108,121,111,113,0,104],
[109,103,110,116,107,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,103,119,113,113,101,92],
[79,0,113,104,92,91,106,103],
[107,97,0,92,103,97,111,106],
[91,106,118,0,89,101,76,95],
[97,118,107,121,0,99,97,83],
[97,119,113,109,111,0,108,90],
[109,104,99,134,113,102,0,91],
[118,107,104,115,127,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,104,111,111,107,110],
[99,0,104,97,101,98,96,95],
[109,106,0,109,104,107,107,109],
[106,113,101,0,99,108,101,105],
[99,109,106,111,0,113,104,115],
[99,112,103,102,97,0,106,103],
[103,114,103,109,106,104,0,109],
[100,115,101,105,95,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,94,99,115,100,100],
[104,0,106,84,100,92,92,112],
[110,104,0,92,95,124,104,111],
[116,126,118,0,99,117,106,118],
[111,110,115,111,0,121,105,110],
[95,118,86,93,89,0,90,108],
[110,118,106,104,105,120,0,118],
[110,98,99,92,100,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,108,102,111,109,130],
[98,0,101,100,106,109,106,119],
[102,109,0,112,103,106,109,120],
[102,110,98,0,103,112,106,123],
[108,104,107,107,0,107,109,120],
[99,101,104,98,103,0,113,119],
[101,104,101,104,101,97,0,110],
[80,91,90,87,90,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,117,100,97,115,104],
[102,0,107,103,98,100,107,97],
[99,103,0,94,102,99,108,95],
[93,107,116,0,100,114,113,102],
[110,112,108,110,0,104,111,105],
[113,110,111,96,106,0,115,98],
[95,103,102,97,99,95,0,92],
[106,113,115,108,105,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,95,82,90,112,101],
[118,0,119,113,107,100,135,100],
[107,91,0,106,105,102,123,96],
[115,97,104,0,124,111,144,109],
[128,103,105,86,0,133,152,97],
[120,110,108,99,77,0,107,98],
[98,75,87,66,58,103,0,83],
[109,110,114,101,113,112,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,90,99,96,101,88,100],
[119,0,98,99,100,111,99,109],
[120,112,0,107,115,107,101,120],
[111,111,103,0,98,97,103,110],
[114,110,95,112,0,94,94,100],
[109,99,103,113,116,0,88,106],
[122,111,109,107,116,122,0,101],
[110,101,90,100,110,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,123,116,102,116,107,114],
[114,0,111,115,111,122,105,112],
[87,99,0,94,102,98,97,103],
[94,95,116,0,108,104,106,119],
[108,99,108,102,0,112,93,109],
[94,88,112,106,98,0,91,100],
[103,105,113,104,117,119,0,123],
[96,98,107,91,101,110,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,103,109,104,105,114],
[96,0,108,113,104,101,109,108],
[106,102,0,99,103,95,104,115],
[107,97,111,0,100,104,111,106],
[101,106,107,110,0,103,111,113],
[106,109,115,106,107,0,114,102],
[105,101,106,99,99,96,0,102],
[96,102,95,104,97,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,104,103,107,122,106],
[103,0,111,97,106,114,114,113],
[89,99,0,79,81,79,89,87],
[106,113,131,0,100,124,124,115],
[107,104,129,110,0,110,118,107],
[103,96,131,86,100,0,115,93],
[88,96,121,86,92,95,0,97],
[104,97,123,95,103,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,99,119,107,99,100],
[109,0,116,112,116,115,104,107],
[106,94,0,110,98,101,101,103],
[111,98,100,0,116,104,101,103],
[91,94,112,94,0,106,104,98],
[103,95,109,106,104,0,107,99],
[111,106,109,109,106,103,0,108],
[110,103,107,107,112,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,97,94,104,95,92],
[106,0,96,94,91,90,84,84],
[94,114,0,93,88,96,85,87],
[113,116,117,0,111,109,95,105],
[116,119,122,99,0,106,83,93],
[106,120,114,101,104,0,97,94],
[115,126,125,115,127,113,0,99],
[118,126,123,105,117,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,104,94,111,115,106],
[122,0,112,116,107,121,113,101],
[102,98,0,107,100,120,101,107],
[106,94,103,0,114,117,116,114],
[116,103,110,96,0,125,110,114],
[99,89,90,93,85,0,93,107],
[95,97,109,94,100,117,0,96],
[104,109,103,96,96,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,124,106,107,103,102,101],
[104,0,112,89,102,100,115,97],
[86,98,0,97,102,95,88,106],
[104,121,113,0,109,112,119,110],
[103,108,108,101,0,101,113,111],
[107,110,115,98,109,0,116,100],
[108,95,122,91,97,94,0,88],
[109,113,104,100,99,110,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,109,113,111,98,107],
[98,0,97,100,99,100,91,89],
[102,113,0,104,117,119,104,109],
[101,110,106,0,104,108,98,101],
[97,111,93,106,0,109,95,88],
[99,110,91,102,101,0,93,85],
[112,119,106,112,115,117,0,105],
[103,121,101,109,122,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,117,101,105,115,89,105],
[128,0,118,111,110,124,105,118],
[93,92,0,102,98,111,82,106],
[109,99,108,0,110,94,99,93],
[105,100,112,100,0,117,100,94],
[95,86,99,116,93,0,93,99],
[121,105,128,111,110,117,0,108],
[105,92,104,117,116,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,89,101,111,96,104,88],
[122,0,110,104,107,114,117,105],
[121,100,0,113,116,100,115,107],
[109,106,97,0,102,118,111,97],
[99,103,94,108,0,107,102,95],
[114,96,110,92,103,0,104,99],
[106,93,95,99,108,106,0,87],
[122,105,103,113,115,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,100,106,115,109,111],
[106,0,105,105,112,101,105,112],
[115,105,0,116,112,108,102,116],
[110,105,94,0,107,99,100,111],
[104,98,98,103,0,99,98,104],
[95,109,102,111,111,0,105,118],
[101,105,108,110,112,105,0,106],
[99,98,94,99,106,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,120,95,119,117,121,99],
[72,0,77,105,106,97,90,82],
[90,133,0,116,97,128,122,127],
[115,105,94,0,132,98,114,112],
[91,104,113,78,0,89,107,106],
[93,113,82,112,121,0,105,109],
[89,120,88,96,103,105,0,102],
[111,128,83,98,104,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,138,92,122,121,108],
[104,0,132,99,106,110,100,111],
[90,78,0,122,84,95,110,124],
[72,111,88,0,90,116,92,111],
[118,104,126,120,0,107,131,127],
[88,100,115,94,103,0,97,101],
[89,110,100,118,79,113,0,104],
[102,99,86,99,83,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,109,106,107,95,90],
[98,0,106,95,101,84,95,82],
[85,104,0,85,93,84,91,71],
[101,115,125,0,102,85,89,93],
[104,109,117,108,0,108,95,107],
[103,126,126,125,102,0,111,106],
[115,115,119,121,115,99,0,97],
[120,128,139,117,103,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,96,90,87,73,116],
[110,0,72,84,74,108,120,126],
[95,138,0,109,101,105,116,109],
[114,126,101,0,103,127,116,134],
[120,136,109,107,0,94,97,124],
[123,102,105,83,116,0,86,108],
[137,90,94,94,113,124,0,130],
[94,84,101,76,86,102,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,72,107,72,36,72,139],
[103,0,139,174,72,36,72,139],
[138,71,0,107,107,107,143,210],
[103,36,103,0,36,36,72,139],
[138,138,103,174,0,103,103,174],
[174,174,103,174,107,0,139,210],
[138,138,67,138,107,71,0,174],
[71,71,0,71,36,0,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,102,94,105,106,103,101],
[131,0,114,111,123,112,103,118],
[108,96,0,114,120,120,102,95],
[116,99,96,0,122,105,101,106],
[105,87,90,88,0,88,94,101],
[104,98,90,105,122,0,101,94],
[107,107,108,109,116,109,0,97],
[109,92,115,104,109,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,92,93,103,107,116],
[97,0,108,106,108,105,108,112],
[100,102,0,109,105,118,106,116],
[118,104,101,0,106,117,104,119],
[117,102,105,104,0,115,110,108],
[107,105,92,93,95,0,105,113],
[103,102,104,106,100,105,0,112],
[94,98,94,91,102,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,99,96,117,114,116],
[101,0,100,107,115,107,98,114],
[111,110,0,105,105,109,124,104],
[111,103,105,0,85,103,102,107],
[114,95,105,125,0,120,117,113],
[93,103,101,107,90,0,103,109],
[96,112,86,108,93,107,0,118],
[94,96,106,103,97,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,112,103,111,111,117],
[117,0,105,108,109,109,118,119],
[104,105,0,109,104,98,105,107],
[98,102,101,0,107,96,104,112],
[107,101,106,103,0,98,107,114],
[99,101,112,114,112,0,113,110],
[99,92,105,106,103,97,0,105],
[93,91,103,98,96,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,97,93,109,102,100],
[104,0,108,110,108,106,106,90],
[94,102,0,110,96,94,108,111],
[113,100,100,0,90,108,97,91],
[117,102,114,120,0,103,103,103],
[101,104,116,102,107,0,101,109],
[108,104,102,113,107,109,0,94],
[110,120,99,119,107,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,84,97,87,89,100,91],
[111,0,93,95,101,98,103,95],
[126,117,0,99,100,93,120,102],
[113,115,111,0,115,101,115,111],
[123,109,110,95,0,111,117,98],
[121,112,117,109,99,0,121,105],
[110,107,90,95,93,89,0,91],
[119,115,108,99,112,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,107,108,98,123,108],
[104,0,107,87,99,91,107,108],
[98,103,0,109,96,117,115,109],
[103,123,101,0,104,110,122,111],
[102,111,114,106,0,101,116,104],
[112,119,93,100,109,0,122,112],
[87,103,95,88,94,88,0,95],
[102,102,101,99,106,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,88,77,108,96,62,71],
[133,0,112,86,115,135,130,117],
[122,98,0,78,148,129,111,106],
[133,124,132,0,142,140,71,132],
[102,95,62,68,0,87,78,65],
[114,75,81,70,123,0,123,79],
[148,80,99,139,132,87,0,132],
[139,93,104,78,145,131,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,98,109,108,97,113],
[111,0,97,102,98,107,108,114],
[116,113,0,99,102,109,113,118],
[112,108,111,0,98,107,100,113],
[101,112,108,112,0,106,115,114],
[102,103,101,103,104,0,111,108],
[113,102,97,110,95,99,0,110],
[97,96,92,97,96,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,98,104,99,114,111],
[109,0,97,96,105,105,111,119],
[113,113,0,98,113,113,112,135],
[112,114,112,0,119,102,112,127],
[106,105,97,91,0,101,121,119],
[111,105,97,108,109,0,115,127],
[96,99,98,98,89,95,0,114],
[99,91,75,83,91,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,90,99,88,84,97,117],
[114,0,101,108,109,107,124,117],
[120,109,0,122,104,103,115,121],
[111,102,88,0,95,95,130,131],
[122,101,106,115,0,94,98,110],
[126,103,107,115,116,0,123,113],
[113,86,95,80,112,87,0,118],
[93,93,89,79,100,97,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,91,98,99,95,97,103],
[121,0,105,110,109,107,110,98],
[119,105,0,116,116,108,106,106],
[112,100,94,0,104,108,104,92],
[111,101,94,106,0,116,101,103],
[115,103,102,102,94,0,100,98],
[113,100,104,106,109,110,0,112],
[107,112,104,118,107,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,122,113,111,123,124,111],
[123,0,93,75,83,109,106,118],
[88,117,0,91,94,105,118,95],
[97,135,119,0,112,94,118,117],
[99,127,116,98,0,118,106,124],
[87,101,105,116,92,0,128,104],
[86,104,92,92,104,82,0,87],
[99,92,115,93,86,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,108,99,122,113,119,109],
[79,0,106,107,100,99,90,85],
[102,104,0,115,124,97,125,103],
[111,103,95,0,103,105,116,113],
[88,110,86,107,0,101,110,101],
[97,111,113,105,109,0,117,101],
[91,120,85,94,100,93,0,109],
[101,125,107,97,109,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,99,108,111,84,105,99],
[132,0,117,119,108,111,99,94],
[111,93,0,113,102,96,97,102],
[102,91,97,0,95,64,107,77],
[99,102,108,115,0,91,112,109],
[126,99,114,146,119,0,140,127],
[105,111,113,103,98,70,0,97],
[111,116,108,133,101,83,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,102,109,69,76,122,148],
[74,0,123,108,90,105,122,107],
[108,87,0,157,55,88,156,122],
[101,102,53,0,51,66,118,56],
[141,120,155,159,0,101,122,127],
[134,105,122,144,109,0,164,112],
[88,88,54,92,88,46,0,94],
[62,103,88,154,83,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,105,112,117,110,113],
[102,0,124,108,111,110,116,124],
[93,86,0,111,102,97,97,100],
[105,102,99,0,102,104,98,107],
[98,99,108,108,0,110,122,111],
[93,100,113,106,100,0,112,104],
[100,94,113,112,88,98,0,107],
[97,86,110,103,99,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,104,100,108,88,116],
[109,0,114,114,109,110,105,125],
[106,96,0,99,106,98,111,109],
[106,96,111,0,105,104,105,92],
[110,101,104,105,0,107,95,107],
[102,100,112,106,103,0,101,100],
[122,105,99,105,115,109,0,109],
[94,85,101,118,103,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,86,100,104,95,91,91],
[118,0,104,104,111,108,107,103],
[124,106,0,114,112,106,103,107],
[110,106,96,0,95,107,100,102],
[106,99,98,115,0,108,98,101],
[115,102,104,103,102,0,99,103],
[119,103,107,110,112,111,0,109],
[119,107,103,108,109,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,106,110,85,84,93],
[113,0,98,105,117,108,109,126],
[98,112,0,104,123,93,93,102],
[104,105,106,0,117,98,97,106],
[100,93,87,93,0,93,95,97],
[125,102,117,112,117,0,87,106],
[126,101,117,113,115,123,0,112],
[117,84,108,104,113,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,95,105,101,93,98],
[104,0,92,90,92,104,90,100],
[112,118,0,97,98,104,102,100],
[115,120,113,0,103,103,98,102],
[105,118,112,107,0,117,111,109],
[109,106,106,107,93,0,103,98],
[117,120,108,112,99,107,0,106],
[112,110,110,108,101,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,98,104,102,111,107],
[109,0,97,105,106,98,107,113],
[100,113,0,103,95,101,108,112],
[112,105,107,0,105,98,123,119],
[106,104,115,105,0,110,115,109],
[108,112,109,112,100,0,114,117],
[99,103,102,87,95,96,0,94],
[103,97,98,91,101,93,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,114,129,122,111,105],
[103,0,106,119,108,106,105,102],
[94,104,0,91,97,99,108,105],
[96,91,119,0,93,116,115,97],
[81,102,113,117,0,104,124,111],
[88,104,111,94,106,0,118,105],
[99,105,102,95,86,92,0,110],
[105,108,105,113,99,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,118,117,132,101,110],
[111,0,122,135,119,111,114,98],
[113,88,0,89,91,132,116,114],
[92,75,121,0,104,84,124,96],
[93,91,119,106,0,109,121,99],
[78,99,78,126,101,0,71,104],
[109,96,94,86,89,139,0,107],
[100,112,96,114,111,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,115,112,109,110,119],
[91,0,106,117,85,109,99,106],
[108,104,0,122,90,119,101,109],
[95,93,88,0,78,105,101,91],
[98,125,120,132,0,114,116,117],
[101,101,91,105,96,0,82,96],
[100,111,109,109,94,128,0,100],
[91,104,101,119,93,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,108,113,98,108,101],
[101,0,99,98,97,88,114,98],
[105,111,0,111,120,97,115,107],
[102,112,99,0,105,87,114,103],
[97,113,90,105,0,90,101,96],
[112,122,113,123,120,0,117,101],
[102,96,95,96,109,93,0,96],
[109,112,103,107,114,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,84,92,127,113,101,102],
[120,0,115,98,100,105,80,96],
[126,95,0,90,85,90,110,101],
[118,112,120,0,121,133,81,113],
[83,110,125,89,0,109,94,99],
[97,105,120,77,101,0,117,95],
[109,130,100,129,116,93,0,115],
[108,114,109,97,111,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,88,83,92,110,101,84],
[97,0,95,97,92,94,95,84],
[122,115,0,102,94,116,109,105],
[127,113,108,0,109,115,110,101],
[118,118,116,101,0,115,111,94],
[100,116,94,95,95,0,106,90],
[109,115,101,100,99,104,0,89],
[126,126,105,109,116,120,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,92,88,113,88,95],
[109,0,117,104,111,117,108,107],
[107,93,0,91,101,116,92,100],
[118,106,119,0,114,129,104,107],
[122,99,109,96,0,128,111,116],
[97,93,94,81,82,0,99,97],
[122,102,118,106,99,111,0,112],
[115,103,110,103,94,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,104,94,109,94,104],
[110,0,102,107,107,113,98,103],
[112,108,0,107,101,107,90,98],
[106,103,103,0,94,95,99,102],
[116,103,109,116,0,109,109,108],
[101,97,103,115,101,0,100,108],
[116,112,120,111,101,110,0,117],
[106,107,112,108,102,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,94,92,101,100,98,97],
[125,0,100,106,98,120,124,112],
[116,110,0,113,99,114,113,99],
[118,104,97,0,106,121,105,103],
[109,112,111,104,0,105,111,93],
[110,90,96,89,105,0,93,92],
[112,86,97,105,99,117,0,90],
[113,98,111,107,117,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,115,103,113,105,106],
[109,0,105,120,112,110,105,114],
[106,105,0,118,111,103,104,111],
[95,90,92,0,102,97,101,94],
[107,98,99,108,0,104,106,89],
[97,100,107,113,106,0,104,99],
[105,105,106,109,104,106,0,95],
[104,96,99,116,121,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,109,92,90,85,113],
[113,0,121,123,104,98,107,136],
[110,89,0,115,105,86,96,137],
[101,87,95,0,72,90,99,119],
[118,106,105,138,0,104,99,124],
[120,112,124,120,106,0,104,129],
[125,103,114,111,111,106,0,126],
[97,74,73,91,86,81,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,118,120,117,104,123],
[102,0,105,114,110,115,102,107],
[104,105,0,103,103,112,110,112],
[92,96,107,0,115,116,112,110],
[90,100,107,95,0,105,105,103],
[93,95,98,94,105,0,106,100],
[106,108,100,98,105,104,0,106],
[87,103,98,100,107,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,100,119,106,99,96],
[95,0,104,107,108,93,105,107],
[107,106,0,119,116,102,118,112],
[110,103,91,0,118,96,102,108],
[91,102,94,92,0,98,95,94],
[104,117,108,114,112,0,113,103],
[111,105,92,108,115,97,0,101],
[114,103,98,102,116,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,113,118,121,118,99],
[100,0,128,109,101,119,98,100],
[89,82,0,100,90,99,92,77],
[97,101,110,0,93,119,96,93],
[92,109,120,117,0,121,109,108],
[89,91,111,91,89,0,101,112],
[92,112,118,114,101,109,0,99],
[111,110,133,117,102,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,82,91,68,105,57,110],
[118,0,97,116,131,130,103,133],
[128,113,0,116,91,107,92,104],
[119,94,94,0,140,101,55,106],
[142,79,119,70,0,111,70,114],
[105,80,103,109,99,0,109,90],
[153,107,118,155,140,101,0,145],
[100,77,106,104,96,120,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,116,129,86,103,97],
[113,0,116,108,105,117,101,98],
[95,94,0,94,102,101,106,94],
[94,102,116,0,112,100,106,116],
[81,105,108,98,0,85,113,117],
[124,93,109,110,125,0,104,105],
[107,109,104,104,97,106,0,120],
[113,112,116,94,93,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,104,120,114,120,107],
[103,0,119,105,110,116,100,112],
[87,91,0,91,100,90,98,100],
[106,105,119,0,123,104,123,111],
[90,100,110,87,0,95,110,104],
[96,94,120,106,115,0,104,99],
[90,110,112,87,100,106,0,100],
[103,98,110,99,106,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,99,97,92,83,112],
[102,0,92,90,97,93,88,107],
[112,118,0,109,106,108,106,104],
[111,120,101,0,93,88,98,114],
[113,113,104,117,0,114,112,128],
[118,117,102,122,96,0,110,128],
[127,122,104,112,98,100,0,119],
[98,103,106,96,82,82,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,168,171,140,134,93,170],
[80,0,126,97,79,85,120,149],
[42,84,0,83,118,118,86,103],
[39,113,127,0,97,105,92,77],
[70,131,92,113,0,127,93,116],
[76,125,92,105,83,0,77,123],
[117,90,124,118,117,133,0,133],
[40,61,107,133,94,87,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,158,112,94,130,116,136],
[96,0,173,97,80,134,146,136],
[52,37,0,90,70,77,86,108],
[98,113,120,0,60,81,88,72],
[116,130,140,150,0,131,104,109],
[80,76,133,129,79,0,81,106],
[94,64,124,122,106,129,0,147],
[74,74,102,138,101,104,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,98,122,107,88,121],
[82,0,124,75,108,97,67,106],
[97,86,0,73,129,97,61,95],
[112,135,137,0,134,103,108,106],
[88,102,81,76,0,97,87,110],
[103,113,113,107,113,0,77,102],
[122,143,149,102,123,133,0,117],
[89,104,115,104,100,108,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,94,102,110,104,119,119],
[97,0,97,100,99,107,114,113],
[116,113,0,105,119,111,114,115],
[108,110,105,0,111,105,118,111],
[100,111,91,99,0,96,112,109],
[106,103,99,105,114,0,104,108],
[91,96,96,92,98,106,0,104],
[91,97,95,99,101,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,118,113,105,103,117],
[95,0,111,103,113,98,94,103],
[102,99,0,100,105,97,94,105],
[92,107,110,0,99,90,106,101],
[97,97,105,111,0,89,85,103],
[105,112,113,120,121,0,103,110],
[107,116,116,104,125,107,0,123],
[93,107,105,109,107,100,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,105,105,109,105,119],
[102,0,117,109,109,108,110,113],
[94,93,0,100,100,101,103,105],
[105,101,110,0,98,101,103,107],
[105,101,110,112,0,112,106,110],
[101,102,109,109,98,0,101,109],
[105,100,107,107,104,109,0,116],
[91,97,105,103,100,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,113,100,102,97,103],
[110,0,110,116,107,119,102,99],
[98,100,0,108,91,101,108,96],
[97,94,102,0,91,103,96,100],
[110,103,119,119,0,110,111,102],
[108,91,109,107,100,0,104,99],
[113,108,102,114,99,106,0,105],
[107,111,114,110,108,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,113,107,114,116,113],
[109,0,105,111,92,113,114,120],
[118,105,0,121,115,128,120,123],
[97,99,89,0,101,105,95,100],
[103,118,95,109,0,109,106,105],
[96,97,82,105,101,0,101,100],
[94,96,90,115,104,109,0,116],
[97,90,87,110,105,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,91,112,87,107,104],
[107,0,119,98,112,94,116,111],
[108,91,0,83,112,91,110,98],
[119,112,127,0,133,98,123,117],
[98,98,98,77,0,95,95,93],
[123,116,119,112,115,0,124,102],
[103,94,100,87,115,86,0,87],
[106,99,112,93,117,108,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,112,104,107,112,104],
[108,0,105,106,124,111,110,112],
[99,105,0,110,99,104,119,106],
[98,104,100,0,107,132,110,121],
[106,86,111,103,0,99,89,103],
[103,99,106,78,111,0,108,106],
[98,100,91,100,121,102,0,108],
[106,98,104,89,107,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,115,71,83,89,89,79],
[130,0,101,97,98,81,87,101],
[95,109,0,92,107,90,83,108],
[139,113,118,0,111,95,105,103],
[127,112,103,99,0,105,123,121],
[121,129,120,115,105,0,123,115],
[121,123,127,105,87,87,0,108],
[131,109,102,107,89,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,105,116,135,104,137,121],
[66,0,72,64,76,77,116,86],
[105,138,0,91,127,102,130,122],
[94,146,119,0,131,106,156,110],
[75,134,83,79,0,105,133,75],
[106,133,108,104,105,0,140,129],
[73,94,80,54,77,70,0,100],
[89,124,88,100,135,81,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,99,102,106,92,92],
[116,0,102,111,118,115,112,99],
[100,108,0,97,103,99,92,96],
[111,99,113,0,115,104,116,107],
[108,92,107,95,0,106,106,88],
[104,95,111,106,104,0,107,97],
[118,98,118,94,104,103,0,103],
[118,111,114,103,122,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,111,130,113,129,93],
[103,0,113,117,127,121,104,108],
[94,97,0,92,113,105,89,88],
[99,93,118,0,116,101,100,98],
[80,83,97,94,0,99,104,89],
[97,89,105,109,111,0,104,95],
[81,106,121,110,106,106,0,101],
[117,102,122,112,121,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,112,103,138,131,111,138],
[67,0,100,96,120,105,92,98],
[98,110,0,133,141,120,113,113],
[107,114,77,0,127,128,93,134],
[72,90,69,83,0,110,124,104],
[79,105,90,82,100,0,110,93],
[99,118,97,117,86,100,0,117],
[72,112,97,76,106,117,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,117,112,114,101,117],
[105,0,94,122,116,119,116,120],
[111,116,0,126,107,118,99,111],
[93,88,84,0,92,106,89,93],
[98,94,103,118,0,114,115,109],
[96,91,92,104,96,0,98,101],
[109,94,111,121,95,112,0,121],
[93,90,99,117,101,109,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,115,94,102,98,100],
[115,0,108,108,90,109,108,103],
[113,102,0,111,94,101,109,98],
[95,102,99,0,87,96,102,97],
[116,120,116,123,0,111,111,104],
[108,101,109,114,99,0,114,110],
[112,102,101,108,99,96,0,100],
[110,107,112,113,106,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,98,83,104,105,89],
[109,0,110,115,98,112,132,109],
[97,100,0,104,95,110,117,109],
[112,95,106,0,111,118,123,107],
[127,112,115,99,0,122,116,100],
[106,98,100,92,88,0,105,85],
[105,78,93,87,94,105,0,74],
[121,101,101,103,110,125,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,89,88,90,102,87],
[96,0,94,102,84,78,86,86],
[116,116,0,124,94,95,109,102],
[121,108,86,0,83,91,93,84],
[122,126,116,127,0,113,100,112],
[120,132,115,119,97,0,110,110],
[108,124,101,117,110,100,0,116],
[123,124,108,126,98,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,82,136,107,126,121,122],
[61,0,78,97,79,87,87,58],
[128,132,0,119,102,105,102,101],
[74,113,91,0,88,98,101,92],
[103,131,108,122,0,115,114,121],
[84,123,105,112,95,0,106,97],
[89,123,108,109,96,104,0,65],
[88,152,109,118,89,113,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,98,117,100,102,92,102],
[124,0,94,114,94,102,106,116],
[112,116,0,97,94,117,104,127],
[93,96,113,0,87,94,89,87],
[110,116,116,123,0,99,107,113],
[108,108,93,116,111,0,96,120],
[118,104,106,121,103,114,0,124],
[108,94,83,123,97,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,105,93,121,87,82],
[115,0,99,104,104,126,97,90],
[105,111,0,112,116,118,99,98],
[105,106,98,0,95,117,102,89],
[117,106,94,115,0,124,104,108],
[89,84,92,93,86,0,71,86],
[123,113,111,108,106,139,0,101],
[128,120,112,121,102,124,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,121,116,109,122,114,117],
[113,0,116,98,104,115,102,111],
[89,94,0,101,102,96,98,96],
[94,112,109,0,100,101,108,112],
[101,106,108,110,0,116,100,120],
[88,95,114,109,94,0,104,106],
[96,108,112,102,110,106,0,98],
[93,99,114,98,90,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,100,98,107,106,116],
[105,0,100,98,95,113,119,106],
[108,110,0,99,105,117,115,112],
[110,112,111,0,103,109,115,125],
[112,115,105,107,0,110,121,109],
[103,97,93,101,100,0,112,106],
[104,91,95,95,89,98,0,96],
[94,104,98,85,101,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,106,116,96,105,97],
[118,0,108,119,124,103,117,108],
[106,102,0,115,112,110,110,97],
[104,91,95,0,110,106,102,92],
[94,86,98,100,0,95,104,93],
[114,107,100,104,115,0,109,101],
[105,93,100,108,106,101,0,97],
[113,102,113,118,117,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,110,99,99,91,95],
[109,0,110,113,90,99,94,99],
[103,100,0,110,98,92,101,99],
[100,97,100,0,92,93,93,101],
[111,120,112,118,0,99,110,110],
[111,111,118,117,111,0,105,104],
[119,116,109,117,100,105,0,107],
[115,111,111,109,100,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,98,115,114,109,106],
[97,0,113,100,109,114,106,98],
[97,97,0,92,109,99,98,99],
[112,110,118,0,124,117,110,103],
[95,101,101,86,0,110,98,100],
[96,96,111,93,100,0,105,102],
[101,104,112,100,112,105,0,102],
[104,112,111,107,110,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,105,114,111,123,139],
[91,0,91,98,108,111,104,109],
[105,119,0,112,100,112,112,116],
[105,112,98,0,108,129,112,119],
[96,102,110,102,0,132,109,113],
[99,99,98,81,78,0,116,106],
[87,106,98,98,101,94,0,97],
[71,101,94,91,97,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,110,101,104,105,104],
[104,0,113,100,105,97,106,109],
[99,97,0,104,98,105,105,111],
[100,110,106,0,109,110,111,110],
[109,105,112,101,0,117,100,118],
[106,113,105,100,93,0,100,113],
[105,104,105,99,110,110,0,106],
[106,101,99,100,92,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,111,116,109,105,108],
[114,0,102,113,120,116,106,109],
[100,108,0,109,113,113,114,105],
[99,97,101,0,104,116,117,95],
[94,90,97,106,0,98,101,92],
[101,94,97,94,112,0,105,92],
[105,104,96,93,109,105,0,93],
[102,101,105,115,118,118,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,94,95,110,113,112],
[106,0,88,102,103,112,114,112],
[116,122,0,114,105,113,115,118],
[116,108,96,0,113,121,110,115],
[115,107,105,97,0,116,109,119],
[100,98,97,89,94,0,93,107],
[97,96,95,100,101,117,0,110],
[98,98,92,95,91,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,113,106,109,110,110],
[103,0,107,112,101,103,100,105],
[120,103,0,110,117,108,118,122],
[97,98,100,0,98,91,105,111],
[104,109,93,112,0,97,116,119],
[101,107,102,119,113,0,106,114],
[100,110,92,105,94,104,0,109],
[100,105,88,99,91,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,113,126,115,105,105],
[94,0,113,107,114,111,108,99],
[108,97,0,101,103,102,99,97],
[97,103,109,0,107,108,105,90],
[84,96,107,103,0,96,95,82],
[95,99,108,102,114,0,95,95],
[105,102,111,105,115,115,0,95],
[105,111,113,120,128,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,94,123,97,112,126],
[97,0,95,108,103,105,101,117],
[105,115,0,116,115,120,114,126],
[116,102,94,0,124,94,114,108],
[87,107,95,86,0,90,100,111],
[113,105,90,116,120,0,107,114],
[98,109,96,96,110,103,0,106],
[84,93,84,102,99,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,140,73,81,92,128,105],
[96,0,50,70,138,74,104,97],
[70,160,0,53,101,79,159,54],
[137,140,157,0,139,133,145,80],
[129,72,109,71,0,66,137,72],
[118,136,131,77,144,0,166,118],
[82,106,51,65,73,44,0,79],
[105,113,156,130,138,92,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,106,104,109,117,109],
[96,0,100,101,103,104,103,90],
[93,110,0,103,112,109,102,95],
[104,109,107,0,99,100,113,105],
[106,107,98,111,0,108,101,102],
[101,106,101,110,102,0,101,97],
[93,107,108,97,109,109,0,96],
[101,120,115,105,108,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,110,118,97,98,103],
[104,0,99,106,111,109,95,104],
[104,111,0,110,119,107,108,112],
[100,104,100,0,119,103,97,103],
[92,99,91,91,0,97,87,100],
[113,101,103,107,113,0,97,96],
[112,115,102,113,123,113,0,110],
[107,106,98,107,110,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,122,148,96,107,171,119],
[62,0,76,146,84,92,131,46],
[88,134,0,145,112,85,119,66],
[62,64,65,0,98,94,120,47],
[114,126,98,112,0,87,136,74],
[103,118,125,116,123,0,120,71],
[39,79,91,90,74,90,0,57],
[91,164,144,163,136,139,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,112,107,103,100,90],
[101,0,111,116,104,112,94,108],
[111,99,0,110,97,102,96,93],
[98,94,100,0,105,104,86,93],
[103,106,113,105,0,109,91,96],
[107,98,108,106,101,0,88,105],
[110,116,114,124,119,122,0,96],
[120,102,117,117,114,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,101,103,97,106,109],
[101,0,94,100,110,106,104,112],
[108,116,0,109,106,103,111,126],
[109,110,101,0,99,113,110,120],
[107,100,104,111,0,101,99,108],
[113,104,107,97,109,0,107,104],
[104,106,99,100,111,103,0,114],
[101,98,84,90,102,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,106,105,108,102,108],
[95,0,98,108,106,105,88,99],
[96,112,0,109,108,95,103,106],
[104,102,101,0,110,104,100,101],
[105,104,102,100,0,100,107,104],
[102,105,115,106,110,0,106,109],
[108,122,107,110,103,104,0,109],
[102,111,104,109,106,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,94,105,98,94,89,100],
[86,0,85,98,102,100,89,89],
[116,125,0,96,119,97,109,97],
[105,112,114,0,114,101,95,107],
[112,108,91,96,0,96,89,94],
[116,110,113,109,114,0,95,106],
[121,121,101,115,121,115,0,104],
[110,121,113,103,116,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,86,109,103,96,103,98],
[93,0,83,97,105,94,95,93],
[124,127,0,126,112,102,121,131],
[101,113,84,0,105,108,103,110],
[107,105,98,105,0,107,106,106],
[114,116,108,102,103,0,101,113],
[107,115,89,107,104,109,0,97],
[112,117,79,100,104,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,114,120,117,111,115],
[94,0,98,108,108,97,96,104],
[107,112,0,103,109,106,111,117],
[96,102,107,0,103,98,104,109],
[90,102,101,107,0,91,101,97],
[93,113,104,112,119,0,116,112],
[99,114,99,106,109,94,0,109],
[95,106,93,101,113,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,94,108,101,108,114],
[113,0,110,120,132,105,100,119],
[110,100,0,101,116,110,105,102],
[116,90,109,0,112,99,105,114],
[102,78,94,98,0,97,91,104],
[109,105,100,111,113,0,98,95],
[102,110,105,105,119,112,0,111],
[96,91,108,96,106,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,112,111,95,101,100],
[118,0,102,117,109,102,103,99],
[109,108,0,114,107,102,104,113],
[98,93,96,0,112,88,98,99],
[99,101,103,98,0,102,107,104],
[115,108,108,122,108,0,113,101],
[109,107,106,112,103,97,0,101],
[110,111,97,111,106,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,128,127,94,129,117,100],
[83,0,155,90,120,83,116,100],
[82,55,0,72,50,81,60,83],
[83,120,138,0,130,113,137,125],
[116,90,160,80,0,104,113,125],
[81,127,129,97,106,0,125,113],
[93,94,150,73,97,85,0,97],
[110,110,127,85,85,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,138,119,130,137,113],
[106,0,124,157,137,133,131,100],
[102,86,0,132,124,107,99,103],
[72,53,78,0,72,71,91,74],
[91,73,86,138,0,91,85,75],
[80,77,103,139,119,0,116,106],
[73,79,111,119,125,94,0,84],
[97,110,107,136,135,104,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,103,94,107,96,104],
[119,0,106,109,107,111,103,107],
[119,104,0,108,103,100,107,103],
[107,101,102,0,104,120,106,120],
[116,103,107,106,0,114,111,113],
[103,99,110,90,96,0,105,113],
[114,107,103,104,99,105,0,100],
[106,103,107,90,97,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,112,96,91,94,91],
[95,0,110,104,89,100,111,90],
[108,100,0,119,115,114,111,109],
[98,106,91,0,86,100,97,71],
[114,121,95,124,0,123,113,94],
[119,110,96,110,87,0,118,97],
[116,99,99,113,97,92,0,77],
[119,120,101,139,116,113,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,110,103,114,107,114],
[97,0,106,93,100,101,90,109],
[105,104,0,88,95,99,101,107],
[100,117,122,0,117,108,124,109],
[107,110,115,93,0,113,114,120],
[96,109,111,102,97,0,105,109],
[103,120,109,86,96,105,0,117],
[96,101,103,101,90,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,109,117,102,98,105],
[108,0,98,116,106,101,97,101],
[98,112,0,104,105,93,103,101],
[101,94,106,0,91,90,100,94],
[93,104,105,119,0,95,107,104],
[108,109,117,120,115,0,108,100],
[112,113,107,110,103,102,0,110],
[105,109,109,116,106,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,97,116,98,76,106],
[100,0,131,103,112,119,82,92],
[104,79,0,94,77,89,76,98],
[113,107,116,0,110,113,91,98],
[94,98,133,100,0,112,110,110],
[112,91,121,97,98,0,85,110],
[134,128,134,119,100,125,0,124],
[104,118,112,112,100,100,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,102,114,107,112,113],
[98,0,117,104,108,100,101,115],
[104,93,0,92,109,94,96,95],
[108,106,118,0,112,102,107,105],
[96,102,101,98,0,102,96,108],
[103,110,116,108,108,0,107,97],
[98,109,114,103,114,103,0,108],
[97,95,115,105,102,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,100,101,99,109,96],
[104,0,118,99,100,87,93,102],
[88,92,0,85,89,93,84,99],
[110,111,125,0,103,122,110,124],
[109,110,121,107,0,105,116,112],
[111,123,117,88,105,0,102,112],
[101,117,126,100,94,108,0,107],
[114,108,111,86,98,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,103,119,95,107,96,120],
[124,0,87,108,81,96,101,109],
[107,123,0,128,84,123,90,78],
[91,102,82,0,78,89,100,92],
[115,129,126,132,0,134,92,129],
[103,114,87,121,76,0,95,98],
[114,109,120,110,118,115,0,92],
[90,101,132,118,81,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,106,113,111,102,108],
[114,0,104,104,116,123,122,107],
[106,106,0,113,108,101,110,103],
[104,106,97,0,106,108,95,109],
[97,94,102,104,0,111,118,100],
[99,87,109,102,99,0,91,98],
[108,88,100,115,92,119,0,112],
[102,103,107,101,110,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,106,106,103,109,103],
[104,0,120,106,89,100,100,94],
[97,90,0,110,92,97,98,95],
[104,104,100,0,92,105,93,101],
[104,121,118,118,0,111,113,103],
[107,110,113,105,99,0,105,109],
[101,110,112,117,97,105,0,110],
[107,116,115,109,107,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,128,109,121,129,113,115],
[106,0,120,105,108,127,102,112],
[82,90,0,95,88,103,97,77],
[101,105,115,0,121,116,99,104],
[89,102,122,89,0,112,95,96],
[81,83,107,94,98,0,77,94],
[97,108,113,111,115,133,0,103],
[95,98,133,106,114,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,120,111,128,107,108,107],
[112,0,123,108,126,105,123,110],
[90,87,0,108,117,110,109,121],
[99,102,102,0,105,108,101,115],
[82,84,93,105,0,101,98,106],
[103,105,100,102,109,0,94,102],
[102,87,101,109,112,116,0,106],
[103,100,89,95,104,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,104,127,113,111,130],
[116,0,104,107,128,99,112,141],
[111,106,0,97,107,93,98,111],
[106,103,113,0,110,89,96,150],
[83,82,103,100,0,76,78,102],
[97,111,117,121,134,0,91,130],
[99,98,112,114,132,119,0,113],
[80,69,99,60,108,80,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,98,120,120,111,105,124],
[84,0,99,97,97,97,87,97],
[112,111,0,113,106,106,107,102],
[90,113,97,0,111,100,95,100],
[90,113,104,99,0,104,98,98],
[99,113,104,110,106,0,88,109],
[105,123,103,115,112,122,0,118],
[86,113,108,110,112,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,108,124,121,115,112],
[91,0,87,103,106,120,105,106],
[109,123,0,97,109,133,120,107],
[102,107,113,0,120,123,121,108],
[86,104,101,90,0,104,106,96],
[89,90,77,87,106,0,107,101],
[95,105,90,89,104,103,0,105],
[98,104,103,102,114,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,98,104,102,98,103],
[105,0,107,108,99,96,109,104],
[102,103,0,112,93,99,109,123],
[112,102,98,0,104,89,103,109],
[106,111,117,106,0,99,98,123],
[108,114,111,121,111,0,92,117],
[112,101,101,107,112,118,0,115],
[107,106,87,101,87,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,95,113,101,76,83],
[121,0,106,117,103,111,106,124],
[114,104,0,122,115,110,78,109],
[115,93,88,0,115,87,82,99],
[97,107,95,95,0,105,84,90],
[109,99,100,123,105,0,110,115],
[134,104,132,128,126,100,0,116],
[127,86,101,111,120,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,134,117,113,145,98,129],
[85,0,125,96,116,118,91,113],
[76,85,0,84,101,114,96,111],
[93,114,126,0,119,121,127,126],
[97,94,109,91,0,101,123,122],
[65,92,96,89,109,0,97,112],
[112,119,114,83,87,113,0,124],
[81,97,99,84,88,98,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,110,108,117,104,119],
[95,0,96,98,104,109,101,110],
[106,114,0,114,106,119,104,117],
[100,112,96,0,107,115,102,120],
[102,106,104,103,0,115,106,115],
[93,101,91,95,95,0,88,109],
[106,109,106,108,104,122,0,109],
[91,100,93,90,95,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,100,101,110,109,114],
[102,0,113,97,99,102,108,113],
[109,97,0,105,102,100,97,109],
[110,113,105,0,97,103,117,114],
[109,111,108,113,0,105,106,112],
[100,108,110,107,105,0,97,116],
[101,102,113,93,104,113,0,108],
[96,97,101,96,98,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,131,124,108,116,115],
[100,0,111,131,116,111,112,95],
[107,99,0,127,118,124,115,99],
[79,79,83,0,99,84,100,63],
[86,94,92,111,0,115,107,97],
[102,99,86,126,95,0,107,92],
[94,98,95,110,103,103,0,84],
[95,115,111,147,113,118,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,122,163,114,83,107,104],
[102,0,104,159,154,129,100,149],
[88,106,0,110,122,115,102,111],
[47,51,100,0,90,75,73,96],
[96,56,88,120,0,84,115,121],
[127,81,95,135,126,0,131,127],
[103,110,108,137,95,79,0,141],
[106,61,99,114,89,83,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,98,100,180,106,107,101],
[139,0,80,131,159,143,119,110],
[112,130,0,110,190,120,93,121],
[110,79,100,0,155,95,56,100],
[30,51,20,55,0,51,70,28],
[104,67,90,115,159,0,74,122],
[103,91,117,154,140,136,0,145],
[109,100,89,110,182,88,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,109,91,104,100,104],
[114,0,116,111,104,103,100,107],
[117,94,0,115,104,112,106,110],
[101,99,95,0,99,96,105,109],
[119,106,106,111,0,110,95,106],
[106,107,98,114,100,0,98,116],
[110,110,104,105,115,112,0,98],
[106,103,100,101,104,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,99,123,100,125,95],
[103,0,95,96,118,94,106,103],
[114,115,0,98,118,102,108,99],
[111,114,112,0,128,109,118,105],
[87,92,92,82,0,96,103,96],
[110,116,108,101,114,0,116,115],
[85,104,102,92,107,94,0,92],
[115,107,111,105,114,95,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,126,105,109,107,109],
[102,0,109,106,98,89,89,100],
[96,101,0,131,116,102,94,105],
[84,104,79,0,93,90,90,107],
[105,112,94,117,0,109,113,116],
[101,121,108,120,101,0,93,116],
[103,121,116,120,97,117,0,117],
[101,110,105,103,94,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,94,111,108,94,107],
[113,0,97,104,118,99,97,105],
[111,113,0,114,119,125,111,104],
[116,106,96,0,103,108,96,99],
[99,92,91,107,0,94,96,102],
[102,111,85,102,116,0,105,89],
[116,113,99,114,114,105,0,116],
[103,105,106,111,108,121,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,100,108,118,142,112,77],
[131,0,147,90,102,136,121,94],
[110,63,0,103,78,79,64,29],
[102,120,107,0,105,111,74,69],
[92,108,132,105,0,133,97,34],
[68,74,131,99,77,0,43,65],
[98,89,146,136,113,167,0,129],
[133,116,181,141,176,145,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,101,102,101,101,115],
[109,0,94,95,97,91,91,96],
[115,116,0,93,111,118,106,112],
[109,115,117,0,116,103,114,125],
[108,113,99,94,0,102,105,127],
[109,119,92,107,108,0,110,121],
[109,119,104,96,105,100,0,105],
[95,114,98,85,83,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,111,108,112,102,103],
[98,0,108,104,87,99,101,105],
[95,102,0,93,105,88,96,99],
[99,106,117,0,97,109,104,108],
[102,123,105,113,0,113,109,108],
[98,111,122,101,97,0,99,114],
[108,109,114,106,101,111,0,100],
[107,105,111,102,102,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,102,91,90,91,91],
[113,0,105,114,100,91,101,94],
[112,105,0,114,114,108,90,98],
[108,96,96,0,99,88,89,96],
[119,110,96,111,0,95,90,105],
[120,119,102,122,115,0,115,111],
[119,109,120,121,120,95,0,110],
[119,116,112,114,105,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,127,114,122,111,120,103],
[91,0,105,101,114,108,106,107],
[83,105,0,101,125,110,112,100],
[96,109,109,0,103,112,108,101],
[88,96,85,107,0,97,94,101],
[99,102,100,98,113,0,102,96],
[90,104,98,102,116,108,0,106],
[107,103,110,109,109,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,94,114,110,110,101],
[100,0,93,87,117,88,84,100],
[111,117,0,114,113,98,97,96],
[116,123,96,0,120,105,83,108],
[96,93,97,90,0,90,80,75],
[100,122,112,105,120,0,87,114],
[100,126,113,127,130,123,0,111],
[109,110,114,102,135,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,133,162,77,120,122,126],
[79,0,125,153,85,97,161,109],
[77,85,0,131,97,81,111,104],
[48,57,79,0,76,37,99,46],
[133,125,113,134,0,92,100,109],
[90,113,129,173,118,0,157,117],
[88,49,99,111,110,53,0,81],
[84,101,106,164,101,93,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,106,106,108,104,104],
[93,0,103,99,112,101,104,104],
[101,107,0,89,85,98,104,103],
[104,111,121,0,103,101,94,107],
[104,98,125,107,0,100,112,99],
[102,109,112,109,110,0,108,111],
[106,106,106,116,98,102,0,113],
[106,106,107,103,111,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,118,130,116,113,100],
[106,0,109,116,114,117,130,105],
[102,101,0,111,107,108,117,101],
[92,94,99,0,97,109,105,84],
[80,96,103,113,0,105,118,97],
[94,93,102,101,105,0,110,97],
[97,80,93,105,92,100,0,89],
[110,105,109,126,113,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,113,92,104,91,102],
[86,0,65,110,83,112,72,108],
[105,145,0,138,110,121,105,121],
[97,100,72,0,91,89,85,110],
[118,127,100,119,0,122,81,98],
[106,98,89,121,88,0,88,88],
[119,138,105,125,129,122,0,137],
[108,102,89,100,112,122,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,103,90,89,115,106],
[96,0,118,101,83,89,106,113],
[103,92,0,68,101,78,107,98],
[107,109,142,0,126,105,121,117],
[120,127,109,84,0,95,100,124],
[121,121,132,105,115,0,119,119],
[95,104,103,89,110,91,0,105],
[104,97,112,93,86,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,121,114,119,119,111],
[111,0,113,121,117,118,114,102],
[107,97,0,111,113,109,105,112],
[89,89,99,0,95,102,94,104],
[96,93,97,115,0,116,106,100],
[91,92,101,108,94,0,98,97],
[91,96,105,116,104,112,0,95],
[99,108,98,106,110,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,103,108,95,96,99],
[102,0,98,113,110,102,98,107],
[109,112,0,105,115,111,109,107],
[107,97,105,0,106,106,97,106],
[102,100,95,104,0,110,84,97],
[115,108,99,104,100,0,104,105],
[114,112,101,113,126,106,0,110],
[111,103,103,104,113,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,91,94,92,104,98,98],
[131,0,116,105,101,108,137,117],
[119,94,0,100,111,117,127,115],
[116,105,110,0,99,92,119,130],
[118,109,99,111,0,92,124,93],
[106,102,93,118,118,0,115,102],
[112,73,83,91,86,95,0,86],
[112,93,95,80,117,108,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,106,100,107,90,92,106],
[81,0,73,67,99,77,70,95],
[104,137,0,95,111,116,109,122],
[110,143,115,0,117,93,99,102],
[103,111,99,93,0,91,63,138],
[120,133,94,117,119,0,88,108],
[118,140,101,111,147,122,0,124],
[104,115,88,108,72,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,108,115,100,107,108],
[105,0,97,101,116,107,106,106],
[114,113,0,111,123,101,123,103],
[102,109,99,0,114,111,103,110],
[95,94,87,96,0,95,106,103],
[110,103,109,99,115,0,121,104],
[103,104,87,107,104,89,0,97],
[102,104,107,100,107,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,105,124,109,110,101,99],
[121,0,126,133,118,115,105,123],
[105,84,0,95,95,106,96,105],
[86,77,115,0,91,102,86,103],
[101,92,115,119,0,107,110,113],
[100,95,104,108,103,0,95,105],
[109,105,114,124,100,115,0,116],
[111,87,105,107,97,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,104,111,142,103,85,112],
[78,0,100,97,124,97,82,97],
[106,110,0,102,105,84,87,91],
[99,113,108,0,120,112,101,107],
[68,86,105,90,0,94,103,82],
[107,113,126,98,116,0,107,113],
[125,128,123,109,107,103,0,98],
[98,113,119,103,128,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,112,112,114,105,112],
[92,0,90,101,100,99,105,103],
[105,120,0,112,103,125,116,122],
[98,109,98,0,101,109,105,115],
[98,110,107,109,0,118,114,103],
[96,111,85,101,92,0,107,105],
[105,105,94,105,96,103,0,104],
[98,107,88,95,107,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,107,119,112,110,110],
[106,0,111,99,105,109,105,93],
[109,99,0,102,118,101,112,96],
[103,111,108,0,106,110,107,105],
[91,105,92,104,0,102,104,95],
[98,101,109,100,108,0,107,100],
[100,105,98,103,106,103,0,105],
[100,117,114,105,115,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,85,98,101,111,93,97],
[107,0,105,91,104,124,112,98],
[125,105,0,92,95,110,100,102],
[112,119,118,0,113,123,92,105],
[109,106,115,97,0,135,99,101],
[99,86,100,87,75,0,72,74],
[117,98,110,118,111,138,0,106],
[113,112,108,105,109,136,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,120,103,86,103,97],
[112,0,92,118,103,101,100,95],
[113,118,0,121,116,104,109,109],
[90,92,89,0,97,80,85,85],
[107,107,94,113,0,103,98,103],
[124,109,106,130,107,0,104,111],
[107,110,101,125,112,106,0,101],
[113,115,101,125,107,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,86,108,102,73,119,121],
[83,0,66,90,92,78,94,70],
[124,144,0,135,110,85,102,88],
[102,120,75,0,68,70,93,67],
[108,118,100,142,0,91,118,75],
[137,132,125,140,119,0,139,94],
[91,116,108,117,92,71,0,94],
[89,140,122,143,135,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,90,96,95,115,106,101],
[130,0,118,130,83,140,120,110],
[120,92,0,111,92,115,98,101],
[114,80,99,0,86,126,108,115],
[115,127,118,124,0,139,104,126],
[95,70,95,84,71,0,84,79],
[104,90,112,102,106,126,0,102],
[109,100,109,95,84,131,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,97,99,100,101,93],
[117,0,111,109,114,114,103,113],
[119,99,0,104,108,106,115,108],
[113,101,106,0,111,116,106,106],
[111,96,102,99,0,112,110,98],
[110,96,104,94,98,0,104,106],
[109,107,95,104,100,106,0,114],
[117,97,102,104,112,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,105,97,113,90,94],
[98,0,95,103,89,100,100,88],
[111,115,0,108,110,114,108,103],
[105,107,102,0,102,110,87,100],
[113,121,100,108,0,121,101,114],
[97,110,96,100,89,0,96,104],
[120,110,102,123,109,114,0,104],
[116,122,107,110,96,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,141,130,71,112,143,103],
[120,0,127,103,90,98,130,89],
[69,83,0,74,87,103,82,77],
[80,107,136,0,101,90,155,119],
[139,120,123,109,0,135,139,92],
[98,112,107,120,75,0,119,80],
[67,80,128,55,71,91,0,71],
[107,121,133,91,118,130,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,109,96,116,111,105],
[98,0,98,110,96,105,110,107],
[101,112,0,103,96,111,110,93],
[101,100,107,0,99,110,106,105],
[114,114,114,111,0,112,122,99],
[94,105,99,100,98,0,106,98],
[99,100,100,104,88,104,0,102],
[105,103,117,105,111,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,101,115,108,99,106],
[100,0,109,104,112,104,98,106],
[110,101,0,110,124,107,112,109],
[109,106,100,0,116,105,100,107],
[95,98,86,94,0,97,89,94],
[102,106,103,105,113,0,98,105],
[111,112,98,110,121,112,0,113],
[104,104,101,103,116,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,113,104,105,103,109],
[97,0,114,116,112,100,108,101],
[95,96,0,96,98,96,108,99],
[97,94,114,0,112,95,102,102],
[106,98,112,98,0,95,109,92],
[105,110,114,115,115,0,122,117],
[107,102,102,108,101,88,0,96],
[101,109,111,108,118,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,134,113,100,121,116,126],
[81,0,104,108,130,117,114,141],
[76,106,0,93,115,111,105,84],
[97,102,117,0,120,146,115,106],
[110,80,95,90,0,89,128,109],
[89,93,99,64,121,0,110,118],
[94,96,105,95,82,100,0,108],
[84,69,126,104,101,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,92,100,92,68,76,119],
[96,0,87,118,75,80,57,110],
[118,123,0,129,106,114,77,155],
[110,92,81,0,74,71,85,107],
[118,135,104,136,0,104,83,129],
[142,130,96,139,106,0,115,131],
[134,153,133,125,127,95,0,143],
[91,100,55,103,81,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,107,99,101,109,109],
[107,0,104,102,104,109,117,109],
[98,106,0,104,91,104,109,103],
[103,108,106,0,110,109,119,116],
[111,106,119,100,0,105,122,112],
[109,101,106,101,105,0,121,108],
[101,93,101,91,88,89,0,95],
[101,101,107,94,98,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,124,97,137,99,131],
[117,0,136,135,125,131,98,131],
[109,74,0,97,101,120,89,99],
[86,75,113,0,124,89,86,112],
[113,85,109,86,0,109,100,124],
[73,79,90,121,101,0,118,100],
[111,112,121,124,110,92,0,117],
[79,79,111,98,86,110,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,84,93,101,105,123,104],
[102,0,87,103,104,74,113,87],
[126,123,0,130,114,95,121,106],
[117,107,80,0,95,109,94,95],
[109,106,96,115,0,94,116,101],
[105,136,115,101,116,0,127,91],
[87,97,89,116,94,83,0,86],
[106,123,104,115,109,119,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,89,88,94,90,94,85],
[110,0,90,100,100,85,112,103],
[121,120,0,106,116,101,119,111],
[122,110,104,0,104,110,112,127],
[116,110,94,106,0,90,122,108],
[120,125,109,100,120,0,119,122],
[116,98,91,98,88,91,0,109],
[125,107,99,83,102,88,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,96,106,106,111,108,100],
[76,0,90,82,77,96,85,98],
[114,120,0,113,97,106,104,105],
[104,128,97,0,104,105,99,100],
[104,133,113,106,0,119,107,110],
[99,114,104,105,91,0,103,119],
[102,125,106,111,103,107,0,113],
[110,112,105,110,100,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,92,106,112,113,115],
[110,0,99,109,108,97,114,110],
[109,111,0,107,100,110,121,114],
[118,101,103,0,99,104,116,120],
[104,102,110,111,0,96,118,120],
[98,113,100,106,114,0,115,112],
[97,96,89,94,92,95,0,102],
[95,100,96,90,90,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,115,97,106,113,115],
[95,0,108,105,103,100,126,86],
[106,102,0,110,105,120,122,109],
[95,105,100,0,111,103,111,110],
[113,107,105,99,0,110,127,109],
[104,110,90,107,100,0,107,103],
[97,84,88,99,83,103,0,90],
[95,124,101,100,101,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,106,112,113,103,101],
[107,0,119,112,106,98,111,93],
[96,91,0,94,102,96,96,90],
[104,98,116,0,104,109,110,101],
[98,104,108,106,0,109,108,98],
[97,112,114,101,101,0,101,93],
[107,99,114,100,102,109,0,110],
[109,117,120,109,112,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,109,121,110,109,110],
[103,0,96,95,120,107,107,112],
[109,114,0,109,127,119,101,109],
[101,115,101,0,121,102,105,104],
[89,90,83,89,0,83,80,84],
[100,103,91,108,127,0,104,110],
[101,103,109,105,130,106,0,109],
[100,98,101,106,126,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,114,105,114,110,98],
[107,0,106,110,97,106,100,100],
[101,104,0,109,100,108,107,93],
[96,100,101,0,93,108,96,93],
[105,113,110,117,0,120,108,105],
[96,104,102,102,90,0,98,101],
[100,110,103,114,102,112,0,97],
[112,110,117,117,105,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,102,118,115,116,105],
[98,0,91,103,110,101,106,95],
[107,119,0,110,118,115,117,105],
[108,107,100,0,112,102,110,104],
[92,100,92,98,0,108,106,92],
[95,109,95,108,102,0,104,88],
[94,104,93,100,104,106,0,83],
[105,115,105,106,118,122,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,98,69,98,106,64],
[120,0,91,139,137,122,97,125],
[109,119,0,116,127,119,105,112],
[112,71,94,0,95,76,70,97],
[141,73,83,115,0,106,83,76],
[112,88,91,134,104,0,121,109],
[104,113,105,140,127,89,0,101],
[146,85,98,113,134,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,87,82,88,93,79,105],
[127,0,86,104,109,106,90,109],
[123,124,0,85,114,107,95,120],
[128,106,125,0,120,97,117,138],
[122,101,96,90,0,94,97,119],
[117,104,103,113,116,0,87,126],
[131,120,115,93,113,123,0,112],
[105,101,90,72,91,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,97,106,104,104,77],
[94,0,89,85,87,80,91,83],
[108,121,0,108,105,96,102,96],
[113,125,102,0,95,84,93,94],
[104,123,105,115,0,97,93,94],
[106,130,114,126,113,0,112,103],
[106,119,108,117,117,98,0,110],
[133,127,114,116,116,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,112,110,84,99,111],
[101,0,107,105,82,92,116,96],
[101,103,0,94,68,70,95,96],
[98,105,116,0,66,90,84,105],
[100,128,142,144,0,120,127,139],
[126,118,140,120,90,0,124,124],
[111,94,115,126,83,86,0,101],
[99,114,114,105,71,86,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,114,108,94,106,101],
[106,0,100,104,110,101,93,95],
[107,110,0,103,112,109,99,107],
[96,106,107,0,93,102,96,103],
[102,100,98,117,0,104,96,89],
[116,109,101,108,106,0,108,93],
[104,117,111,114,114,102,0,96],
[109,115,103,107,121,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,105,116,110,106,110],
[97,0,121,114,105,86,94,96],
[90,89,0,96,91,84,92,109],
[105,96,114,0,114,91,94,116],
[94,105,119,96,0,101,103,108],
[100,124,126,119,109,0,116,125],
[104,116,118,116,107,94,0,106],
[100,114,101,94,102,85,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,109,111,143,101,123,109],
[69,0,44,91,130,50,112,88],
[101,166,0,123,124,105,133,136],
[99,119,87,0,129,125,124,95],
[67,80,86,81,0,68,94,37],
[109,160,105,85,142,0,134,97],
[87,98,77,86,116,76,0,86],
[101,122,74,115,173,113,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,94,97,88,85,94,92],
[126,0,96,103,99,109,110,121],
[116,114,0,108,114,97,103,100],
[113,107,102,0,123,117,116,110],
[122,111,96,87,0,101,105,116],
[125,101,113,93,109,0,101,101],
[116,100,107,94,105,109,0,108],
[118,89,110,100,94,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,62,89,127,73,77],
[76,0,107,72,83,79,95,86],
[95,103,0,69,68,107,94,77],
[148,138,141,0,119,122,94,124],
[121,127,142,91,0,108,100,102],
[83,131,103,88,102,0,129,72],
[137,115,116,116,110,81,0,101],
[133,124,133,86,108,138,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,113,100,104,105,122],
[96,0,114,115,85,98,100,119],
[88,96,0,105,92,96,104,111],
[97,95,105,0,93,102,89,118],
[110,125,118,117,0,105,113,122],
[106,112,114,108,105,0,103,117],
[105,110,106,121,97,107,0,117],
[88,91,99,92,88,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,117,125,102,106,100],
[101,0,108,98,110,110,111,107],
[97,102,0,97,107,90,97,93],
[93,112,113,0,118,107,90,97],
[85,100,103,92,0,97,97,88],
[108,100,120,103,113,0,103,112],
[104,99,113,120,113,107,0,101],
[110,103,117,113,122,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,100,70,109,96,73,96],
[123,0,113,115,126,95,110,90],
[110,97,0,89,128,105,99,103],
[140,95,121,0,126,89,112,113],
[101,84,82,84,0,86,65,84],
[114,115,105,121,124,0,96,97],
[137,100,111,98,145,114,0,111],
[114,120,107,97,126,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,104,99,102,95,134],
[103,0,115,106,104,118,109,128],
[105,95,0,91,104,87,104,121],
[106,104,119,0,113,105,117,130],
[111,106,106,97,0,109,111,134],
[108,92,123,105,101,0,111,124],
[115,101,106,93,99,99,0,121],
[76,82,89,80,76,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,98,96,109,105,99],
[107,0,109,98,102,103,110,103],
[103,101,0,95,96,104,103,106],
[112,112,115,0,101,111,111,94],
[114,108,114,109,0,105,105,101],
[101,107,106,99,105,0,111,93],
[105,100,107,99,105,99,0,106],
[111,107,104,116,109,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,117,103,106,120,143,115],
[90,0,119,105,89,116,117,134],
[93,91,0,91,74,86,111,108],
[107,105,119,0,110,117,119,115],
[104,121,136,100,0,103,117,111],
[90,94,124,93,107,0,106,102],
[67,93,99,91,93,104,0,108],
[95,76,102,95,99,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,119,104,115,107,117],
[97,0,82,96,99,101,100,83],
[103,128,0,122,121,121,107,116],
[91,114,88,0,98,116,94,98],
[106,111,89,112,0,121,106,100],
[95,109,89,94,89,0,99,86],
[103,110,103,116,104,111,0,115],
[93,127,94,112,110,124,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,106,111,105,105,104],
[103,0,99,107,96,95,98,110],
[105,111,0,100,105,101,92,107],
[104,103,110,0,101,94,92,103],
[99,114,105,109,0,111,104,115],
[105,115,109,116,99,0,105,118],
[105,112,118,118,106,105,0,115],
[106,100,103,107,95,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,98,116,104,107,105],
[102,0,116,99,128,109,108,97],
[87,94,0,96,109,96,94,103],
[112,111,114,0,124,116,109,100],
[94,82,101,86,0,89,101,103],
[106,101,114,94,121,0,110,109],
[103,102,116,101,109,100,0,83],
[105,113,107,110,107,101,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,86,107,107,100,103],
[113,0,93,109,110,116,97,110],
[111,117,0,100,113,116,103,113],
[124,101,110,0,111,111,106,110],
[103,100,97,99,0,113,99,114],
[103,94,94,99,97,0,95,106],
[110,113,107,104,111,115,0,111],
[107,100,97,100,96,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,127,118,104,108,110],
[102,0,114,109,108,95,114,106],
[96,96,0,117,108,105,102,109],
[83,101,93,0,104,83,103,97],
[92,102,102,106,0,105,91,106],
[106,115,105,127,105,0,105,116],
[102,96,108,107,119,105,0,106],
[100,104,101,113,104,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,83,89,94,90,93,91],
[133,0,121,119,125,103,125,120],
[127,89,0,109,112,95,94,103],
[121,91,101,0,117,99,112,101],
[116,85,98,93,0,107,111,102],
[120,107,115,111,103,0,99,100],
[117,85,116,98,99,111,0,95],
[119,90,107,109,108,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,106,107,102,90,93],
[115,0,111,103,97,110,103,115],
[108,99,0,105,100,118,95,109],
[104,107,105,0,122,108,119,98],
[103,113,110,88,0,98,98,108],
[108,100,92,102,112,0,94,105],
[120,107,115,91,112,116,0,91],
[117,95,101,112,102,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,99,123,103,109,114],
[110,0,105,93,117,113,101,118],
[93,105,0,105,123,116,108,110],
[111,117,105,0,107,118,102,105],
[87,93,87,103,0,104,90,111],
[107,97,94,92,106,0,104,103],
[101,109,102,108,120,106,0,116],
[96,92,100,105,99,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,89,66,99,87,81,85],
[154,0,114,116,100,122,96,124],
[121,96,0,96,81,100,102,109],
[144,94,114,0,110,116,110,100],
[111,110,129,100,0,109,102,115],
[123,88,110,94,101,0,93,105],
[129,114,108,100,108,117,0,107],
[125,86,101,110,95,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,96,98,89,104,114],
[109,0,102,92,104,102,112,108],
[113,108,0,103,97,102,111,108],
[114,118,107,0,105,105,114,109],
[112,106,113,105,0,110,113,106],
[121,108,108,105,100,0,113,106],
[106,98,99,96,97,97,0,93],
[96,102,102,101,104,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,107,122,107,115,113],
[94,0,107,90,112,109,113,120],
[109,103,0,113,122,104,119,104],
[103,120,97,0,121,125,118,115],
[88,98,88,89,0,110,100,112],
[103,101,106,85,100,0,110,113],
[95,97,91,92,110,100,0,106],
[97,90,106,95,98,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,125,104,113,111,113],
[89,0,107,106,116,108,98,110],
[97,103,0,121,104,112,95,101],
[85,104,89,0,95,109,83,109],
[106,94,106,115,0,115,106,117],
[97,102,98,101,95,0,98,113],
[99,112,115,127,104,112,0,113],
[97,100,109,101,93,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,123,90,122,121,99,97],
[62,0,153,108,95,96,83,109],
[87,57,0,92,113,113,85,140],
[120,102,118,0,139,91,75,107],
[88,115,97,71,0,89,92,124],
[89,114,97,119,121,0,81,88],
[111,127,125,135,118,129,0,83],
[113,101,70,103,86,122,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,115,113,113,115,109],
[90,0,90,112,102,103,100,96],
[105,120,0,106,120,119,104,105],
[95,98,104,0,108,104,108,101],
[97,108,90,102,0,108,99,85],
[97,107,91,106,102,0,94,91],
[95,110,106,102,111,116,0,101],
[101,114,105,109,125,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,101,97,118,105,109],
[98,0,95,103,93,112,115,99],
[108,115,0,105,110,119,113,102],
[109,107,105,0,121,113,109,105],
[113,117,100,89,0,117,122,104],
[92,98,91,97,93,0,114,101],
[105,95,97,101,88,96,0,93],
[101,111,108,105,106,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,115,100,125,103,97],
[102,0,116,102,108,99,101,92],
[102,94,0,95,106,105,104,80],
[95,108,115,0,98,113,104,98],
[110,102,104,112,0,104,101,101],
[85,111,105,97,106,0,103,105],
[107,109,106,106,109,107,0,97],
[113,118,130,112,109,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,105,119,93,107,105],
[106,0,102,99,121,100,99,107],
[101,108,0,107,110,104,104,113],
[105,111,103,0,121,110,100,104],
[91,89,100,89,0,85,97,87],
[117,110,106,100,125,0,112,115],
[103,111,106,110,113,98,0,94],
[105,103,97,106,123,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,118,59,88,129,98,105],
[136,0,139,94,116,138,143,129],
[92,71,0,75,71,131,114,99],
[151,116,135,0,94,138,145,125],
[122,94,139,116,0,141,116,118],
[81,72,79,72,69,0,78,94],
[112,67,96,65,94,132,0,93],
[105,81,111,85,92,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,115,104,109,115,105],
[103,0,109,108,108,101,115,107],
[109,101,0,110,94,96,101,109],
[95,102,100,0,96,92,110,107],
[106,102,116,114,0,111,116,114],
[101,109,114,118,99,0,121,102],
[95,95,109,100,94,89,0,109],
[105,103,101,103,96,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,114,105,116,109,118],
[106,0,104,113,113,127,114,107],
[110,106,0,101,101,113,106,107],
[96,97,109,0,100,106,102,102],
[105,97,109,110,0,112,106,103],
[94,83,97,104,98,0,95,103],
[101,96,104,108,104,115,0,104],
[92,103,103,108,107,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,100,96,107,106,91],
[113,0,106,102,98,112,109,107],
[108,104,0,104,107,117,115,103],
[110,108,106,0,106,115,107,105],
[114,112,103,104,0,107,112,110],
[103,98,93,95,103,0,94,94],
[104,101,95,103,98,116,0,94],
[119,103,107,105,100,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,100,110,107,101,91],
[103,0,103,92,110,100,117,96],
[119,107,0,106,111,103,111,101],
[110,118,104,0,115,107,117,112],
[100,100,99,95,0,93,101,102],
[103,110,107,103,117,0,109,105],
[109,93,99,93,109,101,0,95],
[119,114,109,98,108,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,117,91,118,128,117,123],
[123,0,121,97,102,124,93,124],
[93,89,0,94,107,112,97,114],
[119,113,116,0,96,134,119,117],
[92,108,103,114,0,119,94,115],
[82,86,98,76,91,0,95,85],
[93,117,113,91,116,115,0,121],
[87,86,96,93,95,125,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,110,106,114,123,112],
[106,0,105,103,104,102,116,108],
[93,105,0,98,96,100,129,106],
[100,107,112,0,100,100,116,100],
[104,106,114,110,0,109,118,92],
[96,108,110,110,101,0,110,106],
[87,94,81,94,92,100,0,91],
[98,102,104,110,118,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,91,78,86,107,70],
[108,0,101,88,76,73,108,76],
[100,109,0,88,86,78,108,77],
[119,122,122,0,128,124,124,103],
[132,134,124,82,0,122,121,123],
[124,137,132,86,88,0,112,94],
[103,102,102,86,89,98,0,80],
[140,134,133,107,87,116,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,94,98,94,95,105],
[104,0,108,94,106,102,100,108],
[106,102,0,105,88,94,100,109],
[116,116,105,0,101,108,106,109],
[112,104,122,109,0,112,118,110],
[116,108,116,102,98,0,110,109],
[115,110,110,104,92,100,0,116],
[105,102,101,101,100,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,101,95,109,106,93],
[113,0,119,109,95,99,104,89],
[92,91,0,84,97,102,100,93],
[109,101,126,0,108,106,113,104],
[115,115,113,102,0,107,111,108],
[101,111,108,104,103,0,100,98],
[104,106,110,97,99,110,0,102],
[117,121,117,106,102,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,109,113,105,108,98],
[111,0,98,107,115,87,95,94],
[97,112,0,95,106,101,88,92],
[101,103,115,0,105,82,92,107],
[97,95,104,105,0,82,94,99],
[105,123,109,128,128,0,124,115],
[102,115,122,118,116,86,0,107],
[112,116,118,103,111,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,101,101,108,102,109],
[110,0,105,113,105,108,109,109],
[102,105,0,115,105,112,112,108],
[109,97,95,0,105,105,110,111],
[109,105,105,105,0,108,113,114],
[102,102,98,105,102,0,110,115],
[108,101,98,100,97,100,0,109],
[101,101,102,99,96,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,111,101,104,95,107],
[97,0,98,120,101,103,98,102],
[114,112,0,112,120,117,98,106],
[99,90,98,0,95,104,93,87],
[109,109,90,115,0,114,107,93],
[106,107,93,106,96,0,93,86],
[115,112,112,117,103,117,0,100],
[103,108,104,123,117,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,107,109,103,103,113,91],
[90,0,108,86,90,88,76,63],
[103,102,0,87,101,119,99,97],
[101,124,123,0,93,112,126,95],
[107,120,109,117,0,81,121,92],
[107,122,91,98,129,0,117,111],
[97,134,111,84,89,93,0,80],
[119,147,113,115,118,99,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,104,106,88,101,104],
[109,0,98,105,114,101,106,104],
[117,112,0,110,111,105,94,112],
[106,105,100,0,109,82,96,110],
[104,96,99,101,0,88,101,106],
[122,109,105,128,122,0,113,114],
[109,104,116,114,109,97,0,113],
[106,106,98,100,104,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,105,95,81,88,108],
[103,0,100,120,120,110,114,108],
[118,110,0,108,103,97,99,100],
[105,90,102,0,103,93,84,105],
[115,90,107,107,0,71,80,94],
[129,100,113,117,139,0,105,99],
[122,96,111,126,130,105,0,112],
[102,102,110,105,116,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,99,99,109,106,108,104],
[95,0,105,108,91,92,89,96],
[111,105,0,115,106,106,99,99],
[111,102,95,0,108,104,96,101],
[101,119,104,102,0,99,110,96],
[104,118,104,106,111,0,102,107],
[102,121,111,114,100,108,0,114],
[106,114,111,109,114,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,111,102,98,103,101],
[110,0,106,106,96,108,111,111],
[104,104,0,103,98,103,105,107],
[99,104,107,0,94,100,95,103],
[108,114,112,116,0,105,104,122],
[112,102,107,110,105,0,94,107],
[107,99,105,115,106,116,0,113],
[109,99,103,107,88,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,92,81,84,94,75,75],
[122,0,89,94,86,91,82,92],
[118,121,0,94,89,99,80,88],
[129,116,116,0,105,131,100,105],
[126,124,121,105,0,120,88,101],
[116,119,111,79,90,0,93,87],
[135,128,130,110,122,117,0,100],
[135,118,122,105,109,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,112,118,116,115,102],
[106,0,105,97,101,106,116,98],
[103,105,0,100,108,104,116,95],
[98,113,110,0,97,97,119,103],
[92,109,102,113,0,102,114,100],
[94,104,106,113,108,0,107,105],
[95,94,94,91,96,103,0,96],
[108,112,115,107,110,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,89,103,100,102,96,91],
[120,0,102,121,117,112,101,102],
[121,108,0,128,128,114,106,100],
[107,89,82,0,100,102,86,94],
[110,93,82,110,0,110,91,93],
[108,98,96,108,100,0,91,81],
[114,109,104,124,119,119,0,108],
[119,108,110,116,117,129,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,83,60,83,72,83,99],
[111,0,91,81,114,89,97,105],
[127,119,0,85,114,91,119,93],
[150,129,125,0,139,105,99,135],
[127,96,96,71,0,98,93,100],
[138,121,119,105,112,0,112,122],
[127,113,91,111,117,98,0,99],
[111,105,117,75,110,88,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,186,170,106,157,96,176],
[95,0,116,77,116,87,106,87],
[24,94,0,104,85,98,120,24],
[40,133,106,0,114,104,120,122],
[104,94,125,96,0,104,194,96],
[53,123,112,106,106,0,112,112],
[114,104,90,90,16,98,0,90],
[34,123,186,88,114,98,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,103,104,116,103,102],
[111,0,120,96,94,115,102,101],
[98,90,0,97,85,99,92,98],
[107,114,113,0,102,110,110,109],
[106,116,125,108,0,113,114,105],
[94,95,111,100,97,0,92,100],
[107,108,118,100,96,118,0,117],
[108,109,112,101,105,110,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,96,92,102,101,94],
[99,0,104,95,104,102,102,98],
[103,106,0,94,98,94,99,98],
[114,115,116,0,117,99,106,110],
[118,106,112,93,0,107,102,102],
[108,108,116,111,103,0,106,104],
[109,108,111,104,108,104,0,103],
[116,112,112,100,108,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,122,97,107,112,116,107],
[112,0,122,118,104,117,125,134],
[88,88,0,91,108,104,116,131],
[113,92,119,0,110,137,141,122],
[103,106,102,100,0,101,120,135],
[98,93,106,73,109,0,86,112],
[94,85,94,69,90,124,0,116],
[103,76,79,88,75,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,132,138,124,125,100,119],
[55,0,98,119,96,46,21,38],
[78,112,0,152,134,60,35,78],
[72,91,58,0,94,117,48,90],
[86,114,76,116,0,71,92,50],
[85,164,150,93,139,0,74,74],
[110,189,175,162,118,136,0,74],
[91,172,132,120,160,136,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,78,115,136,108,107,106],
[90,0,97,113,114,122,88,99],
[132,113,0,120,123,142,75,107],
[95,97,90,0,100,107,90,79],
[74,96,87,110,0,138,86,96],
[102,88,68,103,72,0,90,74],
[103,122,135,120,124,120,0,94],
[104,111,103,131,114,136,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,111,111,94,96,122],
[103,0,102,102,93,104,92,109],
[103,108,0,88,101,100,88,103],
[99,108,122,0,100,100,93,110],
[99,117,109,110,0,105,100,106],
[116,106,110,110,105,0,107,114],
[114,118,122,117,110,103,0,107],
[88,101,107,100,104,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,95,104,102,105,103],
[109,0,92,105,120,110,113,97],
[101,118,0,109,104,105,103,99],
[115,105,101,0,106,104,114,108],
[106,90,106,104,0,100,109,90],
[108,100,105,106,110,0,113,105],
[105,97,107,96,101,97,0,99],
[107,113,111,102,120,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,104,102,110,106,111,101],
[82,0,96,84,92,89,90,88],
[106,114,0,96,105,97,115,110],
[108,126,114,0,105,105,118,104],
[100,118,105,105,0,106,100,110],
[104,121,113,105,104,0,109,107],
[99,120,95,92,110,101,0,107],
[109,122,100,106,100,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,116,103,102,115,108],
[102,0,109,110,98,110,107,109],
[106,101,0,108,105,110,102,113],
[94,100,102,0,89,102,95,92],
[107,112,105,121,0,108,102,111],
[108,100,100,108,102,0,109,119],
[95,103,108,115,108,101,0,112],
[102,101,97,118,99,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,91,111,113,119,85,133],
[69,0,78,91,91,78,75,76],
[119,132,0,123,125,117,123,103],
[99,119,87,0,97,87,107,110],
[97,119,85,113,0,99,106,90],
[91,132,93,123,111,0,116,94],
[125,135,87,103,104,94,0,100],
[77,134,107,100,120,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,137,102,130,120,118],
[87,0,87,100,82,110,109,97],
[100,123,0,103,96,112,116,121],
[73,110,107,0,108,113,106,103],
[108,128,114,102,0,118,120,111],
[80,100,98,97,92,0,106,99],
[90,101,94,104,90,104,0,100],
[92,113,89,107,99,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,101,118,114,118,112],
[91,0,92,84,100,106,103,98],
[109,118,0,102,115,114,120,98],
[109,126,108,0,113,110,124,92],
[92,110,95,97,0,107,111,107],
[96,104,96,100,103,0,117,101],
[92,107,90,86,99,93,0,93],
[98,112,112,118,103,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,105,95,106,111,107],
[111,0,111,103,113,104,111,104],
[104,99,0,98,127,100,112,101],
[105,107,112,0,104,101,110,115],
[115,97,83,106,0,94,93,113],
[104,106,110,109,116,0,113,104],
[99,99,98,100,117,97,0,101],
[103,106,109,95,97,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,92,111,113,105,125],
[91,0,120,106,124,110,124,124],
[108,90,0,102,114,104,110,95],
[118,104,108,0,125,104,104,100],
[99,86,96,85,0,106,112,101],
[97,100,106,106,104,0,102,111],
[105,86,100,106,98,108,0,108],
[85,86,115,110,109,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,92,100,101,120,120],
[96,0,104,100,84,89,87,107],
[105,106,0,113,97,103,108,112],
[118,110,97,0,116,102,112,118],
[110,126,113,94,0,106,94,107],
[109,121,107,108,104,0,116,123],
[90,123,102,98,116,94,0,129],
[90,103,98,92,103,87,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,117,102,123,109,112,111],
[85,0,79,95,96,89,104,92],
[93,131,0,107,112,100,111,103],
[108,115,103,0,118,112,127,106],
[87,114,98,92,0,107,110,100],
[101,121,110,98,103,0,119,105],
[98,106,99,83,100,91,0,89],
[99,118,107,104,110,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,101,108,106,108,100],
[104,0,97,98,86,107,92,103],
[107,113,0,102,103,115,110,110],
[109,112,108,0,103,122,108,107],
[102,124,107,107,0,112,110,99],
[104,103,95,88,98,0,98,92],
[102,118,100,102,100,112,0,96],
[110,107,100,103,111,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,108,116,95,110,95],
[103,0,116,110,118,107,116,107],
[100,94,0,99,106,92,101,96],
[102,100,111,0,112,98,105,96],
[94,92,104,98,0,92,100,101],
[115,103,118,112,118,0,109,106],
[100,94,109,105,110,101,0,103],
[115,103,114,114,109,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,132,75,98,96,105],
[101,0,138,114,108,112,106,111],
[99,72,0,104,91,112,89,75],
[78,96,106,0,72,94,80,65],
[135,102,119,138,0,113,131,138],
[112,98,98,116,97,0,122,105],
[114,104,121,130,79,88,0,126],
[105,99,135,145,72,105,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,103,92,90,101,101],
[116,0,109,109,97,100,99,105],
[111,101,0,106,99,107,98,111],
[107,101,104,0,98,106,102,101],
[118,113,111,112,0,112,109,105],
[120,110,103,104,98,0,106,107],
[109,111,112,108,101,104,0,103],
[109,105,99,109,105,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,96,92,108,93,99],
[98,0,93,85,85,110,89,109],
[103,117,0,94,92,120,88,126],
[114,125,116,0,96,115,121,129],
[118,125,118,114,0,117,105,129],
[102,100,90,95,93,0,99,80],
[117,121,122,89,105,111,0,119],
[111,101,84,81,81,130,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,99,101,108,106,112,109],
[94,0,102,91,104,98,105,108],
[111,108,0,101,95,106,101,114],
[109,119,109,0,109,104,124,100],
[102,106,115,101,0,108,107,101],
[104,112,104,106,102,0,117,115],
[98,105,109,86,103,93,0,94],
[101,102,96,110,109,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,111,102,110,109,111],
[100,0,110,111,103,109,112,111],
[106,100,0,106,97,104,102,101],
[99,99,104,0,93,101,111,102],
[108,107,113,117,0,115,102,105],
[100,101,106,109,95,0,110,109],
[101,98,108,99,108,100,0,103],
[99,99,109,108,105,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,77,90,75,78,78,101],
[120,0,93,93,90,120,80,132],
[133,117,0,105,97,111,82,110],
[120,117,105,0,119,113,103,127],
[135,120,113,91,0,114,100,131],
[132,90,99,97,96,0,112,132],
[132,130,128,107,110,98,0,124],
[109,78,100,83,79,78,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,111,107,101,117,109],
[102,0,101,109,120,98,110,99],
[110,109,0,111,104,109,106,96],
[99,101,99,0,102,101,106,99],
[103,90,106,108,0,106,110,109],
[109,112,101,109,104,0,109,99],
[93,100,104,104,100,101,0,106],
[101,111,114,111,101,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,120,120,93,105,93],
[96,0,116,91,112,95,117,95],
[105,94,0,105,114,101,98,101],
[90,119,105,0,123,117,104,108],
[90,98,96,87,0,76,92,82],
[117,115,109,93,134,0,99,100],
[105,93,112,106,118,111,0,94],
[117,115,109,102,128,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,92,94,115,114,112,121],
[80,0,84,95,95,103,101,93],
[118,126,0,80,114,120,112,95],
[116,115,130,0,121,139,96,117],
[95,115,96,89,0,114,119,100],
[96,107,90,71,96,0,109,86],
[98,109,98,114,91,101,0,102],
[89,117,115,93,110,124,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,113,74,88,83,75,95],
[133,0,133,106,119,104,113,114],
[97,77,0,91,113,103,92,98],
[136,104,119,0,122,99,105,135],
[122,91,97,88,0,109,107,111],
[127,106,107,111,101,0,120,114],
[135,97,118,105,103,90,0,105],
[115,96,112,75,99,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,102,105,107,99,101],
[110,0,117,109,102,109,117,118],
[107,93,0,110,106,109,99,105],
[108,101,100,0,106,94,93,113],
[105,108,104,104,0,100,99,111],
[103,101,101,116,110,0,105,108],
[111,93,111,117,111,105,0,108],
[109,92,105,97,99,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,84,93,96,90,101],
[116,0,114,111,104,106,105,105],
[114,96,0,90,95,102,86,102],
[126,99,120,0,113,119,104,118],
[117,106,115,97,0,108,103,109],
[114,104,108,91,102,0,109,108],
[120,105,124,106,107,101,0,124],
[109,105,108,92,101,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,97,109,102,101,113],
[99,0,108,101,118,110,103,107],
[113,102,0,96,107,101,99,100],
[113,109,114,0,120,113,109,103],
[101,92,103,90,0,102,105,104],
[108,100,109,97,108,0,95,101],
[109,107,111,101,105,115,0,105],
[97,103,110,107,106,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,122,114,88,91,103,104],
[90,0,123,105,99,96,109,124],
[88,87,0,65,75,81,85,75],
[96,105,145,0,102,91,101,115],
[122,111,135,108,0,100,113,119],
[119,114,129,119,110,0,132,102],
[107,101,125,109,97,78,0,100],
[106,86,135,95,91,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,117,100,108,119,112],
[107,0,107,116,103,101,115,104],
[103,103,0,108,105,106,123,115],
[93,94,102,0,97,97,109,96],
[110,107,105,113,0,101,119,114],
[102,109,104,113,109,0,122,97],
[91,95,87,101,91,88,0,107],
[98,106,95,114,96,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,82,100,109,93,102],
[117,0,113,98,98,96,101,104],
[107,97,0,85,89,81,83,118],
[128,112,125,0,118,104,125,122],
[110,112,121,92,0,109,105,111],
[101,114,129,106,101,0,109,113],
[117,109,127,85,105,101,0,118],
[108,106,92,88,99,97,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,99,125,112,110,119],
[92,0,103,89,112,87,121,94],
[102,107,0,105,117,97,111,103],
[111,121,105,0,108,105,120,102],
[85,98,93,102,0,85,101,88],
[98,123,113,105,125,0,112,107],
[100,89,99,90,109,98,0,90],
[91,116,107,108,122,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,123,130,116,122,125],
[105,0,103,109,124,125,113,132],
[98,107,0,111,124,125,119,127],
[87,101,99,0,117,109,108,127],
[80,86,86,93,0,103,98,109],
[94,85,85,101,107,0,101,104],
[88,97,91,102,112,109,0,99],
[85,78,83,83,101,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,101,112,130,113,106],
[112,0,121,114,141,120,83,79],
[98,89,0,99,122,96,77,79],
[109,96,111,0,126,112,93,76],
[98,69,88,84,0,92,59,62],
[80,90,114,98,118,0,97,63],
[97,127,133,117,151,113,0,85],
[104,131,131,134,148,147,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,115,105,133,147,148],
[104,0,144,148,174,186,195,146],
[90,66,0,84,134,97,100,104],
[95,62,126,0,140,149,131,87],
[105,36,76,70,0,86,96,116],
[77,24,113,61,124,0,119,93],
[63,15,110,79,114,91,0,105],
[62,64,106,123,94,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,110,111,106,116,117,116],
[147,0,136,102,121,124,150,97],
[100,74,0,106,88,134,117,93],
[99,108,104,0,76,105,113,96],
[104,89,122,134,0,124,113,74],
[94,86,76,105,86,0,117,89],
[93,60,93,97,97,93,0,93],
[94,113,117,114,136,121,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,74,125,95,141,127,131],
[87,0,63,102,82,123,80,108],
[136,147,0,125,130,127,103,136],
[85,108,85,0,83,94,121,133],
[115,128,80,127,0,133,104,114],
[69,87,83,116,77,0,82,82],
[83,130,107,89,106,128,0,109],
[79,102,74,77,96,128,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,113,117,102,113,96],
[109,0,94,105,115,98,106,99],
[106,116,0,112,116,116,118,102],
[97,105,98,0,113,99,109,92],
[93,95,94,97,0,103,97,104],
[108,112,94,111,107,0,106,109],
[97,104,92,101,113,104,0,93],
[114,111,108,118,106,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,121,96,116,128,105],
[100,0,104,112,97,123,120,107],
[91,106,0,92,79,112,86,63],
[89,98,118,0,75,118,117,76],
[114,113,131,135,0,126,136,99],
[94,87,98,92,84,0,107,74],
[82,90,124,93,74,103,0,70],
[105,103,147,134,111,136,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,95,106,109,108,107],
[92,0,101,87,106,95,106,102],
[108,109,0,94,106,103,104,105],
[115,123,116,0,107,115,115,100],
[104,104,104,103,0,107,108,102],
[101,115,107,95,103,0,101,101],
[102,104,106,95,102,109,0,103],
[103,108,105,110,108,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,111,108,120,111,118],
[109,0,110,99,100,119,120,106],
[102,100,0,101,102,138,116,106],
[99,111,109,0,86,111,118,93],
[102,110,108,124,0,136,133,99],
[90,91,72,99,74,0,97,81],
[99,90,94,92,77,113,0,80],
[92,104,104,117,111,129,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,99,111,102,118],
[106,0,110,102,113,118,101,107],
[106,100,0,105,109,117,100,114],
[109,108,105,0,99,114,114,119],
[111,97,101,111,0,105,94,111],
[99,92,93,96,105,0,94,101],
[108,109,110,96,116,116,0,107],
[92,103,96,91,99,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,94,100,87,95,92,78],
[91,0,86,87,93,95,90,93],
[116,124,0,97,115,118,100,90],
[110,123,113,0,107,105,115,107],
[123,117,95,103,0,111,109,99],
[115,115,92,105,99,0,100,87],
[118,120,110,95,101,110,0,109],
[132,117,120,103,111,123,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,102,113,108,108,105],
[94,0,124,107,110,118,111,110],
[101,86,0,99,95,107,104,101],
[108,103,111,0,107,111,106,109],
[97,100,115,103,0,102,102,97],
[102,92,103,99,108,0,115,89],
[102,99,106,104,108,95,0,101],
[105,100,109,101,113,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,120,113,107,97,107],
[92,0,117,104,109,103,98,94],
[89,93,0,103,111,89,97,97],
[90,106,107,0,106,108,100,98],
[97,101,99,104,0,94,91,103],
[103,107,121,102,116,0,110,117],
[113,112,113,110,119,100,0,119],
[103,116,113,112,107,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,125,106,106,101,108,103],
[108,0,119,87,93,104,100,113],
[85,91,0,96,72,95,81,103],
[104,123,114,0,90,96,98,117],
[104,117,138,120,0,106,97,127],
[109,106,115,114,104,0,123,120],
[102,110,129,112,113,87,0,109],
[107,97,107,93,83,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,101,101,108,97,98],
[110,0,106,99,105,101,94,95],
[109,104,0,102,107,103,98,98],
[109,111,108,0,102,104,93,105],
[109,105,103,108,0,94,99,97],
[102,109,107,106,116,0,112,109],
[113,116,112,117,111,98,0,97],
[112,115,112,105,113,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,139,111,101,108,106,123],
[125,0,113,102,119,119,119,135],
[71,97,0,104,100,102,106,96],
[99,108,106,0,91,83,101,110],
[109,91,110,119,0,115,99,117],
[102,91,108,127,95,0,106,114],
[104,91,104,109,111,104,0,118],
[87,75,114,100,93,96,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,92,112,102,94,98],
[114,0,109,107,120,105,106,99],
[112,101,0,118,124,105,108,107],
[118,103,92,0,126,104,110,106],
[98,90,86,84,0,87,94,86],
[108,105,105,106,123,0,109,111],
[116,104,102,100,116,101,0,101],
[112,111,103,104,124,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,122,97,130,113,131,73],
[56,0,65,75,86,108,95,62],
[88,145,0,93,98,127,112,91],
[113,135,117,0,108,84,142,86],
[80,124,112,102,0,121,106,65],
[97,102,83,126,89,0,141,120],
[79,115,98,68,104,69,0,85],
[137,148,119,124,145,90,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,82,104,108,103,99],
[109,0,100,107,127,110,122,104],
[111,110,0,102,102,109,92,111],
[128,103,108,0,95,122,108,118],
[106,83,108,115,0,109,98,108],
[102,100,101,88,101,0,94,94],
[107,88,118,102,112,116,0,111],
[111,106,99,92,102,116,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,88,94,94,107,89,80],
[120,0,106,124,105,99,88,90],
[122,104,0,110,120,121,105,97],
[116,86,100,0,87,122,92,107],
[116,105,90,123,0,134,112,94],
[103,111,89,88,76,0,86,90],
[121,122,105,118,98,124,0,114],
[130,120,113,103,116,120,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,104,113,122,120,119],
[118,0,105,109,116,134,130,115],
[114,105,0,103,107,108,121,132],
[106,101,107,0,116,124,107,111],
[97,94,103,94,0,109,95,97],
[88,76,102,86,101,0,114,102],
[90,80,89,103,115,96,0,109],
[91,95,78,99,113,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,132,104,141,147,125,137],
[70,0,117,75,110,129,79,105],
[78,93,0,94,87,107,90,123],
[106,135,116,0,99,107,107,128],
[69,100,123,111,0,119,82,104],
[63,81,103,103,91,0,91,108],
[85,131,120,103,128,119,0,111],
[73,105,87,82,106,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,154,86,116,147,149],
[99,0,79,88,99,97,107,116],
[97,131,0,124,137,94,155,153],
[56,122,86,0,116,86,141,137],
[124,111,73,94,0,70,100,90],
[94,113,116,124,140,0,147,122],
[63,103,55,69,110,63,0,110],
[61,94,57,73,120,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,123,117,100,122,115,120],
[98,0,102,101,108,100,105,100],
[87,108,0,90,91,90,94,94],
[93,109,120,0,98,108,120,103],
[110,102,119,112,0,119,116,116],
[88,110,120,102,91,0,107,104],
[95,105,116,90,94,103,0,103],
[90,110,116,107,94,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,118,98,108,109,113],
[103,0,109,113,103,110,102,114],
[103,101,0,110,96,109,96,98],
[92,97,100,0,101,98,91,91],
[112,107,114,109,0,111,95,109],
[102,100,101,112,99,0,96,110],
[101,108,114,119,115,114,0,112],
[97,96,112,119,101,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,120,105,96,110,90,90],
[120,0,121,93,120,120,106,107],
[90,89,0,88,106,105,102,96],
[105,117,122,0,124,125,114,99],
[114,90,104,86,0,102,118,109],
[100,90,105,85,108,0,111,95],
[120,104,108,96,92,99,0,99],
[120,103,114,111,101,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,101,101,109,90,88,92],
[127,0,112,111,127,102,117,115],
[109,98,0,117,114,84,104,106],
[109,99,93,0,92,92,99,104],
[101,83,96,118,0,98,102,104],
[120,108,126,118,112,0,105,119],
[122,93,106,111,108,105,0,103],
[118,95,104,106,106,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,130,119,100,129,110,127],
[119,0,122,121,132,135,98,140],
[80,88,0,104,80,99,90,102],
[91,89,106,0,96,102,90,109],
[110,78,130,114,0,122,101,130],
[81,75,111,108,88,0,81,104],
[100,112,120,120,109,129,0,123],
[83,70,108,101,80,106,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,97,107,99,97,106],
[113,0,100,93,102,102,100,108],
[108,110,0,105,103,107,105,110],
[113,117,105,0,121,106,118,116],
[103,108,107,89,0,107,111,109],
[111,108,103,104,103,0,114,105],
[113,110,105,92,99,96,0,104],
[104,102,100,94,101,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,98,85,98,117,117,110],
[58,0,95,75,42,121,125,114],
[112,115,0,92,80,108,101,97],
[125,135,118,0,98,109,89,128],
[112,168,130,112,0,97,87,111],
[93,89,102,101,113,0,103,125],
[93,85,109,121,123,107,0,115],
[100,96,113,82,99,85,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,130,101,107,124,124,105],
[106,0,120,113,114,124,125,92],
[80,90,0,101,95,114,111,90],
[109,97,109,0,121,119,108,103],
[103,96,115,89,0,121,105,88],
[86,86,96,91,89,0,110,72],
[86,85,99,102,105,100,0,78],
[105,118,120,107,122,138,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,112,109,101,109,104],
[110,0,104,108,104,99,108,96],
[106,106,0,125,115,105,117,98],
[98,102,85,0,114,92,112,101],
[101,106,95,96,0,94,110,100],
[109,111,105,118,116,0,110,110],
[101,102,93,98,100,100,0,105],
[106,114,112,109,110,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,105,107,113,114,98],
[86,0,89,97,100,102,100,91],
[98,121,0,115,109,123,118,102],
[105,113,95,0,117,114,118,114],
[103,110,101,93,0,105,97,95],
[97,108,87,96,105,0,108,90],
[96,110,92,92,113,102,0,102],
[112,119,108,96,115,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,95,108,99,103,103,95],
[116,0,96,105,105,113,110,90],
[115,114,0,122,105,107,105,106],
[102,105,88,0,89,100,98,81],
[111,105,105,121,0,90,107,88],
[107,97,103,110,120,0,106,94],
[107,100,105,112,103,104,0,101],
[115,120,104,129,122,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,101,104,93,100,104],
[116,0,104,113,104,108,121,107],
[117,106,0,110,107,108,110,91],
[109,97,100,0,117,93,111,93],
[106,106,103,93,0,93,105,90],
[117,102,102,117,117,0,120,101],
[110,89,100,99,105,90,0,93],
[106,103,119,117,120,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,156,111,128,104,147,157],
[27,0,133,86,30,70,47,93],
[54,77,0,87,48,93,83,107],
[99,124,123,0,99,98,78,106],
[82,180,162,111,0,107,85,88],
[106,140,117,112,103,0,70,145],
[63,163,127,132,125,140,0,155],
[53,117,103,104,122,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,81,105,83,83,96,88],
[113,0,107,110,111,108,113,101],
[129,103,0,114,104,113,94,115],
[105,100,96,0,91,98,96,97],
[127,99,106,119,0,83,82,77],
[127,102,97,112,127,0,101,96],
[114,97,116,114,128,109,0,91],
[122,109,95,113,133,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,109,107,109,115,123],
[113,0,119,106,98,110,106,111],
[92,91,0,101,101,101,106,105],
[101,104,109,0,112,107,101,114],
[103,112,109,98,0,96,114,118],
[101,100,109,103,114,0,104,113],
[95,104,104,109,96,106,0,111],
[87,99,105,96,92,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,107,108,115,102,106],
[112,0,100,99,100,107,108,101],
[104,110,0,108,112,122,111,111],
[103,111,102,0,110,115,108,113],
[102,110,98,100,0,115,104,108],
[95,103,88,95,95,0,96,91],
[108,102,99,102,106,114,0,105],
[104,109,99,97,102,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,108,112,95,134,102],
[100,0,89,86,74,89,133,106],
[102,121,0,126,116,114,143,122],
[102,124,84,0,106,98,138,86],
[98,136,94,104,0,106,123,92],
[115,121,96,112,104,0,133,103],
[76,77,67,72,87,77,0,76],
[108,104,88,124,118,107,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,89,98,93,102,93],
[101,0,90,99,99,80,100,97],
[101,120,0,109,105,104,105,97],
[121,111,101,0,105,106,111,109],
[112,111,105,105,0,102,111,99],
[117,130,106,104,108,0,111,112],
[108,110,105,99,99,99,0,90],
[117,113,113,101,111,98,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,136,127,120,137,86,105],
[86,0,111,109,115,92,59,61],
[74,99,0,109,98,87,66,67],
[83,101,101,0,107,84,82,77],
[90,95,112,103,0,105,111,93],
[73,118,123,126,105,0,100,108],
[124,151,144,128,99,110,0,100],
[105,149,143,133,117,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,95,90,96,90,97],
[109,0,101,103,108,102,101,103],
[114,109,0,106,100,109,106,108],
[115,107,104,0,111,112,103,107],
[120,102,110,99,0,101,88,105],
[114,108,101,98,109,0,106,105],
[120,109,104,107,122,104,0,101],
[113,107,102,103,105,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,92,84,96,87,89],
[104,0,106,90,101,106,104,100],
[110,104,0,130,101,114,100,113],
[118,120,80,0,106,96,93,101],
[126,109,109,104,0,116,111,103],
[114,104,96,114,94,0,109,100],
[123,106,110,117,99,101,0,95],
[121,110,97,109,107,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,110,111,108,105,112],
[102,0,108,112,111,117,100,98],
[97,102,0,99,104,108,91,98],
[100,98,111,0,104,109,91,97],
[99,99,106,106,0,110,92,90],
[102,93,102,101,100,0,93,103],
[105,110,119,119,118,117,0,101],
[98,112,112,113,120,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,80,97,126,67,111,112],
[118,0,98,96,128,129,127,114],
[130,112,0,74,114,103,105,134],
[113,114,136,0,130,88,134,117],
[84,82,96,80,0,92,73,118],
[143,81,107,122,118,0,122,95],
[99,83,105,76,137,88,0,126],
[98,96,76,93,92,115,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,88,110,114,98,112,111],
[116,0,102,97,113,89,103,106],
[122,108,0,102,103,105,110,115],
[100,113,108,0,120,108,108,108],
[96,97,107,90,0,84,83,104],
[112,121,105,102,126,0,110,107],
[98,107,100,102,127,100,0,112],
[99,104,95,102,106,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,103,94,91,96,81],
[111,0,117,107,93,117,116,109],
[108,93,0,97,90,104,105,92],
[107,103,113,0,92,114,112,112],
[116,117,120,118,0,119,110,104],
[119,93,106,96,91,0,100,90],
[114,94,105,98,100,110,0,98],
[129,101,118,98,106,120,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,83,102,100,90,93],
[113,0,107,92,115,93,110,112],
[118,103,0,105,106,97,99,104],
[127,118,105,0,119,101,109,120],
[108,95,104,91,0,93,101,98],
[110,117,113,109,117,0,105,114],
[120,100,111,101,109,105,0,110],
[117,98,106,90,112,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,117,100,111,99,101],
[99,0,109,123,106,105,98,103],
[93,101,0,115,101,89,95,114],
[93,87,95,0,86,95,80,90],
[110,104,109,124,0,98,104,114],
[99,105,121,115,112,0,96,101],
[111,112,115,130,106,114,0,98],
[109,107,96,120,96,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,112,137,111,109,111,95],
[85,0,106,85,85,95,86,80],
[98,104,0,110,104,110,71,82],
[73,125,100,0,91,103,79,90],
[99,125,106,119,0,116,86,93],
[101,115,100,107,94,0,89,93],
[99,124,139,131,124,121,0,107],
[115,130,128,120,117,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,90,111,95,101,113],
[103,0,109,101,99,106,95,108],
[105,101,0,103,101,114,106,112],
[120,109,107,0,107,103,103,115],
[99,111,109,103,0,103,104,110],
[115,104,96,107,107,0,101,108],
[109,115,104,107,106,109,0,114],
[97,102,98,95,100,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,93,100,118,106,102],
[115,0,120,100,104,122,102,111],
[105,90,0,97,103,116,100,98],
[117,110,113,0,112,120,102,111],
[110,106,107,98,0,103,87,103],
[92,88,94,90,107,0,97,93],
[104,108,110,108,123,113,0,113],
[108,99,112,99,107,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,98,100,106,108,105],
[102,0,109,106,107,105,105,106],
[103,101,0,103,109,102,102,108],
[112,104,107,0,108,108,105,102],
[110,103,101,102,0,113,100,109],
[104,105,108,102,97,0,106,104],
[102,105,108,105,110,104,0,111],
[105,104,102,108,101,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,105,104,113,103,109],
[100,0,92,92,100,102,108,99],
[101,118,0,107,105,120,116,108],
[105,118,103,0,97,110,106,109],
[106,110,105,113,0,117,112,110],
[97,108,90,100,93,0,112,102],
[107,102,94,104,98,98,0,102],
[101,111,102,101,100,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,125,102,96,93,84],
[105,0,111,127,114,93,107,111],
[106,99,0,109,91,91,90,109],
[85,83,101,0,108,92,95,97],
[108,96,119,102,0,106,91,103],
[114,117,119,118,104,0,109,111],
[117,103,120,115,119,101,0,112],
[126,99,101,113,107,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,119,97,106,98,97],
[94,0,101,111,107,106,109,103],
[100,109,0,108,88,113,97,108],
[91,99,102,0,86,101,92,102],
[113,103,122,124,0,120,108,121],
[104,104,97,109,90,0,91,98],
[112,101,113,118,102,119,0,105],
[113,107,102,108,89,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,96,114,100,104,90],
[115,0,93,107,103,107,109,95],
[114,117,0,100,105,104,113,108],
[114,103,110,0,116,107,100,106],
[96,107,105,94,0,87,98,97],
[110,103,106,103,123,0,104,110],
[106,101,97,110,112,106,0,106],
[120,115,102,104,113,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,109,111,116,109,101],
[112,0,90,104,111,102,98,100],
[104,120,0,115,121,113,104,111],
[101,106,95,0,103,102,95,101],
[99,99,89,107,0,105,90,100],
[94,108,97,108,105,0,96,102],
[101,112,106,115,120,114,0,112],
[109,110,99,109,110,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,121,109,105,113,93],
[106,0,106,120,106,95,106,96],
[112,104,0,117,106,91,99,92],
[89,90,93,0,101,90,91,91],
[101,104,104,109,0,95,113,106],
[105,115,119,120,115,0,105,106],
[97,104,111,119,97,105,0,104],
[117,114,118,119,104,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,103,117,103,96,93],
[105,0,105,106,120,97,102,96],
[95,105,0,105,113,105,96,89],
[107,104,105,0,111,106,92,103],
[93,90,97,99,0,94,89,96],
[107,113,105,104,116,0,105,107],
[114,108,114,118,121,105,0,116],
[117,114,121,107,114,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,127,129,126,109,105,129],
[123,0,106,127,145,87,125,169],
[83,104,0,146,104,126,102,126],
[81,83,64,0,126,148,122,127],
[84,65,106,84,0,87,125,44],
[101,123,84,62,123,0,101,104],
[105,85,108,88,85,109,0,107],
[81,41,84,83,166,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,115,103,112,111,120],
[94,0,96,116,97,115,84,107],
[102,114,0,126,97,115,102,107],
[95,94,84,0,100,104,89,101],
[107,113,113,110,0,116,98,113],
[98,95,95,106,94,0,97,108],
[99,126,108,121,112,113,0,112],
[90,103,103,109,97,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,99,105,108,106,97],
[97,0,120,107,105,113,111,112],
[97,90,0,90,99,92,98,106],
[111,103,120,0,104,99,101,115],
[105,105,111,106,0,109,104,106],
[102,97,118,111,101,0,105,106],
[104,99,112,109,106,105,0,106],
[113,98,104,95,104,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,95,109,116,117,117,105],
[71,0,64,102,91,97,101,87],
[115,146,0,96,114,93,120,121],
[101,108,114,0,111,116,125,107],
[94,119,96,99,0,101,95,93],
[93,113,117,94,109,0,105,103],
[93,109,90,85,115,105,0,93],
[105,123,89,103,117,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,97,111,122,111,114,111],
[81,0,98,106,111,97,107,100],
[113,112,0,111,105,111,100,121],
[99,104,99,0,87,107,110,115],
[88,99,105,123,0,113,112,106],
[99,113,99,103,97,0,109,116],
[96,103,110,100,98,101,0,103],
[99,110,89,95,104,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,133,53,80,52,133,158],
[79,0,106,132,105,104,105,132],
[77,104,0,76,103,50,130,105],
[157,78,134,0,106,130,133,105],
[130,105,107,104,0,75,133,132],
[158,106,160,80,135,0,160,160],
[77,105,80,77,77,50,0,132],
[52,78,105,105,78,50,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,90,73,102,84,82,113],
[135,0,93,104,120,126,106,116],
[120,117,0,101,110,129,122,129],
[137,106,109,0,107,111,85,102],
[108,90,100,103,0,103,84,119],
[126,84,81,99,107,0,97,123],
[128,104,88,125,126,113,0,117],
[97,94,81,108,91,87,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,123,129,94,122,115],
[86,0,73,69,91,86,88,78],
[101,137,0,106,118,105,118,129],
[87,141,104,0,126,122,118,127],
[81,119,92,84,0,75,91,108],
[116,124,105,88,135,0,103,109],
[88,122,92,92,119,107,0,113],
[95,132,81,83,102,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,106,86,110,108,100,94],
[84,0,93,82,106,101,110,86],
[104,117,0,109,111,123,104,90],
[124,128,101,0,112,138,103,104],
[100,104,99,98,0,113,90,91],
[102,109,87,72,97,0,97,84],
[110,100,106,107,120,113,0,112],
[116,124,120,106,119,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,156,141,139,85,125],
[99,0,113,143,143,111,115,114],
[86,97,0,156,115,84,100,85],
[54,67,54,0,83,94,41,81],
[69,67,95,127,0,95,68,55],
[71,99,126,116,115,0,101,113],
[125,95,110,169,142,109,0,97],
[85,96,125,129,155,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,113,107,123,107,92],
[103,0,101,107,104,117,113,104],
[100,109,0,106,112,114,113,101],
[97,103,104,0,115,124,114,108],
[103,106,98,95,0,107,106,100],
[87,93,96,86,103,0,99,95],
[103,97,97,96,104,111,0,87],
[118,106,109,102,110,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,121,93,93,95,71],
[114,0,114,104,153,113,114,102],
[104,96,0,97,103,77,129,97],
[89,106,113,0,127,100,125,127],
[117,57,107,83,0,57,116,82],
[117,97,133,110,153,0,107,96],
[115,96,81,85,94,103,0,119],
[139,108,113,83,128,114,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,129,96,124,94,135,128],
[99,0,112,115,105,91,107,107],
[81,98,0,108,107,86,108,127],
[114,95,102,0,108,87,116,130],
[86,105,103,102,0,78,97,96],
[116,119,124,123,132,0,104,118],
[75,103,102,94,113,106,0,78],
[82,103,83,80,114,92,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,115,113,111,109,136],
[98,0,111,112,138,113,115,135],
[107,99,0,119,129,111,94,130],
[95,98,91,0,122,117,86,124],
[97,72,81,88,0,88,92,110],
[99,97,99,93,122,0,113,119],
[101,95,116,124,118,97,0,129],
[74,75,80,86,100,91,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,103,100,105,107,98,104],
[119,0,126,120,116,126,119,102],
[107,84,0,110,95,101,94,105],
[110,90,100,0,103,98,95,94],
[105,94,115,107,0,106,95,101],
[103,84,109,112,104,0,102,97],
[112,91,116,115,115,108,0,99],
[106,108,105,116,109,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,109,99,108,116,107],
[95,0,111,115,108,109,118,118],
[112,99,0,115,118,105,105,119],
[101,95,95,0,94,97,102,111],
[111,102,92,116,0,92,109,121],
[102,101,105,113,118,0,118,108],
[94,92,105,108,101,92,0,107],
[103,92,91,99,89,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,95,92,100,102,93],
[119,0,97,112,110,123,95,108],
[106,113,0,111,105,116,106,102],
[115,98,99,0,109,111,101,97],
[118,100,105,101,0,121,98,100],
[110,87,94,99,89,0,91,93],
[108,115,104,109,112,119,0,107],
[117,102,108,113,110,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,102,102,97,116,116],
[113,0,102,108,105,96,118,111],
[104,108,0,98,115,99,127,116],
[108,102,112,0,100,98,119,107],
[108,105,95,110,0,110,112,110],
[113,114,111,112,100,0,116,108],
[94,92,83,91,98,94,0,104],
[94,99,94,103,100,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,118,100,158,109,137,133],
[85,0,99,100,119,90,119,138],
[92,111,0,98,143,91,122,138],
[110,110,112,0,137,88,116,145],
[52,91,67,73,0,45,84,92],
[101,120,119,122,165,0,126,152],
[73,91,88,94,126,84,0,147],
[77,72,72,65,118,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,106,99,99,93,95],
[102,0,124,110,86,130,103,97],
[114,86,0,113,99,106,101,99],
[104,100,97,0,102,115,108,86],
[111,124,111,108,0,108,101,105],
[111,80,104,95,102,0,87,95],
[117,107,109,102,109,123,0,99],
[115,113,111,124,105,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,98,99,104,114,96],
[102,0,104,98,91,117,118,95],
[100,106,0,96,110,115,124,105],
[112,112,114,0,94,108,112,102],
[111,119,100,116,0,115,121,90],
[106,93,95,102,95,0,115,98],
[96,92,86,98,89,95,0,85],
[114,115,105,108,120,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,105,118,106,105,109],
[105,0,109,97,117,108,101,112],
[100,101,0,96,123,105,109,91],
[105,113,114,0,123,113,116,110],
[92,93,87,87,0,98,101,85],
[104,102,105,97,112,0,108,103],
[105,109,101,94,109,102,0,108],
[101,98,119,100,125,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,99,109,112,98,107],
[108,0,104,102,116,118,104,116],
[106,106,0,104,105,120,105,105],
[111,108,106,0,117,122,104,106],
[101,94,105,93,0,109,107,112],
[98,92,90,88,101,0,102,98],
[112,106,105,106,103,108,0,101],
[103,94,105,104,98,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,106,103,110,98,108],
[106,0,99,100,112,92,101,99],
[117,111,0,107,115,102,108,108],
[104,110,103,0,112,98,98,101],
[107,98,95,98,0,104,96,94],
[100,118,108,112,106,0,112,115],
[112,109,102,112,114,98,0,108],
[102,111,102,109,116,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,119,112,82,99,68,95],
[114,0,97,131,92,104,109,116],
[91,113,0,100,99,91,96,101],
[98,79,110,0,97,101,82,94],
[128,118,111,113,0,100,105,113],
[111,106,119,109,110,0,100,114],
[142,101,114,128,105,110,0,103],
[115,94,109,116,97,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,101,99,96,106,95],
[108,0,107,106,102,117,110,107],
[104,103,0,100,92,94,109,113],
[109,104,110,0,97,103,111,107],
[111,108,118,113,0,111,115,104],
[114,93,116,107,99,0,109,106],
[104,100,101,99,95,101,0,99],
[115,103,97,103,106,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,86,101,90,102,111,92],
[107,0,95,101,95,97,104,99],
[124,115,0,110,101,113,116,101],
[109,109,100,0,106,97,110,89],
[120,115,109,104,0,101,114,106],
[108,113,97,113,109,0,117,96],
[99,106,94,100,96,93,0,93],
[118,111,109,121,104,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,103,100,118,113,118,111],
[120,0,115,101,114,118,120,107],
[107,95,0,122,120,119,118,111],
[110,109,88,0,96,119,121,106],
[92,96,90,114,0,100,116,110],
[97,92,91,91,110,0,121,103],
[92,90,92,89,94,89,0,103],
[99,103,99,104,100,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,100,94,88,110,105],
[107,0,103,102,94,92,114,110],
[102,107,0,87,89,101,113,110],
[110,108,123,0,104,118,117,116],
[116,116,121,106,0,104,126,127],
[122,118,109,92,106,0,120,118],
[100,96,97,93,84,90,0,93],
[105,100,100,94,83,92,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,82,109,81,103,107],
[103,0,88,89,98,98,95,105],
[118,122,0,95,121,89,116,113],
[128,121,115,0,113,107,131,104],
[101,112,89,97,0,89,108,103],
[129,112,121,103,121,0,107,113],
[107,115,94,79,102,103,0,97],
[103,105,97,106,107,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,98,97,95,83,89],
[109,0,102,96,90,92,82,95],
[112,108,0,116,112,84,100,113],
[112,114,94,0,112,76,89,99],
[113,120,98,98,0,85,94,101],
[115,118,126,134,125,0,110,102],
[127,128,110,121,116,100,0,98],
[121,115,97,111,109,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,120,101,106,114,106],
[105,0,102,110,97,99,116,94],
[110,108,0,112,106,101,115,106],
[90,100,98,0,93,107,104,102],
[109,113,104,117,0,99,105,109],
[104,111,109,103,111,0,110,106],
[96,94,95,106,105,100,0,107],
[104,116,104,108,101,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,73,109,100,115,114],
[108,0,88,91,100,100,94,103],
[112,122,0,80,93,107,97,93],
[137,119,130,0,118,114,119,97],
[101,110,117,92,0,105,97,105],
[110,110,103,96,105,0,111,119],
[95,116,113,91,113,99,0,98],
[96,107,117,113,105,91,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,110,156,86,113,141,113],
[40,0,82,112,84,97,83,83],
[100,128,0,143,115,128,142,86],
[54,98,67,0,69,55,98,83],
[124,126,95,141,0,98,111,98],
[97,113,82,155,112,0,98,98],
[69,127,68,112,99,112,0,55],
[97,127,124,127,112,112,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,124,124,100,114,129,119],
[94,0,113,102,94,114,98,102],
[86,97,0,99,105,106,103,109],
[86,108,111,0,98,114,106,104],
[110,116,105,112,0,113,98,134],
[96,96,104,96,97,0,90,120],
[81,112,107,104,112,120,0,115],
[91,108,101,106,76,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,78,101,94,126,113,103],
[97,0,107,89,92,113,81,89],
[132,103,0,114,103,131,114,123],
[109,121,96,0,106,124,118,106],
[116,118,107,104,0,145,89,96],
[84,97,79,86,65,0,90,72],
[97,129,96,92,121,120,0,98],
[107,121,87,104,114,138,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,136,104,120,113,114,125],
[89,0,114,101,101,87,119,98],
[74,96,0,83,89,86,110,96],
[106,109,127,0,98,107,126,117],
[90,109,121,112,0,99,119,110],
[97,123,124,103,111,0,131,117],
[96,91,100,84,91,79,0,100],
[85,112,114,93,100,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,126,126,168,148,146,189],
[105,0,124,83,127,105,126,168],
[84,86,0,43,85,64,85,85],
[84,127,167,0,148,127,147,147],
[42,83,125,62,0,62,84,103],
[62,105,146,83,148,0,146,167],
[64,84,125,63,126,64,0,125],
[21,42,125,63,107,43,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,92,108,90,107,92],
[109,0,99,99,95,82,112,96],
[110,111,0,94,110,118,127,115],
[118,111,116,0,121,109,115,103],
[102,115,100,89,0,89,121,99],
[120,128,92,101,121,0,128,111],
[103,98,83,95,89,82,0,82],
[118,114,95,107,111,99,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,123,119,111,106,120,104],
[98,0,101,102,107,93,83,105],
[87,109,0,85,124,88,77,109],
[91,108,125,0,118,103,86,118],
[99,103,86,92,0,82,96,115],
[104,117,122,107,128,0,106,114],
[90,127,133,124,114,104,0,114],
[106,105,101,92,95,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,117,118,91,104,103],
[102,0,97,118,104,100,105,95],
[93,113,0,117,102,117,103,104],
[93,92,93,0,95,84,100,82],
[92,106,108,115,0,90,118,112],
[119,110,93,126,120,0,117,97],
[106,105,107,110,92,93,0,97],
[107,115,106,128,98,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,88,104,96,98,102],
[109,0,99,94,97,104,106,114],
[109,111,0,108,96,97,108,102],
[122,116,102,0,100,107,119,113],
[106,113,114,110,0,108,105,110],
[114,106,113,103,102,0,90,107],
[112,104,102,91,105,120,0,109],
[108,96,108,97,100,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,106,105,159,210,107,159],
[54,0,106,106,106,210,107,106],
[104,104,0,156,158,158,104,158],
[105,104,54,0,54,158,107,54],
[51,104,52,156,0,156,104,106],
[0,0,52,52,54,0,53,54],
[103,103,106,103,106,157,0,106],
[51,104,52,156,104,156,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,99,97,77,79,92],
[105,0,97,92,98,92,81,91],
[102,113,0,90,95,84,81,90],
[111,118,120,0,122,68,100,92],
[113,112,115,88,0,86,95,97],
[133,118,126,142,124,0,101,114],
[131,129,129,110,115,109,0,104],
[118,119,120,118,113,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,112,98,89,105,110],
[113,0,112,110,113,104,111,131],
[96,98,0,105,89,98,94,108],
[98,100,105,0,102,112,99,107],
[112,97,121,108,0,109,104,121],
[121,106,112,98,101,0,106,112],
[105,99,116,111,106,104,0,103],
[100,79,102,103,89,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,42,42,85,42,127],
[168,0,41,42,41,84,126,85],
[168,169,0,127,126,85,168,85],
[168,168,83,0,125,126,168,127],
[168,169,84,85,0,43,126,85],
[125,126,125,84,167,0,167,42],
[168,84,42,42,84,43,0,85],
[83,125,125,83,125,168,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,124,117,100,119,120],
[96,0,109,111,116,109,94,119],
[88,101,0,95,100,91,96,93],
[86,99,115,0,134,89,96,114],
[93,94,110,76,0,89,94,87],
[110,101,119,121,121,0,119,111],
[91,116,114,114,116,91,0,113],
[90,91,117,96,123,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,99,73,86,126,92],
[112,0,67,94,63,79,128,94],
[121,143,0,106,91,111,153,96],
[111,116,104,0,72,84,128,85],
[137,147,119,138,0,105,138,98],
[124,131,99,126,105,0,144,129],
[84,82,57,82,72,66,0,73],
[118,116,114,125,112,81,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,107,105,107,158,105,107],
[52,0,106,157,105,156,157,159],
[103,104,0,103,156,156,103,159],
[105,53,107,0,105,156,156,159],
[103,105,54,105,0,103,105,106],
[52,54,54,54,107,0,105,54],
[105,53,107,54,105,105,0,159],
[103,51,51,51,104,156,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,102,117,106,117,101],
[99,0,89,106,113,88,110,93],
[95,121,0,103,106,109,115,100],
[108,104,107,0,117,102,101,96],
[93,97,104,93,0,99,106,100],
[104,122,101,108,111,0,110,104],
[93,100,95,109,104,100,0,106],
[109,117,110,114,110,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,112,90,100,127,113],
[110,0,114,108,96,124,137,124],
[96,96,0,95,109,120,111,122],
[98,102,115,0,127,150,138,127],
[120,114,101,83,0,124,123,150],
[110,86,90,60,86,0,88,86],
[83,73,99,72,87,122,0,112],
[97,86,88,83,60,124,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,108,116,121,119,118],
[107,0,103,100,110,105,104,113],
[103,107,0,102,97,114,101,107],
[102,110,108,0,119,115,121,102],
[94,100,113,91,0,113,103,117],
[89,105,96,95,97,0,111,114],
[91,106,109,89,107,99,0,117],
[92,97,103,108,93,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,103,120,97,119,97],
[97,0,106,111,90,96,77,75],
[95,104,0,114,109,101,102,105],
[107,99,96,0,100,78,86,91],
[90,120,101,110,0,93,89,85],
[113,114,109,132,117,0,99,99],
[91,133,108,124,121,111,0,96],
[113,135,105,119,125,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,129,112,96,117,129,118],
[105,0,123,106,101,101,114,116],
[81,87,0,82,80,83,111,108],
[98,104,128,0,100,111,115,105],
[114,109,130,110,0,100,114,116],
[93,109,127,99,110,0,111,113],
[81,96,99,95,96,99,0,103],
[92,94,102,105,94,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,114,103,124,121,112],
[96,0,135,95,110,124,125,122],
[99,75,0,79,101,93,109,90],
[96,115,131,0,112,121,114,119],
[107,100,109,98,0,112,112,116],
[86,86,117,89,98,0,90,112],
[89,85,101,96,98,120,0,94],
[98,88,120,91,94,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,99,108,108,105,108],
[101,0,97,102,109,106,110,97],
[99,113,0,98,112,102,116,98],
[111,108,112,0,109,102,122,116],
[102,101,98,101,0,97,105,96],
[102,104,108,108,113,0,100,105],
[105,100,94,88,105,110,0,96],
[102,113,112,94,114,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,82,108,94,89,91],
[108,0,104,87,107,108,105,108],
[122,106,0,102,111,103,89,118],
[128,123,108,0,132,105,97,117],
[102,103,99,78,0,88,94,103],
[116,102,107,105,122,0,95,115],
[121,105,121,113,116,115,0,113],
[119,102,92,93,107,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,101,96,99,98,98],
[110,0,102,110,97,98,109,103],
[101,108,0,102,105,100,112,109],
[109,100,108,0,105,107,109,104],
[114,113,105,105,0,111,101,104],
[111,112,110,103,99,0,107,111],
[112,101,98,101,109,103,0,105],
[112,107,101,106,106,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,106,114,116,105,115],
[105,0,108,98,108,114,106,104],
[95,102,0,94,106,108,90,108],
[104,112,116,0,97,116,109,116],
[96,102,104,113,0,116,102,101],
[94,96,102,94,94,0,83,102],
[105,104,120,101,108,127,0,112],
[95,106,102,94,109,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,84,103,91,87,94,98],
[107,0,84,105,101,99,89,105],
[126,126,0,103,108,106,97,108],
[107,105,107,0,96,96,101,119],
[119,109,102,114,0,115,108,121],
[123,111,104,114,95,0,112,122],
[116,121,113,109,102,98,0,103],
[112,105,102,91,89,88,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,91,111,118,109,101,117],
[94,0,99,111,110,101,96,106],
[119,111,0,113,111,125,96,128],
[99,99,97,0,111,108,107,103],
[92,100,99,99,0,105,98,101],
[101,109,85,102,105,0,81,109],
[109,114,114,103,112,129,0,130],
[93,104,82,107,109,101,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,119,107,100,101,104],
[101,0,95,107,105,100,99,114],
[105,115,0,107,119,108,112,112],
[91,103,103,0,109,113,104,106],
[103,105,91,101,0,94,101,100],
[110,110,102,97,116,0,112,108],
[109,111,98,106,109,98,0,116],
[106,96,98,104,110,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,92,109,93,86,101],
[102,0,97,102,133,107,91,114],
[101,113,0,97,114,99,114,108],
[118,108,113,0,106,111,102,103],
[101,77,96,104,0,87,78,114],
[117,103,111,99,123,0,96,104],
[124,119,96,108,132,114,0,102],
[109,96,102,107,96,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,104,101,110,112,100,106],
[89,0,101,98,101,105,94,110],
[106,109,0,116,116,110,98,112],
[109,112,94,0,104,108,105,103],
[100,109,94,106,0,105,101,114],
[98,105,100,102,105,0,88,111],
[110,116,112,105,109,122,0,115],
[104,100,98,107,96,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,83,107,109,92,107],
[111,0,110,100,112,107,99,105],
[108,100,0,89,116,98,108,93],
[127,110,121,0,121,114,105,112],
[103,98,94,89,0,101,103,94],
[101,103,112,96,109,0,103,103],
[118,111,102,105,107,107,0,109],
[103,105,117,98,116,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,110,108,97,113,111],
[112,0,86,112,106,92,84,90],
[113,124,0,127,115,120,94,113],
[100,98,83,0,84,94,87,89],
[102,104,95,126,0,107,107,109],
[113,118,90,116,103,0,116,101],
[97,126,116,123,103,94,0,89],
[99,120,97,121,101,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,105,120,102,106,114],
[102,0,100,102,107,107,108,117],
[116,110,0,109,107,103,109,122],
[105,108,101,0,114,106,102,108],
[90,103,103,96,0,96,88,115],
[108,103,107,104,114,0,94,109],
[104,102,101,108,122,116,0,116],
[96,93,88,102,95,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,97,101,101,106,112],
[106,0,97,103,101,90,109,90],
[108,113,0,106,103,109,108,108],
[113,107,104,0,97,104,113,108],
[109,109,107,113,0,103,117,116],
[109,120,101,106,107,0,118,104],
[104,101,102,97,93,92,0,104],
[98,120,102,102,94,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,109,96,97,94,97],
[116,0,107,117,110,92,111,103],
[111,103,0,106,108,103,97,103],
[101,93,104,0,106,90,95,88],
[114,100,102,104,0,105,105,106],
[113,118,107,120,105,0,97,98],
[116,99,113,115,105,113,0,107],
[113,107,107,122,104,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,97,111,108,94,129],
[114,0,106,96,111,85,105,126],
[95,104,0,91,113,81,83,128],
[113,114,119,0,123,99,111,137],
[99,99,97,87,0,98,98,111],
[102,125,129,111,112,0,98,128],
[116,105,127,99,112,112,0,111],
[81,84,82,73,99,82,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,104,125,83,127,125,83],
[84,0,65,62,83,85,42,82],
[106,145,0,61,104,149,106,83],
[85,148,149,0,106,149,147,103],
[127,127,106,104,0,147,127,105],
[83,125,61,61,63,0,85,101],
[85,168,104,63,83,125,0,83],
[127,128,127,107,105,109,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,108,93,104,95,115],
[101,0,109,108,104,112,91,106],
[103,101,0,110,111,113,105,108],
[102,102,100,0,91,102,103,108],
[117,106,99,119,0,111,106,118],
[106,98,97,108,99,0,96,116],
[115,119,105,107,104,114,0,116],
[95,104,102,102,92,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,110,97,90,112,113],
[102,0,107,98,99,91,107,107],
[106,103,0,109,96,88,101,104],
[100,112,101,0,94,96,101,111],
[113,111,114,116,0,94,111,119],
[120,119,122,114,116,0,104,114],
[98,103,109,109,99,106,0,114],
[97,103,106,99,91,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,109,112,99,110,116],
[112,0,103,100,105,101,114,90],
[113,107,0,111,109,98,131,120],
[101,110,99,0,103,105,105,100],
[98,105,101,107,0,93,110,111],
[111,109,112,105,117,0,131,122],
[100,96,79,105,100,79,0,108],
[94,120,90,110,99,88,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,105,122,107,114,105],
[113,0,116,105,133,108,105,123],
[95,94,0,98,107,100,106,97],
[105,105,112,0,119,105,108,113],
[88,77,103,91,0,97,88,103],
[103,102,110,105,113,0,116,113],
[96,105,104,102,122,94,0,111],
[105,87,113,97,107,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,84,138,109,95,131,147],
[116,0,92,119,110,100,103,142],
[126,118,0,156,144,92,139,171],
[72,91,54,0,105,53,81,124],
[101,100,66,105,0,111,126,126],
[115,110,118,157,99,0,135,161],
[79,107,71,129,84,75,0,124],
[63,68,39,86,84,49,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,113,107,112,105,112],
[108,0,99,109,99,104,105,109],
[96,111,0,111,105,109,110,115],
[97,101,99,0,104,112,107,105],
[103,111,105,106,0,105,103,112],
[98,106,101,98,105,0,113,111],
[105,105,100,103,107,97,0,110],
[98,101,95,105,98,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,105,87,88,70,99],
[117,0,120,126,119,109,109,102],
[107,90,0,99,90,112,83,92],
[105,84,111,0,91,114,88,102],
[123,91,120,119,0,114,93,112],
[122,101,98,96,96,0,91,88],
[140,101,127,122,117,119,0,120],
[111,108,118,108,98,122,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,130,106,108,107,110],
[91,0,104,111,98,103,97,109],
[105,106,0,112,113,108,110,103],
[80,99,98,0,87,92,94,95],
[104,112,97,123,0,108,105,111],
[102,107,102,118,102,0,99,105],
[103,113,100,116,105,111,0,114],
[100,101,107,115,99,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,93,87,108,109,109],
[105,0,114,84,91,83,115,103],
[93,96,0,71,81,98,108,88],
[117,126,139,0,109,102,118,122],
[123,119,129,101,0,120,114,118],
[102,127,112,108,90,0,117,100],
[101,95,102,92,96,93,0,82],
[101,107,122,88,92,110,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,128,114,104,91,112],
[113,0,115,127,99,86,88,120],
[103,95,0,118,100,95,80,107],
[82,83,92,0,99,71,75,92],
[96,111,110,111,0,92,94,106],
[106,124,115,139,118,0,99,109],
[119,122,130,135,116,111,0,104],
[98,90,103,118,104,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,100,99,116,104,113],
[98,0,99,108,110,119,109,103],
[110,111,0,103,104,117,108,102],
[110,102,107,0,107,124,108,114],
[111,100,106,103,0,123,125,111],
[94,91,93,86,87,0,91,78],
[106,101,102,102,85,119,0,96],
[97,107,108,96,99,132,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,106,104,103,111,109],
[113,0,82,90,96,112,110,91],
[108,128,0,118,105,108,119,118],
[104,120,92,0,101,116,107,111],
[106,114,105,109,0,108,108,104],
[107,98,102,94,102,0,106,90],
[99,100,91,103,102,104,0,107],
[101,119,92,99,106,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,82,85,88,86,72,60],
[105,0,72,64,65,91,97,49],
[128,138,0,76,99,100,106,106],
[125,146,134,0,109,92,130,102],
[122,145,111,101,0,98,135,94],
[124,119,110,118,112,0,102,110],
[138,113,104,80,75,108,0,94],
[150,161,104,108,116,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,103,101,98,90,108],
[120,0,110,119,99,115,100,116],
[105,100,0,105,111,106,103,96],
[107,91,105,0,94,93,92,93],
[109,111,99,116,0,108,95,117],
[112,95,104,117,102,0,108,118],
[120,110,107,118,115,102,0,116],
[102,94,114,117,93,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,48,80,83,64,48,48],
[126,0,80,96,113,96,113,97],
[162,130,0,98,115,146,81,101],
[130,114,112,0,98,113,95,101],
[127,97,95,112,0,80,112,96],
[146,114,64,97,130,0,64,97],
[162,97,129,115,98,146,0,115],
[162,113,109,109,114,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,110,108,109,109,103],
[115,0,99,101,110,104,98,96],
[99,111,0,93,107,110,95,108],
[100,109,117,0,107,109,105,94],
[102,100,103,103,0,106,109,119],
[101,106,100,101,104,0,93,105],
[101,112,115,105,101,117,0,115],
[107,114,102,116,91,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,107,99,107,101,100],
[98,0,95,107,100,110,112,103],
[107,115,0,110,109,109,108,100],
[103,103,100,0,98,101,112,103],
[111,110,101,112,0,102,109,114],
[103,100,101,109,108,0,103,104],
[109,98,102,98,101,107,0,96],
[110,107,110,107,96,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,73,104,110,96,80],
[116,0,122,62,119,104,92,92],
[110,88,0,78,99,95,92,82],
[137,148,132,0,134,129,112,100],
[106,91,111,76,0,106,87,89],
[100,106,115,81,104,0,98,116],
[114,118,118,98,123,112,0,108],
[130,118,128,110,121,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,99,100,92,95,92],
[115,0,103,103,102,102,89,104],
[114,107,0,114,105,115,104,114],
[111,107,96,0,116,111,106,117],
[110,108,105,94,0,105,102,109],
[118,108,95,99,105,0,97,104],
[115,121,106,104,108,113,0,111],
[118,106,96,93,101,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,101,104,96,102,109],
[113,0,115,105,114,115,111,123],
[106,95,0,98,102,94,104,115],
[109,105,112,0,113,108,111,114],
[106,96,108,97,0,91,98,100],
[114,95,116,102,119,0,118,104],
[108,99,106,99,112,92,0,111],
[101,87,95,96,110,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,132,121,114,95,113],
[95,0,97,111,107,105,95,92],
[95,113,0,123,112,107,111,105],
[78,99,87,0,103,91,91,90],
[89,103,98,107,0,101,99,86],
[96,105,103,119,109,0,104,87],
[115,115,99,119,111,106,0,115],
[97,118,105,120,124,123,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,105,97,86,89,105],
[109,0,111,106,103,110,95,105],
[107,99,0,106,99,96,92,108],
[105,104,104,0,102,95,92,109],
[113,107,111,108,0,107,102,116],
[124,100,114,115,103,0,109,103],
[121,115,118,118,108,101,0,118],
[105,105,102,101,94,107,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,125,144,116,103,101,129],
[104,0,122,119,120,107,108,110],
[85,88,0,99,100,98,86,104],
[66,91,111,0,82,82,63,97],
[94,90,110,128,0,107,100,115],
[107,103,112,128,103,0,112,112],
[109,102,124,147,110,98,0,121],
[81,100,106,113,95,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,113,100,101,103,108],
[103,0,98,102,106,101,106,106],
[111,112,0,104,110,96,108,112],
[97,108,106,0,103,101,99,104],
[110,104,100,107,0,102,97,95],
[109,109,114,109,108,0,105,108],
[107,104,102,111,113,105,0,104],
[102,104,98,106,115,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,124,115,107,107,113,105],
[87,0,114,98,104,97,96,98],
[86,96,0,107,96,88,94,92],
[95,112,103,0,102,96,111,99],
[103,106,114,108,0,85,95,100],
[103,113,122,114,125,0,108,115],
[97,114,116,99,115,102,0,109],
[105,112,118,111,110,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,90,83,90,86,72],
[115,0,111,102,90,119,104,96],
[120,99,0,98,86,96,100,101],
[120,108,112,0,104,105,91,89],
[127,120,124,106,0,104,99,94],
[120,91,114,105,106,0,114,105],
[124,106,110,119,111,96,0,94],
[138,114,109,121,116,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,105,106,0,105,53],
[105,0,53,0,53,52,105,105],
[104,157,0,105,210,104,157,157],
[105,210,105,0,158,105,210,105],
[104,157,0,52,0,52,157,52],
[210,158,106,105,158,0,105,106],
[105,105,53,0,53,105,0,53],
[157,105,53,105,158,104,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,99,117,103,98,111],
[100,0,109,120,102,112,108,120],
[89,101,0,94,112,98,102,91],
[111,90,116,0,111,103,107,103],
[93,108,98,99,0,95,105,111],
[107,98,112,107,115,0,100,105],
[112,102,108,103,105,110,0,104],
[99,90,119,107,99,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,102,96,118,95,110],
[111,0,102,108,106,109,91,100],
[115,108,0,111,109,113,104,95],
[108,102,99,0,96,103,92,107],
[114,104,101,114,0,111,114,119],
[92,101,97,107,99,0,95,103],
[115,119,106,118,96,115,0,119],
[100,110,115,103,91,107,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,101,104,97,97,97],
[117,0,103,110,102,107,109,106],
[114,107,0,102,117,121,110,115],
[109,100,108,0,105,103,105,102],
[106,108,93,105,0,109,115,105],
[113,103,89,107,101,0,99,106],
[113,101,100,105,95,111,0,105],
[113,104,95,108,105,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,133,86,121,98,131,99],
[121,0,142,107,64,94,139,107],
[77,68,0,65,97,65,120,79],
[124,103,145,0,88,86,122,87],
[89,146,113,122,0,98,132,134],
[112,116,145,124,112,0,142,103],
[79,71,90,88,78,68,0,56],
[111,103,131,123,76,107,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,108,108,95,106,110],
[105,0,98,105,99,93,103,106],
[110,112,0,128,97,106,109,120],
[102,105,82,0,105,98,111,110],
[102,111,113,105,0,101,109,128],
[115,117,104,112,109,0,117,119],
[104,107,101,99,101,93,0,115],
[100,104,90,100,82,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,125,115,96,93,102,102],
[104,0,118,116,123,125,120,103],
[85,92,0,100,98,105,86,95],
[95,94,110,0,109,107,112,92],
[114,87,112,101,0,113,107,111],
[117,85,105,103,97,0,109,101],
[108,90,124,98,103,101,0,103],
[108,107,115,118,99,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,113,105,106,98,106],
[109,0,99,103,92,110,108,110],
[113,111,0,109,106,107,108,105],
[97,107,101,0,106,94,106,94],
[105,118,104,104,0,107,105,107],
[104,100,103,116,103,0,99,112],
[112,102,102,104,105,111,0,102],
[104,100,105,116,103,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,107,105,105,103,86],
[106,0,120,113,107,117,103,93],
[99,90,0,92,81,105,80,90],
[103,97,118,0,84,101,96,98],
[105,103,129,126,0,118,96,106],
[105,93,105,109,92,0,105,109],
[107,107,130,114,114,105,0,102],
[124,117,120,112,104,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,99,110,91,96,100],
[106,0,116,104,112,101,118,104],
[111,94,0,100,121,110,110,95],
[111,106,110,0,108,101,117,100],
[100,98,89,102,0,83,95,92],
[119,109,100,109,127,0,114,105],
[114,92,100,93,115,96,0,81],
[110,106,115,110,118,105,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,116,121,108,107,101],
[102,0,102,114,106,109,103,100],
[94,108,0,96,110,98,88,93],
[94,96,114,0,111,107,104,98],
[89,104,100,99,0,102,98,101],
[102,101,112,103,108,0,102,109],
[103,107,122,106,112,108,0,109],
[109,110,117,112,109,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,101,115,107,108,99],
[100,0,114,96,115,94,106,89],
[100,96,0,88,96,88,88,84],
[109,114,122,0,113,106,101,100],
[95,95,114,97,0,102,113,106],
[103,116,122,104,108,0,107,100],
[102,104,122,109,97,103,0,97],
[111,121,126,110,104,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,100,108,100,84,102,90],
[126,0,104,115,112,110,110,118],
[110,106,0,107,104,112,104,102],
[102,95,103,0,95,87,94,84],
[110,98,106,115,0,85,109,103],
[126,100,98,123,125,0,95,96],
[108,100,106,116,101,115,0,83],
[120,92,108,126,107,114,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,89,122,110,85,98,100],
[60,0,75,87,98,97,75,61],
[121,135,0,108,95,119,59,96],
[88,123,102,0,101,85,74,99],
[100,112,115,109,0,98,87,110],
[125,113,91,125,112,0,86,89],
[112,135,151,136,123,124,0,88],
[110,149,114,111,100,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,112,97,106,110,126],
[114,0,98,112,98,101,112,118],
[104,112,0,116,110,114,126,114],
[98,98,94,0,103,100,120,114],
[113,112,100,107,0,98,114,118],
[104,109,96,110,112,0,104,123],
[100,98,84,90,96,106,0,105],
[84,92,96,96,92,87,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,107,113,102,95,111],
[103,0,110,105,112,109,105,105],
[101,100,0,102,114,96,106,104],
[103,105,108,0,114,101,103,102],
[97,98,96,96,0,95,98,103],
[108,101,114,109,115,0,111,103],
[115,105,104,107,112,99,0,101],
[99,105,106,108,107,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,98,95,80,109,95],
[103,0,104,96,98,102,104,86],
[114,106,0,115,109,104,101,91],
[112,114,95,0,114,109,113,104],
[115,112,101,96,0,101,116,104],
[130,108,106,101,109,0,99,106],
[101,106,109,97,94,111,0,103],
[115,124,119,106,106,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,112,107,89,98,114],
[111,0,121,125,105,98,106,106],
[103,89,0,108,101,89,90,104],
[98,85,102,0,101,90,94,104],
[103,105,109,109,0,92,93,100],
[121,112,121,120,118,0,104,129],
[112,104,120,116,117,106,0,116],
[96,104,106,106,110,81,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,95,104,101,106,100],
[100,0,104,101,110,109,106,89],
[91,106,0,89,99,96,100,95],
[115,109,121,0,111,123,102,105],
[106,100,111,99,0,109,107,97],
[109,101,114,87,101,0,123,90],
[104,104,110,108,103,87,0,99],
[110,121,115,105,113,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,70,104,79,106,128],
[118,0,84,81,128,128,128,105],
[119,126,0,59,139,140,128,130],
[140,129,151,0,104,126,139,129],
[106,82,71,106,0,92,119,72],
[131,82,70,84,118,0,131,84],
[104,82,82,71,91,79,0,118],
[82,105,80,81,138,126,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,92,108,92,104,98],
[112,0,110,115,100,92,114,106],
[102,100,0,112,99,93,110,100],
[118,95,98,0,109,108,105,95],
[102,110,111,101,0,103,109,92],
[118,118,117,102,107,0,119,95],
[106,96,100,105,101,91,0,99],
[112,104,110,115,118,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,103,88,87,86,94,100],
[120,0,115,111,99,101,112,113],
[107,95,0,107,100,91,102,105],
[122,99,103,0,100,93,102,102],
[123,111,110,110,0,112,105,110],
[124,109,119,117,98,0,116,117],
[116,98,108,108,105,94,0,103],
[110,97,105,108,100,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,98,97,91,104,94,100],
[122,0,111,98,110,115,104,105],
[112,99,0,104,109,114,99,97],
[113,112,106,0,117,113,104,110],
[119,100,101,93,0,99,93,93],
[106,95,96,97,111,0,102,97],
[116,106,111,106,117,108,0,105],
[110,105,113,100,117,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,118,126,109,119,117],
[89,0,97,105,109,103,105,110],
[111,113,0,111,105,115,102,117],
[92,105,99,0,104,102,99,106],
[84,101,105,106,0,104,97,101],
[101,107,95,108,106,0,93,119],
[91,105,108,111,113,117,0,118],
[93,100,93,104,109,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,102,108,102,121,112],
[98,0,103,115,104,92,102,120],
[96,107,0,98,95,96,117,112],
[108,95,112,0,101,93,109,112],
[102,106,115,109,0,108,124,128],
[108,118,114,117,102,0,110,131],
[89,108,93,101,86,100,0,112],
[98,90,98,98,82,79,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,129,110,113,100,94,105],
[114,0,112,93,97,107,98,87],
[81,98,0,98,80,81,77,75],
[100,117,112,0,92,101,103,77],
[97,113,130,118,0,116,102,79],
[110,103,129,109,94,0,106,85],
[116,112,133,107,108,104,0,92],
[105,123,135,133,131,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,109,115,104,128,127],
[93,0,101,95,101,94,109,113],
[96,109,0,107,116,102,111,118],
[101,115,103,0,94,108,127,125],
[95,109,94,116,0,103,117,121],
[106,116,108,102,107,0,109,109],
[82,101,99,83,93,101,0,97],
[83,97,92,85,89,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,119,110,111,118,113],
[106,0,110,107,107,100,104,91],
[106,100,0,102,102,110,96,97],
[91,103,108,0,97,100,102,91],
[100,103,108,113,0,109,106,95],
[99,110,100,110,101,0,108,92],
[92,106,114,108,104,102,0,96],
[97,119,113,119,115,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,106,117,102,87,112],
[101,0,101,94,111,99,107,100],
[108,109,0,102,110,108,85,108],
[104,116,108,0,107,98,96,110],
[93,99,100,103,0,90,91,96],
[108,111,102,112,120,0,109,125],
[123,103,125,114,119,101,0,115],
[98,110,102,100,114,85,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,107,103,113,98,126],
[100,0,54,97,112,115,54,114],
[102,156,0,117,123,125,122,114],
[103,113,93,0,103,95,89,92],
[107,98,87,107,0,111,65,121],
[97,95,85,115,99,0,95,108],
[112,156,88,121,145,115,0,114],
[84,96,96,118,89,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,112,112,112,99,125],
[98,0,108,101,94,98,97,108],
[85,102,0,96,86,88,92,102],
[98,109,114,0,102,103,94,107],
[98,116,124,108,0,97,103,107],
[98,112,122,107,113,0,97,105],
[111,113,118,116,107,113,0,98],
[85,102,108,103,103,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,103,93,109,89,101],
[114,0,110,100,102,101,103,109],
[107,100,0,98,104,96,94,98],
[107,110,112,0,113,107,106,104],
[117,108,106,97,0,107,104,105],
[101,109,114,103,103,0,98,106],
[121,107,116,104,106,112,0,114],
[109,101,112,106,105,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,119,106,106,117,96],
[98,0,102,118,96,117,110,107],
[109,108,0,109,103,98,104,102],
[91,92,101,0,95,100,109,110],
[104,114,107,115,0,111,117,112],
[104,93,112,110,99,0,99,98],
[93,100,106,101,93,111,0,113],
[114,103,108,100,98,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,91,87,103,71,89,99],
[104,0,100,101,113,98,99,102],
[119,110,0,101,126,111,117,111],
[123,109,109,0,127,99,113,122],
[107,97,84,83,0,86,93,82],
[139,112,99,111,124,0,113,105],
[121,111,93,97,117,97,0,106],
[111,108,99,88,128,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,115,117,119,120,98],
[88,0,100,112,98,109,89,80],
[105,110,0,106,100,130,108,104],
[95,98,104,0,93,101,98,94],
[93,112,110,117,0,111,92,106],
[91,101,80,109,99,0,90,89],
[90,121,102,112,118,120,0,82],
[112,130,106,116,104,121,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,76,58,57,77,38,115],
[113,0,132,114,94,94,57,113],
[134,78,0,116,77,77,77,96],
[152,96,94,0,57,96,57,134],
[153,116,133,153,0,77,116,96],
[133,116,133,114,133,0,96,113],
[172,153,133,153,94,114,0,114],
[95,97,114,76,114,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,101,114,102,106,92,104],
[81,0,118,114,97,117,107,125],
[109,92,0,100,115,96,85,103],
[96,96,110,0,108,97,91,120],
[108,113,95,102,0,98,104,102],
[104,93,114,113,112,0,98,115],
[118,103,125,119,106,112,0,114],
[106,85,107,90,108,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,114,93,111,93,98],
[118,0,95,115,108,115,115,102],
[115,115,0,115,100,101,105,113],
[96,95,95,0,98,103,100,100],
[117,102,110,112,0,120,106,103],
[99,95,109,107,90,0,102,101],
[117,95,105,110,104,108,0,102],
[112,108,97,110,107,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,113,108,112,116,104],
[109,0,104,108,106,110,101,105],
[108,106,0,106,94,99,108,99],
[97,102,104,0,107,104,108,102],
[102,104,116,103,0,113,101,96],
[98,100,111,106,97,0,105,106],
[94,109,102,102,109,105,0,102],
[106,105,111,108,114,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,127,103,109,102,109,111],
[106,0,122,109,109,105,118,110],
[83,88,0,95,92,92,104,94],
[107,101,115,0,103,107,122,111],
[101,101,118,107,0,109,111,98],
[108,105,118,103,101,0,108,106],
[101,92,106,88,99,102,0,94],
[99,100,116,99,112,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,108,109,65,106,97],
[94,0,121,123,120,111,159,88],
[102,89,0,108,99,68,118,98],
[102,87,102,0,121,67,85,118],
[101,90,111,89,0,69,118,77],
[145,99,142,143,141,0,150,149],
[104,51,92,125,92,60,0,102],
[113,122,112,92,133,61,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,90,103,101,107,105],
[99,0,98,92,95,104,112,105],
[110,112,0,102,102,116,113,111],
[120,118,108,0,105,112,112,110],
[107,115,108,105,0,113,110,103],
[109,106,94,98,97,0,109,108],
[103,98,97,98,100,101,0,109],
[105,105,99,100,107,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,175,140,106,105,105,106],
[139,0,140,139,105,69,34,104],
[35,70,0,70,70,104,69,70],
[70,71,140,0,105,69,69,70],
[104,105,140,105,0,69,105,70],
[105,141,106,141,141,0,70,141],
[105,176,141,141,105,140,0,141],
[104,106,140,140,140,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,137,102,107,120,102,123],
[104,0,125,115,98,108,126,110],
[73,85,0,88,91,70,98,93],
[108,95,122,0,113,106,113,109],
[103,112,119,97,0,98,76,109],
[90,102,140,104,112,0,99,110],
[108,84,112,97,134,111,0,119],
[87,100,117,101,101,100,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,113,104,117,112,107],
[99,0,116,95,101,110,98,115],
[98,94,0,90,111,103,100,112],
[97,115,120,0,105,110,92,112],
[106,109,99,105,0,108,105,114],
[93,100,107,100,102,0,92,89],
[98,112,110,118,105,118,0,114],
[103,95,98,98,96,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,132,113,102,111,104,116],
[112,0,119,104,106,114,104,111],
[78,91,0,76,95,97,81,103],
[97,106,134,0,113,108,84,115],
[108,104,115,97,0,110,107,116],
[99,96,113,102,100,0,96,112],
[106,106,129,126,103,114,0,126],
[94,99,107,95,94,98,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,116,117,102,97,105],
[105,0,112,119,108,108,111,115],
[99,98,0,112,102,112,114,111],
[94,91,98,0,110,105,95,101],
[93,102,108,100,0,96,89,96],
[108,102,98,105,114,0,99,91],
[113,99,96,115,121,111,0,114],
[105,95,99,109,114,119,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,114,105,106,104,114],
[101,0,103,109,104,99,110,110],
[99,107,0,110,107,110,110,117],
[96,101,100,0,104,94,104,104],
[105,106,103,106,0,103,107,108],
[104,111,100,116,107,0,109,123],
[106,100,100,106,103,101,0,109],
[96,100,93,106,102,87,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,100,95,113,108,110],
[101,0,93,98,110,96,108,100],
[107,117,0,100,99,113,102,106],
[110,112,110,0,100,112,106,105],
[115,100,111,110,0,125,117,128],
[97,114,97,98,85,0,100,89],
[102,102,108,104,93,110,0,114],
[100,110,104,105,82,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,84,85,89,87,87],
[110,0,104,90,112,97,97,85],
[116,106,0,97,108,84,100,95],
[126,120,113,0,123,112,96,102],
[125,98,102,87,0,99,95,100],
[121,113,126,98,111,0,107,86],
[123,113,110,114,115,103,0,111],
[123,125,115,108,110,124,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,96,116,106,113,106],
[103,0,101,85,117,103,109,93],
[98,109,0,106,122,105,108,93],
[114,125,104,0,119,107,121,110],
[94,93,88,91,0,95,91,86],
[104,107,105,103,115,0,93,101],
[97,101,102,89,119,117,0,103],
[104,117,117,100,124,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,105,123,104,127,123],
[101,0,118,93,117,124,103,116],
[100,92,0,94,111,108,110,114],
[105,117,116,0,125,122,129,122],
[87,93,99,85,0,103,98,118],
[106,86,102,88,107,0,114,117],
[83,107,100,81,112,96,0,113],
[87,94,96,88,92,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,115,109,107,110,104],
[107,0,122,101,105,113,101,100],
[93,88,0,98,92,86,88,92],
[95,109,112,0,112,98,85,103],
[101,105,118,98,0,105,99,95],
[103,97,124,112,105,0,99,107],
[100,109,122,125,111,111,0,109],
[106,110,118,107,115,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,104,106,94,110,112],
[106,0,100,111,105,104,101,100],
[120,110,0,125,115,128,102,113],
[106,99,85,0,94,101,103,95],
[104,105,95,116,0,106,98,100],
[116,106,82,109,104,0,96,110],
[100,109,108,107,112,114,0,127],
[98,110,97,115,110,100,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,113,108,117,105,108],
[100,0,93,98,102,106,96,106],
[104,117,0,119,108,114,107,121],
[97,112,91,0,101,106,89,106],
[102,108,102,109,0,107,95,105],
[93,104,96,104,103,0,91,105],
[105,114,103,121,115,119,0,116],
[102,104,89,104,105,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,78,60,80,86,95,74],
[151,0,84,114,99,114,94,99],
[132,126,0,112,111,107,121,102],
[150,96,98,0,90,122,96,79],
[130,111,99,120,0,111,107,113],
[124,96,103,88,99,0,97,70],
[115,116,89,114,103,113,0,112],
[136,111,108,131,97,140,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,80,97,97,98,114,102],
[115,0,103,108,93,106,118,117],
[130,107,0,88,107,114,124,125],
[113,102,122,0,99,103,117,122],
[113,117,103,111,0,105,125,116],
[112,104,96,107,105,0,123,115],
[96,92,86,93,85,87,0,93],
[108,93,85,88,94,95,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,90,78,77,76,136],
[106,0,153,106,108,92,77,107],
[102,57,0,87,120,120,74,104],
[120,104,123,0,108,122,93,106],
[132,102,90,102,0,74,44,87],
[133,118,90,88,136,0,105,120],
[134,133,136,117,166,105,0,132],
[74,103,106,104,123,90,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,108,96,113,98,117],
[98,0,110,101,101,107,103,102],
[94,100,0,101,105,119,107,115],
[102,109,109,0,104,114,98,108],
[114,109,105,106,0,113,100,113],
[97,103,91,96,97,0,91,95],
[112,107,103,112,110,119,0,105],
[93,108,95,102,97,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,109,100,98,105,96],
[92,0,121,102,103,100,107,96],
[98,89,0,94,94,97,89,93],
[101,108,116,0,107,115,112,111],
[110,107,116,103,0,102,112,91],
[112,110,113,95,108,0,121,95],
[105,103,121,98,98,89,0,95],
[114,114,117,99,119,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,88,106,100,122,99,116],
[111,0,102,95,91,106,106,113],
[122,108,0,111,104,95,112,124],
[104,115,99,0,96,112,98,108],
[110,119,106,114,0,104,124,126],
[88,104,115,98,106,0,107,124],
[111,104,98,112,86,103,0,113],
[94,97,86,102,84,86,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,105,103,113,107,106],
[112,0,97,102,97,101,100,100],
[101,113,0,97,107,110,107,102],
[105,108,113,0,101,117,100,108],
[107,113,103,109,0,103,102,104],
[97,109,100,93,107,0,101,100],
[103,110,103,110,108,109,0,105],
[104,110,108,102,106,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,98,97,88,96,101],
[99,0,100,96,99,105,99,99],
[110,110,0,91,100,89,103,89],
[112,114,119,0,98,95,107,102],
[113,111,110,112,0,92,101,99],
[122,105,121,115,118,0,115,121],
[114,111,107,103,109,95,0,105],
[109,111,121,108,111,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,107,110,106,89,117],
[102,0,106,120,110,117,108,103],
[114,104,0,120,113,112,104,115],
[103,90,90,0,95,98,89,96],
[100,100,97,115,0,109,103,104],
[104,93,98,112,101,0,103,111],
[121,102,106,121,107,107,0,114],
[93,107,95,114,106,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,105,113,105,110,99],
[102,0,111,109,105,96,100,95],
[97,99,0,104,109,101,102,88],
[105,101,106,0,99,102,104,94],
[97,105,101,111,0,99,101,94],
[105,114,109,108,111,0,113,105],
[100,110,108,106,109,97,0,94],
[111,115,122,116,116,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,86,133,103,98,94,95],
[117,0,96,123,109,104,120,120],
[124,114,0,133,102,101,104,100],
[77,87,77,0,89,90,91,99],
[107,101,108,121,0,113,106,109],
[112,106,109,120,97,0,103,111],
[116,90,106,119,104,107,0,106],
[115,90,110,111,101,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,86,100,84,81,90,85],
[115,0,107,113,98,99,108,103],
[124,103,0,105,96,112,105,114],
[110,97,105,0,96,86,97,98],
[126,112,114,114,0,95,103,107],
[129,111,98,124,115,0,104,106],
[120,102,105,113,107,106,0,106],
[125,107,96,112,103,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,111,85,108,92,119,117],
[119,0,104,107,110,114,136,109],
[99,106,0,87,98,109,119,104],
[125,103,123,0,125,108,130,116],
[102,100,112,85,0,93,120,116],
[118,96,101,102,117,0,134,119],
[91,74,91,80,90,76,0,91],
[93,101,106,94,94,91,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,105,105,0,105,105,105],
[210,0,105,210,210,105,210,210],
[105,105,0,105,105,105,210,210],
[105,0,105,0,105,105,105,105],
[210,0,105,105,0,105,105,105],
[105,105,105,105,105,0,105,105],
[105,0,0,105,105,105,0,105],
[105,0,0,105,105,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,130,154,104,128,182,130],
[28,0,105,129,78,26,134,55],
[80,105,0,102,79,77,132,105],
[56,81,108,0,81,28,83,28],
[106,132,131,129,0,104,185,106],
[82,184,133,182,106,0,184,131],
[28,76,78,127,25,26,0,25],
[80,155,105,182,104,79,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,95,125,107,116,90],
[101,0,110,90,124,89,120,113],
[98,100,0,107,120,91,104,87],
[115,120,103,0,109,104,83,102],
[85,86,90,101,0,91,76,57],
[103,121,119,106,119,0,130,95],
[94,90,106,127,134,80,0,90],
[120,97,123,108,153,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,104,107,116,127,98,113],
[120,0,117,96,124,118,110,116],
[106,93,0,100,102,127,84,104],
[103,114,110,0,116,121,103,119],
[94,86,108,94,0,115,100,106],
[83,92,83,89,95,0,82,92],
[112,100,126,107,110,128,0,112],
[97,94,106,91,104,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,111,123,71,136,134,84],
[127,0,88,87,98,127,112,62],
[99,122,0,123,109,124,136,96],
[87,123,87,0,108,138,134,111],
[139,112,101,102,0,116,150,99],
[74,83,86,72,94,0,83,59],
[76,98,74,76,60,127,0,74],
[126,148,114,99,111,151,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,100,107,99,110,103],
[107,0,107,112,112,112,111,105],
[112,103,0,111,101,108,109,107],
[110,98,99,0,87,94,109,102],
[103,98,109,123,0,113,103,105],
[111,98,102,116,97,0,113,108],
[100,99,101,101,107,97,0,103],
[107,105,103,108,105,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,109,101,105,113,113],
[115,0,116,115,90,96,125,112],
[101,94,0,101,101,94,106,101],
[101,95,109,0,91,84,111,101],
[109,120,109,119,0,108,123,104],
[105,114,116,126,102,0,121,113],
[97,85,104,99,87,89,0,105],
[97,98,109,109,106,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,95,84,99,109,87],
[110,0,110,114,99,107,117,107],
[108,100,0,105,89,100,108,102],
[115,96,105,0,86,114,113,98],
[126,111,121,124,0,104,123,102],
[111,103,110,96,106,0,104,109],
[101,93,102,97,87,106,0,87],
[123,103,108,112,108,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,125,120,115,108,99,115],
[111,0,104,117,116,113,101,109],
[85,106,0,104,108,104,96,109],
[90,93,106,0,98,101,105,106],
[95,94,102,112,0,97,97,104],
[102,97,106,109,113,0,108,103],
[111,109,114,105,113,102,0,113],
[95,101,101,104,106,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,121,121,103,109,97,103],
[74,0,98,112,105,105,112,105],
[89,112,0,118,105,126,115,102],
[89,98,92,0,82,96,89,94],
[107,105,105,128,0,113,110,114],
[101,105,84,114,97,0,91,95],
[113,98,95,121,100,119,0,94],
[107,105,108,116,96,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,112,126,130,109,97,126],
[85,0,96,112,100,74,116,112],
[98,114,0,106,109,103,104,118],
[84,98,104,0,128,100,116,101],
[80,110,101,82,0,100,86,95],
[101,136,107,110,110,0,135,79],
[113,94,106,94,124,75,0,109],
[84,98,92,109,115,131,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,115,106,115,94,126],
[137,0,116,94,139,95,138,138],
[136,94,0,85,119,107,138,130],
[95,116,125,0,129,116,136,136],
[104,71,91,81,0,80,127,125],
[95,115,103,94,130,0,117,159],
[116,72,72,74,83,93,0,136],
[84,72,80,74,85,51,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,123,72,112,197,96,99],
[124,0,123,96,137,174,122,101],
[87,87,0,110,139,184,110,126],
[138,114,100,0,138,186,135,126],
[98,73,71,72,0,135,97,50],
[13,36,26,24,75,0,49,26],
[114,88,100,75,113,161,0,101],
[111,109,84,84,160,184,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,111,112,117,104,106,131],
[82,0,92,109,88,76,81,116],
[99,118,0,100,93,92,95,106],
[98,101,110,0,84,100,85,112],
[93,122,117,126,0,118,108,128],
[106,134,118,110,92,0,122,127],
[104,129,115,125,102,88,0,119],
[79,94,104,98,82,83,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,107,93,108,103,128],
[107,0,114,89,93,121,96,117],
[88,96,0,81,100,118,83,111],
[103,121,129,0,109,119,115,122],
[117,117,110,101,0,113,79,114],
[102,89,92,91,97,0,86,115],
[107,114,127,95,131,124,0,114],
[82,93,99,88,96,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,121,109,105,98,118],
[100,0,99,110,92,93,105,107],
[99,111,0,120,101,99,99,112],
[89,100,90,0,90,102,88,99],
[101,118,109,120,0,98,99,112],
[105,117,111,108,112,0,114,111],
[112,105,111,122,111,96,0,110],
[92,103,98,111,98,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,78,88,107,100,77],
[122,0,104,109,106,106,99,99],
[107,106,0,77,121,95,93,95],
[132,101,133,0,111,111,93,113],
[122,104,89,99,0,90,85,94],
[103,104,115,99,120,0,121,76],
[110,111,117,117,125,89,0,107],
[133,111,115,97,116,134,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,108,97,109,108,112],
[91,0,113,112,90,100,102,107],
[105,97,0,107,102,95,97,101],
[102,98,103,0,103,97,100,94],
[113,120,108,107,0,105,107,107],
[101,110,115,113,105,0,109,103],
[102,108,113,110,103,101,0,106],
[98,103,109,116,103,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,108,102,98,99,92],
[104,0,91,100,99,87,105,101],
[103,119,0,107,92,102,91,111],
[102,110,103,0,112,111,108,113],
[108,111,118,98,0,87,123,119],
[112,123,108,99,123,0,130,112],
[111,105,119,102,87,80,0,102],
[118,109,99,97,91,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,112,117,106,105,111],
[96,0,90,102,100,100,94,115],
[108,120,0,120,113,104,105,122],
[98,108,90,0,96,96,101,111],
[93,110,97,114,0,105,94,115],
[104,110,106,114,105,0,97,117],
[105,116,105,109,116,113,0,125],
[99,95,88,99,95,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,104,108,110,104,103],
[97,0,117,110,110,113,110,115],
[111,93,0,103,110,106,103,115],
[106,100,107,0,100,109,123,102],
[102,100,100,110,0,116,107,101],
[100,97,104,101,94,0,93,94],
[106,100,107,87,103,117,0,98],
[107,95,95,108,109,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,111,90,107,89,102],
[109,0,106,99,98,104,88,93],
[110,104,0,101,112,116,83,111],
[99,111,109,0,88,108,108,107],
[120,112,98,122,0,116,102,117],
[103,106,94,102,94,0,88,89],
[121,122,127,102,108,122,0,115],
[108,117,99,103,93,121,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,109,109,98,113,105],
[99,0,94,109,101,96,104,98],
[106,116,0,116,110,106,112,102],
[101,101,94,0,109,106,104,92],
[101,109,100,101,0,103,106,97],
[112,114,104,104,107,0,102,110],
[97,106,98,106,104,108,0,106],
[105,112,108,118,113,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,108,106,118,115,112,105],
[84,0,99,82,100,98,104,93],
[102,111,0,98,113,115,113,114],
[104,128,112,0,116,106,100,95],
[92,110,97,94,0,117,97,99],
[95,112,95,104,93,0,91,97],
[98,106,97,110,113,119,0,104],
[105,117,96,115,111,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,118,114,103,108,126],
[101,0,100,109,90,103,93,116],
[94,110,0,107,94,83,86,98],
[92,101,103,0,85,97,86,106],
[96,120,116,125,0,114,98,112],
[107,107,127,113,96,0,94,119],
[102,117,124,124,112,116,0,123],
[84,94,112,104,98,91,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,103,94,146,102,115,111],
[148,0,125,101,175,123,130,114],
[107,85,0,73,134,99,99,90],
[116,109,137,0,142,130,155,99],
[64,35,76,68,0,74,77,75],
[108,87,111,80,136,0,101,74],
[95,80,111,55,133,109,0,80],
[99,96,120,111,135,136,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,104,93,96,102,103],
[111,0,97,111,103,126,97,111],
[111,113,0,104,105,106,103,114],
[106,99,106,0,101,104,96,99],
[117,107,105,109,0,114,105,114],
[114,84,104,106,96,0,87,104],
[108,113,107,114,105,123,0,115],
[107,99,96,111,96,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,108,102,115,92,102],
[105,0,100,108,106,111,103,103],
[110,110,0,110,113,114,101,107],
[102,102,100,0,95,102,90,96],
[108,104,97,115,0,111,93,98],
[95,99,96,108,99,0,95,89],
[118,107,109,120,117,115,0,100],
[108,107,103,114,112,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,84,103,95,83,94],
[117,0,103,106,111,107,84,94],
[118,107,0,100,118,111,88,91],
[126,104,110,0,126,119,117,112],
[107,99,92,84,0,96,94,88],
[115,103,99,91,114,0,98,106],
[127,126,122,93,116,112,0,118],
[116,116,119,98,122,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,98,112,101,127,107],
[126,0,111,134,109,104,134,123],
[115,99,0,109,125,117,111,86],
[112,76,101,0,93,99,95,99],
[98,101,85,117,0,109,130,101],
[109,106,93,111,101,0,114,107],
[83,76,99,115,80,96,0,101],
[103,87,124,111,109,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,119,112,113,116,134],
[107,0,101,112,109,113,98,111],
[106,109,0,111,115,117,87,123],
[91,98,99,0,117,97,107,117],
[98,101,95,93,0,110,100,110],
[97,97,93,113,100,0,106,106],
[94,112,123,103,110,104,0,107],
[76,99,87,93,100,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,86,91,96,90,99],
[105,0,121,84,91,106,107,99],
[108,89,0,90,98,83,97,91],
[124,126,120,0,105,129,114,109],
[119,119,112,105,0,114,104,114],
[114,104,127,81,96,0,101,104],
[120,103,113,96,106,109,0,100],
[111,111,119,101,96,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,104,109,102,102,110],
[103,0,98,94,98,91,97,101],
[106,112,0,96,105,95,94,102],
[106,116,114,0,110,102,105,115],
[101,112,105,100,0,102,104,118],
[108,119,115,108,108,0,103,111],
[108,113,116,105,106,107,0,114],
[100,109,108,95,92,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,98,104,98,98,102],
[109,0,93,95,98,95,97,92],
[121,117,0,102,109,115,111,97],
[112,115,108,0,109,111,105,115],
[106,112,101,101,0,112,101,105],
[112,115,95,99,98,0,105,98],
[112,113,99,105,109,105,0,106],
[108,118,113,95,105,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,118,104,104,104,95],
[114,0,109,131,113,108,101,106],
[110,101,0,113,107,110,97,103],
[92,79,97,0,104,107,97,81],
[106,97,103,106,0,107,112,104],
[106,102,100,103,103,0,106,109],
[106,109,113,113,98,104,0,104],
[115,104,107,129,106,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,100,102,94,107,101],
[111,0,102,115,111,113,116,119],
[115,108,0,106,122,104,116,118],
[110,95,104,0,109,92,106,111],
[108,99,88,101,0,105,104,110],
[116,97,106,118,105,0,122,108],
[103,94,94,104,106,88,0,104],
[109,91,92,99,100,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,116,115,119,121,111],
[90,0,105,112,123,104,117,114],
[110,105,0,118,112,115,129,113],
[94,98,92,0,116,119,118,115],
[95,87,98,94,0,96,111,91],
[91,106,95,91,114,0,121,106],
[89,93,81,92,99,89,0,95],
[99,96,97,95,119,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,102,100,102,102,96],
[111,0,114,113,104,117,104,108],
[112,96,0,106,107,95,112,107],
[108,97,104,0,112,101,102,107],
[110,106,103,98,0,98,115,108],
[108,93,115,109,112,0,114,115],
[108,106,98,108,95,96,0,94],
[114,102,103,103,102,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,43,84,41,126,41,41],
[126,0,127,210,167,127,83,84],
[167,83,0,125,167,167,83,125],
[126,0,85,0,167,84,42,84],
[169,43,43,43,0,127,85,43],
[84,83,43,126,83,0,83,83],
[169,127,127,168,125,127,0,84],
[169,126,85,126,167,127,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,103,97,106,100,115],
[114,0,98,112,104,112,114,114],
[105,112,0,112,109,108,104,118],
[107,98,98,0,98,110,103,105],
[113,106,101,112,0,105,103,109],
[104,98,102,100,105,0,106,109],
[110,96,106,107,107,104,0,105],
[95,96,92,105,101,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,123,130,92,106,109],
[99,0,103,104,90,83,92,98],
[103,107,0,104,120,93,90,107],
[87,106,106,0,116,105,92,108],
[80,120,90,94,0,92,92,98],
[118,127,117,105,118,0,104,116],
[104,118,120,118,118,106,0,117],
[101,112,103,102,112,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,117,117,125,125,143],
[110,0,102,152,99,133,140,151],
[93,108,0,119,84,118,134,117],
[93,58,91,0,81,120,127,112],
[93,111,126,129,0,109,135,118],
[85,77,92,90,101,0,126,117],
[85,70,76,83,75,84,0,77],
[67,59,93,98,92,93,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,101,106,89,82,98,97],
[134,0,126,144,105,116,135,119],
[109,84,0,116,88,100,115,103],
[104,66,94,0,77,82,97,85],
[121,105,122,133,0,113,127,101],
[128,94,110,128,97,0,118,97],
[112,75,95,113,83,92,0,90],
[113,91,107,125,109,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,97,108,103,108,118],
[106,0,123,105,112,102,94,117],
[90,87,0,89,103,101,84,115],
[113,105,121,0,101,108,119,117],
[102,98,107,109,0,101,104,108],
[107,108,109,102,109,0,109,118],
[102,116,126,91,106,101,0,114],
[92,93,95,93,102,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,116,109,105,112,107],
[105,0,122,100,119,110,111,101],
[94,88,0,91,89,92,103,102],
[94,110,119,0,111,106,100,102],
[101,91,121,99,0,96,108,97],
[105,100,118,104,114,0,107,102],
[98,99,107,110,102,103,0,101],
[103,109,108,108,113,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,105,102,114,112,111],
[93,0,101,92,106,103,112,101],
[101,109,0,96,91,102,115,121],
[105,118,114,0,102,114,114,119],
[108,104,119,108,0,116,118,109],
[96,107,108,96,94,0,105,112],
[98,98,95,96,92,105,0,103],
[99,109,89,91,101,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,129,118,94,98,115],
[97,0,86,85,118,99,84,86],
[104,124,0,120,119,101,97,112],
[81,125,90,0,99,98,61,83],
[92,92,91,111,0,106,77,85],
[116,111,109,112,104,0,96,88],
[112,126,113,149,133,114,0,92],
[95,124,98,127,125,122,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,97,111,84,100,99],
[110,0,115,106,110,98,109,104],
[102,95,0,95,100,95,106,106],
[113,104,115,0,103,104,104,110],
[99,100,110,107,0,107,111,116],
[126,112,115,106,103,0,117,121],
[110,101,104,106,99,93,0,106],
[111,106,104,100,94,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,103,97,88,97,95],
[108,0,114,104,102,98,103,99],
[98,96,0,102,90,87,94,97],
[107,106,108,0,105,108,102,107],
[113,108,120,105,0,110,107,114],
[122,112,123,102,100,0,104,113],
[113,107,116,108,103,106,0,113],
[115,111,113,103,96,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,103,103,107,126,119],
[97,0,85,99,102,98,113,98],
[108,125,0,105,113,112,135,113],
[107,111,105,0,121,115,127,113],
[107,108,97,89,0,96,111,95],
[103,112,98,95,114,0,127,105],
[84,97,75,83,99,83,0,98],
[91,112,97,97,115,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,76,85,87,102,84,80],
[100,0,94,88,105,105,104,89],
[134,116,0,91,110,117,120,106],
[125,122,119,0,108,126,104,99],
[123,105,100,102,0,107,99,94],
[108,105,93,84,103,0,97,86],
[126,106,90,106,111,113,0,108],
[130,121,104,111,116,124,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,112,102,87,80,107,92],
[74,0,74,65,85,85,98,70],
[98,136,0,60,77,91,87,81],
[108,145,150,0,118,100,119,124],
[123,125,133,92,0,136,123,103],
[130,125,119,110,74,0,85,90],
[103,112,123,91,87,125,0,79],
[118,140,129,86,107,120,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,90,103,83,97,95,87],
[113,0,100,104,95,110,93,103],
[120,110,0,106,105,109,116,105],
[107,106,104,0,104,101,98,92],
[127,115,105,106,0,118,113,105],
[113,100,101,109,92,0,95,99],
[115,117,94,112,97,115,0,107],
[123,107,105,118,105,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,90,108,97,91,117],
[112,0,133,96,121,104,113,113],
[92,77,0,92,101,101,94,99],
[120,114,118,0,106,111,104,105],
[102,89,109,104,0,95,92,102],
[113,106,109,99,115,0,101,104],
[119,97,116,106,118,109,0,109],
[93,97,111,105,108,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,140,186,116,142,142,140],
[116,0,118,116,116,94,94,116],
[70,92,0,70,70,24,94,46],
[24,94,140,0,92,94,118,70],
[94,94,140,118,0,72,118,70],
[68,116,186,116,138,0,70,92],
[68,116,116,92,92,140,0,116],
[70,94,164,140,140,118,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,108,118,110,111,105],
[101,0,103,96,109,95,106,106],
[99,107,0,105,109,101,110,101],
[102,114,105,0,111,102,123,113],
[92,101,101,99,0,101,104,99],
[100,115,109,108,109,0,110,112],
[99,104,100,87,106,100,0,114],
[105,104,109,97,111,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,99,108,98,107,100],
[112,0,108,123,113,99,120,110],
[101,102,0,104,108,98,113,102],
[111,87,106,0,108,105,109,103],
[102,97,102,102,0,106,92,94],
[112,111,112,105,104,0,113,107],
[103,90,97,101,118,97,0,94],
[110,100,108,107,116,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,92,83,98,94,118],
[111,0,116,109,104,115,95,118],
[105,94,0,105,91,87,106,113],
[118,101,105,0,106,113,107,126],
[127,106,119,104,0,103,114,126],
[112,95,123,97,107,0,102,112],
[116,115,104,103,96,108,0,108],
[92,92,97,84,84,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,100,106,96,108,101],
[104,0,102,109,121,109,118,111],
[105,108,0,100,100,87,107,105],
[110,101,110,0,115,101,111,115],
[104,89,110,95,0,100,104,101],
[114,101,123,109,110,0,119,112],
[102,92,103,99,106,91,0,103],
[109,99,105,95,109,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,99,116,128,114,105],
[88,0,121,113,119,126,75,105],
[96,89,0,103,96,127,113,106],
[111,97,107,0,112,118,104,115],
[94,91,114,98,0,127,114,113],
[82,84,83,92,83,0,85,89],
[96,135,97,106,96,125,0,101],
[105,105,104,95,97,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,104,139,104,175,35,104],
[70,0,104,104,69,104,70,70],
[106,106,0,140,140,175,70,71],
[71,106,70,0,69,106,70,70],
[106,141,70,141,0,141,105,106],
[35,106,35,104,69,0,70,70],
[175,140,140,140,105,140,0,140],
[106,140,139,140,104,140,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,87,106,139,94,102],
[109,0,91,92,103,121,89,90],
[118,119,0,109,129,136,121,103],
[123,118,101,0,124,119,103,107],
[104,107,81,86,0,126,99,103],
[71,89,74,91,84,0,84,82],
[116,121,89,107,111,126,0,115],
[108,120,107,103,107,128,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,106,104,103,97,99],
[118,0,108,117,90,108,111,109],
[106,102,0,112,117,118,120,93],
[104,93,98,0,95,104,100,96],
[106,120,93,115,0,109,106,100],
[107,102,92,106,101,0,93,95],
[113,99,90,110,104,117,0,94],
[111,101,117,114,110,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,125,148,142,126,102,169],
[45,0,45,68,61,86,62,68],
[85,165,0,128,102,103,123,129],
[62,142,82,0,81,82,102,123],
[68,149,108,129,0,88,84,130],
[84,124,107,128,122,0,124,149],
[108,148,87,108,126,86,0,149],
[41,142,81,87,80,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,123,115,105,115,115,100],
[90,0,114,108,97,104,107,89],
[87,96,0,109,78,89,87,87],
[95,102,101,0,95,109,108,96],
[105,113,132,115,0,112,117,107],
[95,106,121,101,98,0,115,100],
[95,103,123,102,93,95,0,82],
[110,121,123,114,103,110,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,114,88,97,95,94],
[100,0,93,104,107,98,77,91],
[118,117,0,101,100,98,99,92],
[96,106,109,0,110,123,101,107],
[122,103,110,100,0,105,95,96],
[113,112,112,87,105,0,97,88],
[115,133,111,109,115,113,0,93],
[116,119,118,103,114,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,108,108,106,97,97],
[100,0,108,103,114,100,90,86],
[96,102,0,93,94,113,95,85],
[102,107,117,0,112,96,97,96],
[102,96,116,98,0,106,90,101],
[104,110,97,114,104,0,83,101],
[113,120,115,113,120,127,0,105],
[113,124,125,114,109,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,107,99,97,93,94],
[111,0,112,91,114,106,88,118],
[105,98,0,93,95,98,88,100],
[103,119,117,0,102,105,113,95],
[111,96,115,108,0,110,100,109],
[113,104,112,105,100,0,103,109],
[117,122,122,97,110,107,0,114],
[116,92,110,115,101,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,80,87,100,96,102],
[110,0,101,90,104,96,111,108],
[105,109,0,110,114,101,101,106],
[130,120,100,0,113,118,116,119],
[123,106,96,97,0,110,102,110],
[110,114,109,92,100,0,99,97],
[114,99,109,94,108,111,0,115],
[108,102,104,91,100,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,136,88,101,105,96,82],
[79,0,104,77,78,94,92,74],
[74,106,0,86,91,97,83,76],
[122,133,124,0,111,104,97,88],
[109,132,119,99,0,120,122,115],
[105,116,113,106,90,0,94,98],
[114,118,127,113,88,116,0,98],
[128,136,134,122,95,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,94,102,100,105,105,112],
[85,0,79,79,96,111,89,91],
[116,131,0,105,105,129,131,110],
[108,131,105,0,80,130,121,130],
[110,114,105,130,0,105,103,114],
[105,99,81,80,105,0,85,108],
[105,121,79,89,107,125,0,103],
[98,119,100,80,96,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,82,88,103,75,83,109],
[112,0,94,102,116,92,101,104],
[128,116,0,108,124,96,111,125],
[122,108,102,0,106,89,108,114],
[107,94,86,104,0,105,99,118],
[135,118,114,121,105,0,125,113],
[127,109,99,102,111,85,0,120],
[101,106,85,96,92,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,105,83,84,105,86,102],
[42,0,41,62,82,83,63,124],
[105,169,0,127,169,150,108,167],
[127,148,83,0,103,107,63,124],
[126,128,41,107,0,65,63,85],
[105,127,60,103,145,0,61,124],
[124,147,102,147,147,149,0,146],
[108,86,43,86,125,86,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,106,110,114,134,122],
[107,0,95,111,96,97,102,103],
[111,115,0,105,123,109,126,120],
[104,99,105,0,102,98,120,115],
[100,114,87,108,0,101,123,117],
[96,113,101,112,109,0,119,131],
[76,108,84,90,87,91,0,102],
[88,107,90,95,93,79,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,85,95,101,108,97],
[108,0,106,86,106,93,113,105],
[105,104,0,92,98,96,105,96],
[125,124,118,0,124,105,131,114],
[115,104,112,86,0,108,123,118],
[109,117,114,105,102,0,118,112],
[102,97,105,79,87,92,0,92],
[113,105,114,96,92,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,118,114,110,107,111],
[108,0,106,108,106,101,105,108],
[107,104,0,97,110,100,107,98],
[92,102,113,0,101,97,96,101],
[96,104,100,109,0,101,105,103],
[100,109,110,113,109,0,106,102],
[103,105,103,114,105,104,0,106],
[99,102,112,109,107,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,101,88,98,93,88],
[119,0,109,109,101,93,106,97],
[119,101,0,112,105,105,113,106],
[109,101,98,0,94,104,99,103],
[122,109,105,116,0,100,113,113],
[112,117,105,106,110,0,115,105],
[117,104,97,111,97,95,0,100],
[122,113,104,107,97,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,97,91,120,111,101],
[101,0,103,103,91,109,95,97],
[108,107,0,106,96,112,97,94],
[113,107,104,0,106,119,104,114],
[119,119,114,104,0,121,131,111],
[90,101,98,91,89,0,85,91],
[99,115,113,106,79,125,0,96],
[109,113,116,96,99,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,113,91,106,111,109],
[105,0,117,119,109,104,118,119],
[95,93,0,105,89,99,112,89],
[97,91,105,0,85,105,107,96],
[119,101,121,125,0,114,108,107],
[104,106,111,105,96,0,113,110],
[99,92,98,103,102,97,0,111],
[101,91,121,114,103,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,113,104,114,111,104],
[98,0,95,111,99,115,112,103],
[92,115,0,116,98,121,129,97],
[97,99,94,0,115,134,116,108],
[106,111,112,95,0,127,140,109],
[96,95,89,76,83,0,104,107],
[99,98,81,94,70,106,0,84],
[106,107,113,102,101,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,104,108,97,106,112],
[113,0,102,113,103,104,110,117],
[113,108,0,118,99,119,116,105],
[106,97,92,0,91,106,106,107],
[102,107,111,119,0,115,113,117],
[113,106,91,104,95,0,104,116],
[104,100,94,104,97,106,0,104],
[98,93,105,103,93,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,109,105,130,116,116],
[99,0,101,98,88,114,103,100],
[88,109,0,103,98,115,118,103],
[101,112,107,0,104,117,114,107],
[105,122,112,106,0,117,116,114],
[80,96,95,93,93,0,102,94],
[94,107,92,96,94,108,0,92],
[94,110,107,103,96,116,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,122,118,99,113,93],
[109,0,104,116,101,97,108,96],
[108,106,0,148,103,114,125,113],
[88,94,62,0,102,85,83,84],
[92,109,107,108,0,90,98,114],
[111,113,96,125,120,0,131,120],
[97,102,85,127,112,79,0,100],
[117,114,97,126,96,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,96,85,95,81,92,82],
[130,0,108,113,109,92,111,118],
[114,102,0,102,111,90,101,107],
[125,97,108,0,101,111,104,98],
[115,101,99,109,0,87,98,99],
[129,118,120,99,123,0,105,100],
[118,99,109,106,112,105,0,100],
[128,92,103,112,111,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,123,112,122,97,104,109],
[95,0,102,98,93,108,82,80],
[87,108,0,106,113,92,85,99],
[98,112,104,0,107,98,96,123],
[88,117,97,103,0,91,88,87],
[113,102,118,112,119,0,95,98],
[106,128,125,114,122,115,0,91],
[101,130,111,87,123,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,98,105,105,105,105],
[113,0,119,98,108,107,117,104],
[97,91,0,92,103,90,104,99],
[112,112,118,0,127,105,107,105],
[105,102,107,83,0,96,104,102],
[105,103,120,105,114,0,108,107],
[105,93,106,103,106,102,0,100],
[105,106,111,105,108,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,96,111,102,108,92],
[104,0,109,93,109,100,101,92],
[98,101,0,88,112,92,113,96],
[114,117,122,0,110,101,114,95],
[99,101,98,100,0,91,111,100],
[108,110,118,109,119,0,117,105],
[102,109,97,96,99,93,0,96],
[118,118,114,115,110,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,101,100,94,103,99],
[114,0,116,99,103,107,112,95],
[100,94,0,87,99,91,106,93],
[109,111,123,0,105,111,131,114],
[110,107,111,105,0,88,115,101],
[116,103,119,99,122,0,127,107],
[107,98,104,79,95,83,0,86],
[111,115,117,96,109,103,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,117,115,113,109,95],
[93,0,87,95,94,95,92,88],
[105,123,0,122,112,103,103,109],
[93,115,88,0,101,97,98,97],
[95,116,98,109,0,107,102,107],
[97,115,107,113,103,0,103,103],
[101,118,107,112,108,107,0,111],
[115,122,101,113,103,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,110,108,100,114,112],
[103,0,104,98,100,96,121,105],
[92,106,0,110,100,109,111,109],
[100,112,100,0,89,100,110,108],
[102,110,110,121,0,100,114,107],
[110,114,101,110,110,0,110,123],
[96,89,99,100,96,100,0,99],
[98,105,101,102,103,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,122,109,109,100,106,102],
[110,0,112,108,116,103,103,100],
[88,98,0,110,109,84,105,99],
[101,102,100,0,93,102,105,107],
[101,94,101,117,0,106,102,102],
[110,107,126,108,104,0,123,116],
[104,107,105,105,108,87,0,105],
[108,110,111,103,108,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,114,103,93,98,97],
[107,0,109,113,107,103,109,114],
[108,101,0,110,95,93,99,104],
[96,97,100,0,94,94,102,99],
[107,103,115,116,0,104,112,105],
[117,107,117,116,106,0,124,102],
[112,101,111,108,98,86,0,96],
[113,96,106,111,105,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,103,82,115,105,92,112],
[74,0,104,72,62,85,105,95],
[107,106,0,63,85,107,115,125],
[128,138,147,0,127,105,126,115],
[95,148,125,83,0,105,105,116],
[105,125,103,105,105,0,124,145],
[118,105,95,84,105,86,0,115],
[98,115,85,95,94,65,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,110,106,122,114,104],
[97,0,112,114,108,103,112,96],
[106,98,0,104,102,108,98,90],
[100,96,106,0,113,108,112,95],
[104,102,108,97,0,117,92,105],
[88,107,102,102,93,0,100,92],
[96,98,112,98,118,110,0,98],
[106,114,120,115,105,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,110,97,112,105,95,89],
[125,0,89,94,102,118,106,96],
[100,121,0,103,103,116,78,89],
[113,116,107,0,99,125,102,104],
[98,108,107,111,0,126,93,104],
[105,92,94,85,84,0,78,84],
[115,104,132,108,117,132,0,108],
[121,114,121,106,106,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,106,106,111,114,105],
[98,0,109,101,107,99,99,101],
[93,101,0,96,98,99,99,96],
[104,109,114,0,104,106,101,106],
[104,103,112,106,0,104,115,100],
[99,111,111,104,106,0,103,101],
[96,111,111,109,95,107,0,97],
[105,109,114,104,110,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,53,105,105,210,105,157],
[105,0,53,52,52,158,105,52],
[157,157,0,157,104,210,104,157],
[105,158,53,0,52,158,105,52],
[105,158,106,158,0,158,158,105],
[0,52,0,52,52,0,52,104],
[105,105,106,105,52,158,0,105],
[53,158,53,158,105,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,94,113,94,92,108],
[112,0,110,112,114,95,112,87],
[103,100,0,87,113,90,91,112],
[116,98,123,0,129,112,97,94],
[97,96,97,81,0,84,83,90],
[116,115,120,98,126,0,107,135],
[118,98,119,113,127,103,0,111],
[102,123,98,116,120,75,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,97,100,100,85,100],
[122,0,110,84,118,122,106,99],
[105,100,0,87,119,124,96,103],
[113,126,123,0,100,125,114,112],
[110,92,91,110,0,107,91,93],
[110,88,86,85,103,0,80,102],
[125,104,114,96,119,130,0,85],
[110,111,107,98,117,108,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,95,112,102,103,102,106],
[123,0,114,91,94,111,119,122],
[115,96,0,105,103,112,120,116],
[98,119,105,0,93,102,107,114],
[108,116,107,117,0,101,112,111],
[107,99,98,108,109,0,105,111],
[108,91,90,103,98,105,0,100],
[104,88,94,96,99,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,87,104,99,103,104],
[97,0,95,89,104,106,95,97],
[114,115,0,85,101,106,111,98],
[123,121,125,0,111,112,98,116],
[106,106,109,99,0,102,93,105],
[111,104,104,98,108,0,98,109],
[107,115,99,112,117,112,0,117],
[106,113,112,94,105,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,82,105,71,82,48,94],
[116,0,94,119,70,105,106,118],
[128,116,0,117,117,116,81,105],
[105,91,93,0,70,116,71,129],
[139,140,93,140,0,116,95,140],
[128,105,94,94,94,0,72,118],
[162,104,129,139,115,138,0,127],
[116,92,105,81,70,92,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,106,111,111,99,106],
[105,0,109,108,105,106,98,101],
[98,101,0,97,103,103,100,109],
[104,102,113,0,106,114,108,113],
[99,105,107,104,0,104,99,104],
[99,104,107,96,106,0,101,105],
[111,112,110,102,111,109,0,115],
[104,109,101,97,106,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,94,99,104,88,122,78],
[89,0,95,79,85,90,124,100],
[116,115,0,110,103,121,122,126],
[111,131,100,0,116,107,125,118],
[106,125,107,94,0,94,113,108],
[122,120,89,103,116,0,116,94],
[88,86,88,85,97,94,0,108],
[132,110,84,92,102,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,126,83,83,125,125,82],
[128,0,86,83,128,128,43,85],
[84,124,0,167,125,167,127,84],
[127,127,43,0,128,128,84,127],
[127,82,85,82,0,128,42,127],
[85,82,43,82,82,0,42,85],
[85,167,83,126,168,168,0,85],
[128,125,126,83,83,125,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,108,114,87,88,96,86],
[121,0,84,111,121,106,123,94],
[102,126,0,107,99,95,127,114],
[96,99,103,0,86,107,115,87],
[123,89,111,124,0,107,131,94],
[122,104,115,103,103,0,103,107],
[114,87,83,95,79,107,0,78],
[124,116,96,123,116,103,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,95,106,111,118,100],
[102,0,110,112,129,113,115,104],
[107,100,0,98,101,117,119,108],
[115,98,112,0,126,116,117,107],
[104,81,109,84,0,120,103,94],
[99,97,93,94,90,0,101,85],
[92,95,91,93,107,109,0,108],
[110,106,102,103,116,125,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,96,91,105,108,97],
[109,0,113,105,107,110,108,108],
[110,97,0,99,106,101,110,99],
[114,105,111,0,103,99,105,108],
[119,103,104,107,0,116,111,116],
[105,100,109,111,94,0,107,90],
[102,102,100,105,99,103,0,108],
[113,102,111,102,94,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,89,88,100,80,63],
[117,0,121,127,117,110,104,92],
[113,89,0,101,98,102,99,83],
[121,83,109,0,90,105,75,103],
[122,93,112,120,0,104,111,112],
[110,100,108,105,106,0,93,76],
[130,106,111,135,99,117,0,97],
[147,118,127,107,98,134,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,140,0,210,0,71,140],
[210,0,210,70,210,141,71,210],
[70,0,0,70,141,70,71,69],
[210,140,140,0,210,71,71,140],
[0,0,69,0,0,0,71,69],
[210,69,140,139,210,0,140,140],
[139,139,139,139,139,70,0,139],
[70,0,141,70,141,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,107,106,104,107,113],
[100,0,105,107,111,105,112,110],
[106,105,0,108,118,101,105,109],
[103,103,102,0,112,97,109,130],
[104,99,92,98,0,94,102,103],
[106,105,109,113,116,0,110,125],
[103,98,105,101,108,100,0,121],
[97,100,101,80,107,85,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,97,103,107,124,89,90],
[123,0,127,119,132,119,106,101],
[113,83,0,105,118,108,73,81],
[107,91,105,0,96,99,76,101],
[103,78,92,114,0,100,98,88],
[86,91,102,111,110,0,115,83],
[121,104,137,134,112,95,0,110],
[120,109,129,109,122,127,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,111,107,106,99,92],
[114,0,111,113,112,112,108,105],
[104,99,0,109,101,108,95,99],
[99,97,101,0,101,109,106,103],
[103,98,109,109,0,106,105,103],
[104,98,102,101,104,0,106,105],
[111,102,115,104,105,104,0,102],
[118,105,111,107,107,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,118,95,110,107,123,110],
[123,0,136,103,92,107,117,116],
[92,74,0,59,87,84,98,102],
[115,107,151,0,101,97,140,102],
[100,118,123,109,0,106,121,110],
[103,103,126,113,104,0,112,114],
[87,93,112,70,89,98,0,97],
[100,94,108,108,100,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,115,107,115,114,104,107],
[115,0,99,119,122,143,130,146],
[95,111,0,114,113,123,123,122],
[103,91,96,0,120,88,106,108],
[95,88,97,90,0,101,109,121],
[96,67,87,122,109,0,117,122],
[106,80,87,104,101,93,0,112],
[103,64,88,102,89,88,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,96,100,90,95,100,95],
[123,0,101,104,99,104,110,111],
[114,109,0,104,87,101,114,100],
[110,106,106,0,95,106,110,106],
[120,111,123,115,0,105,117,118],
[115,106,109,104,105,0,121,104],
[110,100,96,100,93,89,0,98],
[115,99,110,104,92,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,122,107,108,121,109],
[109,0,113,100,108,97,116,111],
[100,97,0,95,98,109,106,108],
[88,110,115,0,105,101,108,100],
[103,102,112,105,0,101,106,112],
[102,113,101,109,109,0,104,114],
[89,94,104,102,104,106,0,104],
[101,99,102,110,98,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,127,105,106,105,121,127],
[103,0,86,111,115,110,110,104],
[83,124,0,115,121,111,122,112],
[105,99,95,0,105,126,112,104],
[104,95,89,105,0,97,115,104],
[105,100,99,84,113,0,105,111],
[89,100,88,98,95,105,0,93],
[83,106,98,106,106,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,122,131,130,140,114],
[94,0,102,86,128,119,118,119],
[105,108,0,128,127,138,101,112],
[88,124,82,0,108,103,112,121],
[79,82,83,102,0,111,91,99],
[80,91,72,107,99,0,99,78],
[70,92,109,98,119,111,0,107],
[96,91,98,89,111,132,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,127,99,105,94,111],
[100,0,108,98,97,107,100,100],
[100,102,0,96,75,89,93,81],
[83,112,114,0,105,99,94,89],
[111,113,135,105,0,99,121,94],
[105,103,121,111,111,0,111,111],
[116,110,117,116,89,99,0,95],
[99,110,129,121,116,99,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,110,108,105,104,115],
[98,0,102,96,105,110,94,109],
[107,108,0,100,98,103,87,111],
[100,114,110,0,116,109,108,129],
[102,105,112,94,0,97,103,111],
[105,100,107,101,113,0,106,114],
[106,116,123,102,107,104,0,124],
[95,101,99,81,99,96,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,94,91,96,92,87,105],
[123,0,115,114,109,120,113,105],
[116,95,0,92,101,106,101,100],
[119,96,118,0,113,107,110,105],
[114,101,109,97,0,109,98,106],
[118,90,104,103,101,0,101,104],
[123,97,109,100,112,109,0,97],
[105,105,110,105,104,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,117,108,108,100,108],
[109,0,112,113,105,103,97,111],
[108,98,0,109,100,97,109,98],
[93,97,101,0,110,92,104,109],
[102,105,110,100,0,96,102,99],
[102,107,113,118,114,0,111,112],
[110,113,101,106,108,99,0,109],
[102,99,112,101,111,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,96,128,98,110,103],
[97,0,115,104,119,105,102,110],
[106,95,0,105,114,107,94,120],
[114,106,105,0,118,111,106,109],
[82,91,96,92,0,95,87,89],
[112,105,103,99,115,0,108,104],
[100,108,116,104,123,102,0,100],
[107,100,90,101,121,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,103,105,107,102,101],
[93,0,77,99,100,88,85,80],
[110,133,0,119,116,116,95,114],
[107,111,91,0,96,106,93,102],
[105,110,94,114,0,106,91,105],
[103,122,94,104,104,0,107,109],
[108,125,115,117,119,103,0,110],
[109,130,96,108,105,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,89,94,93,99,103],
[105,0,94,91,105,96,104,102],
[115,116,0,103,117,110,119,108],
[121,119,107,0,111,104,119,107],
[116,105,93,99,0,99,101,104],
[117,114,100,106,111,0,112,100],
[111,106,91,91,109,98,0,104],
[107,108,102,103,106,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,95,89,103,107,114],
[103,0,101,85,95,105,106,106],
[114,109,0,85,108,118,110,134],
[115,125,125,0,109,130,104,126],
[121,115,102,101,0,132,120,123],
[107,105,92,80,78,0,105,101],
[103,104,100,106,90,105,0,100],
[96,104,76,84,87,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,99,103,127,107,93],
[110,0,109,108,121,130,112,101],
[108,101,0,100,93,116,105,113],
[111,102,110,0,103,132,102,99],
[107,89,117,107,0,120,103,103],
[83,80,94,78,90,0,81,87],
[103,98,105,108,107,129,0,97],
[117,109,97,111,107,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,97,101,90,95,93],
[117,0,114,103,116,104,119,113],
[106,96,0,97,100,97,101,99],
[113,107,113,0,114,91,109,104],
[109,94,110,96,0,111,99,100],
[120,106,113,119,99,0,108,108],
[115,91,109,101,111,102,0,103],
[117,97,111,106,110,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,129,94,110,82,104,106],
[119,0,132,108,90,93,97,111],
[81,78,0,78,87,83,101,90],
[116,102,132,0,125,96,119,137],
[100,120,123,85,0,102,116,116],
[128,117,127,114,108,0,103,133],
[106,113,109,91,94,107,0,110],
[104,99,120,73,94,77,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,111,95,100,82,88],
[124,0,119,122,113,98,94,102],
[109,91,0,127,114,127,119,102],
[99,88,83,0,85,112,87,106],
[115,97,96,125,0,110,88,83],
[110,112,83,98,100,0,80,79],
[128,116,91,123,122,130,0,114],
[122,108,108,104,127,131,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,97,101,107,92,109],
[108,0,116,104,111,107,96,105],
[101,94,0,94,102,95,93,96],
[113,106,116,0,114,95,99,106],
[109,99,108,96,0,102,105,108],
[103,103,115,115,108,0,99,103],
[118,114,117,111,105,111,0,107],
[101,105,114,104,102,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,110,87,106,112,110],
[102,0,87,97,95,99,102,92],
[110,123,0,120,106,103,121,110],
[100,113,90,0,92,112,106,99],
[123,115,104,118,0,113,122,119],
[104,111,107,98,97,0,101,105],
[98,108,89,104,88,109,0,103],
[100,118,100,111,91,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,105,134,128,119,118],
[102,0,94,85,107,103,99,99],
[94,116,0,89,110,109,105,99],
[105,125,121,0,112,112,115,110],
[76,103,100,98,0,105,103,100],
[82,107,101,98,105,0,97,96],
[91,111,105,95,107,113,0,97],
[92,111,111,100,110,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,97,93,100,82,103],
[111,0,100,111,107,96,100,119],
[120,110,0,108,92,99,103,109],
[113,99,102,0,100,101,104,106],
[117,103,118,110,0,110,105,115],
[110,114,111,109,100,0,98,114],
[128,110,107,106,105,112,0,130],
[107,91,101,104,95,96,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,112,116,99,110,101],
[112,0,111,110,102,110,117,104],
[104,99,0,101,102,103,112,97],
[98,100,109,0,95,107,119,94],
[94,108,108,115,0,108,119,106],
[111,100,107,103,102,0,111,93],
[100,93,98,91,91,99,0,91],
[109,106,113,116,104,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,91,83,99,102,94,92],
[130,0,110,113,105,119,102,116],
[119,100,0,120,111,128,101,108],
[127,97,90,0,113,114,106,101],
[111,105,99,97,0,115,102,109],
[108,91,82,96,95,0,84,91],
[116,108,109,104,108,126,0,106],
[118,94,102,109,101,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,113,108,114,107,108],
[107,0,119,101,106,107,111,100],
[92,91,0,101,93,93,90,90],
[97,109,109,0,104,104,106,109],
[102,104,117,106,0,104,112,111],
[96,103,117,106,106,0,99,101],
[103,99,120,104,98,111,0,100],
[102,110,120,101,99,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,97,108,109,101,108],
[109,0,110,105,108,111,116,110],
[110,100,0,96,101,111,112,101],
[113,105,114,0,109,112,111,105],
[102,102,109,101,0,111,106,101],
[101,99,99,98,99,0,104,101],
[109,94,98,99,104,106,0,96],
[102,100,109,105,109,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,103,101,101,98,113],
[109,0,100,110,93,98,99,102],
[108,110,0,110,101,100,100,115],
[107,100,100,0,94,98,109,113],
[109,117,109,116,0,99,106,117],
[109,112,110,112,111,0,103,111],
[112,111,110,101,104,107,0,115],
[97,108,95,97,93,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,122,110,115,98,94],
[99,0,99,122,102,99,102,120],
[104,111,0,120,93,93,106,103],
[88,88,90,0,93,80,88,100],
[100,108,117,117,0,112,99,128],
[95,111,117,130,98,0,108,121],
[112,108,104,122,111,102,0,117],
[116,90,107,110,82,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,110,109,96,107,116],
[104,0,99,118,105,100,108,114],
[91,111,0,114,104,92,91,118],
[100,92,96,0,98,82,96,113],
[101,105,106,112,0,106,111,122],
[114,110,118,128,104,0,108,132],
[103,102,119,114,99,102,0,124],
[94,96,92,97,88,78,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,103,100,95,108,98],
[110,0,106,101,96,111,100,108],
[109,104,0,99,99,91,108,110],
[107,109,111,0,106,102,110,98],
[110,114,111,104,0,109,103,118],
[115,99,119,108,101,0,122,112],
[102,110,102,100,107,88,0,105],
[112,102,100,112,92,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,89,93,99,103,95,85],
[110,0,96,108,103,102,105,99],
[121,114,0,102,115,106,106,105],
[117,102,108,0,115,112,119,107],
[111,107,95,95,0,103,103,96],
[107,108,104,98,107,0,103,95],
[115,105,104,91,107,107,0,105],
[125,111,105,103,114,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,108,107,102,109,126],
[88,0,109,93,96,104,86,109],
[93,101,0,93,89,99,90,106],
[102,117,117,0,115,108,115,118],
[103,114,121,95,0,110,96,113],
[108,106,111,102,100,0,98,117],
[101,124,120,95,114,112,0,120],
[84,101,104,92,97,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,84,115,114,90,120,86],
[101,0,113,118,133,94,99,106],
[126,97,0,103,106,104,101,82],
[95,92,107,0,108,107,92,80],
[96,77,104,102,0,92,89,81],
[120,116,106,103,118,0,104,80],
[90,111,109,118,121,106,0,96],
[124,104,128,130,129,130,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,114,114,125,105,105],
[94,0,112,98,100,104,95,95],
[94,98,0,107,115,106,97,105],
[96,112,103,0,106,118,105,99],
[96,110,95,104,0,110,97,100],
[85,106,104,92,100,0,85,97],
[105,115,113,105,113,125,0,104],
[105,115,105,111,110,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,88,92,91,87,88,98],
[124,0,100,110,114,102,113,124],
[122,110,0,111,97,139,113,118],
[118,100,99,0,92,112,97,106],
[119,96,113,118,0,113,107,99],
[123,108,71,98,97,0,84,89],
[122,97,97,113,103,126,0,98],
[112,86,92,104,111,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,115,140,117,96,95],
[92,0,115,92,94,113,122,93],
[92,95,0,103,125,106,95,92],
[95,118,107,0,95,104,105,105],
[70,116,85,115,0,73,83,72],
[93,97,104,106,137,0,84,114],
[114,88,115,105,127,126,0,93],
[115,117,118,105,138,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,105,97,102,130,116],
[102,0,117,93,102,100,143,118],
[90,93,0,109,89,104,104,116],
[105,117,101,0,112,90,135,114],
[113,108,121,98,0,103,128,129],
[108,110,106,120,107,0,98,118],
[80,67,106,75,82,112,0,91],
[94,92,94,96,81,92,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,129,113,104,133,121,137],
[88,0,96,101,69,97,76,82],
[81,114,0,97,84,107,79,109],
[97,109,113,0,74,116,93,91],
[106,141,126,136,0,137,109,100],
[77,113,103,94,73,0,102,97],
[89,134,131,117,101,108,0,95],
[73,128,101,119,110,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,108,99,97,97,92],
[115,0,114,112,110,93,93,106],
[104,96,0,102,91,95,103,91],
[102,98,108,0,95,89,107,95],
[111,100,119,115,0,105,113,106],
[113,117,115,121,105,0,115,110],
[113,117,107,103,97,95,0,101],
[118,104,119,115,104,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,107,103,128,83,110,103],
[128,0,93,112,114,98,107,121],
[103,117,0,106,115,91,89,105],
[107,98,104,0,103,91,118,117],
[82,96,95,107,0,101,90,109],
[127,112,119,119,109,0,102,117],
[100,103,121,92,120,108,0,128],
[107,89,105,93,101,93,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,126,109,116,110,87,102],
[104,0,100,101,110,88,80,84],
[84,110,0,92,95,79,83,81],
[101,109,118,0,117,101,105,95],
[94,100,115,93,0,94,103,85],
[100,122,131,109,116,0,114,91],
[123,130,127,105,107,96,0,105],
[108,126,129,115,125,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,70,84,97,86,84,115],
[125,0,99,111,110,112,98,140],
[140,111,0,139,111,86,112,127],
[126,99,71,0,84,72,87,72],
[113,100,99,126,0,72,98,115],
[124,98,124,138,138,0,140,126],
[126,112,98,123,112,70,0,126],
[95,70,83,138,95,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,113,105,108,114,101],
[85,0,85,81,78,80,104,91],
[88,125,0,127,113,89,138,76],
[97,129,83,0,84,85,119,112],
[105,132,97,126,0,118,126,104],
[102,130,121,125,92,0,119,112],
[96,106,72,91,84,91,0,70],
[109,119,134,98,106,98,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,114,111,113,109,104],
[94,0,99,122,118,121,98,106],
[104,111,0,105,138,119,96,121],
[96,88,105,0,103,95,92,99],
[99,92,72,107,0,98,95,101],
[97,89,91,115,112,0,104,102],
[101,112,114,118,115,106,0,109],
[106,104,89,111,109,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,94,101,91,110,120],
[105,0,114,93,102,104,97,114],
[94,96,0,93,97,96,95,109],
[116,117,117,0,103,111,115,126],
[109,108,113,107,0,105,121,119],
[119,106,114,99,105,0,103,126],
[100,113,115,95,89,107,0,119],
[90,96,101,84,91,84,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,112,111,103,118,112],
[93,0,106,103,96,102,105,103],
[95,104,0,101,95,92,110,97],
[98,107,109,0,113,106,112,117],
[99,114,115,97,0,101,116,104],
[107,108,118,104,109,0,109,115],
[92,105,100,98,94,101,0,89],
[98,107,113,93,106,95,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,112,123,103,95,105],
[112,0,107,122,116,104,101,111],
[94,103,0,106,113,107,97,97],
[98,88,104,0,111,95,95,93],
[87,94,97,99,0,90,79,93],
[107,106,103,115,120,0,105,112],
[115,109,113,115,131,105,0,113],
[105,99,113,117,117,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,121,103,136,136,100],
[102,0,130,113,114,119,125,106],
[95,80,0,109,122,107,123,96],
[89,97,101,0,111,113,122,89],
[107,96,88,99,0,121,120,111],
[74,91,103,97,89,0,107,95],
[74,85,87,88,90,103,0,92],
[110,104,114,121,99,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,97,103,98,99,102],
[105,0,97,101,104,91,106,93],
[109,113,0,108,99,95,108,106],
[113,109,102,0,98,106,106,107],
[107,106,111,112,0,89,108,108],
[112,119,115,104,121,0,114,107],
[111,104,102,104,102,96,0,99],
[108,117,104,103,102,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,105,116,100,96,101],
[98,0,110,91,90,90,71,92],
[90,100,0,85,99,85,74,117],
[105,119,125,0,96,105,109,99],
[94,120,111,114,0,115,98,105],
[110,120,125,105,95,0,103,132],
[114,139,136,101,112,107,0,113],
[109,118,93,111,105,78,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,114,112,105,111,108],
[108,0,111,115,116,112,98,109],
[100,99,0,111,103,105,102,103],
[96,95,99,0,102,102,92,95],
[98,94,107,108,0,105,104,98],
[105,98,105,108,105,0,111,90],
[99,112,108,118,106,99,0,107],
[102,101,107,115,112,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,95,114,92,104,81],
[96,0,93,102,116,84,119,83],
[110,117,0,117,112,106,114,89],
[115,108,93,0,125,98,108,99],
[96,94,98,85,0,94,88,74],
[118,126,104,112,116,0,119,114],
[106,91,96,102,122,91,0,93],
[129,127,121,111,136,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,95,88,105,114,98],
[104,0,120,107,87,94,103,78],
[109,90,0,100,86,104,105,99],
[115,103,110,0,101,103,120,103],
[122,123,124,109,0,94,124,106],
[105,116,106,107,116,0,124,87],
[96,107,105,90,86,86,0,86],
[112,132,111,107,104,123,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,117,92,103,116,120,116],
[86,0,104,76,87,85,98,105],
[93,106,0,97,98,99,97,100],
[118,134,113,0,97,117,137,112],
[107,123,112,113,0,97,121,117],
[94,125,111,93,113,0,105,109],
[90,112,113,73,89,105,0,103],
[94,105,110,98,93,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,115,102,110,109,105],
[95,0,85,115,89,101,100,105],
[107,125,0,98,115,105,98,109],
[95,95,112,0,98,95,92,82],
[108,121,95,112,0,102,108,100],
[100,109,105,115,108,0,103,92],
[101,110,112,118,102,107,0,81],
[105,105,101,128,110,118,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,99,107,93,102,103],
[119,0,126,116,99,110,108,121],
[113,84,0,101,93,97,99,110],
[111,94,109,0,97,110,101,112],
[103,111,117,113,0,118,113,123],
[117,100,113,100,92,0,112,109],
[108,102,111,109,97,98,0,104],
[107,89,100,98,87,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,106,112,110,113,112],
[115,0,123,119,104,119,114,118],
[104,87,0,107,105,104,102,111],
[104,91,103,0,110,112,112,111],
[98,106,105,100,0,102,108,96],
[100,91,106,98,108,0,109,111],
[97,96,108,98,102,101,0,102],
[98,92,99,99,114,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,75,90,109,70,97,91],
[126,0,114,84,151,96,121,106],
[135,96,0,91,150,73,112,98],
[120,126,119,0,140,107,117,93],
[101,59,60,70,0,46,88,85],
[140,114,137,103,164,0,121,119],
[113,89,98,93,122,89,0,83],
[119,104,112,117,125,91,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,90,87,94,102,104],
[120,0,116,99,115,110,122,130],
[116,94,0,103,98,100,122,118],
[120,111,107,0,110,114,105,109],
[123,95,112,100,0,92,106,110],
[116,100,110,96,118,0,127,104],
[108,88,88,105,104,83,0,81],
[106,80,92,101,100,106,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,142,138,119,164,139,118],
[139,0,161,115,114,161,163,95],
[68,49,0,114,95,115,70,49],
[72,95,96,0,95,119,70,119],
[91,96,115,115,0,117,93,97],
[46,49,95,91,93,0,71,74],
[71,47,140,140,117,139,0,95],
[92,115,161,91,113,136,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,83,84,106,104,91,104],
[108,0,90,84,98,114,91,108],
[127,120,0,114,112,131,84,100],
[126,126,96,0,115,118,114,116],
[104,112,98,95,0,120,83,120],
[106,96,79,92,90,0,68,99],
[119,119,126,96,127,142,0,125],
[106,102,110,94,90,111,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,138,87,92,89,93,112],
[116,0,138,105,124,105,88,99],
[72,72,0,103,97,79,78,96],
[123,105,107,0,119,91,89,99],
[118,86,113,91,0,78,82,116],
[121,105,131,119,132,0,95,120],
[117,122,132,121,128,115,0,96],
[98,111,114,111,94,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,187,116,114,90,116,188],
[74,0,120,72,46,120,93,96],
[23,90,0,94,68,68,22,97],
[94,138,116,0,113,93,93,94],
[96,164,142,97,0,120,93,96],
[120,90,142,117,90,0,93,142],
[94,117,188,117,117,117,0,142],
[22,114,113,116,114,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,105,107,103,110,113],
[106,0,108,107,109,101,112,120],
[96,102,0,113,104,114,112,110],
[105,103,97,0,116,118,124,119],
[103,101,106,94,0,108,103,102],
[107,109,96,92,102,0,108,105],
[100,98,98,86,107,102,0,104],
[97,90,100,91,108,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,75,183,157,75,131,102],
[55,0,79,106,157,52,79,75],
[135,131,0,159,186,105,186,131],
[27,104,51,0,106,51,104,51],
[53,53,24,104,0,51,77,75],
[135,158,105,159,159,0,159,129],
[79,131,24,106,133,51,0,51],
[108,135,79,159,135,81,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,106,90,86,103,90],
[126,0,112,118,117,104,111,106],
[115,98,0,122,108,93,107,115],
[104,92,88,0,90,98,99,109],
[120,93,102,120,0,105,118,116],
[124,106,117,112,105,0,114,112],
[107,99,103,111,92,96,0,95],
[120,104,95,101,94,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,116,126,107,105,131,117],
[85,0,90,126,99,104,119,127],
[94,120,0,113,108,112,100,133],
[84,84,97,0,96,92,107,95],
[103,111,102,114,0,84,106,120],
[105,106,98,118,126,0,118,132],
[79,91,110,103,104,92,0,101],
[93,83,77,115,90,78,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,82,126,70,115,104,96],
[93,0,97,139,72,106,94,108],
[128,113,0,102,95,114,140,94],
[84,71,108,0,73,107,84,61],
[140,138,115,137,0,79,116,104],
[95,104,96,103,131,0,92,59],
[106,116,70,126,94,118,0,82],
[114,102,116,149,106,151,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,114,106,104,99,93],
[98,0,88,100,92,96,91,90],
[117,122,0,116,103,120,104,106],
[96,110,94,0,100,109,100,103],
[104,118,107,110,0,106,106,100],
[106,114,90,101,104,0,116,90],
[111,119,106,110,104,94,0,88],
[117,120,104,107,110,120,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,102,103,97,110,104],
[101,0,114,114,105,110,124,116],
[92,96,0,110,90,86,108,100],
[108,96,100,0,105,95,112,99],
[107,105,120,105,0,108,108,106],
[113,100,124,115,102,0,118,113],
[100,86,102,98,102,92,0,104],
[106,94,110,111,104,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,104,117,128,140,120,138],
[77,0,70,104,88,110,98,89],
[106,140,0,137,103,124,105,106],
[93,106,73,0,88,106,93,90],
[82,122,107,122,0,97,104,107],
[70,100,86,104,113,0,89,97],
[90,112,105,117,106,121,0,108],
[72,121,104,120,103,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,94,99,105,99,113],
[111,0,112,88,106,105,100,121],
[111,98,0,90,92,104,104,112],
[116,122,120,0,101,109,112,105],
[111,104,118,109,0,113,111,110],
[105,105,106,101,97,0,106,112],
[111,110,106,98,99,104,0,122],
[97,89,98,105,100,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,103,103,101,101,112],
[106,0,112,107,120,102,108,111],
[106,98,0,98,115,105,104,117],
[107,103,112,0,109,109,102,119],
[107,90,95,101,0,97,108,113],
[109,108,105,101,113,0,107,118],
[109,102,106,108,102,103,0,112],
[98,99,93,91,97,92,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,96,108,113,99,95],
[117,0,101,104,122,110,109,105],
[116,109,0,106,116,103,118,106],
[114,106,104,0,115,115,114,99],
[102,88,94,95,0,101,96,96],
[97,100,107,95,109,0,96,81],
[111,101,92,96,114,114,0,91],
[115,105,104,111,114,129,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,80,96,90,92,103],
[112,0,112,93,105,107,115,118],
[116,98,0,109,111,103,106,121],
[130,117,101,0,119,105,114,118],
[114,105,99,91,0,98,103,101],
[120,103,107,105,112,0,108,123],
[118,95,104,96,107,102,0,114],
[107,92,89,92,109,87,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,108,112,91,110,110,99],
[85,0,87,101,85,90,88,91],
[102,123,0,112,101,94,117,86],
[98,109,98,0,109,101,83,83],
[119,125,109,101,0,91,100,101],
[100,120,116,109,119,0,103,97],
[100,122,93,127,110,107,0,108],
[111,119,124,127,109,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,98,106,108,101,98],
[110,0,116,105,99,111,113,111],
[99,94,0,85,96,104,97,102],
[112,105,125,0,119,110,107,105],
[104,111,114,91,0,105,104,101],
[102,99,106,100,105,0,100,111],
[109,97,113,103,106,110,0,103],
[112,99,108,105,109,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,99,94,120,111,94],
[113,0,108,99,112,116,99,108],
[94,102,0,100,106,102,107,105],
[111,111,110,0,100,110,110,106],
[116,98,104,110,0,106,107,104],
[90,94,108,100,104,0,99,94],
[99,111,103,100,103,111,0,106],
[116,102,105,104,106,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,68,66,84,95,87],
[115,0,105,86,94,102,93,96],
[113,105,0,87,86,104,93,87],
[142,124,123,0,115,114,113,95],
[144,116,124,95,0,122,103,106],
[126,108,106,96,88,0,118,117],
[115,117,117,97,107,92,0,117],
[123,114,123,115,104,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,131,100,91,108,90,103],
[111,0,151,100,131,122,112,151],
[79,59,0,69,79,70,83,91],
[110,110,141,0,109,102,142,103],
[119,79,131,101,0,89,101,123],
[102,88,140,108,121,0,111,121],
[120,98,127,68,109,99,0,80],
[107,59,119,107,87,89,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,80,81,113,95,114,47],
[146,0,113,115,129,146,145,96],
[130,97,0,83,131,82,148,97],
[129,95,127,0,178,110,129,144],
[97,81,79,32,0,96,130,113],
[115,64,128,100,114,0,98,113],
[96,65,62,81,80,112,0,96],
[163,114,113,66,97,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,99,104,102,92,90],
[103,0,108,99,106,101,104,110],
[115,102,0,105,117,110,117,118],
[111,111,105,0,109,110,99,113],
[106,104,93,101,0,105,106,97],
[108,109,100,100,105,0,110,104],
[118,106,93,111,104,100,0,104],
[120,100,92,97,113,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,118,100,109,128,130],
[120,0,122,93,102,127,120,129],
[108,88,0,107,108,117,117,98],
[92,117,103,0,94,100,138,139],
[110,108,102,116,0,106,102,93],
[101,83,93,110,104,0,112,114],
[82,90,93,72,108,98,0,74],
[80,81,112,71,117,96,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,116,113,104,105,110],
[99,0,99,105,98,102,107,111],
[92,111,0,101,108,98,118,115],
[94,105,109,0,101,108,107,106],
[97,112,102,109,0,106,107,115],
[106,108,112,102,104,0,105,112],
[105,103,92,103,103,105,0,107],
[100,99,95,104,95,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,88,94,101,98,89,95],
[111,0,92,98,101,110,106,101],
[122,118,0,101,117,122,101,114],
[116,112,109,0,133,128,110,93],
[109,109,93,77,0,117,87,106],
[112,100,88,82,93,0,103,110],
[121,104,109,100,123,107,0,108],
[115,109,96,117,104,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,119,98,86,113,94,95],
[120,0,121,89,111,121,99,111],
[91,89,0,80,98,94,86,60],
[112,121,130,0,114,106,112,104],
[124,99,112,96,0,112,89,114],
[97,89,116,104,98,0,103,110],
[116,111,124,98,121,107,0,115],
[115,99,150,106,96,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,90,113,85,95,113],
[97,0,102,94,136,106,102,125],
[109,108,0,97,140,85,103,97],
[120,116,113,0,152,105,112,129],
[97,74,70,58,0,72,77,84],
[125,104,125,105,138,0,122,108],
[115,108,107,98,133,88,0,121],
[97,85,113,81,126,102,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,130,102,97,111,100],
[93,0,110,106,95,109,95,81],
[101,100,0,107,94,68,77,81],
[80,104,103,0,98,83,70,89],
[108,115,116,112,0,95,106,84],
[113,101,142,127,115,0,104,103],
[99,115,133,140,104,106,0,115],
[110,129,129,121,126,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,93,92,99,89,104,86],
[125,0,102,128,126,116,120,123],
[117,108,0,129,128,103,134,125],
[118,82,81,0,114,103,94,106],
[111,84,82,96,0,89,107,97],
[121,94,107,107,121,0,123,108],
[106,90,76,116,103,87,0,91],
[124,87,85,104,113,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,90,105,101,103,110],
[103,0,119,104,115,115,109,106],
[97,91,0,88,95,104,98,102],
[120,106,122,0,121,118,104,126],
[105,95,115,89,0,112,114,120],
[109,95,106,92,98,0,106,110],
[107,101,112,106,96,104,0,104],
[100,104,108,84,90,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,117,128,98,86,109],
[109,0,112,123,131,98,95,125],
[99,98,0,118,109,89,106,121],
[93,87,92,0,107,86,98,99],
[82,79,101,103,0,76,69,116],
[112,112,121,124,134,0,86,131],
[124,115,104,112,141,124,0,143],
[101,85,89,111,94,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,105,110,100,100,96],
[112,0,103,105,109,105,116,100],
[106,107,0,99,109,100,103,101],
[105,105,111,0,110,103,103,100],
[100,101,101,100,0,93,104,94],
[110,105,110,107,117,0,111,98],
[110,94,107,107,106,99,0,106],
[114,110,109,110,116,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,99,79,98,103,105],
[86,0,106,86,83,73,69,95],
[106,104,0,119,93,93,105,102],
[111,124,91,0,90,121,100,114],
[131,127,117,120,0,103,110,108],
[112,137,117,89,107,0,106,115],
[107,141,105,110,100,104,0,124],
[105,115,108,96,102,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,96,108,116,109,122],
[113,0,100,110,121,110,117,115],
[94,110,0,99,122,131,121,122],
[114,100,111,0,116,117,117,123],
[102,89,88,94,0,100,107,109],
[94,100,79,93,110,0,106,109],
[101,93,89,93,103,104,0,107],
[88,95,88,87,101,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,102,93,91,105,113],
[106,0,108,114,97,102,109,110],
[107,102,0,119,106,99,103,113],
[108,96,91,0,88,110,105,110],
[117,113,104,122,0,109,115,118],
[119,108,111,100,101,0,110,110],
[105,101,107,105,95,100,0,113],
[97,100,97,100,92,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,89,91,96,106,91],
[114,0,123,106,109,102,120,108],
[119,87,0,101,98,101,115,101],
[121,104,109,0,94,112,120,102],
[119,101,112,116,0,99,114,106],
[114,108,109,98,111,0,118,112],
[104,90,95,90,96,92,0,95],
[119,102,109,108,104,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,116,124,129,111,88],
[105,0,108,120,119,92,105,106],
[89,102,0,96,112,112,102,85],
[94,90,114,0,123,115,111,101],
[86,91,98,87,0,96,96,98],
[81,118,98,95,114,0,108,113],
[99,105,108,99,114,102,0,108],
[122,104,125,109,112,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,98,93,108,104,107,106],
[122,0,102,101,123,110,112,101],
[112,108,0,110,114,103,113,106],
[117,109,100,0,111,107,103,108],
[102,87,96,99,0,98,98,93],
[106,100,107,103,112,0,108,107],
[103,98,97,107,112,102,0,105],
[104,109,104,102,117,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,91,146,115,118,101],
[98,0,123,92,119,81,88,112],
[98,87,0,88,95,80,105,107],
[119,118,122,0,113,117,120,105],
[64,91,115,97,0,95,84,77],
[95,129,130,93,115,0,112,109],
[92,122,105,90,126,98,0,109],
[109,98,103,105,133,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,91,93,100,101,109],
[115,0,110,103,96,108,105,115],
[114,100,0,116,96,113,120,112],
[119,107,94,0,98,102,115,96],
[117,114,114,112,0,106,115,99],
[110,102,97,108,104,0,105,103],
[109,105,90,95,95,105,0,112],
[101,95,98,114,111,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,109,119,104,105,117],
[97,0,112,108,115,107,96,119],
[101,98,0,100,115,97,95,99],
[101,102,110,0,124,105,104,117],
[91,95,95,86,0,101,86,104],
[106,103,113,105,109,0,111,108],
[105,114,115,106,124,99,0,122],
[93,91,111,93,106,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,105,116,106,126,102],
[95,0,106,104,112,103,118,114],
[94,104,0,86,90,97,106,97],
[105,106,124,0,114,114,116,107],
[94,98,120,96,0,108,101,120],
[104,107,113,96,102,0,106,96],
[84,92,104,94,109,104,0,107],
[108,96,113,103,90,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,106,111,99,108,99],
[113,0,99,112,98,99,104,100],
[105,111,0,100,100,94,106,106],
[104,98,110,0,108,102,116,101],
[99,112,110,102,0,88,101,92],
[111,111,116,108,122,0,117,96],
[102,106,104,94,109,93,0,91],
[111,110,104,109,118,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,101,84,142,122,97],
[99,0,85,93,86,136,99,69],
[107,125,0,111,110,164,136,102],
[109,117,99,0,76,134,113,111],
[126,124,100,134,0,133,141,116],
[68,74,46,76,77,0,104,92],
[88,111,74,97,69,106,0,80],
[113,141,108,99,94,118,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,117,119,80,116,86],
[104,0,109,129,122,107,126,86],
[113,101,0,122,126,104,126,111],
[93,81,88,0,121,75,114,80],
[91,88,84,89,0,70,112,78],
[130,103,106,135,140,0,150,113],
[94,84,84,96,98,60,0,81],
[124,124,99,130,132,97,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,93,105,110,98,107],
[112,0,118,120,113,107,102,104],
[118,92,0,107,109,98,109,98],
[117,90,103,0,109,98,97,93],
[105,97,101,101,0,92,85,101],
[100,103,112,112,118,0,100,100],
[112,108,101,113,125,110,0,103],
[103,106,112,117,109,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,102,117,99,97,127],
[104,0,110,106,142,143,116,125],
[116,100,0,131,116,108,112,129],
[108,104,79,0,127,92,92,95],
[93,68,94,83,0,81,87,95],
[111,67,102,118,129,0,69,116],
[113,94,98,118,123,141,0,137],
[83,85,81,115,115,94,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,108,99,93,102,107],
[93,0,109,94,95,96,99,111],
[106,101,0,94,90,94,107,110],
[102,116,116,0,115,111,109,111],
[111,115,120,95,0,108,109,118],
[117,114,116,99,102,0,111,103],
[108,111,103,101,101,99,0,109],
[103,99,100,99,92,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,119,119,100,110,96],
[106,0,119,121,115,95,106,113],
[100,91,0,111,89,89,95,93],
[91,89,99,0,100,101,105,99],
[91,95,121,110,0,104,116,106],
[110,115,121,109,106,0,103,108],
[100,104,115,105,94,107,0,97],
[114,97,117,111,104,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,87,75,95,82,96],
[140,0,116,113,103,117,115,129],
[136,94,0,93,80,91,89,103],
[123,97,117,0,91,103,113,109],
[135,107,130,119,0,105,115,111],
[115,93,119,107,105,0,95,108],
[128,95,121,97,95,115,0,108],
[114,81,107,101,99,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,110,112,103,116,95],
[104,0,104,107,95,106,115,109],
[105,106,0,104,101,112,113,106],
[100,103,106,0,107,106,105,99],
[98,115,109,103,0,105,104,104],
[107,104,98,104,105,0,92,88],
[94,95,97,105,106,118,0,90],
[115,101,104,111,106,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,107,107,103,95,96],
[116,0,121,102,97,101,100,96],
[109,89,0,99,107,101,99,93],
[103,108,111,0,105,107,99,102],
[103,113,103,105,0,101,92,96],
[107,109,109,103,109,0,100,102],
[115,110,111,111,118,110,0,105],
[114,114,117,108,114,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,93,102,98,107,96,103],
[133,0,114,121,117,123,113,105],
[117,96,0,106,116,108,92,107],
[108,89,104,0,90,108,97,112],
[112,93,94,120,0,106,101,90],
[103,87,102,102,104,0,105,106],
[114,97,118,113,109,105,0,107],
[107,105,103,98,120,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,116,90,98,117,109,105],
[118,0,113,118,98,138,97,107],
[94,97,0,105,94,87,96,100],
[120,92,105,0,123,107,104,96],
[112,112,116,87,0,98,108,108],
[93,72,123,103,112,0,97,95],
[101,113,114,106,102,113,0,108],
[105,103,110,114,102,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,102,100,100,93,103],
[117,0,123,127,135,106,99,104],
[89,87,0,100,107,99,85,88],
[108,83,110,0,125,113,111,100],
[110,75,103,85,0,101,70,84],
[110,104,111,97,109,0,87,85],
[117,111,125,99,140,123,0,118],
[107,106,122,110,126,125,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,93,116,114,100,108],
[95,0,94,99,113,102,102,115],
[104,116,0,87,106,107,90,108],
[117,111,123,0,115,120,105,109],
[94,97,104,95,0,107,90,105],
[96,108,103,90,103,0,105,110],
[110,108,120,105,120,105,0,111],
[102,95,102,101,105,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,81,78,106,184,108,132],
[78,0,82,106,52,156,108,79],
[129,128,0,157,129,182,106,105],
[132,104,53,0,78,210,134,79],
[104,158,81,132,0,210,107,105],
[26,54,28,0,0,0,55,54],
[102,102,104,76,103,155,0,104],
[78,131,105,131,105,156,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,117,109,112,112,109],
[96,0,95,101,105,109,87,106],
[111,115,0,104,101,116,102,103],
[93,109,106,0,113,110,105,107],
[101,105,109,97,0,119,103,107],
[98,101,94,100,91,0,95,105],
[98,123,108,105,107,115,0,119],
[101,104,107,103,103,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,114,96,102,93,86],
[98,0,94,106,76,120,115,96],
[97,116,0,103,83,106,102,113],
[96,104,107,0,109,109,82,101],
[114,134,127,101,0,117,85,111],
[108,90,104,101,93,0,94,101],
[117,95,108,128,125,116,0,100],
[124,114,97,109,99,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,101,94,82,103,100,89],
[129,0,122,113,105,139,137,102],
[109,88,0,103,94,122,113,104],
[116,97,107,0,106,115,116,104],
[128,105,116,104,0,138,121,115],
[107,71,88,95,72,0,92,82],
[110,73,97,94,89,118,0,108],
[121,108,106,106,95,128,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,102,103,107,101,98],
[102,0,101,97,94,101,105,96],
[112,109,0,112,122,107,108,104],
[108,113,98,0,104,101,118,113],
[107,116,88,106,0,100,113,106],
[103,109,103,109,110,0,117,114],
[109,105,102,92,97,93,0,94],
[112,114,106,97,104,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,74,84,92,97,91],
[107,0,106,76,87,99,95,93],
[116,104,0,76,93,87,88,102],
[136,134,134,0,115,105,107,110],
[126,123,117,95,0,110,104,115],
[118,111,123,105,100,0,86,101],
[113,115,122,103,106,124,0,112],
[119,117,108,100,95,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,97,102,98,97,92],
[114,0,112,109,103,100,110,103],
[115,98,0,108,93,107,102,109],
[113,101,102,0,97,110,107,110],
[108,107,117,113,0,121,104,112],
[112,110,103,100,89,0,96,110],
[113,100,108,103,106,114,0,98],
[118,107,101,100,98,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,99,83,84,128,105],
[129,0,94,121,118,86,119,108],
[139,116,0,122,105,83,120,107],
[111,89,88,0,79,78,104,90],
[127,92,105,131,0,71,119,106],
[126,124,127,132,139,0,150,97],
[82,91,90,106,91,60,0,79],
[105,102,103,120,104,113,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,118,108,118,113,112],
[106,0,96,107,100,105,105,113],
[105,114,0,121,112,120,123,115],
[92,103,89,0,95,104,97,100],
[102,110,98,115,0,107,106,114],
[92,105,90,106,103,0,103,110],
[97,105,87,113,104,107,0,116],
[98,97,95,110,96,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,106,97,110,98,87],
[95,0,112,93,102,103,88,80],
[102,98,0,81,75,106,94,84],
[104,117,129,0,118,112,114,107],
[113,108,135,92,0,135,110,98],
[100,107,104,98,75,0,89,86],
[112,122,116,96,100,121,0,97],
[123,130,126,103,112,124,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,102,108,103,105,107],
[101,0,100,103,110,113,112,107],
[99,110,0,107,109,102,109,106],
[108,107,103,0,109,107,105,109],
[102,100,101,101,0,102,107,104],
[107,97,108,103,108,0,107,115],
[105,98,101,105,103,103,0,111],
[103,103,104,101,106,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,116,107,96,109,112],
[110,0,109,105,103,107,107,117],
[104,101,0,96,101,99,117,113],
[94,105,114,0,102,113,108,111],
[103,107,109,108,0,111,104,106],
[114,103,111,97,99,0,108,107],
[101,103,93,102,106,102,0,109],
[98,93,97,99,104,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,111,97,125,106,120],
[99,0,99,103,101,122,99,84],
[84,111,0,114,78,111,98,73],
[99,107,96,0,101,137,96,103],
[113,109,132,109,0,100,88,79],
[85,88,99,73,110,0,84,73],
[104,111,112,114,122,126,0,80],
[90,126,137,107,131,137,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,112,110,121,106,105],
[103,0,101,101,101,112,100,95],
[113,109,0,108,101,111,107,97],
[98,109,102,0,103,108,108,111],
[100,109,109,107,0,105,97,107],
[89,98,99,102,105,0,99,105],
[104,110,103,102,113,111,0,110],
[105,115,113,99,103,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,70,100,81,139,95,111],
[87,0,74,85,97,86,14,73],
[140,136,0,113,94,141,67,95],
[110,125,97,0,137,153,83,111],
[129,113,116,73,0,129,87,101],
[71,124,69,57,81,0,40,83],
[115,196,143,127,123,170,0,86],
[99,137,115,99,109,127,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,131,108,100,131,120,133],
[89,0,112,103,72,105,69,127],
[79,98,0,104,48,91,80,109],
[102,107,106,0,94,127,106,107],
[110,138,162,116,0,122,101,130],
[79,105,119,83,88,0,74,109],
[90,141,130,104,109,136,0,106],
[77,83,101,103,80,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,96,109,130,113,98],
[107,0,103,105,106,130,118,105],
[108,107,0,106,98,133,106,102],
[114,105,104,0,112,117,111,104],
[101,104,112,98,0,110,88,102],
[80,80,77,93,100,0,95,93],
[97,92,104,99,122,115,0,96],
[112,105,108,106,108,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,123,96,114,115,119],
[93,0,100,115,103,105,99,114],
[109,110,0,117,105,118,124,124],
[87,95,93,0,81,99,96,80],
[114,107,105,129,0,117,104,111],
[96,105,92,111,93,0,99,113],
[95,111,86,114,106,111,0,101],
[91,96,86,130,99,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,94,104,82,131,88],
[116,0,99,103,98,102,113,101],
[108,111,0,113,110,122,126,86],
[116,107,97,0,103,92,106,114],
[106,112,100,107,0,101,132,107],
[128,108,88,118,109,0,123,107],
[79,97,84,104,78,87,0,93],
[122,109,124,96,103,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,90,103,111,105,112,117],
[109,0,104,106,100,116,123,97],
[120,106,0,110,102,108,119,129],
[107,104,100,0,113,96,117,104],
[99,110,108,97,0,102,119,89],
[105,94,102,114,108,0,131,100],
[98,87,91,93,91,79,0,97],
[93,113,81,106,121,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,101,104,111,116,80],
[120,0,105,109,124,111,124,114],
[103,105,0,119,111,128,124,101],
[109,101,91,0,101,111,103,98],
[106,86,99,109,0,122,119,106],
[99,99,82,99,88,0,100,91],
[94,86,86,107,91,110,0,89],
[130,96,109,112,104,119,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,97,94,103,86,93],
[116,0,99,113,95,113,105,92],
[114,111,0,119,104,118,122,91],
[113,97,91,0,83,105,90,88],
[116,115,106,127,0,103,113,105],
[107,97,92,105,107,0,99,89],
[124,105,88,120,97,111,0,102],
[117,118,119,122,105,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,117,112,113,99,124],
[107,0,119,116,98,98,82,101],
[96,91,0,101,101,97,97,96],
[93,94,109,0,89,96,89,115],
[98,112,109,121,0,101,99,106],
[97,112,113,114,109,0,106,116],
[111,128,113,121,111,104,0,125],
[86,109,114,95,104,94,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,108,106,112,109,99],
[100,0,94,101,110,103,107,100],
[96,116,0,107,107,115,117,106],
[102,109,103,0,102,116,100,96],
[104,100,103,108,0,113,106,101],
[98,107,95,94,97,0,104,98],
[101,103,93,110,104,106,0,97],
[111,110,104,114,109,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,98,119,116,90,80],
[105,0,91,119,114,105,81,96],
[112,119,0,75,104,91,81,102],
[112,91,135,0,121,101,104,88],
[91,96,106,89,0,68,98,82],
[94,105,119,109,142,0,97,110],
[120,129,129,106,112,113,0,100],
[130,114,108,122,128,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,123,102,107,113,112],
[113,0,107,121,98,131,123,96],
[107,103,0,117,109,112,113,97],
[87,89,93,0,92,108,110,87],
[108,112,101,118,0,126,103,90],
[103,79,98,102,84,0,100,90],
[97,87,97,100,107,110,0,82],
[98,114,113,123,120,120,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,118,96,115,106,97],
[102,0,79,111,89,106,107,98],
[106,131,0,134,107,117,123,105],
[92,99,76,0,84,103,104,91],
[114,121,103,126,0,125,110,108],
[95,104,93,107,85,0,96,89],
[104,103,87,106,100,114,0,93],
[113,112,105,119,102,121,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,103,80,108,100,100],
[101,0,108,103,95,106,99,106],
[107,102,0,101,103,111,108,114],
[107,107,109,0,98,114,95,107],
[130,115,107,112,0,115,108,103],
[102,104,99,96,95,0,94,99],
[110,111,102,115,102,116,0,109],
[110,104,96,103,107,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,109,124,112,121,116],
[107,0,116,120,129,105,126,115],
[101,94,0,117,124,106,121,109],
[101,90,93,0,125,107,110,96],
[86,81,86,85,0,90,106,92],
[98,105,104,103,120,0,117,103],
[89,84,89,100,104,93,0,92],
[94,95,101,114,118,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,106,99,112,112,108],
[102,0,114,99,104,111,119,109],
[108,96,0,103,105,109,106,111],
[104,111,107,0,99,108,103,109],
[111,106,105,111,0,119,117,113],
[98,99,101,102,91,0,102,98],
[98,91,104,107,93,108,0,103],
[102,101,99,101,97,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,90,96,77,88,61,89],
[109,0,126,96,112,102,88,108],
[120,84,0,98,67,86,72,90],
[114,114,112,0,78,115,106,85],
[133,98,143,132,0,130,116,113],
[122,108,124,95,80,0,76,107],
[149,122,138,104,94,134,0,144],
[121,102,120,125,97,103,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,93,103,84,93,85],
[114,0,100,95,107,90,89,98],
[107,110,0,105,100,95,104,104],
[117,115,105,0,127,103,113,97],
[107,103,110,83,0,88,98,86],
[126,120,115,107,122,0,99,99],
[117,121,106,97,112,111,0,107],
[125,112,106,113,124,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,111,105,108,92,103],
[95,0,103,106,110,103,104,104],
[110,107,0,117,104,109,114,105],
[99,104,93,0,105,107,105,114],
[105,100,106,105,0,106,104,114],
[102,107,101,103,104,0,103,100],
[118,106,96,105,106,107,0,110],
[107,106,105,96,96,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,92,101,99,84,105],
[118,0,97,97,113,99,107,116],
[112,113,0,100,105,115,91,109],
[118,113,110,0,103,112,96,108],
[109,97,105,107,0,103,87,101],
[111,111,95,98,107,0,98,121],
[126,103,119,114,123,112,0,123],
[105,94,101,102,109,89,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,128,114,107,102,92],
[107,0,108,126,103,116,112,110],
[104,102,0,107,106,115,100,104],
[82,84,103,0,101,115,89,103],
[96,107,104,109,0,111,103,105],
[103,94,95,95,99,0,99,96],
[108,98,110,121,107,111,0,108],
[118,100,106,107,105,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,121,118,105,151,122,109],
[88,0,116,86,73,133,105,106],
[89,94,0,88,90,123,107,122],
[92,124,122,0,106,125,65,124],
[105,137,120,104,0,106,92,77],
[59,77,87,85,104,0,56,105],
[88,105,103,145,118,154,0,90],
[101,104,88,86,133,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,111,128,112,117,124,105],
[87,0,107,106,110,92,91,86],
[99,103,0,103,90,113,97,101],
[82,104,107,0,85,88,69,86],
[98,100,120,125,0,103,107,94],
[93,118,97,122,107,0,95,97],
[86,119,113,141,103,115,0,119],
[105,124,109,124,116,113,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,108,102,102,136,104],
[101,0,104,93,112,105,112,111],
[93,106,0,101,113,92,117,93],
[102,117,109,0,117,106,121,111],
[108,98,97,93,0,120,103,89],
[108,105,118,104,90,0,123,111],
[74,98,93,89,107,87,0,80],
[106,99,117,99,121,99,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,109,95,107,121,108],
[98,0,102,110,88,95,102,98],
[95,108,0,94,99,84,94,91],
[101,100,116,0,105,103,105,110],
[115,122,111,105,0,100,116,111],
[103,115,126,107,110,0,118,101],
[89,108,116,105,94,92,0,90],
[102,112,119,100,99,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,93,107,145,135,123,106],
[79,0,85,76,113,97,69,69],
[117,125,0,102,123,114,107,94],
[103,134,108,0,120,145,115,115],
[65,97,87,90,0,80,104,78],
[75,113,96,65,130,0,91,87],
[87,141,103,95,106,119,0,97],
[104,141,116,95,132,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,120,107,145,118,94],
[109,0,108,98,112,122,114,105],
[96,102,0,106,113,126,125,109],
[90,112,104,0,108,129,99,93],
[103,98,97,102,0,115,99,107],
[65,88,84,81,95,0,101,74],
[92,96,85,111,111,109,0,88],
[116,105,101,117,103,136,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,99,105,100,103,102],
[105,0,101,111,106,100,102,107],
[103,109,0,112,112,102,114,106],
[111,99,98,0,114,107,103,105],
[105,104,98,96,0,106,115,107],
[110,110,108,103,104,0,104,102],
[107,108,96,107,95,106,0,99],
[108,103,104,105,103,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,109,101,110,103,111],
[117,0,106,122,103,107,100,108],
[108,104,0,124,92,118,119,109],
[101,88,86,0,98,105,91,94],
[109,107,118,112,0,120,99,108],
[100,103,92,105,90,0,96,105],
[107,110,91,119,111,114,0,115],
[99,102,101,116,102,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,141,100,109,101,130,121],
[87,0,133,99,116,109,121,90],
[69,77,0,97,75,83,87,94],
[110,111,113,0,82,88,115,96],
[101,94,135,128,0,105,124,104],
[109,101,127,122,105,0,110,107],
[80,89,123,95,86,100,0,80],
[89,120,116,114,106,103,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,98,148,117,140,94,121],
[76,0,96,105,81,111,85,71],
[112,114,0,131,104,115,90,111],
[62,105,79,0,87,137,78,96],
[93,129,106,123,0,116,105,110],
[70,99,95,73,94,0,32,84],
[116,125,120,132,105,178,0,109],
[89,139,99,114,100,126,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,110,103,112,120,101],
[105,0,120,117,105,105,111,109],
[107,90,0,108,108,105,105,101],
[100,93,102,0,109,95,110,96],
[107,105,102,101,0,102,110,99],
[98,105,105,115,108,0,104,95],
[90,99,105,100,100,106,0,97],
[109,101,109,114,111,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,103,115,107,127,112,122],
[87,0,95,91,95,98,103,88],
[107,115,0,110,112,105,122,104],
[95,119,100,0,104,112,100,101],
[103,115,98,106,0,116,122,122],
[83,112,105,98,94,0,107,111],
[98,107,88,110,88,103,0,109],
[88,122,106,109,88,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,91,100,101,106,107,90],
[98,0,84,70,88,100,100,82],
[119,126,0,94,107,118,120,105],
[110,140,116,0,119,123,114,99],
[109,122,103,91,0,114,96,93],
[104,110,92,87,96,0,103,97],
[103,110,90,96,114,107,0,100],
[120,128,105,111,117,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,106,108,101,120,114],
[94,0,95,93,85,98,98,111],
[105,115,0,107,113,100,118,125],
[104,117,103,0,110,114,108,122],
[102,125,97,100,0,101,108,118],
[109,112,110,96,109,0,112,118],
[90,112,92,102,102,98,0,107],
[96,99,85,88,92,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,104,98,98,100,110],
[116,0,115,109,108,106,95,117],
[106,95,0,108,98,101,96,105],
[106,101,102,0,97,94,94,102],
[112,102,112,113,0,101,97,111],
[112,104,109,116,109,0,113,117],
[110,115,114,116,113,97,0,119],
[100,93,105,108,99,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,105,125,117,120,101],
[114,0,110,103,113,115,125,112],
[99,100,0,109,104,113,107,107],
[105,107,101,0,108,95,117,113],
[85,97,106,102,0,95,101,111],
[93,95,97,115,115,0,109,111],
[90,85,103,93,109,101,0,93],
[109,98,103,97,99,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,115,102,119,123,103],
[98,0,100,106,113,112,112,108],
[98,110,0,124,118,122,110,99],
[95,104,86,0,106,107,113,102],
[108,97,92,104,0,113,99,87],
[91,98,88,103,97,0,99,92],
[87,98,100,97,111,111,0,102],
[107,102,111,108,123,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,129,111,105,119,102,132],
[87,0,85,92,89,91,106,109],
[81,125,0,106,97,103,108,107],
[99,118,104,0,101,134,104,121],
[105,121,113,109,0,113,116,127],
[91,119,107,76,97,0,97,122],
[108,104,102,106,94,113,0,115],
[78,101,103,89,83,88,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,93,98,82,110,80,100],
[92,0,81,81,82,100,98,89],
[117,129,0,100,91,89,99,101],
[112,129,110,0,71,121,101,130],
[128,128,119,139,0,118,99,138],
[100,110,121,89,92,0,120,140],
[130,112,111,109,111,90,0,90],
[110,121,109,80,72,70,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,94,105,109,102,106],
[108,0,102,106,99,111,113,104],
[96,108,0,96,108,109,103,107],
[116,104,114,0,103,117,112,107],
[105,111,102,107,0,115,103,104],
[101,99,101,93,95,0,103,102],
[108,97,107,98,107,107,0,103],
[104,106,103,103,106,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,83,101,95,109,107,100],
[101,0,97,109,111,103,96,104],
[127,113,0,103,116,115,114,117],
[109,101,107,0,106,110,100,112],
[115,99,94,104,0,102,108,130],
[101,107,95,100,108,0,91,115],
[103,114,96,110,102,119,0,117],
[110,106,93,98,80,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,102,104,107,112,107],
[96,0,99,101,94,98,90,97],
[87,111,0,99,87,93,99,93],
[108,109,111,0,109,101,101,108],
[106,116,123,101,0,103,115,109],
[103,112,117,109,107,0,100,112],
[98,120,111,109,95,110,0,116],
[103,113,117,102,101,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,90,95,108,93,99,102],
[122,0,110,104,122,127,120,108],
[120,100,0,112,124,117,112,86],
[115,106,98,0,112,124,117,103],
[102,88,86,98,0,100,120,115],
[117,83,93,86,110,0,96,114],
[111,90,98,93,90,114,0,102],
[108,102,124,107,95,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,105,109,101,111,102],
[96,0,100,100,95,99,112,106],
[111,110,0,107,110,105,115,100],
[105,110,103,0,101,110,123,107],
[101,115,100,109,0,109,116,109],
[109,111,105,100,101,0,118,104],
[99,98,95,87,94,92,0,100],
[108,104,110,103,101,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,109,135,125,118,130],
[91,0,96,102,113,98,112,101],
[110,114,0,103,135,113,111,118],
[101,108,107,0,119,98,115,114],
[75,97,75,91,0,95,89,105],
[85,112,97,112,115,0,111,105],
[92,98,99,95,121,99,0,112],
[80,109,92,96,105,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,110,103,122,109,98],
[100,0,94,104,105,111,105,95],
[117,116,0,106,112,119,110,104],
[100,106,104,0,112,111,115,105],
[107,105,98,98,0,115,89,96],
[88,99,91,99,95,0,110,99],
[101,105,100,95,121,100,0,100],
[112,115,106,105,114,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,95,101,103,103,84],
[112,0,121,109,110,104,103,105],
[108,89,0,101,90,93,115,100],
[115,101,109,0,111,105,110,113],
[109,100,120,99,0,88,97,91],
[107,106,117,105,122,0,114,107],
[107,107,95,100,113,96,0,96],
[126,105,110,97,119,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,86,91,107,99,86],
[103,0,99,88,93,99,98,79],
[112,111,0,83,82,98,84,91],
[124,122,127,0,112,112,111,99],
[119,117,128,98,0,127,113,107],
[103,111,112,98,83,0,101,97],
[111,112,126,99,97,109,0,98],
[124,131,119,111,103,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,87,105,113,96,109],
[98,0,110,81,96,97,99,110],
[99,100,0,102,94,97,104,108],
[123,129,108,0,109,113,102,116],
[105,114,116,101,0,107,109,119],
[97,113,113,97,103,0,114,115],
[114,111,106,108,101,96,0,113],
[101,100,102,94,91,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,140,140,71,140,210,210],
[70,0,71,141,70,139,139,141],
[70,139,0,70,70,139,139,141],
[70,69,140,0,70,69,139,210],
[139,140,140,140,0,69,139,210],
[70,71,71,141,141,0,141,141],
[0,71,71,71,71,69,0,141],
[0,69,69,0,0,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,115,106,81,97,95,101],
[125,0,136,101,100,102,98,99],
[95,74,0,78,87,78,76,96],
[104,109,132,0,94,101,102,104],
[129,110,123,116,0,108,105,116],
[113,108,132,109,102,0,97,131],
[115,112,134,108,105,113,0,115],
[109,111,114,106,94,79,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,103,108,106,99,100],
[105,0,101,115,104,103,95,111],
[110,109,0,112,104,115,113,113],
[107,95,98,0,102,110,91,109],
[102,106,106,108,0,101,95,100],
[104,107,95,100,109,0,101,110],
[111,115,97,119,115,109,0,117],
[110,99,97,101,110,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,96,102,79,61,87,98],
[143,0,106,134,91,122,111,119],
[114,104,0,105,103,92,95,143],
[108,76,105,0,86,91,78,95],
[131,119,107,124,0,119,99,130],
[149,88,118,119,91,0,108,119],
[123,99,115,132,111,102,0,139],
[112,91,67,115,80,91,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,134,120,114,95,121,118],
[100,0,119,112,106,105,128,106],
[76,91,0,102,68,87,99,103],
[90,98,108,0,85,87,109,95],
[96,104,142,125,0,108,119,123],
[115,105,123,123,102,0,114,117],
[89,82,111,101,91,96,0,94],
[92,104,107,115,87,93,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,91,97,109,98,112,105],
[95,0,96,94,95,88,103,99],
[119,114,0,108,97,115,121,111],
[113,116,102,0,104,112,113,102],
[101,115,113,106,0,106,119,105],
[112,122,95,98,104,0,112,110],
[98,107,89,97,91,98,0,94],
[105,111,99,108,105,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,102,100,92,109,83,95],
[124,0,119,118,125,120,121,98],
[108,91,0,107,100,107,100,112],
[110,92,103,0,95,103,101,91],
[118,85,110,115,0,111,99,95],
[101,90,103,107,99,0,110,103],
[127,89,110,109,111,100,0,102],
[115,112,98,119,115,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,111,102,100,93,105],
[101,0,103,93,103,98,89,109],
[113,107,0,99,104,97,93,105],
[99,117,111,0,109,101,107,111],
[108,107,106,101,0,102,89,110],
[110,112,113,109,108,0,108,91],
[117,121,117,103,121,102,0,116],
[105,101,105,99,100,119,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,110,113,121,103,110],
[102,0,115,109,104,96,92,96],
[107,95,0,107,106,102,108,101],
[100,101,103,0,109,106,105,95],
[97,106,104,101,0,106,104,95],
[89,114,108,104,104,0,95,117],
[107,118,102,105,106,115,0,101],
[100,114,109,115,115,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,118,85,93,98,100,112],
[118,0,123,100,111,111,107,111],
[92,87,0,87,85,99,92,104],
[125,110,123,0,109,88,113,107],
[117,99,125,101,0,94,116,96],
[112,99,111,122,116,0,116,114],
[110,103,118,97,94,94,0,108],
[98,99,106,103,114,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,110,103,100,108,112],
[95,0,119,98,103,98,93,103],
[98,91,0,109,105,117,87,97],
[100,112,101,0,110,110,92,95],
[107,107,105,100,0,116,96,102],
[110,112,93,100,94,0,90,102],
[102,117,123,118,114,120,0,116],
[98,107,113,115,108,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,117,108,98,97,119,111],
[120,0,110,121,95,116,130,113],
[93,100,0,107,78,102,116,100],
[102,89,103,0,90,92,114,101],
[112,115,132,120,0,112,125,103],
[113,94,108,118,98,0,123,110],
[91,80,94,96,85,87,0,97],
[99,97,110,109,107,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,124,103,108,96,116],
[91,0,110,117,119,112,90,131],
[110,100,0,136,118,109,96,135],
[86,93,74,0,93,91,77,108],
[107,91,92,117,0,107,108,114],
[102,98,101,119,103,0,93,112],
[114,120,114,133,102,117,0,122],
[94,79,75,102,96,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,70,109,115,113,81],
[118,0,95,102,104,123,131,113],
[105,115,0,107,101,138,128,113],
[140,108,103,0,94,132,127,117],
[101,106,109,116,0,126,120,103],
[95,87,72,78,84,0,110,107],
[97,79,82,83,90,100,0,87],
[129,97,97,93,107,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,112,109,111,128,110],
[106,0,111,104,110,112,111,115],
[93,99,0,106,87,105,111,118],
[98,106,104,0,102,112,116,102],
[101,100,123,108,0,111,118,118],
[99,98,105,98,99,0,115,115],
[82,99,99,94,92,95,0,110],
[100,95,92,108,92,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,95,111,103,101,106],
[112,0,103,112,112,106,104,119],
[102,107,0,103,114,100,93,115],
[115,98,107,0,114,112,112,105],
[99,98,96,96,0,94,99,108],
[107,104,110,98,116,0,102,115],
[109,106,117,98,111,108,0,117],
[104,91,95,105,102,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,123,111,126,109,117],
[104,0,116,112,119,129,102,125],
[107,94,0,111,108,108,97,115],
[87,98,99,0,101,106,104,112],
[99,91,102,109,0,118,104,114],
[84,81,102,104,92,0,95,109],
[101,108,113,106,106,115,0,121],
[93,85,95,98,96,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,113,108,101,106,103],
[105,0,103,117,114,108,109,111],
[101,107,0,113,108,103,112,108],
[97,93,97,0,105,102,108,100],
[102,96,102,105,0,94,106,101],
[109,102,107,108,116,0,113,104],
[104,101,98,102,104,97,0,107],
[107,99,102,110,109,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,106,81,101,96,97],
[91,0,101,120,83,107,114,88],
[99,109,0,101,107,96,77,94],
[104,90,109,0,83,99,94,90],
[129,127,103,127,0,97,104,104],
[109,103,114,111,113,0,87,102],
[114,96,133,116,106,123,0,107],
[113,122,116,120,106,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,104,104,103,103,107],
[94,0,110,107,105,102,107,104],
[112,100,0,125,112,102,103,101],
[106,103,85,0,104,92,102,101],
[106,105,98,106,0,97,113,106],
[107,108,108,118,113,0,98,99],
[107,103,107,108,97,112,0,99],
[103,106,109,109,104,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,128,88,90,115,88,87],
[112,0,116,96,95,111,91,89],
[82,94,0,90,78,86,92,76],
[122,114,120,0,102,108,106,111],
[120,115,132,108,0,113,100,103],
[95,99,124,102,97,0,94,116],
[122,119,118,104,110,116,0,102],
[123,121,134,99,107,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,82,84,101,93,92,80],
[124,0,105,87,109,106,100,107],
[128,105,0,107,110,111,122,109],
[126,123,103,0,109,107,98,95],
[109,101,100,101,0,111,106,99],
[117,104,99,103,99,0,112,95],
[118,110,88,112,104,98,0,104],
[130,103,101,115,111,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,117,89,100,98,110],
[105,0,100,103,99,120,110,103],
[114,110,0,107,106,96,96,109],
[93,107,103,0,97,110,100,101],
[121,111,104,113,0,112,96,113],
[110,90,114,100,98,0,105,102],
[112,100,114,110,114,105,0,114],
[100,107,101,109,97,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,120,106,108,109,116],
[112,0,97,110,112,112,112,125],
[104,113,0,114,109,108,112,116],
[90,100,96,0,103,102,87,110],
[104,98,101,107,0,112,106,116],
[102,98,102,108,98,0,102,106],
[101,98,98,123,104,108,0,115],
[94,85,94,100,94,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,99,92,90,99,95],
[103,0,103,92,109,94,77,93],
[119,107,0,99,106,95,102,97],
[111,118,111,0,96,114,118,98],
[118,101,104,114,0,92,82,103],
[120,116,115,96,118,0,102,105],
[111,133,108,92,128,108,0,118],
[115,117,113,112,107,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,174,138,123,106,89,175],
[70,0,156,34,53,86,89,156],
[36,54,0,71,36,87,89,158],
[72,176,139,0,89,140,89,156],
[87,157,174,121,0,121,105,176],
[104,124,123,70,89,0,87,158],
[121,121,121,121,105,123,0,156],
[35,54,52,54,34,52,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,127,110,100,113,92,107],
[112,0,112,103,108,105,109,122],
[83,98,0,103,92,96,89,109],
[100,107,107,0,93,114,97,104],
[110,102,118,117,0,105,96,104],
[97,105,114,96,105,0,100,111],
[118,101,121,113,114,110,0,132],
[103,88,101,106,106,99,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,106,115,111,97,112],
[95,0,100,112,99,98,85,108],
[105,110,0,102,99,89,87,103],
[104,98,108,0,101,91,104,91],
[95,111,111,109,0,108,109,103],
[99,112,121,119,102,0,95,104],
[113,125,123,106,101,115,0,112],
[98,102,107,119,107,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,114,94,102,96,93,91],
[114,0,123,106,117,95,105,109],
[96,87,0,84,102,86,94,97],
[116,104,126,0,114,104,109,101],
[108,93,108,96,0,92,105,89],
[114,115,124,106,118,0,116,99],
[117,105,116,101,105,94,0,93],
[119,101,113,109,121,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,111,103,114,100,113],
[94,0,109,113,90,90,95,96],
[89,101,0,121,102,112,92,102],
[99,97,89,0,93,97,91,96],
[107,120,108,117,0,107,101,110],
[96,120,98,113,103,0,107,109],
[110,115,118,119,109,103,0,101],
[97,114,108,114,100,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,102,103,117,102,104],
[101,0,96,93,109,118,91,116],
[115,114,0,110,106,125,103,122],
[108,117,100,0,106,112,107,123],
[107,101,104,104,0,120,105,119],
[93,92,85,98,90,0,84,104],
[108,119,107,103,105,126,0,125],
[106,94,88,87,91,106,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,98,104,97,105,98],
[98,0,94,99,105,97,99,94],
[109,116,0,103,107,106,109,108],
[112,111,107,0,107,109,112,103],
[106,105,103,103,0,93,105,97],
[113,113,104,101,117,0,102,108],
[105,111,101,98,105,108,0,104],
[112,116,102,107,113,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,98,102,101,91,102],
[108,0,110,112,110,116,103,113],
[123,100,0,114,106,122,105,117],
[112,98,96,0,105,104,95,102],
[108,100,104,105,0,111,99,106],
[109,94,88,106,99,0,92,110],
[119,107,105,115,111,118,0,114],
[108,97,93,108,104,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,109,106,109,104,109],
[101,0,109,91,101,102,113,106],
[97,101,0,105,96,105,94,91],
[101,119,105,0,108,112,106,123],
[104,109,114,102,0,106,107,104],
[101,108,105,98,104,0,97,110],
[106,97,116,104,103,113,0,101],
[101,104,119,87,106,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,102,117,122,110,104],
[95,0,120,102,129,123,114,121],
[107,90,0,91,94,115,108,97],
[108,108,119,0,99,131,108,112],
[93,81,116,111,0,108,116,105],
[88,87,95,79,102,0,108,93],
[100,96,102,102,94,102,0,107],
[106,89,113,98,105,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,103,111,115,111,109],
[105,0,110,104,106,113,119,118],
[103,100,0,105,102,103,104,99],
[107,106,105,0,94,108,101,101],
[99,104,108,116,0,115,120,112],
[95,97,107,102,95,0,107,98],
[99,91,106,109,90,103,0,95],
[101,92,111,109,98,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,106,110,108,115,102],
[101,0,107,99,109,107,108,108],
[101,103,0,94,103,94,105,100],
[104,111,116,0,106,114,100,106],
[100,101,107,104,0,99,115,101],
[102,103,116,96,111,0,108,104],
[95,102,105,110,95,102,0,97],
[108,102,110,104,109,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,97,98,115,90,91],
[120,0,109,116,112,130,113,99],
[111,101,0,103,101,111,96,109],
[113,94,107,0,116,112,105,108],
[112,98,109,94,0,113,85,108],
[95,80,99,98,97,0,85,97],
[120,97,114,105,125,125,0,109],
[119,111,101,102,102,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,95,115,96,97,114,104],
[128,0,129,117,129,97,115,128],
[115,81,0,115,105,109,149,138],
[95,93,95,0,70,96,115,117],
[114,81,105,140,0,109,138,139],
[113,113,101,114,101,0,126,90],
[96,95,61,95,72,84,0,96],
[106,82,72,93,71,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,96,114,111,105,101],
[97,0,107,92,100,114,104,99],
[114,103,0,110,110,114,104,88],
[114,118,100,0,109,109,104,109],
[96,110,100,101,0,108,116,98],
[99,96,96,101,102,0,109,109],
[105,106,106,106,94,101,0,101],
[109,111,122,101,112,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,93,115,121,125,115],
[103,0,108,108,110,101,121,117],
[99,102,0,109,104,113,99,109],
[117,102,101,0,113,117,117,117],
[95,100,106,97,0,99,115,104],
[89,109,97,93,111,0,120,107],
[85,89,111,93,95,90,0,98],
[95,93,101,93,106,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,129,123,108,119,103,132],
[109,0,104,118,110,105,107,128],
[81,106,0,104,95,103,96,111],
[87,92,106,0,94,93,89,112],
[102,100,115,116,0,107,106,135],
[91,105,107,117,103,0,108,119],
[107,103,114,121,104,102,0,122],
[78,82,99,98,75,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,105,113,84,83,94,92],
[157,0,163,150,100,122,121,139],
[105,47,0,107,71,68,56,87],
[97,60,103,0,61,57,58,87],
[126,110,139,149,0,90,96,125],
[127,88,142,153,120,0,95,97],
[116,89,154,152,114,115,0,141],
[118,71,123,123,85,113,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,99,115,103,108,105],
[103,0,109,96,108,98,101,99],
[106,101,0,103,100,109,98,103],
[111,114,107,0,102,109,99,102],
[95,102,110,108,0,94,88,97],
[107,112,101,101,116,0,105,106],
[102,109,112,111,122,105,0,99],
[105,111,107,108,113,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,104,96,100,106,102],
[93,0,104,97,87,100,101,86],
[102,106,0,99,97,103,104,100],
[106,113,111,0,91,109,102,98],
[114,123,113,119,0,111,124,105],
[110,110,107,101,99,0,112,99],
[104,109,106,108,86,98,0,98],
[108,124,110,112,105,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,161,161,110,144,110,62],
[82,0,111,113,81,83,160,82],
[49,99,0,130,112,81,97,48],
[49,97,80,0,65,99,79,81],
[100,129,98,145,0,130,146,115],
[66,127,129,111,80,0,128,79],
[100,50,113,131,64,82,0,48],
[148,128,162,129,95,131,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,116,102,92,109,102],
[98,0,102,94,88,87,73,92],
[97,108,0,119,105,99,102,116],
[94,116,91,0,84,81,89,99],
[108,122,105,126,0,86,104,111],
[118,123,111,129,124,0,103,118],
[101,137,108,121,106,107,0,119],
[108,118,94,111,99,92,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,91,113,99,94,107,102],
[84,0,80,80,87,80,99,76],
[119,130,0,115,119,105,112,104],
[97,130,95,0,109,88,102,109],
[111,123,91,101,0,89,112,101],
[116,130,105,122,121,0,111,107],
[103,111,98,108,98,99,0,100],
[108,134,106,101,109,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,113,98,111,116,120],
[106,0,102,101,82,115,101,111],
[106,108,0,103,105,105,108,112],
[97,109,107,0,110,105,111,119],
[112,128,105,100,0,112,118,121],
[99,95,105,105,98,0,100,107],
[94,109,102,99,92,110,0,115],
[90,99,98,91,89,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,101,103,108,100,103],
[98,0,112,107,108,112,95,98],
[105,98,0,103,112,109,103,111],
[109,103,107,0,113,113,115,112],
[107,102,98,97,0,109,101,109],
[102,98,101,97,101,0,88,103],
[110,115,107,95,109,122,0,97],
[107,112,99,98,101,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,101,138,113,136,107,111],
[82,0,80,104,93,111,91,95],
[109,130,0,129,106,135,99,115],
[72,106,81,0,89,116,86,101],
[97,117,104,121,0,121,98,108],
[74,99,75,94,89,0,85,89],
[103,119,111,124,112,125,0,114],
[99,115,95,109,102,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,89,90,97,102,96],
[98,0,98,97,93,95,98,115],
[117,112,0,101,100,116,105,109],
[121,113,109,0,113,104,110,121],
[120,117,110,97,0,108,112,115],
[113,115,94,106,102,0,105,115],
[108,112,105,100,98,105,0,115],
[114,95,101,89,95,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,82,93,90,83,83,119],
[112,0,82,100,66,96,122,115],
[128,128,0,107,91,106,117,111],
[117,110,103,0,106,128,113,150],
[120,144,119,104,0,96,126,136],
[127,114,104,82,114,0,107,137],
[127,88,93,97,84,103,0,119],
[91,95,99,60,74,73,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,114,103,109,103,93],
[112,0,103,104,116,106,102,108],
[102,107,0,107,110,111,95,92],
[96,106,103,0,108,116,105,98],
[107,94,100,102,0,110,109,94],
[101,104,99,94,100,0,101,95],
[107,108,115,105,101,109,0,101],
[117,102,118,112,116,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,104,112,118,118,116],
[95,0,108,107,113,112,105,118],
[89,102,0,93,99,105,102,131],
[106,103,117,0,104,107,117,126],
[98,97,111,106,0,93,103,114],
[92,98,105,103,117,0,107,121],
[92,105,108,93,107,103,0,113],
[94,92,79,84,96,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,73,73,71,94,96,119],
[116,0,93,96,70,93,141,73],
[137,117,0,94,117,114,94,117],
[137,114,116,0,116,68,116,94],
[139,140,93,94,0,116,187,73],
[116,117,96,142,94,0,119,96],
[114,69,116,94,23,91,0,46],
[91,137,93,116,137,114,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,87,107,89,122,102,107],
[104,0,106,105,102,123,97,105],
[123,104,0,113,106,119,116,110],
[103,105,97,0,104,127,99,113],
[121,108,104,106,0,127,112,112],
[88,87,91,83,83,0,102,94],
[108,113,94,111,98,108,0,110],
[103,105,100,97,98,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,124,117,97,95,117,134],
[131,0,134,131,111,101,125,141],
[86,76,0,102,78,108,102,118],
[93,79,108,0,86,110,108,128],
[113,99,132,124,0,108,131,124],
[115,109,102,100,102,0,125,135],
[93,85,108,102,79,85,0,103],
[76,69,92,82,86,75,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,112,132,114,105,114,112],
[85,0,89,102,94,84,95,103],
[98,121,0,126,116,94,121,108],
[78,108,84,0,97,70,98,93],
[96,116,94,113,0,84,95,107],
[105,126,116,140,126,0,123,120],
[96,115,89,112,115,87,0,108],
[98,107,102,117,103,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,113,104,102,111,114,107],
[117,0,118,110,101,107,108,116],
[97,92,0,97,97,89,99,94],
[106,100,113,0,105,110,110,105],
[108,109,113,105,0,99,113,120],
[99,103,121,100,111,0,107,121],
[96,102,111,100,97,103,0,109],
[103,94,116,105,90,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,109,106,95,121,81],
[117,0,112,109,111,95,125,92],
[103,98,0,112,110,91,133,94],
[101,101,98,0,107,102,113,89],
[104,99,100,103,0,95,120,108],
[115,115,119,108,115,0,129,98],
[89,85,77,97,90,81,0,87],
[129,118,116,121,102,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,97,96,114,76,96,95],
[134,0,98,153,76,134,114,133],
[113,112,0,152,75,93,113,113],
[114,57,58,0,57,75,76,114],
[96,134,135,153,0,133,114,173],
[134,76,117,135,77,0,96,97],
[114,96,97,134,96,114,0,116],
[115,77,97,96,37,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,83,93,108,56,100],
[108,0,138,119,93,124,94,115],
[99,72,0,83,112,123,82,124],
[127,91,127,0,120,125,111,116],
[117,117,98,90,0,103,107,114],
[102,86,87,85,107,0,97,101],
[154,116,128,99,103,113,0,134],
[110,95,86,94,96,109,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,93,107,89,95,117],
[113,0,108,110,127,101,119,120],
[115,102,0,106,107,110,102,113],
[117,100,104,0,117,110,99,99],
[103,83,103,93,0,106,99,106],
[121,109,100,100,104,0,90,104],
[115,91,108,111,111,120,0,114],
[93,90,97,111,104,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,103,100,92,123,102],
[121,0,94,103,117,107,129,115],
[106,116,0,107,112,97,123,113],
[107,107,103,0,121,104,116,95],
[110,93,98,89,0,107,125,102],
[118,103,113,106,103,0,116,109],
[87,81,87,94,85,94,0,85],
[108,95,97,115,108,101,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,103,91,100,108,96],
[105,0,109,101,98,100,102,86],
[101,101,0,95,109,95,98,97],
[107,109,115,0,95,117,113,94],
[119,112,101,115,0,113,114,112],
[110,110,115,93,97,0,108,97],
[102,108,112,97,96,102,0,99],
[114,124,113,116,98,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,126,136,109,97,121,112],
[124,0,138,142,103,108,129,132],
[84,72,0,107,77,80,89,106],
[74,68,103,0,73,70,96,79],
[101,107,133,137,0,95,127,114],
[113,102,130,140,115,0,125,108],
[89,81,121,114,83,85,0,93],
[98,78,104,131,96,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,105,96,109,100,90],
[113,0,113,109,111,111,112,104],
[102,97,0,96,99,106,92,101],
[105,101,114,0,103,108,94,98],
[114,99,111,107,0,103,99,107],
[101,99,104,102,107,0,109,102],
[110,98,118,116,111,101,0,114],
[120,106,109,112,103,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,147,97,101,101,102,106],
[99,0,123,121,126,132,132,144],
[63,87,0,89,76,87,97,118],
[113,89,121,0,102,101,107,122],
[109,84,134,108,0,127,118,142],
[109,78,123,109,83,0,101,114],
[108,78,113,103,92,109,0,100],
[104,66,92,88,68,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,99,90,94,79,87],
[111,0,112,118,106,95,102,105],
[120,98,0,104,88,102,83,107],
[111,92,106,0,95,104,92,104],
[120,104,122,115,0,103,116,110],
[116,115,108,106,107,0,95,110],
[131,108,127,118,94,115,0,114],
[123,105,103,106,100,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,97,97,112,95,105],
[108,0,101,103,105,113,104,111],
[121,109,0,106,101,120,116,110],
[113,107,104,0,108,113,109,117],
[113,105,109,102,0,107,97,100],
[98,97,90,97,103,0,101,103],
[115,106,94,101,113,109,0,109],
[105,99,100,93,110,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,134,111,97,106,96],
[108,0,90,111,111,104,104,100],
[101,120,0,134,111,111,121,110],
[76,99,76,0,110,98,91,87],
[99,99,99,100,0,106,94,94],
[113,106,99,112,104,0,109,113],
[104,106,89,119,116,101,0,106],
[114,110,100,123,116,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,88,112,114,111,100],
[104,0,115,97,106,113,96,100],
[108,95,0,105,104,106,96,101],
[122,113,105,0,107,111,114,106],
[98,104,106,103,0,113,101,93],
[96,97,104,99,97,0,103,98],
[99,114,114,96,109,107,0,107],
[110,110,109,104,117,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,87,115,107,93,113,94],
[97,0,101,110,102,96,110,91],
[123,109,0,130,107,114,114,88],
[95,100,80,0,100,97,96,61],
[103,108,103,110,0,97,105,94],
[117,114,96,113,113,0,96,111],
[97,100,96,114,105,114,0,100],
[116,119,122,149,116,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,121,117,120,94,117],
[93,0,104,113,107,118,103,107],
[112,106,0,116,114,112,115,102],
[89,97,94,0,111,114,100,110],
[93,103,96,99,0,111,103,111],
[90,92,98,96,99,0,89,101],
[116,107,95,110,107,121,0,112],
[93,103,108,100,99,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,93,87,120,100,106],
[106,0,110,117,109,108,101,117],
[104,100,0,89,107,113,106,115],
[117,93,121,0,103,113,108,112],
[123,101,103,107,0,129,109,121],
[90,102,97,97,81,0,86,89],
[110,109,104,102,101,124,0,113],
[104,93,95,98,89,121,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,113,100,111,95,116],
[96,0,82,124,111,103,92,80],
[115,128,0,118,87,110,96,93],
[97,86,92,0,88,95,80,90],
[110,99,123,122,0,106,99,117],
[99,107,100,115,104,0,102,98],
[115,118,114,130,111,108,0,101],
[94,130,117,120,93,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,84,92,113,81,88],
[111,0,111,86,110,123,92,94],
[102,99,0,96,92,101,86,81],
[126,124,114,0,103,122,108,107],
[118,100,118,107,0,120,96,103],
[97,87,109,88,90,0,68,82],
[129,118,124,102,114,142,0,111],
[122,116,129,103,107,128,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,110,114,115,108,115],
[108,0,105,98,115,111,99,99],
[101,105,0,99,114,103,95,104],
[100,112,111,0,114,108,97,116],
[96,95,96,96,0,104,82,90],
[95,99,107,102,106,0,99,106],
[102,111,115,113,128,111,0,109],
[95,111,106,94,120,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,124,107,121,114,105,112],
[102,0,106,117,124,108,103,111],
[86,104,0,97,108,102,96,89],
[103,93,113,0,121,106,113,115],
[89,86,102,89,0,85,91,92],
[96,102,108,104,125,0,116,115],
[105,107,114,97,119,94,0,114],
[98,99,121,95,118,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,102,110,91,93,88],
[106,0,109,118,112,106,112,97],
[113,101,0,109,103,103,98,97],
[108,92,101,0,104,102,99,95],
[100,98,107,106,0,112,84,98],
[119,104,107,108,98,0,116,98],
[117,98,112,111,126,94,0,114],
[122,113,113,115,112,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,97,103,116,80,99,91],
[123,0,117,125,125,95,116,119],
[113,93,0,118,110,86,97,104],
[107,85,92,0,115,88,99,98],
[94,85,100,95,0,89,93,89],
[130,115,124,122,121,0,102,121],
[111,94,113,111,117,108,0,107],
[119,91,106,112,121,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,94,126,95,99,122],
[99,0,79,92,96,93,97,103],
[90,131,0,86,120,108,105,116],
[116,118,124,0,127,106,93,127],
[84,114,90,83,0,91,99,104],
[115,117,102,104,119,0,98,128],
[111,113,105,117,111,112,0,115],
[88,107,94,83,106,82,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,97,128,109,111,128],
[94,0,114,108,125,119,115,116],
[93,96,0,99,119,121,101,118],
[113,102,111,0,123,105,97,111],
[82,85,91,87,0,100,97,105],
[101,91,89,105,110,0,105,117],
[99,95,109,113,113,105,0,125],
[82,94,92,99,105,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,121,127,101,107,115],
[88,0,105,101,112,97,100,110],
[87,105,0,108,116,91,102,109],
[89,109,102,0,117,91,93,113],
[83,98,94,93,0,77,95,97],
[109,113,119,119,133,0,104,121],
[103,110,108,117,115,106,0,131],
[95,100,101,97,113,89,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,117,105,126,113,129],
[104,0,120,113,132,125,127,134],
[98,90,0,103,107,127,106,114],
[93,97,107,0,107,119,105,125],
[105,78,103,103,0,112,104,118],
[84,85,83,91,98,0,119,117],
[97,83,104,105,106,91,0,114],
[81,76,96,85,92,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,84,168,84,124,128,84],
[86,0,126,86,126,42,128,42],
[126,84,0,84,82,40,84,42],
[42,124,126,0,126,166,86,126],
[126,84,128,84,0,84,126,42],
[86,168,170,44,126,0,86,84],
[82,82,126,124,84,124,0,84],
[126,168,168,84,168,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,114,95,113,101,113,100],
[114,0,118,117,110,134,134,104],
[96,92,0,102,97,108,110,96],
[115,93,108,0,122,127,125,116],
[97,100,113,88,0,100,112,95],
[109,76,102,83,110,0,109,95],
[97,76,100,85,98,101,0,96],
[110,106,114,94,115,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,105,106,94,93,90],
[97,0,125,78,113,95,92,92],
[114,85,0,88,122,102,102,113],
[105,132,122,0,132,120,111,117],
[104,97,88,78,0,83,76,92],
[116,115,108,90,127,0,107,107],
[117,118,108,99,134,103,0,114],
[120,118,97,93,118,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,90,95,104,91,114],
[96,0,90,102,89,90,92,95],
[112,120,0,113,112,120,102,106],
[120,108,97,0,107,110,105,101],
[115,121,98,103,0,111,102,100],
[106,120,90,100,99,0,83,99],
[119,118,108,105,108,127,0,108],
[96,115,104,109,110,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,95,96,90,104,104],
[116,0,95,106,111,106,122,111],
[111,115,0,118,117,98,116,99],
[115,104,92,0,114,105,124,117],
[114,99,93,96,0,101,100,103],
[120,104,112,105,109,0,132,101],
[106,88,94,86,110,78,0,106],
[106,99,111,93,107,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,89,41,91,105,62,102],
[134,0,119,108,135,145,80,120],
[121,91,0,78,105,92,64,91],
[169,102,132,0,130,129,106,145],
[119,75,105,80,0,116,105,144],
[105,65,118,81,94,0,79,93],
[148,130,146,104,105,131,0,103],
[108,90,119,65,66,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,82,98,99,104,106,98],
[101,0,93,83,121,119,127,111],
[128,117,0,100,139,122,133,126],
[112,127,110,0,130,105,126,98],
[111,89,71,80,0,98,86,90],
[106,91,88,105,112,0,110,108],
[104,83,77,84,124,100,0,100],
[112,99,84,112,120,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,101,114,99,96,99,104],
[90,0,86,98,91,96,63,88],
[109,124,0,128,100,94,108,125],
[96,112,82,0,85,89,83,93],
[111,119,110,125,0,99,93,102],
[114,114,116,121,111,0,84,118],
[111,147,102,127,117,126,0,126],
[106,122,85,117,108,92,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,126,113,145,144,101,104],
[72,0,116,105,101,119,92,86],
[84,94,0,68,104,137,84,67],
[97,105,142,0,108,118,99,132],
[65,109,106,102,0,102,81,85],
[66,91,73,92,108,0,103,105],
[109,118,126,111,129,107,0,101],
[106,124,143,78,125,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,122,134,132,128,102],
[106,0,109,116,118,115,120,92],
[102,101,0,127,121,114,127,124],
[88,94,83,0,115,107,102,74],
[76,92,89,95,0,107,99,94],
[78,95,96,103,103,0,110,93],
[82,90,83,108,111,100,0,94],
[108,118,86,136,116,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,109,101,98,99,112],
[119,0,116,110,99,100,100,103],
[102,94,0,106,105,101,112,106],
[101,100,104,0,100,102,103,100],
[109,111,105,110,0,100,105,105],
[112,110,109,108,110,0,104,100],
[111,110,98,107,105,106,0,105],
[98,107,104,110,105,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,104,114,106,109,84],
[117,0,112,97,107,102,127,112],
[106,98,0,104,98,112,114,90],
[106,113,106,0,102,97,104,87],
[96,103,112,108,0,88,104,93],
[104,108,98,113,122,0,118,115],
[101,83,96,106,106,92,0,83],
[126,98,120,123,117,95,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,99,103,103,99,106],
[108,0,95,108,102,98,97,106],
[109,115,0,100,101,113,99,107],
[111,102,110,0,106,105,108,109],
[107,108,109,104,0,106,107,115],
[107,112,97,105,104,0,98,108],
[111,113,111,102,103,112,0,109],
[104,104,103,101,95,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,113,103,109,109,114],
[111,0,102,111,105,118,106,111],
[104,108,0,113,103,121,115,111],
[97,99,97,0,102,105,103,103],
[107,105,107,108,0,117,105,121],
[101,92,89,105,93,0,99,100],
[101,104,95,107,105,111,0,113],
[96,99,99,107,89,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,92,101,86,88,104],
[106,0,97,97,117,102,85,102],
[109,113,0,116,104,109,109,110],
[118,113,94,0,121,107,90,105],
[109,93,106,89,0,93,87,106],
[124,108,101,103,117,0,98,102],
[122,125,101,120,123,112,0,114],
[106,108,100,105,104,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,111,111,104,105,111],
[108,0,91,97,98,97,92,101],
[108,119,0,121,104,110,101,92],
[99,113,89,0,111,101,103,99],
[99,112,106,99,0,103,99,94],
[106,113,100,109,107,0,117,106],
[105,118,109,107,111,93,0,96],
[99,109,118,111,116,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,111,108,99,93,94,86],
[130,0,129,138,120,103,124,123],
[99,81,0,102,96,101,74,100],
[102,72,108,0,98,109,75,79],
[111,90,114,112,0,98,99,105],
[117,107,109,101,112,0,103,104],
[116,86,136,135,111,107,0,124],
[124,87,110,131,105,106,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,105,108,99,104,113],
[111,0,112,99,112,101,104,117],
[107,98,0,101,104,95,108,100],
[105,111,109,0,122,106,114,115],
[102,98,106,88,0,99,107,113],
[111,109,115,104,111,0,106,115],
[106,106,102,96,103,104,0,117],
[97,93,110,95,97,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,90,113,100,120,90],
[105,0,110,97,119,86,110,100],
[100,100,0,109,104,106,126,92],
[120,113,101,0,113,100,118,107],
[97,91,106,97,0,93,103,83],
[110,124,104,110,117,0,126,97],
[90,100,84,92,107,84,0,88],
[120,110,118,103,127,113,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,109,86,103,114,104],
[89,0,86,103,87,95,87,88],
[101,124,0,101,105,107,111,107],
[101,107,109,0,99,112,98,84],
[124,123,105,111,0,112,113,108],
[107,115,103,98,98,0,97,99],
[96,123,99,112,97,113,0,101],
[106,122,103,126,102,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,118,102,106,110,106],
[116,0,120,115,116,99,108,123],
[104,90,0,98,97,101,98,114],
[92,95,112,0,107,95,104,98],
[108,94,113,103,0,108,112,118],
[104,111,109,115,102,0,107,114],
[100,102,112,106,98,103,0,102],
[104,87,96,112,92,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,106,109,97,95,97],
[122,0,107,108,120,96,121,107],
[108,103,0,113,98,102,102,99],
[104,102,97,0,102,101,95,94],
[101,90,112,108,0,95,92,103],
[113,114,108,109,115,0,101,87],
[115,89,108,115,118,109,0,107],
[113,103,111,116,107,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,107,109,107,102,103],
[97,0,92,93,95,99,92,108],
[97,118,0,112,105,106,106,98],
[103,117,98,0,93,109,97,108],
[101,115,105,117,0,109,102,111],
[103,111,104,101,101,0,104,111],
[108,118,104,113,108,106,0,109],
[107,102,112,102,99,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,109,98,115,102,124],
[97,0,112,108,90,107,93,112],
[101,98,0,94,93,103,91,106],
[101,102,116,0,100,108,109,105],
[112,120,117,110,0,128,102,112],
[95,103,107,102,82,0,100,111],
[108,117,119,101,108,110,0,108],
[86,98,104,105,98,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,90,98,102,90,96,109],
[94,0,98,109,124,109,96,109],
[120,112,0,99,107,102,109,116],
[112,101,111,0,112,101,97,111],
[108,86,103,98,0,96,84,106],
[120,101,108,109,114,0,95,128],
[114,114,101,113,126,115,0,115],
[101,101,94,99,104,82,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,107,99,114,123,105,92],
[85,0,68,91,87,107,87,88],
[103,142,0,97,103,132,115,109],
[111,119,113,0,97,132,125,104],
[96,123,107,113,0,121,103,100],
[87,103,78,78,89,0,83,81],
[105,123,95,85,107,127,0,103],
[118,122,101,106,110,129,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,112,109,105,107,108],
[96,0,111,98,91,92,94,92],
[109,99,0,105,79,90,109,103],
[98,112,105,0,92,106,106,112],
[101,119,131,118,0,109,112,111],
[105,118,120,104,101,0,111,109],
[103,116,101,104,98,99,0,105],
[102,118,107,98,99,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,109,111,106,123,105,123],
[75,0,83,98,89,94,112,113],
[101,127,0,99,107,109,114,126],
[99,112,111,0,103,105,128,117],
[104,121,103,107,0,102,107,122],
[87,116,101,105,108,0,121,115],
[105,98,96,82,103,89,0,114],
[87,97,84,93,88,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,100,97,89,100,77],
[109,0,117,111,92,104,103,93],
[106,93,0,92,88,85,94,86],
[110,99,118,0,100,97,87,87],
[113,118,122,110,0,96,109,101],
[121,106,125,113,114,0,103,106],
[110,107,116,123,101,107,0,95],
[133,117,124,123,109,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,106,83,101,94,92],
[111,0,123,115,92,110,114,101],
[92,87,0,88,90,93,91,88],
[104,95,122,0,108,105,108,111],
[127,118,120,102,0,115,116,111],
[109,100,117,105,95,0,106,117],
[116,96,119,102,94,104,0,100],
[118,109,122,99,99,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,100,106,89,101,90],
[115,0,104,91,108,80,91,97],
[108,106,0,105,89,112,113,96],
[110,119,105,0,91,96,128,103],
[104,102,121,119,0,91,102,110],
[121,130,98,114,119,0,133,124],
[109,119,97,82,108,77,0,89],
[120,113,114,107,100,86,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,95,109,100,94,95],
[97,0,80,89,95,101,94,96],
[98,130,0,110,100,109,106,106],
[115,121,100,0,92,99,99,106],
[101,115,110,118,0,107,99,115],
[110,109,101,111,103,0,113,102],
[116,116,104,111,111,97,0,116],
[115,114,104,104,95,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,85,101,106,100,96,104],
[105,0,95,106,97,97,105,99],
[125,115,0,135,125,105,110,108],
[109,104,75,0,107,93,99,101],
[104,113,85,103,0,96,101,109],
[110,113,105,117,114,0,118,112],
[114,105,100,111,109,92,0,95],
[106,111,102,109,101,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,105,117,109,104,105],
[110,0,117,112,110,108,105,110],
[100,93,0,97,98,94,95,105],
[105,98,113,0,120,104,109,108],
[93,100,112,90,0,108,99,105],
[101,102,116,106,102,0,104,101],
[106,105,115,101,111,106,0,115],
[105,100,105,102,105,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,91,111,100,92,110],
[122,0,113,103,118,117,104,109],
[104,97,0,100,107,99,106,94],
[119,107,110,0,115,107,112,105],
[99,92,103,95,0,93,94,100],
[110,93,111,103,117,0,100,105],
[118,106,104,98,116,110,0,105],
[100,101,116,105,110,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,103,98,90,104,92],
[114,0,104,102,115,112,113,95],
[117,106,0,104,126,110,118,92],
[107,108,106,0,112,101,115,100],
[112,95,84,98,0,91,99,84],
[120,98,100,109,119,0,106,107],
[106,97,92,95,111,104,0,91],
[118,115,118,110,126,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,116,107,104,108,103],
[96,0,102,109,96,108,107,104],
[100,108,0,103,107,98,101,107],
[94,101,107,0,100,89,97,91],
[103,114,103,110,0,103,108,103],
[106,102,112,121,107,0,101,109],
[102,103,109,113,102,109,0,106],
[107,106,103,119,107,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,94,104,103,94,107],
[99,0,111,84,106,107,94,102],
[101,99,0,90,100,108,112,102],
[116,126,120,0,119,113,105,112],
[106,104,110,91,0,106,103,102],
[107,103,102,97,104,0,106,99],
[116,116,98,105,107,104,0,105],
[103,108,108,98,108,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,118,116,106,100,114],
[94,0,107,105,108,95,94,109],
[97,103,0,117,104,96,109,114],
[92,105,93,0,94,104,104,105],
[94,102,106,116,0,99,108,112],
[104,115,114,106,111,0,105,110],
[110,116,101,106,102,105,0,101],
[96,101,96,105,98,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,119,109,110,124,113],
[104,0,111,108,114,113,113,112],
[108,99,0,103,111,102,115,110],
[91,102,107,0,118,100,110,101],
[101,96,99,92,0,98,116,103],
[100,97,108,110,112,0,111,108],
[86,97,95,100,94,99,0,103],
[97,98,100,109,107,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,100,90,102,93,97],
[115,0,104,116,100,103,101,111],
[122,106,0,105,94,109,109,104],
[110,94,105,0,96,109,105,107],
[120,110,116,114,0,124,119,104],
[108,107,101,101,86,0,94,104],
[117,109,101,105,91,116,0,104],
[113,99,106,103,106,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,96,117,99,100,89],
[113,0,99,119,96,107,102,106],
[100,111,0,109,107,92,134,107],
[114,91,101,0,109,77,115,110],
[93,114,103,101,0,112,108,100],
[111,103,118,133,98,0,121,112],
[110,108,76,95,102,89,0,92],
[121,104,103,100,110,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,113,112,105,118,110],
[103,0,111,110,109,88,113,99],
[103,99,0,110,103,100,116,103],
[97,100,100,0,102,95,108,98],
[98,101,107,108,0,96,116,94],
[105,122,110,115,114,0,125,117],
[92,97,94,102,94,85,0,89],
[100,111,107,112,116,93,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,103,101,108,102,106],
[95,0,113,113,114,108,112,112],
[99,97,0,89,107,97,92,85],
[107,97,121,0,117,111,106,107],
[109,96,103,93,0,99,100,84],
[102,102,113,99,111,0,107,101],
[108,98,118,104,110,103,0,97],
[104,98,125,103,126,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,100,106,109,109,106],
[98,0,107,95,86,118,118,99],
[99,103,0,118,122,124,101,118],
[110,115,92,0,103,109,108,104],
[104,124,88,107,0,113,117,111],
[101,92,86,101,97,0,116,103],
[101,92,109,102,93,94,0,102],
[104,111,92,106,99,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,91,97,109,95,102],
[111,0,99,95,102,92,104,100],
[116,111,0,107,105,124,105,105],
[119,115,103,0,113,112,99,104],
[113,108,105,97,0,102,109,101],
[101,118,86,98,108,0,98,94],
[115,106,105,111,101,112,0,112],
[108,110,105,106,109,116,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,116,115,105,103,99],
[100,0,113,115,111,112,106,110],
[107,97,0,111,109,103,103,103],
[94,95,99,0,102,97,101,88],
[95,99,101,108,0,103,101,90],
[105,98,107,113,107,0,104,103],
[107,104,107,109,109,106,0,109],
[111,100,107,122,120,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,91,111,95,91,114],
[112,0,104,100,96,90,103,120],
[107,106,0,100,101,86,105,109],
[119,110,110,0,111,93,94,99],
[99,114,109,99,0,98,108,117],
[115,120,124,117,112,0,101,123],
[119,107,105,116,102,109,0,115],
[96,90,101,111,93,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,0,105,105,0,105],
[105,0,105,105,105,105,0,105],
[105,105,0,105,105,105,0,105],
[210,105,105,0,105,105,105,105],
[105,105,105,105,0,105,105,210],
[105,105,105,105,105,0,0,210],
[210,210,210,105,105,210,0,210],
[105,105,105,105,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,123,121,76,104,136],
[105,0,122,108,120,107,106,108],
[120,88,0,123,74,45,57,89],
[87,102,87,0,72,59,86,88],
[89,90,136,138,0,122,137,106],
[134,103,165,151,88,0,103,89],
[106,104,153,124,73,107,0,120],
[74,102,121,122,104,121,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,127,104,88,106,91,97],
[95,0,106,123,98,92,96,101],
[83,104,0,107,101,92,85,101],
[106,87,103,0,104,101,92,107],
[122,112,109,106,0,88,85,85],
[104,118,118,109,122,0,93,103],
[119,114,125,118,125,117,0,102],
[113,109,109,103,125,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,113,95,100,99,108],
[110,0,103,109,106,109,102,124],
[108,107,0,115,110,124,101,118],
[97,101,95,0,80,93,72,95],
[115,104,100,130,0,115,116,114],
[110,101,86,117,95,0,99,100],
[111,108,109,138,94,111,0,115],
[102,86,92,115,96,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,93,90,98,111,93],
[119,0,109,117,102,119,121,107],
[111,101,0,103,95,109,99,102],
[117,93,107,0,98,96,103,104],
[120,108,115,112,0,101,112,111],
[112,91,101,114,109,0,109,101],
[99,89,111,107,98,101,0,94],
[117,103,108,106,99,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,119,105,130,93,123,118],
[132,0,108,124,116,121,100,136],
[91,102,0,131,130,110,90,115],
[105,86,79,0,97,85,81,142],
[80,94,80,113,0,70,87,103],
[117,89,100,125,140,0,109,131],
[87,110,120,129,123,101,0,134],
[92,74,95,68,107,79,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,111,119,105,115,113],
[100,0,106,115,120,110,108,115],
[102,104,0,109,112,109,110,103],
[99,95,101,0,110,93,99,100],
[91,90,98,100,0,94,97,102],
[105,100,101,117,116,0,116,110],
[95,102,100,111,113,94,0,109],
[97,95,107,110,108,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,132,132,79,132,132],
[130,0,105,104,105,104,78,78],
[130,105,0,157,131,105,157,105],
[78,106,53,0,80,79,105,78],
[78,105,79,130,0,105,183,104],
[131,106,105,131,105,0,131,105],
[78,132,53,105,27,79,0,105],
[78,132,105,132,106,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,114,112,86,90,117],
[102,0,107,126,115,107,100,102],
[96,103,0,98,107,86,91,99],
[96,84,112,0,93,89,82,98],
[98,95,103,117,0,82,111,96],
[124,103,124,121,128,0,98,118],
[120,110,119,128,99,112,0,104],
[93,108,111,112,114,92,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,90,94,112,96,106],
[103,0,111,108,96,107,114,105],
[119,99,0,98,108,98,96,105],
[120,102,112,0,97,112,89,108],
[116,114,102,113,0,119,99,121],
[98,103,112,98,91,0,101,118],
[114,96,114,121,111,109,0,107],
[104,105,105,102,89,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,99,113,101,92,106],
[118,0,101,104,112,100,102,110],
[112,109,0,108,113,105,110,115],
[111,106,102,0,105,106,88,103],
[97,98,97,105,0,94,98,103],
[109,110,105,104,116,0,103,109],
[118,108,100,122,112,107,0,117],
[104,100,95,107,107,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,106,90,89,110,97],
[102,0,97,104,97,102,112,94],
[108,113,0,100,90,103,123,107],
[104,106,110,0,83,98,119,97],
[120,113,120,127,0,107,133,91],
[121,108,107,112,103,0,117,111],
[100,98,87,91,77,93,0,77],
[113,116,103,113,119,99,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,112,124,105,122,105,111],
[83,0,84,106,104,95,87,98],
[98,126,0,137,124,106,109,122],
[86,104,73,0,90,98,79,84],
[105,106,86,120,0,117,84,102],
[88,115,104,112,93,0,103,91],
[105,123,101,131,126,107,0,117],
[99,112,88,126,108,119,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,104,112,107,107,112,108],
[87,0,104,89,99,98,93,94],
[106,106,0,101,102,97,105,99],
[98,121,109,0,90,92,106,97],
[103,111,108,120,0,94,109,99],
[103,112,113,118,116,0,108,109],
[98,117,105,104,101,102,0,94],
[102,116,111,113,111,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,129,114,103,100,94],
[100,0,108,128,96,115,92,100],
[91,102,0,122,98,108,107,107],
[81,82,88,0,101,106,77,87],
[96,114,112,109,0,108,104,79],
[107,95,102,104,102,0,91,87],
[110,118,103,133,106,119,0,104],
[116,110,103,123,131,123,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,107,109,111,114,87],
[109,0,110,121,113,110,123,99],
[102,100,0,109,107,101,118,107],
[103,89,101,0,86,97,112,87],
[101,97,103,124,0,104,119,103],
[99,100,109,113,106,0,112,95],
[96,87,92,98,91,98,0,90],
[123,111,103,123,107,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,96,99,109,102,108],
[100,0,93,91,96,105,103,102],
[106,117,0,106,105,119,115,113],
[114,119,104,0,109,121,116,120],
[111,114,105,101,0,116,115,120],
[101,105,91,89,94,0,110,104],
[108,107,95,94,95,100,0,112],
[102,108,97,90,90,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,108,107,96,98,91],
[99,0,103,111,92,95,104,89],
[102,107,0,129,99,107,120,106],
[102,99,81,0,95,92,85,93],
[103,118,111,115,0,106,101,106],
[114,115,103,118,104,0,113,104],
[112,106,90,125,109,97,0,101],
[119,121,104,117,104,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,103,82,116,128,95],
[98,0,90,121,93,102,128,106],
[104,120,0,102,81,93,132,82],
[107,89,108,0,87,107,125,114],
[128,117,129,123,0,127,126,93],
[94,108,117,103,83,0,107,102],
[82,82,78,85,84,103,0,94],
[115,104,128,96,117,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,117,106,105,104,105],
[110,0,108,117,113,110,115,105],
[104,102,0,121,112,106,108,105],
[93,93,89,0,99,92,94,103],
[104,97,98,111,0,96,97,94],
[105,100,104,118,114,0,108,106],
[106,95,102,116,113,102,0,108],
[105,105,105,107,116,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,86,107,97,107,96,98],
[108,0,100,103,103,114,104,105],
[124,110,0,107,116,112,100,118],
[103,107,103,0,100,113,105,113],
[113,107,94,110,0,108,114,107],
[103,96,98,97,102,0,101,102],
[114,106,110,105,96,109,0,110],
[112,105,92,97,103,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,97,104,105,105,104],
[103,0,102,109,107,103,102,113],
[107,108,0,100,118,107,107,114],
[113,101,110,0,110,112,115,115],
[106,103,92,100,0,107,106,105],
[105,107,103,98,103,0,105,107],
[105,108,103,95,104,105,0,104],
[106,97,96,95,105,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,111,111,107,112,99],
[92,0,102,114,98,95,101,91],
[100,108,0,108,107,96,114,103],
[99,96,102,0,95,104,91,81],
[99,112,103,115,0,104,101,97],
[103,115,114,106,106,0,116,107],
[98,109,96,119,109,94,0,91],
[111,119,107,129,113,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,89,86,94,88,85,78],
[98,0,91,110,105,96,106,84],
[121,119,0,100,112,107,111,100],
[124,100,110,0,96,104,123,108],
[116,105,98,114,0,103,116,98],
[122,114,103,106,107,0,104,95],
[125,104,99,87,94,106,0,98],
[132,126,110,102,112,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,131,112,68,77,89,109],
[119,0,144,116,120,132,91,123],
[79,66,0,102,96,108,82,95],
[98,94,108,0,95,111,68,109],
[142,90,114,115,0,145,101,79],
[133,78,102,99,65,0,114,78],
[121,119,128,142,109,96,0,108],
[101,87,115,101,131,132,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,111,118,104,111,109],
[100,0,104,107,107,91,119,106],
[107,106,0,112,124,103,118,101],
[99,103,98,0,102,97,116,93],
[92,103,86,108,0,109,114,106],
[106,119,107,113,101,0,116,109],
[99,91,92,94,96,94,0,90],
[101,104,109,117,104,101,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,84,113,105,112,92,107],
[119,0,118,110,103,101,115,106],
[126,92,0,105,111,106,114,111],
[97,100,105,0,105,104,107,111],
[105,107,99,105,0,109,100,109],
[98,109,104,106,101,0,95,107],
[118,95,96,103,110,115,0,107],
[103,104,99,99,101,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,109,102,120,103,94],
[99,0,105,107,103,104,103,103],
[97,105,0,101,117,103,97,113],
[101,103,109,0,91,101,95,107],
[108,107,93,119,0,123,100,107],
[90,106,107,109,87,0,100,102],
[107,107,113,115,110,110,0,102],
[116,107,97,103,103,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,106,117,107,102,98],
[115,0,111,111,119,129,113,105],
[113,99,0,110,105,119,105,107],
[104,99,100,0,109,118,100,96],
[93,91,105,101,0,96,94,93],
[103,81,91,92,114,0,101,79],
[108,97,105,110,116,109,0,94],
[112,105,103,114,117,131,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,101,87,117,115,103],
[98,0,112,97,101,120,117,110],
[96,98,0,107,99,115,112,100],
[109,113,103,0,102,125,109,107],
[123,109,111,108,0,107,129,104],
[93,90,95,85,103,0,107,90],
[95,93,98,101,81,103,0,96],
[107,100,110,103,106,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,107,103,133,113,105],
[106,0,96,100,94,126,113,102],
[106,114,0,121,96,127,118,106],
[103,110,89,0,105,133,116,102],
[107,116,114,105,0,136,128,110],
[77,84,83,77,74,0,94,81],
[97,97,92,94,82,116,0,98],
[105,108,104,108,100,129,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,123,90,113,79,83],
[113,0,124,118,93,124,76,57],
[105,86,0,104,96,114,81,70],
[87,92,106,0,116,101,98,65],
[120,117,114,94,0,125,87,88],
[97,86,96,109,85,0,65,56],
[131,134,129,112,123,145,0,105],
[127,153,140,145,122,154,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,111,129,108,114,107],
[99,0,99,112,120,89,115,98],
[105,111,0,103,114,102,118,100],
[99,98,107,0,105,102,112,98],
[81,90,96,105,0,90,111,99],
[102,121,108,108,120,0,108,103],
[96,95,92,98,99,102,0,89],
[103,112,110,112,111,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,126,139,104,111,106],
[117,0,151,108,142,117,130,104],
[89,59,0,102,94,78,97,93],
[84,102,108,0,112,92,99,111],
[71,68,116,98,0,105,110,69],
[106,93,132,118,105,0,105,139],
[99,80,113,111,100,105,0,96],
[104,106,117,99,141,71,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,99,88,94,109,99],
[116,0,99,97,108,97,105,108],
[100,111,0,102,107,99,101,116],
[111,113,108,0,100,116,105,118],
[122,102,103,110,0,113,108,106],
[116,113,111,94,97,0,95,107],
[101,105,109,105,102,115,0,108],
[111,102,94,92,104,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,124,107,99,110,100,131],
[123,0,112,111,103,110,112,127],
[86,98,0,103,105,87,95,115],
[103,99,107,0,104,99,111,118],
[111,107,105,106,0,89,102,106],
[100,100,123,111,121,0,123,118],
[110,98,115,99,108,87,0,117],
[79,83,95,92,104,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,110,124,104,119,103],
[98,0,104,103,108,92,99,89],
[100,106,0,110,109,108,106,98],
[100,107,100,0,121,107,108,107],
[86,102,101,89,0,90,95,94],
[106,118,102,103,120,0,113,104],
[91,111,104,102,115,97,0,102],
[107,121,112,103,116,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,102,112,120,113,100],
[92,0,112,102,100,102,104,88],
[93,98,0,93,113,118,120,110],
[108,108,117,0,114,116,121,100],
[98,110,97,96,0,119,116,93],
[90,108,92,94,91,0,99,85],
[97,106,90,89,94,111,0,101],
[110,122,100,110,117,125,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,115,91,119,115,120,98],
[130,0,110,114,104,121,130,116],
[95,100,0,92,113,115,85,113],
[119,96,118,0,113,116,120,114],
[91,106,97,97,0,119,131,85],
[95,89,95,94,91,0,120,88],
[90,80,125,90,79,90,0,103],
[112,94,97,96,125,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,93,118,132,92,116],
[96,0,98,95,87,102,81,104],
[86,112,0,83,85,103,111,97],
[117,115,127,0,113,137,106,96],
[92,123,125,97,0,107,104,106],
[78,108,107,73,103,0,87,100],
[118,129,99,104,106,123,0,119],
[94,106,113,114,104,110,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,128,117,106,107,105],
[99,0,104,108,105,86,103,92],
[92,106,0,116,102,86,92,88],
[82,102,94,0,102,82,94,92],
[93,105,108,108,0,82,94,97],
[104,124,124,128,128,0,102,108],
[103,107,118,116,116,108,0,112],
[105,118,122,118,113,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,104,84,115,86,105,105],
[122,0,114,107,113,104,111,113],
[106,96,0,97,116,113,102,96],
[126,103,113,0,113,99,108,115],
[95,97,94,97,0,97,87,95],
[124,106,97,111,113,0,110,105],
[105,99,108,102,123,100,0,103],
[105,97,114,95,115,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,111,113,113,113,119],
[109,0,120,102,105,103,93,113],
[92,90,0,87,88,94,86,98],
[99,108,123,0,113,111,103,100],
[97,105,122,97,0,109,104,112],
[97,107,116,99,101,0,94,103],
[97,117,124,107,106,116,0,113],
[91,97,112,110,98,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,112,119,111,120,110,112],
[120,0,111,118,123,120,97,106],
[98,99,0,96,94,108,105,74],
[91,92,114,0,95,104,111,102],
[99,87,116,115,0,122,122,96],
[90,90,102,106,88,0,112,83],
[100,113,105,99,88,98,0,93],
[98,104,136,108,114,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,53,122,86,139,122,106],
[120,0,85,101,120,120,120,89],
[157,125,0,87,157,121,141,142],
[88,109,123,0,124,87,158,144],
[124,90,53,86,0,121,86,107],
[71,90,89,123,89,0,71,125],
[88,90,69,52,124,139,0,143],
[104,121,68,66,103,85,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,109,115,108,107,105],
[97,0,94,99,100,100,102,103],
[100,116,0,112,113,109,113,112],
[101,111,98,0,107,103,102,110],
[95,110,97,103,0,101,101,106],
[102,110,101,107,109,0,102,105],
[103,108,97,108,109,108,0,108],
[105,107,98,100,104,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,80,90,88,87,86,105],
[101,0,96,104,95,105,118,116],
[130,114,0,110,105,126,119,109],
[120,106,100,0,103,118,117,120],
[122,115,105,107,0,118,117,123],
[123,105,84,92,92,0,107,106],
[124,92,91,93,93,103,0,110],
[105,94,101,90,87,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,108,93,96,93,85],
[110,0,103,108,112,111,100,96],
[108,107,0,108,108,117,106,96],
[102,102,102,0,90,108,80,95],
[117,98,102,120,0,100,85,106],
[114,99,93,102,110,0,99,120],
[117,110,104,130,125,111,0,100],
[125,114,114,115,104,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,109,105,96,103,116],
[114,0,105,115,115,118,122,106],
[113,105,0,110,107,106,110,122],
[101,95,100,0,94,108,111,116],
[105,95,103,116,0,102,111,109],
[114,92,104,102,108,0,113,108],
[107,88,100,99,99,97,0,112],
[94,104,88,94,101,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,119,97,121,119,129],
[106,0,112,111,105,124,111,115],
[109,98,0,105,103,122,102,110],
[91,99,105,0,91,106,108,106],
[113,105,107,119,0,125,118,118],
[89,86,88,104,85,0,105,110],
[91,99,108,102,92,105,0,107],
[81,95,100,104,92,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,119,132,128,125,105,120],
[91,0,95,86,101,87,101,97],
[91,115,0,119,113,112,95,104],
[78,124,91,0,106,93,110,98],
[82,109,97,104,0,98,102,99],
[85,123,98,117,112,0,103,104],
[105,109,115,100,108,107,0,107],
[90,113,106,112,111,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,78,86,95,97,95,100],
[105,0,105,99,108,99,106,94],
[132,105,0,112,119,103,113,118],
[124,111,98,0,114,106,100,100],
[115,102,91,96,0,102,95,95],
[113,111,107,104,108,0,111,97],
[115,104,97,110,115,99,0,103],
[110,116,92,110,115,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,96,115,117,111,114],
[97,0,104,113,92,104,89,119],
[102,106,0,96,95,109,106,117],
[114,97,114,0,105,114,106,116],
[95,118,115,105,0,112,108,118],
[93,106,101,96,98,0,103,99],
[99,121,104,104,102,107,0,113],
[96,91,93,94,92,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,89,122,108,70,107,127],
[88,0,96,110,135,76,132,97],
[121,114,0,120,150,92,121,113],
[88,100,90,0,92,77,126,82],
[102,75,60,118,0,67,102,85],
[140,134,118,133,143,0,107,100],
[103,78,89,84,108,103,0,97],
[83,113,97,128,125,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,101,87,100,78,109],
[99,0,95,107,98,95,92,109],
[116,115,0,118,111,115,96,127],
[109,103,92,0,102,102,114,118],
[123,112,99,108,0,111,100,126],
[110,115,95,108,99,0,100,115],
[132,118,114,96,110,110,0,131],
[101,101,83,92,84,95,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,114,106,113,103,116],
[98,0,102,119,107,113,100,98],
[91,108,0,100,97,119,118,120],
[96,91,110,0,72,106,101,87],
[104,103,113,138,0,121,114,116],
[97,97,91,104,89,0,109,100],
[107,110,92,109,96,101,0,98],
[94,112,90,123,94,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,59,92,106,104,73,74],
[122,0,58,76,109,90,90,89],
[151,152,0,104,153,150,136,119],
[118,134,106,0,136,134,120,105],
[104,101,57,74,0,74,73,44],
[106,120,60,76,136,0,121,73],
[137,120,74,90,137,89,0,117],
[136,121,91,105,166,137,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,83,106,86,94,109,91],
[94,0,89,108,100,81,99,87],
[127,121,0,120,105,110,124,119],
[104,102,90,0,88,95,99,97],
[124,110,105,122,0,99,98,118],
[116,129,100,115,111,0,108,106],
[101,111,86,111,112,102,0,112],
[119,123,91,113,92,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,108,109,109,104,113],
[99,0,98,106,106,95,105,106],
[96,112,0,116,118,106,98,114],
[102,104,94,0,105,97,88,102],
[101,104,92,105,0,115,99,106],
[101,115,104,113,95,0,99,114],
[106,105,112,122,111,111,0,115],
[97,104,96,108,104,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,115,111,109,110,106],
[107,0,117,117,105,113,109,115],
[98,93,0,109,103,116,96,107],
[95,93,101,0,94,91,99,102],
[99,105,107,116,0,112,95,121],
[101,97,94,119,98,0,99,98],
[100,101,114,111,115,111,0,111],
[104,95,103,108,89,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,96,102,106,118,104],
[102,0,99,94,95,98,108,97],
[119,111,0,111,103,112,114,125],
[114,116,99,0,108,107,116,113],
[108,115,107,102,0,99,113,114],
[104,112,98,103,111,0,109,111],
[92,102,96,94,97,101,0,102],
[106,113,85,97,96,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,86,120,102,92,96],
[122,0,121,118,117,113,110,101],
[116,89,0,107,136,114,89,111],
[124,92,103,0,124,113,99,110],
[90,93,74,86,0,92,77,72],
[108,97,96,97,118,0,94,87],
[118,100,121,111,133,116,0,110],
[114,109,99,100,138,123,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,103,91,103,103,102],
[119,0,112,103,98,106,113,111],
[109,98,0,104,111,118,102,112],
[107,107,106,0,97,111,101,105],
[119,112,99,113,0,109,119,120],
[107,104,92,99,101,0,104,118],
[107,97,108,109,91,106,0,100],
[108,99,98,105,90,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,210,210,210,105,210,105],
[105,0,210,105,105,105,105,105],
[0,0,0,0,0,105,105,0],
[0,105,210,0,105,105,210,105],
[0,105,210,105,0,105,210,105],
[105,105,105,105,105,0,105,0],
[0,105,105,0,0,105,0,0],
[105,105,210,105,105,210,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,117,86,135,125,117],
[117,0,93,103,101,103,94,94],
[94,117,0,126,102,127,103,125],
[93,107,84,0,99,107,115,98],
[124,109,108,111,0,125,101,85],
[75,107,83,103,85,0,102,76],
[85,116,107,95,109,108,0,91],
[93,116,85,112,125,134,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,90,105,100,100,108],
[109,0,110,117,115,102,95,91],
[100,100,0,93,92,105,103,107],
[120,93,117,0,110,102,88,97],
[105,95,118,100,0,106,95,89],
[110,108,105,108,104,0,113,96],
[110,115,107,122,115,97,0,101],
[102,119,103,113,121,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,91,81,67,67,72,97],
[135,0,121,105,114,112,105,128],
[119,89,0,107,94,102,100,87],
[129,105,103,0,96,117,103,120],
[143,96,116,114,0,104,123,128],
[143,98,108,93,106,0,91,88],
[138,105,110,107,87,119,0,121],
[113,82,123,90,82,122,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,101,103,108,106,104],
[107,0,122,104,94,98,114,101],
[93,88,0,109,92,100,106,98],
[109,106,101,0,109,109,115,111],
[107,116,118,101,0,105,119,97],
[102,112,110,101,105,0,109,108],
[104,96,104,95,91,101,0,96],
[106,109,112,99,113,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,113,114,128,123,104,115],
[75,0,91,94,103,100,89,108],
[97,119,0,112,116,108,101,121],
[96,116,98,0,124,103,108,114],
[82,107,94,86,0,108,96,99],
[87,110,102,107,102,0,94,113],
[106,121,109,102,114,116,0,102],
[95,102,89,96,111,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,103,100,98,106,105],
[122,0,108,111,111,103,115,109],
[107,102,0,99,123,99,117,111],
[107,99,111,0,116,110,118,120],
[110,99,87,94,0,102,100,108],
[112,107,111,100,108,0,107,115],
[104,95,93,92,110,103,0,98],
[105,101,99,90,102,95,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,115,124,105,103,108],
[95,0,95,91,110,84,98,78],
[102,115,0,93,120,100,106,87],
[95,119,117,0,124,95,97,93],
[86,100,90,86,0,78,83,64],
[105,126,110,115,132,0,101,97],
[107,112,104,113,127,109,0,109],
[102,132,123,117,146,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,100,100,129,101,104,117],
[83,0,115,78,117,110,120,108],
[110,95,0,101,113,106,102,112],
[110,132,109,0,118,134,100,116],
[81,93,97,92,0,91,76,114],
[109,100,104,76,119,0,82,106],
[106,90,108,110,134,128,0,123],
[93,102,98,94,96,104,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,103,95,106,116,107],
[117,0,117,131,103,114,122,107],
[102,93,0,110,102,112,109,115],
[107,79,100,0,91,105,105,100],
[115,107,108,119,0,125,123,101],
[104,96,98,105,85,0,106,97],
[94,88,101,105,87,104,0,100],
[103,103,95,110,109,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,101,101,91,107,99],
[109,0,90,116,104,100,126,97],
[115,120,0,113,102,114,123,112],
[109,94,97,0,97,90,101,95],
[109,106,108,113,0,103,119,102],
[119,110,96,120,107,0,121,108],
[103,84,87,109,91,89,0,98],
[111,113,98,115,108,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,104,109,103,90,108],
[115,0,106,114,98,105,98,121],
[104,104,0,106,101,82,101,119],
[106,96,104,0,111,119,108,124],
[101,112,109,99,0,101,85,117],
[107,105,128,91,109,0,100,103],
[120,112,109,102,125,110,0,109],
[102,89,91,86,93,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,110,97,118,121,117],
[84,0,83,91,88,80,89,97],
[98,127,0,100,97,108,99,97],
[100,119,110,0,107,90,108,118],
[113,122,113,103,0,110,84,110],
[92,130,102,120,100,0,110,108],
[89,121,111,102,126,100,0,135],
[93,113,113,92,100,102,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,81,109,98,118,133],
[114,0,98,96,114,105,98,124],
[117,112,0,121,109,101,109,112],
[129,114,89,0,117,112,114,133],
[101,96,101,93,0,103,95,113],
[112,105,109,98,107,0,106,115],
[92,112,101,96,115,104,0,126],
[77,86,98,77,97,95,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,110,121,109,99,90],
[102,0,112,102,112,97,99,80],
[96,98,0,95,96,89,83,91],
[100,108,115,0,116,111,104,83],
[89,98,114,94,0,117,110,86],
[101,113,121,99,93,0,102,85],
[111,111,127,106,100,108,0,106],
[120,130,119,127,124,125,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,97,101,96,104,99],
[108,0,103,86,94,99,97,87],
[94,107,0,88,99,105,104,104],
[113,124,122,0,121,107,130,105],
[109,116,111,89,0,111,105,98],
[114,111,105,103,99,0,102,97],
[106,113,106,80,105,108,0,107],
[111,123,106,105,112,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,106,104,114,108,113],
[106,0,99,107,109,117,100,110],
[98,111,0,105,116,120,113,117],
[104,103,105,0,107,111,101,115],
[106,101,94,103,0,117,103,106],
[96,93,90,99,93,0,95,110],
[102,110,97,109,107,115,0,111],
[97,100,93,95,104,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,127,93,117,107,110],
[111,0,105,107,100,119,109,113],
[111,105,0,113,107,110,101,126],
[83,103,97,0,92,108,102,107],
[117,110,103,118,0,106,119,125],
[93,91,100,102,104,0,105,113],
[103,101,109,108,91,105,0,105],
[100,97,84,103,85,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,100,107,85,102,98],
[114,0,103,89,123,91,100,110],
[117,107,0,91,120,91,109,121],
[110,121,119,0,112,103,112,129],
[103,87,90,98,0,91,91,107],
[125,119,119,107,119,0,107,102],
[108,110,101,98,119,103,0,107],
[112,100,89,81,103,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,109,115,113,119,108],
[107,0,102,109,113,102,136,112],
[106,108,0,111,105,99,118,104],
[101,101,99,0,105,96,111,100],
[95,97,105,105,0,86,102,95],
[97,108,111,114,124,0,129,114],
[91,74,92,99,108,81,0,83],
[102,98,106,110,115,96,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,96,105,91,96,105],
[111,0,118,113,109,102,96,108],
[95,92,0,87,97,84,95,98],
[114,97,123,0,112,105,100,105],
[105,101,113,98,0,90,91,105],
[119,108,126,105,120,0,113,115],
[114,114,115,110,119,97,0,111],
[105,102,112,105,105,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,110,104,94,108,98],
[111,0,94,99,100,94,112,103],
[105,116,0,109,98,107,114,109],
[100,111,101,0,106,103,110,104],
[106,110,112,104,0,104,108,112],
[116,116,103,107,106,0,110,109],
[102,98,96,100,102,100,0,109],
[112,107,101,106,98,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,104,103,115,109,109],
[106,0,106,108,98,111,107,114],
[109,104,0,113,107,108,112,110],
[106,102,97,0,104,111,116,103],
[107,112,103,106,0,111,108,110],
[95,99,102,99,99,0,104,104],
[101,103,98,94,102,106,0,103],
[101,96,100,107,100,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,109,98,106,95,107],
[99,0,89,102,102,91,79,101],
[106,121,0,106,110,104,108,114],
[101,108,104,0,98,112,100,108],
[112,108,100,112,0,99,100,121],
[104,119,106,98,111,0,102,118],
[115,131,102,110,110,108,0,117],
[103,109,96,102,89,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,107,110,114,104,89],
[106,0,103,101,102,104,101,89],
[109,107,0,108,110,103,101,88],
[103,109,102,0,105,99,99,95],
[100,108,100,105,0,109,97,105],
[96,106,107,111,101,0,97,93],
[106,109,109,111,113,113,0,101],
[121,121,122,115,105,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,115,108,86,108,98],
[108,0,95,100,102,94,112,107],
[110,115,0,105,107,106,118,100],
[95,110,105,0,105,97,123,94],
[102,108,103,105,0,96,127,109],
[124,116,104,113,114,0,124,101],
[102,98,92,87,83,86,0,84],
[112,103,110,116,101,109,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,110,110,118,108,100,136],
[85,0,89,82,99,80,85,102],
[100,121,0,108,104,90,109,105],
[100,128,102,0,107,102,110,107],
[92,111,106,103,0,86,111,106],
[102,130,120,108,124,0,118,117],
[110,125,101,100,99,92,0,108],
[74,108,105,103,104,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,84,125,167,167,84,167],
[43,0,84,84,42,85,84,85],
[126,126,0,169,83,169,169,126],
[85,126,41,0,42,85,126,42],
[43,168,127,168,0,128,127,210],
[43,125,41,125,82,0,84,82],
[126,126,41,84,83,126,0,83],
[43,125,84,168,0,128,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,115,119,110,112,96],
[107,0,106,91,99,105,86,81],
[99,104,0,81,104,83,84,78],
[95,119,129,0,120,111,120,85],
[91,111,106,90,0,101,102,90],
[100,105,127,99,109,0,100,96],
[98,124,126,90,108,110,0,107],
[114,129,132,125,120,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,83,117,104,108,112,100],
[111,0,83,98,104,120,123,100],
[127,127,0,112,139,113,139,103],
[93,112,98,0,121,99,127,121],
[106,106,71,89,0,78,117,99],
[102,90,97,111,132,0,128,105],
[98,87,71,83,93,82,0,105],
[110,110,107,89,111,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,118,130,120,114,97],
[104,0,128,112,112,127,101,110],
[99,82,0,108,119,121,94,108],
[92,98,102,0,101,109,88,103],
[80,98,91,109,0,122,101,93],
[90,83,89,101,88,0,100,91],
[96,109,116,122,109,110,0,97],
[113,100,102,107,117,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,96,105,90,107,113],
[107,0,99,102,115,92,108,123],
[113,111,0,97,110,93,112,113],
[114,108,113,0,95,107,111,115],
[105,95,100,115,0,76,106,112],
[120,118,117,103,134,0,106,117],
[103,102,98,99,104,104,0,126],
[97,87,97,95,98,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,109,105,120,119,112],
[111,0,99,106,108,130,124,111],
[100,111,0,117,115,128,107,119],
[101,104,93,0,102,112,109,109],
[105,102,95,108,0,117,109,114],
[90,80,82,98,93,0,100,90],
[91,86,103,101,101,110,0,99],
[98,99,91,101,96,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,105,103,156,105,102],
[52,0,52,77,52,77,80,77],
[54,158,0,133,131,107,82,79],
[105,133,77,0,80,105,54,105],
[107,158,79,130,0,79,79,79],
[54,133,103,105,131,0,107,80],
[105,130,128,156,131,103,0,157],
[108,133,131,105,131,130,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,105,90,112,104,107,99],
[117,0,101,96,115,109,98,85],
[105,109,0,108,99,103,98,96],
[120,114,102,0,114,108,113,106],
[98,95,111,96,0,89,107,103],
[106,101,107,102,121,0,122,115],
[103,112,112,97,103,88,0,106],
[111,125,114,104,107,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,99,109,95,109,93],
[105,0,98,103,92,88,108,84],
[105,112,0,104,100,97,107,96],
[111,107,106,0,113,108,120,101],
[101,118,110,97,0,94,110,99],
[115,122,113,102,116,0,129,115],
[101,102,103,90,100,81,0,101],
[117,126,114,109,111,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,123,93,113,106,105],
[107,0,92,137,117,107,129,106],
[117,118,0,138,101,124,112,105],
[87,73,72,0,54,66,73,63],
[117,93,109,156,0,111,120,132],
[97,103,86,144,99,0,89,94],
[104,81,98,137,90,121,0,103],
[105,104,105,147,78,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,119,95,91,103,83],
[100,0,103,115,94,93,124,104],
[102,107,0,116,109,94,118,103],
[91,95,94,0,85,85,112,89],
[115,116,101,125,0,97,124,110],
[119,117,116,125,113,0,134,99],
[107,86,92,98,86,76,0,83],
[127,106,107,121,100,111,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,66,101,110,77,89,88],
[113,0,81,107,115,107,111,92],
[144,129,0,100,124,126,104,139],
[109,103,110,0,98,105,98,128],
[100,95,86,112,0,102,108,114],
[133,103,84,105,108,0,119,112],
[121,99,106,112,102,91,0,121],
[122,118,71,82,96,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,108,99,95,98,101],
[104,0,104,116,130,116,110,94],
[96,106,0,115,109,125,87,98],
[102,94,95,0,106,104,94,93],
[111,80,101,104,0,96,103,83],
[115,94,85,106,114,0,100,89],
[112,100,123,116,107,110,0,116],
[109,116,112,117,127,121,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,124,111,121,121,111],
[109,0,110,103,121,121,115,119],
[103,100,0,101,104,109,112,109],
[86,107,109,0,117,116,119,100],
[99,89,106,93,0,102,115,104],
[89,89,101,94,108,0,106,112],
[89,95,98,91,95,104,0,91],
[99,91,101,110,106,98,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,113,116,115,120,103,126],
[73,0,90,93,112,91,97,98],
[97,120,0,109,115,115,98,111],
[94,117,101,0,105,112,106,105],
[95,98,95,105,0,100,111,110],
[90,119,95,98,110,0,105,98],
[107,113,112,104,99,105,0,120],
[84,112,99,105,100,112,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,101,96,98,104,107],
[103,0,114,108,99,100,112,111],
[111,96,0,107,96,109,107,111],
[109,102,103,0,105,102,112,115],
[114,111,114,105,0,104,119,113],
[112,110,101,108,106,0,115,119],
[106,98,103,98,91,95,0,118],
[103,99,99,95,97,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,85,86,82,84,86,58],
[131,0,108,117,114,121,104,108],
[125,102,0,119,99,119,95,86],
[124,93,91,0,103,94,96,82],
[128,96,111,107,0,136,108,89],
[126,89,91,116,74,0,98,76],
[124,106,115,114,102,112,0,87],
[152,102,124,128,121,134,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,93,120,110,114,101],
[112,0,115,105,112,113,117,105],
[103,95,0,93,96,97,113,98],
[117,105,117,0,97,103,124,87],
[90,98,114,113,0,101,103,107],
[100,97,113,107,109,0,127,109],
[96,93,97,86,107,83,0,84],
[109,105,112,123,103,101,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,104,109,117,106,110],
[91,0,108,103,105,120,108,107],
[99,102,0,112,104,112,114,108],
[106,107,98,0,101,104,115,106],
[101,105,106,109,0,111,120,122],
[93,90,98,106,99,0,106,116],
[104,102,96,95,90,104,0,113],
[100,103,102,104,88,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,84,107,107,96,108,91],
[121,0,105,118,117,117,129,108],
[126,105,0,113,125,126,126,102],
[103,92,97,0,101,102,106,80],
[103,93,85,109,0,105,117,98],
[114,93,84,108,105,0,119,94],
[102,81,84,104,93,91,0,86],
[119,102,108,130,112,116,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,106,119,122,119,121],
[110,0,107,120,115,143,102,136],
[108,103,0,90,112,107,105,116],
[104,90,120,0,120,115,129,114],
[91,95,98,90,0,100,100,75],
[88,67,103,95,110,0,80,92],
[91,108,105,81,110,130,0,112],
[89,74,94,96,135,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,82,97,90,98,97],
[111,0,117,103,102,119,119,118],
[109,93,0,92,100,101,114,102],
[128,107,118,0,114,103,108,116],
[113,108,110,96,0,84,107,102],
[120,91,109,107,126,0,103,114],
[112,91,96,102,103,107,0,84],
[113,92,108,94,108,96,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,137,95,94,97,117,37],
[94,0,57,55,74,73,76,36],
[73,153,0,73,92,73,73,36],
[115,155,137,0,94,96,153,112],
[116,136,118,116,0,95,153,74],
[113,137,137,114,115,0,133,55],
[93,134,137,57,57,77,0,75],
[173,174,174,98,136,155,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,98,99,100,87,98],
[102,0,105,88,78,96,77,105],
[104,105,0,93,83,104,91,107],
[112,122,117,0,94,108,109,108],
[111,132,127,116,0,107,94,108],
[110,114,106,102,103,0,100,90],
[123,133,119,101,116,110,0,112],
[112,105,103,102,102,120,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,105,101,102,94,85],
[120,0,103,108,106,106,112,108],
[108,107,0,99,101,100,102,103],
[105,102,111,0,100,102,113,110],
[109,104,109,110,0,106,110,109],
[108,104,110,108,104,0,98,101],
[116,98,108,97,100,112,0,111],
[125,102,107,100,101,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,101,110,107,121,106],
[108,0,105,91,100,111,115,109],
[101,105,0,108,101,108,113,112],
[109,119,102,0,112,99,108,111],
[100,110,109,98,0,101,113,113],
[103,99,102,111,109,0,113,111],
[89,95,97,102,97,97,0,102],
[104,101,98,99,97,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,77,132,104,104,104,130],
[78,0,77,105,101,77,51,105],
[133,133,0,108,131,77,158,132],
[78,105,102,0,129,129,130,104],
[106,109,79,81,0,80,105,132],
[106,133,133,81,130,0,158,132],
[106,159,52,80,105,52,0,105],
[80,105,78,106,78,78,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,102,99,107,105,108],
[112,0,111,98,112,109,101,111],
[102,99,0,100,103,99,113,111],
[108,112,110,0,102,106,99,102],
[111,98,107,108,0,111,105,99],
[103,101,111,104,99,0,107,106],
[105,109,97,111,105,103,0,107],
[102,99,99,108,111,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,111,106,101,117,91],
[104,0,103,102,106,96,106,97],
[102,107,0,127,105,99,118,107],
[99,108,83,0,101,98,107,97],
[104,104,105,109,0,98,103,100],
[109,114,111,112,112,0,110,90],
[93,104,92,103,107,100,0,97],
[119,113,103,113,110,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,110,107,98,98,103],
[102,0,109,113,114,114,110,110],
[106,101,0,106,109,103,98,107],
[100,97,104,0,110,103,97,98],
[103,96,101,100,0,92,94,103],
[112,96,107,107,118,0,102,119],
[112,100,112,113,116,108,0,104],
[107,100,103,112,107,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,111,110,103,121,120],
[105,0,96,115,102,103,108,99],
[97,114,0,123,115,107,112,105],
[99,95,87,0,94,94,105,90],
[100,108,95,116,0,110,114,101],
[107,107,103,116,100,0,110,105],
[89,102,98,105,96,100,0,99],
[90,111,105,120,109,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,106,101,107,112,111],
[108,0,108,107,106,101,112,126],
[119,102,0,97,105,110,123,128],
[104,103,113,0,96,100,125,127],
[109,104,105,114,0,110,110,126],
[103,109,100,110,100,0,106,120],
[98,98,87,85,100,104,0,96],
[99,84,82,83,84,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,98,100,111,108,103],
[101,0,100,100,95,106,93,95],
[103,110,0,101,101,113,109,115],
[112,110,109,0,101,104,106,107],
[110,115,109,109,0,109,104,109],
[99,104,97,106,101,0,108,104],
[102,117,101,104,106,102,0,112],
[107,115,95,103,101,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,101,95,100,92,113],
[110,0,99,106,109,105,100,103],
[114,111,0,111,120,102,113,120],
[109,104,99,0,102,101,106,115],
[115,101,90,108,0,96,117,107],
[110,105,108,109,114,0,117,123],
[118,110,97,104,93,93,0,111],
[97,107,90,95,103,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,94,61,79,76,78,75],
[123,0,98,112,120,122,114,128],
[116,112,0,99,82,115,112,108],
[149,98,111,0,109,121,103,100],
[131,90,128,101,0,103,104,101],
[134,88,95,89,107,0,121,102],
[132,96,98,107,106,89,0,87],
[135,82,102,110,109,108,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,109,92,120,70,123],
[114,0,105,112,93,121,84,121],
[116,105,0,106,97,89,106,97],
[101,98,104,0,113,100,120,114],
[118,117,113,97,0,99,91,122],
[90,89,121,110,111,0,111,89],
[140,126,104,90,119,99,0,122],
[87,89,113,96,88,121,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,114,101,118,135,105],
[99,0,93,111,89,117,116,109],
[89,117,0,101,106,113,114,125],
[96,99,109,0,101,111,107,118],
[109,121,104,109,0,118,103,115],
[92,93,97,99,92,0,107,98],
[75,94,96,103,107,103,0,99],
[105,101,85,92,95,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,80,107,99,97,89,86],
[126,0,115,127,128,122,117,92],
[130,95,0,111,112,100,113,87],
[103,83,99,0,85,109,106,103],
[111,82,98,125,0,91,105,98],
[113,88,110,101,119,0,118,113],
[121,93,97,104,105,92,0,80],
[124,118,123,107,112,97,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,89,88,89,87,105],
[99,0,100,115,87,107,103,136],
[99,110,0,118,114,103,123,114],
[121,95,92,0,100,98,108,105],
[122,123,96,110,0,101,117,130],
[121,103,107,112,109,0,119,122],
[123,107,87,102,93,91,0,119],
[105,74,96,105,80,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,99,100,99,99,112],
[109,0,98,96,90,105,104,101],
[108,112,0,100,100,110,108,105],
[111,114,110,0,109,110,101,111],
[110,120,110,101,0,113,107,110],
[111,105,100,100,97,0,103,105],
[111,106,102,109,103,107,0,110],
[98,109,105,99,100,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,106,95,96,105,102],
[107,0,99,103,114,115,121,108],
[113,111,0,103,110,122,109,103],
[104,107,107,0,113,121,114,108],
[115,96,100,97,0,112,105,99],
[114,95,88,89,98,0,101,90],
[105,89,101,96,105,109,0,103],
[108,102,107,102,111,120,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,85,99,121,97,102,97],
[106,0,88,104,97,98,82,101],
[125,122,0,114,118,92,108,123],
[111,106,96,0,109,105,115,114],
[89,113,92,101,0,111,96,117],
[113,112,118,105,99,0,98,117],
[108,128,102,95,114,112,0,117],
[113,109,87,96,93,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,115,101,94,104,109,102],
[117,0,118,97,102,110,114,126],
[95,92,0,99,81,91,92,109],
[109,113,111,0,98,110,113,117],
[116,108,129,112,0,98,111,116],
[106,100,119,100,112,0,113,109],
[101,96,118,97,99,97,0,105],
[108,84,101,93,94,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,107,114,119,103,107],
[107,0,126,102,100,112,112,115],
[99,84,0,108,91,104,96,102],
[103,108,102,0,99,108,97,105],
[96,110,119,111,0,110,111,110],
[91,98,106,102,100,0,104,108],
[107,98,114,113,99,106,0,109],
[103,95,108,105,100,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,114,94,110,107,107],
[100,0,109,111,95,109,112,94],
[110,101,0,113,106,105,101,102],
[96,99,97,0,94,102,101,94],
[116,115,104,116,0,110,99,107],
[100,101,105,108,100,0,109,99],
[103,98,109,109,111,101,0,101],
[103,116,108,116,103,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,112,117,113,108,129],
[99,0,108,114,113,105,103,108],
[106,102,0,113,110,95,109,116],
[98,96,97,0,100,104,92,97],
[93,97,100,110,0,102,91,107],
[97,105,115,106,108,0,111,107],
[102,107,101,118,119,99,0,113],
[81,102,94,113,103,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,91,93,115,94,94],
[96,0,105,76,106,117,88,101],
[108,105,0,105,102,105,95,94],
[119,134,105,0,117,119,101,111],
[117,104,108,93,0,109,109,93],
[95,93,105,91,101,0,85,92],
[116,122,115,109,101,125,0,101],
[116,109,116,99,117,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,80,82,65,77,71,126],
[119,0,122,109,75,74,108,117],
[130,88,0,87,90,112,117,120],
[128,101,123,0,76,94,112,107],
[145,135,120,134,0,95,114,136],
[133,136,98,116,115,0,95,137],
[139,102,93,98,96,115,0,119],
[84,93,90,103,74,73,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,98,95,100,93,98,96],
[89,0,102,81,99,101,84,78],
[112,108,0,87,109,95,89,97],
[115,129,123,0,115,121,99,98],
[110,111,101,95,0,115,99,111],
[117,109,115,89,95,0,109,107],
[112,126,121,111,111,101,0,89],
[114,132,113,112,99,103,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,104,98,115,104,113,99],
[87,0,105,99,108,113,103,99],
[106,105,0,99,116,106,107,100],
[112,111,111,0,109,104,113,100],
[95,102,94,101,0,115,99,105],
[106,97,104,106,95,0,98,96],
[97,107,103,97,111,112,0,92],
[111,111,110,110,105,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,110,104,78,70,94],
[140,0,121,135,109,104,107,123],
[135,89,0,119,99,85,83,87],
[100,75,91,0,93,88,66,90],
[106,101,111,117,0,105,83,118],
[132,106,125,122,105,0,79,102],
[140,103,127,144,127,131,0,117],
[116,87,123,120,92,108,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,144,134,149,160,98,145],
[81,0,146,147,132,163,113,131],
[66,64,0,102,116,132,68,117],
[76,63,108,0,63,110,80,126],
[61,78,94,147,0,108,84,78],
[50,47,78,100,102,0,99,65],
[112,97,142,130,126,111,0,128],
[65,79,93,84,132,145,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,106,108,98,92,102],
[108,0,104,107,102,113,105,117],
[123,106,0,114,99,108,102,129],
[104,103,96,0,97,103,99,106],
[102,108,111,113,0,104,97,121],
[112,97,102,107,106,0,96,121],
[118,105,108,111,113,114,0,118],
[108,93,81,104,89,89,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,103,84,96,101,101],
[103,0,120,110,97,114,104,97],
[115,90,0,95,92,95,88,104],
[107,100,115,0,82,88,88,86],
[126,113,118,128,0,97,104,102],
[114,96,115,122,113,0,115,107],
[109,106,122,122,106,95,0,94],
[109,113,106,124,108,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,126,104,96,89,93],
[99,0,117,122,100,85,101,96],
[103,93,0,119,101,100,101,100],
[84,88,91,0,85,76,85,82],
[106,110,109,125,0,96,104,104],
[114,125,110,134,114,0,103,116],
[121,109,109,125,106,107,0,102],
[117,114,110,128,106,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,117,120,112,114,96],
[105,0,109,114,118,100,112,105],
[103,101,0,102,112,114,107,103],
[93,96,108,0,117,95,108,99],
[90,92,98,93,0,104,107,103],
[98,110,96,115,106,0,114,107],
[96,98,103,102,103,96,0,90],
[114,105,107,111,107,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,117,112,103,118,104],
[110,0,92,108,111,87,123,122],
[115,118,0,114,107,102,109,98],
[93,102,96,0,108,105,107,106],
[98,99,103,102,0,109,101,98],
[107,123,108,105,101,0,103,125],
[92,87,101,103,109,107,0,91],
[106,88,112,104,112,85,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,113,99,118,99,107],
[96,0,87,94,85,88,71,93],
[96,123,0,114,104,114,110,103],
[97,116,96,0,103,98,84,117],
[111,125,106,107,0,105,95,106],
[92,122,96,112,105,0,90,104],
[111,139,100,126,115,120,0,113],
[103,117,107,93,104,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,0,103,34,0,68],
[138,0,69,0,138,34,103,137],
[141,141,0,72,176,72,103,141],
[210,210,138,0,138,104,137,172],
[107,72,34,72,0,38,34,106],
[176,176,138,106,172,0,103,176],
[210,107,107,73,176,107,0,175],
[142,73,69,38,104,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,118,97,118,103,115,140],
[85,0,99,103,85,94,94,91],
[92,111,0,104,88,111,102,136],
[113,107,106,0,78,97,100,121],
[92,125,122,132,0,128,113,108],
[107,116,99,113,82,0,111,101],
[95,116,108,110,97,99,0,123],
[70,119,74,89,102,109,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,105,106,111,117,111],
[104,0,109,105,95,114,112,107],
[91,101,0,100,91,101,98,102],
[105,105,110,0,102,102,107,103],
[104,115,119,108,0,105,113,113],
[99,96,109,108,105,0,109,109],
[93,98,112,103,97,101,0,100],
[99,103,108,107,97,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,108,129,105,103,96],
[94,0,106,107,115,113,104,96],
[104,104,0,110,108,109,113,109],
[102,103,100,0,121,116,107,114],
[81,95,102,89,0,96,91,83],
[105,97,101,94,114,0,98,100],
[107,106,97,103,119,112,0,111],
[114,114,101,96,127,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,125,91,134,115,95],
[102,0,107,90,133,115,117,99],
[85,103,0,96,104,121,112,107],
[85,120,114,0,113,138,128,129],
[119,77,106,97,0,108,132,113],
[76,95,89,72,102,0,95,85],
[95,93,98,82,78,115,0,86],
[115,111,103,81,97,125,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,139,138,78,105,112,118],
[84,0,101,101,101,77,75,82],
[71,109,0,106,72,91,111,103],
[72,109,104,0,73,80,102,107],
[132,109,138,137,0,110,98,95],
[105,133,119,130,100,0,107,109],
[98,135,99,108,112,103,0,112],
[92,128,107,103,115,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,104,101,94,98,104],
[109,0,110,108,104,103,103,101],
[113,100,0,113,86,107,108,113],
[106,102,97,0,90,103,109,97],
[109,106,124,120,0,117,102,98],
[116,107,103,107,93,0,98,101],
[112,107,102,101,108,112,0,99],
[106,109,97,113,112,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,96,96,93,95,99],
[118,0,114,110,116,104,109,114],
[117,96,0,92,94,97,104,103],
[114,100,118,0,117,111,106,124],
[114,94,116,93,0,103,110,111],
[117,106,113,99,107,0,113,100],
[115,101,106,104,100,97,0,106],
[111,96,107,86,99,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,99,92,90,113,98],
[105,0,95,99,97,90,107,96],
[106,115,0,100,95,97,117,97],
[111,111,110,0,107,101,119,101],
[118,113,115,103,0,105,127,100],
[120,120,113,109,105,0,127,116],
[97,103,93,91,83,83,0,99],
[112,114,113,109,110,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,117,94,112,100,104,103],
[116,0,117,107,120,104,106,96],
[93,93,0,84,107,95,96,93],
[116,103,126,0,107,109,102,99],
[98,90,103,103,0,94,90,88],
[110,106,115,101,116,0,109,101],
[106,104,114,108,120,101,0,106],
[107,114,117,111,122,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,87,107,91,100,103],
[101,0,107,111,106,99,96,114],
[109,103,0,100,110,95,113,102],
[123,99,110,0,105,108,107,98],
[103,104,100,105,0,100,103,97],
[119,111,115,102,110,0,93,98],
[110,114,97,103,107,117,0,123],
[107,96,108,112,113,112,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,107,87,102,98,82],
[112,0,88,105,100,107,103,97],
[120,122,0,114,115,118,109,102],
[103,105,96,0,96,101,105,96],
[123,110,95,114,0,118,98,95],
[108,103,92,109,92,0,100,93],
[112,107,101,105,112,110,0,106],
[128,113,108,114,115,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,104,92,102,98,89],
[115,0,99,109,100,89,105,107],
[115,111,0,105,117,110,113,112],
[106,101,105,0,99,104,111,102],
[118,110,93,111,0,110,107,100],
[108,121,100,106,100,0,113,103],
[112,105,97,99,103,97,0,84],
[121,103,98,108,110,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,137,118,132,107,101],
[93,0,110,128,104,113,84,81],
[102,100,0,132,111,108,90,108],
[73,82,78,0,96,75,77,67],
[92,106,99,114,0,91,82,76],
[78,97,102,135,119,0,87,70],
[103,126,120,133,128,123,0,126],
[109,129,102,143,134,140,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,96,100,118,109,116],
[108,0,96,114,110,109,125,118],
[101,114,0,100,105,115,112,122],
[114,96,110,0,112,103,112,130],
[110,100,105,98,0,112,108,115],
[92,101,95,107,98,0,111,124],
[101,85,98,98,102,99,0,106],
[94,92,88,80,95,86,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,134,134,173,154,133,95],
[114,0,173,133,154,153,190,93],
[76,37,0,93,95,96,114,112],
[76,77,117,0,114,77,114,93],
[37,56,115,96,0,75,95,75],
[56,57,114,133,135,0,95,94],
[77,20,96,96,115,115,0,76],
[115,117,98,117,135,116,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,96,99,99,105,105],
[119,0,105,105,119,105,114,111],
[117,105,0,101,111,103,100,105],
[114,105,109,0,112,100,111,118],
[111,91,99,98,0,105,98,107],
[111,105,107,110,105,0,114,109],
[105,96,110,99,112,96,0,97],
[105,99,105,92,103,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,91,88,107,88,86,100],
[120,0,101,137,119,110,121,103],
[119,109,0,133,121,114,104,122],
[122,73,77,0,105,91,100,98],
[103,91,89,105,0,108,100,103],
[122,100,96,119,102,0,97,123],
[124,89,106,110,110,113,0,100],
[110,107,88,112,107,87,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,144,107,152,147,127],
[103,0,138,160,79,132,116,129],
[120,72,0,151,102,101,121,94],
[66,50,59,0,39,76,79,90],
[103,131,108,171,0,105,98,126],
[58,78,109,134,105,0,106,100],
[63,94,89,131,112,104,0,97],
[83,81,116,120,84,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,96,106,92,109,99],
[105,0,96,105,94,96,101,105],
[113,114,0,111,98,109,119,105],
[114,105,99,0,95,114,116,107],
[104,116,112,115,0,117,111,113],
[118,114,101,96,93,0,104,102],
[101,109,91,94,99,106,0,99],
[111,105,105,103,97,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,109,116,119,106,118],
[109,0,110,111,130,122,95,123],
[113,100,0,116,110,105,95,108],
[101,99,94,0,135,124,64,108],
[94,80,100,75,0,103,82,86],
[91,88,105,86,107,0,91,89],
[104,115,115,146,128,119,0,96],
[92,87,102,102,124,121,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,99,97,103,110,116],
[101,0,110,101,102,95,100,105],
[93,100,0,97,90,100,94,104],
[111,109,113,0,112,108,97,112],
[113,108,120,98,0,109,107,109],
[107,115,110,102,101,0,101,113],
[100,110,116,113,103,109,0,110],
[94,105,106,98,101,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,107,93,72,72,95,92],
[126,0,107,114,94,117,104,93],
[103,103,0,104,94,104,91,103],
[117,96,106,0,120,70,79,128],
[138,116,116,90,0,79,104,67],
[138,93,106,140,131,0,138,104],
[115,106,119,131,106,72,0,140],
[118,117,107,82,143,106,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,135,111,103,118,121,116],
[91,0,98,102,99,116,111,106],
[75,112,0,68,97,119,105,105],
[99,108,142,0,114,127,139,110],
[107,111,113,96,0,119,96,100],
[92,94,91,83,91,0,97,96],
[89,99,105,71,114,113,0,95],
[94,104,105,100,110,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,107,107,97,112,105],
[113,0,120,118,99,109,119,113],
[104,90,0,115,107,87,112,101],
[103,92,95,0,105,96,104,102],
[103,111,103,105,0,101,106,108],
[113,101,123,114,109,0,118,109],
[98,91,98,106,104,92,0,102],
[105,97,109,108,102,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,94,109,101,105,94],
[101,0,103,107,115,106,109,105],
[107,107,0,107,110,104,93,102],
[116,103,103,0,121,117,118,119],
[101,95,100,89,0,92,91,102],
[109,104,106,93,118,0,112,99],
[105,101,117,92,119,98,0,103],
[116,105,108,91,108,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,95,99,88,83,91,90],
[128,0,104,114,109,105,105,120],
[115,106,0,108,107,89,110,109],
[111,96,102,0,87,89,97,100],
[122,101,103,123,0,93,116,119],
[127,105,121,121,117,0,116,120],
[119,105,100,113,94,94,0,102],
[120,90,101,110,91,90,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,106,92,86,98,98],
[102,0,94,116,111,106,90,96],
[100,116,0,101,113,97,110,108],
[104,94,109,0,103,93,94,98],
[118,99,97,107,0,99,104,106],
[124,104,113,117,111,0,119,107],
[112,120,100,116,106,91,0,115],
[112,114,102,112,104,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,102,108,104,101,106],
[117,0,103,105,111,99,104,113],
[111,107,0,97,119,103,99,100],
[108,105,113,0,115,109,111,114],
[102,99,91,95,0,97,102,97],
[106,111,107,101,113,0,108,114],
[109,106,111,99,108,102,0,109],
[104,97,110,96,113,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,104,93,96,102,111,98],
[123,0,109,100,103,109,107,103],
[106,101,0,110,103,105,97,97],
[117,110,100,0,104,98,104,104],
[114,107,107,106,0,112,94,111],
[108,101,105,112,98,0,106,110],
[99,103,113,106,116,104,0,102],
[112,107,113,106,99,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,114,109,109,90,124],
[101,0,93,102,102,89,107,109],
[117,117,0,102,123,100,96,129],
[96,108,108,0,102,110,110,112],
[101,108,87,108,0,90,110,91],
[101,121,110,100,120,0,116,100],
[120,103,114,100,100,94,0,106],
[86,101,81,98,119,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,79,88,87,96,89],
[117,0,101,87,95,113,98,114],
[116,109,0,89,117,102,87,107],
[131,123,121,0,131,121,104,129],
[122,115,93,79,0,95,96,98],
[123,97,108,89,115,0,91,95],
[114,112,123,106,114,119,0,95],
[121,96,103,81,112,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,91,99,96,106,98],
[108,0,104,102,102,102,121,96],
[108,106,0,94,112,100,100,106],
[119,108,116,0,104,96,122,107],
[111,108,98,106,0,102,106,108],
[114,108,110,114,108,0,118,103],
[104,89,110,88,104,92,0,100],
[112,114,104,103,102,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,98,94,101,104,107],
[90,0,97,105,80,95,92,95],
[107,113,0,103,96,99,106,101],
[112,105,107,0,102,97,99,97],
[116,130,114,108,0,109,104,109],
[109,115,111,113,101,0,106,109],
[106,118,104,111,106,104,0,111],
[103,115,109,113,101,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,94,109,118,108,118],
[91,0,107,70,94,110,92,115],
[93,103,0,91,99,108,110,116],
[116,140,119,0,101,133,120,133],
[101,116,111,109,0,118,98,109],
[92,100,102,77,92,0,105,110],
[102,118,100,90,112,105,0,132],
[92,95,94,77,101,100,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,116,100,105,114,114],
[102,0,102,104,109,106,107,106],
[104,108,0,113,103,108,103,95],
[94,106,97,0,103,109,104,97],
[110,101,107,107,0,107,105,104],
[105,104,102,101,103,0,105,104],
[96,103,107,106,105,105,0,100],
[96,104,115,113,106,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,94,95,102,105,98,104],
[85,0,96,93,87,95,87,119],
[116,114,0,114,110,99,100,128],
[115,117,96,0,116,109,100,109],
[108,123,100,94,0,118,107,110],
[105,115,111,101,92,0,81,110],
[112,123,110,110,103,129,0,116],
[106,91,82,101,100,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,121,96,99,114,111,106],
[109,0,101,104,106,96,100,103],
[89,109,0,122,82,91,102,105],
[114,106,88,0,90,107,102,89],
[111,104,128,120,0,118,110,124],
[96,114,119,103,92,0,110,109],
[99,110,108,108,100,100,0,102],
[104,107,105,121,86,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,109,136,91,117,106],
[101,0,82,115,106,75,94,97],
[103,128,0,140,151,110,137,117],
[101,95,70,0,109,80,120,87],
[74,104,59,101,0,74,90,84],
[119,135,100,130,136,0,132,112],
[93,116,73,90,120,78,0,87],
[104,113,93,123,126,98,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,107,95,106,99,114],
[101,0,105,112,97,109,106,115],
[96,105,0,108,96,100,97,102],
[103,98,102,0,92,100,104,101],
[115,113,114,118,0,105,107,114],
[104,101,110,110,105,0,102,109],
[111,104,113,106,103,108,0,109],
[96,95,108,109,96,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,100,112,104,113,107],
[100,0,121,114,107,103,106,103],
[91,89,0,99,99,95,111,105],
[110,96,111,0,108,101,111,102],
[98,103,111,102,0,105,113,111],
[106,107,115,109,105,0,101,103],
[97,104,99,99,97,109,0,98],
[103,107,105,108,99,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,114,106,107,111,120],
[113,0,118,95,103,128,109,108],
[92,92,0,85,87,102,91,97],
[96,115,125,0,107,120,118,106],
[104,107,123,103,0,127,105,110],
[103,82,108,90,83,0,91,100],
[99,101,119,92,105,119,0,110],
[90,102,113,104,100,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,102,105,103,92,89],
[104,0,99,100,100,104,98,103],
[108,111,0,91,111,108,111,91],
[108,110,119,0,117,125,120,97],
[105,110,99,93,0,108,104,87],
[107,106,102,85,102,0,97,90],
[118,112,99,90,106,113,0,106],
[121,107,119,113,123,120,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,94,106,103,88,93],
[105,0,108,80,115,103,94,83],
[101,102,0,89,91,100,93,94],
[116,130,121,0,123,110,112,104],
[104,95,119,87,0,102,112,89],
[107,107,110,100,108,0,109,107],
[122,116,117,98,98,101,0,104],
[117,127,116,106,121,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,105,116,119,112,102],
[91,0,112,96,120,94,107,104],
[97,98,0,92,117,114,122,103],
[105,114,118,0,116,113,113,120],
[94,90,93,94,0,96,97,99],
[91,116,96,97,114,0,118,103],
[98,103,88,97,113,92,0,99],
[108,106,107,90,111,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,88,114,104,108,94],
[100,0,103,89,105,100,102,75],
[94,107,0,106,99,99,114,104],
[122,121,104,0,116,124,118,122],
[96,105,111,94,0,116,119,119],
[106,110,111,86,94,0,96,97],
[102,108,96,92,91,114,0,94],
[116,135,106,88,91,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,89,105,107,107,86],
[97,0,101,89,110,104,104,92],
[101,109,0,107,103,106,100,88],
[121,121,103,0,122,121,112,105],
[105,100,107,88,0,107,93,91],
[103,106,104,89,103,0,103,95],
[103,106,110,98,117,107,0,87],
[124,118,122,105,119,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,109,122,115,103,107],
[92,0,100,119,102,105,104,104],
[111,110,0,122,119,110,115,95],
[101,91,88,0,101,96,90,101],
[88,108,91,109,0,87,94,104],
[95,105,100,114,123,0,103,105],
[107,106,95,120,116,107,0,101],
[103,106,115,109,106,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,92,102,109,115,107],
[94,0,116,106,102,114,114,97],
[90,94,0,101,86,94,106,79],
[118,104,109,0,88,96,111,100],
[108,108,124,122,0,117,112,104],
[101,96,116,114,93,0,115,90],
[95,96,104,99,98,95,0,91],
[103,113,131,110,106,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,131,116,100,116,126,121],
[85,0,108,102,86,96,106,89],
[79,102,0,99,96,87,97,99],
[94,108,111,0,101,89,104,100],
[110,124,114,109,0,97,119,99],
[94,114,123,121,113,0,111,105],
[84,104,113,106,91,99,0,95],
[89,121,111,110,111,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,157,158,158,157,53,210],
[0,0,0,52,0,53,53,105],
[53,210,0,158,105,53,106,210],
[52,158,52,0,52,105,53,105],
[52,210,105,158,0,105,53,158],
[53,157,157,105,105,0,53,210],
[157,157,104,157,157,157,0,157],
[0,105,0,105,52,0,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,88,105,104,111,100,117],
[114,0,113,120,104,113,114,135],
[122,97,0,117,115,132,120,112],
[105,90,93,0,96,133,103,100],
[106,106,95,114,0,104,101,122],
[99,97,78,77,106,0,87,100],
[110,96,90,107,109,123,0,122],
[93,75,98,110,88,110,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,96,126,132,95,126,115],
[86,0,89,109,98,87,123,119],
[114,121,0,107,124,105,122,120],
[84,101,103,0,103,78,123,101],
[78,112,86,107,0,69,91,101],
[115,123,105,132,141,0,105,134],
[84,87,88,87,119,105,0,110],
[95,91,90,109,109,76,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,119,119,89,119,90,89],
[120,0,179,59,59,149,119,119],
[91,31,0,90,60,150,61,60],
[91,151,120,0,149,181,151,151],
[121,151,150,61,0,151,151,121],
[91,61,60,29,59,0,30,60],
[120,91,149,59,59,180,0,150],
[121,91,150,59,89,150,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,87,95,119,104,121,128],
[125,0,105,108,121,124,126,108],
[123,105,0,94,114,121,139,112],
[115,102,116,0,126,143,130,129],
[91,89,96,84,0,123,99,92],
[106,86,89,67,87,0,107,98],
[89,84,71,80,111,103,0,82],
[82,102,98,81,118,112,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,105,82,95,113,100],
[107,0,102,98,104,96,87,108],
[109,108,0,92,104,111,122,133],
[105,112,118,0,104,115,112,119],
[128,106,106,106,0,98,114,110],
[115,114,99,95,112,0,100,112],
[97,123,88,98,96,110,0,104],
[110,102,77,91,100,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,96,97,108,109,110],
[109,0,109,96,103,101,93,112],
[93,101,0,93,94,99,91,105],
[114,114,117,0,105,114,113,115],
[113,107,116,105,0,111,103,108],
[102,109,111,96,99,0,97,108],
[101,117,119,97,107,113,0,115],
[100,98,105,95,102,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,98,112,111,110,113],
[111,0,108,111,109,111,105,106],
[117,102,0,98,101,108,114,110],
[112,99,112,0,112,118,122,119],
[98,101,109,98,0,111,107,109],
[99,99,102,92,99,0,119,105],
[100,105,96,88,103,91,0,102],
[97,104,100,91,101,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,103,122,119,113,123],
[90,0,111,93,98,80,101,113],
[92,99,0,68,91,101,103,93],
[107,117,142,0,125,130,100,122],
[88,112,119,85,0,102,98,84],
[91,130,109,80,108,0,87,99],
[97,109,107,110,112,123,0,97],
[87,97,117,88,126,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,101,111,114,103,85],
[94,0,111,118,113,112,93,89],
[102,99,0,115,108,98,105,109],
[109,92,95,0,111,107,108,95],
[99,97,102,99,0,100,102,91],
[96,98,112,103,110,0,96,97],
[107,117,105,102,108,114,0,106],
[125,121,101,115,119,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,113,123,118,95,116],
[96,0,125,107,111,112,98,113],
[102,85,0,107,96,110,106,105],
[97,103,103,0,95,104,94,116],
[87,99,114,115,0,117,106,119],
[92,98,100,106,93,0,84,98],
[115,112,104,116,104,126,0,120],
[94,97,105,94,91,112,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,109,95,99,98,101],
[109,0,104,100,105,106,110,107],
[113,106,0,98,98,96,108,107],
[101,110,112,0,100,91,101,112],
[115,105,112,110,0,102,108,116],
[111,104,114,119,108,0,108,118],
[112,100,102,109,102,102,0,108],
[109,103,103,98,94,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,106,117,100,117,109],
[105,0,121,115,114,118,122,106],
[103,89,0,114,111,98,100,97],
[104,95,96,0,104,100,108,103],
[93,96,99,106,0,115,106,81],
[110,92,112,110,95,0,104,101],
[93,88,110,102,104,106,0,98],
[101,104,113,107,129,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,94,87,94,96,90,87],
[119,0,83,94,99,94,98,80],
[116,127,0,119,110,114,129,105],
[123,116,91,0,113,102,109,101],
[116,111,100,97,0,111,113,107],
[114,116,96,108,99,0,95,108],
[120,112,81,101,97,115,0,87],
[123,130,105,109,103,102,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,105,119,108,93,106],
[99,0,89,100,112,102,105,101],
[108,121,0,100,116,103,112,101],
[105,110,110,0,112,102,97,109],
[91,98,94,98,0,101,96,93],
[102,108,107,108,109,0,104,111],
[117,105,98,113,114,106,0,102],
[104,109,109,101,117,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,111,100,101,100,81],
[107,0,90,96,114,84,97,94],
[92,120,0,97,97,88,95,90],
[99,114,113,0,90,72,103,126],
[110,96,113,120,0,119,103,129],
[109,126,122,138,91,0,130,126],
[110,113,115,107,107,80,0,97],
[129,116,120,84,81,84,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,106,104,121,106,102],
[102,0,105,113,109,119,111,106],
[103,105,0,109,106,117,105,107],
[104,97,101,0,101,115,99,101],
[106,101,104,109,0,110,99,100],
[89,91,93,95,100,0,90,98],
[104,99,105,111,111,120,0,109],
[108,104,103,109,110,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,111,99,106,105,111],
[105,0,89,97,100,99,96,102],
[104,121,0,117,113,125,114,114],
[99,113,93,0,98,107,111,108],
[111,110,97,112,0,108,111,103],
[104,111,85,103,102,0,107,108],
[105,114,96,99,99,103,0,105],
[99,108,96,102,107,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,94,101,96,124,104],
[103,0,95,97,118,108,111,110],
[116,115,0,106,119,103,129,110],
[116,113,104,0,113,118,132,114],
[109,92,91,97,0,104,106,105],
[114,102,107,92,106,0,121,116],
[86,99,81,78,104,89,0,99],
[106,100,100,96,105,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,100,128,97,93,102],
[112,0,105,118,152,104,112,101],
[123,105,0,133,139,119,118,112],
[110,92,77,0,139,111,113,96],
[82,58,71,71,0,81,82,74],
[113,106,91,99,129,0,114,92],
[117,98,92,97,128,96,0,90],
[108,109,98,114,136,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,101,111,110,102,100],
[103,0,98,91,97,113,88,101],
[101,112,0,107,119,105,96,108],
[109,119,103,0,106,121,109,104],
[99,113,91,104,0,109,91,97],
[100,97,105,89,101,0,103,86],
[108,122,114,101,119,107,0,103],
[110,109,102,106,113,124,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,94,95,95,92,91],
[99,0,102,97,109,110,86,93],
[108,108,0,95,111,105,100,117],
[116,113,115,0,118,109,105,127],
[115,101,99,92,0,93,95,100],
[115,100,105,101,117,0,98,111],
[118,124,110,105,115,112,0,108],
[119,117,93,83,110,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,115,107,110,106,102],
[104,0,120,110,99,108,106,117],
[94,90,0,96,82,94,95,90],
[95,100,114,0,97,102,101,100],
[103,111,128,113,0,113,103,113],
[100,102,116,108,97,0,110,108],
[104,104,115,109,107,100,0,110],
[108,93,120,110,97,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,105,109,122,107,119],
[104,0,104,100,98,120,104,101],
[104,106,0,100,102,117,108,108],
[105,110,110,0,104,119,104,117],
[101,112,108,106,0,111,99,119],
[88,90,93,91,99,0,93,105],
[103,106,102,106,111,117,0,108],
[91,109,102,93,91,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,100,102,109,109,105],
[123,0,107,106,102,120,109,110],
[105,103,0,109,100,111,116,99],
[110,104,101,0,96,111,113,105],
[108,108,110,114,0,111,101,122],
[101,90,99,99,99,0,104,93],
[101,101,94,97,109,106,0,106],
[105,100,111,105,88,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,87,95,108,93,106,113],
[90,0,86,82,98,88,95,101],
[123,124,0,105,121,104,109,108],
[115,128,105,0,119,111,103,123],
[102,112,89,91,0,97,86,110],
[117,122,106,99,113,0,101,113],
[104,115,101,107,124,109,0,113],
[97,109,102,87,100,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,111,109,101,108,112],
[98,0,98,112,105,100,108,102],
[96,112,0,100,95,107,114,111],
[99,98,110,0,98,107,115,105],
[101,105,115,112,0,113,115,108],
[109,110,103,103,97,0,113,109],
[102,102,96,95,95,97,0,100],
[98,108,99,105,102,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,106,96,95,99,84],
[106,0,100,94,98,88,94,100],
[109,110,0,101,96,108,98,111],
[104,116,109,0,91,106,108,96],
[114,112,114,119,0,104,104,126],
[115,122,102,104,106,0,101,114],
[111,116,112,102,106,109,0,108],
[126,110,99,114,84,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,111,94,110,109,100],
[95,0,107,107,91,87,94,116],
[109,103,0,93,110,97,91,101],
[99,103,117,0,106,105,100,102],
[116,119,100,104,0,114,105,98],
[100,123,113,105,96,0,108,102],
[101,116,119,110,105,102,0,94],
[110,94,109,108,112,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,91,98,120,102,93],
[121,0,111,117,125,110,120,101],
[114,99,0,113,123,120,103,117],
[119,93,97,0,100,118,98,118],
[112,85,87,110,0,108,107,97],
[90,100,90,92,102,0,95,102],
[108,90,107,112,103,115,0,97],
[117,109,93,92,113,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,116,111,106,105,107],
[102,0,102,121,112,106,107,102],
[108,108,0,111,109,109,99,105],
[94,89,99,0,103,103,84,98],
[99,98,101,107,0,93,86,104],
[104,104,101,107,117,0,96,99],
[105,103,111,126,124,114,0,111],
[103,108,105,112,106,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,91,95,121,107,117],
[107,0,98,89,105,106,90,96],
[115,112,0,104,115,121,106,112],
[119,121,106,0,100,122,97,107],
[115,105,95,110,0,112,98,103],
[89,104,89,88,98,0,80,94],
[103,120,104,113,112,130,0,106],
[93,114,98,103,107,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,135,94,104,126,120,113],
[114,0,122,99,126,120,109,82],
[75,88,0,89,92,93,105,80],
[116,111,121,0,105,96,111,110],
[106,84,118,105,0,108,116,118],
[84,90,117,114,102,0,109,96],
[90,101,105,99,94,101,0,94],
[97,128,130,100,92,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,93,98,117,98,115],
[96,0,106,101,99,101,106,111],
[97,104,0,94,101,95,106,101],
[117,109,116,0,107,105,112,125],
[112,111,109,103,0,106,114,117],
[93,109,115,105,104,0,109,105],
[112,104,104,98,96,101,0,113],
[95,99,109,85,93,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,112,100,104,106,112],
[110,0,100,117,96,106,103,106],
[111,110,0,114,107,106,110,105],
[98,93,96,0,83,107,107,107],
[110,114,103,127,0,109,108,115],
[106,104,104,103,101,0,102,107],
[104,107,100,103,102,108,0,103],
[98,104,105,103,95,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,115,119,124,101,113,127],
[82,0,105,95,103,101,101,107],
[95,105,0,101,89,107,98,92],
[91,115,109,0,109,92,92,98],
[86,107,121,101,0,105,115,116],
[109,109,103,118,105,0,102,96],
[97,109,112,118,95,108,0,119],
[83,103,118,112,94,114,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,109,103,110,104,112],
[102,0,95,96,95,107,104,112],
[100,115,0,119,116,106,114,118],
[101,114,91,0,102,111,109,109],
[107,115,94,108,0,117,99,109],
[100,103,104,99,93,0,97,103],
[106,106,96,101,111,113,0,109],
[98,98,92,101,101,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,174,121,136,137,140,121],
[125,0,142,121,122,87,139,105],
[36,68,0,89,87,104,123,86],
[89,89,121,0,105,121,158,122],
[74,88,123,105,0,106,157,103],
[73,123,106,89,104,0,141,88],
[70,71,87,52,53,69,0,70],
[89,105,124,88,107,122,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,101,101,111,109,108],
[109,0,119,114,104,105,107,119],
[103,91,0,108,97,91,99,101],
[109,96,102,0,97,96,108,106],
[109,106,113,113,0,101,116,107],
[99,105,119,114,109,0,107,99],
[101,103,111,102,94,103,0,101],
[102,91,109,104,103,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,135,123,118,108,107],
[96,0,69,110,78,91,99,106],
[112,141,0,130,149,114,93,97],
[75,100,80,0,96,72,53,105],
[87,132,61,114,0,100,102,98],
[92,119,96,138,110,0,79,114],
[102,111,117,157,108,131,0,118],
[103,104,113,105,112,96,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,129,83,139,129,81],
[117,0,128,141,105,127,129,130],
[106,82,0,118,83,115,118,105],
[81,69,92,0,70,103,82,104],
[127,105,127,140,0,128,150,128],
[71,83,95,107,82,0,95,85],
[81,81,92,128,60,115,0,92],
[129,80,105,106,82,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,168,170,85,83,125,43],
[167,0,125,127,125,125,125,85],
[42,85,0,84,127,83,85,85],
[40,83,126,0,83,83,83,83],
[125,85,83,127,0,83,126,43],
[127,85,127,127,127,0,170,127],
[85,85,125,127,84,40,0,85],
[167,125,125,127,167,83,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,120,103,94,111,118,110],
[113,0,113,97,135,102,126,115],
[90,97,0,101,120,109,99,115],
[107,113,109,0,105,93,113,113],
[116,75,90,105,0,88,84,103],
[99,108,101,117,122,0,124,82],
[92,84,111,97,126,86,0,94],
[100,95,95,97,107,128,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,121,100,119,120,89,113],
[79,0,110,130,108,122,88,72],
[89,100,0,102,108,161,89,92],
[110,80,108,0,100,121,117,112],
[91,102,102,110,0,122,87,92],
[90,88,49,89,88,0,58,93],
[121,122,121,93,123,152,0,133],
[97,138,118,98,118,117,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,111,95,114,121,106],
[104,0,106,109,95,113,117,106],
[108,104,0,113,101,99,117,99],
[99,101,97,0,94,102,103,96],
[115,115,109,116,0,110,103,106],
[96,97,111,108,100,0,103,106],
[89,93,93,107,107,107,0,105],
[104,104,111,114,104,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,118,104,124,107,116,118],
[88,0,102,91,97,101,95,105],
[92,108,0,110,107,105,110,118],
[106,119,100,0,112,114,117,106],
[86,113,103,98,0,119,110,105],
[103,109,105,96,91,0,122,116],
[94,115,100,93,100,88,0,103],
[92,105,92,104,105,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,98,99,113,102,110],
[114,0,124,105,97,100,115,123],
[103,86,0,91,100,99,100,99],
[112,105,119,0,111,93,105,117],
[111,113,110,99,0,99,110,118],
[97,110,111,117,111,0,115,115],
[108,95,110,105,100,95,0,104],
[100,87,111,93,92,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,94,91,106,104,109],
[112,0,114,109,105,116,110,117],
[109,96,0,100,104,98,106,100],
[116,101,110,0,104,104,103,104],
[119,105,106,106,0,96,102,107],
[104,94,112,106,114,0,107,108],
[106,100,104,107,108,103,0,105],
[101,93,110,106,103,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,110,112,115,118,108,97],
[78,0,76,102,101,93,95,93],
[100,134,0,129,104,114,128,120],
[98,108,81,0,102,109,109,111],
[95,109,106,108,0,102,108,104],
[92,117,96,101,108,0,104,103],
[102,115,82,101,102,106,0,97],
[113,117,90,99,106,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,111,107,92,102,101],
[110,0,97,97,97,78,89,98],
[100,113,0,120,109,106,110,114],
[99,113,90,0,114,113,111,113],
[103,113,101,96,0,82,105,101],
[118,132,104,97,128,0,118,120],
[108,121,100,99,105,92,0,114],
[109,112,96,97,109,90,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,103,93,100,92,105],
[96,0,96,97,100,96,102,90],
[102,114,0,103,98,97,97,101],
[107,113,107,0,104,96,99,107],
[117,110,112,106,0,98,99,109],
[110,114,113,114,112,0,101,101],
[118,108,113,111,111,109,0,100],
[105,120,109,103,101,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,97,99,94,106,108],
[112,0,110,102,116,105,100,117],
[115,100,0,114,107,121,106,116],
[113,108,96,0,113,109,104,109],
[111,94,103,97,0,85,90,89],
[116,105,89,101,125,0,103,108],
[104,110,104,106,120,107,0,114],
[102,93,94,101,121,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,92,103,97,112,105],
[110,0,106,100,117,108,100,110],
[103,104,0,96,96,94,106,108],
[118,110,114,0,123,104,128,121],
[107,93,114,87,0,88,98,118],
[113,102,116,106,122,0,117,114],
[98,110,104,82,112,93,0,114],
[105,100,102,89,92,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,128,109,97,104,113,102],
[93,0,106,110,84,106,103,79],
[82,104,0,120,106,100,96,76],
[101,100,90,0,87,101,106,96],
[113,126,104,123,0,125,122,108],
[106,104,110,109,85,0,108,103],
[97,107,114,104,88,102,0,98],
[108,131,134,114,102,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,113,103,109,105,101],
[101,0,108,109,107,103,113,97],
[109,102,0,109,101,107,107,105],
[97,101,101,0,103,101,94,95],
[107,103,109,107,0,110,109,103],
[101,107,103,109,100,0,114,111],
[105,97,103,116,101,96,0,97],
[109,113,105,115,107,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,119,96,128,102,117],
[108,0,96,114,99,133,104,115],
[93,114,0,133,114,110,101,114],
[91,96,77,0,91,90,113,99],
[114,111,96,119,0,139,126,136],
[82,77,100,120,71,0,89,109],
[108,106,109,97,84,121,0,121],
[93,95,96,111,74,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,114,137,154,110,127,105],
[117,0,115,95,131,122,119,114],
[96,95,0,125,144,138,116,130],
[73,115,85,0,135,104,123,86],
[56,79,66,75,0,77,100,89],
[100,88,72,106,133,0,121,112],
[83,91,94,87,110,89,0,71],
[105,96,80,124,121,98,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,95,96,97,99,99,94],
[125,0,102,105,100,105,105,86],
[115,108,0,111,102,108,96,113],
[114,105,99,0,102,110,111,103],
[113,110,108,108,0,102,91,101],
[111,105,102,100,108,0,106,114],
[111,105,114,99,119,104,0,112],
[116,124,97,107,109,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,104,103,119,101,92],
[103,0,113,104,105,104,104,88],
[101,97,0,100,105,106,105,110],
[106,106,110,0,112,105,109,97],
[107,105,105,98,0,105,108,94],
[91,106,104,105,105,0,112,106],
[109,106,105,101,102,98,0,87],
[118,122,100,113,116,104,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,95,94,98,106,108],
[108,0,106,112,109,112,105,109],
[106,104,0,109,100,105,109,108],
[115,98,101,0,104,94,101,115],
[116,101,110,106,0,101,126,105],
[112,98,105,116,109,0,128,105],
[104,105,101,109,84,82,0,101],
[102,101,102,95,105,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,116,110,111,99,108],
[101,0,99,101,102,88,91,101],
[106,111,0,107,97,108,101,91],
[94,109,103,0,100,111,106,95],
[100,108,113,110,0,113,111,104],
[99,122,102,99,97,0,104,116],
[111,119,109,104,99,106,0,105],
[102,109,119,115,106,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,89,108,103,110,129],
[96,0,115,87,90,96,93,112],
[94,95,0,97,97,96,91,124],
[121,123,113,0,121,107,102,135],
[102,120,113,89,0,114,102,124],
[107,114,114,103,96,0,95,133],
[100,117,119,108,108,115,0,130],
[81,98,86,75,86,77,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,109,112,86,109,106,100],
[122,0,119,98,109,105,120,115],
[101,91,0,103,94,96,114,88],
[98,112,107,0,102,103,122,98],
[124,101,116,108,0,101,113,109],
[101,105,114,107,109,0,115,102],
[104,90,96,88,97,95,0,83],
[110,95,122,112,101,108,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,127,120,111,112,97,149],
[113,0,139,128,141,130,77,165],
[83,71,0,89,105,102,95,115],
[90,82,121,0,125,124,99,154],
[99,69,105,85,0,78,101,122],
[98,80,108,86,132,0,109,139],
[113,133,115,111,109,101,0,156],
[61,45,95,56,88,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,85,90,94,97,85],
[113,0,108,105,107,98,116,103],
[117,102,0,94,94,107,105,105],
[125,105,116,0,113,105,123,107],
[120,103,116,97,0,97,112,101],
[116,112,103,105,113,0,101,99],
[113,94,105,87,98,109,0,100],
[125,107,105,103,109,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,106,96,101,95,102],
[103,0,101,103,104,106,102,105],
[103,109,0,103,101,102,93,99],
[104,107,107,0,108,103,99,102],
[114,106,109,102,0,106,100,96],
[109,104,108,107,104,0,106,107],
[115,108,117,111,110,104,0,101],
[108,105,111,108,114,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,110,122,116,129,102],
[103,0,138,87,106,134,123,120],
[84,72,0,77,110,92,88,83],
[100,123,133,0,136,106,152,116],
[88,104,100,74,0,82,96,98],
[94,76,118,104,128,0,86,111],
[81,87,122,58,114,124,0,89],
[108,90,127,94,112,99,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,102,120,105,110,97],
[93,0,88,99,112,97,97,103],
[107,122,0,106,119,106,105,105],
[108,111,104,0,112,107,103,101],
[90,98,91,98,0,91,110,94],
[105,113,104,103,119,0,117,123],
[100,113,105,107,100,93,0,96],
[113,107,105,109,116,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,128,108,97,122,115,118],
[95,0,133,105,117,111,113,128],
[82,77,0,71,80,95,94,96],
[102,105,139,0,119,121,113,115],
[113,93,130,91,0,124,119,122],
[88,99,115,89,86,0,113,97],
[95,97,116,97,91,97,0,105],
[92,82,114,95,88,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,102,121,95,106,113],
[98,0,88,109,91,84,82,139],
[100,122,0,90,122,112,112,122],
[108,101,120,0,108,82,102,139],
[89,119,88,102,0,124,114,122],
[115,126,98,128,86,0,113,140],
[104,128,98,108,96,97,0,118],
[97,71,88,71,88,70,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,120,128,118,116,97],
[102,0,103,133,125,108,124,109],
[106,107,0,121,119,104,122,120],
[90,77,89,0,102,92,102,83],
[82,85,91,108,0,108,101,95],
[92,102,106,118,102,0,108,116],
[94,86,88,108,109,102,0,97],
[113,101,90,127,115,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,102,114,118,103,99,110],
[85,0,102,115,103,110,105,125],
[108,108,0,105,104,98,107,116],
[96,95,105,0,108,105,113,105],
[92,107,106,102,0,118,106,122],
[107,100,112,105,92,0,97,105],
[111,105,103,97,104,113,0,129],
[100,85,94,105,88,105,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,93,116,95,69,69,70],
[95,0,116,139,72,93,23,93],
[117,94,0,141,95,140,117,141],
[94,71,69,0,49,71,46,70],
[115,138,115,161,0,92,115,139],
[141,117,70,139,118,0,46,70],
[141,187,93,164,95,164,0,141],
[140,117,69,140,71,140,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,107,93,98,120,96],
[93,0,93,93,105,106,103,78],
[106,117,0,101,108,131,115,111],
[103,117,109,0,104,126,124,113],
[117,105,102,106,0,97,117,82],
[112,104,79,84,113,0,92,93],
[90,107,95,86,93,118,0,78],
[114,132,99,97,128,117,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,99,101,90,97,118],
[113,0,98,94,66,79,99,95],
[106,112,0,96,95,100,104,101],
[111,116,114,0,96,99,95,103],
[109,144,115,114,0,113,109,103],
[120,131,110,111,97,0,117,111],
[113,111,106,115,101,93,0,116],
[92,115,109,107,107,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,121,117,118,115,105],
[104,0,114,112,91,100,103,99],
[97,96,0,109,92,97,91,95],
[89,98,101,0,104,99,91,98],
[93,119,118,106,0,119,99,94],
[92,110,113,111,91,0,100,86],
[95,107,119,119,111,110,0,113],
[105,111,115,112,116,124,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,104,101,102,128,109],
[106,0,118,108,104,103,114,107],
[96,92,0,101,109,102,123,92],
[106,102,109,0,119,102,118,110],
[109,106,101,91,0,102,122,115],
[108,107,108,108,108,0,111,105],
[82,96,87,92,88,99,0,89],
[101,103,118,100,95,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,118,96,106,105,108],
[104,0,90,110,104,99,91,114],
[109,120,0,118,105,117,95,115],
[92,100,92,0,87,93,88,94],
[114,106,105,123,0,107,103,118],
[104,111,93,117,103,0,94,109],
[105,119,115,122,107,116,0,119],
[102,96,95,116,92,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,98,115,119,107,107],
[107,0,121,108,105,111,113,98],
[98,89,0,93,103,101,110,101],
[112,102,117,0,111,109,117,104],
[95,105,107,99,0,104,110,102],
[91,99,109,101,106,0,102,85],
[103,97,100,93,100,108,0,97],
[103,112,109,106,108,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,95,90,121,96,75],
[114,0,119,101,123,107,118,96],
[109,91,0,109,113,102,107,93],
[115,109,101,0,112,113,133,101],
[120,87,97,98,0,89,119,115],
[89,103,108,97,121,0,97,95],
[114,92,103,77,91,113,0,97],
[135,114,117,109,95,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,111,120,108,101,87,103],
[126,0,124,138,124,125,105,121],
[99,86,0,110,98,95,91,93],
[90,72,100,0,83,104,85,107],
[102,86,112,127,0,107,96,112],
[109,85,115,106,103,0,102,107],
[123,105,119,125,114,108,0,116],
[107,89,117,103,98,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,96,110,114,102,98],
[100,0,104,94,96,96,93,98],
[96,106,0,91,97,104,93,101],
[114,116,119,0,113,118,104,112],
[100,114,113,97,0,106,102,99],
[96,114,106,92,104,0,95,96],
[108,117,117,106,108,115,0,105],
[112,112,109,98,111,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,94,105,113,104,103],
[116,0,82,116,105,124,105,95],
[108,128,0,75,118,146,118,115],
[116,94,135,0,117,135,127,104],
[105,105,92,93,0,137,114,113],
[97,86,64,75,73,0,94,104],
[106,105,92,83,96,116,0,94],
[107,115,95,106,97,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,146,112,101,117,154],
[98,0,77,119,91,69,119,121],
[96,133,0,130,110,129,119,151],
[64,91,80,0,93,61,66,90],
[98,119,100,117,0,100,96,132],
[109,141,81,149,110,0,120,130],
[93,91,91,144,114,90,0,141],
[56,89,59,120,78,80,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,97,109,116,123,105],
[100,0,103,109,105,111,119,109],
[113,107,0,112,110,118,120,105],
[113,101,98,0,113,111,112,119],
[101,105,100,97,0,107,111,102],
[94,99,92,99,103,0,100,110],
[87,91,90,98,99,110,0,103],
[105,101,105,91,108,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,110,97,129,92,101,103],
[92,0,101,108,121,96,105,74],
[100,109,0,99,114,90,109,111],
[113,102,111,0,124,106,107,112],
[81,89,96,86,0,93,88,103],
[118,114,120,104,117,0,120,111],
[109,105,101,103,122,90,0,97],
[107,136,99,98,107,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,80,101,85,79,96,80],
[93,0,79,96,86,80,113,106],
[130,131,0,136,123,89,103,121],
[109,114,74,0,99,107,94,87],
[125,124,87,111,0,88,115,119],
[131,130,121,103,122,0,118,114],
[114,97,107,116,95,92,0,88],
[130,104,89,123,91,96,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,86,104,103,100,96],
[96,0,100,104,95,105,94,80],
[102,110,0,95,93,115,94,100],
[124,106,115,0,105,120,100,112],
[106,115,117,105,0,111,108,105],
[107,105,95,90,99,0,95,102],
[110,116,116,110,102,115,0,114],
[114,130,110,98,105,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,108,100,102,109,106],
[92,0,85,89,101,107,104,97],
[104,125,0,110,107,102,98,93],
[102,121,100,0,86,109,106,97],
[110,109,103,124,0,111,100,97],
[108,103,108,101,99,0,99,97],
[101,106,112,104,110,111,0,104],
[104,113,117,113,113,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,78,95,93,83,73,77],
[118,0,101,90,93,91,95,83],
[132,109,0,100,98,97,93,92],
[115,120,110,0,98,97,91,112],
[117,117,112,112,0,90,86,108],
[127,119,113,113,120,0,113,99],
[137,115,117,119,124,97,0,108],
[133,127,118,98,102,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,97,95,90,108,107],
[99,0,112,100,111,107,100,105],
[110,98,0,110,98,102,109,98],
[113,110,100,0,100,102,102,122],
[115,99,112,110,0,104,103,104],
[120,103,108,108,106,0,107,122],
[102,110,101,108,107,103,0,106],
[103,105,112,88,106,88,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,111,106,103,110,108],
[107,0,105,101,101,105,107,104],
[114,105,0,107,110,106,104,107],
[99,109,103,0,106,104,101,105],
[104,109,100,104,0,101,109,104],
[107,105,104,106,109,0,106,108],
[100,103,106,109,101,104,0,103],
[102,106,103,105,106,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,119,100,122,130,117],
[111,0,106,122,108,100,107,99],
[109,104,0,130,111,103,132,112],
[91,88,80,0,90,88,121,100],
[110,102,99,120,0,116,127,125],
[88,110,107,122,94,0,122,117],
[80,103,78,89,83,88,0,98],
[93,111,98,110,85,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,102,107,120,108,90],
[110,0,92,98,106,119,98,93],
[114,118,0,101,100,104,98,106],
[108,112,109,0,109,116,112,102],
[103,104,110,101,0,106,108,93],
[90,91,106,94,104,0,91,88],
[102,112,112,98,102,119,0,84],
[120,117,104,108,117,122,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,86,50,72,100,60,124],
[109,0,96,73,119,110,74,147],
[124,114,0,61,109,100,137,111],
[160,137,149,0,132,88,111,137],
[138,91,101,78,0,76,100,115],
[110,100,110,122,134,0,121,123],
[150,136,73,99,110,89,0,137],
[86,63,99,73,95,87,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,83,81,90,130,102,84],
[127,0,96,104,116,125,109,116],
[127,114,0,101,98,132,105,113],
[129,106,109,0,100,145,102,78],
[120,94,112,110,0,135,92,86],
[80,85,78,65,75,0,76,81],
[108,101,105,108,118,134,0,81],
[126,94,97,132,124,129,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,87,51,86,105,61,75],
[86,0,58,68,55,75,55,78],
[123,152,0,105,133,137,109,118],
[159,142,105,0,120,142,108,133],
[124,155,77,90,0,104,68,101],
[105,135,73,68,106,0,82,99],
[149,155,101,102,142,128,0,111],
[135,132,92,77,109,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,108,93,106,102,97],
[105,0,106,106,109,99,107,104],
[106,104,0,106,110,108,101,102],
[102,104,104,0,107,101,103,100],
[117,101,100,103,0,97,101,92],
[104,111,102,109,113,0,110,105],
[108,103,109,107,109,100,0,99],
[113,106,108,110,118,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,90,93,100,106,98],
[109,0,98,94,88,91,104,87],
[112,112,0,105,104,114,104,106],
[120,116,105,0,100,106,119,97],
[117,122,106,110,0,97,128,106],
[110,119,96,104,113,0,111,110],
[104,106,106,91,82,99,0,92],
[112,123,104,113,104,100,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,135,66,106,122,132,136],
[106,0,131,77,108,107,118,132],
[75,79,0,65,93,78,114,146],
[144,133,145,0,104,120,158,134],
[104,102,117,106,0,115,119,117],
[88,103,132,90,95,0,145,170],
[78,92,96,52,91,65,0,120],
[74,78,64,76,93,40,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,102,105,106,103,115],
[109,0,105,97,92,113,93,103],
[111,105,0,98,102,111,106,116],
[108,113,112,0,114,124,99,111],
[105,118,108,96,0,110,104,107],
[104,97,99,86,100,0,90,108],
[107,117,104,111,106,120,0,119],
[95,107,94,99,103,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,106,123,104,112,119],
[96,0,89,94,99,89,99,104],
[116,121,0,110,130,103,123,121],
[104,116,100,0,129,106,118,108],
[87,111,80,81,0,88,101,98],
[106,121,107,104,122,0,114,120],
[98,111,87,92,109,96,0,112],
[91,106,89,102,112,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,118,101,121,121,126],
[105,0,125,126,99,110,105,123],
[94,85,0,108,98,93,99,102],
[92,84,102,0,95,97,101,117],
[109,111,112,115,0,109,105,115],
[89,100,117,113,101,0,101,116],
[89,105,111,109,105,109,0,116],
[84,87,108,93,95,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,99,101,95,90,100],
[103,0,91,89,96,95,95,95],
[116,119,0,114,106,94,107,101],
[111,121,96,0,99,109,97,102],
[109,114,104,111,0,107,118,107],
[115,115,116,101,103,0,110,108],
[120,115,103,113,92,100,0,107],
[110,115,109,108,103,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,111,110,107,126,110],
[107,0,99,112,106,106,116,102],
[105,111,0,114,107,109,127,108],
[99,98,96,0,107,100,113,101],
[100,104,103,103,0,106,120,97],
[103,104,101,110,104,0,115,101],
[84,94,83,97,90,95,0,85],
[100,108,102,109,113,109,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,74,92,96,92,89,94],
[119,0,106,93,104,101,100,111],
[136,104,0,115,113,121,102,124],
[118,117,95,0,108,94,117,99],
[114,106,97,102,0,98,94,95],
[118,109,89,116,112,0,109,101],
[121,110,108,93,116,101,0,105],
[116,99,86,111,115,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,117,107,91,104,93,104],
[120,0,111,129,126,106,101,106],
[93,99,0,99,104,110,100,87],
[103,81,111,0,96,89,96,87],
[119,84,106,114,0,113,103,96],
[106,104,100,121,97,0,118,95],
[117,109,110,114,107,92,0,91],
[106,104,123,123,114,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,93,96,88,83,86],
[122,0,94,106,109,97,91,102],
[115,116,0,112,108,101,84,106],
[117,104,98,0,102,106,93,94],
[114,101,102,108,0,99,85,104],
[122,113,109,104,111,0,106,119],
[127,119,126,117,125,104,0,108],
[124,108,104,116,106,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,112,112,113,103,119,109],
[89,0,100,112,112,98,116,98],
[98,110,0,113,104,108,125,103],
[98,98,97,0,103,87,111,99],
[97,98,106,107,0,100,106,96],
[107,112,102,123,110,0,126,115],
[91,94,85,99,104,84,0,88],
[101,112,107,111,114,95,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,117,137,109,119,119],
[108,0,101,93,105,96,108,101],
[101,109,0,88,107,100,101,110],
[93,117,122,0,105,101,115,103],
[73,105,103,105,0,85,87,101],
[101,114,110,109,125,0,109,126],
[91,102,109,95,123,101,0,105],
[91,109,100,107,109,84,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,113,106,93,101,106],
[98,0,108,107,105,107,101,108],
[91,102,0,112,96,114,105,104],
[97,103,98,0,102,101,104,105],
[104,105,114,108,0,113,106,109],
[117,103,96,109,97,0,106,109],
[109,109,105,106,104,104,0,101],
[104,102,106,105,101,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,100,122,114,120,136,136],
[88,0,83,90,114,103,119,87],
[110,127,0,109,139,106,143,104],
[88,120,101,0,126,118,131,97],
[96,96,71,84,0,98,106,95],
[90,107,104,92,112,0,121,91],
[74,91,67,79,104,89,0,90],
[74,123,106,113,115,119,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,127,112,118,130,110],
[94,0,122,124,110,118,129,116],
[108,88,0,112,103,113,105,88],
[83,86,98,0,100,102,114,79],
[98,100,107,110,0,113,118,93],
[92,92,97,108,97,0,100,101],
[80,81,105,96,92,110,0,103],
[100,94,122,131,117,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,98,114,107,104,102],
[110,0,102,108,99,106,101,108],
[99,108,0,102,101,109,100,105],
[112,102,108,0,108,123,105,104],
[96,111,109,102,0,103,105,104],
[103,104,101,87,107,0,95,104],
[106,109,110,105,105,115,0,114],
[108,102,105,106,106,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,91,117,110,102,112],
[109,0,105,106,108,97,101,111],
[101,105,0,102,104,105,103,108],
[119,104,108,0,109,111,104,117],
[93,102,106,101,0,103,106,101],
[100,113,105,99,107,0,92,104],
[108,109,107,106,104,118,0,118],
[98,99,102,93,109,106,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,111,115,114,111,114],
[107,0,125,111,113,116,101,113],
[97,85,0,96,102,100,104,98],
[99,99,114,0,109,114,102,105],
[95,97,108,101,0,106,101,102],
[96,94,110,96,104,0,98,108],
[99,109,106,108,109,112,0,104],
[96,97,112,105,108,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,111,87,109,104,110],
[121,0,103,110,106,117,110,118],
[107,107,0,109,105,117,99,111],
[99,100,101,0,90,104,98,109],
[123,104,105,120,0,113,119,123],
[101,93,93,106,97,0,107,115],
[106,100,111,112,91,103,0,115],
[100,92,99,101,87,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,100,117,101,103,104],
[107,0,96,92,113,95,111,108],
[99,114,0,104,114,98,103,113],
[110,118,106,0,119,105,109,112],
[93,97,96,91,0,92,90,99],
[109,115,112,105,118,0,113,119],
[107,99,107,101,120,97,0,105],
[106,102,97,98,111,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,97,97,108,102,100],
[109,0,113,109,101,110,119,105],
[104,97,0,97,110,105,102,100],
[113,101,113,0,119,124,114,117],
[113,109,100,91,0,110,104,106],
[102,100,105,86,100,0,100,95],
[108,91,108,96,106,110,0,100],
[110,105,110,93,104,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,104,120,118,109,112],
[101,0,110,113,126,106,111,103],
[92,100,0,115,113,107,99,93],
[106,97,95,0,135,109,112,94],
[90,84,97,75,0,95,94,81],
[92,104,103,101,115,0,87,105],
[101,99,111,98,116,123,0,106],
[98,107,117,116,129,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,116,129,107,111,98],
[101,0,91,103,116,105,96,97],
[103,119,0,106,108,128,110,112],
[94,107,104,0,118,111,113,105],
[81,94,102,92,0,98,95,94],
[103,105,82,99,112,0,108,103],
[99,114,100,97,115,102,0,98],
[112,113,98,105,116,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,108,106,100,100,100],
[102,0,97,100,97,100,101,99],
[104,113,0,107,117,109,95,105],
[102,110,103,0,103,98,107,95],
[104,113,93,107,0,104,98,101],
[110,110,101,112,106,0,96,98],
[110,109,115,103,112,114,0,107],
[110,111,105,115,109,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,54,114,112,58,111,74],
[114,0,113,154,113,59,151,76],
[156,97,0,135,130,59,171,116],
[96,56,75,0,75,59,95,76],
[98,97,80,135,0,60,117,117],
[152,151,151,151,150,0,131,95],
[99,59,39,115,93,79,0,19],
[136,134,94,134,93,115,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,109,106,108,118,106],
[102,0,106,106,116,103,97,111],
[107,104,0,96,102,86,114,102],
[101,104,114,0,99,99,99,109],
[104,94,108,111,0,95,101,105],
[102,107,124,111,115,0,119,111],
[92,113,96,111,109,91,0,107],
[104,99,108,101,105,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,96,63,77,74,74,72],
[87,0,115,92,117,92,104,69],
[114,95,0,83,84,92,106,96],
[147,118,127,0,118,139,127,92],
[133,93,126,92,0,104,94,108],
[136,118,118,71,106,0,127,95],
[136,106,104,83,116,83,0,133],
[138,141,114,118,102,115,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,112,90,111,96,107],
[105,0,122,107,98,111,102,103],
[107,88,0,100,93,97,97,93],
[98,103,110,0,101,96,106,102],
[120,112,117,109,0,112,96,105],
[99,99,113,114,98,0,92,111],
[114,108,113,104,114,118,0,111],
[103,107,117,108,105,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,100,102,106,106,113,108],
[88,0,101,101,99,96,108,105],
[110,109,0,111,110,101,106,103],
[108,109,99,0,104,96,105,106],
[104,111,100,106,0,101,110,112],
[104,114,109,114,109,0,114,122],
[97,102,104,105,100,96,0,107],
[102,105,107,104,98,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,120,90,90,150,120,120],
[90,0,90,90,91,90,90,0],
[90,120,0,60,60,150,149,120],
[120,120,150,0,90,180,180,90],
[120,119,150,120,0,150,150,90],
[60,120,60,30,60,0,89,60],
[90,120,61,30,60,121,0,120],
[90,210,90,120,120,150,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,93,110,97,95,91],
[112,0,102,103,109,99,91,109],
[116,108,0,104,112,106,105,106],
[117,107,106,0,98,101,103,105],
[100,101,98,112,0,91,105,107],
[113,111,104,109,119,0,106,104],
[115,119,105,107,105,104,0,112],
[119,101,104,105,103,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,97,114,116,97,99],
[109,0,96,98,105,109,80,103],
[97,114,0,105,110,109,99,114],
[113,112,105,0,105,109,87,96],
[96,105,100,105,0,107,106,109],
[94,101,101,101,103,0,100,115],
[113,130,111,123,104,110,0,122],
[111,107,96,114,101,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,113,114,106,104,110],
[93,0,93,99,106,107,99,91],
[106,117,0,104,114,108,97,97],
[97,111,106,0,112,112,106,109],
[96,104,96,98,0,96,104,96],
[104,103,102,98,114,0,92,103],
[106,111,113,104,106,118,0,117],
[100,119,113,101,114,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,86,61,70,74,71,80],
[126,0,108,77,91,114,86,106],
[124,102,0,65,80,110,103,84],
[149,133,145,0,99,137,106,119],
[140,119,130,111,0,133,114,101],
[136,96,100,73,77,0,83,97],
[139,124,107,104,96,127,0,118],
[130,104,126,91,109,113,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,123,105,108,88,118],
[97,0,96,99,86,79,89,114],
[106,114,0,112,102,118,103,106],
[87,111,98,0,94,102,92,103],
[105,124,108,116,0,102,117,121],
[102,131,92,108,108,0,103,128],
[122,121,107,118,93,107,0,142],
[92,96,104,107,89,82,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,101,119,125,108,100],
[88,0,99,94,111,111,97,97],
[98,111,0,123,123,118,125,99],
[109,116,87,0,105,119,89,85],
[91,99,87,105,0,98,105,85],
[85,99,92,91,112,0,118,104],
[102,113,85,121,105,92,0,120],
[110,113,111,125,125,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,81,94,121,103,100,112],
[107,0,100,111,111,103,102,108],
[129,110,0,109,103,113,115,116],
[116,99,101,0,110,92,93,104],
[89,99,107,100,0,118,89,100],
[107,107,97,118,92,0,100,101],
[110,108,95,117,121,110,0,97],
[98,102,94,106,110,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,102,86,91,94,99],
[113,0,114,118,114,114,103,114],
[105,96,0,111,103,90,96,102],
[108,92,99,0,103,102,99,111],
[124,96,107,107,0,114,107,119],
[119,96,120,108,96,0,101,107],
[116,107,114,111,103,109,0,102],
[111,96,108,99,91,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,88,79,93,80,102],
[98,0,103,105,84,99,86,100],
[111,107,0,103,97,115,113,110],
[122,105,107,0,99,110,101,103],
[131,126,113,111,0,118,103,114],
[117,111,95,100,92,0,84,106],
[130,124,97,109,107,126,0,103],
[108,110,100,107,96,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,100,90,91,85,82],
[122,0,115,106,119,99,98,89],
[116,95,0,113,105,101,101,99],
[110,104,97,0,100,93,97,90],
[120,91,105,110,0,109,84,90],
[119,111,109,117,101,0,110,91],
[125,112,109,113,126,100,0,115],
[128,121,111,120,120,119,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,97,101,106,118,112],
[102,0,106,105,105,108,109,116],
[96,104,0,99,101,99,105,98],
[113,105,111,0,106,109,124,113],
[109,105,109,104,0,120,116,109],
[104,102,111,101,90,0,106,102],
[92,101,105,86,94,104,0,107],
[98,94,112,97,101,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,112,109,125,108,117],
[115,0,107,118,102,109,104,111],
[102,103,0,114,113,122,104,102],
[98,92,96,0,94,128,99,119],
[101,108,97,116,0,122,111,121],
[85,101,88,82,88,0,97,90],
[102,106,106,111,99,113,0,117],
[93,99,108,91,89,120,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,108,118,94,98,125],
[94,0,113,111,115,82,108,121],
[99,97,0,116,117,94,97,126],
[102,99,94,0,95,88,78,108],
[92,95,93,115,0,93,92,114],
[116,128,116,122,117,0,90,139],
[112,102,113,132,118,120,0,121],
[85,89,84,102,96,71,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,82,111,91,114,107,90],
[99,0,86,105,97,106,108,91],
[128,124,0,98,115,118,106,107],
[99,105,112,0,111,113,104,108],
[119,113,95,99,0,101,107,109],
[96,104,92,97,109,0,97,83],
[103,102,104,106,103,113,0,94],
[120,119,103,102,101,127,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,87,90,103,113,104],
[100,0,94,90,111,92,109,95],
[114,116,0,90,106,109,115,106],
[123,120,120,0,108,112,111,105],
[120,99,104,102,0,100,101,102],
[107,118,101,98,110,0,104,112],
[97,101,95,99,109,106,0,96],
[106,115,104,105,108,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,120,105,86,110,103,105],
[116,0,114,121,105,107,115,119],
[90,96,0,104,82,102,103,94],
[105,89,106,0,89,104,98,103],
[124,105,128,121,0,111,128,113],
[100,103,108,106,99,0,107,99],
[107,95,107,112,82,103,0,110],
[105,91,116,107,97,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,115,109,105,112,116],
[94,0,106,106,91,93,102,97],
[94,104,0,113,99,92,97,101],
[95,104,97,0,104,107,108,103],
[101,119,111,106,0,105,103,106],
[105,117,118,103,105,0,105,104],
[98,108,113,102,107,105,0,110],
[94,113,109,107,104,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,103,104,100,106,119],
[113,0,111,117,98,104,111,119],
[104,99,0,99,95,118,96,112],
[107,93,111,0,108,112,110,119],
[106,112,115,102,0,103,112,114],
[110,106,92,98,107,0,91,119],
[104,99,114,100,98,119,0,111],
[91,91,98,91,96,91,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,110,116,108,80,110],
[111,0,129,124,116,101,89,111],
[97,81,0,106,107,98,74,94],
[100,86,104,0,110,108,105,109],
[94,94,103,100,0,96,98,101],
[102,109,112,102,114,0,100,96],
[130,121,136,105,112,110,0,121],
[100,99,116,101,109,114,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,89,124,116,103,96,79],
[82,0,69,115,97,104,107,106],
[121,141,0,127,117,127,102,72],
[86,95,83,0,103,103,101,83],
[94,113,93,107,0,130,125,84],
[107,106,83,107,80,0,105,64],
[114,103,108,109,85,105,0,71],
[131,104,138,127,126,146,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,105,102,126,111,108],
[102,0,118,103,92,109,112,110],
[93,92,0,83,83,92,91,98],
[105,107,127,0,100,100,120,111],
[108,118,127,110,0,101,113,117],
[84,101,118,110,109,0,106,119],
[99,98,119,90,97,104,0,116],
[102,100,112,99,93,91,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,140,140,139,139,139,140],
[141,0,140,71,210,210,210,210],
[70,70,0,0,70,70,70,141],
[70,139,210,0,139,139,139,210],
[71,0,140,71,0,71,71,71],
[71,0,140,71,139,0,71,140],
[71,0,140,71,139,139,0,140],
[70,0,69,0,139,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,83,127,107,96,111,89],
[94,0,111,137,102,117,138,106],
[127,99,0,138,89,84,121,107],
[83,73,72,0,67,57,92,88],
[103,108,121,143,0,80,113,113],
[114,93,126,153,130,0,130,110],
[99,72,89,118,97,80,0,94],
[121,104,103,122,97,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,97,100,97,101,112],
[112,0,107,97,113,105,110,111],
[96,103,0,97,102,102,106,109],
[113,113,113,0,106,104,114,112],
[110,97,108,104,0,104,93,110],
[113,105,108,106,106,0,113,110],
[109,100,104,96,117,97,0,96],
[98,99,101,98,100,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,82,74,91,97,84,91],
[104,0,83,91,100,95,84,86],
[128,127,0,111,131,119,100,109],
[136,119,99,0,105,119,106,104],
[119,110,79,105,0,116,80,96],
[113,115,91,91,94,0,85,90],
[126,126,110,104,130,125,0,122],
[119,124,101,106,114,120,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,123,110,134,91,130],
[91,0,99,117,115,140,90,114],
[92,111,0,98,113,130,103,115],
[87,93,112,0,116,93,108,110],
[100,95,97,94,0,108,81,94],
[76,70,80,117,102,0,94,97],
[119,120,107,102,129,116,0,119],
[80,96,95,100,116,113,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,114,107,103,108,114],
[116,0,110,105,118,99,117,104],
[110,100,0,116,117,113,114,97],
[96,105,94,0,113,105,101,104],
[103,92,93,97,0,95,96,91],
[107,111,97,105,115,0,109,101],
[102,93,96,109,114,101,0,97],
[96,106,113,106,119,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,89,105,139,106,104],
[87,0,114,70,88,95,97,86],
[95,96,0,86,130,104,104,103],
[121,140,124,0,157,131,104,130],
[105,122,80,53,0,95,79,69],
[71,115,106,79,115,0,97,104],
[104,113,106,106,131,113,0,122],
[106,124,107,80,141,106,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,96,112,93,99,85],
[113,0,106,104,112,102,107,89],
[104,104,0,99,107,103,108,98],
[114,106,111,0,115,111,111,101],
[98,98,103,95,0,94,98,90],
[117,108,107,99,116,0,119,114],
[111,103,102,99,112,91,0,100],
[125,121,112,109,120,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,105,111,110,104,110],
[98,0,104,111,92,104,91,100],
[100,106,0,105,107,94,102,101],
[105,99,105,0,99,108,101,101],
[99,118,103,111,0,109,114,107],
[100,106,116,102,101,0,98,106],
[106,119,108,109,96,112,0,103],
[100,110,109,109,103,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,91,97,98,105,106,106],
[105,0,94,91,98,104,117,108],
[119,116,0,108,104,117,113,114],
[113,119,102,0,101,117,112,112],
[112,112,106,109,0,105,107,109],
[105,106,93,93,105,0,111,102],
[104,93,97,98,103,99,0,105],
[104,102,96,98,101,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,95,112,102,109,101],
[106,0,105,95,106,110,100,102],
[97,105,0,94,106,102,95,92],
[115,115,116,0,129,100,109,125],
[98,104,104,81,0,103,96,102],
[108,100,108,110,107,0,108,87],
[101,110,115,101,114,102,0,117],
[109,108,118,85,108,123,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,86,91,85,96,96,88],
[121,0,109,124,98,119,107,111],
[124,101,0,103,87,102,84,117],
[119,86,107,0,83,109,77,96],
[125,112,123,127,0,128,99,123],
[114,91,108,101,82,0,80,88],
[114,103,126,133,111,130,0,116],
[122,99,93,114,87,122,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,101,115,115,107,89],
[99,0,80,99,97,94,94,89],
[100,130,0,105,125,112,94,107],
[109,111,105,0,93,107,108,99],
[95,113,85,117,0,113,91,77],
[95,116,98,103,97,0,94,106],
[103,116,116,102,119,116,0,100],
[121,121,103,111,133,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,88,118,100,111,116],
[102,0,106,101,107,112,106,121],
[100,104,0,99,131,102,113,115],
[122,109,111,0,116,98,109,121],
[92,103,79,94,0,82,102,110],
[110,98,108,112,128,0,110,125],
[99,104,97,101,108,100,0,107],
[94,89,95,89,100,85,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,119,95,116,107,107,117],
[114,0,98,105,120,121,118,118],
[91,112,0,107,111,115,125,121],
[115,105,103,0,110,119,124,117],
[94,90,99,100,0,105,107,104],
[103,89,95,91,105,0,94,114],
[103,92,85,86,103,116,0,107],
[93,92,89,93,106,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,124,111,106,100,99,109],
[84,0,93,112,81,91,97,84],
[86,117,0,103,91,94,89,111],
[99,98,107,0,96,106,110,101],
[104,129,119,114,0,118,105,120],
[110,119,116,104,92,0,104,100],
[111,113,121,100,105,106,0,98],
[101,126,99,109,90,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,103,96,102,99,105,110],
[119,0,109,100,97,101,118,114],
[107,101,0,116,100,96,93,113],
[114,110,94,0,107,106,107,118],
[108,113,110,103,0,105,112,127],
[111,109,114,104,105,0,107,124],
[105,92,117,103,98,103,0,107],
[100,96,97,92,83,86,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,130,131,118,119,103,141],
[88,0,109,119,115,114,102,120],
[80,101,0,100,103,108,82,104],
[79,91,110,0,88,103,97,114],
[92,95,107,122,0,102,107,120],
[91,96,102,107,108,0,94,119],
[107,108,128,113,103,116,0,128],
[69,90,106,96,90,91,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,106,112,115,102,99,95],
[84,0,96,105,96,86,83,93],
[104,114,0,109,107,110,108,105],
[98,105,101,0,101,106,100,105],
[95,114,103,109,0,102,107,94],
[108,124,100,104,108,0,112,97],
[111,127,102,110,103,98,0,95],
[115,117,105,105,116,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,126,114,101,122,114,105],
[100,0,114,87,89,111,112,108],
[84,96,0,87,75,98,126,101],
[96,123,123,0,114,154,121,127],
[109,121,135,96,0,117,124,124],
[88,99,112,56,93,0,77,93],
[96,98,84,89,86,133,0,87],
[105,102,109,83,86,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,93,114,96,93,107],
[122,0,95,119,109,106,103,118],
[115,115,0,116,97,97,97,115],
[117,91,94,0,108,102,105,119],
[96,101,113,102,0,101,101,98],
[114,104,113,108,109,0,99,113],
[117,107,113,105,109,111,0,102],
[103,92,95,91,112,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,101,109,110,112,111],
[103,0,117,107,96,116,105,92],
[102,93,0,100,104,99,120,115],
[109,103,110,0,110,109,112,89],
[101,114,106,100,0,107,121,99],
[100,94,111,101,103,0,113,94],
[98,105,90,98,89,97,0,104],
[99,118,95,121,111,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,86,97,98,100,99],
[125,0,102,105,104,110,117,112],
[125,108,0,99,100,111,119,115],
[124,105,111,0,109,110,118,117],
[113,106,110,101,0,106,116,110],
[112,100,99,100,104,0,107,110],
[110,93,91,92,94,103,0,100],
[111,98,95,93,100,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,142,99,92,93,125,112],
[101,0,116,122,109,116,117,134],
[68,94,0,81,87,106,109,96],
[111,88,129,0,95,104,123,127],
[118,101,123,115,0,106,121,106],
[117,94,104,106,104,0,123,108],
[85,93,101,87,89,87,0,111],
[98,76,114,83,104,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,125,128,119,120,126],
[114,0,136,103,130,136,108,136],
[112,74,0,83,102,114,79,83],
[85,107,127,0,122,118,97,114],
[82,80,108,88,0,95,76,83],
[91,74,96,92,115,0,81,94],
[90,102,131,113,134,129,0,120],
[84,74,127,96,127,116,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,113,113,177,146,113,130],
[130,0,95,66,179,97,128,132],
[97,115,0,132,146,83,129,148],
[97,144,78,0,148,66,95,129],
[33,31,64,62,0,65,78,82],
[64,113,127,144,145,0,111,161],
[97,82,81,115,132,99,0,99],
[80,78,62,81,128,49,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,106,97,97,125,130],
[96,0,98,108,117,105,109,103],
[102,112,0,117,128,105,108,113],
[104,102,93,0,94,112,99,122],
[113,93,82,116,0,125,103,103],
[113,105,105,98,85,0,101,104],
[85,101,102,111,107,109,0,112],
[80,107,97,88,107,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,111,97,104,105,113,102],
[117,0,108,91,108,101,109,97],
[99,102,0,95,102,93,114,99],
[113,119,115,0,104,95,121,112],
[106,102,108,106,0,109,126,120],
[105,109,117,115,101,0,121,113],
[97,101,96,89,84,89,0,88],
[108,113,111,98,90,97,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,109,110,101,102,109],
[106,0,110,102,110,101,107,97],
[100,100,0,96,89,93,92,92],
[101,108,114,0,96,103,99,103],
[100,100,121,114,0,111,114,106],
[109,109,117,107,99,0,94,111],
[108,103,118,111,96,116,0,100],
[101,113,118,107,104,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,107,90,103,88,101],
[111,0,105,101,108,97,92,101],
[104,105,0,93,102,96,109,96],
[103,109,117,0,102,104,103,115],
[120,102,108,108,0,121,120,105],
[107,113,114,106,89,0,112,120],
[122,118,101,107,90,98,0,112],
[109,109,114,95,105,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,113,106,113,99,104],
[101,0,103,110,113,117,115,86],
[101,107,0,97,104,119,116,101],
[97,100,113,0,119,128,109,86],
[104,97,106,91,0,117,96,93],
[97,93,91,82,93,0,90,84],
[111,95,94,101,114,120,0,105],
[106,124,109,124,117,126,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,104,107,108,98,103,98],
[124,0,108,104,110,111,115,119],
[106,102,0,100,113,113,118,110],
[103,106,110,0,111,117,102,108],
[102,100,97,99,0,102,97,98],
[112,99,97,93,108,0,120,97],
[107,95,92,108,113,90,0,104],
[112,91,100,102,112,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,107,114,92,113,115],
[110,0,121,105,121,95,103,122],
[117,89,0,103,114,109,117,117],
[103,105,107,0,97,88,95,126],
[96,89,96,113,0,83,83,112],
[118,115,101,122,127,0,118,133],
[97,107,93,115,127,92,0,120],
[95,88,93,84,98,77,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,87,90,100,81,103],
[116,0,113,105,103,103,112,118],
[123,97,0,88,98,103,106,113],
[123,105,122,0,108,112,103,124],
[120,107,112,102,0,120,116,116],
[110,107,107,98,90,0,90,99],
[129,98,104,107,94,120,0,119],
[107,92,97,86,94,111,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,107,81,112,93,95],
[113,0,106,122,101,106,112,110],
[104,104,0,102,105,99,100,105],
[103,88,108,0,89,90,95,101],
[129,109,105,121,0,119,110,118],
[98,104,111,120,91,0,106,104],
[117,98,110,115,100,104,0,97],
[115,100,105,109,92,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,99,93,84,82,87],
[119,0,110,111,105,86,107,76],
[101,100,0,107,98,98,101,105],
[111,99,103,0,101,97,98,101],
[117,105,112,109,0,91,104,96],
[126,124,112,113,119,0,118,103],
[128,103,109,112,106,92,0,91],
[123,134,105,109,114,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,104,92,89,99,109],
[111,0,123,102,111,112,120,118],
[99,87,0,107,106,91,97,109],
[106,108,103,0,99,103,114,119],
[118,99,104,111,0,104,105,118],
[121,98,119,107,106,0,122,122],
[111,90,113,96,105,88,0,108],
[101,92,101,91,92,88,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,95,109,108,120,114],
[104,0,105,75,109,90,111,101],
[102,105,0,91,98,88,111,100],
[115,135,119,0,112,109,119,103],
[101,101,112,98,0,89,97,95],
[102,120,122,101,121,0,124,119],
[90,99,99,91,113,86,0,91],
[96,109,110,107,115,91,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,106,103,108,111,97],
[100,0,105,111,94,99,99,114],
[95,105,0,100,90,100,101,103],
[104,99,110,0,100,102,106,116],
[107,116,120,110,0,97,119,115],
[102,111,110,108,113,0,104,115],
[99,111,109,104,91,106,0,104],
[113,96,107,94,95,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,84,104,114,90,91],
[104,0,92,100,105,104,104,114],
[112,118,0,106,125,109,131,100],
[126,110,104,0,105,123,113,105],
[106,105,85,105,0,112,102,88],
[96,106,101,87,98,0,111,107],
[120,106,79,97,108,99,0,107],
[119,96,110,105,122,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,120,96,96,124,96,121],
[90,0,98,83,93,106,87,90],
[90,112,0,106,82,121,105,107],
[114,127,104,0,108,125,115,120],
[114,117,128,102,0,94,106,107],
[86,104,89,85,116,0,87,91],
[114,123,105,95,104,123,0,112],
[89,120,103,90,103,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,105,115,98,106,107],
[95,0,88,90,96,96,96,97],
[105,122,0,103,108,108,112,111],
[105,120,107,0,112,110,111,112],
[95,114,102,98,0,101,105,108],
[112,114,102,100,109,0,104,111],
[104,114,98,99,105,106,0,104],
[103,113,99,98,102,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,104,114,129,106,111],
[107,0,102,113,100,111,112,99],
[106,108,0,100,115,123,116,109],
[106,97,110,0,100,113,104,102],
[96,110,95,110,0,109,88,102],
[81,99,87,97,101,0,97,107],
[104,98,94,106,122,113,0,108],
[99,111,101,108,108,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,86,93,84,105,104,106],
[127,0,106,100,106,100,107,111],
[124,104,0,96,91,98,97,94],
[117,110,114,0,95,94,102,104],
[126,104,119,115,0,104,100,127],
[105,110,112,116,106,0,98,119],
[106,103,113,108,110,112,0,106],
[104,99,116,106,83,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,103,99,100,89,103],
[117,0,93,99,107,102,99,110],
[114,117,0,109,106,116,102,118],
[107,111,101,0,116,112,105,103],
[111,103,104,94,0,102,93,103],
[110,108,94,98,108,0,91,101],
[121,111,108,105,117,119,0,122],
[107,100,92,107,107,109,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,99,97,93,111,113],
[120,0,115,104,94,114,121,124],
[99,95,0,104,91,109,102,107],
[111,106,106,0,101,97,126,119],
[113,116,119,109,0,101,106,120],
[117,96,101,113,109,0,113,117],
[99,89,108,84,104,97,0,108],
[97,86,103,91,90,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,116,118,89,96,116],
[120,0,119,109,112,106,105,119],
[103,91,0,104,114,100,107,107],
[94,101,106,0,112,105,103,114],
[92,98,96,98,0,98,85,109],
[121,104,110,105,112,0,111,122],
[114,105,103,107,125,99,0,118],
[94,91,103,96,101,88,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_210.csv", index=False, header=False)